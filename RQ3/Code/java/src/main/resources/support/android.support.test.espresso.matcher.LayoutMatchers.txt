android.support.test.espresso.matcher.LayoutMatchers
    private void <init>()
    {
        android.support.test.espresso.matcher.LayoutMatchers r0;

        r0 := @this: android.support.test.espresso.matcher.LayoutMatchers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.hamcrest.Matcher hasEllipsizedText()
    {
        android.support.test.espresso.matcher.LayoutMatchers$1 r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.LayoutMatchers$1;

        specialinvoke r1.<android.support.test.espresso.matcher.LayoutMatchers$1: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher hasMultilineText()
    {
        android.support.test.espresso.matcher.LayoutMatchers$2 r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.LayoutMatchers$2;

        specialinvoke r1.<android.support.test.espresso.matcher.LayoutMatchers$2: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

android.support.test.espresso.matcher.LayoutMatchers$1
    void <init>(java.lang.Class)
    {
        android.support.test.espresso.matcher.LayoutMatchers$1 r0;
        java.lang.Class r1;

        r0 := @this: android.support.test.espresso.matcher.LayoutMatchers$1;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>(java.lang.Class)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.LayoutMatchers$1 r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.LayoutMatchers$1;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has ellipsized text");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.LayoutMatchers$1 r0;
        android.view.View r1;
        android.text.Layout r2;
        int i0, $i1, $i2;
        android.widget.TextView $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.LayoutMatchers$1;

        r1 := @parameter0: android.view.View;

        $r3 = (android.widget.TextView) r1;

        r2 = virtualinvoke $r3.<android.widget.TextView: android.text.Layout getLayout()>();

        if r2 == null goto label3;

        i0 = virtualinvoke r2.<android.text.Layout: int getLineCount()>();

        if i0 <= 0 goto label1;

        $i1 = i0 - 1;

        $i2 = virtualinvoke r2.<android.text.Layout: int getEllipsisCount(int)>($i1);

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.LayoutMatchers$1 r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.LayoutMatchers$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.LayoutMatchers$1: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

android.support.test.espresso.matcher.LayoutMatchers$2
    void <init>(java.lang.Class)
    {
        android.support.test.espresso.matcher.LayoutMatchers$2 r0;
        java.lang.Class r1;

        r0 := @this: android.support.test.espresso.matcher.LayoutMatchers$2;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>(java.lang.Class)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.LayoutMatchers$2 r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.LayoutMatchers$2;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has more than one line of text");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.LayoutMatchers$2 r0;
        android.view.View r1;
        android.widget.TextView $r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.LayoutMatchers$2;

        r1 := @parameter0: android.view.View;

        $r2 = (android.widget.TextView) r1;

        $i0 = virtualinvoke $r2.<android.widget.TextView: int getLineCount()>();

        if $i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.LayoutMatchers$2 r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.LayoutMatchers$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.LayoutMatchers$2: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

