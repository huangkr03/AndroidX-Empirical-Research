android.support.multidex.MultiDexExtractor
<android.support.multidex.MultiDexExtractor: java.nio.channels.FileLock cacheLock>
<android.support.multidex.MultiDexExtractor: java.io.File dexDir>
<android.support.multidex.MultiDexExtractor: java.nio.channels.FileChannel lockChannel>
<android.support.multidex.MultiDexExtractor: java.io.RandomAccessFile lockRaf>
<android.support.multidex.MultiDexExtractor: java.io.File sourceApk>
<android.support.multidex.MultiDexExtractor: long sourceCrc>
    void <init>(java.io.File, java.io.File) throws java.io.IOException
    {
        android.support.multidex.MultiDexExtractor $r0;
        java.io.File $r1, $r2, r11;
        java.lang.StringBuilder $r3, r10;
        java.lang.String $r4;
        long $l0;
        java.io.RandomAccessFile $r5, r12;
        java.nio.channels.FileChannel $r6;
        java.nio.channels.FileLock $r7;
        java.lang.Throwable $r8, $r9;
        java.io.Closeable r13;

        $r0 := @this: android.support.multidex.MultiDexExtractor;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MultiDexExtractor(");

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r4);

        $r0.<android.support.multidex.MultiDexExtractor: java.io.File sourceApk> = $r1;

        $r0.<android.support.multidex.MultiDexExtractor: java.io.File dexDir> = $r2;

        $l0 = staticinvoke <android.support.multidex.MultiDexExtractor: long getZipCrc(java.io.File)>($r1);

        $r0.<android.support.multidex.MultiDexExtractor: long sourceCrc> = $l0;

        r11 = new java.io.File;

        $r1 = r11;

        specialinvoke r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "MultiDex.lock");

        r12 = new java.io.RandomAccessFile;

        $r5 = r12;

        specialinvoke r12.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r1, "rw");

        $r0.<android.support.multidex.MultiDexExtractor: java.io.RandomAccessFile lockRaf> = $r5;

     label01:
        $r6 = virtualinvoke $r5.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

     label02:
        $r0.<android.support.multidex.MultiDexExtractor: java.nio.channels.FileChannel lockChannel> = $r6;

     label03:
        r10 = new java.lang.StringBuilder;

     label04:
        $r3 = r10;

     label05:
        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Blocking on lock ");

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r4);

     label07:
        $r7 = virtualinvoke $r6.<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>();

     label08:
        $r0.<android.support.multidex.MultiDexExtractor: java.nio.channels.FileLock cacheLock> = $r7;

     label09:
        r10 = new java.lang.StringBuilder;

     label10:
        $r3 = r10;

     label11:
        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" locked");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label12:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r4);

     label13:
        return;

     label14:
        $r8 := @caughtexception;

        goto label17;

     label15:
        $r8 := @caughtexception;

        goto label17;

     label16:
        $r8 := @caughtexception;

     label17:
        $r6 = $r0.<android.support.multidex.MultiDexExtractor: java.nio.channels.FileChannel lockChannel>;

        r13 = (java.io.Closeable) $r6;

     label18:
        staticinvoke <android.support.multidex.MultiDexExtractor: void closeQuietly(java.io.Closeable)>(r13);

     label19:
        throw $r8;

     label20:
        $r9 := @caughtexception;

        goto label23;

     label21:
        $r9 := @caughtexception;

        goto label23;

     label22:
        $r9 := @caughtexception;

     label23:
        $r5 = $r0.<android.support.multidex.MultiDexExtractor: java.io.RandomAccessFile lockRaf>;

        r13 = (java.io.Closeable) $r5;

        staticinvoke <android.support.multidex.MultiDexExtractor: void closeQuietly(java.io.Closeable)>(r13);

        throw $r9;

        catch java.io.IOException from label01 to label02 with label22;
        catch java.lang.RuntimeException from label01 to label02 with label21;
        catch java.lang.Error from label01 to label02 with label20;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.io.IOException from label07 to label08 with label16;
        catch java.lang.RuntimeException from label05 to label06 with label15;
        catch java.lang.RuntimeException from label07 to label08 with label15;
        catch java.lang.Error from label03 to label04 with label14;
        catch java.lang.Error from label05 to label08 with label14;
        catch java.io.IOException from label11 to label12 with label22;
        catch java.io.IOException from label19 to label20 with label22;
        catch java.lang.RuntimeException from label11 to label12 with label21;
        catch java.lang.RuntimeException from label19 to label20 with label21;
        catch java.lang.Error from label09 to label10 with label20;
        catch java.lang.Error from label11 to label13 with label20;
        catch java.lang.Error from label18 to label20 with label20;
    }

    private void clearDexDir()
    {
        android.support.multidex.MultiDexExtractor $r0;
        java.io.File $r1;
        android.support.multidex.MultiDexExtractor$1 $r2;
        java.io.File[] $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        int $i0, $i1;
        long $l2;
        boolean $z0;

        $r0 := @this: android.support.multidex.MultiDexExtractor;

        $r1 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File dexDir>;

        $r2 = new android.support.multidex.MultiDexExtractor$1;

        specialinvoke $r2.<android.support.multidex.MultiDexExtractor$1: void <init>(android.support.multidex.MultiDexExtractor)>($r0);

        $r3 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r2);

        if $r3 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to list secondary dex dir content (");

        $r1 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File dexDir>;

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MultiDex", $r5);

        return;

     label1:
        $i0 = lengthof $r3;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        $r1 = $r3[$i1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to delete old file ");

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of size ");

        $l2 = virtualinvoke $r1.<java.io.File: long length()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r5);

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete old file ");

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MultiDex", $r5);

        goto label4;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted old file ");

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r5);

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        return;
    }

    private static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable $r0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: java.io.Closeable;

     label1:
        interfaceinvoke $r0.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MultiDex", "Failed to close resource", $r1);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void extract(java.util.zip.ZipFile, java.util.zip.ZipEntry, java.io.File, java.lang.String) throws java.io.IOException, java.io.FileNotFoundException
    {
        java.util.zip.ZipFile $r0;
        java.util.zip.ZipEntry $r1, $r10, r18;
        java.io.File $r2, $r6;
        java.lang.String $r3;
        java.io.InputStream $r4;
        java.lang.StringBuilder $r5, r14;
        java.util.zip.ZipOutputStream $r7, r17;
        java.io.BufferedOutputStream $r8, r16;
        java.io.FileOutputStream $r9, r15;
        long $l0;
        byte[] $r11;
        int $i1;
        boolean $z0;
        java.lang.Throwable $r12, $r13;
        java.io.IOException r19;
        java.io.Closeable r20;

        $r0 := @parameter0: java.util.zip.ZipFile;

        $r1 := @parameter1: java.util.zip.ZipEntry;

        $r2 := @parameter2: java.io.File;

        $r3 := @parameter3: java.lang.String;

        $r4 = virtualinvoke $r0.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>($r1);

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tmp-");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r2.<java.io.File: java.io.File getParentFile()>();

        $r6 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r3, ".zip", $r6);

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Extracting ");

        $r3 = virtualinvoke $r6.<java.io.File: java.lang.String getPath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r3);

        r17 = new java.util.zip.ZipOutputStream;

        $r7 = r17;

        r16 = new java.io.BufferedOutputStream;

        $r8 = r16;

        r15 = new java.io.FileOutputStream;

        $r9 = r15;

     label01:
        specialinvoke r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

        specialinvoke r16.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r9);

        specialinvoke r17.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>($r8);

     label02:
        r18 = new java.util.zip.ZipEntry;

        $r10 = r18;

     label03:
        specialinvoke r18.<java.util.zip.ZipEntry: void <init>(java.lang.String)>("classes.dex");

        $l0 = virtualinvoke $r1.<java.util.zip.ZipEntry: long getTime()>();

        virtualinvoke $r10.<java.util.zip.ZipEntry: void setTime(long)>($l0);

        virtualinvoke $r7.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r10);

     label04:
        $r11 = newarray (byte)[16384];

     label05:
        $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r11);

     label06:
        if $i1 == -1 goto label09;

     label07:
        virtualinvoke $r7.<java.util.zip.ZipOutputStream: void write(byte[],int,int)>($r11, 0, $i1);

        $i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>($r11);

     label08:
        goto label06;

     label09:
        virtualinvoke $r7.<java.util.zip.ZipOutputStream: void closeEntry()>();

     label10:
        virtualinvoke $r7.<java.util.zip.ZipOutputStream: void close()>();

        $z0 = virtualinvoke $r6.<java.io.File: boolean setReadOnly()>();

     label11:
        if $z0 == 0 goto label20;

        r14 = new java.lang.StringBuilder;

        $r5 = r14;

     label12:
        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Renaming to ");

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r3);

     label14:
        $z0 = virtualinvoke $r6.<java.io.File: boolean renameTo(java.io.File)>($r2);

     label15:
        if $z0 == 0 goto label16;

        r20 = (java.io.Closeable) $r4;

        staticinvoke <android.support.multidex.MultiDexExtractor: void closeQuietly(java.io.Closeable)>(r20);

        virtualinvoke $r6.<java.io.File: boolean delete()>();

        return;

     label16:
        r19 = new java.io.IOException;

        r14 = new java.lang.StringBuilder;

        $r5 = r14;

     label17:
        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename \"");

        $r3 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" to \"");

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.io.IOException: void <init>(java.lang.String)>($r3);

     label18:
        $r12 = (java.lang.Throwable) r19;

     label19:
        throw $r12;

     label20:
        r19 = new java.io.IOException;

        r14 = new java.lang.StringBuilder;

        $r5 = r14;

     label21:
        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to mark readonly \"");

        $r3 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" (tmp of \"");

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.io.IOException: void <init>(java.lang.String)>($r3);

     label22:
        $r12 = (java.lang.Throwable) r19;

     label23:
        throw $r12;

     label24:
        $r12 := @caughtexception;

     label25:
        virtualinvoke $r7.<java.util.zip.ZipOutputStream: void close()>();

        throw $r12;

     label26:
        $r13 := @caughtexception;

        r20 = (java.io.Closeable) $r4;

        staticinvoke <android.support.multidex.MultiDexExtractor: void closeQuietly(java.io.Closeable)>(r20);

        virtualinvoke $r6.<java.io.File: boolean delete()>();

        goto label27;

     label27:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Throwable from label10 to label11 with label26;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label25 to label26 with label26;
    }

    private static android.content.SharedPreferences getMultiDexPreferences(android.content.Context)
    {
        android.content.SharedPreferences $r0;
        android.content.Context $r1;

        $r1 := @parameter0: android.content.Context;

        $r0 = virtualinvoke $r1.<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>("multidex.version", 4);

        return $r0;
    }

    private static long getTimeStamp(java.io.File)
    {
        long $l0;
        java.io.File $r0;
        byte $b1;

        $r0 := @parameter0: java.io.File;

        $l0 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $l0 = $l0 + -1L;

     label1:
        return $l0;
    }

    private static long getZipCrc(java.io.File) throws java.io.IOException
    {
        long $l0;
        java.io.File $r0;
        byte $b1;

        $r0 := @parameter0: java.io.File;

        $l0 = staticinvoke <android.support.multidex.ZipUtil: long getZipCrc(java.io.File)>($r0);

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $l0 = $l0 + -1L;

     label1:
        return $l0;
    }

    private static boolean isModified(android.content.Context, java.io.File, long, java.lang.String)
    {
        long $l0, $l1, $l2;
        android.content.Context $r0;
        java.io.File $r1;
        java.lang.String $r2, $r5;
        android.content.SharedPreferences $r3;
        java.lang.StringBuilder $r4;
        byte $b3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.io.File;

        $l0 := @parameter2: long;

        $r2 := @parameter3: java.lang.String;

        $r3 = staticinvoke <android.support.multidex.MultiDexExtractor: android.content.SharedPreferences getMultiDexPreferences(android.content.Context)>($r0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timestamp");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $l1 = interfaceinvoke $r3.<android.content.SharedPreferences: long getLong(java.lang.String,long)>($r5, -1L);

        $l2 = staticinvoke <android.support.multidex.MultiDexExtractor: long getTimeStamp(java.io.File)>($r1);

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("crc");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $l1 = interfaceinvoke $r3.<android.content.SharedPreferences: long getLong(java.lang.String,long)>($r2, -1L);

        $b3 = $l1 cmp $l0;

        if $b3 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private java.util.List loadExistingExtractions(android.content.Context, java.lang.String) throws java.io.IOException
    {
        android.support.multidex.MultiDexExtractor $r0;
        java.lang.String $r1, $r5, $r8;
        byte $b0;
        android.content.Context $r2;
        java.lang.StringBuilder $r3, r11;
        java.io.File $r4;
        android.content.SharedPreferences $r6, $r7;
        int $i1, $i2;
        java.util.ArrayList $r9, r12;
        android.support.multidex.MultiDexExtractor$ExtractedDex $r10, r13;
        boolean $z0;
        long $l3, $l4, $l5, $l6;
        java.io.IOException r14;
        java.util.List r15;
        java.lang.Throwable r16;

        $r0 := @this: android.support.multidex.MultiDexExtractor;

        $r2 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", "loading existing secondary dex files");

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r4 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File sourceApk>;

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getName()>();

        $r3 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".classes");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <android.support.multidex.MultiDexExtractor: android.content.SharedPreferences getMultiDexPreferences(android.content.Context)>($r2);

        $r7 = $r6;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dex.number");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = interfaceinvoke $r6.<android.content.SharedPreferences: int getInt(java.lang.String,int)>($r8, 1);

        r12 = new java.util.ArrayList;

        $r9 = r12;

        $i2 = $i1 + -1;

        specialinvoke r12.<java.util.ArrayList: void <init>(int)>($i2);

        $i2 = 2;

     label1:
        if $i2 > $i1 goto label4;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".zip");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r13 = new android.support.multidex.MultiDexExtractor$ExtractedDex;

        $r10 = r13;

        $r4 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File dexDir>;

        specialinvoke r13.<android.support.multidex.MultiDexExtractor$ExtractedDex: void <init>(java.io.File,java.lang.String)>($r4, $r8);

        $z0 = virtualinvoke $r10.<android.support.multidex.MultiDexExtractor$ExtractedDex: boolean isFile()>();

        if $z0 == 0 goto label3;

        $l3 = staticinvoke <android.support.multidex.MultiDexExtractor: long getZipCrc(java.io.File)>($r10);

        $r10.<android.support.multidex.MultiDexExtractor$ExtractedDex: long crc> = $l3;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dex.crc.");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $l3 = interfaceinvoke $r7.<android.content.SharedPreferences: long getLong(java.lang.String,long)>($r8, -1L);

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dex.time.");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $l4 = interfaceinvoke $r7.<android.content.SharedPreferences: long getLong(java.lang.String,long)>($r8, -1L);

        $l5 = virtualinvoke $r10.<android.support.multidex.MultiDexExtractor$ExtractedDex: long lastModified()>();

        $b0 = $l4 cmp $l5;

        if $b0 != 0 goto label2;

        $l6 = $r10.<android.support.multidex.MultiDexExtractor$ExtractedDex: long crc>;

        $b0 = $l3 cmp $l6;

        if $b0 != 0 goto label2;

        r15 = (java.util.List) $r9;

        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r10);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r14 = new java.io.IOException;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid extracted dex: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (key \"");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"), expected modification time: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", modification time: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected crc: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", file crc: ");

        $l3 = $r10.<android.support.multidex.MultiDexExtractor$ExtractedDex: long crc>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.io.IOException: void <init>(java.lang.String)>($r1);

        r16 = (java.lang.Throwable) r14;

        throw r16;

     label3:
        r14 = new java.io.IOException;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing extracted secondary dex file \'");

        $r1 = virtualinvoke $r10.<android.support.multidex.MultiDexExtractor$ExtractedDex: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.io.IOException: void <init>(java.lang.String)>($r1);

        r16 = (java.lang.Throwable) r14;

        throw r16;

     label4:
        r15 = (java.util.List) $r9;

        return r15;
    }

    private java.util.List performExtractions() throws java.io.IOException
    {
        android.support.multidex.MultiDexExtractor $r0;
        java.util.ArrayList $r1, r13;
        java.util.zip.ZipFile $r2, r14;
        java.lang.StringBuilder $r3, r12;
        java.io.File $r4;
        java.lang.String $r5, $r6;
        java.util.zip.ZipEntry $r7;
        int $i0, $i1;
        android.support.multidex.MultiDexExtractor$ExtractedDex $r8, r15;
        boolean $z0;
        long $l2;
        java.lang.Throwable $r9, $r10, $r11;
        java.io.IOException r16;
        java.util.List r17;

        $r0 := @this: android.support.multidex.MultiDexExtractor;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r4 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File sourceApk>;

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getName()>();

        $r3 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".classes");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<android.support.multidex.MultiDexExtractor: void clearDexDir()>();

        r13 = new java.util.ArrayList;

        $r1 = r13;

        specialinvoke r13.<java.util.ArrayList: void <init>()>();

        r14 = new java.util.zip.ZipFile;

        $r2 = r14;

        $r4 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File sourceApk>;

        specialinvoke r14.<java.util.zip.ZipFile: void <init>(java.io.File)>($r4);

        r12 = new java.lang.StringBuilder;

        $r3 = r12;

     label01:
        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("classes");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dex");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r2.<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>($r6);

     label02:
        $i0 = 2;

     label03:
        if $r7 == null goto label28;

        r12 = new java.lang.StringBuilder;

        $r3 = r12;

     label04:
        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".zip");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        r15 = new android.support.multidex.MultiDexExtractor$ExtractedDex;

        $r8 = r15;

        $r4 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File dexDir>;

     label06:
        specialinvoke r15.<android.support.multidex.MultiDexExtractor$ExtractedDex: void <init>(java.io.File,java.lang.String)>($r4, $r6);

     label07:
        r17 = (java.util.List) $r1;

     label08:
        interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r8);

     label09:
        r12 = new java.lang.StringBuilder;

        $r3 = r12;

     label10:
        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Extraction is needed for file ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r6);

        $i1 = 0;

        $z0 = 0;

     label12:
        if $i1 >= 3 goto label21;

        if $z0 != 0 goto label21;

        $i1 = $i1 + 1;

        staticinvoke <android.support.multidex.MultiDexExtractor: void extract(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File,java.lang.String)>($r2, $r7, $r8, $r5);

        $l2 = staticinvoke <android.support.multidex.MultiDexExtractor: long getZipCrc(java.io.File)>($r8);

        $r8.<android.support.multidex.MultiDexExtractor$ExtractedDex: long crc> = $l2;

        goto label13;

     label13:
        r12 = new java.lang.StringBuilder;

        $r3 = r12;

     label14:
        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Extraction ");

     label15:
        $r6 = "succeeded";

        goto label16;

     label16:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'");

        $r6 = virtualinvoke $r8.<android.support.multidex.MultiDexExtractor$ExtractedDex: java.lang.String getAbsolutePath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': length ");

        $l2 = virtualinvoke $r8.<android.support.multidex.MultiDexExtractor$ExtractedDex: long length()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - crc: ");

     label17:
        $l2 = $r8.<android.support.multidex.MultiDexExtractor$ExtractedDex: long crc>;

     label18:
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label19:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r6);

        goto label20;

     label20:
        $z0 = 1;

        goto label12;

     label21:
        if $z0 == 0 goto label24;

        $i0 = $i0 + 1;

        r12 = new java.lang.StringBuilder;

        $r3 = r12;

     label22:
        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("classes");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dex");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r2.<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>($r6);

     label23:
        goto label03;

     label24:
        r16 = new java.io.IOException;

        r12 = new java.lang.StringBuilder;

        $r3 = r12;

     label25:
        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create zip file ");

        $r5 = virtualinvoke $r8.<android.support.multidex.MultiDexExtractor$ExtractedDex: java.lang.String getAbsolutePath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for secondary dex (");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r16.<java.io.IOException: void <init>(java.lang.String)>($r5);

     label26:
        $r9 = (java.lang.Throwable) r16;

     label27:
        throw $r9;

     label28:
        virtualinvoke $r2.<java.util.zip.ZipFile: void close()>();

     label29:
        goto label31;

     label30:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MultiDex", "Failed to close resource", $r9);

     label31:
        r17 = (java.util.List) $r1;

        return r17;

     label32:
        $r10 := @caughtexception;

     label33:
        virtualinvoke $r2.<java.util.zip.ZipFile: void close()>();

     label34:
        goto label36;

     label35:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MultiDex", "Failed to close resource", $r11);

     label36:
        goto label37;

     label37:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label32;
        catch java.lang.Throwable from label04 to label05 with label32;
        catch java.lang.Throwable from label06 to label07 with label32;
        catch java.lang.Throwable from label08 to label09 with label32;
        catch java.lang.Throwable from label10 to label11 with label32;
        catch java.lang.Throwable from label14 to label15 with label32;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch java.lang.Throwable from label18 to label19 with label32;
        catch java.lang.Throwable from label20 to label20 with label32;
        catch java.lang.Throwable from label20 to label20 with label32;
        catch java.lang.Throwable from label22 to label23 with label32;
        catch java.lang.Throwable from label25 to label26 with label32;
        catch java.lang.Throwable from label27 to label28 with label32;
        catch java.io.IOException from label28 to label29 with label30;
        catch java.io.IOException from label33 to label34 with label35;
    }

    private static void putStoredApkInfo(android.content.Context, java.lang.String, long, long, java.util.List)
    {
        java.lang.String $r0, $r6;
        android.content.Context $r1;
        long $l0, $l1;
        java.util.List $r2;
        android.content.SharedPreferences $r3;
        android.content.SharedPreferences$Editor $r4;
        java.lang.StringBuilder $r5;
        int $i2;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        android.support.multidex.MultiDexExtractor$ExtractedDex $r9;

        $r1 := @parameter0: android.content.Context;

        $r0 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $l1 := @parameter3: long;

        $r2 := @parameter4: java.util.List;

        $r3 = staticinvoke <android.support.multidex.MultiDexExtractor: android.content.SharedPreferences getMultiDexPreferences(android.content.Context)>($r1);

        $r4 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timestamp");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>($r6, $l0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("crc");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>($r6, $l1);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dex.number");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i2 + 1;

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>($r6, $i2);

        $r7 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $i2 = 2;

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.support.multidex.MultiDexExtractor$ExtractedDex) $r8;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dex.crc.");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $l0 = $r9.<android.support.multidex.MultiDexExtractor$ExtractedDex: long crc>;

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>($r6, $l0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dex.time.");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $l0 = virtualinvoke $r9.<android.support.multidex.MultiDexExtractor$ExtractedDex: long lastModified()>();

        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>($r6, $l0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        interfaceinvoke $r4.<android.content.SharedPreferences$Editor: boolean commit()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        android.support.multidex.MultiDexExtractor $r0;
        java.nio.channels.FileLock $r1;
        java.nio.channels.FileChannel $r2;
        java.io.RandomAccessFile $r3;

        $r0 := @this: android.support.multidex.MultiDexExtractor;

        $r1 = $r0.<android.support.multidex.MultiDexExtractor: java.nio.channels.FileLock cacheLock>;

        virtualinvoke $r1.<java.nio.channels.FileLock: void release()>();

        $r2 = $r0.<android.support.multidex.MultiDexExtractor: java.nio.channels.FileChannel lockChannel>;

        virtualinvoke $r2.<java.nio.channels.FileChannel: void close()>();

        $r3 = $r0.<android.support.multidex.MultiDexExtractor: java.io.RandomAccessFile lockRaf>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void close()>();

        return;
    }

    java.util.List load(android.content.Context, java.lang.String, boolean) throws java.io.IOException
    {
        android.support.multidex.MultiDexExtractor $r0;
        android.content.Context $r1;
        java.lang.String $r2, $r5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.io.File $r4;
        java.nio.channels.FileLock $r6;
        long $l0, $l1;
        java.util.List $r7;
        java.lang.Throwable $r8;
        int $i2;
        java.lang.IllegalStateException $r9;

        $r0 := @this: android.support.multidex.MultiDexExtractor;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MultiDexExtractor.load(");

        $r4 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File sourceApk>;

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r5);

        $r6 = $r0.<android.support.multidex.MultiDexExtractor: java.nio.channels.FileLock cacheLock>;

        $z1 = virtualinvoke $r6.<java.nio.channels.FileLock: boolean isValid()>();

        if $z1 == 0 goto label8;

        if $z0 != 0 goto label4;

        $r4 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File sourceApk>;

        $l0 = $r0.<android.support.multidex.MultiDexExtractor: long sourceCrc>;

        $z1 = staticinvoke <android.support.multidex.MultiDexExtractor: boolean isModified(android.content.Context,java.io.File,long,java.lang.String)>($r1, $r4, $l0, $r2);

        if $z1 != 0 goto label4;

     label1:
        $r7 = specialinvoke $r0.<android.support.multidex.MultiDexExtractor: java.util.List loadExistingExtractions(android.content.Context,java.lang.String)>($r1, $r2);

     label2:
        goto label7;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MultiDex", "Failed to reload existing extracted secondary dex files, falling back to fresh extraction", $r8);

        $r7 = specialinvoke $r0.<android.support.multidex.MultiDexExtractor: java.util.List performExtractions()>();

        $r4 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File sourceApk>;

        $l0 = staticinvoke <android.support.multidex.MultiDexExtractor: long getTimeStamp(java.io.File)>($r4);

        $l1 = $r0.<android.support.multidex.MultiDexExtractor: long sourceCrc>;

        staticinvoke <android.support.multidex.MultiDexExtractor: void putStoredApkInfo(android.content.Context,java.lang.String,long,long,java.util.List)>($r1, $r2, $l0, $l1, $r7);

        goto label7;

     label4:
        if $z0 == 0 goto label5;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", "Forced extraction must be performed.");

        goto label6;

     label5:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", "Detected that extraction must be performed.");

     label6:
        $r7 = specialinvoke $r0.<android.support.multidex.MultiDexExtractor: java.util.List performExtractions()>();

        $r4 = $r0.<android.support.multidex.MultiDexExtractor: java.io.File sourceApk>;

        $l0 = staticinvoke <android.support.multidex.MultiDexExtractor: long getTimeStamp(java.io.File)>($r4);

        $l1 = $r0.<android.support.multidex.MultiDexExtractor: long sourceCrc>;

        staticinvoke <android.support.multidex.MultiDexExtractor: void putStoredApkInfo(android.content.Context,java.lang.String,long,long,java.util.List)>($r1, $r2, $l0, $l1, $r7);

     label7:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("load found ");

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" secondary dex files");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MultiDex", $r2);

        return $r7;

     label8:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("MultiDexExtractor was closed");

        throw $r9;

        catch java.io.IOException from label1 to label2 with label3;
    }

android.support.multidex.MultiDexExtractor$1
<android.support.multidex.MultiDexExtractor$1: android.support.multidex.MultiDexExtractor this$0>
    void <init>(android.support.multidex.MultiDexExtractor)
    {
        android.support.multidex.MultiDexExtractor$1 $r0;
        android.support.multidex.MultiDexExtractor $r1;

        $r0 := @this: android.support.multidex.MultiDexExtractor$1;

        $r1 := @parameter0: android.support.multidex.MultiDexExtractor;

        $r0.<android.support.multidex.MultiDexExtractor$1: android.support.multidex.MultiDexExtractor this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean accept(java.io.File)
    {
        android.support.multidex.MultiDexExtractor$1 $r0;
        java.io.File $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @this: android.support.multidex.MultiDexExtractor$1;

        $r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("MultiDex.lock");

        $z0 = $z0 ^ 1;

        return $z0;
    }

android.support.multidex.MultiDexExtractor$ExtractedDex
<android.support.multidex.MultiDexExtractor$ExtractedDex: long crc>
    public void <init>(java.io.File, java.lang.String)
    {
        android.support.multidex.MultiDexExtractor$ExtractedDex $r0;
        java.lang.String $r1;
        java.io.File $r2;

        $r0 := @this: android.support.multidex.MultiDexExtractor$ExtractedDex;

        $r2 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r1);

        $r0.<android.support.multidex.MultiDexExtractor$ExtractedDex: long crc> = -1L;

        return;
    }

