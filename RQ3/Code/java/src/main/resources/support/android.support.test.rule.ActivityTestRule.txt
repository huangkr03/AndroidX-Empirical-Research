android.support.test.rule.ActivityTestRule
<android.support.test.rule.ActivityTestRule: java.lang.String TAG>
<android.support.test.rule.ActivityTestRule: int NO_FLAGS_SET>
<android.support.test.rule.ActivityTestRule: java.lang.String FIELD_RESULT_CODE>
<android.support.test.rule.ActivityTestRule: java.lang.String FIELD_RESULT_DATA>
<android.support.test.rule.ActivityTestRule: java.lang.Class mActivityClass>
<android.support.test.rule.ActivityTestRule: java.lang.String mTargetPackage>
<android.support.test.rule.ActivityTestRule: int mLaunchFlags>
<android.support.test.rule.ActivityTestRule: android.support.test.runner.lifecycle.ActivityLifecycleCallback mLifecycleCallback>
<android.support.test.rule.ActivityTestRule: android.app.Instrumentation mInstrumentation>
<android.support.test.rule.ActivityTestRule: boolean mInitialTouchMode>
<android.support.test.rule.ActivityTestRule: boolean mLaunchActivity>
<android.support.test.rule.ActivityTestRule: android.support.test.runner.intercepting.SingleActivityFactory mActivityFactory>
<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity>
<android.support.test.rule.ActivityTestRule: android.app.Instrumentation$ActivityResult mActivityResult>
    public void <init>(java.lang.Class)
    {
        android.support.test.rule.ActivityTestRule r0;
        java.lang.Class r1;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<android.support.test.rule.ActivityTestRule: void <init>(java.lang.Class,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.lang.Class, boolean)
    {
        android.support.test.rule.ActivityTestRule r0;
        java.lang.Class r1;
        boolean z0;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.support.test.rule.ActivityTestRule: void <init>(java.lang.Class,boolean,boolean)>(r1, z0, 1);

        return;
    }

    public void <init>(java.lang.Class, boolean, boolean)
    {
        android.support.test.rule.ActivityTestRule r0;
        java.lang.Class r1;
        boolean z0, z1;
        android.content.Context $r2;
        java.lang.String $r3;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = staticinvoke <android.support.test.InstrumentationRegistry: android.content.Context getTargetContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        specialinvoke r0.<android.support.test.rule.ActivityTestRule: void <init>(java.lang.Class,java.lang.String,int,boolean,boolean)>(r1, $r3, 268435456, z0, z1);

        return;
    }

    public void <init>(android.support.test.runner.intercepting.SingleActivityFactory, boolean, boolean)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.support.test.runner.intercepting.SingleActivityFactory r1;
        boolean z0, z1;
        java.lang.Class $r2;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: android.support.test.runner.intercepting.SingleActivityFactory;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = virtualinvoke r1.<android.support.test.runner.intercepting.SingleActivityFactory: java.lang.Class getActivityClassToIntercept()>();

        specialinvoke r0.<android.support.test.rule.ActivityTestRule: void <init>(java.lang.Class,boolean,boolean)>($r2, z0, z1);

        r0.<android.support.test.rule.ActivityTestRule: android.support.test.runner.intercepting.SingleActivityFactory mActivityFactory> = r1;

        return;
    }

    public void <init>(java.lang.Class, java.lang.String, int, boolean, boolean)
    {
        android.support.test.rule.ActivityTestRule r0;
        java.lang.Class r1;
        java.lang.String r2, $r7;
        int i0;
        boolean z0, z1;
        android.support.test.rule.ActivityTestRule$LifecycleCallback $r3;
        java.lang.ref.WeakReference $r4;
        android.app.Instrumentation $r5;
        java.lang.Object $r6;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.support.test.rule.ActivityTestRule$LifecycleCallback;

        specialinvoke $r3.<android.support.test.rule.ActivityTestRule$LifecycleCallback: void <init>(android.support.test.rule.ActivityTestRule,android.support.test.rule.ActivityTestRule$1)>(r0, null);

        r0.<android.support.test.rule.ActivityTestRule: android.support.test.runner.lifecycle.ActivityLifecycleCallback mLifecycleCallback> = $r3;

        r0.<android.support.test.rule.ActivityTestRule: boolean mInitialTouchMode> = 0;

        r0.<android.support.test.rule.ActivityTestRule: boolean mLaunchActivity> = 0;

        $r4 = virtualinvoke r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference makeWeakReference(android.app.Activity)>(null);

        r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity> = $r4;

        $r5 = staticinvoke <android.support.test.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation mInstrumentation> = $r5;

        r0.<android.support.test.rule.ActivityTestRule: java.lang.Class mActivityClass> = r1;

        $r6 = staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "targetPackage cannot be null!");

        $r7 = (java.lang.String) $r6;

        r0.<android.support.test.rule.ActivityTestRule: java.lang.String mTargetPackage> = $r7;

        r0.<android.support.test.rule.ActivityTestRule: int mLaunchFlags> = i0;

        r0.<android.support.test.rule.ActivityTestRule: boolean mInitialTouchMode> = z0;

        r0.<android.support.test.rule.ActivityTestRule: boolean mLaunchActivity> = z1;

        return;
    }

    protected android.content.Intent getActivityIntent()
    {
        android.support.test.rule.ActivityTestRule r0;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        return null;
    }

    protected void beforeActivityLaunched()
    {
        android.support.test.rule.ActivityTestRule r0;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        return;
    }

    protected void afterActivityLaunched()
    {
        android.support.test.rule.ActivityTestRule r0;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        return;
    }

    protected void afterActivityFinished()
    {
        android.support.test.rule.ActivityTestRule r0;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        return;
    }

    public android.app.Activity getActivity()
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Activity r1;
        java.lang.ref.WeakReference $r2;
        java.lang.Object $r3;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        $r2 = r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity>;

        $r3 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r1 = (android.app.Activity) $r3;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ActivityTestRule", "Activity wasn\'t created yet or already stopped");

     label1:
        return r1;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        android.support.test.rule.ActivityTestRule r0;
        org.junit.runners.model.Statement r1;
        org.junit.runner.Description r2;
        android.support.test.rule.ActivityTestRule$ActivityStatement $r3;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        $r3 = new android.support.test.rule.ActivityTestRule$ActivityStatement;

        specialinvoke $r3.<android.support.test.rule.ActivityTestRule$ActivityStatement: void <init>(android.support.test.rule.ActivityTestRule,org.junit.runners.model.Statement)>(r0, r1);

        return $r3;
    }

    public android.app.Activity launchActivity(android.content.Intent)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Activity r1, $r7;
        java.lang.String r2, $r15, $r16, $r23, $r24, $r29;
        android.os.Bundle r3, $r13;
        boolean $z0;
        android.app.Instrumentation $r4, $r5, $r10, $r17;
        int $i0, $i1, $i3;
        java.lang.Class $r6, $r22;
        java.lang.Object $r8;
        java.lang.ref.WeakReference $r9;
        java.lang.Object[] $r11;
        android.content.ComponentName $r12, $r28;
        android.support.test.runner.lifecycle.ActivityLifecycleMonitor $r19;
        android.support.test.runner.lifecycle.ActivityLifecycleCallback $r20;
        android.content.Intent $r26, r27;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r27 := @parameter0: android.content.Intent;

        $r4 = r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation mInstrumentation>;

        $z0 = r0.<android.support.test.rule.ActivityTestRule: boolean mInitialTouchMode>;

        virtualinvoke $r4.<android.app.Instrumentation: void setInTouchMode(boolean)>($z0);

        if null != r27 goto label1;

        r27 = virtualinvoke r0.<android.support.test.rule.ActivityTestRule: android.content.Intent getActivityIntent()>();

        if null != r27 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ActivityTestRule", "getActivityIntent() returned null using default: Intent(Intent.ACTION_MAIN)");

        $r26 = new android.content.Intent;

        specialinvoke $r26.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        r27 = $r26;

     label1:
        $r28 = virtualinvoke r27.<android.content.Intent: android.content.ComponentName getComponent()>();

        if null != $r28 goto label2;

        $r23 = r0.<android.support.test.rule.ActivityTestRule: java.lang.String mTargetPackage>;

        $r22 = r0.<android.support.test.rule.ActivityTestRule: java.lang.Class mActivityClass>;

        $r24 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r27.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r23, $r24);

     label2:
        $i0 = virtualinvoke r27.<android.content.Intent: int getFlags()>();

        if 0 != $i0 goto label3;

        $i3 = r0.<android.support.test.rule.ActivityTestRule: int mLaunchFlags>;

        virtualinvoke r27.<android.content.Intent: android.content.Intent addFlags(int)>($i3);

     label3:
        virtualinvoke r0.<android.support.test.rule.ActivityTestRule: void beforeActivityLaunched()>();

        $r6 = r0.<android.support.test.rule.ActivityTestRule: java.lang.Class mActivityClass>;

        $r5 = r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation mInstrumentation>;

        $r7 = virtualinvoke $r5.<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>(r27);

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r7);

        r1 = (android.app.Activity) $r8;

        $r9 = virtualinvoke r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference makeWeakReference(android.app.Activity)>(r1);

        r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity> = $r9;

        $r10 = r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation mInstrumentation>;

        virtualinvoke $r10.<android.app.Instrumentation: void waitForIdleSync()>();

        if r1 == null goto label4;

        $r19 = staticinvoke <android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: android.support.test.runner.lifecycle.ActivityLifecycleMonitor getInstance()>();

        $r20 = r0.<android.support.test.rule.ActivityTestRule: android.support.test.runner.lifecycle.ActivityLifecycleCallback mLifecycleCallback>;

        interfaceinvoke $r19.<android.support.test.runner.lifecycle.ActivityLifecycleMonitor: void addLifecycleCallback(android.support.test.runner.lifecycle.ActivityLifecycleCallback)>($r20);

        virtualinvoke r0.<android.support.test.rule.ActivityTestRule: void afterActivityLaunched()>();

        goto label7;

     label4:
        $r11 = newarray (java.lang.Object)[1];

        $r12 = virtualinvoke r27.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r11[0] = $r12;

        r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Activity %s, failed to launch", $r11);

        $r13 = new android.os.Bundle;

        specialinvoke $r13.<android.os.Bundle: void <init>()>();

        r3 = $r13;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("ActivityTestRule ");

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i1 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i1 == 0 goto label5;

        $r29 = virtualinvoke $r15.<java.lang.String: java.lang.String concat(java.lang.String)>($r16);

        goto label6;

     label5:
        $r29 = new java.lang.String;

        specialinvoke $r29.<java.lang.String: void <init>(java.lang.String)>($r15);

     label6:
        virtualinvoke r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r29);

        $r17 = r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation mInstrumentation>;

        virtualinvoke $r17.<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)>(0, r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ActivityTestRule", r2);

     label7:
        return r1;
    }

    void setInstrumentation(android.app.Instrumentation)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Instrumentation r1, $r3;
        java.lang.Object $r2;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: android.app.Instrumentation;

        $r2 = staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "instrumentation cannot be null!");

        $r3 = (android.app.Instrumentation) $r2;

        r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation mInstrumentation> = $r3;

        return;
    }

    public void finishActivity()
    {
        android.support.test.rule.ActivityTestRule r0;
        java.lang.Throwable r1, $r5;
        java.lang.ref.WeakReference $r2, $r4, $r6;
        java.lang.Object $r3;

        r0 := @this: android.support.test.rule.ActivityTestRule;

     label1:
        $r2 = r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity>;

        $r3 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r3 == null goto label2;

        virtualinvoke r0.<android.support.test.rule.ActivityTestRule: void callFinishOnMainSync()>();

     label2:
        $r4 = virtualinvoke r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference makeWeakReference(android.app.Activity)>(null);

        r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity> = $r4;

        virtualinvoke r0.<android.support.test.rule.ActivityTestRule: void afterActivityFinished()>();

        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = virtualinvoke r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference makeWeakReference(android.app.Activity)>(null);

        r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity> = $r6;

        virtualinvoke r0.<android.support.test.rule.ActivityTestRule: void afterActivityFinished()>();

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void callFinishOnMainSync()
    {
        android.support.test.rule.ActivityTestRule r0;
        java.lang.String r1;
        java.lang.ref.WeakReference $r2;
        java.lang.Object $r3;
        android.support.test.rule.ActivityTestRule$1 $r4;
        android.app.Instrumentation $r5;
        java.lang.Throwable $r6, r9;
        java.lang.IllegalStateException $r7;
        android.app.Activity r8;

        r0 := @this: android.support.test.rule.ActivityTestRule;

     label1:
        $r2 = r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity>;

        $r3 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r8 = (android.app.Activity) $r3;

        $r4 = new android.support.test.rule.ActivityTestRule$1;

        specialinvoke $r4.<android.support.test.rule.ActivityTestRule$1: void <init>(android.support.test.rule.ActivityTestRule,android.app.Activity)>(r0, r8);

        virtualinvoke r0.<android.support.test.rule.ActivityTestRule: void runOnUiThread(java.lang.Runnable)>($r4);

        $r5 = r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation mInstrumentation>;

        virtualinvoke $r5.<android.app.Instrumentation: void waitForIdleSync()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r9 = $r6;

        r1 = "Failed to execute activity.finish() on the main thread";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTestRule", r1, r9);

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r9);

        throw $r7;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.app.Instrumentation$ActivityResult getActivityResult()
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Activity r1;
        java.lang.Throwable r2, $r9;
        android.app.Instrumentation$ActivityResult $r3, $r4;
        java.lang.ref.WeakReference $r5;
        java.lang.Object $r6;
        android.support.test.rule.ActivityTestRule$2 $r8;
        java.lang.IllegalStateException $r10;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        $r3 = r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation$ActivityResult mActivityResult>;

        if null != $r3 goto label4;

        $r5 = r0.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity>;

        $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r1 = (android.app.Activity) $r6;

        staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Activity wasn\'t created yet or already destroyed!");

     label1:
        $r8 = new android.support.test.rule.ActivityTestRule$2;

        specialinvoke $r8.<android.support.test.rule.ActivityTestRule$2: void <init>(android.support.test.rule.ActivityTestRule,android.app.Activity)>(r0, r1);

        virtualinvoke r0.<android.support.test.rule.ActivityTestRule: void runOnUiThread(java.lang.Runnable)>($r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

     label4:
        $r4 = r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation$ActivityResult mActivityResult>;

        return $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void setActivityResultForActivity(android.app.Activity)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Activity r1;
        android.os.Looper $r2, $r3;
        java.lang.Class $r5, $r6;
        android.app.Instrumentation$ActivityResult $r7;
        java.lang.Object $r8, $r10;
        java.lang.Integer $r9;
        int $i0;
        android.content.Intent $r11;
        java.lang.Throwable $r12, $r14, r18, r20;
        java.lang.RuntimeException $r13, $r15;
        boolean $z0;
        java.lang.reflect.Field r16, r17;
        java.lang.String r19, r21;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: android.app.Activity;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z0, "Must be called on the main thread!");

        staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Activity wasn\'t created yet or already destroyed!");

     label3:
        $r5 = class "Landroid/app/Activity;";

        r16 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mResultCode");

        virtualinvoke r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r6 = class "Landroid/app/Activity;";

        r17 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("mResultData");

        virtualinvoke r17.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r7 = new android.app.Instrumentation$ActivityResult;

        $r8 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = virtualinvoke r17.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (android.content.Intent) $r10;

        specialinvoke $r7.<android.app.Instrumentation$ActivityResult: void <init>(int,android.content.Intent)>($i0, $r11);

        r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation$ActivityResult mActivityResult> = $r7;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r18 = $r12;

        r19 = "Looks like the Android Activity class has changed itsprivate fields for mResultCode or mResultData. Time to update the reflection code.";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTestRule", r19, r18);

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r19, r18);

        throw $r13;

     label6:
        $r14 := @caughtexception;

        r20 = $r14;

        r21 = "Field mResultCode or mResultData is not accessible";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ActivityTestRule", r21, r20);

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r21, r20);

        throw $r15;

     label7:
        return;

        catch java.lang.NoSuchFieldException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
    }

    public void runOnUiThread(java.lang.Runnable) throws java.lang.Throwable
    {
        android.support.test.rule.ActivityTestRule r0;
        java.lang.Runnable r1;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: java.lang.Runnable;

        staticinvoke <android.support.test.internal.runner.junit4.statement.UiThreadStatement: void runOnUiThread(java.lang.Runnable)>(r1);

        return;
    }

    java.lang.ref.WeakReference makeWeakReference(android.app.Activity)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Activity r1;
        java.lang.ref.WeakReference $r2;

        r0 := @this: android.support.test.rule.ActivityTestRule;

        r1 := @parameter0: android.app.Activity;

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        return $r2;
    }

    static void access$100(android.support.test.rule.ActivityTestRule, android.app.Activity)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Activity r1;

        r0 := @parameter0: android.support.test.rule.ActivityTestRule;

        r1 := @parameter1: android.app.Activity;

        specialinvoke r0.<android.support.test.rule.ActivityTestRule: void setActivityResultForActivity(android.app.Activity)>(r1);

        return;
    }

    static android.app.Instrumentation access$200(android.support.test.rule.ActivityTestRule)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Instrumentation $r1;

        r0 := @parameter0: android.support.test.rule.ActivityTestRule;

        $r1 = r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation mInstrumentation>;

        return $r1;
    }

    static android.support.test.runner.intercepting.SingleActivityFactory access$300(android.support.test.rule.ActivityTestRule)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.support.test.runner.intercepting.SingleActivityFactory $r1;

        r0 := @parameter0: android.support.test.rule.ActivityTestRule;

        $r1 = r0.<android.support.test.rule.ActivityTestRule: android.support.test.runner.intercepting.SingleActivityFactory mActivityFactory>;

        return $r1;
    }

    static boolean access$400(android.support.test.rule.ActivityTestRule)
    {
        android.support.test.rule.ActivityTestRule r0;
        boolean $z0;

        r0 := @parameter0: android.support.test.rule.ActivityTestRule;

        $z0 = r0.<android.support.test.rule.ActivityTestRule: boolean mLaunchActivity>;

        return $z0;
    }

    static android.app.Instrumentation$ActivityResult access$502(android.support.test.rule.ActivityTestRule, android.app.Instrumentation$ActivityResult)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Instrumentation$ActivityResult r1;

        r0 := @parameter0: android.support.test.rule.ActivityTestRule;

        r1 := @parameter1: android.app.Instrumentation$ActivityResult;

        r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation$ActivityResult mActivityResult> = r1;

        return r1;
    }

    static android.support.test.runner.lifecycle.ActivityLifecycleCallback access$600(android.support.test.rule.ActivityTestRule)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.support.test.runner.lifecycle.ActivityLifecycleCallback $r1;

        r0 := @parameter0: android.support.test.rule.ActivityTestRule;

        $r1 = r0.<android.support.test.rule.ActivityTestRule: android.support.test.runner.lifecycle.ActivityLifecycleCallback mLifecycleCallback>;

        return $r1;
    }

    static java.lang.Class access$700(android.support.test.rule.ActivityTestRule)
    {
        android.support.test.rule.ActivityTestRule r0;
        java.lang.Class $r1;

        r0 := @parameter0: android.support.test.rule.ActivityTestRule;

        $r1 = r0.<android.support.test.rule.ActivityTestRule: java.lang.Class mActivityClass>;

        return $r1;
    }

    static android.app.Instrumentation$ActivityResult access$500(android.support.test.rule.ActivityTestRule)
    {
        android.support.test.rule.ActivityTestRule r0;
        android.app.Instrumentation$ActivityResult $r1;

        r0 := @parameter0: android.support.test.rule.ActivityTestRule;

        $r1 = r0.<android.support.test.rule.ActivityTestRule: android.app.Instrumentation$ActivityResult mActivityResult>;

        return $r1;
    }

android.support.test.rule.ActivityTestRule$1
<android.support.test.rule.ActivityTestRule$1: android.app.Activity val$hardActivityRef>
<android.support.test.rule.ActivityTestRule$1: android.support.test.rule.ActivityTestRule this$0>
    void <init>(android.support.test.rule.ActivityTestRule, android.app.Activity)
    {
        android.support.test.rule.ActivityTestRule$1 r0;
        android.support.test.rule.ActivityTestRule r1;
        android.app.Activity r2;

        r0 := @this: android.support.test.rule.ActivityTestRule$1;

        r1 := @parameter0: android.support.test.rule.ActivityTestRule;

        r2 := @parameter1: android.app.Activity;

        r0.<android.support.test.rule.ActivityTestRule$1: android.support.test.rule.ActivityTestRule this$0> = r1;

        r0.<android.support.test.rule.ActivityTestRule$1: android.app.Activity val$hardActivityRef> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.rule.ActivityTestRule$1 r0;
        android.app.Activity $r1, $r2, $r3;
        android.support.test.rule.ActivityTestRule $r4;
        boolean $z0;

        r0 := @this: android.support.test.rule.ActivityTestRule$1;

        $r1 = r0.<android.support.test.rule.ActivityTestRule$1: android.app.Activity val$hardActivityRef>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z0, "Activity was not launched. If you manually finished it, you must launch it again before finishing it. ");

        $r2 = r0.<android.support.test.rule.ActivityTestRule$1: android.app.Activity val$hardActivityRef>;

        virtualinvoke $r2.<android.app.Activity: void finish()>();

        $r4 = r0.<android.support.test.rule.ActivityTestRule$1: android.support.test.rule.ActivityTestRule this$0>;

        $r3 = r0.<android.support.test.rule.ActivityTestRule$1: android.app.Activity val$hardActivityRef>;

        staticinvoke <android.support.test.rule.ActivityTestRule: void access$100(android.support.test.rule.ActivityTestRule,android.app.Activity)>($r4, $r3);

        return;
    }

android.support.test.rule.ActivityTestRule$2
<android.support.test.rule.ActivityTestRule$2: android.app.Activity val$hardActivityRef>
<android.support.test.rule.ActivityTestRule$2: android.support.test.rule.ActivityTestRule this$0>
    void <init>(android.support.test.rule.ActivityTestRule, android.app.Activity)
    {
        android.support.test.rule.ActivityTestRule$2 r0;
        android.support.test.rule.ActivityTestRule r1;
        android.app.Activity r2;

        r0 := @this: android.support.test.rule.ActivityTestRule$2;

        r1 := @parameter0: android.support.test.rule.ActivityTestRule;

        r2 := @parameter1: android.app.Activity;

        r0.<android.support.test.rule.ActivityTestRule$2: android.support.test.rule.ActivityTestRule this$0> = r1;

        r0.<android.support.test.rule.ActivityTestRule$2: android.app.Activity val$hardActivityRef> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.rule.ActivityTestRule$2 r0;
        android.app.Activity $r1, $r2;
        boolean $z0;
        android.support.test.rule.ActivityTestRule $r3;

        r0 := @this: android.support.test.rule.ActivityTestRule$2;

        $r1 = r0.<android.support.test.rule.ActivityTestRule$2: android.app.Activity val$hardActivityRef>;

        $z0 = virtualinvoke $r1.<android.app.Activity: boolean isFinishing()>();

        staticinvoke <android.support.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z0, "Activity is not finishing!");

        $r3 = r0.<android.support.test.rule.ActivityTestRule$2: android.support.test.rule.ActivityTestRule this$0>;

        $r2 = r0.<android.support.test.rule.ActivityTestRule$2: android.app.Activity val$hardActivityRef>;

        staticinvoke <android.support.test.rule.ActivityTestRule: void access$100(android.support.test.rule.ActivityTestRule,android.app.Activity)>($r3, $r2);

        return;
    }

android.support.test.rule.ActivityTestRule$ActivityStatement
<android.support.test.rule.ActivityTestRule$ActivityStatement: org.junit.runners.model.Statement mBase>
<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>
    public void <init>(android.support.test.rule.ActivityTestRule, org.junit.runners.model.Statement)
    {
        android.support.test.rule.ActivityTestRule$ActivityStatement r0;
        android.support.test.rule.ActivityTestRule r1;
        org.junit.runners.model.Statement r2;

        r0 := @this: android.support.test.rule.ActivityTestRule$ActivityStatement;

        r1 := @parameter0: android.support.test.rule.ActivityTestRule;

        r2 := @parameter1: org.junit.runners.model.Statement;

        r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0> = r1;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: org.junit.runners.model.Statement mBase> = r2;

        return;
    }

    public void evaluate() throws java.lang.Throwable
    {
        android.support.test.rule.ActivityTestRule$ActivityStatement r0;
        android.support.test.runner.MonitoringInstrumentation r1, $r37;
        android.app.Activity r2, r4;
        java.lang.Throwable r3, $r27;
        android.support.test.rule.ActivityTestRule $r5, $r7, $r10, $r13, $r16, $r18, $r19, $r20, $r23, $r25, $r28, $r31, $r34, $r36, $r38;
        android.app.Instrumentation $r6, $r26;
        boolean $z0, $z1;
        android.support.test.runner.intercepting.SingleActivityFactory $r8, $r24;
        org.junit.runners.model.Statement $r9;
        java.lang.ref.WeakReference $r11, $r29;
        java.lang.Object $r12, $r30;
        android.support.test.runner.lifecycle.ActivityLifecycleMonitor $r15, $r33;
        android.support.test.runner.lifecycle.ActivityLifecycleCallback $r17, $r35;
        android.content.Intent $r21;

        r0 := @this: android.support.test.rule.ActivityTestRule$ActivityStatement;

        $r5 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r6 = staticinvoke <android.support.test.rule.ActivityTestRule: android.app.Instrumentation access$200(android.support.test.rule.ActivityTestRule)>($r5);

        $z0 = $r6 instanceof android.support.test.runner.MonitoringInstrumentation;

        if $z0 == 0 goto label01;

        $r25 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r26 = staticinvoke <android.support.test.rule.ActivityTestRule: android.app.Instrumentation access$200(android.support.test.rule.ActivityTestRule)>($r25);

        $r37 = (android.support.test.runner.MonitoringInstrumentation) $r26;

        goto label02;

     label01:
        $r37 = null;

     label02:
        r1 = $r37;

     label03:
        $r7 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r8 = staticinvoke <android.support.test.rule.ActivityTestRule: android.support.test.runner.intercepting.SingleActivityFactory access$300(android.support.test.rule.ActivityTestRule)>($r7);

        if $r8 == null goto label04;

        if r1 == null goto label04;

        $r23 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r24 = staticinvoke <android.support.test.rule.ActivityTestRule: android.support.test.runner.intercepting.SingleActivityFactory access$300(android.support.test.rule.ActivityTestRule)>($r23);

        virtualinvoke r1.<android.support.test.runner.MonitoringInstrumentation: void interceptActivityUsing(android.support.test.runner.intercepting.InterceptingActivityFactory)>($r24);

     label04:
        $r38 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $z1 = staticinvoke <android.support.test.rule.ActivityTestRule: boolean access$400(android.support.test.rule.ActivityTestRule)>($r38);

        if $z1 == 0 goto label05;

        $r20 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r19 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r21 = virtualinvoke $r19.<android.support.test.rule.ActivityTestRule: android.content.Intent getActivityIntent()>();

        virtualinvoke $r20.<android.support.test.rule.ActivityTestRule: android.app.Activity launchActivity(android.content.Intent)>($r21);

     label05:
        $r9 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: org.junit.runners.model.Statement mBase>;

        virtualinvoke $r9.<org.junit.runners.model.Statement: void evaluate()>();

     label06:
        if r1 == null goto label07;

        virtualinvoke r1.<android.support.test.runner.MonitoringInstrumentation: void useDefaultInterceptingActivityFactory()>();

     label07:
        $r10 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r11 = $r10.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity>;

        $r12 = virtualinvoke $r11.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (android.app.Activity) $r12;

        if r2 == null goto label08;

        $r18 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        virtualinvoke $r18.<android.support.test.rule.ActivityTestRule: void finishActivity()>();

     label08:
        $r13 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        staticinvoke <android.support.test.rule.ActivityTestRule: android.app.Instrumentation$ActivityResult access$502(android.support.test.rule.ActivityTestRule,android.app.Instrumentation$ActivityResult)>($r13, null);

        $r15 = staticinvoke <android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: android.support.test.runner.lifecycle.ActivityLifecycleMonitor getInstance()>();

        $r16 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r17 = staticinvoke <android.support.test.rule.ActivityTestRule: android.support.test.runner.lifecycle.ActivityLifecycleCallback access$600(android.support.test.rule.ActivityTestRule)>($r16);

        interfaceinvoke $r15.<android.support.test.runner.lifecycle.ActivityLifecycleMonitor: void removeLifecycleCallback(android.support.test.runner.lifecycle.ActivityLifecycleCallback)>($r17);

        goto label12;

     label09:
        $r27 := @caughtexception;

        r3 = $r27;

        if r1 == null goto label10;

        virtualinvoke r1.<android.support.test.runner.MonitoringInstrumentation: void useDefaultInterceptingActivityFactory()>();

     label10:
        $r28 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r29 = $r28.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity>;

        $r30 = virtualinvoke $r29.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r4 = (android.app.Activity) $r30;

        if r4 == null goto label11;

        $r36 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        virtualinvoke $r36.<android.support.test.rule.ActivityTestRule: void finishActivity()>();

     label11:
        $r31 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        staticinvoke <android.support.test.rule.ActivityTestRule: android.app.Instrumentation$ActivityResult access$502(android.support.test.rule.ActivityTestRule,android.app.Instrumentation$ActivityResult)>($r31, null);

        $r33 = staticinvoke <android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: android.support.test.runner.lifecycle.ActivityLifecycleMonitor getInstance()>();

        $r34 = r0.<android.support.test.rule.ActivityTestRule$ActivityStatement: android.support.test.rule.ActivityTestRule this$0>;

        $r35 = staticinvoke <android.support.test.rule.ActivityTestRule: android.support.test.runner.lifecycle.ActivityLifecycleCallback access$600(android.support.test.rule.ActivityTestRule)>($r34);

        interfaceinvoke $r33.<android.support.test.runner.lifecycle.ActivityLifecycleMonitor: void removeLifecycleCallback(android.support.test.runner.lifecycle.ActivityLifecycleCallback)>($r35);

        throw r3;

     label12:
        return;

        catch java.lang.Throwable from label03 to label06 with label09;
    }

android.support.test.rule.ActivityTestRule$LifecycleCallback
<android.support.test.rule.ActivityTestRule$LifecycleCallback: android.support.test.rule.ActivityTestRule this$0>
    private void <init>(android.support.test.rule.ActivityTestRule)
    {
        android.support.test.rule.ActivityTestRule$LifecycleCallback r0;
        android.support.test.rule.ActivityTestRule r1;

        r0 := @this: android.support.test.rule.ActivityTestRule$LifecycleCallback;

        r1 := @parameter0: android.support.test.rule.ActivityTestRule;

        r0.<android.support.test.rule.ActivityTestRule$LifecycleCallback: android.support.test.rule.ActivityTestRule this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onActivityLifecycleChanged(android.app.Activity, android.support.test.runner.lifecycle.Stage)
    {
        android.support.test.rule.ActivityTestRule$LifecycleCallback r0;
        android.app.Activity r1, $r13, $r19;
        android.support.test.runner.lifecycle.Stage r2, $r5, $r6;
        android.support.test.rule.ActivityTestRule $r3, $r7, $r9, $r10, $r14, $r15, $r16;
        java.lang.Class $r4, $r11, $r17;
        boolean $z0, $z1;
        android.app.Instrumentation$ActivityResult $r8;
        java.lang.Object $r12, $r18;
        java.lang.ref.WeakReference $r20;

        r0 := @this: android.support.test.rule.ActivityTestRule$LifecycleCallback;

        r1 := @parameter0: android.app.Activity;

        r2 := @parameter1: android.support.test.runner.lifecycle.Stage;

        $r3 = r0.<android.support.test.rule.ActivityTestRule$LifecycleCallback: android.support.test.rule.ActivityTestRule this$0>;

        $r4 = staticinvoke <android.support.test.rule.ActivityTestRule: java.lang.Class access$700(android.support.test.rule.ActivityTestRule)>($r3);

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r5 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage RESUMED>;

        if $r5 != r2 goto label1;

        $r15 = r0.<android.support.test.rule.ActivityTestRule$LifecycleCallback: android.support.test.rule.ActivityTestRule this$0>;

        $r16 = r0.<android.support.test.rule.ActivityTestRule$LifecycleCallback: android.support.test.rule.ActivityTestRule this$0>;

        $r14 = r0.<android.support.test.rule.ActivityTestRule$LifecycleCallback: android.support.test.rule.ActivityTestRule this$0>;

        $r17 = staticinvoke <android.support.test.rule.ActivityTestRule: java.lang.Class access$700(android.support.test.rule.ActivityTestRule)>($r14);

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r1);

        $r19 = (android.app.Activity) $r18;

        $r20 = virtualinvoke $r16.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference makeWeakReference(android.app.Activity)>($r19);

        $r15.<android.support.test.rule.ActivityTestRule: java.lang.ref.WeakReference mActivity> = $r20;

        goto label2;

     label1:
        $r6 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage PAUSED>;

        if $r6 != r2 goto label2;

        $z1 = virtualinvoke r1.<android.app.Activity: boolean isFinishing()>();

        if $z1 == 0 goto label2;

        $r7 = r0.<android.support.test.rule.ActivityTestRule$LifecycleCallback: android.support.test.rule.ActivityTestRule this$0>;

        $r8 = staticinvoke <android.support.test.rule.ActivityTestRule: android.app.Instrumentation$ActivityResult access$500(android.support.test.rule.ActivityTestRule)>($r7);

        if $r8 == null goto label2;

        $r10 = r0.<android.support.test.rule.ActivityTestRule$LifecycleCallback: android.support.test.rule.ActivityTestRule this$0>;

        $r9 = r0.<android.support.test.rule.ActivityTestRule$LifecycleCallback: android.support.test.rule.ActivityTestRule this$0>;

        $r11 = staticinvoke <android.support.test.rule.ActivityTestRule: java.lang.Class access$700(android.support.test.rule.ActivityTestRule)>($r9);

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r1);

        $r13 = (android.app.Activity) $r12;

        staticinvoke <android.support.test.rule.ActivityTestRule: void access$100(android.support.test.rule.ActivityTestRule,android.app.Activity)>($r10, $r13);

     label2:
        return;
    }

    void <init>(android.support.test.rule.ActivityTestRule, android.support.test.rule.ActivityTestRule$1)
    {
        android.support.test.rule.ActivityTestRule$LifecycleCallback r0;
        android.support.test.rule.ActivityTestRule r1;
        android.support.test.rule.ActivityTestRule$1 r2;

        r0 := @this: android.support.test.rule.ActivityTestRule$LifecycleCallback;

        r1 := @parameter0: android.support.test.rule.ActivityTestRule;

        r2 := @parameter1: android.support.test.rule.ActivityTestRule$1;

        specialinvoke r0.<android.support.test.rule.ActivityTestRule$LifecycleCallback: void <init>(android.support.test.rule.ActivityTestRule)>(r1);

        return;
    }

