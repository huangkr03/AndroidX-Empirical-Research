android.support.test.espresso.remote.internal.deps.guava.base.Throwables
<android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.Object jla>
<android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.reflect.Method getStackTraceElementMethod>
<android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.reflect.Method getStackTraceDepthMethod>
    public static void throwIfUnchecked(java.lang.Throwable)
    {
        java.lang.Throwable r0, r4;
        boolean $z0, $z1;
        java.lang.Error $r2;
        java.lang.RuntimeException $r3;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.RuntimeException) r0;

        r4 = (java.lang.Throwable) $r3;

        throw r4;

     label1:
        $z1 = r0 instanceof java.lang.Error;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.Error) r0;

        throw $r2;

     label2:
        return;
    }

    public static java.lang.RuntimeException propagate(java.lang.Throwable)
    {
        java.lang.Throwable r0, r3;
        java.lang.RuntimeException r2;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>(r0);

        r2 = new java.lang.RuntimeException;

        specialinvoke r2.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        r3 = (java.lang.Throwable) r2;

        throw r3;
    }

    public static java.lang.String getStackTraceAsString(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.io.StringWriter r1, $r2;
        java.io.PrintWriter $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Throwable;

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        r1 = $r2;

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>(r1);

        staticinvoke <com.google.devtools.build.android.desugar.runtime.ThrowableExtension: void printStackTrace(java.lang.Throwable,java.io.PrintWriter)>(r0, $r3);

        $r4 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r4;
    }

    private static java.lang.Object getJLA()
    {
        java.lang.reflect.Method r0;
        java.lang.Class[] $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4, $r5, r7, r8;
        java.lang.Class r6;

     label1:
        r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.misc.SharedSecrets", 0, null);

        $r1 = newarray (java.lang.Class)[0];

        r0 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getJavaLangAccess", $r1);

        $r2 = newarray (java.lang.Object)[0];

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        throw r7;

     label4:
        $r4 := @caughtexception;

        r8 = $r4;

        return null;

        catch java.lang.ThreadDeath from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private static java.lang.reflect.Method getGetMethod()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1;
        java.lang.reflect.Method $r2;

        $r0 = newarray (java.lang.Class)[2];

        $r0[0] = class "Ljava/lang/Throwable;";

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[1] = $r1;

        $r2 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[])>("getStackTraceElement", $r0);

        return $r2;
    }

    private static java.lang.reflect.Method getSizeMethod()
    {
        java.lang.Class[] $r0;
        java.lang.Object $r1;
        java.lang.Object[] $r2;
        java.lang.Throwable $r3, $r5, r7;
        java.lang.reflect.Method r6;

     label1:
        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "Ljava/lang/Throwable;";

        r6 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[])>("getStackTraceDepth", $r0);

        if r6 != null goto label3;

     label2:
        return null;

     label3:
        $r1 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.Object getJLA()>();

        $r2 = newarray (java.lang.Object)[1];

        $r3 = new java.lang.Throwable;

        specialinvoke $r3.<java.lang.Throwable: void <init>()>();

        $r2[0] = $r3;

        virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r2);

     label4:
        return r6;

     label5:
        $r5 := @caughtexception;

        r7 = $r5;

        return null;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.UnsupportedOperationException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
    }

    private static transient java.lang.reflect.Method getJlaMethod(java.lang.String, java.lang.Class[]) throws java.lang.ThreadDeath
    {
        java.lang.String r0;
        java.lang.Class[] r1;
        java.lang.Class $r2;
        java.lang.reflect.Method $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.misc.JavaLangAccess", 0, null);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r0, r1);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

        throw r6;

     label4:
        $r4 := @caughtexception;

        r7 = $r4;

        return null;

        catch java.lang.ThreadDeath from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    static void <clinit>()
    {
        java.lang.Object $r0, $r1, $r2;
        java.lang.reflect.Method $r3, $r4;

        $r0 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.Object getJLA()>();

        <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.Object jla> = $r0;

        $r1 = <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.Object jla>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.reflect.Method getGetMethod()>();

     label2:
        <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.reflect.Method getStackTraceElementMethod> = $r3;

        $r2 = <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.Object jla>;

        if $r2 != null goto label3;

        $r4 = null;

        goto label4;

     label3:
        $r4 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.reflect.Method getSizeMethod()>();

     label4:
        <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.reflect.Method getStackTraceDepthMethod> = $r4;

        return;
    }

