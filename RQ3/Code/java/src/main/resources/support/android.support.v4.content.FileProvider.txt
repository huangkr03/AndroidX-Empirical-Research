android.support.v4.content.FileProvider
<android.support.v4.content.FileProvider: java.lang.String[] COLUMNS>
<android.support.v4.content.FileProvider: java.lang.String META_DATA_FILE_PROVIDER_PATHS>
<android.support.v4.content.FileProvider: java.lang.String TAG_ROOT_PATH>
<android.support.v4.content.FileProvider: java.lang.String TAG_FILES_PATH>
<android.support.v4.content.FileProvider: java.lang.String TAG_CACHE_PATH>
<android.support.v4.content.FileProvider: java.lang.String TAG_EXTERNAL>
<android.support.v4.content.FileProvider: java.lang.String TAG_EXTERNAL_FILES>
<android.support.v4.content.FileProvider: java.lang.String TAG_EXTERNAL_CACHE>
<android.support.v4.content.FileProvider: java.lang.String TAG_EXTERNAL_MEDIA>
<android.support.v4.content.FileProvider: java.lang.String ATTR_NAME>
<android.support.v4.content.FileProvider: java.lang.String ATTR_PATH>
<android.support.v4.content.FileProvider: java.io.File DEVICE_ROOT>
<android.support.v4.content.FileProvider: java.util.HashMap sCache>
<android.support.v4.content.FileProvider: android.support.v4.content.FileProvider$PathStrategy mStrategy>
    public void <init>()
    {
        android.support.v4.content.FileProvider r0;

        r0 := @this: android.support.v4.content.FileProvider;

        specialinvoke r0.<android.content.ContentProvider: void <init>()>();

        return;
    }

    public boolean onCreate()
    {
        android.support.v4.content.FileProvider r0;

        r0 := @this: android.support.v4.content.FileProvider;

        return 1;
    }

    public void attachInfo(android.content.Context, android.content.pm.ProviderInfo)
    {
        android.support.v4.content.FileProvider r0;
        android.content.Context r1;
        android.content.pm.ProviderInfo r2;
        boolean $z0, $z1;
        java.lang.String $r3;
        android.support.v4.content.FileProvider$PathStrategy $r4;
        java.lang.SecurityException $r5, $r6;

        r0 := @this: android.support.v4.content.FileProvider;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.pm.ProviderInfo;

        specialinvoke r0.<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>(r1, r2);

        $z0 = r2.<android.content.pm.ProviderInfo: boolean exported>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Provider must not be exported");

        throw $r6;

     label1:
        $z1 = r2.<android.content.pm.ProviderInfo: boolean grantUriPermissions>;

        if $z1 != 0 goto label2;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Provider must grant uri permissions");

        throw $r5;

     label2:
        $r3 = r2.<android.content.pm.ProviderInfo: java.lang.String authority>;

        $r4 = staticinvoke <android.support.v4.content.FileProvider: android.support.v4.content.FileProvider$PathStrategy getPathStrategy(android.content.Context,java.lang.String)>(r1, $r3);

        r0.<android.support.v4.content.FileProvider: android.support.v4.content.FileProvider$PathStrategy mStrategy> = $r4;

        return;
    }

    public static android.net.Uri getUriForFile(android.content.Context, java.lang.String, java.io.File)
    {
        android.content.Context r0;
        java.lang.String r1;
        java.io.File r2;
        android.support.v4.content.FileProvider$PathStrategy r3;
        android.net.Uri $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.io.File;

        r3 = staticinvoke <android.support.v4.content.FileProvider: android.support.v4.content.FileProvider$PathStrategy getPathStrategy(android.content.Context,java.lang.String)>(r0, r1);

        $r4 = interfaceinvoke r3.<android.support.v4.content.FileProvider$PathStrategy: android.net.Uri getUriForFile(java.io.File)>(r2);

        return $r4;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        android.support.v4.content.FileProvider r0;
        android.net.Uri r1;
        java.lang.String r2, r4, r6, $r9, $r10, $r12;
        java.lang.String[] r3, r13, r14, r16, r17;
        java.io.File r5;
        int i0, $i1, $i2, $i3, $i5, i6, i7;
        android.support.v4.content.FileProvider$PathStrategy $r7;
        android.database.MatrixCursor $r8, r19;
        boolean $z0, $z1;
        long $l4;
        java.lang.Long $r11;
        java.lang.Object[] r15, r18;

        r0 := @this: android.support.v4.content.FileProvider;

        r1 := @parameter0: android.net.Uri;

        r13 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: java.lang.String;

        $r7 = r0.<android.support.v4.content.FileProvider: android.support.v4.content.FileProvider$PathStrategy mStrategy>;

        r5 = interfaceinvoke $r7.<android.support.v4.content.FileProvider$PathStrategy: java.io.File getFileForUri(android.net.Uri)>(r1);

        if r13 != null goto label1;

        r13 = <android.support.v4.content.FileProvider: java.lang.String[] COLUMNS>;

     label1:
        $i1 = lengthof r13;

        r14 = newarray (java.lang.String)[$i1];

        $i2 = lengthof r13;

        r15 = newarray (java.lang.Object)[$i2];

        i6 = 0;

        r16 = r13;

        i0 = lengthof r16;

        i7 = 0;

     label2:
        if i7 >= i0 goto label5;

        r6 = r16[i7];

        $r9 = "_display_name";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label3;

        r14[i6] = "_display_name";

        $i5 = i6;

        i6 = i6 + 1;

        $r12 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        r15[$i5] = $r12;

        goto label4;

     label3:
        $r10 = "_size";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label4;

        r14[i6] = "_size";

        $i3 = i6;

        i6 = i6 + 1;

        $l4 = virtualinvoke r5.<java.io.File: long length()>();

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        r15[$i3] = $r11;

     label4:
        i7 = i7 + 1;

        goto label2;

     label5:
        r17 = staticinvoke <android.support.v4.content.FileProvider: java.lang.String[] copyOf(java.lang.String[],int)>(r14, i6);

        r18 = staticinvoke <android.support.v4.content.FileProvider: java.lang.Object[] copyOf(java.lang.Object[],int)>(r15, i6);

        $r8 = new android.database.MatrixCursor;

        specialinvoke $r8.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>(r17, 1);

        r19 = $r8;

        virtualinvoke r19.<android.database.MatrixCursor: void addRow(java.lang.Object[])>(r18);

        return r19;
    }

    public java.lang.String getType(android.net.Uri)
    {
        android.support.v4.content.FileProvider r0;
        android.net.Uri r1;
        java.io.File r2;
        int i0, $i1;
        java.lang.String r3, r4, $r6, $r7;
        android.support.v4.content.FileProvider$PathStrategy $r5;
        android.webkit.MimeTypeMap $r8;

        r0 := @this: android.support.v4.content.FileProvider;

        r1 := @parameter0: android.net.Uri;

        $r5 = r0.<android.support.v4.content.FileProvider: android.support.v4.content.FileProvider$PathStrategy mStrategy>;

        r2 = interfaceinvoke $r5.<android.support.v4.content.FileProvider$PathStrategy: java.io.File getFileForUri(android.net.Uri)>(r1);

        $r6 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        i0 = virtualinvoke $r6.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 < 0 goto label1;

        $r7 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $i1 = i0 + 1;

        r3 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>($i1);

        $r8 = staticinvoke <android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>();

        r4 = virtualinvoke $r8.<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>(r3);

        if r4 == null goto label1;

        return r4;

     label1:
        return "application/octet-stream";
    }

    public android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        android.support.v4.content.FileProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.v4.content.FileProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("No external inserts");

        throw $r3;
    }

    public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.support.v4.content.FileProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.String r3;
        java.lang.String[] r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: android.support.v4.content.FileProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("No external updates");

        throw $r5;
    }

    public int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        android.support.v4.content.FileProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        java.lang.String[] r3;
        java.io.File r4;
        android.support.v4.content.FileProvider$PathStrategy $r5;
        boolean $z0;
        byte $b0;

        r0 := @this: android.support.v4.content.FileProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $r5 = r0.<android.support.v4.content.FileProvider: android.support.v4.content.FileProvider$PathStrategy mStrategy>;

        r4 = interfaceinvoke $r5.<android.support.v4.content.FileProvider$PathStrategy: java.io.File getFileForUri(android.net.Uri)>(r1);

        $z0 = virtualinvoke r4.<java.io.File: boolean delete()>();

        if $z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        return $b0;
    }

    public android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        android.support.v4.content.FileProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        java.io.File r3;
        int i0;
        android.support.v4.content.FileProvider$PathStrategy $r4;
        android.os.ParcelFileDescriptor $r5;

        r0 := @this: android.support.v4.content.FileProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.support.v4.content.FileProvider: android.support.v4.content.FileProvider$PathStrategy mStrategy>;

        r3 = interfaceinvoke $r4.<android.support.v4.content.FileProvider$PathStrategy: java.io.File getFileForUri(android.net.Uri)>(r1);

        i0 = staticinvoke <android.support.v4.content.FileProvider: int modeToMode(java.lang.String)>(r2);

        $r5 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r3, i0);

        return $r5;
    }

    private static android.support.v4.content.FileProvider$PathStrategy getPathStrategy(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        java.util.HashMap r2, $r4, $r5, $r7;
        java.lang.Throwable r3, $r9, $r10, $r12, r15, r16;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r11, $r13;
        android.support.v4.content.FileProvider$PathStrategy r14;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r4 = <android.support.v4.content.FileProvider: java.util.HashMap sCache>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $r5 = <android.support.v4.content.FileProvider: java.util.HashMap sCache>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r14 = (android.support.v4.content.FileProvider$PathStrategy) $r6;

        if r14 != null goto label07;

     label02:
        r14 = staticinvoke <android.support.v4.content.FileProvider: android.support.v4.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context,java.lang.String)>(r0, r1);

     label03:
        goto label06;

     label04:
        $r12 := @caughtexception;

        r15 = $r12;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to parse android.support.FILE_PROVIDER_PATHS meta-data", r15);

        throw $r13;

     label05:
        $r10 := @caughtexception;

        r16 = $r10;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to parse android.support.FILE_PROVIDER_PATHS meta-data", r16);

        throw $r11;

     label06:
        $r7 = <android.support.v4.content.FileProvider: java.util.HashMap sCache>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r14);

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label10:
        throw r3;

     label11:
        return r14;

        catch java.io.IOException from label02 to label03 with label04;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private static android.support.v4.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context, java.lang.String) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        android.content.Context r0;
        java.lang.String r1, r5, r6, r7, $r11, $r12, $r13, $r14, $r15, $r16, $r19;
        android.support.v4.content.FileProvider$SimplePathStrategy r2, $r8;
        android.content.pm.ProviderInfo r3;
        android.content.res.XmlResourceParser r4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.content.pm.PackageManager $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String[] $r17;
        java.io.File $r18, r21;
        java.lang.IllegalArgumentException $r20;
        java.io.File[] r22, r23, r24;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r8 = new android.support.v4.content.FileProvider$SimplePathStrategy;

        specialinvoke $r8.<android.support.v4.content.FileProvider$SimplePathStrategy: void <init>(java.lang.String)>(r1);

        r2 = $r8;

        $r9 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r3 = virtualinvoke $r9.<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>(r1, 128);

        $r10 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r4 = virtualinvoke r3.<android.content.pm.ProviderInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>($r10, "android.support.FILE_PROVIDER_PATHS");

        if r4 != null goto label01;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing android.support.FILE_PROVIDER_PATHS meta-data");

        throw $r20;

     label01:
        $i5 = interfaceinvoke r4.<android.content.res.XmlResourceParser: int next()>();

        i0 = $i5;

        if $i5 == 1 goto label12;

        if i0 != 2 goto label01;

        r5 = interfaceinvoke r4.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        r6 = interfaceinvoke r4.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r7 = interfaceinvoke r4.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "path");

        r21 = null;

        $r11 = "root-path";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label02;

        r21 = <android.support.v4.content.FileProvider: java.io.File DEVICE_ROOT>;

        goto label10;

     label02:
        $r12 = "files-path";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label03;

        r21 = virtualinvoke r0.<android.content.Context: java.io.File getFilesDir()>();

        goto label10;

     label03:
        $r13 = "cache-path";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 == 0 goto label04;

        r21 = virtualinvoke r0.<android.content.Context: java.io.File getCacheDir()>();

        goto label10;

     label04:
        $r14 = "external-path";

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z3 == 0 goto label05;

        r21 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        goto label10;

     label05:
        $r15 = "external-files-path";

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z4 == 0 goto label07;

        r22 = staticinvoke <android.support.v4.content.ContextCompat: java.io.File[] getExternalFilesDirs(android.content.Context,java.lang.String)>(r0, null);

        $i4 = lengthof r22;

        if $i4 <= 0 goto label06;

        r21 = r22[0];

     label06:
        goto label10;

     label07:
        $r16 = "external-cache-path";

        $z5 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z5 == 0 goto label09;

        r23 = staticinvoke <android.support.v4.content.ContextCompat: java.io.File[] getExternalCacheDirs(android.content.Context)>(r0);

        $i3 = lengthof r23;

        if $i3 <= 0 goto label08;

        r21 = r23[0];

     label08:
        goto label10;

     label09:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 21 goto label10;

        $r19 = "external-media-path";

        $z6 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z6 == 0 goto label10;

        r24 = virtualinvoke r0.<android.content.Context: java.io.File[] getExternalMediaDirs()>();

        $i2 = lengthof r24;

        if $i2 <= 0 goto label10;

        r21 = r24[0];

     label10:
        if r21 == null goto label11;

        $r17 = newarray (java.lang.String)[1];

        $r17[0] = r7;

        $r18 = staticinvoke <android.support.v4.content.FileProvider: java.io.File buildPath(java.io.File,java.lang.String[])>(r21, $r17);

        virtualinvoke r2.<android.support.v4.content.FileProvider$SimplePathStrategy: void addRoot(java.lang.String,java.io.File)>(r6, $r18);

     label11:
        goto label01;

     label12:
        return r2;
    }

    private static int modeToMode(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        int i0;

        r0 := @parameter0: java.lang.String;

        $r1 = "r";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        i0 = 268435456;

        goto label7;

     label1:
        $r2 = "w";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label2;

        $r3 = "wt";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

     label2:
        i0 = 738197504;

        goto label7;

     label3:
        $r4 = "wa";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label4;

        i0 = 704643072;

        goto label7;

     label4:
        $r5 = "rw";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z4 == 0 goto label5;

        i0 = 939524096;

        goto label7;

     label5:
        $r6 = "rwt";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z5 == 0 goto label6;

        i0 = 1006632960;

        goto label7;

     label6:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mode: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label7:
        return i0;
    }

    private static transient java.io.File buildPath(java.io.File, java.lang.String[])
    {
        java.io.File r0, $r4, r5;
        java.lang.String[] r1, r2;
        int i0, i1;
        java.lang.String r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        r5 = r0;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        if r3 == null goto label2;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, r3);

        r5 = $r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r5;
    }

    private static java.lang.String[] copyOf(java.lang.String[], int)
    {
        java.lang.String[] r0, r1;
        int i0;

        r0 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        r1 = newarray (java.lang.String)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        return r1;
    }

    private static java.lang.Object[] copyOf(java.lang.Object[], int)
    {
        java.lang.Object[] r0, r1;
        int i0;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 = newarray (java.lang.Object)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, i0);

        return r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.io.File $r1;
        java.util.HashMap $r2;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "_display_name";

        $r0[1] = "_size";

        <android.support.v4.content.FileProvider: java.lang.String[] COLUMNS> = $r0;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/");

        <android.support.v4.content.FileProvider: java.io.File DEVICE_ROOT> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <android.support.v4.content.FileProvider: java.util.HashMap sCache> = $r2;

        return;
    }

android.support.v4.content.FileProvider$PathStrategy
<android.support.v4.content.FileProvider$PathStrategy: android.net.Uri getUriForFile(java.io.File)>
<android.support.v4.content.FileProvider$PathStrategy: java.io.File getFileForUri(android.net.Uri)>
android.support.v4.content.FileProvider$SimplePathStrategy
<android.support.v4.content.FileProvider$SimplePathStrategy: java.lang.String mAuthority>
<android.support.v4.content.FileProvider$SimplePathStrategy: java.util.HashMap mRoots>
    void <init>(java.lang.String)
    {
        android.support.v4.content.FileProvider$SimplePathStrategy r0;
        java.lang.String r1;
        java.util.HashMap $r2;

        r0 := @this: android.support.v4.content.FileProvider$SimplePathStrategy;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.support.v4.content.FileProvider$SimplePathStrategy: java.util.HashMap mRoots> = $r2;

        r0.<android.support.v4.content.FileProvider$SimplePathStrategy: java.lang.String mAuthority> = r1;

        return;
    }

    void addRoot(java.lang.String, java.io.File)
    {
        android.support.v4.content.FileProvider$SimplePathStrategy r0;
        java.lang.String r1, $r11;
        java.lang.Throwable r2, $r6;
        boolean $z0;
        java.util.HashMap $r3;
        java.lang.IllegalArgumentException $r5, $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.io.File r12, r13;

        r0 := @this: android.support.v4.content.FileProvider$SimplePathStrategy;

        r1 := @parameter0: java.lang.String;

        r12 := @parameter1: java.io.File;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name must not be empty");

        throw $r5;

     label1:
        r13 = virtualinvoke r12.<java.io.File: java.io.File getCanonicalFile()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve canonical path for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r11, r2);

        throw $r7;

     label4:
        $r3 = r0.<android.support.v4.content.FileProvider$SimplePathStrategy: java.util.HashMap mRoots>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r13);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.net.Uri getUriForFile(java.io.File)
    {
        android.support.v4.content.FileProvider$SimplePathStrategy r0;
        java.io.File r1, $r7, $r29, $r31;
        java.util.Map$Entry r2, r41;
        java.lang.String r3, $r10, $r11, $r14, $r18, $r26, $r32, $r38, r39, r43, r44, r45;
        java.util.HashMap $r4;
        java.util.Set $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r9, $r27, $r28, $r30;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r8, $r12, $r13, $r15, $r23, $r24, $r25, $r35, $r36, $r37;
        android.net.Uri$Builder $r16, $r17, $r19, $r20;
        android.net.Uri $r21;
        java.lang.IllegalArgumentException $r22, $r34;
        java.lang.Throwable $r33, r40;
        java.util.Iterator r42;

        r0 := @this: android.support.v4.content.FileProvider$SimplePathStrategy;

        r1 := @parameter0: java.io.File;

     label01:
        r39 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

     label02:
        goto label04;

     label03:
        $r33 := @caughtexception;

        r40 = $r33;

        $r34 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve canonical path for ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r34;

     label04:
        r41 = null;

        $r4 = r0.<android.support.v4.content.FileProvider$SimplePathStrategy: java.util.HashMap mRoots>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set entrySet()>();

        r42 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r27 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r27;

        $r28 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r29 = (java.io.File) $r28;

        r3 = virtualinvoke $r29.<java.io.File: java.lang.String getPath()>();

        $z2 = virtualinvoke r39.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z2 == 0 goto label07;

        if r41 == null goto label06;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $r30 = interfaceinvoke r41.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r31 = (java.io.File) $r30;

        $r32 = virtualinvoke $r31.<java.io.File: java.lang.String getPath()>();

        $i4 = virtualinvoke $r32.<java.lang.String: int length()>();

        if $i3 <= $i4 goto label07;

     label06:
        r41 = r2;

     label07:
        goto label05;

     label08:
        if r41 != null goto label09;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find configured root that contains ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label09:
        $r6 = interfaceinvoke r41.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.io.File) $r6;

        r43 = virtualinvoke $r7.<java.io.File: java.lang.String getPath()>();

        $z1 = virtualinvoke r43.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z1 == 0 goto label10;

        $i2 = virtualinvoke r43.<java.lang.String: int length()>();

        r44 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int)>($i2);

        goto label11;

     label10:
        $i0 = virtualinvoke r43.<java.lang.String: int length()>();

        $i1 = $i0 + 1;

        r44 = virtualinvoke r39.<java.lang.String: java.lang.String substring(int)>($i1);

     label11:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = interfaceinvoke r41.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r14 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>(r44, "/");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r45 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new android.net.Uri$Builder;

        specialinvoke $r16.<android.net.Uri$Builder: void <init>()>();

        $r17 = virtualinvoke $r16.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r18 = r0.<android.support.v4.content.FileProvider$SimplePathStrategy: java.lang.String mAuthority>;

        $r19 = virtualinvoke $r17.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>(r45);

        $r21 = virtualinvoke $r20.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r21;

        catch java.io.IOException from label01 to label02 with label03;
    }

    public java.io.File getFileForUri(android.net.Uri)
    {
        android.support.v4.content.FileProvider$SimplePathStrategy r0;
        android.net.Uri r1;
        int i0, $i1;
        java.lang.String r2, $r5, $r6, $r10, $r11, $r17, $r23, r24, r25;
        java.io.File r3, $r9, r26, r27;
        java.lang.Throwable r4, $r18;
        java.util.HashMap $r7;
        java.lang.Object $r8;
        boolean $z0;
        java.lang.SecurityException $r12;
        java.lang.IllegalArgumentException $r13, $r19;
        java.lang.StringBuilder $r14, $r15, $r16, $r20, $r21, $r22;

        r0 := @this: android.support.v4.content.FileProvider$SimplePathStrategy;

        r1 := @parameter0: android.net.Uri;

        r24 = virtualinvoke r1.<android.net.Uri: java.lang.String getEncodedPath()>();

        i0 = virtualinvoke r24.<java.lang.String: int indexOf(int,int)>(47, 1);

        $r5 = virtualinvoke r24.<java.lang.String: java.lang.String substring(int,int)>(1, i0);

        r2 = staticinvoke <android.net.Uri: java.lang.String decode(java.lang.String)>($r5);

        $i1 = i0 + 1;

        $r6 = virtualinvoke r24.<java.lang.String: java.lang.String substring(int)>($i1);

        r25 = staticinvoke <android.net.Uri: java.lang.String decode(java.lang.String)>($r6);

        $r7 = r0.<android.support.v4.content.FileProvider$SimplePathStrategy: java.util.HashMap mRoots>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.io.File) $r8;

        if r3 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find configured root for ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label1:
        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, r25);

        r26 = $r9;

     label2:
        r27 = virtualinvoke r26.<java.io.File: java.io.File getCanonicalFile()>();

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        r4 = $r18;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve canonical path for ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label5:
        $r10 = virtualinvoke r27.<java.io.File: java.lang.String getPath()>();

        $r11 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>($r11);

        if $z0 != 0 goto label6;

        $r12 = new java.lang.SecurityException;

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Resolved path jumped beyond configured root");

        throw $r12;

     label6:
        return r27;

        catch java.io.IOException from label2 to label3 with label4;
    }

