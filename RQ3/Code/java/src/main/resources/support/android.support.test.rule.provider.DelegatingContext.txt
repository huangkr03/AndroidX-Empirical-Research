android.support.test.rule.provider.DelegatingContext
<android.support.test.rule.provider.DelegatingContext: java.lang.String TAG>
<android.support.test.rule.provider.DelegatingContext: int NO_OP_UID>
<android.support.test.rule.provider.DelegatingContext: int NO_OP_PID>
<android.support.test.rule.provider.DelegatingContext: java.lang.String mPrefix>
<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>
<android.support.test.rule.provider.DelegatingContext: android.content.ContentResolver mContentResolver>
<android.support.test.rule.provider.DelegatingContext: java.util.Set mDatabases>
<android.support.test.rule.provider.DelegatingContext: java.util.Set mFiles>
<android.support.test.rule.provider.DelegatingContext: java.util.Set mRevokedPermissions>
    public void <init>(android.content.Context, java.lang.String, android.content.ContentResolver)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Context r1, $r5;
        java.lang.String r2, $r10;
        android.content.ContentResolver r3, $r12;
        java.lang.Object $r4, $r9, $r11;
        java.util.HashSet $r6, $r7, $r8;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ContentResolver;

        $r4 = staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (android.content.Context) $r4;

        specialinvoke r0.<android.content.ContextWrapper: void <init>(android.content.Context)>($r5);

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mDatabases> = $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mFiles> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mRevokedPermissions> = $r8;

        r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext> = r1;

        $r9 = staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r10 = (java.lang.String) $r9;

        r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String mPrefix> = $r10;

        $r11 = staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r12 = (android.content.ContentResolver) $r11;

        r0.<android.support.test.rule.provider.DelegatingContext: android.content.ContentResolver mContentResolver> = $r12;

        return;
    }

    public android.content.ContentResolver getContentResolver()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.ContentResolver $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    public java.io.File getDir(java.lang.String, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, $r3;
        int i0;
        boolean $z0, $z1;
        android.content.Context $r2;
        java.io.File $r4;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z1, "Directory name cannot be empty or null");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r3 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<android.content.Context: java.io.File getDir(java.lang.String,int)>($r3, i0);

        return $r4;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, r3, $r8, $r13, $r15;
        int i0, $i1, $i2;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        boolean $z0, $z1, $z3, $z4, $z5;
        java.util.Set $r4;
        android.content.Context $r5, $r7, $r14;
        java.io.File $r6;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        android.database.sqlite.SQLiteDatabase $r16;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z5, "Database name cannot be empty or null");

        $r4 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mDatabases>;

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        virtualinvoke r0.<android.support.test.rule.provider.DelegatingContext: boolean addDatabase(java.lang.String)>(r1);

        r3 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        $r5 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>(r3);

        $z3 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label3;

        $r7 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $z4 = virtualinvoke $r7.<android.content.Context: boolean deleteDatabase(java.lang.String)>(r3);

        if $z4 != 0 goto label3;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i2 = 65 + $i1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database with prefixed name ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists but failed to delete.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DelegatingContext", $r13);

     label3:
        $r14 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r15 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        $r16 = virtualinvoke $r14.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r15, i0, r2);

        return $r16;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, r4, $r10, $r15;
        int i0, $i1, $i2, $i3;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        android.database.DatabaseErrorHandler r3;
        boolean $z0, $z1, $z3, $z4, $z5;
        java.lang.UnsupportedOperationException $r5;
        java.util.Set $r6;
        android.content.Context $r7, $r9, $r16;
        java.io.File $r8;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        android.database.sqlite.SQLiteDatabase $r17;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r3 := @parameter3: android.database.DatabaseErrorHandler;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z5, "Database name cannot be empty or null");

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 11 goto label4;

        r4 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        $r6 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mDatabases>;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        virtualinvoke r0.<android.support.test.rule.provider.DelegatingContext: boolean addDatabase(java.lang.String)>(r1);

        $r7 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>(r4);

        $z3 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label3;

        $r9 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $z4 = virtualinvoke $r9.<android.content.Context: boolean deleteDatabase(java.lang.String)>(r4);

        if $z4 != 0 goto label3;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $i2 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i3 = 66 + $i2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Database with prefixed name ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists and cannot be deleted.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DelegatingContext", $r15);

     label3:
        $r16 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r17 = virtualinvoke $r16.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>(r4, i0, r2, r3);

        return $r17;

     label4:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("For API level < 11, use openOrCreateDatabase(String, int, CursorFactory) instead");

        throw $r5;
    }

    public java.lang.String[] databaseList()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.util.Set $r1, $r2;
        int $i0;
        java.lang.String[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mDatabases>;

        $r1 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mDatabases>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public boolean deleteDatabase(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, $r4;
        boolean $z0, $z1, $z2, $z4;
        java.util.Set $r2, $r5;
        android.content.Context $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z4, "Database name cannot be empty or null");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mDatabases>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r3 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r4 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        $z2 = virtualinvoke $r3.<android.content.Context: boolean deleteDatabase(java.lang.String)>($r4);

        if $z2 == 0 goto label3;

        $r5 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mDatabases>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return 1;

     label3:
        return 0;
    }

    public java.io.File getDatabasePath(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, $r3;
        boolean $z0, $z1;
        android.content.Context $r2;
        java.io.File $r4;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z1, "Database name cannot be empty or null");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r3 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>($r3);

        return $r4;
    }

    public java.io.FileInputStream openFileInput(java.lang.String) throws java.io.FileNotFoundException
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, $r4, $r8;
        boolean $z0, $z1, $z2;
        java.util.Set $r2;
        android.content.Context $r3;
        java.io.FileInputStream $r5;
        java.io.FileNotFoundException $r6;
        java.lang.Object[] $r7;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z2, "File name cannot be empty or null");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mFiles>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        $r6 = new java.io.FileNotFoundException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("File %s is not found in current context", $r7);

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label3:
        $r3 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r4 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        $r5 = virtualinvoke $r3.<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>($r4);

        return $r5;
    }

    public java.io.FileOutputStream openFileOutput(java.lang.String, int) throws java.io.FileNotFoundException
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, $r4;
        int i0;
        java.io.FileOutputStream r2;
        boolean $z0, $z2;
        android.content.Context $r3;
        java.util.Set $r5;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z2, "File name cannot be empty or null");

        $r3 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r4 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        r2 = virtualinvoke $r3.<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>($r4, i0);

        if r2 == null goto label3;

        $r5 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mFiles>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label3:
        return r2;
    }

    public java.lang.String[] fileList()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.util.Set $r1, $r2;
        int $i0;
        java.lang.String[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mFiles>;

        $r1 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mFiles>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    public java.io.File getFileStreamPath(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, $r3;
        boolean $z0, $z1;
        android.content.Context $r2;
        java.io.File $r4;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z1, "File name cannot be empty or null");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r3 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>($r3);

        return $r4;
    }

    public boolean deleteFile(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, $r4;
        boolean $z0, $z1, $z2, $z4;
        java.util.Set $r2, $r5;
        android.content.Context $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z4, "File name cannot be empty or null");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mFiles>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r3 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r4 = specialinvoke r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String getPrefixName(java.lang.String)>(r1);

        $z2 = virtualinvoke $r3.<android.content.Context: boolean deleteFile(java.lang.String)>($r4);

        if $z2 == 0 goto label3;

        $r5 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mFiles>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return 1;

     label3:
        return 0;
    }

    public java.lang.Object getSystemService(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, $r3;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.UnsupportedOperationException $r2;
        android.content.Context $r4;
        java.lang.Object $r5;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z2, "name cannot be empty or null");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label3;

        $r3 = "appops";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r4 = r0.<android.support.test.rule.provider.DelegatingContext: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        return $r5;

     label3:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkPermission(java.lang.String, int, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        int i0, i1;
        boolean $z0, $z1, $z2;
        java.util.Set $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z2, "permission cannot be null or empty");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mRevokedPermissions>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        return -1;

     label3:
        return 0;
    }

    public int checkCallingPermission(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<android.support.test.rule.provider.DelegatingContext: int checkPermission(java.lang.String,int,int)>(r1, -1, -1);

        return $i0;
    }

    public int checkCallingOrSelfPermission(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<android.support.test.rule.provider.DelegatingContext: int checkPermission(java.lang.String,int,int)>(r1, -1, -1);

        return $i0;
    }

    public int checkSelfPermission(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<android.support.test.rule.provider.DelegatingContext: int checkPermission(java.lang.String,int,int)>(r1, -1, -1);

        return $i0;
    }

    public void enforcePermission(java.lang.String, int, int, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, r2, r3, $r5, $r6, $r11, $r12, $r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.SecurityException $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $i2 = virtualinvoke r0.<android.support.test.rule.provider.DelegatingContext: int checkPermission(java.lang.String,int,int)>(r1, i0, i1);

        if $i2 == 0 goto label3;

        $r4 = new java.lang.SecurityException;

        if r2 == null goto label1;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String concat(java.lang.String)>(": ");

        goto label2;

     label1:
        $r13 = "";

     label2:
        r3 = $r13;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i4 = 14 + $i3;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i5 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i6 = $i4 + $i5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No permission ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        return;
    }

    public void enforceCallingPermission(java.lang.String, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.support.test.rule.provider.DelegatingContext: void enforcePermission(java.lang.String,int,int,java.lang.String)>(r1, -1, -1, r2);

        return;
    }

    public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.support.test.rule.provider.DelegatingContext: void enforcePermission(java.lang.String,int,int,java.lang.String)>(r1, -1, -1, r2);

        return;
    }

    public int checkUriPermission(android.net.Uri, int, int, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.net.Uri r1;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkCallingUriPermission(android.net.Uri, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkCallingOrSelfUriPermission(android.net.Uri, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.net.Uri r1;
        java.lang.String r2, r3;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.net.Uri r1;
        int i0, i1, i2;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.net.Uri r1;
        java.lang.String r2, r3, r4;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: java.lang.String;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;
    }

    public android.content.Context getApplicationContext()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Context r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 = (android.content.Context) r0;

        return r1;
    }

    public java.io.File getFilesDir()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getNoBackupFilesDir()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getExternalFilesDir(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.io.File getObbDir()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File[] getObbDirs()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getCacheDir()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getCodeCacheDir()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getExternalCacheDir()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File[] getExternalCacheDirs()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File[] getExternalMediaDirs()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File[] getExternalFilesDirs(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.PackageManager getPackageManager()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.os.Looper getMainLooper()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void setTheme(int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.res.Resources$Theme getTheme()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getPackageName()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getPackageResourcePath()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getPackageCodePath()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void sendBroadcast(android.content.Intent, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void sendBroadcast(android.content.Intent)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        java.lang.String r2, r5;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        int i0;
        android.os.Bundle r6;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.BroadcastReceiver;

        r4 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.os.Bundle;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r7;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3, r6;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        int i0;
        android.os.Bundle r7;
        java.lang.UnsupportedOperationException $r8;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.BroadcastReceiver;

        r5 := @parameter4: android.os.Handler;

        i0 := @parameter5: int;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: android.os.Bundle;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r8;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void sendStickyBroadcast(android.content.Intent)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        android.content.BroadcastReceiver r2;
        android.os.Handler r3;
        int i0;
        java.lang.String r4;
        android.os.Bundle r5;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.BroadcastReceiver;

        r3 := @parameter2: android.os.Handler;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: android.os.Bundle;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;
    }

    public void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        int i0;
        java.lang.String r5;
        android.os.Bundle r6;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.content.BroadcastReceiver;

        r4 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.os.Bundle;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r7;
    }

    public void removeStickyBroadcast(android.content.Intent)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void grantUriPermission(java.lang.String, android.net.Uri, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        android.net.Uri r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void revokeUriPermission(android.net.Uri, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.SharedPreferences getSharedPreferences(java.lang.String, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getWallpaper()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.graphics.drawable.Drawable peekWallpaper()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getWallpaperDesiredMinimumHeight()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getWallpaperDesiredMinimumWidth()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void setWallpaper(android.graphics.Bitmap) throws java.io.IOException
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.graphics.Bitmap r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setWallpaper(java.io.InputStream) throws java.io.IOException
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.io.InputStream r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.io.InputStream;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void clearWallpaper() throws java.io.IOException
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void startActivity(android.content.Intent)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void startActivity(android.content.Intent, android.os.Bundle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        android.os.Bundle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.Bundle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void startActivities(android.content.Intent[])
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void startActivities(android.content.Intent[], android.os.Bundle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent[] r1;
        android.os.Bundle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent[];

        r2 := @parameter1: android.os.Bundle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int) throws android.content.IntentSender$SendIntentException
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.IntentSender r1;
        android.content.Intent r2;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.IntentSender;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle) throws android.content.IntentSender$SendIntentException
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.IntentSender r1;
        android.content.Intent r2;
        int i0, i1, i2;
        android.os.Bundle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.IntentSender;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.Bundle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        java.lang.String r3;
        android.os.Handler r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Handler;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;
    }

    public void unregisterReceiver(android.content.BroadcastReceiver)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.BroadcastReceiver r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.BroadcastReceiver;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.ComponentName startService(android.content.Intent)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean stopService(android.content.Intent)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean bindService(android.content.Intent, android.content.ServiceConnection, int)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void unbindService(android.content.ServiceConnection)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.ServiceConnection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.ServiceConnection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        android.os.Bundle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public java.lang.String getSystemServiceName(java.lang.Class)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.Class r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.Context createPackageContext(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.Context createConfigurationContext(android.content.res.Configuration)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.content.res.Configuration r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.content.res.Configuration;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.Context createDisplayContext(android.view.Display)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        android.view.Display r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: android.view.Display;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean isRestricted()
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    boolean addDatabase(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;
        java.util.Set $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z2, "Database name cannot be empty or null");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mDatabases>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return $z1;
    }

    void addRevokedPermission(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1;
        boolean $z0, $z2;
        java.util.Set $r2;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z2, "permission cannot be null or empty");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: java.util.Set mRevokedPermissions>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    private java.lang.String getPrefixName(java.lang.String)
    {
        android.support.test.rule.provider.DelegatingContext r0;
        java.lang.String r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: android.support.test.rule.provider.DelegatingContext;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkArgument(boolean,java.lang.Object)>($z1, "Name cannot be empty or null");

        $r2 = r0.<android.support.test.rule.provider.DelegatingContext: java.lang.String mPrefix>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r4);

        goto label4;

     label3:
        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>($r3);

     label4:
        return $r5;
    }

