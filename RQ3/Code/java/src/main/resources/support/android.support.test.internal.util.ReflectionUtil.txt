android.support.test.internal.util.ReflectionUtil
<android.support.test.internal.util.ReflectionUtil: java.lang.String TAG>
    public void <init>()
    {
        android.support.test.internal.util.ReflectionUtil r0;

        r0 := @this: android.support.test.internal.util.ReflectionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void reflectivelyInvokeRemoteMethod(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r6, $r7, $r12;
        java.lang.reflect.Method r2;
        int $i0;
        java.lang.Class[] $r8;
        java.lang.Object[] $r9;
        java.lang.Throwable $r11, r14;
        java.lang.Class r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = "Attempting to reflectively call: ";

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r12 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r7);

        goto label2;

     label1:
        $r12 = new java.lang.String;

        specialinvoke $r12.<java.lang.String: void <init>(java.lang.String)>("Attempting to reflectively call: ");

     label2:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("ReflectionUtil", $r12);

     label3:
        r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r8 = newarray (java.lang.Class)[0];

        r2 = virtualinvoke r13.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r1, $r8);

        virtualinvoke r2.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r9 = newarray (java.lang.Object)[0];

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r9);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        r14 = $r11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ReflectionUtil", "Reflective call failed: ", r14);

     label6:
        return;

        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
    }

