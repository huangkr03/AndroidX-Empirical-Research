android.support.test.espresso.web.assertion.CompressorDecompressor
<android.support.test.espresso.web.assertion.CompressorDecompressor: java.lang.String TAG>
<android.support.test.espresso.web.assertion.CompressorDecompressor: android.support.test.espresso.web.assertion.CompressorDecompressor$Compressor DEFAULT_COMPRESSOR>
<android.support.test.espresso.web.assertion.CompressorDecompressor: android.support.test.espresso.web.assertion.CompressorDecompressor$Decompressor DEFAULT_DECOMPRESSOR>
    void <init>()
    {
        android.support.test.espresso.web.assertion.CompressorDecompressor r0;

        r0 := @this: android.support.test.espresso.web.assertion.CompressorDecompressor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] compress(byte[]) throws java.io.IOException
    {
        byte[] r0, r1;
        long l0, l1, $l10;
        android.support.test.espresso.web.assertion.CompressorDecompressor$Compressor $r2;
        java.lang.Object[] $r3;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Integer $r4, $r5, $r7;
        float $f0, $f1, $f2;
        java.lang.Float $r6;
        java.lang.Long $r8;

        r0 := @parameter0: byte[];

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = <android.support.test.espresso.web.assertion.CompressorDecompressor: android.support.test.espresso.web.assertion.CompressorDecompressor$Compressor DEFAULT_COMPRESSOR>;

        r1 = interfaceinvoke $r2.<android.support.test.espresso.web.assertion.CompressorDecompressor$Compressor: byte[] compress(byte[])>(r0);

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = newarray (java.lang.Object)[5];

        $i2 = lengthof r0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r4;

        $i3 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r5;

        $i4 = lengthof r1;

        $f1 = (float) $i4;

        $i5 = lengthof r0;

        $f0 = (float) $i5;

        $f2 = $f1 / $f0;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r3[2] = $r6;

        $i7 = lengthof r1;

        $i6 = lengthof r0;

        $i8 = $i7 - $i6;

        $i9 = staticinvoke <java.lang.Math: int abs(int)>($i8);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r3[3] = $r7;

        $l10 = l1 - l0;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l10);

        $r3[4] = $r8;

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("CompressorDecompressor", "Compressed input with size %d (bytes) to output with size %d (bytes). Compression factor: %f (%d bytes). Total time %d ms", $r3);

        return r1;
    }

    public static byte[] decompress(byte[]) throws java.io.IOException
    {
        byte[] r0, r1;
        long l0, l1, $l4;
        android.support.test.espresso.web.assertion.CompressorDecompressor$Decompressor $r2;
        java.lang.Object[] $r3;
        int $i2, $i3;
        java.lang.Integer $r4, $r5;
        java.lang.Long $r6;

        r0 := @parameter0: byte[];

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = <android.support.test.espresso.web.assertion.CompressorDecompressor: android.support.test.espresso.web.assertion.CompressorDecompressor$Decompressor DEFAULT_DECOMPRESSOR>;

        r1 = interfaceinvoke $r2.<android.support.test.espresso.web.assertion.CompressorDecompressor$Decompressor: byte[] decompress(byte[])>(r0);

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = newarray (java.lang.Object)[3];

        $i2 = lengthof r0;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r4;

        $i3 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r5;

        $l4 = l1 - l0;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r3[2] = $r6;

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("CompressorDecompressor", "Decompressed input with size %d (bytes) to output with size %d (bytes). Total time %d ms", $r3);

        return r1;
    }

    static void <clinit>()
    {
        android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPCompressor $r0;
        android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPDecompressor $r1;

        $r0 = new android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPCompressor;

        specialinvoke $r0.<android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPCompressor: void <init>()>();

        <android.support.test.espresso.web.assertion.CompressorDecompressor: android.support.test.espresso.web.assertion.CompressorDecompressor$Compressor DEFAULT_COMPRESSOR> = $r0;

        $r1 = new android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPDecompressor;

        specialinvoke $r1.<android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPDecompressor: void <init>()>();

        <android.support.test.espresso.web.assertion.CompressorDecompressor: android.support.test.espresso.web.assertion.CompressorDecompressor$Decompressor DEFAULT_DECOMPRESSOR> = $r1;

        return;
    }

android.support.test.espresso.web.assertion.CompressorDecompressor$Compressor
<android.support.test.espresso.web.assertion.CompressorDecompressor$Compressor: byte[] compress(byte[])>
android.support.test.espresso.web.assertion.CompressorDecompressor$Decompressor
<android.support.test.espresso.web.assertion.CompressorDecompressor$Decompressor: byte[] decompress(byte[])>
android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPCompressor
    void <init>()
    {
        android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPCompressor r0;

        r0 := @this: android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPCompressor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public byte[] compress(byte[]) throws java.io.IOException
    {
        android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPCompressor r0;
        byte[] r1, $r8;
        java.io.ByteArrayOutputStream r2, $r5;
        java.util.zip.GZIPOutputStream r3, $r6;
        java.lang.Throwable r4, $r9;
        java.io.ByteArrayInputStream $r7;

        r0 := @this: android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPCompressor;

        r1 := @parameter0: byte[];

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r2 = $r5;

        $r6 = new java.util.zip.GZIPOutputStream;

        specialinvoke $r6.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>(r2);

        r3 = $r6;

     label1:
        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        staticinvoke <android.support.test.espresso.remote.internal.deps.guava.io.ByteStreams: long copy(java.io.InputStream,java.io.OutputStream)>($r7, r3);

     label2:
        if r3 == null goto label6;

        virtualinvoke r3.<java.util.zip.GZIPOutputStream: void close()>();

        goto label6;

     label3:
        $r9 := @caughtexception;

        r4 = $r9;

     label4:
        if r3 == null goto label5;

        virtualinvoke r3.<java.util.zip.GZIPOutputStream: void close()>();

     label5:
        throw r4;

     label6:
        $r8 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPDecompressor
    void <init>()
    {
        android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPDecompressor r0;

        r0 := @this: android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPDecompressor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public byte[] decompress(byte[]) throws java.io.IOException
    {
        android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPDecompressor r0;
        byte[] r1, r4;
        java.io.ByteArrayInputStream r2, $r6;
        java.util.zip.GZIPInputStream r3, $r7;
        java.lang.Throwable r5, $r8;

        r0 := @this: android.support.test.espresso.web.assertion.CompressorDecompressor$GZIPDecompressor;

        r1 := @parameter0: byte[];

        $r6 = new java.io.ByteArrayInputStream;

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r2 = $r6;

        $r7 = new java.util.zip.GZIPInputStream;

        specialinvoke $r7.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(r2);

        r3 = $r7;

     label1:
        r4 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.io.ByteStreams: byte[] toByteArray(java.io.InputStream)>(r3);

     label2:
        if r3 == null goto label3;

        virtualinvoke r3.<java.util.zip.GZIPInputStream: void close()>();

     label3:
        return r4;

     label4:
        $r8 := @caughtexception;

        r5 = $r8;

     label5:
        if r3 == null goto label6;

        virtualinvoke r3.<java.util.zip.GZIPInputStream: void close()>();

     label6:
        throw r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

