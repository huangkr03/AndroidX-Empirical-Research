android.support.constraint.helper.Layer
<android.support.constraint.helper.Layer: java.lang.String TAG>
<android.support.constraint.helper.Layer: float mRotationCenterX>
<android.support.constraint.helper.Layer: float mRotationCenterY>
<android.support.constraint.helper.Layer: float mGroupRotateAngle>
<android.support.constraint.helper.Layer: android.support.constraint.ConstraintLayout mContainer>
<android.support.constraint.helper.Layer: float mScaleX>
<android.support.constraint.helper.Layer: float mScaleY>
<android.support.constraint.helper.Layer: float mComputedCenterX>
<android.support.constraint.helper.Layer: float mComputedCenterY>
<android.support.constraint.helper.Layer: float mComputedMaxX>
<android.support.constraint.helper.Layer: float mComputedMaxY>
<android.support.constraint.helper.Layer: float mComputedMinX>
<android.support.constraint.helper.Layer: float mComputedMinY>
<android.support.constraint.helper.Layer: boolean mNeedBounds>
<android.support.constraint.helper.Layer: android.view.View[] mViews>
<android.support.constraint.helper.Layer: float mShiftX>
<android.support.constraint.helper.Layer: float mShiftY>
<android.support.constraint.helper.Layer: boolean mApplyVisibilityOnAttach>
<android.support.constraint.helper.Layer: boolean mApplyElevationOnAttach>
    public void <init>(android.content.Context)
    {
        android.support.constraint.helper.Layer r0;
        android.content.Context r1;

        r0 := @this: android.support.constraint.helper.Layer;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.support.constraint.ConstraintHelper: void <init>(android.content.Context)>(r1);

        r0.<android.support.constraint.helper.Layer: float mRotationCenterX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mRotationCenterY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mScaleX> = 1.0F;

        r0.<android.support.constraint.helper.Layer: float mScaleY> = 1.0F;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMaxX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMaxY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMinX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMinY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: boolean mNeedBounds> = 1;

        r0.<android.support.constraint.helper.Layer: android.view.View[] mViews> = null;

        r0.<android.support.constraint.helper.Layer: float mShiftX> = 0.0F;

        r0.<android.support.constraint.helper.Layer: float mShiftY> = 0.0F;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.support.constraint.helper.Layer r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.support.constraint.helper.Layer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.support.constraint.ConstraintHelper: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        r0.<android.support.constraint.helper.Layer: float mRotationCenterX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mRotationCenterY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mScaleX> = 1.0F;

        r0.<android.support.constraint.helper.Layer: float mScaleY> = 1.0F;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMaxX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMaxY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMinX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMinY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: boolean mNeedBounds> = 1;

        r0.<android.support.constraint.helper.Layer: android.view.View[] mViews> = null;

        r0.<android.support.constraint.helper.Layer: float mShiftX> = 0.0F;

        r0.<android.support.constraint.helper.Layer: float mShiftY> = 0.0F;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.support.constraint.helper.Layer r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.support.constraint.helper.Layer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.support.constraint.ConstraintHelper: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        r0.<android.support.constraint.helper.Layer: float mRotationCenterX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mRotationCenterY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mScaleX> = 1.0F;

        r0.<android.support.constraint.helper.Layer: float mScaleY> = 1.0F;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMaxX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMaxY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMinX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedMinY> = #NaNF;

        r0.<android.support.constraint.helper.Layer: boolean mNeedBounds> = 1;

        r0.<android.support.constraint.helper.Layer: android.view.View[] mViews> = null;

        r0.<android.support.constraint.helper.Layer: float mShiftX> = 0.0F;

        r0.<android.support.constraint.helper.Layer: float mShiftY> = 0.0F;

        return;
    }

    protected void init(android.util.AttributeSet)
    {
        android.support.constraint.helper.Layer r0;
        android.util.AttributeSet r1;
        android.content.res.TypedArray r2;
        int i0, i1, $i2, $i3, i4;
        android.content.Context $r3;
        int[] $r4;

        r0 := @this: android.support.constraint.helper.Layer;

        r1 := @parameter0: android.util.AttributeSet;

        specialinvoke r0.<android.support.constraint.ConstraintHelper: void init(android.util.AttributeSet)>(r1);

        r0.<android.support.constraint.helper.Layer: boolean mUseViewMeasure> = 0;

        if r1 == null goto label5;

        $r3 = virtualinvoke r0.<android.support.constraint.helper.Layer: android.content.Context getContext()>();

        $r4 = <android.support.constraint.R$styleable: int[] ConstraintLayout_Layout>;

        r2 = virtualinvoke $r3.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>(r1, $r4);

        i0 = virtualinvoke r2.<android.content.res.TypedArray: int getIndexCount()>();

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        i1 = virtualinvoke r2.<android.content.res.TypedArray: int getIndex(int)>(i4);

        $i2 = <android.support.constraint.R$styleable: int ConstraintLayout_Layout_android_visibility>;

        if i1 != $i2 goto label2;

        r0.<android.support.constraint.helper.Layer: boolean mApplyVisibilityOnAttach> = 1;

        goto label3;

     label2:
        $i3 = <android.support.constraint.R$styleable: int ConstraintLayout_Layout_android_elevation>;

        if i1 != $i3 goto label3;

        r0.<android.support.constraint.helper.Layer: boolean mApplyElevationOnAttach> = 1;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

     label5:
        return;
    }

    protected void onAttachedToWindow()
    {
        android.support.constraint.helper.Layer r0;
        int i0, i1, $i2, $i4, i5, $i6;
        android.view.View r1;
        android.view.ViewParent $r2;
        android.support.constraint.ConstraintLayout $r3, $r5;
        boolean $z0, $z1, $z2, $z3;
        int[] $r4;
        byte $b3;
        float $f0, $f1, f2;

        r0 := @this: android.support.constraint.helper.Layer;

        specialinvoke r0.<android.support.constraint.ConstraintHelper: void onAttachedToWindow()>();

        $r2 = virtualinvoke r0.<android.support.constraint.helper.Layer: android.view.ViewParent getParent()>();

        $r3 = (android.support.constraint.ConstraintLayout) $r2;

        r0.<android.support.constraint.helper.Layer: android.support.constraint.ConstraintLayout mContainer> = $r3;

        $z0 = r0.<android.support.constraint.helper.Layer: boolean mApplyVisibilityOnAttach>;

        if $z0 != 0 goto label1;

        $z3 = r0.<android.support.constraint.helper.Layer: boolean mApplyElevationOnAttach>;

        if $z3 == 0 goto label6;

     label1:
        i0 = virtualinvoke r0.<android.support.constraint.helper.Layer: int getVisibility()>();

        f2 = 0.0F;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 21 goto label2;

        f2 = virtualinvoke r0.<android.support.constraint.helper.Layer: float getElevation()>();

     label2:
        i5 = 0;

     label3:
        $i6 = r0.<android.support.constraint.helper.Layer: int mCount>;

        if i5 >= $i6 goto label6;

        $r4 = r0.<android.support.constraint.helper.Layer: int[] mIds>;

        i1 = $r4[i5];

        $r5 = r0.<android.support.constraint.helper.Layer: android.support.constraint.ConstraintLayout mContainer>;

        r1 = virtualinvoke $r5.<android.support.constraint.ConstraintLayout: android.view.View getViewById(int)>(i1);

        if r1 == null goto label5;

        $z1 = r0.<android.support.constraint.helper.Layer: boolean mApplyVisibilityOnAttach>;

        if $z1 == 0 goto label4;

        virtualinvoke r1.<android.view.View: void setVisibility(int)>(i0);

     label4:
        $z2 = r0.<android.support.constraint.helper.Layer: boolean mApplyElevationOnAttach>;

        if $z2 == 0 goto label5;

        $b3 = f2 cmpl 0.0F;

        if $b3 <= 0 goto label5;

        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 < 21 goto label5;

        $f0 = virtualinvoke r1.<android.view.View: float getTranslationZ()>();

        $f1 = $f0 + f2;

        virtualinvoke r1.<android.view.View: void setTranslationZ(float)>($f1);

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        return;
    }

    public void updatePreDraw(android.support.constraint.ConstraintLayout)
    {
        android.support.constraint.helper.Layer r0;
        android.support.constraint.ConstraintLayout r1;
        float f0, $f1;
        byte $b0;
        boolean $z0;

        r0 := @this: android.support.constraint.helper.Layer;

        r1 := @parameter0: android.support.constraint.ConstraintLayout;

        r0.<android.support.constraint.helper.Layer: android.support.constraint.ConstraintLayout mContainer> = r1;

        f0 = virtualinvoke r0.<android.support.constraint.helper.Layer: float getRotation()>();

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        $f1 = r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle>;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z0 != 0 goto label2;

        r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle> = f0;

        goto label2;

     label1:
        r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle> = f0;

     label2:
        return;
    }

    public void setRotation(float)
    {
        android.support.constraint.helper.Layer r0;
        float f0;

        r0 := @this: android.support.constraint.helper.Layer;

        f0 := @parameter0: float;

        r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle> = f0;

        specialinvoke r0.<android.support.constraint.helper.Layer: void transform()>();

        return;
    }

    public void setScaleX(float)
    {
        android.support.constraint.helper.Layer r0;
        float f0;

        r0 := @this: android.support.constraint.helper.Layer;

        f0 := @parameter0: float;

        r0.<android.support.constraint.helper.Layer: float mScaleX> = f0;

        specialinvoke r0.<android.support.constraint.helper.Layer: void transform()>();

        return;
    }

    public void setScaleY(float)
    {
        android.support.constraint.helper.Layer r0;
        float f0;

        r0 := @this: android.support.constraint.helper.Layer;

        f0 := @parameter0: float;

        r0.<android.support.constraint.helper.Layer: float mScaleY> = f0;

        specialinvoke r0.<android.support.constraint.helper.Layer: void transform()>();

        return;
    }

    public void setPivotX(float)
    {
        android.support.constraint.helper.Layer r0;
        float f0;

        r0 := @this: android.support.constraint.helper.Layer;

        f0 := @parameter0: float;

        r0.<android.support.constraint.helper.Layer: float mRotationCenterX> = f0;

        specialinvoke r0.<android.support.constraint.helper.Layer: void transform()>();

        return;
    }

    public void setPivotY(float)
    {
        android.support.constraint.helper.Layer r0;
        float f0;

        r0 := @this: android.support.constraint.helper.Layer;

        f0 := @parameter0: float;

        r0.<android.support.constraint.helper.Layer: float mRotationCenterY> = f0;

        specialinvoke r0.<android.support.constraint.helper.Layer: void transform()>();

        return;
    }

    public void setTranslationX(float)
    {
        android.support.constraint.helper.Layer r0;
        float f0;

        r0 := @this: android.support.constraint.helper.Layer;

        f0 := @parameter0: float;

        r0.<android.support.constraint.helper.Layer: float mShiftX> = f0;

        specialinvoke r0.<android.support.constraint.helper.Layer: void transform()>();

        return;
    }

    public void setTranslationY(float)
    {
        android.support.constraint.helper.Layer r0;
        float f0;

        r0 := @this: android.support.constraint.helper.Layer;

        f0 := @parameter0: float;

        r0.<android.support.constraint.helper.Layer: float mShiftY> = f0;

        specialinvoke r0.<android.support.constraint.helper.Layer: void transform()>();

        return;
    }

    public void setVisibility(int)
    {
        android.support.constraint.helper.Layer r0;
        int i0;

        r0 := @this: android.support.constraint.helper.Layer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.support.constraint.ConstraintHelper: void setVisibility(int)>(i0);

        virtualinvoke r0.<android.support.constraint.helper.Layer: void applyLayoutFeatures()>();

        return;
    }

    public void setElevation(float)
    {
        android.support.constraint.helper.Layer r0;
        float f0;

        r0 := @this: android.support.constraint.helper.Layer;

        f0 := @parameter0: float;

        specialinvoke r0.<android.support.constraint.ConstraintHelper: void setElevation(float)>(f0);

        virtualinvoke r0.<android.support.constraint.helper.Layer: void applyLayoutFeatures()>();

        return;
    }

    public void updatePostLayout(android.support.constraint.ConstraintLayout)
    {
        android.support.constraint.helper.Layer r0;
        android.support.constraint.ConstraintLayout r1;
        android.support.constraint.ConstraintLayout$LayoutParams r2;
        android.support.constraint.solver.widgets.ConstraintWidget r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.view.ViewGroup$LayoutParams $r4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.support.constraint.helper.Layer;

        r1 := @parameter0: android.support.constraint.ConstraintLayout;

        specialinvoke r0.<android.support.constraint.helper.Layer: void reCacheViews()>();

        r0.<android.support.constraint.helper.Layer: float mComputedCenterX> = #NaNF;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterY> = #NaNF;

        $r4 = virtualinvoke r0.<android.support.constraint.helper.Layer: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (android.support.constraint.ConstraintLayout$LayoutParams) $r4;

        r3 = virtualinvoke r2.<android.support.constraint.ConstraintLayout$LayoutParams: android.support.constraint.solver.widgets.ConstraintWidget getConstraintWidget()>();

        virtualinvoke r3.<android.support.constraint.solver.widgets.ConstraintWidget: void setWidth(int)>(0);

        virtualinvoke r3.<android.support.constraint.solver.widgets.ConstraintWidget: void setHeight(int)>(0);

        virtualinvoke r0.<android.support.constraint.helper.Layer: void calcCenters()>();

        $f0 = r0.<android.support.constraint.helper.Layer: float mComputedMinX>;

        $i4 = (int) $f0;

        $i5 = virtualinvoke r0.<android.support.constraint.helper.Layer: int getPaddingLeft()>();

        i0 = $i4 - $i5;

        $f1 = r0.<android.support.constraint.helper.Layer: float mComputedMinY>;

        $i6 = (int) $f1;

        $i7 = virtualinvoke r0.<android.support.constraint.helper.Layer: int getPaddingTop()>();

        i1 = $i6 - $i7;

        $f2 = r0.<android.support.constraint.helper.Layer: float mComputedMaxX>;

        $i8 = (int) $f2;

        $i9 = virtualinvoke r0.<android.support.constraint.helper.Layer: int getPaddingRight()>();

        i2 = $i8 + $i9;

        $f3 = r0.<android.support.constraint.helper.Layer: float mComputedMaxY>;

        $i10 = (int) $f3;

        $i11 = virtualinvoke r0.<android.support.constraint.helper.Layer: int getPaddingBottom()>();

        i3 = $i10 + $i11;

        virtualinvoke r0.<android.support.constraint.helper.Layer: void layout(int,int,int,int)>(i0, i1, i2, i3);

        specialinvoke r0.<android.support.constraint.helper.Layer: void transform()>();

        return;
    }

    private void reCacheViews()
    {
        android.support.constraint.helper.Layer r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i6;
        android.support.constraint.ConstraintLayout $r1, $r5;
        android.view.View[] $r2, $r3, $r6, $r8;
        int[] $r4;
        android.view.View $r7;

        r0 := @this: android.support.constraint.helper.Layer;

        $r1 = r0.<android.support.constraint.helper.Layer: android.support.constraint.ConstraintLayout mContainer>;

        if $r1 != null goto label1;

        return;

     label1:
        $i1 = r0.<android.support.constraint.helper.Layer: int mCount>;

        if $i1 != 0 goto label2;

        return;

     label2:
        $r2 = r0.<android.support.constraint.helper.Layer: android.view.View[] mViews>;

        if $r2 == null goto label3;

        $r8 = r0.<android.support.constraint.helper.Layer: android.view.View[] mViews>;

        $i4 = lengthof $r8;

        $i3 = r0.<android.support.constraint.helper.Layer: int mCount>;

        if $i4 == $i3 goto label4;

     label3:
        $i2 = r0.<android.support.constraint.helper.Layer: int mCount>;

        $r3 = newarray (android.view.View)[$i2];

        r0.<android.support.constraint.helper.Layer: android.view.View[] mViews> = $r3;

     label4:
        i5 = 0;

     label5:
        $i6 = r0.<android.support.constraint.helper.Layer: int mCount>;

        if i5 >= $i6 goto label6;

        $r4 = r0.<android.support.constraint.helper.Layer: int[] mIds>;

        i0 = $r4[i5];

        $r6 = r0.<android.support.constraint.helper.Layer: android.view.View[] mViews>;

        $r5 = r0.<android.support.constraint.helper.Layer: android.support.constraint.ConstraintLayout mContainer>;

        $r7 = virtualinvoke $r5.<android.support.constraint.ConstraintLayout: android.view.View getViewById(int)>(i0);

        $r6[i5] = $r7;

        i5 = i5 + 1;

        goto label5;

     label6:
        return;
    }

    protected void calcCenters()
    {
        android.support.constraint.helper.Layer r0;
        android.view.View[] r1;
        android.view.View r2, $r5, $r6, $r7, $r8;
        android.support.constraint.ConstraintLayout $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, $i13;

        r0 := @this: android.support.constraint.helper.Layer;

        $r3 = r0.<android.support.constraint.helper.Layer: android.support.constraint.ConstraintLayout mContainer>;

        if $r3 != null goto label01;

        return;

     label01:
        $z0 = r0.<android.support.constraint.helper.Layer: boolean mNeedBounds>;

        if $z0 != 0 goto label02;

        $f13 = r0.<android.support.constraint.helper.Layer: float mComputedCenterX>;

        $z4 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f13);

        if $z4 != 0 goto label02;

        $f14 = r0.<android.support.constraint.helper.Layer: float mComputedCenterY>;

        $z5 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f14);

        if $z5 != 0 goto label02;

        return;

     label02:
        $f15 = r0.<android.support.constraint.helper.Layer: float mRotationCenterX>;

        $z6 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f15);

        if $z6 != 0 goto label03;

        $f10 = r0.<android.support.constraint.helper.Layer: float mRotationCenterY>;

        $z3 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f10);

        if $z3 == 0 goto label10;

     label03:
        $r4 = r0.<android.support.constraint.helper.Layer: android.support.constraint.ConstraintLayout mContainer>;

        r1 = virtualinvoke r0.<android.support.constraint.helper.Layer: android.view.View[] getViews(android.support.constraint.ConstraintLayout)>($r4);

        $r5 = r1[0];

        i8 = virtualinvoke $r5.<android.view.View: int getLeft()>();

        $r6 = r1[0];

        i9 = virtualinvoke $r6.<android.view.View: int getTop()>();

        $r7 = r1[0];

        i10 = virtualinvoke $r7.<android.view.View: int getRight()>();

        $r8 = r1[0];

        i11 = virtualinvoke $r8.<android.view.View: int getBottom()>();

        i12 = 0;

     label04:
        $i13 = r0.<android.support.constraint.helper.Layer: int mCount>;

        if i12 >= $i13 goto label05;

        r2 = r1[i12];

        $i4 = virtualinvoke r2.<android.view.View: int getLeft()>();

        i8 = staticinvoke <java.lang.Math: int min(int,int)>(i8, $i4);

        $i5 = virtualinvoke r2.<android.view.View: int getTop()>();

        i9 = staticinvoke <java.lang.Math: int min(int,int)>(i9, $i5);

        $i6 = virtualinvoke r2.<android.view.View: int getRight()>();

        i10 = staticinvoke <java.lang.Math: int max(int,int)>(i10, $i6);

        $i7 = virtualinvoke r2.<android.view.View: int getBottom()>();

        i11 = staticinvoke <java.lang.Math: int max(int,int)>(i11, $i7);

        i12 = i12 + 1;

        goto label04;

     label05:
        $f0 = (float) i10;

        r0.<android.support.constraint.helper.Layer: float mComputedMaxX> = $f0;

        $f1 = (float) i11;

        r0.<android.support.constraint.helper.Layer: float mComputedMaxY> = $f1;

        $f2 = (float) i8;

        r0.<android.support.constraint.helper.Layer: float mComputedMinX> = $f2;

        $f3 = (float) i9;

        r0.<android.support.constraint.helper.Layer: float mComputedMinY> = $f3;

        $f4 = r0.<android.support.constraint.helper.Layer: float mRotationCenterX>;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f4);

        if $z1 == 0 goto label06;

        $i2 = i8 + i10;

        $i3 = $i2 / 2;

        $f9 = (float) $i3;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterX> = $f9;

        goto label07;

     label06:
        $f5 = r0.<android.support.constraint.helper.Layer: float mRotationCenterX>;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterX> = $f5;

     label07:
        $f6 = r0.<android.support.constraint.helper.Layer: float mRotationCenterY>;

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f6);

        if $z2 == 0 goto label08;

        $i0 = i9 + i11;

        $i1 = $i0 / 2;

        $f8 = (float) $i1;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterY> = $f8;

        goto label09;

     label08:
        $f7 = r0.<android.support.constraint.helper.Layer: float mRotationCenterY>;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterY> = $f7;

     label09:
        goto label11;

     label10:
        $f11 = r0.<android.support.constraint.helper.Layer: float mRotationCenterY>;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterY> = $f11;

        $f12 = r0.<android.support.constraint.helper.Layer: float mRotationCenterX>;

        r0.<android.support.constraint.helper.Layer: float mComputedCenterX> = $f12;

     label11:
        return;
    }

    private void transform()
    {
        android.support.constraint.helper.Layer r0;
        double d0, $d1, $d2, $d3, $d4;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34;
        android.view.View r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9;
        android.support.constraint.ConstraintLayout $r2;
        android.view.View[] $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.support.constraint.helper.Layer;

        $r2 = r0.<android.support.constraint.helper.Layer: android.support.constraint.ConstraintLayout mContainer>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<android.support.constraint.helper.Layer: android.view.View[] mViews>;

        if $r3 != null goto label2;

        specialinvoke r0.<android.support.constraint.helper.Layer: void reCacheViews()>();

     label2:
        virtualinvoke r0.<android.support.constraint.helper.Layer: void calcCenters()>();

        $f10 = r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle>;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f10);

        if $z0 == 0 goto label3;

        $d4 = 0.0;

        goto label4;

     label3:
        $f11 = r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle>;

        $d1 = (double) $f11;

        $d4 = staticinvoke <java.lang.Math: double toRadians(double)>($d1);

     label4:
        d0 = $d4;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        f0 = (float) $d2;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        f1 = (float) $d3;

        $f12 = r0.<android.support.constraint.helper.Layer: float mScaleX>;

        f2 = $f12 * f1;

        $f13 = r0.<android.support.constraint.helper.Layer: float mScaleY>;

        $f14 = neg $f13;

        f3 = $f14 * f0;

        $f15 = r0.<android.support.constraint.helper.Layer: float mScaleX>;

        f4 = $f15 * f0;

        $f16 = r0.<android.support.constraint.helper.Layer: float mScaleY>;

        f5 = $f16 * f1;

        i8 = 0;

     label5:
        $i9 = r0.<android.support.constraint.helper.Layer: int mCount>;

        if i8 >= $i9 goto label7;

        $r4 = r0.<android.support.constraint.helper.Layer: android.view.View[] mViews>;

        r1 = $r4[i8];

        $i2 = virtualinvoke r1.<android.view.View: int getLeft()>();

        $i3 = virtualinvoke r1.<android.view.View: int getRight()>();

        $i4 = $i2 + $i3;

        i0 = $i4 / 2;

        $i5 = virtualinvoke r1.<android.view.View: int getTop()>();

        $i6 = virtualinvoke r1.<android.view.View: int getBottom()>();

        $i7 = $i5 + $i6;

        i1 = $i7 / 2;

        $f18 = (float) i0;

        $f17 = r0.<android.support.constraint.helper.Layer: float mComputedCenterX>;

        f6 = $f18 - $f17;

        $f20 = (float) i1;

        $f19 = r0.<android.support.constraint.helper.Layer: float mComputedCenterY>;

        f7 = $f20 - $f19;

        $f22 = f2 * f6;

        $f21 = f3 * f7;

        $f23 = $f22 + $f21;

        $f25 = $f23 - f6;

        $f24 = r0.<android.support.constraint.helper.Layer: float mShiftX>;

        f8 = $f25 + $f24;

        $f27 = f4 * f6;

        $f26 = f5 * f7;

        $f28 = $f27 + $f26;

        $f30 = $f28 - f7;

        $f29 = r0.<android.support.constraint.helper.Layer: float mShiftY>;

        f9 = $f30 + $f29;

        virtualinvoke r1.<android.view.View: void setTranslationX(float)>(f8);

        virtualinvoke r1.<android.view.View: void setTranslationY(float)>(f9);

        $f31 = r0.<android.support.constraint.helper.Layer: float mScaleY>;

        virtualinvoke r1.<android.view.View: void setScaleY(float)>($f31);

        $f32 = r0.<android.support.constraint.helper.Layer: float mScaleX>;

        virtualinvoke r1.<android.view.View: void setScaleX(float)>($f32);

        $f33 = r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle>;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f33);

        if $z1 != 0 goto label6;

        $f34 = r0.<android.support.constraint.helper.Layer: float mGroupRotateAngle>;

        virtualinvoke r1.<android.view.View: void setRotation(float)>($f34);

     label6:
        i8 = i8 + 1;

        goto label5;

     label7:
        return;
    }

