android.support.test.rule.ServiceTestRule
<android.support.test.rule.ServiceTestRule: java.lang.String TAG>
<android.support.test.rule.ServiceTestRule: long DEFAULT_TIMEOUT>
<android.support.test.rule.ServiceTestRule: android.os.IBinder mBinder>
<android.support.test.rule.ServiceTestRule: android.content.Intent mServiceIntent>
<android.support.test.rule.ServiceTestRule: android.content.ServiceConnection mServiceConn>
<android.support.test.rule.ServiceTestRule: long mTimeout>
<android.support.test.rule.ServiceTestRule: java.util.concurrent.TimeUnit mTimeUnit>
<android.support.test.rule.ServiceTestRule: boolean mServiceStarted>
<android.support.test.rule.ServiceTestRule: boolean mServiceBound>
    public void <init>()
    {
        android.support.test.rule.ServiceTestRule r0;
        java.util.concurrent.TimeUnit $r1;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        specialinvoke r0.<android.support.test.rule.ServiceTestRule: void <init>(long,java.util.concurrent.TimeUnit)>(5L, $r1);

        return;
    }

    public static android.support.test.rule.ServiceTestRule withTimeout(long, java.util.concurrent.TimeUnit)
    {
        long l0;
        java.util.concurrent.TimeUnit r0;
        android.support.test.rule.ServiceTestRule $r1;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        $r1 = new android.support.test.rule.ServiceTestRule;

        specialinvoke $r1.<android.support.test.rule.ServiceTestRule: void <init>(long,java.util.concurrent.TimeUnit)>(l0, r0);

        return $r1;
    }

    private void <init>(long, java.util.concurrent.TimeUnit)
    {
        android.support.test.rule.ServiceTestRule r0;
        long l0;
        java.util.concurrent.TimeUnit r1;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.rule.ServiceTestRule: boolean mServiceStarted> = 0;

        r0.<android.support.test.rule.ServiceTestRule: boolean mServiceBound> = 0;

        r0.<android.support.test.rule.ServiceTestRule: long mTimeout> = l0;

        r0.<android.support.test.rule.ServiceTestRule: java.util.concurrent.TimeUnit mTimeUnit> = r1;

        return;
    }

    public void startService(android.content.Intent) throws java.util.concurrent.TimeoutException
    {
        android.support.test.rule.ServiceTestRule r0;
        android.content.Intent r1, $r3, $r5, $r7;
        java.lang.Object $r2;
        android.content.Context $r4;
        boolean $z0;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        r1 := @parameter0: android.content.Intent;

        $r2 = staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "intent can\'t be null");

        $r3 = (android.content.Intent) $r2;

        r0.<android.support.test.rule.ServiceTestRule: android.content.Intent mServiceIntent> = $r3;

        $r4 = staticinvoke <android.support.test.InstrumentationRegistry: android.content.Context getTargetContext()>();

        $r5 = r0.<android.support.test.rule.ServiceTestRule: android.content.Intent mServiceIntent>;

        virtualinvoke $r4.<android.content.Context: android.content.ComponentName startService(android.content.Intent)>($r5);

        r0.<android.support.test.rule.ServiceTestRule: boolean mServiceStarted> = 1;

        $r7 = r0.<android.support.test.rule.ServiceTestRule: android.content.Intent mServiceIntent>;

        $z0 = virtualinvoke r0.<android.support.test.rule.ServiceTestRule: boolean bindServiceAndWait(android.content.Intent,android.content.ServiceConnection,int)>($r7, null, 1);

        r0.<android.support.test.rule.ServiceTestRule: boolean mServiceBound> = $z0;

        return;
    }

    public android.os.IBinder bindService(android.content.Intent) throws java.util.concurrent.TimeoutException
    {
        android.support.test.rule.ServiceTestRule r0;
        android.content.Intent r1, $r3, $r4;
        java.lang.Object $r2;
        boolean $z0;
        android.os.IBinder $r5;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        r1 := @parameter0: android.content.Intent;

        $r2 = staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "intent can\'t be null");

        $r3 = (android.content.Intent) $r2;

        $r4 = virtualinvoke $r3.<android.content.Intent: android.content.Intent cloneFilter()>();

        r0.<android.support.test.rule.ServiceTestRule: android.content.Intent mServiceIntent> = $r4;

        $z0 = virtualinvoke r0.<android.support.test.rule.ServiceTestRule: boolean bindServiceAndWait(android.content.Intent,android.content.ServiceConnection,int)>(r1, null, 1);

        r0.<android.support.test.rule.ServiceTestRule: boolean mServiceBound> = $z0;

        $r5 = r0.<android.support.test.rule.ServiceTestRule: android.os.IBinder mBinder>;

        return $r5;
    }

    public android.os.IBinder bindService(android.content.Intent, android.content.ServiceConnection, int) throws java.util.concurrent.TimeoutException
    {
        android.support.test.rule.ServiceTestRule r0;
        android.content.Intent r1, $r5, $r6, $r8;
        android.content.ServiceConnection r2, r3;
        int i0;
        java.lang.Object $r4, $r7;
        boolean $z0;
        android.os.IBinder $r9;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        $r4 = staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "intent can\'t be null");

        $r5 = (android.content.Intent) $r4;

        $r6 = virtualinvoke $r5.<android.content.Intent: android.content.Intent cloneFilter()>();

        r0.<android.support.test.rule.ServiceTestRule: android.content.Intent mServiceIntent> = $r6;

        $r7 = staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "connection can\'t be null");

        r3 = (android.content.ServiceConnection) $r7;

        $r8 = r0.<android.support.test.rule.ServiceTestRule: android.content.Intent mServiceIntent>;

        $z0 = virtualinvoke r0.<android.support.test.rule.ServiceTestRule: boolean bindServiceAndWait(android.content.Intent,android.content.ServiceConnection,int)>($r8, r3, i0);

        r0.<android.support.test.rule.ServiceTestRule: boolean mServiceBound> = $z0;

        $r9 = r0.<android.support.test.rule.ServiceTestRule: android.os.IBinder mBinder>;

        return $r9;
    }

    boolean bindServiceAndWait(android.content.Intent, android.content.ServiceConnection, int) throws java.util.concurrent.TimeoutException
    {
        android.support.test.rule.ServiceTestRule r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0;
        android.support.test.rule.ServiceTestRule$ProxyServiceConnection r3, $r4;
        boolean z0;
        android.content.Context $r5;
        java.util.concurrent.CountDownLatch $r6;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        $r4 = new android.support.test.rule.ServiceTestRule$ProxyServiceConnection;

        specialinvoke $r4.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: void <init>(android.support.test.rule.ServiceTestRule,android.content.ServiceConnection,android.support.test.rule.ServiceTestRule$1)>(r0, r2, null);

        r3 = $r4;

        $r5 = staticinvoke <android.support.test.InstrumentationRegistry: android.content.Context getTargetContext()>();

        z0 = virtualinvoke $r5.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r1, r3, i0);

        if z0 == 0 goto label1;

        $r6 = r3.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: java.util.concurrent.CountDownLatch mConnectedLatch>;

        specialinvoke r0.<android.support.test.rule.ServiceTestRule: void waitOnLatch(java.util.concurrent.CountDownLatch,java.lang.String)>($r6, "connected");

        r0.<android.support.test.rule.ServiceTestRule: android.content.ServiceConnection mServiceConn> = r3;

        goto label2;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ServiceTestRule", "Failed to bind to service! Is your service declared in the manifest?");

     label2:
        return z0;
    }

    public void unbindService()
    {
        android.support.test.rule.ServiceTestRule r0;
        boolean $z0;
        android.content.Context $r1;
        android.content.ServiceConnection $r2;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        $z0 = r0.<android.support.test.rule.ServiceTestRule: boolean mServiceBound>;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <android.support.test.InstrumentationRegistry: android.content.Context getTargetContext()>();

        $r2 = r0.<android.support.test.rule.ServiceTestRule: android.content.ServiceConnection mServiceConn>;

        virtualinvoke $r1.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r2);

        r0.<android.support.test.rule.ServiceTestRule: android.os.IBinder mBinder> = null;

        r0.<android.support.test.rule.ServiceTestRule: boolean mServiceBound> = 0;

     label1:
        return;
    }

    private void waitOnLatch(java.util.concurrent.CountDownLatch, java.lang.String) throws java.util.concurrent.TimeoutException
    {
        android.support.test.rule.ServiceTestRule r0;
        java.util.concurrent.CountDownLatch r1;
        java.lang.String r2, r3, $r7, $r8, $r16, $r20, $r21, $r23;
        java.util.concurrent.TimeUnit $r4, $r6;
        long $l0, l6;
        boolean $z0;
        java.util.concurrent.TimeoutException $r5;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.Throwable $r17, r22;
        java.lang.Thread $r18;
        java.lang.RuntimeException $r19;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        r2 := @parameter1: java.lang.String;

     label1:
        $l0 = r0.<android.support.test.rule.ServiceTestRule: long mTimeout>;

        $r4 = r0.<android.support.test.rule.ServiceTestRule: java.util.concurrent.TimeUnit mTimeUnit>;

        $z0 = virtualinvoke r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l0, $r4);

        if $z0 != 0 goto label2;

        $r5 = new java.util.concurrent.TimeoutException;

        l6 = r0.<android.support.test.rule.ServiceTestRule: long mTimeout>;

        $r6 = r0.<android.support.test.rule.ServiceTestRule: java.util.concurrent.TimeUnit mTimeUnit>;

        r3 = virtualinvoke $r6.<java.util.concurrent.TimeUnit: java.lang.String name()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i2 = 56 + $i1;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>($i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waited for ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but service was never ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r16);

        throw $r5;

     label2:
        goto label6;

     label3:
        $r17 := @caughtexception;

        r22 = $r17;

        $r18 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r18.<java.lang.Thread: void interrupt()>();

        $r19 = new java.lang.RuntimeException;

        $r20 = "Interrupted while waiting for service to be ";

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i5 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i5 == 0 goto label4;

        $r23 = virtualinvoke $r20.<java.lang.String: java.lang.String concat(java.lang.String)>($r21);

        goto label5;

     label4:
        $r23 = new java.lang.String;

        specialinvoke $r23.<java.lang.String: void <init>(java.lang.String)>("Interrupted while waiting for service to be ");

     label5:
        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r23, r22);

        throw $r19;

     label6:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    void shutdownService() throws java.util.concurrent.TimeoutException
    {
        android.support.test.rule.ServiceTestRule r0;
        boolean $z0;
        android.content.Context $r1;
        android.content.Intent $r2;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        $z0 = r0.<android.support.test.rule.ServiceTestRule: boolean mServiceStarted>;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <android.support.test.InstrumentationRegistry: android.content.Context getTargetContext()>();

        $r2 = r0.<android.support.test.rule.ServiceTestRule: android.content.Intent mServiceIntent>;

        virtualinvoke $r1.<android.content.Context: boolean stopService(android.content.Intent)>($r2);

        r0.<android.support.test.rule.ServiceTestRule: boolean mServiceStarted> = 0;

     label1:
        virtualinvoke r0.<android.support.test.rule.ServiceTestRule: void unbindService()>();

        return;
    }

    protected void beforeService()
    {
        android.support.test.rule.ServiceTestRule r0;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        return;
    }

    protected void afterService()
    {
        android.support.test.rule.ServiceTestRule r0;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        return;
    }

    public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement, org.junit.runner.Description)
    {
        android.support.test.rule.ServiceTestRule r0;
        org.junit.runners.model.Statement r1;
        org.junit.runner.Description r2;
        android.support.test.rule.ServiceTestRule$ServiceStatement $r3;

        r0 := @this: android.support.test.rule.ServiceTestRule;

        r1 := @parameter0: org.junit.runners.model.Statement;

        r2 := @parameter1: org.junit.runner.Description;

        $r3 = new android.support.test.rule.ServiceTestRule$ServiceStatement;

        specialinvoke $r3.<android.support.test.rule.ServiceTestRule$ServiceStatement: void <init>(android.support.test.rule.ServiceTestRule,org.junit.runners.model.Statement)>(r0, r1);

        return $r3;
    }

    static android.os.IBinder access$102(android.support.test.rule.ServiceTestRule, android.os.IBinder)
    {
        android.support.test.rule.ServiceTestRule r0;
        android.os.IBinder r1;

        r0 := @parameter0: android.support.test.rule.ServiceTestRule;

        r1 := @parameter1: android.os.IBinder;

        r0.<android.support.test.rule.ServiceTestRule: android.os.IBinder mBinder> = r1;

        return r1;
    }

android.support.test.rule.ServiceTestRule$1
android.support.test.rule.ServiceTestRule$ProxyServiceConnection
<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.content.ServiceConnection mCallerConnection>
<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: java.util.concurrent.CountDownLatch mConnectedLatch>
<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.support.test.rule.ServiceTestRule this$0>
    private void <init>(android.support.test.rule.ServiceTestRule, android.content.ServiceConnection)
    {
        android.support.test.rule.ServiceTestRule$ProxyServiceConnection r0;
        android.support.test.rule.ServiceTestRule r1;
        android.content.ServiceConnection r2;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @this: android.support.test.rule.ServiceTestRule$ProxyServiceConnection;

        r1 := @parameter0: android.support.test.rule.ServiceTestRule;

        r2 := @parameter1: android.content.ServiceConnection;

        r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.support.test.rule.ServiceTestRule this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: java.util.concurrent.CountDownLatch mConnectedLatch> = $r3;

        r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.content.ServiceConnection mCallerConnection> = r2;

        return;
    }

    public void onServiceConnected(android.content.ComponentName, android.os.IBinder)
    {
        android.support.test.rule.ServiceTestRule$ProxyServiceConnection r0;
        android.content.ComponentName r1;
        android.os.IBinder r2;
        android.support.test.rule.ServiceTestRule $r3;
        android.content.ServiceConnection $r5, $r7;
        java.util.concurrent.CountDownLatch $r6;

        r0 := @this: android.support.test.rule.ServiceTestRule$ProxyServiceConnection;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.IBinder;

        $r3 = r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.support.test.rule.ServiceTestRule this$0>;

        staticinvoke <android.support.test.rule.ServiceTestRule: android.os.IBinder access$102(android.support.test.rule.ServiceTestRule,android.os.IBinder)>($r3, r2);

        $r5 = r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.content.ServiceConnection mCallerConnection>;

        if $r5 == null goto label1;

        $r7 = r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.content.ServiceConnection mCallerConnection>;

        interfaceinvoke $r7.<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>(r1, r2);

     label1:
        $r6 = r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: java.util.concurrent.CountDownLatch mConnectedLatch>;

        virtualinvoke $r6.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public void onServiceDisconnected(android.content.ComponentName)
    {
        android.support.test.rule.ServiceTestRule$ProxyServiceConnection r0;
        android.content.ComponentName r1;
        android.support.test.rule.ServiceTestRule $r2;
        android.content.ServiceConnection $r4, $r5;

        r0 := @this: android.support.test.rule.ServiceTestRule$ProxyServiceConnection;

        r1 := @parameter0: android.content.ComponentName;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ServiceTestRule", "Connection to the Service has been lost!");

        $r2 = r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.support.test.rule.ServiceTestRule this$0>;

        staticinvoke <android.support.test.rule.ServiceTestRule: android.os.IBinder access$102(android.support.test.rule.ServiceTestRule,android.os.IBinder)>($r2, null);

        $r4 = r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.content.ServiceConnection mCallerConnection>;

        if $r4 == null goto label1;

        $r5 = r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: android.content.ServiceConnection mCallerConnection>;

        interfaceinvoke $r5.<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>(r1);

     label1:
        return;
    }

    void <init>(android.support.test.rule.ServiceTestRule, android.content.ServiceConnection, android.support.test.rule.ServiceTestRule$1)
    {
        android.support.test.rule.ServiceTestRule$ProxyServiceConnection r0;
        android.support.test.rule.ServiceTestRule r1;
        android.content.ServiceConnection r2;
        android.support.test.rule.ServiceTestRule$1 r3;

        r0 := @this: android.support.test.rule.ServiceTestRule$ProxyServiceConnection;

        r1 := @parameter0: android.support.test.rule.ServiceTestRule;

        r2 := @parameter1: android.content.ServiceConnection;

        r3 := @parameter2: android.support.test.rule.ServiceTestRule$1;

        specialinvoke r0.<android.support.test.rule.ServiceTestRule$ProxyServiceConnection: void <init>(android.support.test.rule.ServiceTestRule,android.content.ServiceConnection)>(r1, r2);

        return;
    }

android.support.test.rule.ServiceTestRule$ServiceStatement
<android.support.test.rule.ServiceTestRule$ServiceStatement: org.junit.runners.model.Statement mBase>
<android.support.test.rule.ServiceTestRule$ServiceStatement: android.support.test.rule.ServiceTestRule this$0>
    public void <init>(android.support.test.rule.ServiceTestRule, org.junit.runners.model.Statement)
    {
        android.support.test.rule.ServiceTestRule$ServiceStatement r0;
        android.support.test.rule.ServiceTestRule r1;
        org.junit.runners.model.Statement r2;

        r0 := @this: android.support.test.rule.ServiceTestRule$ServiceStatement;

        r1 := @parameter0: android.support.test.rule.ServiceTestRule;

        r2 := @parameter1: org.junit.runners.model.Statement;

        r0.<android.support.test.rule.ServiceTestRule$ServiceStatement: android.support.test.rule.ServiceTestRule this$0> = r1;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        r0.<android.support.test.rule.ServiceTestRule$ServiceStatement: org.junit.runners.model.Statement mBase> = r2;

        return;
    }

    public void evaluate() throws java.lang.Throwable
    {
        android.support.test.rule.ServiceTestRule$ServiceStatement r0;
        java.lang.Throwable r1, $r6;
        android.support.test.rule.ServiceTestRule $r2, $r4, $r5, $r7, $r8;
        org.junit.runners.model.Statement $r3;

        r0 := @this: android.support.test.rule.ServiceTestRule$ServiceStatement;

     label1:
        $r2 = r0.<android.support.test.rule.ServiceTestRule$ServiceStatement: android.support.test.rule.ServiceTestRule this$0>;

        virtualinvoke $r2.<android.support.test.rule.ServiceTestRule: void beforeService()>();

        $r3 = r0.<android.support.test.rule.ServiceTestRule$ServiceStatement: org.junit.runners.model.Statement mBase>;

        virtualinvoke $r3.<org.junit.runners.model.Statement: void evaluate()>();

     label2:
        $r4 = r0.<android.support.test.rule.ServiceTestRule$ServiceStatement: android.support.test.rule.ServiceTestRule this$0>;

        virtualinvoke $r4.<android.support.test.rule.ServiceTestRule: void shutdownService()>();

        $r5 = r0.<android.support.test.rule.ServiceTestRule$ServiceStatement: android.support.test.rule.ServiceTestRule this$0>;

        virtualinvoke $r5.<android.support.test.rule.ServiceTestRule: void afterService()>();

        goto label4;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = r0.<android.support.test.rule.ServiceTestRule$ServiceStatement: android.support.test.rule.ServiceTestRule this$0>;

        virtualinvoke $r7.<android.support.test.rule.ServiceTestRule: void shutdownService()>();

        $r8 = r0.<android.support.test.rule.ServiceTestRule$ServiceStatement: android.support.test.rule.ServiceTestRule this$0>;

        virtualinvoke $r8.<android.support.test.rule.ServiceTestRule: void afterService()>();

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

