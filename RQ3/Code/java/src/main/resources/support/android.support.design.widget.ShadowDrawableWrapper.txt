android.support.design.widget.ShadowDrawableWrapper
<android.support.design.widget.ShadowDrawableWrapper: double COS_45>
<android.support.design.widget.ShadowDrawableWrapper: float SHADOW_MULTIPLIER>
<android.support.design.widget.ShadowDrawableWrapper: float SHADOW_TOP_SCALE>
<android.support.design.widget.ShadowDrawableWrapper: float SHADOW_HORIZ_SCALE>
<android.support.design.widget.ShadowDrawableWrapper: float SHADOW_BOTTOM_SCALE>
<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint>
<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint>
<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>
<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>
<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>
<android.support.design.widget.ShadowDrawableWrapper: float maxShadowSize>
<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>
<android.support.design.widget.ShadowDrawableWrapper: float shadowSize>
<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>
<android.support.design.widget.ShadowDrawableWrapper: boolean dirty>
<android.support.design.widget.ShadowDrawableWrapper: int shadowStartColor>
<android.support.design.widget.ShadowDrawableWrapper: int shadowMiddleColor>
<android.support.design.widget.ShadowDrawableWrapper: int shadowEndColor>
<android.support.design.widget.ShadowDrawableWrapper: boolean addPaddingForCorners>
<android.support.design.widget.ShadowDrawableWrapper: float rotation>
<android.support.design.widget.ShadowDrawableWrapper: boolean printedShadowClipWarning>
    public void <init>(android.content.Context, android.graphics.drawable.Drawable, float, float, float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.content.Context r1;
        android.graphics.drawable.Drawable r2;
        float f0, f1, f2, $f3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.graphics.Paint $r3, $r5, $r7, $r8, $r9;
        android.graphics.Paint$Style $r4;
        android.graphics.RectF $r6;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        specialinvoke r0.<android.support.v7.graphics.drawable.DrawableWrapper: void <init>(android.graphics.drawable.Drawable)>(r2);

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean dirty> = 1;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean addPaddingForCorners> = 1;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean printedShadowClipWarning> = 0;

        $i0 = <android.support.design.widget.R$color: int design_fab_shadow_start_color>;

        $i1 = staticinvoke <android.support.v4.content.ContextCompat: int getColor(android.content.Context,int)>(r1, $i0);

        r0.<android.support.design.widget.ShadowDrawableWrapper: int shadowStartColor> = $i1;

        $i2 = <android.support.design.widget.R$color: int design_fab_shadow_mid_color>;

        $i3 = staticinvoke <android.support.v4.content.ContextCompat: int getColor(android.content.Context,int)>(r1, $i2);

        r0.<android.support.design.widget.ShadowDrawableWrapper: int shadowMiddleColor> = $i3;

        $i4 = <android.support.design.widget.R$color: int design_fab_shadow_end_color>;

        $i5 = staticinvoke <android.support.v4.content.ContextCompat: int getColor(android.content.Context,int)>(r1, $i4);

        r0.<android.support.design.widget.ShadowDrawableWrapper: int shadowEndColor> = $i5;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>(int)>(5);

        r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint> = $r3;

        $r5 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $i6 = staticinvoke <java.lang.Math: int round(float)>(f0);

        $f3 = (float) $i6;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius> = $f3;

        $r6 = new android.graphics.RectF;

        specialinvoke $r6.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds> = $r6;

        $r7 = new android.graphics.Paint;

        $r8 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint>;

        specialinvoke $r7.<android.graphics.Paint: void <init>(android.graphics.Paint)>($r8);

        r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint> = $r7;

        $r9 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint>;

        virtualinvoke $r9.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void setShadowSize(float,float)>(f1, f2);

        return;
    }

    private static int toEven(float)
    {
        float f0;
        int i0, $i1, $i2;

        f0 := @parameter0: float;

        i0 = staticinvoke <java.lang.Math: int round(float)>(f0);

        $i1 = i0 % 2;

        if $i1 != 1 goto label1;

        $i2 = i0 - 1;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        return $i2;
    }

    public void setAddPaddingForCorners(boolean)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        boolean z0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        z0 := @parameter0: boolean;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean addPaddingForCorners> = z0;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void invalidateSelf()>();

        return;
    }

    public void setAlpha(int)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        int i0;
        android.graphics.Paint $r1, $r2;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        i0 := @parameter0: int;

        specialinvoke r0.<android.support.v7.graphics.drawable.DrawableWrapper: void setAlpha(int)>(i0);

        $r1 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAlpha(int)>(i0);

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setAlpha(int)>(i0);

        return;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Rect r1;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        r1 := @parameter0: android.graphics.Rect;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean dirty> = 1;

        return;
    }

    void setShadowSize(float, float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        byte $b0, $b1, $b4, $b6, $b7;
        java.lang.IllegalArgumentException $r1;
        int $i2, $i3, $i5;
        float $f0, $f1, $f2, f3, f4, f5, f6, $f7;
        boolean $z0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f3 := @parameter0: float;

        f4 := @parameter1: float;

        $b0 = f3 cmpg 0.0F;

        if $b0 < 0 goto label1;

        $b1 = f4 cmpg 0.0F;

        if $b1 >= 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid shadow size");

        throw $r1;

     label2:
        $i2 = staticinvoke <android.support.design.widget.ShadowDrawableWrapper: int toEven(float)>(f3);

        f5 = (float) $i2;

        $i3 = staticinvoke <android.support.design.widget.ShadowDrawableWrapper: int toEven(float)>(f4);

        f6 = (float) $i3;

        $b4 = f5 cmpl f6;

        if $b4 <= 0 goto label3;

        f5 = f6;

        $z0 = r0.<android.support.design.widget.ShadowDrawableWrapper: boolean printedShadowClipWarning>;

        if $z0 != 0 goto label3;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean printedShadowClipWarning> = 1;

     label3:
        $f7 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>;

        $b7 = $f7 cmpl f5;

        if $b7 != 0 goto label4;

        $f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $b6 = $f2 cmpl f6;

        if $b6 != 0 goto label4;

        return;

     label4:
        r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize> = f5;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize> = f6;

        $f0 = f5 * 1.5F;

        $i5 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $f1 = (float) $i5;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float shadowSize> = $f1;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float maxShadowSize> = f6;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean dirty> = 1;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void invalidateSelf()>();

        return;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Rect r1;
        int i0, i1;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        r1 := @parameter0: android.graphics.Rect;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $z0 = r0.<android.support.design.widget.ShadowDrawableWrapper: boolean addPaddingForCorners>;

        $f2 = staticinvoke <android.support.design.widget.ShadowDrawableWrapper: float calculateVerticalPadding(float,float,boolean)>($f1, $f0, $z0);

        $d0 = (double) $f2;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i0 = (int) $d1;

        $f4 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f3 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $z1 = r0.<android.support.design.widget.ShadowDrawableWrapper: boolean addPaddingForCorners>;

        $f5 = staticinvoke <android.support.design.widget.ShadowDrawableWrapper: float calculateHorizontalPadding(float,float,boolean)>($f4, $f3, $z1);

        $d2 = (double) $f5;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        i1 = (int) $d3;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(i1, i0, i1, i0);

        return 1;
    }

    public static float calculateVerticalPadding(float, float, boolean)
    {
        float f0, f1, $f2, $f3, $f4;
        boolean z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $f3 = f0 * 1.5F;

        $d4 = (double) $f3;

        $d0 = <android.support.design.widget.ShadowDrawableWrapper: double COS_45>;

        $d2 = 1.0 - $d0;

        $d1 = (double) f1;

        $d3 = $d2 * $d1;

        $d5 = $d4 + $d3;

        $f4 = (float) $d5;

        return $f4;

     label1:
        $f2 = f0 * 1.5F;

        return $f2;
    }

    public static float calculateHorizontalPadding(float, float, boolean)
    {
        float f0, f1, $f2;
        boolean z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $d4 = (double) f0;

        $d0 = <android.support.design.widget.ShadowDrawableWrapper: double COS_45>;

        $d2 = 1.0 - $d0;

        $d1 = (double) f1;

        $d3 = $d2 * $d1;

        $d5 = $d4 + $d3;

        $f2 = (float) $d5;

        return $f2;

     label1:
        return f0;
    }

    public int getOpacity()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        return -3;
    }

    public void setCornerRadius(float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        int $i0;
        float $f0, f1, f2;
        byte $b1;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f1 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Math: int round(float)>(f1);

        f2 = (float) $i0;

        $f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $b1 = $f0 cmpl f2;

        if $b1 != 0 goto label1;

        return;

     label1:
        r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius> = f2;

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean dirty> = 1;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void invalidateSelf()>();

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Canvas r1;
        boolean $z0;
        android.graphics.Rect $r2;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        r1 := @parameter0: android.graphics.Canvas;

        $z0 = r0.<android.support.design.widget.ShadowDrawableWrapper: boolean dirty>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Rect getBounds()>();

        specialinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void buildComponents(android.graphics.Rect)>($r2);

        r0.<android.support.design.widget.ShadowDrawableWrapper: boolean dirty> = 0;

     label1:
        specialinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void drawShadow(android.graphics.Canvas)>(r1);

        specialinvoke r0.<android.support.v7.graphics.drawable.DrawableWrapper: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    final void setRotation(float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rotation>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.widget.ShadowDrawableWrapper: float rotation> = f0;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void invalidateSelf()>();

     label1:
        return;
    }

    private void drawShadow(android.graphics.Canvas)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Canvas r1;
        int i0, i3, i4, i5, i6;
        float f0, f1, f2, f3, f4, f5, f6, f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67, $f68, $f69, $f70, $f71, $f72, $f73;
        boolean z0, z1, $z2, $z3;
        android.graphics.RectF $r2, $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r14, $r15, $r18, $r19, $r22, $r24, $r26, $r28;
        byte $b1, $b2;
        android.graphics.Paint $r8, $r12, $r16, $r20, $r23, $r25, $r27, $r29;
        android.graphics.Path $r9, $r13, $r17, $r21;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        r1 := @parameter0: android.graphics.Canvas;

        i0 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $f8 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rotation>;

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f9 = virtualinvoke $r2.<android.graphics.RectF: float centerX()>();

        $r3 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f10 = virtualinvoke $r3.<android.graphics.RectF: float centerY()>();

        virtualinvoke r1.<android.graphics.Canvas: void rotate(float,float,float)>($f8, $f9, $f10);

        $f11 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f13 = neg $f11;

        $f12 = r0.<android.support.design.widget.ShadowDrawableWrapper: float shadowSize>;

        f0 = $f13 - $f12;

        f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f14 = virtualinvoke $r4.<android.graphics.RectF: float width()>();

        $f15 = 2.0F * f1;

        $f16 = $f14 - $f15;

        $b1 = $f16 cmpl 0.0F;

        if $b1 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r5 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f17 = virtualinvoke $r5.<android.graphics.RectF: float height()>();

        $f18 = 2.0F * f1;

        $f19 = $f17 - $f18;

        $b2 = $f19 cmpl 0.0F;

        if $b2 <= 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z1 = $z3;

        $f22 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>;

        $f20 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>;

        $f21 = $f20 * 0.25F;

        f2 = $f22 - $f21;

        $f25 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>;

        $f23 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>;

        $f24 = $f23 * 0.5F;

        f3 = $f25 - $f24;

        $f28 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>;

        $f26 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>;

        $f27 = $f26 * 1.0F;

        f4 = $f28 - $f27;

        $f29 = f1 + f3;

        f5 = f1 / $f29;

        $f30 = f1 + f2;

        f6 = f1 / $f30;

        $f31 = f1 + f4;

        f7 = f1 / $f31;

        i3 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f32 = $r6.<android.graphics.RectF: float left>;

        $f35 = $f32 + f1;

        $r7 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f33 = $r7.<android.graphics.RectF: float top>;

        $f34 = $f33 + f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f35, $f34);

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(f5, f6);

        $r9 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        $r8 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r9, $r8);

        if z0 == 0 goto label5;

        $f68 = 1.0F / f5;

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>($f68, 1.0F);

        $r28 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f69 = virtualinvoke $r28.<android.graphics.RectF: float width()>();

        $f70 = 2.0F * f1;

        $f73 = $f69 - $f70;

        $f71 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f72 = neg $f71;

        $r29 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, f0, $f73, $f72, $r29);

     label5:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i3);

        i4 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r10 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f36 = $r10.<android.graphics.RectF: float right>;

        $f39 = $f36 - f1;

        $r11 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f37 = $r11.<android.graphics.RectF: float bottom>;

        $f38 = $f37 - f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f39, $f38);

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(f5, f7);

        virtualinvoke r1.<android.graphics.Canvas: void rotate(float)>(180.0F);

        $r13 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        $r12 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r13, $r12);

        if z0 == 0 goto label6;

        $f60 = 1.0F / f5;

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>($f60, 1.0F);

        $r26 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f61 = virtualinvoke $r26.<android.graphics.RectF: float width()>();

        $f62 = 2.0F * f1;

        $f67 = $f61 - $f62;

        $f63 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f65 = neg $f63;

        $f64 = r0.<android.support.design.widget.ShadowDrawableWrapper: float shadowSize>;

        $f66 = $f65 + $f64;

        $r27 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, f0, $f67, $f66, $r27);

     label6:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i4);

        i5 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r14 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f40 = $r14.<android.graphics.RectF: float left>;

        $f43 = $f40 + f1;

        $r15 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f41 = $r15.<android.graphics.RectF: float bottom>;

        $f42 = $f41 - f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f43, $f42);

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(f5, f7);

        virtualinvoke r1.<android.graphics.Canvas: void rotate(float)>(270.0F);

        $r17 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        $r16 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r17, $r16);

        if z1 == 0 goto label7;

        $f54 = 1.0F / f7;

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>($f54, 1.0F);

        $r24 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f55 = virtualinvoke $r24.<android.graphics.RectF: float height()>();

        $f56 = 2.0F * f1;

        $f59 = $f55 - $f56;

        $f57 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f58 = neg $f57;

        $r25 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, f0, $f59, $f58, $r25);

     label7:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i5);

        i6 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r18 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f44 = $r18.<android.graphics.RectF: float right>;

        $f47 = $f44 - f1;

        $r19 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f45 = $r19.<android.graphics.RectF: float top>;

        $f46 = $f45 + f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f47, $f46);

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(f5, f6);

        virtualinvoke r1.<android.graphics.Canvas: void rotate(float)>(90.0F);

        $r21 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        $r20 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r21, $r20);

        if z1 == 0 goto label8;

        $f48 = 1.0F / f6;

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>($f48, 1.0F);

        $r22 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f49 = virtualinvoke $r22.<android.graphics.RectF: float height()>();

        $f50 = 2.0F * f1;

        $f53 = $f49 - $f50;

        $f51 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f52 = neg $f51;

        $r23 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, f0, $f53, $f52, $r23);

     label8:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i6);

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        return;
    }

    private void buildShadowCorners()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.RectF r1, r2, $r3, $r4;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22;
        android.graphics.Path $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r27;
        android.graphics.Path$FillType $r7;
        byte $b0;
        android.graphics.LinearGradient $r14;
        int[] $r15, $r22;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        float[] $r16, $r23;
        android.graphics.Shader$TileMode $r17, $r24;
        android.graphics.Paint $r18, $r20, $r25;
        android.graphics.RadialGradient $r21;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $r3 = new android.graphics.RectF;

        $f3 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f8 = neg $f3;

        $f4 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f7 = neg $f4;

        $f6 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f5 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        specialinvoke $r3.<android.graphics.RectF: void <init>(float,float,float,float)>($f8, $f7, $f6, $f5);

        r1 = $r3;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>(android.graphics.RectF)>(r1);

        r2 = $r4;

        $f9 = r0.<android.support.design.widget.ShadowDrawableWrapper: float shadowSize>;

        $f12 = neg $f9;

        $f10 = r0.<android.support.design.widget.ShadowDrawableWrapper: float shadowSize>;

        $f11 = neg $f10;

        virtualinvoke r2.<android.graphics.RectF: void inset(float,float)>($f12, $f11);

        $r5 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        if $r5 != null goto label1;

        $r27 = new android.graphics.Path;

        specialinvoke $r27.<android.graphics.Path: void <init>()>();

        r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath> = $r27;

        goto label2;

     label1:
        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        virtualinvoke $r6.<android.graphics.Path: void reset()>();

     label2:
        $r8 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        $r7 = <android.graphics.Path$FillType: android.graphics.Path$FillType EVEN_ODD>;

        virtualinvoke $r8.<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>($r7);

        $r9 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        $f13 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f14 = neg $f13;

        virtualinvoke $r9.<android.graphics.Path: void moveTo(float,float)>($f14, 0.0F);

        $r10 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        $f15 = r0.<android.support.design.widget.ShadowDrawableWrapper: float shadowSize>;

        $f16 = neg $f15;

        virtualinvoke $r10.<android.graphics.Path: void rLineTo(float,float)>($f16, 0.0F);

        $r11 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        virtualinvoke $r11.<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>(r2, 180.0F, 90.0F, 0);

        $r12 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        virtualinvoke $r12.<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>(r1, 270.0F, -90.0F, 0);

        $r13 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Path cornerShadowPath>;

        virtualinvoke $r13.<android.graphics.Path: void close()>();

        $f17 = r2.<android.graphics.RectF: float top>;

        f0 = neg $f17;

        $b0 = f0 cmpl 0.0F;

        if $b0 <= 0 goto label3;

        $f20 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        f1 = $f20 / f0;

        $f21 = 1.0F - f1;

        $f22 = $f21 / 2.0F;

        f2 = f1 + $f22;

        $r25 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint cornerShadowPaint>;

        $r21 = new android.graphics.RadialGradient;

        $r22 = newarray (int)[4];

        $r22[0] = 0;

        $i4 = r0.<android.support.design.widget.ShadowDrawableWrapper: int shadowStartColor>;

        $r22[1] = $i4;

        $i5 = r0.<android.support.design.widget.ShadowDrawableWrapper: int shadowMiddleColor>;

        $r22[2] = $i5;

        $i6 = r0.<android.support.design.widget.ShadowDrawableWrapper: int shadowEndColor>;

        $r22[3] = $i6;

        $r23 = newarray (float)[4];

        $r23[0] = 0.0F;

        $r23[1] = f1;

        $r23[2] = f2;

        $r23[3] = 1.0F;

        $r24 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r21.<android.graphics.RadialGradient: void <init>(float,float,float,int[],float[],android.graphics.Shader$TileMode)>(0.0F, 0.0F, f0, $r22, $r23, $r24);

        virtualinvoke $r25.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r21);

     label3:
        $r18 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint>;

        $r14 = new android.graphics.LinearGradient;

        $f19 = r1.<android.graphics.RectF: float top>;

        $f18 = r2.<android.graphics.RectF: float top>;

        $r15 = newarray (int)[3];

        $i1 = r0.<android.support.design.widget.ShadowDrawableWrapper: int shadowStartColor>;

        $r15[0] = $i1;

        $i2 = r0.<android.support.design.widget.ShadowDrawableWrapper: int shadowMiddleColor>;

        $r15[1] = $i2;

        $i3 = r0.<android.support.design.widget.ShadowDrawableWrapper: int shadowEndColor>;

        $r15[2] = $i3;

        $r16 = newarray (float)[3];

        $r16[0] = 0.0F;

        $r16[1] = 0.5F;

        $r16[2] = 1.0F;

        $r17 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r14.<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>(0.0F, $f19, 0.0F, $f18, $r15, $r16, $r17);

        virtualinvoke $r18.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r14);

        $r20 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.Paint edgeShadowPaint>;

        virtualinvoke $r20.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

        return;
    }

    private void buildComponents(android.graphics.Rect)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        android.graphics.Rect r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.RectF $r2, $r4, $r5, $r6, $r7;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        r1 := @parameter0: android.graphics.Rect;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        f0 = $f1 * 1.5F;

        $r2 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $i0 = r1.<android.graphics.Rect: int left>;

        $f3 = (float) $i0;

        $f2 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f11 = $f3 + $f2;

        $i1 = r1.<android.graphics.Rect: int top>;

        $f4 = (float) $i1;

        $f10 = $f4 + f0;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f6 = (float) $i2;

        $f5 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f9 = $f6 - $f5;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $f7 = (float) $i3;

        $f8 = $f7 - f0;

        virtualinvoke $r2.<android.graphics.RectF: void set(float,float,float,float)>($f11, $f10, $f9, $f8);

        $r3 = virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.drawable.Drawable getWrappedDrawable()>();

        $r4 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f12 = $r4.<android.graphics.RectF: float left>;

        $i7 = (int) $f12;

        $r5 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f13 = $r5.<android.graphics.RectF: float top>;

        $i6 = (int) $f13;

        $r6 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f14 = $r6.<android.graphics.RectF: float right>;

        $i5 = (int) $f14;

        $r7 = r0.<android.support.design.widget.ShadowDrawableWrapper: android.graphics.RectF contentBounds>;

        $f15 = $r7.<android.graphics.RectF: float bottom>;

        $i4 = (int) $f15;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i7, $i6, $i5, $i4);

        specialinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void buildShadowCorners()>();

        return;
    }

    public float getCornerRadius()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float $f0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        return $f0;
    }

    public void setShadowSize(float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0, $f1;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void setShadowSize(float,float)>(f0, $f1);

        return;
    }

    public void setMaxShadowSize(float)
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0, $f1;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>;

        virtualinvoke r0.<android.support.design.widget.ShadowDrawableWrapper: void setShadowSize(float,float)>($f1, f0);

        return;
    }

    public float getShadowSize()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float $f0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawShadowSize>;

        return $f0;
    }

    public float getMaxShadowSize()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float $f0;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f0 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        return $f0;
    }

    public float getMinWidth()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f5 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f3 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f2 = $f1 / 2.0F;

        $f4 = $f3 + $f2;

        $f6 = staticinvoke <java.lang.Math: float max(float,float)>($f5, $f4);

        f0 = 2.0F * $f6;

        $f7 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f8 = $f7 * 2.0F;

        $f9 = f0 + $f8;

        return $f9;
    }

    public float getMinHeight()
    {
        android.support.design.widget.ShadowDrawableWrapper r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;

        r0 := @this: android.support.design.widget.ShadowDrawableWrapper;

        $f6 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f4 = r0.<android.support.design.widget.ShadowDrawableWrapper: float cornerRadius>;

        $f1 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f2 = $f1 * 1.5F;

        $f3 = $f2 / 2.0F;

        $f5 = $f4 + $f3;

        $f7 = staticinvoke <java.lang.Math: float max(float,float)>($f6, $f5);

        f0 = 2.0F * $f7;

        $f8 = r0.<android.support.design.widget.ShadowDrawableWrapper: float rawMaxShadowSize>;

        $f9 = $f8 * 1.5F;

        $f10 = $f9 * 2.0F;

        $f11 = f0 + $f10;

        return $f11;
    }

    static void <clinit>()
    {
        double $d0, $d1;

        $d0 = staticinvoke <java.lang.Math: double toRadians(double)>(45.0);

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        <android.support.design.widget.ShadowDrawableWrapper: double COS_45> = $d1;

        return;
    }

