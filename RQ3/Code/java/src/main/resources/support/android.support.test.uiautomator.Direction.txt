android.support.test.uiautomator.Direction
<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction LEFT>
<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction RIGHT>
<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction UP>
<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction DOWN>
<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction mOpposite>
<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction[] $VALUES>
    public static android.support.test.uiautomator.Direction[] values()
    {
        android.support.test.uiautomator.Direction[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (android.support.test.uiautomator.Direction[]) $r1;

        return $r2;
    }

    public static android.support.test.uiautomator.Direction valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        android.support.test.uiautomator.Direction $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/support/test/uiautomator/Direction;", r0);

        $r2 = (android.support.test.uiautomator.Direction) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        android.support.test.uiautomator.Direction r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.support.test.uiautomator.Direction;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static android.support.test.uiautomator.Direction reverse(android.support.test.uiautomator.Direction)
    {
        android.support.test.uiautomator.Direction r0, $r1;

        r0 := @parameter0: android.support.test.uiautomator.Direction;

        $r1 = r0.<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction mOpposite>;

        return $r1;
    }

    static void <clinit>()
    {
        android.support.test.uiautomator.Direction $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        android.support.test.uiautomator.Direction[] $r4;

        $r0 = new android.support.test.uiautomator.Direction;

        specialinvoke $r0.<android.support.test.uiautomator.Direction: void <init>(java.lang.String,int)>("LEFT", 0);

        <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction LEFT> = $r0;

        $r1 = new android.support.test.uiautomator.Direction;

        specialinvoke $r1.<android.support.test.uiautomator.Direction: void <init>(java.lang.String,int)>("RIGHT", 1);

        <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction RIGHT> = $r1;

        $r2 = new android.support.test.uiautomator.Direction;

        specialinvoke $r2.<android.support.test.uiautomator.Direction: void <init>(java.lang.String,int)>("UP", 2);

        <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction UP> = $r2;

        $r3 = new android.support.test.uiautomator.Direction;

        specialinvoke $r3.<android.support.test.uiautomator.Direction: void <init>(java.lang.String,int)>("DOWN", 3);

        <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction DOWN> = $r3;

        $r4 = newarray (android.support.test.uiautomator.Direction)[4];

        $r5 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction LEFT>;

        $r4[0] = $r5;

        $r6 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction RIGHT>;

        $r4[1] = $r6;

        $r7 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction UP>;

        $r4[2] = $r7;

        $r8 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction DOWN>;

        $r4[3] = $r8;

        <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction[] $VALUES> = $r4;

        $r10 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction LEFT>;

        $r9 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction RIGHT>;

        $r10.<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction mOpposite> = $r9;

        $r12 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction RIGHT>;

        $r11 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction LEFT>;

        $r12.<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction mOpposite> = $r11;

        $r14 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction UP>;

        $r13 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction DOWN>;

        $r14.<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction mOpposite> = $r13;

        $r16 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction DOWN>;

        $r15 = <android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction UP>;

        $r16.<android.support.test.uiautomator.Direction: android.support.test.uiautomator.Direction mOpposite> = $r15;

        return;
    }

