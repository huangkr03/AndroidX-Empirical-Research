android.support.test.espresso.idling.net.UriIdlingResource
<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.String TAG>
<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.String resourceName>
<android.support.test.espresso.idling.net.UriIdlingResource: long timeoutMs>
<android.support.test.espresso.idling.net.UriIdlingResource: boolean debug>
<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicInteger counter>
<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.CopyOnWriteArrayList ignoredRegexes>
<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicBoolean idle>
<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.Runnable transitionToIdle>
<android.support.test.espresso.idling.net.UriIdlingResource: android.support.test.espresso.IdlingResource$ResourceCallback resourceCallback>
<android.support.test.espresso.idling.net.UriIdlingResource: android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf handler>
    public void <init>(java.lang.String, long)
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.lang.String r1;
        long l0;
        android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler $r2;
        android.os.Handler $r3;
        android.os.Looper $r4;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = new android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler;

        $r3 = new android.os.Handler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r4);

        specialinvoke $r2.<android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler: void <init>(android.os.Handler)>($r3);

        specialinvoke r0.<android.support.test.espresso.idling.net.UriIdlingResource: void <init>(java.lang.String,long,boolean,android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf)>(r1, l0, 0, $r2);

        return;
    }

    void <init>(java.lang.String, long, boolean, android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf)
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.lang.String r1;
        long l0;
        boolean z0;
        android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.util.concurrent.CopyOnWriteArrayList $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        byte $b1;
        android.support.test.espresso.idling.net.UriIdlingResource$1 $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        r2 := @parameter3: android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicInteger counter> = $r3;

        $r4 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.CopyOnWriteArrayList ignoredRegexes> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicBoolean idle> = $r5;

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeoutMs has to be greater than 0");

        throw $r7;

     label1:
        r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.String resourceName> = r1;

        r0.<android.support.test.espresso.idling.net.UriIdlingResource: long timeoutMs> = l0;

        r0.<android.support.test.espresso.idling.net.UriIdlingResource: boolean debug> = z0;

        r0.<android.support.test.espresso.idling.net.UriIdlingResource: android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf handler> = r2;

        $r6 = new android.support.test.espresso.idling.net.UriIdlingResource$1;

        specialinvoke $r6.<android.support.test.espresso.idling.net.UriIdlingResource$1: void <init>(android.support.test.espresso.idling.net.UriIdlingResource)>(r0);

        r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.Runnable transitionToIdle> = $r6;

        return;
    }

    public java.lang.String getName()
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.lang.String $r1;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        $r1 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.String resourceName>;

        return $r1;
    }

    public boolean isIdleNow()
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        $r1 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicBoolean idle>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource$ResourceCallback)
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        android.support.test.espresso.IdlingResource$ResourceCallback r1;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        r1 := @parameter0: android.support.test.espresso.IdlingResource$ResourceCallback;

        r0.<android.support.test.espresso.idling.net.UriIdlingResource: android.support.test.espresso.IdlingResource$ResourceCallback resourceCallback> = r1;

        return;
    }

    public void ignoreUri(java.util.regex.Pattern)
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.util.regex.Pattern r1;
        boolean $z0;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        r1 := @parameter0: java.util.regex.Pattern;

        $z0 = virtualinvoke r0.<android.support.test.espresso.idling.net.UriIdlingResource: boolean isIdleNow()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("UriIdlingResource", "Ignored patterns can only be added when the resource is idle.");

        goto label2;

     label1:
        $r2 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.CopyOnWriteArrayList ignoredRegexes>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void beginLoad(java.lang.String)
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.lang.String r1, r2, $r5, $r11;
        long l0, l1;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        int $i2, $i4, $i5;
        byte $b3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        java.lang.Runnable $r12;
        android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf $r13;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<android.support.test.espresso.idling.net.UriIdlingResource: boolean uriIsIgnored(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicBoolean idle>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r4 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicInteger counter>;

        $i2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        l0 = (long) $i2;

        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label2;

        $r13 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf handler>;

        $r12 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.Runnable transitionToIdle>;

        interfaceinvoke $r13.<android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf: void removeCallbacks(java.lang.Runnable)>($r12);

     label2:
        $z1 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: boolean debug>;

        if $z1 == 0 goto label3;

        r2 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.String resourceName>;

        l1 = l0 + 1L;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i5 = 51 + $i4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" counter increased to ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("UriIdlingResource", $r11);

     label3:
        return;
    }

    public void endLoad(java.lang.String)
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.lang.String r1, r2, $r4, $r10, $r17;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r14, $r15, $r16;
        long $l4;
        java.lang.Runnable $r11;
        android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf $r12;
        java.lang.IllegalStateException $r13;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<android.support.test.espresso.idling.net.UriIdlingResource: boolean uriIsIgnored(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicInteger counter>;

        i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if i0 >= 0 goto label2;

        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(int)>(45);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Counter has been corrupted! Count=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label2:
        if i0 != 0 goto label3;

        $r12 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf handler>;

        $r11 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.Runnable transitionToIdle>;

        $l4 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: long timeoutMs>;

        interfaceinvoke $r12.<android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf: void postDelayed(java.lang.Runnable,long)>($r11, $l4);

     label3:
        $z1 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: boolean debug>;

        if $z1 == 0 goto label4;

        r2 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.String resourceName>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i2 = 42 + $i1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" counter decreased to ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("UriIdlingResource", $r10);

     label4:
        return;
    }

    private boolean uriIsIgnored(java.lang.String)
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.lang.String r1, r4, $r8, $r9, $r16;
        java.util.Iterator r2;
        java.util.regex.Pattern r3;
        java.util.concurrent.CopyOnWriteArrayList $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.util.regex.Matcher $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.CopyOnWriteArrayList ignoredRegexes>;

        r2 = virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.regex.Pattern) $r6;

        $r7 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z1 = virtualinvoke $r7.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label2;

        r4 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.String resourceName>;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i1 = 25 + $i0;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i2 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i3 = $i1 + $i2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored URI: <");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("UriIdlingResource", $r16);

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    void forceIdleTransition()
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.lang.Runnable $r1;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource;

        $r1 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.lang.Runnable transitionToIdle>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$000(android.support.test.espresso.idling.net.UriIdlingResource)
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: android.support.test.espresso.idling.net.UriIdlingResource;

        $r1 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicBoolean idle>;

        return $r1;
    }

    static android.support.test.espresso.IdlingResource$ResourceCallback access$100(android.support.test.espresso.idling.net.UriIdlingResource)
    {
        android.support.test.espresso.idling.net.UriIdlingResource r0;
        android.support.test.espresso.IdlingResource$ResourceCallback $r1;

        r0 := @parameter0: android.support.test.espresso.idling.net.UriIdlingResource;

        $r1 = r0.<android.support.test.espresso.idling.net.UriIdlingResource: android.support.test.espresso.IdlingResource$ResourceCallback resourceCallback>;

        return $r1;
    }

android.support.test.espresso.idling.net.UriIdlingResource$1
<android.support.test.espresso.idling.net.UriIdlingResource$1: android.support.test.espresso.idling.net.UriIdlingResource this$0>
    void <init>(android.support.test.espresso.idling.net.UriIdlingResource)
    {
        android.support.test.espresso.idling.net.UriIdlingResource$1 r0;
        android.support.test.espresso.idling.net.UriIdlingResource r1;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource$1;

        r1 := @parameter0: android.support.test.espresso.idling.net.UriIdlingResource;

        r0.<android.support.test.espresso.idling.net.UriIdlingResource$1: android.support.test.espresso.idling.net.UriIdlingResource this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.espresso.idling.net.UriIdlingResource$1 r0;
        android.support.test.espresso.idling.net.UriIdlingResource $r1, $r3, $r5;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        android.support.test.espresso.IdlingResource$ResourceCallback $r4, $r6;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource$1;

        $r1 = r0.<android.support.test.espresso.idling.net.UriIdlingResource$1: android.support.test.espresso.idling.net.UriIdlingResource this$0>;

        $r2 = staticinvoke <android.support.test.espresso.idling.net.UriIdlingResource: java.util.concurrent.atomic.AtomicBoolean access$000(android.support.test.espresso.idling.net.UriIdlingResource)>($r1);

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r3 = r0.<android.support.test.espresso.idling.net.UriIdlingResource$1: android.support.test.espresso.idling.net.UriIdlingResource this$0>;

        $r4 = staticinvoke <android.support.test.espresso.idling.net.UriIdlingResource: android.support.test.espresso.IdlingResource$ResourceCallback access$100(android.support.test.espresso.idling.net.UriIdlingResource)>($r3);

        if $r4 == null goto label1;

        $r5 = r0.<android.support.test.espresso.idling.net.UriIdlingResource$1: android.support.test.espresso.idling.net.UriIdlingResource this$0>;

        $r6 = staticinvoke <android.support.test.espresso.idling.net.UriIdlingResource: android.support.test.espresso.IdlingResource$ResourceCallback access$100(android.support.test.espresso.idling.net.UriIdlingResource)>($r5);

        interfaceinvoke $r6.<android.support.test.espresso.IdlingResource$ResourceCallback: void onTransitionToIdle()>();

     label1:
        return;
    }

android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler
<android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler: android.os.Handler handler>
    public void <init>(android.os.Handler)
    {
        android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler r0;
        android.os.Handler r1;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler: android.os.Handler handler> = r1;

        return;
    }

    public void postDelayed(java.lang.Runnable, long)
    {
        android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler r0;
        java.lang.Runnable r1;
        long l0;
        android.os.Handler $r2;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $r2 = r0.<android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler: android.os.Handler handler>;

        virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>(r1, l0);

        return;
    }

    public void removeCallbacks(java.lang.Runnable)
    {
        android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<android.support.test.espresso.idling.net.UriIdlingResource$DefaultHandler: android.os.Handler handler>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>(r1);

        return;
    }

android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf
<android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf: void postDelayed(java.lang.Runnable,long)>
<android.support.test.espresso.idling.net.UriIdlingResource$HandlerIntf: void removeCallbacks(java.lang.Runnable)>
