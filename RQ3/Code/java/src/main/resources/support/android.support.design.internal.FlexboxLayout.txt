android.support.design.internal.FlexboxLayout
<android.support.design.internal.FlexboxLayout: int flexWrap>
<android.support.design.internal.FlexboxLayout: int SHOW_DIVIDER_NONE>
<android.support.design.internal.FlexboxLayout: int SHOW_DIVIDER_BEGINNING>
<android.support.design.internal.FlexboxLayout: int SHOW_DIVIDER_MIDDLE>
<android.support.design.internal.FlexboxLayout: int SHOW_DIVIDER_END>
<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableHorizontal>
<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableVertical>
<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>
<android.support.design.internal.FlexboxLayout: int showDividerVertical>
<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>
<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>
<android.support.design.internal.FlexboxLayout: int[] reorderedIndices>
<android.support.design.internal.FlexboxLayout: android.util.SparseIntArray orderCache>
<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>
<android.support.design.internal.FlexboxLayout: java.util.List flexLines>
<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper$FlexLinesResult flexLinesResult>
    public void <init>(android.content.Context)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.content.Context r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;
        android.support.design.internal.FlexboxHelper $r3;
        java.util.ArrayList $r4;
        android.support.design.internal.FlexboxHelper$FlexLinesResult $r5;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        $r3 = new android.support.design.internal.FlexboxHelper;

        specialinvoke $r3.<android.support.design.internal.FlexboxHelper: void <init>(android.support.design.internal.FlexContainer)>(r0);

        r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines> = $r4;

        $r5 = new android.support.design.internal.FlexboxHelper$FlexLinesResult;

        specialinvoke $r5.<android.support.design.internal.FlexboxHelper$FlexLinesResult: void <init>()>();

        r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper$FlexLinesResult flexLinesResult> = $r5;

        return;
    }

    protected void onMeasure(int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, i1, $i2;
        android.util.SparseIntArray $r1, $r2, $r4, $r7;
        android.support.design.internal.FlexboxHelper $r3, $r5;
        boolean $z0;
        int[] $r6;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: android.util.SparseIntArray orderCache>;

        if $r1 != null goto label1;

        $r7 = new android.util.SparseIntArray;

        $i2 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getChildCount()>();

        specialinvoke $r7.<android.util.SparseIntArray: void <init>(int)>($i2);

        r0.<android.support.design.internal.FlexboxLayout: android.util.SparseIntArray orderCache> = $r7;

     label1:
        $r3 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>;

        $r2 = r0.<android.support.design.internal.FlexboxLayout: android.util.SparseIntArray orderCache>;

        $z0 = virtualinvoke $r3.<android.support.design.internal.FlexboxHelper: boolean isOrderChangedFromLastMeasurement(android.util.SparseIntArray)>($r2);

        if $z0 == 0 goto label2;

        $r5 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>;

        $r4 = r0.<android.support.design.internal.FlexboxLayout: android.util.SparseIntArray orderCache>;

        $r6 = virtualinvoke $r5.<android.support.design.internal.FlexboxHelper: int[] createReorderedIndices(android.util.SparseIntArray)>($r4);

        r0.<android.support.design.internal.FlexboxLayout: int[] reorderedIndices> = $r6;

     label2:
        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void measureHorizontal(int,int)>(i0, i1);

        return;
    }

    public int getFlexItemCount()
    {
        android.support.design.internal.FlexboxLayout r0;
        int $i0;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        $i0 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getChildCount()>();

        return $i0;
    }

    public android.view.View getFlexItemAt(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0;
        android.view.View $r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: android.view.View getChildAt(int)>(i0);

        return $r1;
    }

    public android.view.View getReorderedChildAt(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, $i1, $i2;
        int[] $r1, $r2;
        android.view.View $r3;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: int[] reorderedIndices>;

        $i1 = lengthof $r1;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<android.support.design.internal.FlexboxLayout: int[] reorderedIndices>;

        $i2 = $r2[i0];

        $r3 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: android.view.View getChildAt(int)>($i2);

        return $r3;
    }

    public android.view.View getReorderedFlexItemAt(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0;
        android.view.View $r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: android.view.View getReorderedChildAt(int)>(i0);

        return $r1;
    }

    public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.view.View r1;
        int i0, $i1;
        android.view.ViewGroup$LayoutParams r2;
        android.util.SparseIntArray $r3, $r4, $r7;
        android.support.design.internal.FlexboxHelper $r5;
        int[] $r6;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        $r3 = r0.<android.support.design.internal.FlexboxLayout: android.util.SparseIntArray orderCache>;

        if $r3 != null goto label1;

        $r7 = new android.util.SparseIntArray;

        $i1 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getChildCount()>();

        specialinvoke $r7.<android.util.SparseIntArray: void <init>(int)>($i1);

        r0.<android.support.design.internal.FlexboxLayout: android.util.SparseIntArray orderCache> = $r7;

     label1:
        $r5 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>;

        $r4 = r0.<android.support.design.internal.FlexboxLayout: android.util.SparseIntArray orderCache>;

        $r6 = virtualinvoke $r5.<android.support.design.internal.FlexboxHelper: int[] createReorderedIndices(android.view.View,int,android.view.ViewGroup$LayoutParams,android.util.SparseIntArray)>(r1, i0, r2, $r4);

        r0.<android.support.design.internal.FlexboxLayout: int[] reorderedIndices> = $r6;

        specialinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r1, i0, r2);

        return;
    }

    private void measureHorizontal(int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.List $r1, $r6;
        android.support.design.internal.FlexboxHelper$FlexLinesResult $r2, $r3, $r5, $r10;
        android.support.design.internal.FlexboxHelper $r4, $r7, $r8, $r9;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper$FlexLinesResult flexLinesResult>;

        virtualinvoke $r2.<android.support.design.internal.FlexboxHelper$FlexLinesResult: void reset()>();

        $r4 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>;

        $r3 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper$FlexLinesResult flexLinesResult>;

        virtualinvoke $r4.<android.support.design.internal.FlexboxHelper: void calculateHorizontalFlexLines(android.support.design.internal.FlexboxHelper$FlexLinesResult,int,int)>($r3, i0, i1);

        $r5 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper$FlexLinesResult flexLinesResult>;

        $r6 = $r5.<android.support.design.internal.FlexboxHelper$FlexLinesResult: java.util.List flexLines>;

        r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines> = $r6;

        $r7 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>;

        virtualinvoke $r7.<android.support.design.internal.FlexboxHelper: void determineMainSize(int,int)>(i0, i1);

        $r8 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>;

        $i2 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getPaddingTop()>();

        $i3 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getPaddingBottom()>();

        $i4 = $i2 + $i3;

        virtualinvoke $r8.<android.support.design.internal.FlexboxHelper: void determineCrossSize(int,int)>(i1, $i4);

        $r9 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>;

        virtualinvoke $r9.<android.support.design.internal.FlexboxHelper: void stretchViews()>();

        $r10 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper$FlexLinesResult flexLinesResult>;

        $i5 = $r10.<android.support.design.internal.FlexboxHelper$FlexLinesResult: int childState>;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void setMeasuredDimensionForFlex(int,int,int)>(i0, i1, $i5);

        return;
    }

    private void setMeasuredDimensionForFlex(int, int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14;
        java.lang.IllegalStateException $r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;
        java.lang.String $r5, $r10;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i10 := @parameter2: int;

        i2 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        i11 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i1);

        i12 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);

        $i6 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getSumOfCrossSize()>();

        $i7 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getPaddingTop()>();

        $i8 = $i6 + $i7;

        $i9 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getPaddingBottom()>();

        i4 = $i8 + $i9;

        i5 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getLargestMainSize()>();

        lookupswitch(i2)
        {
            case -2147483648: goto label03;
            case 0: goto label06;
            case 1073741824: goto label01;
            default: goto label07;
        };

     label01:
        if i11 >= i5 goto label02;

        i10 = staticinvoke <android.view.View: int combineMeasuredStates(int,int)>(i10, 16777216);

     label02:
        i13 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>(i11, i0, i10);

        goto label08;

     label03:
        if i11 >= i5 goto label04;

        i10 = staticinvoke <android.view.View: int combineMeasuredStates(int,int)>(i10, 16777216);

        goto label05;

     label04:
        i11 = i5;

     label05:
        i13 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>(i11, i0, i10);

        goto label08;

     label06:
        i13 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>(i5, i0, i10);

        goto label08;

     label07:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown width mode is set: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label08:
        lookupswitch(i3)
        {
            case -2147483648: goto label11;
            case 0: goto label14;
            case 1073741824: goto label09;
            default: goto label15;
        };

     label09:
        if i12 >= i4 goto label10;

        i10 = staticinvoke <android.view.View: int combineMeasuredStates(int,int)>(i10, 256);

     label10:
        i14 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>(i12, i1, i10);

        goto label16;

     label11:
        if i12 >= i4 goto label12;

        i10 = staticinvoke <android.view.View: int combineMeasuredStates(int,int)>(i10, 256);

        goto label13;

     label12:
        i12 = i4;

     label13:
        i14 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>(i12, i1, i10);

        goto label16;

     label14:
        i14 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>(i4, i1, i10);

        goto label16;

     label15:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown height mode is set: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label16:
        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void setMeasuredDimension(int,int)>(i13, i14);

        return;
    }

    public int getLargestMainSize()
    {
        android.support.design.internal.FlexboxLayout r0;
        java.util.Iterator r1;
        android.support.design.internal.FlexLine r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;
        int $i0, i1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i1 = -2147483648;

        $r3 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.support.design.internal.FlexLine) $r4;

        $i0 = r2.<android.support.design.internal.FlexLine: int mainSize>;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i0);

        goto label1;

     label2:
        return i1;
    }

    public int getSumOfCrossSize()
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i7;
        android.support.design.internal.FlexLine r1;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i5 = 0;

        i6 = 0;

        $r2 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label1:
        if i6 >= i0 goto label6;

        $r3 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i6);

        r1 = (android.support.design.internal.FlexLine) $r4;

        $z0 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasDividerBeforeFlexLine(int)>(i6);

        if $z0 == 0 goto label3;

        $z2 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z2 == 0 goto label2;

        $i4 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        i5 = i5 + $i4;

        goto label3;

     label2:
        $i3 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        i5 = i5 + $i3;

     label3:
        $z3 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasEndDividerAfterFlexLine(int)>(i6);

        if $z3 == 0 goto label5;

        $z1 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z1 == 0 goto label4;

        $i2 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        i5 = i5 + $i2;

        goto label5;

     label4:
        $i1 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        i5 = i5 + $i1;

     label5:
        $i7 = r1.<android.support.design.internal.FlexLine: int crossSize>;

        i5 = i5 + $i7;

        i6 = i6 + 1;

        goto label1;

     label6:
        return i5;
    }

    public boolean isMainAxisDirectionHorizontal()
    {
        android.support.design.internal.FlexboxLayout r0;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        return 1;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        boolean z0, z1, $z2;
        int i0, i1, i2, i3, i4;
        android.view.View r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 = (android.view.View) r0;

        i4 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>(r1);

        if i4 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z1 = $z2;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void layoutHorizontal(boolean,int,int)>(z1, i0, i2);

        return;
    }

    private void layoutHorizontal(boolean, int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        boolean z0, $z1, $z2;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, $i37, i38, i39;
        android.support.design.internal.FlexLine r1;
        android.view.View r2;
        android.support.design.internal.FlexboxLayout$LayoutParams r3;
        java.util.List $r4, $r5;
        java.lang.Object $r6;
        android.view.ViewGroup$LayoutParams $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14, f15, f16, f17;
        android.support.design.internal.FlexboxHelper $r8, $r9;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getPaddingLeft()>();

        i3 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getPaddingRight()>();

        i4 = i1 - i0;

        i34 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getPaddingTop()>();

        i35 = 0;

        $r4 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        i5 = interfaceinvoke $r4.<java.util.List: int size()>();

     label01:
        if i35 >= i5 goto label12;

        $r5 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i35);

        r1 = (android.support.design.internal.FlexLine) $r6;

        $z1 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasDividerBeforeFlexLine(int)>(i35);

        if $z1 == 0 goto label02;

        $i33 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        i34 = i34 + $i33;

     label02:
        f12 = 0.0F;

        f13 = (float) i2;

        $i7 = i4 - i3;

        f14 = (float) $i7;

        f15 = staticinvoke <java.lang.Math: float max(float,float)>(f12, 0.0F);

        i36 = 0;

     label03:
        $i37 = r1.<android.support.design.internal.FlexLine: int itemCount>;

        if i36 >= $i37 goto label11;

        $i9 = r1.<android.support.design.internal.FlexLine: int firstIndex>;

        i6 = $i9 + i36;

        r2 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: android.view.View getReorderedChildAt(int)>(i6);

        if r2 == null goto label10;

        $i10 = virtualinvoke r2.<android.view.View: int getVisibility()>();

        if $i10 != 8 goto label04;

        goto label10;

     label04:
        $r7 = virtualinvoke r2.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r3 = (android.support.design.internal.FlexboxLayout$LayoutParams) $r7;

        $i11 = r3.<android.support.design.internal.FlexboxLayout$LayoutParams: int leftMargin>;

        $f0 = (float) $i11;

        f16 = f13 + $f0;

        $i12 = r3.<android.support.design.internal.FlexboxLayout$LayoutParams: int rightMargin>;

        $f1 = (float) $i12;

        f17 = f14 - $f1;

        i38 = 0;

        i39 = 0;

        $z2 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasDividerBeforeChildAtAlongMainAxis(int,int)>(i6, i36);

        if $z2 == 0 goto label05;

        i38 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        $f10 = (float) i38;

        f16 = f16 + $f10;

        $f11 = (float) i38;

        f17 = f17 - $f11;

     label05:
        $i13 = r1.<android.support.design.internal.FlexLine: int itemCount>;

        $i14 = $i13 - 1;

        if i36 != $i14 goto label06;

        $i31 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        $i32 = $i31 & 4;

        if $i32 <= 0 goto label06;

        i39 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

     label06:
        if z0 == 0 goto label07;

        $r9 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>;

        $i25 = staticinvoke <java.lang.Math: int round(float)>(f17);

        $i26 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $i27 = $i25 - $i26;

        $i28 = staticinvoke <java.lang.Math: int round(float)>(f17);

        $i29 = virtualinvoke r2.<android.view.View: int getMeasuredHeight()>();

        $i30 = i34 + $i29;

        virtualinvoke $r9.<android.support.design.internal.FlexboxHelper: void layoutSingleChildHorizontal(android.view.View,int,int,int,int)>(r2, $i27, i34, $i28, $i30);

        goto label08;

     label07:
        $r8 = r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxHelper flexboxHelper>;

        $i15 = staticinvoke <java.lang.Math: int round(float)>(f16);

        $i16 = staticinvoke <java.lang.Math: int round(float)>(f16);

        $i17 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $i18 = $i16 + $i17;

        $i19 = virtualinvoke r2.<android.view.View: int getMeasuredHeight()>();

        $i20 = i34 + $i19;

        virtualinvoke $r8.<android.support.design.internal.FlexboxHelper: void layoutSingleChildHorizontal(android.view.View,int,int,int,int)>(r2, $i15, i34, $i18, $i20);

     label08:
        $i21 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $f2 = (float) $i21;

        $f4 = $f2 + f15;

        $i22 = r3.<android.support.design.internal.FlexboxLayout$LayoutParams: int rightMargin>;

        $f3 = (float) $i22;

        $f5 = $f4 + $f3;

        f13 = f16 + $f5;

        $i23 = virtualinvoke r2.<android.view.View: int getMeasuredWidth()>();

        $f6 = (float) $i23;

        $f8 = $f6 + f15;

        $i24 = r3.<android.support.design.internal.FlexboxLayout$LayoutParams: int leftMargin>;

        $f7 = (float) $i24;

        $f9 = $f8 + $f7;

        f14 = f17 - $f9;

        if z0 == 0 goto label09;

        virtualinvoke r1.<android.support.design.internal.FlexLine: void updatePositionFromView(android.view.View,int,int,int,int)>(r2, i39, 0, i38, 0);

        goto label10;

     label09:
        virtualinvoke r1.<android.support.design.internal.FlexLine: void updatePositionFromView(android.view.View,int,int,int,int)>(r2, i38, 0, i39, 0);

     label10:
        i36 = i36 + 1;

        goto label03;

     label11:
        $i8 = r1.<android.support.design.internal.FlexLine: int crossSize>;

        i34 = i34 + $i8;

        i35 = i35 + 1;

        goto label01;

     label12:
        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.Canvas r1;
        int i0, $i1, $i2;
        boolean z0, $z1;
        android.graphics.drawable.Drawable $r2, $r3;
        android.view.View r4;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableVertical>;

        if $r2 != null goto label1;

        $r3 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableHorizontal>;

        if $r3 != null goto label1;

        return;

     label1:
        $i1 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        if $i1 != 0 goto label2;

        $i2 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        if $i2 != 0 goto label2;

        return;

     label2:
        r4 = (android.view.View) r0;

        i0 = staticinvoke <android.support.v4.view.ViewCompat: int getLayoutDirection(android.view.View)>(r4);

        if i0 != 1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void drawDividersHorizontal(android.graphics.Canvas,boolean)>(r1, z0);

        return;
    }

    private void drawDividersHorizontal(android.graphics.Canvas, boolean)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.Canvas r1;
        boolean z0, $z1, $z2, $z3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, i35, $i36, $i37, i38, i39, i40;
        android.support.design.internal.FlexLine r2;
        android.view.View r3;
        android.support.design.internal.FlexboxLayout$LayoutParams r4;
        java.util.List $r5, $r6;
        java.lang.Object $r7;
        android.view.ViewGroup$LayoutParams $r8;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.graphics.Canvas;

        z0 := @parameter1: boolean;

        i0 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getPaddingLeft()>();

        i1 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getPaddingRight()>();

        $i5 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: int getWidth()>();

        $i6 = $i5 - i1;

        $i7 = $i6 - i0;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i7);

        i33 = 0;

        $r5 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        i3 = interfaceinvoke $r5.<java.util.List: int size()>();

     label01:
        if i33 >= i3 goto label13;

        $r6 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i33);

        r2 = (android.support.design.internal.FlexLine) $r7;

        i34 = 0;

     label02:
        $i8 = r2.<android.support.design.internal.FlexLine: int itemCount>;

        if i34 >= $i8 goto label10;

        $i13 = r2.<android.support.design.internal.FlexLine: int firstIndex>;

        i4 = $i13 + i34;

        r3 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: android.view.View getReorderedChildAt(int)>(i4);

        if r3 == null goto label09;

        $i14 = virtualinvoke r3.<android.view.View: int getVisibility()>();

        if $i14 != 8 goto label03;

        goto label09;

     label03:
        $r8 = virtualinvoke r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r4 = (android.support.design.internal.FlexboxLayout$LayoutParams) $r8;

        $z3 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasDividerBeforeChildAtAlongMainAxis(int,int)>(i4, i34);

        if $z3 == 0 goto label06;

        if z0 == 0 goto label04;

        $i31 = virtualinvoke r3.<android.view.View: int getRight()>();

        $i32 = r4.<android.support.design.internal.FlexboxLayout$LayoutParams: int rightMargin>;

        i35 = $i31 + $i32;

        goto label05;

     label04:
        $i25 = virtualinvoke r3.<android.view.View: int getLeft()>();

        $i26 = r4.<android.support.design.internal.FlexboxLayout$LayoutParams: int leftMargin>;

        $i28 = $i25 - $i26;

        $i27 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        i35 = $i28 - $i27;

     label05:
        $i30 = r2.<android.support.design.internal.FlexLine: int top>;

        $i29 = r2.<android.support.design.internal.FlexLine: int crossSize>;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void drawVerticalDivider(android.graphics.Canvas,int,int,int)>(r1, i35, $i30, $i29);

     label06:
        $i36 = r2.<android.support.design.internal.FlexLine: int itemCount>;

        $i37 = $i36 - 1;

        if i34 != $i37 goto label09;

        $i15 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        $i16 = $i15 & 4;

        if $i16 <= 0 goto label09;

        if z0 == 0 goto label07;

        $i21 = virtualinvoke r3.<android.view.View: int getLeft()>();

        $i22 = r4.<android.support.design.internal.FlexboxLayout$LayoutParams: int leftMargin>;

        $i24 = $i21 - $i22;

        $i23 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        i38 = $i24 - $i23;

        goto label08;

     label07:
        $i17 = virtualinvoke r3.<android.view.View: int getRight()>();

        $i18 = r4.<android.support.design.internal.FlexboxLayout$LayoutParams: int rightMargin>;

        i38 = $i17 + $i18;

     label08:
        $i20 = r2.<android.support.design.internal.FlexLine: int top>;

        $i19 = r2.<android.support.design.internal.FlexLine: int crossSize>;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void drawVerticalDivider(android.graphics.Canvas,int,int,int)>(r1, i38, $i20, $i19);

     label09:
        i34 = i34 + 1;

        goto label02;

     label10:
        $z1 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasDividerBeforeFlexLine(int)>(i33);

        if $z1 == 0 goto label11;

        $i12 = r2.<android.support.design.internal.FlexLine: int top>;

        $i11 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        i39 = $i12 - $i11;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void drawHorizontalDivider(android.graphics.Canvas,int,int,int)>(r1, i0, i39, i2);

     label11:
        $z2 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasEndDividerAfterFlexLine(int)>(i33);

        if $z2 == 0 goto label12;

        $i9 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        $i10 = $i9 & 4;

        if $i10 <= 0 goto label12;

        i40 = r2.<android.support.design.internal.FlexLine: int bottom>;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void drawHorizontalDivider(android.graphics.Canvas,int,int,int)>(r1, i0, i40, i2);

     label12:
        i33 = i33 + 1;

        goto label01;

     label13:
        return;
    }

    private void drawVerticalDivider(android.graphics.Canvas, int, int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, $i3, $i4, $i5;
        android.graphics.drawable.Drawable $r2, $r3, $r4;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableVertical>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableVertical>;

        $i3 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        $i5 = i0 + $i3;

        $i4 = i1 + i2;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i1, $i5, $i4);

        $r4 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableVertical>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    private void drawHorizontalDivider(android.graphics.Canvas, int, int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, $i3, $i4, $i5;
        android.graphics.drawable.Drawable $r2, $r3, $r4;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableHorizontal>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableHorizontal>;

        $i5 = i0 + i2;

        $i3 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        $i4 = i1 + $i3;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i1, $i5, $i4);

        $r4 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableHorizontal>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.view.ViewGroup$LayoutParams r1;
        boolean $z0;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = r1 instanceof android.support.design.internal.FlexboxLayout$LayoutParams;

        return $z0;
    }

    public android.support.design.internal.FlexboxLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.util.AttributeSet r1;
        android.support.design.internal.FlexboxLayout$LayoutParams $r2;
        android.content.Context $r3;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = new android.support.design.internal.FlexboxLayout$LayoutParams;

        $r3 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: android.content.Context getContext()>();

        specialinvoke $r2.<android.support.design.internal.FlexboxLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, r1);

        return $r2;
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.view.ViewGroup$LayoutParams r1, r10, r11, r12;
        boolean $z0, $z1;
        android.view.ViewGroup$MarginLayoutParams $r4;
        android.support.design.internal.FlexboxLayout$LayoutParams $r6, r7, r8, r9;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = r1 instanceof android.support.design.internal.FlexboxLayout$LayoutParams;

        if $z0 == 0 goto label1;

        r7 = new android.support.design.internal.FlexboxLayout$LayoutParams;

        $r6 = (android.support.design.internal.FlexboxLayout$LayoutParams) r1;

        specialinvoke r7.<android.support.design.internal.FlexboxLayout$LayoutParams: void <init>(android.support.design.internal.FlexboxLayout$LayoutParams)>($r6);

        r10 = (android.view.ViewGroup$LayoutParams) r7;

        return r10;

     label1:
        $z1 = r1 instanceof android.view.ViewGroup$MarginLayoutParams;

        if $z1 == 0 goto label2;

        r8 = new android.support.design.internal.FlexboxLayout$LayoutParams;

        $r4 = (android.view.ViewGroup$MarginLayoutParams) r1;

        specialinvoke r8.<android.support.design.internal.FlexboxLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>($r4);

        r11 = (android.view.ViewGroup$LayoutParams) r8;

        return r11;

     label2:
        r9 = new android.support.design.internal.FlexboxLayout$LayoutParams;

        specialinvoke r9.<android.support.design.internal.FlexboxLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>(r1);

        r12 = (android.view.ViewGroup$LayoutParams) r9;

        return r12;
    }

    public int getFlexWrap()
    {
        android.support.design.internal.FlexboxLayout r0;
        int $i0;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        $i0 = r0.<android.support.design.internal.FlexboxLayout: int flexWrap>;

        return $i0;
    }

    public void setFlexWrap(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, $i1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.support.design.internal.FlexboxLayout: int flexWrap>;

        if $i1 == i0 goto label1;

        r0.<android.support.design.internal.FlexboxLayout: int flexWrap> = i0;

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void requestLayout()>();

     label1:
        return;
    }

    public java.util.List getFlexLines()
    {
        android.support.design.internal.FlexboxLayout r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        android.support.design.internal.FlexLine r3;
        java.util.List $r5, $r6;
        int $i0, $i1;
        java.lang.Object $r7;
        boolean $z1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r1 = $r4;

        $r6 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.support.design.internal.FlexLine) $r7;

        $i1 = virtualinvoke r3.<android.support.design.internal.FlexLine: int getItemCountNotGone()>();

        if $i1 != 0 goto label2;

        goto label1;

     label2:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label1;

     label3:
        return r1;
    }

    public int getDecorationLengthMainAxis(android.view.View, int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.view.View r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        boolean $z0, $z1, $z2;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i10 = 0;

        $z0 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z0 == 0 goto label2;

        $z2 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasDividerBeforeChildAtAlongMainAxis(int,int)>(i0, i1);

        if $z2 == 0 goto label1;

        $i9 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        i10 = i10 + $i9;

     label1:
        $i6 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        $i7 = $i6 & 4;

        if $i7 <= 0 goto label4;

        $i8 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        i10 = i10 + $i8;

        goto label4;

     label2:
        $z1 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasDividerBeforeChildAtAlongMainAxis(int,int)>(i0, i1);

        if $z1 == 0 goto label3;

        $i5 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        i10 = i10 + $i5;

     label3:
        $i2 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        $i3 = $i2 & 4;

        if $i3 <= 0 goto label4;

        $i4 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        i10 = i10 + $i4;

     label4:
        return i10;
    }

    public int getDecorationLengthCrossAxis(android.view.View)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.view.View r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.view.View;

        return 0;
    }

    public void onNewFlexLineAdded(android.support.design.internal.FlexLine)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.support.design.internal.FlexLine r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.support.design.internal.FlexLine;

        $z0 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z0 == 0 goto label1;

        $i8 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        $i9 = $i8 & 4;

        if $i9 <= 0 goto label2;

        $i11 = r1.<android.support.design.internal.FlexLine: int mainSize>;

        $i10 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        $i12 = $i11 + $i10;

        r1.<android.support.design.internal.FlexLine: int mainSize> = $i12;

        $i14 = r1.<android.support.design.internal.FlexLine: int dividerLengthInMainSize>;

        $i13 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        $i15 = $i14 + $i13;

        r1.<android.support.design.internal.FlexLine: int dividerLengthInMainSize> = $i15;

        goto label2;

     label1:
        $i0 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        $i1 = $i0 & 4;

        if $i1 <= 0 goto label2;

        $i3 = r1.<android.support.design.internal.FlexLine: int mainSize>;

        $i2 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        $i4 = $i3 + $i2;

        r1.<android.support.design.internal.FlexLine: int mainSize> = $i4;

        $i6 = r1.<android.support.design.internal.FlexLine: int dividerLengthInMainSize>;

        $i5 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        $i7 = $i6 + $i5;

        r1.<android.support.design.internal.FlexLine: int dividerLengthInMainSize> = $i7;

     label2:
        return;
    }

    public int getChildWidthMeasureSpec(int, int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, i1, i2, $i3;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = staticinvoke <android.support.design.internal.FlexboxLayout: int getChildMeasureSpec(int,int,int)>(i0, i1, i2);

        return $i3;
    }

    public int getChildHeightMeasureSpec(int, int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, i1, i2, $i3;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = staticinvoke <android.support.design.internal.FlexboxLayout: int getChildMeasureSpec(int,int,int)>(i0, i1, i2);

        return $i3;
    }

    public void onNewFlexItemAdded(android.view.View, int, int, android.support.design.internal.FlexLine)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.view.View r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.support.design.internal.FlexLine r2;
        boolean $z0, $z1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.support.design.internal.FlexLine;

        $z0 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean hasDividerBeforeChildAtAlongMainAxis(int,int)>(i0, i1);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z1 == 0 goto label1;

        $i9 = r2.<android.support.design.internal.FlexLine: int mainSize>;

        $i8 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        $i10 = $i9 + $i8;

        r2.<android.support.design.internal.FlexLine: int mainSize> = $i10;

        $i12 = r2.<android.support.design.internal.FlexLine: int dividerLengthInMainSize>;

        $i11 = r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth>;

        $i13 = $i12 + $i11;

        r2.<android.support.design.internal.FlexLine: int dividerLengthInMainSize> = $i13;

        goto label2;

     label1:
        $i3 = r2.<android.support.design.internal.FlexLine: int mainSize>;

        $i2 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        $i4 = $i3 + $i2;

        r2.<android.support.design.internal.FlexLine: int mainSize> = $i4;

        $i6 = r2.<android.support.design.internal.FlexLine: int dividerLengthInMainSize>;

        $i5 = r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight>;

        $i7 = $i6 + $i5;

        r2.<android.support.design.internal.FlexLine: int dividerLengthInMainSize> = $i7;

     label2:
        return;
    }

    public void setFlexLines(java.util.List)
    {
        android.support.design.internal.FlexboxLayout r0;
        java.util.List r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: java.util.List;

        r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines> = r1;

        return;
    }

    public java.util.List getFlexLinesInternal()
    {
        android.support.design.internal.FlexboxLayout r0;
        java.util.List $r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        return $r1;
    }

    public void updateViewCache(int, android.view.View)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0;
        android.view.View r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.View;

        return;
    }

    public android.graphics.drawable.Drawable getDividerDrawableHorizontal()
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableHorizontal>;

        return $r1;
    }

    public android.graphics.drawable.Drawable getDividerDrawableVertical()
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableVertical>;

        return $r1;
    }

    public void setDividerDrawable(android.graphics.drawable.Drawable)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void setDividerDrawableHorizontal(android.graphics.drawable.Drawable)>(r1);

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void setDividerDrawableVertical(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setDividerDrawableHorizontal(android.graphics.drawable.Drawable)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.drawable.Drawable r1, $r2;
        int $i0;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableHorizontal>;

        if r1 != $r2 goto label1;

        return;

     label1:
        r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableHorizontal> = r1;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight> = $i0;

        goto label3;

     label2:
        r0.<android.support.design.internal.FlexboxLayout: int dividerHorizontalHeight> = 0;

     label3:
        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void setWillNotDrawFlag()>();

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void requestLayout()>();

        return;
    }

    public void setDividerDrawableVertical(android.graphics.drawable.Drawable)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.drawable.Drawable r1, $r2;
        int $i0;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableVertical>;

        if r1 != $r2 goto label1;

        return;

     label1:
        r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableVertical> = r1;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth> = $i0;

        goto label3;

     label2:
        r0.<android.support.design.internal.FlexboxLayout: int dividerVerticalWidth> = 0;

     label3:
        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void setWillNotDrawFlag()>();

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void requestLayout()>();

        return;
    }

    public void setShowDivider(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void setShowDividerVertical(int)>(i0);

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void setShowDividerHorizontal(int)>(i0);

        return;
    }

    public void setShowDividerVertical(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, $i1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        if i0 == $i1 goto label1;

        r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical> = i0;

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void requestLayout()>();

     label1:
        return;
    }

    public void setShowDividerHorizontal(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, $i1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        if i0 == $i1 goto label1;

        r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal> = i0;

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void requestLayout()>();

     label1:
        return;
    }

    private void setWillNotDrawFlag()
    {
        android.support.design.internal.FlexboxLayout r0;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableHorizontal>;

        if $r1 != null goto label1;

        $r2 = r0.<android.support.design.internal.FlexboxLayout: android.graphics.drawable.Drawable dividerDrawableVertical>;

        if $r2 != null goto label1;

        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void setWillNotDraw(boolean)>(1);

        goto label2;

     label1:
        virtualinvoke r0.<android.support.design.internal.FlexboxLayout: void setWillNotDraw(boolean)>(0);

     label2:
        return;
    }

    private boolean hasDividerBeforeChildAtAlongMainAxis(int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean allViewsAreGoneBefore(int,int)>(i0, i1);

        if $z0 == 0 goto label06;

        $z2 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z2 == 0 goto label03;

        $i8 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        $i9 = $i8 & 1;

        if $i9 == 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        return $z3;

     label03:
        $i6 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        $i7 = $i6 & 1;

        if $i7 == 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        return $z4;

     label06:
        $z1 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z1 == 0 goto label09;

        $i4 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        return $z5;

     label09:
        $i2 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label10;

        $z6 = 1;

        goto label11;

     label10:
        $z6 = 0;

     label11:
        return $z6;
    }

    private boolean allViewsAreGoneBefore(int, int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, i1, $i2, $i3, i4;
        android.view.View r1;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 = 1;

     label1:
        if i4 > i1 goto label3;

        $i2 = i0 - i4;

        r1 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: android.view.View getReorderedChildAt(int)>($i2);

        if r1 == null goto label2;

        $i3 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i3 == 8 goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;
    }

    private boolean hasDividerBeforeFlexLine(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.List $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        if i0 < 0 goto label01;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label02;

     label01:
        return 0;

     label02:
        $z0 = specialinvoke r0.<android.support.design.internal.FlexboxLayout: boolean allFlexLinesAreDummyBefore(int)>(i0);

        if $z0 == 0 goto label08;

        $z2 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z2 == 0 goto label05;

        $i8 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        $i9 = $i8 & 1;

        if $i9 == 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        return $z3;

     label05:
        $i6 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        $i7 = $i6 & 1;

        if $i7 == 0 goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        return $z4;

     label08:
        $z1 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z1 == 0 goto label11;

        $i4 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        return $z5;

     label11:
        $i2 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label12;

        $z6 = 1;

        goto label13;

     label12:
        $z6 = 0;

     label13:
        return $z6;
    }

    private boolean allFlexLinesAreDummyBefore(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, $i1, i2;
        java.util.List $r1;
        java.lang.Object $r2;
        android.support.design.internal.FlexLine $r3;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r3 = (android.support.design.internal.FlexLine) $r2;

        $i1 = virtualinvoke $r3.<android.support.design.internal.FlexLine: int getItemCountNotGone()>();

        if $i1 <= 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    private boolean hasEndDividerAfterFlexLine(int)
    {
        android.support.design.internal.FlexboxLayout r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.util.List $r1, $r2, $r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        android.support.design.internal.FlexLine $r5;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        i0 := @parameter0: int;

        if i0 < 0 goto label01;

        $r1 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label02;

     label01:
        return 0;

     label02:
        i8 = i0 + 1;

     label03:
        $r2 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i8 >= $i2 goto label05;

        $r3 = r0.<android.support.design.internal.FlexboxLayout: java.util.List flexLines>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i8);

        $r5 = (android.support.design.internal.FlexLine) $r4;

        $i7 = virtualinvoke $r5.<android.support.design.internal.FlexLine: int getItemCountNotGone()>();

        if $i7 <= 0 goto label04;

        return 0;

     label04:
        i8 = i8 + 1;

        goto label03;

     label05:
        $z0 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: boolean isMainAxisDirectionHorizontal()>();

        if $z0 == 0 goto label08;

        $i5 = r0.<android.support.design.internal.FlexboxLayout: int showDividerHorizontal>;

        $i6 = $i5 & 4;

        if $i6 == 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        return $z1;

     label08:
        $i3 = r0.<android.support.design.internal.FlexboxLayout: int showDividerVertical>;

        $i4 = $i3 & 4;

        if $i4 == 0 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        return $z2;
    }

    public volatile android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.support.design.internal.FlexboxLayout r0;
        android.util.AttributeSet r1;
        android.support.design.internal.FlexboxLayout$LayoutParams $r2;
        android.view.ViewGroup$LayoutParams r3;

        r0 := @this: android.support.design.internal.FlexboxLayout;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = virtualinvoke r0.<android.support.design.internal.FlexboxLayout: android.support.design.internal.FlexboxLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>(r1);

        r3 = (android.view.ViewGroup$LayoutParams) $r2;

        return r3;
    }

