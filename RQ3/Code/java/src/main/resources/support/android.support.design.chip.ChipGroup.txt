android.support.design.chip.ChipGroup
<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$SpacingDrawable spacingDrawable>
<android.support.design.chip.ChipGroup: int chipSpacingHorizontal>
<android.support.design.chip.ChipGroup: int chipSpacingVertical>
<android.support.design.chip.ChipGroup: boolean singleLine>
<android.support.design.chip.ChipGroup: boolean singleSelection>
<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$OnCheckedChangeListener onCheckedChangeListener>
<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$CheckedStateTracker checkedStateTracker>
<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener passThroughListener>
<android.support.design.chip.ChipGroup: int checkedId>
<android.support.design.chip.ChipGroup: boolean protectFromCheckedChange>
    public void <init>(android.content.Context)
    {
        android.support.design.chip.ChipGroup r0;
        android.content.Context r1;

        r0 := @this: android.support.design.chip.ChipGroup;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.support.design.chip.ChipGroup r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int $i0;

        r0 := @this: android.support.design.chip.ChipGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        $i0 = <android.support.design.chip.R$attr: int chipGroupStyle>;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, $i0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.support.design.chip.ChipGroup r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.content.res.TypedArray r3;
        android.support.design.chip.ChipGroup$SpacingDrawable $r4, $r8;
        android.support.design.chip.ChipGroup$CheckedStateTracker $r5;
        android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener $r6, $r9;
        int[] $r7;
        boolean $z0, $z1;

        r0 := @this: android.support.design.chip.ChipGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        $r4 = new android.support.design.chip.ChipGroup$SpacingDrawable;

        specialinvoke $r4.<android.support.design.chip.ChipGroup$SpacingDrawable: void <init>(android.support.design.chip.ChipGroup,android.support.design.chip.ChipGroup$1)>(r0, null);

        r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$SpacingDrawable spacingDrawable> = $r4;

        $r5 = new android.support.design.chip.ChipGroup$CheckedStateTracker;

        specialinvoke $r5.<android.support.design.chip.ChipGroup$CheckedStateTracker: void <init>(android.support.design.chip.ChipGroup,android.support.design.chip.ChipGroup$1)>(r0, null);

        r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$CheckedStateTracker checkedStateTracker> = $r5;

        $r6 = new android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener;

        specialinvoke $r6.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: void <init>(android.support.design.chip.ChipGroup,android.support.design.chip.ChipGroup$1)>(r0, null);

        r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener passThroughListener> = $r6;

        r0.<android.support.design.chip.ChipGroup: int checkedId> = -1;

        r0.<android.support.design.chip.ChipGroup: boolean protectFromCheckedChange> = 0;

        $r7 = <android.support.design.chip.R$styleable: int[] ChipGroup>;

        $i3 = <android.support.design.chip.R$style: int Widget_MaterialComponents_ChipGroup>;

        r3 = staticinvoke <android.support.design.internal.ThemeEnforcement: android.content.res.TypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>(r1, r2, $r7, i0, $i3);

        $i4 = <android.support.design.chip.R$styleable: int ChipGroup_chipSpacing>;

        i1 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>($i4, 0);

        $i5 = <android.support.design.chip.R$styleable: int ChipGroup_chipSpacingHorizontal>;

        $i6 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>($i5, i1);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setChipSpacingHorizontal(int)>($i6);

        $i7 = <android.support.design.chip.R$styleable: int ChipGroup_chipSpacingVertical>;

        $i8 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>($i7, i1);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setChipSpacingVertical(int)>($i8);

        $i9 = <android.support.design.chip.R$styleable: int ChipGroup_singleLine>;

        $z0 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i9, 0);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setSingleLine(boolean)>($z0);

        $i10 = <android.support.design.chip.R$styleable: int ChipGroup_singleSelection>;

        $z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i10, 0);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setSingleSelection(boolean)>($z1);

        $i11 = <android.support.design.chip.R$styleable: int ChipGroup_checkedChip>;

        i2 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>($i11, -1);

        if i2 == -1 goto label1;

        r0.<android.support.design.chip.ChipGroup: int checkedId> = i2;

     label1:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        $r8 = r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$SpacingDrawable spacingDrawable>;

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setDividerDrawable(android.graphics.drawable.Drawable)>($r8);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setShowDivider(int)>(2);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setWillNotDraw(boolean)>(1);

        $r9 = r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener passThroughListener>;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>($r9);

        return;
    }

    public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)
    {
        android.support.design.chip.ChipGroup r0;
        android.view.ViewGroup$OnHierarchyChangeListener r1;
        android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener $r2;

        r0 := @this: android.support.design.chip.ChipGroup;

        r1 := @parameter0: android.view.ViewGroup$OnHierarchyChangeListener;

        $r2 = r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener passThroughListener>;

        staticinvoke <android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener access$302(android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener,android.view.ViewGroup$OnHierarchyChangeListener)>($r2, r1);

        return;
    }

    protected void onFinishInflate()
    {
        android.support.design.chip.ChipGroup r0;
        int $i0, $i1, $i2;

        r0 := @this: android.support.design.chip.ChipGroup;

        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void onFinishInflate()>();

        $i0 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        if $i0 == -1 goto label1;

        $i1 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedStateForView(int,boolean)>($i1, 1);

        $i2 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedId(int)>($i2);

     label1:
        return;
    }

    public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.support.design.chip.ChipGroup r0;
        android.view.View r1;
        int i0, $i1, $i2, $i3;
        android.view.ViewGroup$LayoutParams r2;
        android.support.design.chip.Chip r3;
        boolean $z0, $z1, $z2;

        r0 := @this: android.support.design.chip.ChipGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        $z0 = r1 instanceof android.support.design.chip.Chip;

        if $z0 == 0 goto label2;

        r3 = (android.support.design.chip.Chip) r1;

        $z1 = virtualinvoke r3.<android.support.design.chip.Chip: boolean isChecked()>();

        if $z1 == 0 goto label2;

        $i1 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        if $i1 == -1 goto label1;

        $z2 = r0.<android.support.design.chip.ChipGroup: boolean singleSelection>;

        if $z2 == 0 goto label1;

        $i2 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedStateForView(int,boolean)>($i2, 0);

     label1:
        $i3 = virtualinvoke r3.<android.support.design.chip.Chip: int getId()>();

        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedId(int)>($i3);

     label2:
        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r1, i0, r2);

        return;
    }

    public void setDividerDrawableHorizontal(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.ChipGroup r0;
        android.graphics.drawable.Drawable r1;
        android.support.design.chip.ChipGroup$SpacingDrawable $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.design.chip.ChipGroup;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$SpacingDrawable spacingDrawable>;

        if r1 == $r2 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing divider drawables not allowed. ChipGroup uses divider drawables as spacing.");

        throw $r3;

     label1:
        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void setDividerDrawableHorizontal(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setDividerDrawableVertical(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.ChipGroup r0;
        android.graphics.drawable.Drawable r1;
        android.support.design.chip.ChipGroup$SpacingDrawable $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.support.design.chip.ChipGroup;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$SpacingDrawable spacingDrawable>;

        if r1 == $r2 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing divider drawables not allowed. ChipGroup uses divider drawables as spacing.");

        throw $r3;

     label1:
        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void setDividerDrawableVertical(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setShowDividerHorizontal(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        if i0 == 2 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing divider modes not allowed. ChipGroup uses divider drawables as spacing.");

        throw $r1;

     label1:
        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void setShowDividerHorizontal(int)>(i0);

        return;
    }

    public void setShowDividerVertical(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        if i0 == 2 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing divider modes not allowed. ChipGroup uses divider drawables as spacing.");

        throw $r1;

     label1:
        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void setShowDividerVertical(int)>(i0);

        return;
    }

    public void setFlexWrap(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Changing flex wrap not allowed. ChipGroup exposes a singleLine attribute instead.");

        throw $r1;
    }

    public void check(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        $i1 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        if i0 != $i1 goto label1;

        return;

     label1:
        $i2 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        if $i2 == -1 goto label2;

        $z0 = r0.<android.support.design.chip.ChipGroup: boolean singleSelection>;

        if $z0 == 0 goto label2;

        $i3 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedStateForView(int,boolean)>($i3, 0);

     label2:
        if i0 == -1 goto label3;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedStateForView(int,boolean)>(i0, 1);

     label3:
        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedId(int)>(i0);

        return;
    }

    public int getCheckedChipId()
    {
        android.support.design.chip.ChipGroup r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.support.design.chip.ChipGroup;

        $z0 = r0.<android.support.design.chip.ChipGroup: boolean singleSelection>;

        if $z0 == 0 goto label1;

        $i0 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        goto label2;

     label1:
        $i0 = -1;

     label2:
        return $i0;
    }

    public void clearCheck()
    {
        android.support.design.chip.ChipGroup r0;
        android.view.View r1;
        int $i0, i1;
        boolean $z0;
        android.support.design.chip.Chip $r2;

        r0 := @this: android.support.design.chip.ChipGroup;

        r0.<android.support.design.chip.ChipGroup: boolean protectFromCheckedChange> = 1;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<android.support.design.chip.ChipGroup: int getChildCount()>();

        if i1 >= $i0 goto label3;

        r1 = virtualinvoke r0.<android.support.design.chip.ChipGroup: android.view.View getChildAt(int)>(i1);

        $z0 = r1 instanceof android.support.design.chip.Chip;

        if $z0 == 0 goto label2;

        $r2 = (android.support.design.chip.Chip) r1;

        virtualinvoke $r2.<android.support.design.chip.Chip: void setChecked(boolean)>(0);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r0.<android.support.design.chip.ChipGroup: boolean protectFromCheckedChange> = 0;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedId(int)>(-1);

        return;
    }

    public void setOnCheckedChangeListener(android.support.design.chip.ChipGroup$OnCheckedChangeListener)
    {
        android.support.design.chip.ChipGroup r0;
        android.support.design.chip.ChipGroup$OnCheckedChangeListener r1;

        r0 := @this: android.support.design.chip.ChipGroup;

        r1 := @parameter0: android.support.design.chip.ChipGroup$OnCheckedChangeListener;

        r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$OnCheckedChangeListener onCheckedChangeListener> = r1;

        return;
    }

    private void setCheckedId(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;
        android.support.design.chip.ChipGroup$OnCheckedChangeListener $r1, $r2;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        r0.<android.support.design.chip.ChipGroup: int checkedId> = i0;

        $r1 = r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$OnCheckedChangeListener onCheckedChangeListener>;

        if $r1 == null goto label1;

        $z0 = r0.<android.support.design.chip.ChipGroup: boolean singleSelection>;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$OnCheckedChangeListener onCheckedChangeListener>;

        interfaceinvoke $r2.<android.support.design.chip.ChipGroup$OnCheckedChangeListener: void onCheckedChanged(android.support.design.chip.ChipGroup,int)>(r0, i0);

     label1:
        return;
    }

    private void setCheckedStateForView(int, boolean)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;
        boolean z0, $z1;
        android.view.View r1;
        android.support.design.chip.Chip $r2;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<android.support.design.chip.ChipGroup: android.view.View findViewById(int)>(i0);

        $z1 = r1 instanceof android.support.design.chip.Chip;

        if $z1 == 0 goto label1;

        r0.<android.support.design.chip.ChipGroup: boolean protectFromCheckedChange> = 1;

        $r2 = (android.support.design.chip.Chip) r1;

        virtualinvoke $r2.<android.support.design.chip.Chip: void setChecked(boolean)>(z0);

        r0.<android.support.design.chip.ChipGroup: boolean protectFromCheckedChange> = 0;

     label1:
        return;
    }

    public void setChipSpacing(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setChipSpacingHorizontal(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setChipSpacingVertical(int)>(i0);

        return;
    }

    public void setChipSpacingResource(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0, $i1;
        android.content.res.Resources $r1;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.support.design.chip.ChipGroup: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelOffset(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setChipSpacing(int)>($i1);

        return;
    }

    public int getChipSpacingHorizontal()
    {
        android.support.design.chip.ChipGroup r0;
        int $i0;

        r0 := @this: android.support.design.chip.ChipGroup;

        $i0 = r0.<android.support.design.chip.ChipGroup: int chipSpacingHorizontal>;

        return $i0;
    }

    public void setChipSpacingHorizontal(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0, $i1;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        $i1 = r0.<android.support.design.chip.ChipGroup: int chipSpacingHorizontal>;

        if $i1 == i0 goto label1;

        r0.<android.support.design.chip.ChipGroup: int chipSpacingHorizontal> = i0;

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void requestLayout()>();

     label1:
        return;
    }

    public void setChipSpacingHorizontalResource(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0, $i1;
        android.content.res.Resources $r1;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.support.design.chip.ChipGroup: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelOffset(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setChipSpacingHorizontal(int)>($i1);

        return;
    }

    public int getChipSpacingVertical()
    {
        android.support.design.chip.ChipGroup r0;
        int $i0;

        r0 := @this: android.support.design.chip.ChipGroup;

        $i0 = r0.<android.support.design.chip.ChipGroup: int chipSpacingVertical>;

        return $i0;
    }

    public void setChipSpacingVertical(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0, $i1;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        $i1 = r0.<android.support.design.chip.ChipGroup: int chipSpacingVertical>;

        if $i1 == i0 goto label1;

        r0.<android.support.design.chip.ChipGroup: int chipSpacingVertical> = i0;

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void requestLayout()>();

     label1:
        return;
    }

    public void setChipSpacingVerticalResource(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0, $i1;
        android.content.res.Resources $r1;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.support.design.chip.ChipGroup: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r1.<android.content.res.Resources: int getDimensionPixelOffset(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setChipSpacingVertical(int)>($i1);

        return;
    }

    public boolean isSingleLine()
    {
        android.support.design.chip.ChipGroup r0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipGroup;

        $z0 = r0.<android.support.design.chip.ChipGroup: boolean singleLine>;

        return $z0;
    }

    public void setSingleLine(boolean)
    {
        android.support.design.chip.ChipGroup r0;
        boolean z0;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipGroup;

        z0 := @parameter0: boolean;

        r0.<android.support.design.chip.ChipGroup: boolean singleLine> = z0;

        if z0 == 0 goto label1;

        $b0 = 0;

        goto label2;

     label1:
        $b0 = 1;

     label2:
        specialinvoke r0.<android.support.design.internal.FlexboxLayout: void setFlexWrap(int)>($b0);

        return;
    }

    public void setSingleLine(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;
        android.content.res.Resources $r1;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.support.design.chip.ChipGroup: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setSingleLine(boolean)>($z0);

        return;
    }

    public boolean isSingleSelection()
    {
        android.support.design.chip.ChipGroup r0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipGroup;

        $z0 = r0.<android.support.design.chip.ChipGroup: boolean singleSelection>;

        return $z0;
    }

    public void setSingleSelection(boolean)
    {
        android.support.design.chip.ChipGroup r0;
        boolean z0, $z1;

        r0 := @this: android.support.design.chip.ChipGroup;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.support.design.chip.ChipGroup: boolean singleSelection>;

        if $z1 == z0 goto label1;

        r0.<android.support.design.chip.ChipGroup: boolean singleSelection> = z0;

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void clearCheck()>();

     label1:
        return;
    }

    public void setSingleSelection(int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;
        android.content.res.Resources $r1;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipGroup;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.support.design.chip.ChipGroup: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipGroup: void setSingleSelection(boolean)>($z0);

        return;
    }

    static int access$400(android.support.design.chip.ChipGroup)
    {
        android.support.design.chip.ChipGroup r0;
        int $i0;

        r0 := @parameter0: android.support.design.chip.ChipGroup;

        $i0 = r0.<android.support.design.chip.ChipGroup: int chipSpacingHorizontal>;

        return $i0;
    }

    static int access$500(android.support.design.chip.ChipGroup)
    {
        android.support.design.chip.ChipGroup r0;
        int $i0;

        r0 := @parameter0: android.support.design.chip.ChipGroup;

        $i0 = r0.<android.support.design.chip.ChipGroup: int chipSpacingVertical>;

        return $i0;
    }

    static boolean access$600(android.support.design.chip.ChipGroup)
    {
        android.support.design.chip.ChipGroup r0;
        boolean $z0;

        r0 := @parameter0: android.support.design.chip.ChipGroup;

        $z0 = r0.<android.support.design.chip.ChipGroup: boolean protectFromCheckedChange>;

        return $z0;
    }

    static int access$700(android.support.design.chip.ChipGroup)
    {
        android.support.design.chip.ChipGroup r0;
        int $i0;

        r0 := @parameter0: android.support.design.chip.ChipGroup;

        $i0 = r0.<android.support.design.chip.ChipGroup: int checkedId>;

        return $i0;
    }

    static boolean access$800(android.support.design.chip.ChipGroup)
    {
        android.support.design.chip.ChipGroup r0;
        boolean $z0;

        r0 := @parameter0: android.support.design.chip.ChipGroup;

        $z0 = r0.<android.support.design.chip.ChipGroup: boolean singleSelection>;

        return $z0;
    }

    static void access$900(android.support.design.chip.ChipGroup, int, boolean)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;
        boolean z0;

        r0 := @parameter0: android.support.design.chip.ChipGroup;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedStateForView(int,boolean)>(i0, z0);

        return;
    }

    static void access$1000(android.support.design.chip.ChipGroup, int)
    {
        android.support.design.chip.ChipGroup r0;
        int i0;

        r0 := @parameter0: android.support.design.chip.ChipGroup;

        i0 := @parameter1: int;

        specialinvoke r0.<android.support.design.chip.ChipGroup: void setCheckedId(int)>(i0);

        return;
    }

    static android.support.design.chip.ChipGroup$CheckedStateTracker access$1100(android.support.design.chip.ChipGroup)
    {
        android.support.design.chip.ChipGroup r0;
        android.support.design.chip.ChipGroup$CheckedStateTracker $r1;

        r0 := @parameter0: android.support.design.chip.ChipGroup;

        $r1 = r0.<android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$CheckedStateTracker checkedStateTracker>;

        return $r1;
    }

android.support.design.chip.ChipGroup$1
android.support.design.chip.ChipGroup$CheckedStateTracker
<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>
    private void <init>(android.support.design.chip.ChipGroup)
    {
        android.support.design.chip.ChipGroup$CheckedStateTracker r0;
        android.support.design.chip.ChipGroup r1;

        r0 := @this: android.support.design.chip.ChipGroup$CheckedStateTracker;

        r1 := @parameter0: android.support.design.chip.ChipGroup;

        r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onCheckedChanged(android.widget.CompoundButton, boolean)
    {
        android.support.design.chip.ChipGroup$CheckedStateTracker r0;
        android.widget.CompoundButton r1;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2, $i3, $i4;
        android.support.design.chip.ChipGroup $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: android.support.design.chip.ChipGroup$CheckedStateTracker;

        r1 := @parameter0: android.widget.CompoundButton;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>;

        $z1 = staticinvoke <android.support.design.chip.ChipGroup: boolean access$600(android.support.design.chip.ChipGroup)>($r2);

        if $z1 == 0 goto label1;

        return;

     label1:
        i0 = virtualinvoke r1.<android.widget.CompoundButton: int getId()>();

        if z0 == 0 goto label3;

        $r5 = r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>;

        $i2 = staticinvoke <android.support.design.chip.ChipGroup: int access$700(android.support.design.chip.ChipGroup)>($r5);

        if $i2 == -1 goto label2;

        $r6 = r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>;

        $i3 = staticinvoke <android.support.design.chip.ChipGroup: int access$700(android.support.design.chip.ChipGroup)>($r6);

        if $i3 == i0 goto label2;

        $r7 = r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>;

        $z2 = staticinvoke <android.support.design.chip.ChipGroup: boolean access$800(android.support.design.chip.ChipGroup)>($r7);

        if $z2 == 0 goto label2;

        $r9 = r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>;

        $r8 = r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>;

        $i4 = staticinvoke <android.support.design.chip.ChipGroup: int access$700(android.support.design.chip.ChipGroup)>($r8);

        staticinvoke <android.support.design.chip.ChipGroup: void access$900(android.support.design.chip.ChipGroup,int,boolean)>($r9, $i4, 0);

     label2:
        $r10 = r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>;

        staticinvoke <android.support.design.chip.ChipGroup: void access$1000(android.support.design.chip.ChipGroup,int)>($r10, i0);

        goto label4;

     label3:
        $r3 = r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>;

        $i1 = staticinvoke <android.support.design.chip.ChipGroup: int access$700(android.support.design.chip.ChipGroup)>($r3);

        if $i1 != i0 goto label4;

        $r4 = r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: android.support.design.chip.ChipGroup this$0>;

        staticinvoke <android.support.design.chip.ChipGroup: void access$1000(android.support.design.chip.ChipGroup,int)>($r4, -1);

     label4:
        return;
    }

    void <init>(android.support.design.chip.ChipGroup, android.support.design.chip.ChipGroup$1)
    {
        android.support.design.chip.ChipGroup$CheckedStateTracker r0;
        android.support.design.chip.ChipGroup r1;
        android.support.design.chip.ChipGroup$1 r2;

        r0 := @this: android.support.design.chip.ChipGroup$CheckedStateTracker;

        r1 := @parameter0: android.support.design.chip.ChipGroup;

        r2 := @parameter1: android.support.design.chip.ChipGroup$1;

        specialinvoke r0.<android.support.design.chip.ChipGroup$CheckedStateTracker: void <init>(android.support.design.chip.ChipGroup)>(r1);

        return;
    }

android.support.design.chip.ChipGroup$LayoutParams
    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.support.design.chip.ChipGroup$LayoutParams r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.support.design.chip.ChipGroup$LayoutParams;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        return;
    }

    public void <init>(android.view.ViewGroup$LayoutParams)
    {
        android.support.design.chip.ChipGroup$LayoutParams r0;
        android.view.ViewGroup$LayoutParams r1;

        r0 := @this: android.support.design.chip.ChipGroup$LayoutParams;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>(r1);

        return;
    }

    public void <init>(int, int)
    {
        android.support.design.chip.ChipGroup$LayoutParams r0;
        int i0, i1;

        r0 := @this: android.support.design.chip.ChipGroup$LayoutParams;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>(i0, i1);

        return;
    }

    public void <init>(android.view.ViewGroup$MarginLayoutParams)
    {
        android.support.design.chip.ChipGroup$LayoutParams r0;
        android.view.ViewGroup$MarginLayoutParams r1;

        r0 := @this: android.support.design.chip.ChipGroup$LayoutParams;

        r1 := @parameter0: android.view.ViewGroup$MarginLayoutParams;

        specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>(r1);

        return;
    }

android.support.design.chip.ChipGroup$OnCheckedChangeListener
<android.support.design.chip.ChipGroup$OnCheckedChangeListener: void onCheckedChanged(android.support.design.chip.ChipGroup,int)>
android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener
<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener onHierarchyChangeListener>
<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.support.design.chip.ChipGroup this$0>
    private void <init>(android.support.design.chip.ChipGroup)
    {
        android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener r0;
        android.support.design.chip.ChipGroup r1;

        r0 := @this: android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener;

        r1 := @parameter0: android.support.design.chip.ChipGroup;

        r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.support.design.chip.ChipGroup this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onChildViewAdded(android.view.View, android.view.View)
    {
        android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener r0;
        android.view.View r1, r2;
        android.support.design.chip.ChipGroup $r3, $r6;
        android.view.ViewGroup$OnHierarchyChangeListener $r4, $r8;
        boolean $z0;
        int $i0, i1, i2;
        android.support.design.chip.Chip $r5;
        android.support.design.chip.ChipGroup$CheckedStateTracker $r7;

        r0 := @this: android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $r3 = r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.support.design.chip.ChipGroup this$0>;

        if r1 != $r3 goto label4;

        $z0 = r2 instanceof android.support.design.chip.Chip;

        if $z0 == 0 goto label4;

        i1 = virtualinvoke r2.<android.view.View: int getId()>();

        if i1 != -1 goto label3;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 17 goto label1;

        i2 = staticinvoke <android.view.View: int generateViewId()>();

        goto label2;

     label1:
        i2 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

     label2:
        virtualinvoke r2.<android.view.View: void setId(int)>(i2);

     label3:
        $r5 = (android.support.design.chip.Chip) r2;

        $r6 = r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.support.design.chip.ChipGroup this$0>;

        $r7 = staticinvoke <android.support.design.chip.ChipGroup: android.support.design.chip.ChipGroup$CheckedStateTracker access$1100(android.support.design.chip.ChipGroup)>($r6);

        virtualinvoke $r5.<android.support.design.chip.Chip: void setOnCheckedChangeListenerInternal(android.widget.CompoundButton$OnCheckedChangeListener)>($r7);

     label4:
        $r8 = r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener onHierarchyChangeListener>;

        if $r8 == null goto label5;

        $r4 = r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener onHierarchyChangeListener>;

        interfaceinvoke $r4.<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>(r1, r2);

     label5:
        return;
    }

    public void onChildViewRemoved(android.view.View, android.view.View)
    {
        android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener r0;
        android.view.View r1, r2;
        android.support.design.chip.ChipGroup $r3;
        android.view.ViewGroup$OnHierarchyChangeListener $r4, $r6;
        boolean $z0;
        android.support.design.chip.Chip $r5;

        r0 := @this: android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $r3 = r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.support.design.chip.ChipGroup this$0>;

        if r1 != $r3 goto label1;

        $z0 = r2 instanceof android.support.design.chip.Chip;

        if $z0 == 0 goto label1;

        $r5 = (android.support.design.chip.Chip) r2;

        virtualinvoke $r5.<android.support.design.chip.Chip: void setOnCheckedChangeListenerInternal(android.widget.CompoundButton$OnCheckedChangeListener)>(null);

     label1:
        $r6 = r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener onHierarchyChangeListener>;

        if $r6 == null goto label2;

        $r4 = r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener onHierarchyChangeListener>;

        interfaceinvoke $r4.<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>(r1, r2);

     label2:
        return;
    }

    void <init>(android.support.design.chip.ChipGroup, android.support.design.chip.ChipGroup$1)
    {
        android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener r0;
        android.support.design.chip.ChipGroup r1;
        android.support.design.chip.ChipGroup$1 r2;

        r0 := @this: android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener;

        r1 := @parameter0: android.support.design.chip.ChipGroup;

        r2 := @parameter1: android.support.design.chip.ChipGroup$1;

        specialinvoke r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: void <init>(android.support.design.chip.ChipGroup)>(r1);

        return;
    }

    static android.view.ViewGroup$OnHierarchyChangeListener access$302(android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener, android.view.ViewGroup$OnHierarchyChangeListener)
    {
        android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener r0;
        android.view.ViewGroup$OnHierarchyChangeListener r1;

        r0 := @parameter0: android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener;

        r1 := @parameter1: android.view.ViewGroup$OnHierarchyChangeListener;

        r0.<android.support.design.chip.ChipGroup$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener onHierarchyChangeListener> = r1;

        return r1;
    }

android.support.design.chip.ChipGroup$SpacingDrawable
<android.support.design.chip.ChipGroup$SpacingDrawable: android.support.design.chip.ChipGroup this$0>
    private void <init>(android.support.design.chip.ChipGroup)
    {
        android.support.design.chip.ChipGroup$SpacingDrawable r0;
        android.support.design.chip.ChipGroup r1;

        r0 := @this: android.support.design.chip.ChipGroup$SpacingDrawable;

        r1 := @parameter0: android.support.design.chip.ChipGroup;

        r0.<android.support.design.chip.ChipGroup$SpacingDrawable: android.support.design.chip.ChipGroup this$0> = r1;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        return;
    }

    public int getIntrinsicWidth()
    {
        android.support.design.chip.ChipGroup$SpacingDrawable r0;
        android.support.design.chip.ChipGroup $r1;
        int $i0;

        r0 := @this: android.support.design.chip.ChipGroup$SpacingDrawable;

        $r1 = r0.<android.support.design.chip.ChipGroup$SpacingDrawable: android.support.design.chip.ChipGroup this$0>;

        $i0 = staticinvoke <android.support.design.chip.ChipGroup: int access$400(android.support.design.chip.ChipGroup)>($r1);

        return $i0;
    }

    public int getIntrinsicHeight()
    {
        android.support.design.chip.ChipGroup$SpacingDrawable r0;
        android.support.design.chip.ChipGroup $r1;
        int $i0;

        r0 := @this: android.support.design.chip.ChipGroup$SpacingDrawable;

        $r1 = r0.<android.support.design.chip.ChipGroup$SpacingDrawable: android.support.design.chip.ChipGroup this$0>;

        $i0 = staticinvoke <android.support.design.chip.ChipGroup: int access$500(android.support.design.chip.ChipGroup)>($r1);

        return $i0;
    }

    public void draw(android.graphics.Canvas)
    {
        android.support.design.chip.ChipGroup$SpacingDrawable r0;
        android.graphics.Canvas r1;

        r0 := @this: android.support.design.chip.ChipGroup$SpacingDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        return;
    }

    public void setAlpha(int)
    {
        android.support.design.chip.ChipGroup$SpacingDrawable r0;
        int i0;

        r0 := @this: android.support.design.chip.ChipGroup$SpacingDrawable;

        i0 := @parameter0: int;

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.support.design.chip.ChipGroup$SpacingDrawable r0;
        android.graphics.ColorFilter r1;

        r0 := @this: android.support.design.chip.ChipGroup$SpacingDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        return;
    }

    public int getOpacity()
    {
        android.support.design.chip.ChipGroup$SpacingDrawable r0;

        r0 := @this: android.support.design.chip.ChipGroup$SpacingDrawable;

        return -2;
    }

    void <init>(android.support.design.chip.ChipGroup, android.support.design.chip.ChipGroup$1)
    {
        android.support.design.chip.ChipGroup$SpacingDrawable r0;
        android.support.design.chip.ChipGroup r1;
        android.support.design.chip.ChipGroup$1 r2;

        r0 := @this: android.support.design.chip.ChipGroup$SpacingDrawable;

        r1 := @parameter0: android.support.design.chip.ChipGroup;

        r2 := @parameter1: android.support.design.chip.ChipGroup$1;

        specialinvoke r0.<android.support.design.chip.ChipGroup$SpacingDrawable: void <init>(android.support.design.chip.ChipGroup)>(r1);

        return;
    }

