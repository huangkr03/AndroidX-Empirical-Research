android.support.text.emoji.EmojiCompat
<android.support.text.emoji.EmojiCompat: java.lang.String EDITOR_INFO_METAVERSION_KEY>
<android.support.text.emoji.EmojiCompat: java.lang.String EDITOR_INFO_REPLACE_ALL_KEY>
<android.support.text.emoji.EmojiCompat: int LOAD_STATE_DEFAULT>
<android.support.text.emoji.EmojiCompat: int LOAD_STATE_LOADING>
<android.support.text.emoji.EmojiCompat: int LOAD_STATE_SUCCEEDED>
<android.support.text.emoji.EmojiCompat: int LOAD_STATE_FAILED>
<android.support.text.emoji.EmojiCompat: int REPLACE_STRATEGY_DEFAULT>
<android.support.text.emoji.EmojiCompat: int REPLACE_STRATEGY_ALL>
<android.support.text.emoji.EmojiCompat: int REPLACE_STRATEGY_NON_EXISTENT>
<android.support.text.emoji.EmojiCompat: int LOAD_STRATEGY_DEFAULT>
<android.support.text.emoji.EmojiCompat: int LOAD_STRATEGY_MANUAL>
<android.support.text.emoji.EmojiCompat: int EMOJI_COUNT_UNLIMITED>
<android.support.text.emoji.EmojiCompat: java.lang.Object sInstanceLock>
<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance>
<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>
<android.support.text.emoji.EmojiCompat: java.util.Set mInitCallbacks>
<android.support.text.emoji.EmojiCompat: int mLoadState>
<android.support.text.emoji.EmojiCompat: android.os.Handler mMainHandler>
<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper>
<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$MetadataRepoLoader mMetadataLoader>
<android.support.text.emoji.EmojiCompat: boolean mReplaceAll>
<android.support.text.emoji.EmojiCompat: boolean mUseEmojiAsDefaultStyle>
<android.support.text.emoji.EmojiCompat: int[] mEmojiAsDefaultStyleExceptions>
<android.support.text.emoji.EmojiCompat: boolean mEmojiSpanIndicatorEnabled>
<android.support.text.emoji.EmojiCompat: int mEmojiSpanIndicatorColor>
<android.support.text.emoji.EmojiCompat: int mMetadataLoadStrategy>
    private void <init>(android.support.text.emoji.EmojiCompat$Config)
    {
        android.support.text.emoji.EmojiCompat r0;
        android.support.text.emoji.EmojiCompat$Config r1;
        boolean $z0, $z1, $z2, $z3;
        int[] $r3;
        int $i0, $i1, $i2;
        android.support.text.emoji.EmojiCompat$MetadataRepoLoader $r4;
        android.os.Looper $r6;
        java.util.Set $r8, $r10, $r11, $r12;
        android.support.text.emoji.EmojiCompat$CompatInternal $r13, r17;
        java.util.concurrent.locks.ReentrantReadWriteLock r14;
        android.os.Handler r15;
        android.support.v4.util.ArraySet r16;
        android.support.text.emoji.EmojiCompat$CompatInternal19 r18;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: android.support.text.emoji.EmojiCompat$Config;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r14 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke r14.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock> = r14;

        r0.<android.support.text.emoji.EmojiCompat: int mLoadState> = 3;

        $z0 = r1.<android.support.text.emoji.EmojiCompat$Config: boolean mReplaceAll>;

        r0.<android.support.text.emoji.EmojiCompat: boolean mReplaceAll> = $z0;

        $z1 = r1.<android.support.text.emoji.EmojiCompat$Config: boolean mUseEmojiAsDefaultStyle>;

        r0.<android.support.text.emoji.EmojiCompat: boolean mUseEmojiAsDefaultStyle> = $z1;

        $r3 = r1.<android.support.text.emoji.EmojiCompat$Config: int[] mEmojiAsDefaultStyleExceptions>;

        r0.<android.support.text.emoji.EmojiCompat: int[] mEmojiAsDefaultStyleExceptions> = $r3;

        $z2 = r1.<android.support.text.emoji.EmojiCompat$Config: boolean mEmojiSpanIndicatorEnabled>;

        r0.<android.support.text.emoji.EmojiCompat: boolean mEmojiSpanIndicatorEnabled> = $z2;

        $i0 = r1.<android.support.text.emoji.EmojiCompat$Config: int mEmojiSpanIndicatorColor>;

        r0.<android.support.text.emoji.EmojiCompat: int mEmojiSpanIndicatorColor> = $i0;

        $r4 = r1.<android.support.text.emoji.EmojiCompat$Config: android.support.text.emoji.EmojiCompat$MetadataRepoLoader mMetadataLoader>;

        r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$MetadataRepoLoader mMetadataLoader> = $r4;

        $i1 = r1.<android.support.text.emoji.EmojiCompat$Config: int mMetadataLoadStrategy>;

        r0.<android.support.text.emoji.EmojiCompat: int mMetadataLoadStrategy> = $i1;

        r15 = new android.os.Handler;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke r15.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        r0.<android.support.text.emoji.EmojiCompat: android.os.Handler mMainHandler> = r15;

        r16 = new android.support.v4.util.ArraySet;

        specialinvoke r16.<android.support.v4.util.ArraySet: void <init>()>();

        r0.<android.support.text.emoji.EmojiCompat: java.util.Set mInitCallbacks> = r16;

        $r8 = r1.<android.support.text.emoji.EmojiCompat$Config: java.util.Set mInitCallbacks>;

        if $r8 == null goto label1;

        $r10 = r1.<android.support.text.emoji.EmojiCompat$Config: java.util.Set mInitCallbacks>;

        $z3 = interfaceinvoke $r10.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        $r12 = r0.<android.support.text.emoji.EmojiCompat: java.util.Set mInitCallbacks>;

        $r11 = r1.<android.support.text.emoji.EmojiCompat$Config: java.util.Set mInitCallbacks>;

        interfaceinvoke $r12.<java.util.Set: boolean addAll(java.util.Collection)>($r11);

     label1:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 >= 19 goto label2;

        r17 = new android.support.text.emoji.EmojiCompat$CompatInternal;

        $r13 = r17;

        specialinvoke r17.<android.support.text.emoji.EmojiCompat$CompatInternal: void <init>(android.support.text.emoji.EmojiCompat)>(r0);

        goto label3;

     label2:
        r18 = new android.support.text.emoji.EmojiCompat$CompatInternal19;

        $r13 = r18;

        specialinvoke r18.<android.support.text.emoji.EmojiCompat$CompatInternal19: void <init>(android.support.text.emoji.EmojiCompat)>(r0);

     label3:
        r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper> = $r13;

        specialinvoke r0.<android.support.text.emoji.EmojiCompat: void loadMetadata()>();

        return;
    }

    public static android.support.text.emoji.EmojiCompat init(android.support.text.emoji.EmojiCompat$Config)
    {
        android.support.text.emoji.EmojiCompat$Config r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r8;
        android.support.text.emoji.EmojiCompat $r3, $r4, $r6, $r7;

        r0 := @parameter0: android.support.text.emoji.EmojiCompat$Config;

        $r3 = <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance>;

        if $r3 != null goto label6;

        $r5 = <android.support.text.emoji.EmojiCompat: java.lang.Object sInstanceLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance>;

        if $r6 != null goto label2;

        $r7 = new android.support.text.emoji.EmojiCompat;

        specialinvoke $r7.<android.support.text.emoji.EmojiCompat: void <init>(android.support.text.emoji.EmojiCompat$Config)>(r0);

        <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance> = $r7;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        $r4 = <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance>;

        return $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static android.support.text.emoji.EmojiCompat reset(android.support.text.emoji.EmojiCompat$Config)
    {
        android.support.text.emoji.EmojiCompat$Config r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.support.text.emoji.EmojiCompat $r4, $r5;

        r0 := @parameter0: android.support.text.emoji.EmojiCompat$Config;

        $r3 = <android.support.text.emoji.EmojiCompat: java.lang.Object sInstanceLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = new android.support.text.emoji.EmojiCompat;

        specialinvoke $r4.<android.support.text.emoji.EmojiCompat: void <init>(android.support.text.emoji.EmojiCompat$Config)>(r0);

        <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance> = $r4;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r5 = <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance>;

        return $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static android.support.text.emoji.EmojiCompat reset(android.support.text.emoji.EmojiCompat)
    {
        android.support.text.emoji.EmojiCompat r0, $r3;
        java.lang.Object r1, $r2;

        r0 := @parameter0: android.support.text.emoji.EmojiCompat;

        $r2 = <android.support.text.emoji.EmojiCompat: java.lang.Object sInstanceLock>;

        r1 = $r2;

        entermonitor $r2;

        <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance> = r0;

        exitmonitor r1;

        goto label1;

     label1:
        $r3 = <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance>;

        return $r3;
    }

    void setGlyphChecker(android.support.text.emoji.EmojiProcessor$GlyphChecker)
    {
        android.support.text.emoji.EmojiCompat r0;
        android.support.text.emoji.EmojiProcessor$GlyphChecker r1;
        android.support.text.emoji.EmojiCompat$CompatInternal $r2;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: android.support.text.emoji.EmojiProcessor$GlyphChecker;

        $r2 = r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper>;

        virtualinvoke $r2.<android.support.text.emoji.EmojiCompat$CompatInternal: void setGlyphChecker(android.support.text.emoji.EmojiProcessor$GlyphChecker)>(r1);

        return;
    }

    public static android.support.text.emoji.EmojiCompat get()
    {
        java.lang.Object r0, $r2;
        java.lang.Throwable r1, $r5;
        android.support.text.emoji.EmojiCompat $r3, $r4;
        boolean $z0;

        $r2 = <android.support.text.emoji.EmojiCompat: java.lang.Object sInstanceLock>;

        r0 = $r2;

        entermonitor $r2;

     label1:
        $r3 = <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance>;

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <android.support.v4.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "EmojiCompat is not initialized. Please call EmojiCompat.init() first");

        $r4 = <android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat sInstance>;

        exitmonitor r0;

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void load()
    {
        android.support.text.emoji.EmojiCompat r0;
        int $i0, $i1;
        boolean $z0, $z1;
        java.util.concurrent.locks.ReadWriteLock $r1, $r3, $r6;
        java.util.concurrent.locks.Lock $r2, $r4, $r7;
        android.support.text.emoji.EmojiCompat$CompatInternal $r5;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        $i0 = r0.<android.support.text.emoji.EmojiCompat: int mMetadataLoadStrategy>;

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <android.support.v4.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Set metadataLoadStrategy to LOAD_STRATEGY_MANUAL to execute manual loading");

        $z0 = specialinvoke r0.<android.support.text.emoji.EmojiCompat: boolean isInitialized()>();

        if $z0 == 0 goto label3;

        return;

     label3:
        $r1 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

        $i1 = r0.<android.support.text.emoji.EmojiCompat: int mLoadState>;

        if $i1 != 0 goto label4;

        $r6 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label4:
        r0.<android.support.text.emoji.EmojiCompat: int mLoadState> = 0;

        $r3 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label5:
        $r5 = r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper>;

        virtualinvoke $r5.<android.support.text.emoji.EmojiCompat$CompatInternal: void loadMetadata()>();

        return;
    }

    private void loadMetadata()
    {
        android.support.text.emoji.EmojiCompat r0;
        java.util.concurrent.locks.ReadWriteLock $r1, $r3;
        java.util.concurrent.locks.Lock $r2, $r4;
        int $i0, $i1;
        android.support.text.emoji.EmojiCompat$CompatInternal $r5;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        $r1 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

        $i0 = r0.<android.support.text.emoji.EmojiCompat: int mMetadataLoadStrategy>;

        if $i0 != 0 goto label1;

        r0.<android.support.text.emoji.EmojiCompat: int mLoadState> = 0;

     label1:
        $r3 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label2;

     label2:
        $i1 = virtualinvoke r0.<android.support.text.emoji.EmojiCompat: int getLoadState()>();

        if $i1 != 0 goto label3;

        $r5 = r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper>;

        virtualinvoke $r5.<android.support.text.emoji.EmojiCompat$CompatInternal: void loadMetadata()>();

     label3:
        return;
    }

    void onMetadataLoadSuccess()
    {
        android.support.text.emoji.EmojiCompat r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r12;
        java.util.concurrent.locks.ReadWriteLock $r4, $r8, $r13;
        java.util.concurrent.locks.Lock $r5, $r9, $r14;
        java.util.Set $r6, $r7;
        android.support.text.emoji.EmojiCompat$ListenerDispatcher $r10;
        int $i0;
        android.os.Handler $r11;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        $r4 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        r0.<android.support.text.emoji.EmojiCompat: int mLoadState> = 1;

        $r6 = r0.<android.support.text.emoji.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke r1.<java.util.Collection: boolean addAll(java.util.Collection)>($r6);

        $r7 = r0.<android.support.text.emoji.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

     label2:
        $r8 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r12 := @caughtexception;

        r2 = $r12;

        $r13 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r14 = interfaceinvoke $r13.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r14.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label4:
        $r11 = r0.<android.support.text.emoji.EmojiCompat: android.os.Handler mMainHandler>;

        $r10 = new android.support.text.emoji.EmojiCompat$ListenerDispatcher;

        $i0 = r0.<android.support.text.emoji.EmojiCompat: int mLoadState>;

        specialinvoke $r10.<android.support.text.emoji.EmojiCompat$ListenerDispatcher: void <init>(java.util.Collection,int)>(r1, $i0);

        virtualinvoke $r11.<android.os.Handler: boolean post(java.lang.Runnable)>($r10);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void onMetadataLoadFailed(java.lang.Throwable)
    {
        android.support.text.emoji.EmojiCompat r0;
        java.lang.Throwable r1, r3, $r13;
        java.util.ArrayList r2, $r4;
        java.util.concurrent.locks.ReadWriteLock $r5, $r9, $r14;
        java.util.concurrent.locks.Lock $r6, $r10, $r15;
        java.util.Set $r7, $r8;
        android.support.text.emoji.EmojiCompat$ListenerDispatcher $r11;
        int $i0;
        android.os.Handler $r12;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: java.lang.Throwable;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        $r5 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        r0.<android.support.text.emoji.EmojiCompat: int mLoadState> = 2;

        $r7 = r0.<android.support.text.emoji.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r7);

        $r8 = r0.<android.support.text.emoji.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke $r8.<java.util.Set: void clear()>();

     label2:
        $r9 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r10 = interfaceinvoke $r9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r13 := @caughtexception;

        r3 = $r13;

        $r14 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r15 = interfaceinvoke $r14.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r15.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r3;

     label4:
        $r12 = r0.<android.support.text.emoji.EmojiCompat: android.os.Handler mMainHandler>;

        $r11 = new android.support.text.emoji.EmojiCompat$ListenerDispatcher;

        $i0 = r0.<android.support.text.emoji.EmojiCompat: int mLoadState>;

        specialinvoke $r11.<android.support.text.emoji.EmojiCompat$ListenerDispatcher: void <init>(java.util.Collection,int,java.lang.Throwable)>(r2, $i0, r1);

        virtualinvoke $r12.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void registerInitCallback(android.support.text.emoji.EmojiCompat$InitCallback)
    {
        android.support.text.emoji.EmojiCompat r0;
        android.support.text.emoji.EmojiCompat$InitCallback r1;
        java.lang.Throwable r2, $r11;
        java.util.concurrent.locks.ReadWriteLock $r4, $r8, $r12;
        java.util.concurrent.locks.Lock $r5, $r9, $r13;
        int $i0, $i1, $i2;
        android.support.text.emoji.EmojiCompat$ListenerDispatcher $r6;
        android.os.Handler $r7;
        java.util.Set $r10;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: android.support.text.emoji.EmojiCompat$InitCallback;

        staticinvoke <android.support.v4.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "initCallback cannot be null");

        $r4 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $i0 = r0.<android.support.text.emoji.EmojiCompat: int mLoadState>;

        if $i0 == 1 goto label2;

        $i2 = r0.<android.support.text.emoji.EmojiCompat: int mLoadState>;

        if $i2 != 2 goto label3;

     label2:
        $r7 = r0.<android.support.text.emoji.EmojiCompat: android.os.Handler mMainHandler>;

        $r6 = new android.support.text.emoji.EmojiCompat$ListenerDispatcher;

        $i1 = r0.<android.support.text.emoji.EmojiCompat: int mLoadState>;

        specialinvoke $r6.<android.support.text.emoji.EmojiCompat$ListenerDispatcher: void <init>(android.support.text.emoji.EmojiCompat$InitCallback,int)>(r1, $i1);

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        goto label4;

     label3:
        $r10 = r0.<android.support.text.emoji.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label4:
        $r8 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label5:
        $r11 := @caughtexception;

        r2 = $r11;

        $r12 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r13 = interfaceinvoke $r12.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r13.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public void unregisterInitCallback(android.support.text.emoji.EmojiCompat$InitCallback)
    {
        android.support.text.emoji.EmojiCompat r0;
        android.support.text.emoji.EmojiCompat$InitCallback r1;
        java.lang.Throwable r2, $r9;
        java.util.concurrent.locks.ReadWriteLock $r4, $r7, $r10;
        java.util.concurrent.locks.Lock $r5, $r8, $r11;
        java.util.Set $r6;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: android.support.text.emoji.EmojiCompat$InitCallback;

        staticinvoke <android.support.v4.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "initCallback cannot be null");

        $r4 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r6 = r0.<android.support.text.emoji.EmojiCompat: java.util.Set mInitCallbacks>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label2:
        $r7 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r11 = interfaceinvoke $r10.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getLoadState()
    {
        android.support.text.emoji.EmojiCompat r0;
        int i0;
        java.util.concurrent.locks.ReadWriteLock $r1, $r3;
        java.util.concurrent.locks.Lock $r2, $r4;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        $r1 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

        i0 = r0.<android.support.text.emoji.EmojiCompat: int mLoadState>;

        $r3 = r0.<android.support.text.emoji.EmojiCompat: java.util.concurrent.locks.ReadWriteLock mInitLock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return i0;
    }

    private boolean isInitialized()
    {
        android.support.text.emoji.EmojiCompat r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        $i0 = virtualinvoke r0.<android.support.text.emoji.EmojiCompat: int getLoadState()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isEmojiSpanIndicatorEnabled()
    {
        android.support.text.emoji.EmojiCompat r0;
        boolean $z0;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        $z0 = r0.<android.support.text.emoji.EmojiCompat: boolean mEmojiSpanIndicatorEnabled>;

        return $z0;
    }

    int getEmojiSpanIndicatorColor()
    {
        android.support.text.emoji.EmojiCompat r0;
        int $i0;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        $i0 = r0.<android.support.text.emoji.EmojiCompat: int mEmojiSpanIndicatorColor>;

        return $i0;
    }

    public static boolean handleOnKeyDown(android.text.Editable, int, android.view.KeyEvent)
    {
        android.text.Editable r0;
        int i0, $i1;
        android.view.KeyEvent r1;
        boolean $z0;

        r0 := @parameter0: android.text.Editable;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 19 goto label1;

        $z0 = staticinvoke <android.support.text.emoji.EmojiProcessor: boolean handleOnKeyDown(android.text.Editable,int,android.view.KeyEvent)>(r0, i0, r1);

        return $z0;

     label1:
        return 0;
    }

    public static boolean handleDeleteSurroundingText(android.view.inputmethod.InputConnection, android.text.Editable, int, int, boolean)
    {
        android.view.inputmethod.InputConnection r0;
        android.text.Editable r1;
        int i0, i1, $i2;
        boolean z0, $z1;

        r0 := @parameter0: android.view.inputmethod.InputConnection;

        r1 := @parameter1: android.text.Editable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 19 goto label1;

        $z1 = staticinvoke <android.support.text.emoji.EmojiProcessor: boolean handleDeleteSurroundingText(android.view.inputmethod.InputConnection,android.text.Editable,int,int,boolean)>(r0, r1, i0, i1, z0);

        return $z1;

     label1:
        return 0;
    }

    public boolean hasEmojiGlyph(java.lang.CharSequence)
    {
        android.support.text.emoji.EmojiCompat r0;
        java.lang.CharSequence r1;
        boolean $z0, $z1;
        android.support.text.emoji.EmojiCompat$CompatInternal $r3;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = specialinvoke r0.<android.support.text.emoji.EmojiCompat: boolean isInitialized()>();

        staticinvoke <android.support.v4.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Not initialized yet");

        staticinvoke <android.support.v4.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "sequence cannot be null");

        $r3 = r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper>;

        $z1 = virtualinvoke $r3.<android.support.text.emoji.EmojiCompat$CompatInternal: boolean hasEmojiGlyph(java.lang.CharSequence)>(r1);

        return $z1;
    }

    public boolean hasEmojiGlyph(java.lang.CharSequence, int)
    {
        android.support.text.emoji.EmojiCompat r0;
        java.lang.CharSequence r1;
        int i0;
        boolean $z0, $z1;
        android.support.text.emoji.EmojiCompat$CompatInternal $r3;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<android.support.text.emoji.EmojiCompat: boolean isInitialized()>();

        staticinvoke <android.support.v4.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Not initialized yet");

        staticinvoke <android.support.v4.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "sequence cannot be null");

        $r3 = r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper>;

        $z1 = virtualinvoke $r3.<android.support.text.emoji.EmojiCompat$CompatInternal: boolean hasEmojiGlyph(java.lang.CharSequence,int)>(r1, i0);

        return $z1;
    }

    public java.lang.CharSequence process(java.lang.CharSequence)
    {
        android.support.text.emoji.EmojiCompat r0;
        java.lang.CharSequence r1, $r2;
        int i0, $i1;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        if r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

     label2:
        i0 = $i1;

        $r2 = virtualinvoke r0.<android.support.text.emoji.EmojiCompat: java.lang.CharSequence process(java.lang.CharSequence,int,int)>(r1, 0, i0);

        return $r2;
    }

    public java.lang.CharSequence process(java.lang.CharSequence, int, int)
    {
        android.support.text.emoji.EmojiCompat r0;
        java.lang.CharSequence r1, $r2;
        int i0, i1;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.support.text.emoji.EmojiCompat: java.lang.CharSequence process(java.lang.CharSequence,int,int,int)>(r1, i0, i1, 2147483647);

        return $r2;
    }

    public java.lang.CharSequence process(java.lang.CharSequence, int, int, int)
    {
        android.support.text.emoji.EmojiCompat r0;
        java.lang.CharSequence r1, $r2;
        int i0, i1, i2;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = virtualinvoke r0.<android.support.text.emoji.EmojiCompat: java.lang.CharSequence process(java.lang.CharSequence,int,int,int,int)>(r1, i0, i1, i2, 0);

        return $r2;
    }

    public java.lang.CharSequence process(java.lang.CharSequence, int, int, int, int)
    {
        android.support.text.emoji.EmojiCompat r0;
        java.lang.CharSequence r1, $r3;
        int i0, i1, i2, i3, $i7, $i8, $i9;
        boolean $z0, $z1, $z2, $z3, z4;
        android.support.text.emoji.EmojiCompat$CompatInternal $r2;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $z0 = specialinvoke r0.<android.support.text.emoji.EmojiCompat: boolean isInitialized()>();

        staticinvoke <android.support.v4.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Not initialized yet");

        staticinvoke <android.support.v4.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i0, "start cannot be negative");

        staticinvoke <android.support.v4.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i1, "end cannot be negative");

        staticinvoke <android.support.v4.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i2, "maxEmojiCount cannot be negative");

        if i0 > i1 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <android.support.v4.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "start should be <= than end");

        if r1 != null goto label03;

        return r1;

     label03:
        $i7 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i0 > $i7 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        staticinvoke <android.support.v4.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "start should be < than charSequence length");

        $i8 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i1 > $i8 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        staticinvoke <android.support.v4.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "end should be < than charSequence length");

        $i9 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i9 == 0 goto label08;

        if i0 != i1 goto label09;

     label08:
        return r1;

     label09:
        tableswitch(i3)
        {
            case 0: goto label12;
            case 1: goto label10;
            case 2: goto label11;
            default: goto label12;
        };

     label10:
        z4 = 1;

        goto label13;

     label11:
        z4 = 0;

        goto label13;

     label12:
        z4 = r0.<android.support.text.emoji.EmojiCompat: boolean mReplaceAll>;

     label13:
        $r2 = r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper>;

        $r3 = virtualinvoke $r2.<android.support.text.emoji.EmojiCompat$CompatInternal: java.lang.CharSequence process(java.lang.CharSequence,int,int,int,boolean)>(r1, i0, i1, i2, z4);

        return $r3;
    }

    public java.lang.String getAssetSignature()
    {
        android.support.text.emoji.EmojiCompat r0;
        boolean $z0;
        android.support.text.emoji.EmojiCompat$CompatInternal $r1;
        java.lang.String $r2;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        $z0 = specialinvoke r0.<android.support.text.emoji.EmojiCompat: boolean isInitialized()>();

        staticinvoke <android.support.v4.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Not initialized yet");

        $r1 = r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper>;

        $r2 = virtualinvoke $r1.<android.support.text.emoji.EmojiCompat$CompatInternal: java.lang.String getAssetSignature()>();

        return $r2;
    }

    public void updateEditorInfoAttrs(android.view.inputmethod.EditorInfo)
    {
        android.support.text.emoji.EmojiCompat r0;
        android.view.inputmethod.EditorInfo r1;
        boolean $z0;
        android.os.Bundle $r2;
        android.support.text.emoji.EmojiCompat$CompatInternal $r3;

        r0 := @this: android.support.text.emoji.EmojiCompat;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        $z0 = specialinvoke r0.<android.support.text.emoji.EmojiCompat: boolean isInitialized()>();

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        $r2 = r1.<android.view.inputmethod.EditorInfo: android.os.Bundle extras>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.text.emoji.EmojiCompat: android.support.text.emoji.EmojiCompat$CompatInternal mHelper>;

        virtualinvoke $r3.<android.support.text.emoji.EmojiCompat$CompatInternal: void updateEditorInfoAttrs(android.view.inputmethod.EditorInfo)>(r1);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.support.text.emoji.EmojiCompat: java.lang.Object sInstanceLock> = $r0;

        return;
    }

