android.support.design.transformation.FabTransformationBehavior
<android.support.design.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect>
<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>
<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>
<android.support.design.transformation.FabTransformationBehavior: int[] tmpArray>
    public void <init>()
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.graphics.Rect $r1;
        android.graphics.RectF $r2, $r3;
        int[] $r4;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        specialinvoke r0.<android.support.design.transformation.ExpandableTransformationBehavior: void <init>()>();

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect> = $r1;

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1> = $r2;

        $r3 = new android.graphics.RectF;

        specialinvoke $r3.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2> = $r3;

        $r4 = newarray (int)[2];

        r0.<android.support.design.transformation.FabTransformationBehavior: int[] tmpArray> = $r4;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        android.graphics.Rect $r3;
        android.graphics.RectF $r4, $r5;
        int[] $r6;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.support.design.transformation.ExpandableTransformationBehavior: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect> = $r3;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1> = $r4;

        $r5 = new android.graphics.RectF;

        specialinvoke $r5.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2> = $r5;

        $r6 = newarray (int)[2];

        r0.<android.support.design.transformation.FabTransformationBehavior: int[] tmpArray> = $r6;

        return;
    }

    public boolean layoutDependsOn(android.support.design.widget.CoordinatorLayout, android.view.View, android.view.View)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.support.design.widget.CoordinatorLayout r1;
        android.view.View r2, r3;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        android.support.design.widget.FloatingActionButton $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        r2 := @parameter1: android.view.View;

        r3 := @parameter2: android.view.View;

        $i1 = virtualinvoke r2.<android.view.View: int getVisibility()>();

        if $i1 != 8 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This behavior cannot be attached to a GONE view. Set the view to INVISIBLE instead.");

        throw $r5;

     label1:
        $z0 = r3 instanceof android.support.design.widget.FloatingActionButton;

        if $z0 == 0 goto label5;

        $r4 = (android.support.design.widget.FloatingActionButton) r3;

        i0 = virtualinvoke $r4.<android.support.design.widget.FloatingActionButton: int getExpandedComponentIdHint()>();

        if i0 == 0 goto label2;

        $i2 = virtualinvoke r2.<android.view.View: int getId()>();

        if i0 != $i2 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;

     label5:
        return 0;
    }

    public void onAttachedToLayoutParams(android.support.design.widget.CoordinatorLayout$LayoutParams)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.support.design.widget.CoordinatorLayout$LayoutParams r1;
        int $i0;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.support.design.widget.CoordinatorLayout$LayoutParams;

        $i0 = r1.<android.support.design.widget.CoordinatorLayout$LayoutParams: int dodgeInsetEdges>;

        if $i0 != 0 goto label1;

        r1.<android.support.design.widget.CoordinatorLayout$LayoutParams: int dodgeInsetEdges> = 80;

     label1:
        return;
    }

    protected android.animation.AnimatorSet onCreateExpandedStateChangeAnimation(android.view.View, android.view.View, boolean, boolean)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        boolean z0, z1;
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r3;
        java.util.ArrayList r4, r5, r15, r16;
        android.graphics.RectF r6;
        float f0, f1;
        android.animation.AnimatorSet r7, r17;
        int i0, $i1, i2;
        android.content.Context $r8;
        java.lang.Object $r13;
        android.animation.Animator$AnimatorListener $r14, r19;
        android.support.design.transformation.FabTransformationBehavior$1 r18;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r8 = virtualinvoke r2.<android.view.View: android.content.Context getContext()>();

        r3 = virtualinvoke r0.<android.support.design.transformation.FabTransformationBehavior: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec onCreateMotionSpec(android.content.Context,boolean)>($r8, z0);

        r15 = new java.util.ArrayList;

        specialinvoke r15.<java.util.ArrayList: void <init>()>();

        r4 = r15;

        r16 = new java.util.ArrayList;

        specialinvoke r16.<java.util.ArrayList: void <init>()>();

        r5 = r16;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 21 goto label1;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void createElevationAnimation(android.view.View,android.view.View,boolean,boolean,android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List)>(r1, r2, z0, z1, r3, r4, r5);

     label1:
        r6 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void createTranslationAnimation(android.view.View,android.view.View,boolean,boolean,android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List,android.graphics.RectF)>(r1, r2, z0, z1, r3, r4, r5, r6);

        f0 = virtualinvoke r6.<android.graphics.RectF: float width()>();

        f1 = virtualinvoke r6.<android.graphics.RectF: float height()>();

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void createIconFadeAnimation(android.view.View,android.view.View,boolean,boolean,android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List)>(r1, r2, z0, z1, r3, r4, r5);

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void createExpansionAnimation(android.view.View,android.view.View,boolean,boolean,android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec,float,float,java.util.List,java.util.List)>(r1, r2, z0, z1, r3, f0, f1, r4, r5);

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void createColorAnimation(android.view.View,android.view.View,boolean,boolean,android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List)>(r1, r2, z0, z1, r3, r4, r5);

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void createChildrenFadeAnimation(android.view.View,android.view.View,boolean,boolean,android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec,java.util.List,java.util.List)>(r1, r2, z0, z1, r3, r4, r5);

        r17 = new android.animation.AnimatorSet;

        specialinvoke r17.<android.animation.AnimatorSet: void <init>()>();

        r7 = r17;

        staticinvoke <android.support.design.animation.AnimatorSetCompat: void playTogether(android.animation.AnimatorSet,java.util.List)>(r7, r4);

        r18 = new android.support.design.transformation.FabTransformationBehavior$1;

        specialinvoke r18.<android.support.design.transformation.FabTransformationBehavior$1: void <init>(android.support.design.transformation.FabTransformationBehavior,boolean,android.view.View,android.view.View)>(r0, z0, r2, r1);

        r19 = (android.animation.Animator$AnimatorListener) r18;

        virtualinvoke r7.<android.animation.AnimatorSet: void addListener(android.animation.Animator$AnimatorListener)>(r19);

        i2 = 0;

        i0 = interfaceinvoke r5.<java.util.List: int size()>();

     label2:
        if i2 >= i0 goto label3;

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i2);

        $r14 = (android.animation.Animator$AnimatorListener) $r13;

        virtualinvoke r7.<android.animation.AnimatorSet: void addListener(android.animation.Animator$AnimatorListener)>($r14);

        i2 = i2 + 1;

        goto label2;

     label3:
        return r7;
    }

<android.support.design.transformation.FabTransformationBehavior: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec onCreateMotionSpec(android.content.Context,boolean)>
    private void createElevationAnimation(android.view.View, android.view.View, boolean, boolean, android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        boolean z0, z1;
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r3;
        java.util.List r4, r5;
        float f0, $f1, $f2, $f3, $f4;
        android.support.design.animation.MotionTiming r6;
        float[] $r7, $r10;
        android.util.Property $r8, $r11;
        android.support.design.animation.MotionSpec $r9;
        android.animation.ObjectAnimator r12;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec;

        r4 := @parameter5: java.util.List;

        r5 := @parameter6: java.util.List;

        $f1 = staticinvoke <android.support.v4.view.ViewCompat: float getElevation(android.view.View)>(r2);

        $f2 = staticinvoke <android.support.v4.view.ViewCompat: float getElevation(android.view.View)>(r1);

        f0 = $f1 - $f2;

        if z0 == 0 goto label2;

        if z1 != 0 goto label1;

        $f4 = neg f0;

        virtualinvoke r2.<android.view.View: void setTranslationZ(float)>($f4);

     label1:
        $r11 = <android.view.View: android.util.Property TRANSLATION_Z>;

        $r10 = newarray (float)[1];

        $r10[0] = 0.0F;

        r12 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>(r2, $r11, $r10);

        goto label3;

     label2:
        $r8 = <android.view.View: android.util.Property TRANSLATION_Z>;

        $r7 = newarray (float)[1];

        $f3 = neg f0;

        $r7[0] = $f3;

        r12 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>(r2, $r8, $r7);

     label3:
        $r9 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r6 = virtualinvoke $r9.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("elevation");

        virtualinvoke r6.<android.support.design.animation.MotionTiming: void apply(android.animation.Animator)>(r12);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r12);

        return;
    }

    private void createTranslationAnimation(android.view.View, android.view.View, boolean, boolean, android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List, android.graphics.RectF)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        boolean z0, z1;
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r3;
        java.util.List r4, r5;
        android.graphics.RectF r6;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.support.design.animation.Positioning $r7, $r8;
        byte $b0, $b1, $b2, $b3;
        android.support.design.animation.MotionSpec $r9, $r10, $r19, $r20, $r21, $r22;
        float[] $r11, $r13, $r15, $r17;
        android.util.Property $r12, $r14, $r16, $r18;
        android.support.design.animation.MotionTiming r23, r24;
        android.animation.ObjectAnimator r25, r26;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec;

        r4 := @parameter5: java.util.List;

        r5 := @parameter6: java.util.List;

        r6 := @parameter7: android.graphics.RectF;

        $r7 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.Positioning positioning>;

        f0 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: float calculateTranslationX(android.view.View,android.view.View,android.support.design.animation.Positioning)>(r1, r2, $r7);

        $r8 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.Positioning positioning>;

        f1 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: float calculateTranslationY(android.view.View,android.view.View,android.support.design.animation.Positioning)>(r1, r2, $r8);

        $b0 = f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $b1 = f1 cmpl 0.0F;

        if $b1 != 0 goto label2;

     label1:
        $r9 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r23 = virtualinvoke $r9.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("translationXLinear");

        $r10 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r24 = virtualinvoke $r10.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("translationYLinear");

        goto label6;

     label2:
        if z0 == 0 goto label3;

        $b3 = f1 cmpg 0.0F;

        if $b3 < 0 goto label4;

     label3:
        if z0 != 0 goto label5;

        $b2 = f1 cmpl 0.0F;

        if $b2 <= 0 goto label5;

     label4:
        $r21 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r23 = virtualinvoke $r21.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("translationXCurveUpwards");

        $r22 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r24 = virtualinvoke $r22.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("translationYCurveUpwards");

        goto label6;

     label5:
        $r19 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r23 = virtualinvoke $r19.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("translationXCurveDownwards");

        $r20 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r24 = virtualinvoke $r20.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("translationYCurveDownwards");

     label6:
        if z0 == 0 goto label8;

        if z1 != 0 goto label7;

        $f6 = neg f0;

        virtualinvoke r2.<android.view.View: void setTranslationX(float)>($f6);

        $f7 = neg f1;

        virtualinvoke r2.<android.view.View: void setTranslationY(float)>($f7);

     label7:
        $r16 = <android.view.View: android.util.Property TRANSLATION_X>;

        $r15 = newarray (float)[1];

        $r15[0] = 0.0F;

        r25 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>(r2, $r16, $r15);

        $r18 = <android.view.View: android.util.Property TRANSLATION_Y>;

        $r17 = newarray (float)[1];

        $r17[0] = 0.0F;

        r26 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>(r2, $r18, $r17);

        $f5 = neg f0;

        $f4 = neg f1;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateChildVisibleBoundsAtEndOfExpansion(android.view.View,android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec,android.support.design.animation.MotionTiming,android.support.design.animation.MotionTiming,float,float,float,float,android.graphics.RectF)>(r2, r3, r23, r24, $f5, $f4, 0.0F, 0.0F, r6);

        goto label9;

     label8:
        $r12 = <android.view.View: android.util.Property TRANSLATION_X>;

        $r11 = newarray (float)[1];

        $f2 = neg f0;

        $r11[0] = $f2;

        r25 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>(r2, $r12, $r11);

        $r14 = <android.view.View: android.util.Property TRANSLATION_Y>;

        $r13 = newarray (float)[1];

        $f3 = neg f1;

        $r13[0] = $f3;

        r26 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>(r2, $r14, $r13);

     label9:
        virtualinvoke r23.<android.support.design.animation.MotionTiming: void apply(android.animation.Animator)>(r25);

        virtualinvoke r24.<android.support.design.animation.MotionTiming: void apply(android.animation.Animator)>(r26);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r25);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r26);

        return;
    }

    private void createIconFadeAnimation(android.view.View, android.view.View, boolean, boolean, android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        boolean z0, z1, $z2, $z3;
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r3;
        java.util.List r4, r5;
        android.support.design.circularreveal.CircularRevealWidget r6;
        android.widget.ImageView r7;
        android.graphics.drawable.Drawable r8;
        android.support.design.animation.MotionTiming r9;
        int[] $r11, $r16;
        android.util.Property $r12, $r17;
        android.support.design.transformation.FabTransformationBehavior$2 $r13;
        android.support.design.animation.MotionSpec $r14;
        android.support.design.transformation.FabTransformationBehavior$3 $r15;
        android.animation.ObjectAnimator r18;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec;

        r4 := @parameter5: java.util.List;

        r5 := @parameter6: java.util.List;

        $z2 = r2 instanceof android.support.design.circularreveal.CircularRevealWidget;

        if $z2 == 0 goto label1;

        $z3 = r1 instanceof android.widget.ImageView;

        if $z3 != 0 goto label2;

     label1:
        return;

     label2:
        r6 = (android.support.design.circularreveal.CircularRevealWidget) r2;

        r7 = (android.widget.ImageView) r1;

        r8 = virtualinvoke r7.<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>();

        if r8 != null goto label3;

        return;

     label3:
        virtualinvoke r8.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        if z0 == 0 goto label5;

        if z1 != 0 goto label4;

        virtualinvoke r8.<android.graphics.drawable.Drawable: void setAlpha(int)>(255);

     label4:
        $r17 = <android.support.design.animation.DrawableAlphaProperty: android.util.Property DRAWABLE_ALPHA_COMPAT>;

        $r16 = newarray (int)[1];

        $r16[0] = 0;

        r18 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>(r8, $r17, $r16);

        goto label6;

     label5:
        $r12 = <android.support.design.animation.DrawableAlphaProperty: android.util.Property DRAWABLE_ALPHA_COMPAT>;

        $r11 = newarray (int)[1];

        $r11[0] = 255;

        r18 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>(r8, $r12, $r11);

     label6:
        $r13 = new android.support.design.transformation.FabTransformationBehavior$2;

        specialinvoke $r13.<android.support.design.transformation.FabTransformationBehavior$2: void <init>(android.support.design.transformation.FabTransformationBehavior,android.view.View)>(r0, r2);

        virtualinvoke r18.<android.animation.ObjectAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r13);

        $r14 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r9 = virtualinvoke $r14.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("iconFade");

        virtualinvoke r9.<android.support.design.animation.MotionTiming: void apply(android.animation.Animator)>(r18);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r18);

        $r15 = new android.support.design.transformation.FabTransformationBehavior$3;

        specialinvoke $r15.<android.support.design.transformation.FabTransformationBehavior$3: void <init>(android.support.design.transformation.FabTransformationBehavior,android.support.design.circularreveal.CircularRevealWidget,android.graphics.drawable.Drawable)>(r0, r6, r8);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r15);

        return;
    }

    private void createExpansionAnimation(android.view.View, android.view.View, boolean, boolean, android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec, float, float, java.util.List, java.util.List)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        boolean z0, z1, $z2;
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r3;
        float f0, f1, f2, f3, f4, $f5, $f6, f7, f8, f9, f10;
        java.util.List r4, r5;
        android.support.design.circularreveal.CircularRevealWidget r6;
        android.support.design.animation.MotionTiming r7;
        android.support.design.animation.Positioning $r8, $r9;
        android.graphics.Rect $r10, $r12;
        android.support.design.widget.FloatingActionButton $r11;
        int $i0, $i2, $i3, $i7, $i8, $i10, $i11;
        android.support.design.animation.MotionSpec $r13, $r15;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo $r14, $r18, r21;
        long $l1, $l4, $l5, $l6, $l9;
        android.animation.Animator$AnimatorListener $r16, r23;
        android.animation.Animator r20;
        android.support.design.transformation.FabTransformationBehavior$4 r22;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        r4 := @parameter7: java.util.List;

        r5 := @parameter8: java.util.List;

        $z2 = r2 instanceof android.support.design.circularreveal.CircularRevealWidget;

        if $z2 != 0 goto label1;

        return;

     label1:
        r6 = (android.support.design.circularreveal.CircularRevealWidget) r2;

        $r8 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.Positioning positioning>;

        f2 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: float calculateRevealCenterX(android.view.View,android.view.View,android.support.design.animation.Positioning)>(r1, r2, $r8);

        $r9 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.Positioning positioning>;

        f3 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: float calculateRevealCenterY(android.view.View,android.view.View,android.support.design.animation.Positioning)>(r1, r2, $r9);

        $r11 = (android.support.design.widget.FloatingActionButton) r1;

        $r10 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect>;

        virtualinvoke $r11.<android.support.design.widget.FloatingActionButton: boolean getContentRect(android.graphics.Rect)>($r10);

        $r12 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect>;

        $i0 = virtualinvoke $r12.<android.graphics.Rect: int width()>();

        $f5 = (float) $i0;

        f4 = $f5 / 2.0F;

        $r13 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r7 = virtualinvoke $r13.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("expansion");

        if z0 == 0 goto label5;

        if z1 != 0 goto label2;

        r21 = new android.support.design.circularreveal.CircularRevealWidget$RevealInfo;

        specialinvoke r21.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: void <init>(float,float,float)>(f2, f3, f4);

        interfaceinvoke r6.<android.support.design.circularreveal.CircularRevealWidget: void setRevealInfo(android.support.design.circularreveal.CircularRevealWidget$RevealInfo)>(r21);

     label2:
        if z1 == 0 goto label3;

        $r18 = interfaceinvoke r6.<android.support.design.circularreveal.CircularRevealWidget: android.support.design.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()>();

        $f6 = $r18.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

        goto label4;

     label3:
        $f6 = f4;

     label4:
        f7 = $f6;

        f8 = staticinvoke <android.support.design.math.MathUtils: float distanceToFurthestCorner(float,float,float,float,float,float)>(f2, f3, 0.0F, 0.0F, f0, f1);

        r20 = staticinvoke <android.support.design.circularreveal.CircularRevealCompat: android.animation.Animator createCircularReveal(android.support.design.circularreveal.CircularRevealWidget,float,float,float)>(r6, f2, f3, f8);

        r22 = new android.support.design.transformation.FabTransformationBehavior$4;

        specialinvoke r22.<android.support.design.transformation.FabTransformationBehavior$4: void <init>(android.support.design.transformation.FabTransformationBehavior,android.support.design.circularreveal.CircularRevealWidget)>(r0, r6);

        r23 = (android.animation.Animator$AnimatorListener) r22;

        virtualinvoke r20.<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>(r23);

        $l9 = virtualinvoke r7.<android.support.design.animation.MotionTiming: long getDelay()>();

        $i11 = (int) f2;

        $i10 = (int) f3;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void createPreFillRadialExpansion(android.view.View,long,int,int,float,java.util.List)>(r2, $l9, $i11, $i10, f7, r4);

        goto label6;

     label5:
        $r14 = interfaceinvoke r6.<android.support.design.circularreveal.CircularRevealWidget: android.support.design.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()>();

        f9 = $r14.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

        f10 = f4;

        r20 = staticinvoke <android.support.design.circularreveal.CircularRevealCompat: android.animation.Animator createCircularReveal(android.support.design.circularreveal.CircularRevealWidget,float,float,float)>(r6, f2, f3, f10);

        $l1 = virtualinvoke r7.<android.support.design.animation.MotionTiming: long getDelay()>();

        $i3 = (int) f2;

        $i2 = (int) f3;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void createPreFillRadialExpansion(android.view.View,long,int,int,float,java.util.List)>(r2, $l1, $i3, $i2, f9, r4);

        $l4 = virtualinvoke r7.<android.support.design.animation.MotionTiming: long getDelay()>();

        $l5 = virtualinvoke r7.<android.support.design.animation.MotionTiming: long getDuration()>();

        $r15 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        $l6 = virtualinvoke $r15.<android.support.design.animation.MotionSpec: long getTotalDuration()>();

        $i8 = (int) f2;

        $i7 = (int) f3;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void createPostFillRadialExpansion(android.view.View,long,long,long,int,int,float,java.util.List)>(r2, $l4, $l5, $l6, $i8, $i7, f10, r4);

     label6:
        virtualinvoke r7.<android.support.design.animation.MotionTiming: void apply(android.animation.Animator)>(r20);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r20);

        $r16 = staticinvoke <android.support.design.circularreveal.CircularRevealCompat: android.animation.Animator$AnimatorListener createCircularRevealListener(android.support.design.circularreveal.CircularRevealWidget)>(r6);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r16);

        return;
    }

    private void createColorAnimation(android.view.View, android.view.View, boolean, boolean, android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        boolean z0, z1, $z2;
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r3;
        java.util.List r4, r5;
        android.support.design.circularreveal.CircularRevealWidget r6;
        int i0, i1;
        android.support.design.animation.MotionTiming r7;
        int[] $r8, $r12;
        android.util.Property $r9, $r13;
        android.support.design.animation.ArgbEvaluatorCompat $r10;
        android.support.design.animation.MotionSpec $r11;
        android.animation.ObjectAnimator r14;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec;

        r4 := @parameter5: java.util.List;

        r5 := @parameter6: java.util.List;

        $z2 = r2 instanceof android.support.design.circularreveal.CircularRevealWidget;

        if $z2 != 0 goto label1;

        return;

     label1:
        r6 = (android.support.design.circularreveal.CircularRevealWidget) r2;

        i0 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: int getBackgroundTint(android.view.View)>(r1);

        i1 = i0 & 16777215;

        if z0 == 0 goto label3;

        if z1 != 0 goto label2;

        interfaceinvoke r6.<android.support.design.circularreveal.CircularRevealWidget: void setCircularRevealScrimColor(int)>(i0);

     label2:
        $r13 = <android.support.design.circularreveal.CircularRevealWidget$CircularRevealScrimColorProperty: android.util.Property CIRCULAR_REVEAL_SCRIM_COLOR>;

        $r12 = newarray (int)[1];

        $r12[0] = i1;

        r14 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>(r6, $r13, $r12);

        goto label4;

     label3:
        $r9 = <android.support.design.circularreveal.CircularRevealWidget$CircularRevealScrimColorProperty: android.util.Property CIRCULAR_REVEAL_SCRIM_COLOR>;

        $r8 = newarray (int)[1];

        $r8[0] = i0;

        r14 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>(r6, $r9, $r8);

     label4:
        $r10 = staticinvoke <android.support.design.animation.ArgbEvaluatorCompat: android.support.design.animation.ArgbEvaluatorCompat getInstance()>();

        virtualinvoke r14.<android.animation.ObjectAnimator: void setEvaluator(android.animation.TypeEvaluator)>($r10);

        $r11 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r7 = virtualinvoke $r11.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("color");

        virtualinvoke r7.<android.support.design.animation.MotionTiming: void apply(android.animation.Animator)>(r14);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r14);

        return;
    }

    private void createChildrenFadeAnimation(android.view.View, android.view.View, boolean, boolean, android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec, java.util.List, java.util.List)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        boolean z0, z1, $z2, $z3;
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r3;
        java.util.List r4, r5;
        android.view.ViewGroup r6;
        android.support.design.animation.MotionTiming r7;
        float[] $r8, $r11;
        android.util.Property $r9, $r12, $r13;
        android.support.design.animation.MotionSpec $r10;
        java.lang.Float $r14;
        int $i0;
        android.animation.ObjectAnimator r15;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec;

        r4 := @parameter5: java.util.List;

        r5 := @parameter6: java.util.List;

        $z2 = r2 instanceof android.view.ViewGroup;

        if $z2 != 0 goto label1;

        return;

     label1:
        $z3 = r2 instanceof android.support.design.circularreveal.CircularRevealWidget;

        if $z3 == 0 goto label2;

        $i0 = <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY>;

        if $i0 != 0 goto label2;

        return;

     label2:
        r6 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: android.view.ViewGroup calculateChildContentContainer(android.view.View)>(r2);

        if r6 != null goto label3;

        return;

     label3:
        if z0 == 0 goto label5;

        if z1 != 0 goto label4;

        $r13 = <android.support.design.animation.ChildrenAlphaProperty: android.util.Property CHILDREN_ALPHA>;

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        virtualinvoke $r13.<android.util.Property: void set(java.lang.Object,java.lang.Object)>(r6, $r14);

     label4:
        $r12 = <android.support.design.animation.ChildrenAlphaProperty: android.util.Property CHILDREN_ALPHA>;

        $r11 = newarray (float)[1];

        $r11[0] = 1.0F;

        r15 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>(r6, $r12, $r11);

        goto label6;

     label5:
        $r9 = <android.support.design.animation.ChildrenAlphaProperty: android.util.Property CHILDREN_ALPHA>;

        $r8 = newarray (float)[1];

        $r8[0] = 0.0F;

        r15 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>(r6, $r9, $r8);

     label6:
        $r10 = r3.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r7 = virtualinvoke $r10.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("contentFade");

        virtualinvoke r7.<android.support.design.animation.MotionTiming: void apply(android.animation.Animator)>(r15);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r15);

        return;
    }

    private float calculateTranslationX(android.view.View, android.view.View, android.support.design.animation.Positioning)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        android.support.design.animation.Positioning r3;
        android.graphics.RectF r4, r5;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, $f7, f8;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        r3 := @parameter2: android.support.design.animation.Positioning;

        r4 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        r5 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>(r1, r4);

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>(r2, r5);

        f6 = 0.0F;

        $i0 = r3.<android.support.design.animation.Positioning: int gravity>;

        $i1 = $i0 & 7;

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label1;
            case 4: goto label4;
            case 5: goto label3;
            default: goto label4;
        };

     label1:
        $f3 = r5.<android.graphics.RectF: float left>;

        $f2 = r4.<android.graphics.RectF: float left>;

        f6 = $f3 - $f2;

        goto label4;

     label2:
        $f4 = virtualinvoke r5.<android.graphics.RectF: float centerX()>();

        $f5 = virtualinvoke r4.<android.graphics.RectF: float centerX()>();

        f6 = $f4 - $f5;

        goto label4;

     label3:
        $f1 = r5.<android.graphics.RectF: float right>;

        $f0 = r4.<android.graphics.RectF: float right>;

        f6 = $f1 - $f0;

        goto label4;

     label4:
        $f7 = r3.<android.support.design.animation.Positioning: float xAdjustment>;

        f8 = f6 + $f7;

        return f8;
    }

    private float calculateTranslationY(android.view.View, android.view.View, android.support.design.animation.Positioning)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        android.support.design.animation.Positioning r3;
        android.graphics.RectF r4, r5;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, $f7, f8;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        r3 := @parameter2: android.support.design.animation.Positioning;

        r4 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        r5 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>(r1, r4);

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>(r2, r5);

        f6 = 0.0F;

        $i0 = r3.<android.support.design.animation.Positioning: int gravity>;

        $i1 = $i0 & 112;

        lookupswitch($i1)
        {
            case 16: goto label2;
            case 48: goto label1;
            case 80: goto label3;
            default: goto label4;
        };

     label1:
        $f3 = r5.<android.graphics.RectF: float top>;

        $f2 = r4.<android.graphics.RectF: float top>;

        f6 = $f3 - $f2;

        goto label4;

     label2:
        $f4 = virtualinvoke r5.<android.graphics.RectF: float centerY()>();

        $f5 = virtualinvoke r4.<android.graphics.RectF: float centerY()>();

        f6 = $f4 - $f5;

        goto label4;

     label3:
        $f1 = r5.<android.graphics.RectF: float bottom>;

        $f0 = r4.<android.graphics.RectF: float bottom>;

        f6 = $f1 - $f0;

        goto label4;

     label4:
        $f7 = r3.<android.support.design.animation.Positioning: float yAdjustment>;

        f8 = f6 + $f7;

        return f8;
    }

    private void calculateWindowBounds(android.view.View, android.graphics.RectF)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1;
        android.graphics.RectF r2, r3;
        int[] r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.RectF;

        r3 = r2;

        $i0 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $f0 = (float) $i0;

        $i1 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $f1 = (float) $i1;

        virtualinvoke r3.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        r4 = r0.<android.support.design.transformation.FabTransformationBehavior: int[] tmpArray>;

        virtualinvoke r1.<android.view.View: void getLocationInWindow(int[])>(r4);

        $i2 = r4[0];

        $f3 = (float) $i2;

        $i3 = r4[1];

        $f2 = (float) $i3;

        virtualinvoke r3.<android.graphics.RectF: void offsetTo(float,float)>($f3, $f2);

        $f4 = virtualinvoke r1.<android.view.View: float getTranslationX()>();

        $f5 = neg $f4;

        $i4 = (int) $f5;

        $f6 = (float) $i4;

        $f7 = virtualinvoke r1.<android.view.View: float getTranslationY()>();

        $f8 = neg $f7;

        $i5 = (int) $f8;

        $f9 = (float) $i5;

        virtualinvoke r3.<android.graphics.RectF: void offset(float,float)>($f6, $f9);

        return;
    }

    private float calculateRevealCenterX(android.view.View, android.view.View, android.support.design.animation.Positioning)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        android.support.design.animation.Positioning r3;
        android.graphics.RectF r4, r5;
        float f0, $f1, $f2, $f3, $f4;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        r3 := @parameter2: android.support.design.animation.Positioning;

        r4 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        r5 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>(r1, r4);

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>(r2, r5);

        f0 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: float calculateTranslationX(android.view.View,android.view.View,android.support.design.animation.Positioning)>(r1, r2, r3);

        $f1 = neg f0;

        virtualinvoke r5.<android.graphics.RectF: void offset(float,float)>($f1, 0.0F);

        $f2 = virtualinvoke r4.<android.graphics.RectF: float centerX()>();

        $f3 = r5.<android.graphics.RectF: float left>;

        $f4 = $f2 - $f3;

        return $f4;
    }

    private float calculateRevealCenterY(android.view.View, android.view.View, android.support.design.animation.Positioning)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r2;
        android.support.design.animation.Positioning r3;
        android.graphics.RectF r4, r5;
        float f0, $f1, $f2, $f3, $f4;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        r3 := @parameter2: android.support.design.animation.Positioning;

        r4 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        r5 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>(r1, r4);

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>(r2, r5);

        f0 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: float calculateTranslationY(android.view.View,android.view.View,android.support.design.animation.Positioning)>(r1, r2, r3);

        $f1 = neg f0;

        virtualinvoke r5.<android.graphics.RectF: void offset(float,float)>(0.0F, $f1);

        $f2 = virtualinvoke r4.<android.graphics.RectF: float centerY()>();

        $f3 = r5.<android.graphics.RectF: float top>;

        $f4 = $f2 - $f3;

        return $f4;
    }

    private void calculateChildVisibleBoundsAtEndOfExpansion(android.view.View, android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec, android.support.design.animation.MotionTiming, android.support.design.animation.MotionTiming, float, float, float, float, android.graphics.RectF)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1;
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r2;
        android.support.design.animation.MotionTiming r3, r4;
        float f0, f1, f2, f3, f4, f5;
        android.graphics.RectF r5, r7, r8;
        android.graphics.Rect r6;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec;

        r3 := @parameter2: android.support.design.animation.MotionTiming;

        r4 := @parameter3: android.support.design.animation.MotionTiming;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        f3 := @parameter7: float;

        r5 := @parameter8: android.graphics.RectF;

        f4 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: float calculateValueOfAnimationAtEndOfExpansion(android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec,android.support.design.animation.MotionTiming,float,float)>(r2, r3, f0, f2);

        f5 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: float calculateValueOfAnimationAtEndOfExpansion(android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec,android.support.design.animation.MotionTiming,float,float)>(r2, r4, f1, f3);

        r6 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.Rect tmpRect>;

        virtualinvoke r1.<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>(r6);

        r7 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF1>;

        virtualinvoke r7.<android.graphics.RectF: void set(android.graphics.Rect)>(r6);

        r8 = r0.<android.support.design.transformation.FabTransformationBehavior: android.graphics.RectF tmpRectF2>;

        specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: void calculateWindowBounds(android.view.View,android.graphics.RectF)>(r1, r8);

        virtualinvoke r8.<android.graphics.RectF: void offset(float,float)>(f4, f5);

        virtualinvoke r8.<android.graphics.RectF: boolean intersect(android.graphics.RectF)>(r7);

        virtualinvoke r5.<android.graphics.RectF: void set(android.graphics.RectF)>(r8);

        return;
    }

    private float calculateValueOfAnimationAtEndOfExpansion(android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec, android.support.design.animation.MotionTiming, float, float)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r1;
        android.support.design.animation.MotionTiming r2, r3;
        float f0, f1, $f2, $f3, $f4, f5, f6;
        long l0, l1, $l2, $l3, $l4, l5, l6;
        android.support.design.animation.MotionSpec $r4;
        android.animation.TimeInterpolator $r5;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec;

        r2 := @parameter1: android.support.design.animation.MotionTiming;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        l0 = virtualinvoke r2.<android.support.design.animation.MotionTiming: long getDelay()>();

        l1 = virtualinvoke r2.<android.support.design.animation.MotionTiming: long getDuration()>();

        $r4 = r1.<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>;

        r3 = virtualinvoke $r4.<android.support.design.animation.MotionSpec: android.support.design.animation.MotionTiming getTiming(java.lang.String)>("expansion");

        $l2 = virtualinvoke r3.<android.support.design.animation.MotionTiming: long getDelay()>();

        $l3 = virtualinvoke r3.<android.support.design.animation.MotionTiming: long getDuration()>();

        l5 = $l2 + $l3;

        l6 = l5 + 17L;

        $l4 = l6 - l0;

        $f3 = (float) $l4;

        $f2 = (float) l1;

        f5 = $f3 / $f2;

        $r5 = virtualinvoke r2.<android.support.design.animation.MotionTiming: android.animation.TimeInterpolator getInterpolator()>();

        f6 = interfaceinvoke $r5.<android.animation.TimeInterpolator: float getInterpolation(float)>(f5);

        $f4 = staticinvoke <android.support.design.animation.AnimationUtils: float lerp(float,float,float)>(f0, f1, f6);

        return $f4;
    }

    private android.view.ViewGroup calculateChildContentContainer(android.view.View)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1, r6, r7;
        int $i0;
        boolean $z0, $z1;
        android.view.ViewGroup $r2, $r3, $r4, $r5;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        $i0 = <android.support.design.transformation.R$id: int mtrl_child_content_container>;

        r6 = virtualinvoke r1.<android.view.View: android.view.View findViewById(int)>($i0);

        if r6 == null goto label1;

        $r5 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: android.view.ViewGroup toViewGroupOrNull(android.view.View)>(r6);

        return $r5;

     label1:
        $z0 = r1 instanceof android.support.design.transformation.TransformationChildLayout;

        if $z0 != 0 goto label2;

        $z1 = r1 instanceof android.support.design.transformation.TransformationChildCard;

        if $z1 == 0 goto label3;

     label2:
        $r2 = (android.view.ViewGroup) r1;

        r7 = virtualinvoke $r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(0);

        $r3 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: android.view.ViewGroup toViewGroupOrNull(android.view.View)>(r7);

        return $r3;

     label3:
        $r4 = specialinvoke r0.<android.support.design.transformation.FabTransformationBehavior: android.view.ViewGroup toViewGroupOrNull(android.view.View)>(r1);

        return $r4;
    }

    private android.view.ViewGroup toViewGroupOrNull(android.view.View)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1;
        boolean $z0;
        android.view.ViewGroup $r2;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r2 = (android.view.ViewGroup) r1;

        return $r2;

     label1:
        return null;
    }

    private int getBackgroundTint(android.view.View)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1;
        android.content.res.ColorStateList r2;
        int[] $r3;
        int $i0, $i1;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        r2 = staticinvoke <android.support.v4.view.ViewCompat: android.content.res.ColorStateList getBackgroundTintList(android.view.View)>(r1);

        if r2 == null goto label1;

        $r3 = virtualinvoke r1.<android.view.View: int[] getDrawableState()>();

        $i0 = virtualinvoke r2.<android.content.res.ColorStateList: int getDefaultColor()>();

        $i1 = virtualinvoke r2.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r3, $i0);

        return $i1;

     label1:
        return 0;
    }

    private void createPreFillRadialExpansion(android.view.View, long, int, int, float, java.util.List)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1;
        long l0;
        int i1, i2, $i3;
        float f0;
        java.util.List r2;
        android.animation.Animator r3;
        byte $b4;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        f0 := @parameter4: float;

        r2 := @parameter5: java.util.List;

        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 < 21 goto label1;

        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label1;

        r3 = staticinvoke <android.view.ViewAnimationUtils: android.animation.Animator createCircularReveal(android.view.View,int,int,float,float)>(r1, i1, i2, f0, f0);

        virtualinvoke r3.<android.animation.Animator: void setStartDelay(long)>(0L);

        virtualinvoke r3.<android.animation.Animator: android.animation.Animator setDuration(long)>(l0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label1:
        return;
    }

    private void createPostFillRadialExpansion(android.view.View, long, long, long, int, int, float, java.util.List)
    {
        android.support.design.transformation.FabTransformationBehavior r0;
        android.view.View r1;
        long l0, l1, l2, $l6, $l8, $l9, $l10;
        int i3, i4, $i5;
        float f0;
        java.util.List r2;
        android.animation.Animator r3;
        byte $b7;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior;

        r1 := @parameter0: android.view.View;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        f0 := @parameter6: float;

        r2 := @parameter7: java.util.List;

        $i5 = <android.os.Build$VERSION: int SDK_INT>;

        if $i5 < 21 goto label1;

        $l6 = l0 + l1;

        $b7 = $l6 cmp l2;

        if $b7 >= 0 goto label1;

        r3 = staticinvoke <android.view.ViewAnimationUtils: android.animation.Animator createCircularReveal(android.view.View,int,int,float,float)>(r1, i3, i4, f0, f0);

        $l8 = l0 + l1;

        virtualinvoke r3.<android.animation.Animator: void setStartDelay(long)>($l8);

        $l9 = l0 + l1;

        $l10 = l2 - $l9;

        virtualinvoke r3.<android.animation.Animator: android.animation.Animator setDuration(long)>($l10);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label1:
        return;
    }

android.support.design.transformation.FabTransformationBehavior$1
<android.support.design.transformation.FabTransformationBehavior$1: boolean val$expanded>
<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$child>
<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$dependency>
<android.support.design.transformation.FabTransformationBehavior$1: android.support.design.transformation.FabTransformationBehavior this$0>
    void <init>(android.support.design.transformation.FabTransformationBehavior, boolean, android.view.View, android.view.View)
    {
        android.support.design.transformation.FabTransformationBehavior$1 r0;
        android.support.design.transformation.FabTransformationBehavior r1;
        boolean z0;
        android.view.View r2, r3;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$1;

        r1 := @parameter0: android.support.design.transformation.FabTransformationBehavior;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.view.View;

        r3 := @parameter3: android.view.View;

        r0.<android.support.design.transformation.FabTransformationBehavior$1: android.support.design.transformation.FabTransformationBehavior this$0> = r1;

        r0.<android.support.design.transformation.FabTransformationBehavior$1: boolean val$expanded> = z0;

        r0.<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$child> = r2;

        r0.<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$dependency> = r3;

        specialinvoke r0.<android.animation.AnimatorListenerAdapter: void <init>()>();

        return;
    }

    public void onAnimationStart(android.animation.Animator)
    {
        android.support.design.transformation.FabTransformationBehavior$1 r0;
        android.animation.Animator r1;
        boolean $z0;
        android.view.View $r2, $r3, $r4;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$1;

        r1 := @parameter0: android.animation.Animator;

        $z0 = r0.<android.support.design.transformation.FabTransformationBehavior$1: boolean val$expanded>;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$child>;

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(0);

        $r3 = r0.<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$dependency>;

        virtualinvoke $r3.<android.view.View: void setAlpha(float)>(0.0F);

        $r4 = r0.<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$dependency>;

        virtualinvoke $r4.<android.view.View: void setVisibility(int)>(4);

     label1:
        return;
    }

    public void onAnimationEnd(android.animation.Animator)
    {
        android.support.design.transformation.FabTransformationBehavior$1 r0;
        android.animation.Animator r1;
        boolean $z0;
        android.view.View $r2, $r3, $r4;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$1;

        r1 := @parameter0: android.animation.Animator;

        $z0 = r0.<android.support.design.transformation.FabTransformationBehavior$1: boolean val$expanded>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$child>;

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(4);

        $r3 = r0.<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$dependency>;

        virtualinvoke $r3.<android.view.View: void setAlpha(float)>(1.0F);

        $r4 = r0.<android.support.design.transformation.FabTransformationBehavior$1: android.view.View val$dependency>;

        virtualinvoke $r4.<android.view.View: void setVisibility(int)>(0);

     label1:
        return;
    }

android.support.design.transformation.FabTransformationBehavior$2
<android.support.design.transformation.FabTransformationBehavior$2: android.view.View val$child>
<android.support.design.transformation.FabTransformationBehavior$2: android.support.design.transformation.FabTransformationBehavior this$0>
    void <init>(android.support.design.transformation.FabTransformationBehavior, android.view.View)
    {
        android.support.design.transformation.FabTransformationBehavior$2 r0;
        android.support.design.transformation.FabTransformationBehavior r1;
        android.view.View r2;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$2;

        r1 := @parameter0: android.support.design.transformation.FabTransformationBehavior;

        r2 := @parameter1: android.view.View;

        r0.<android.support.design.transformation.FabTransformationBehavior$2: android.support.design.transformation.FabTransformationBehavior this$0> = r1;

        r0.<android.support.design.transformation.FabTransformationBehavior$2: android.view.View val$child> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onAnimationUpdate(android.animation.ValueAnimator)
    {
        android.support.design.transformation.FabTransformationBehavior$2 r0;
        android.animation.ValueAnimator r1;
        android.view.View $r2;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$2;

        r1 := @parameter0: android.animation.ValueAnimator;

        $r2 = r0.<android.support.design.transformation.FabTransformationBehavior$2: android.view.View val$child>;

        virtualinvoke $r2.<android.view.View: void invalidate()>();

        return;
    }

android.support.design.transformation.FabTransformationBehavior$3
<android.support.design.transformation.FabTransformationBehavior$3: android.support.design.circularreveal.CircularRevealWidget val$circularRevealChild>
<android.support.design.transformation.FabTransformationBehavior$3: android.graphics.drawable.Drawable val$icon>
<android.support.design.transformation.FabTransformationBehavior$3: android.support.design.transformation.FabTransformationBehavior this$0>
    void <init>(android.support.design.transformation.FabTransformationBehavior, android.support.design.circularreveal.CircularRevealWidget, android.graphics.drawable.Drawable)
    {
        android.support.design.transformation.FabTransformationBehavior$3 r0;
        android.support.design.transformation.FabTransformationBehavior r1;
        android.support.design.circularreveal.CircularRevealWidget r2;
        android.graphics.drawable.Drawable r3;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$3;

        r1 := @parameter0: android.support.design.transformation.FabTransformationBehavior;

        r2 := @parameter1: android.support.design.circularreveal.CircularRevealWidget;

        r3 := @parameter2: android.graphics.drawable.Drawable;

        r0.<android.support.design.transformation.FabTransformationBehavior$3: android.support.design.transformation.FabTransformationBehavior this$0> = r1;

        r0.<android.support.design.transformation.FabTransformationBehavior$3: android.support.design.circularreveal.CircularRevealWidget val$circularRevealChild> = r2;

        r0.<android.support.design.transformation.FabTransformationBehavior$3: android.graphics.drawable.Drawable val$icon> = r3;

        specialinvoke r0.<android.animation.AnimatorListenerAdapter: void <init>()>();

        return;
    }

    public void onAnimationStart(android.animation.Animator)
    {
        android.support.design.transformation.FabTransformationBehavior$3 r0;
        android.animation.Animator r1;
        android.graphics.drawable.Drawable $r2;
        android.support.design.circularreveal.CircularRevealWidget $r3;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$3;

        r1 := @parameter0: android.animation.Animator;

        $r3 = r0.<android.support.design.transformation.FabTransformationBehavior$3: android.support.design.circularreveal.CircularRevealWidget val$circularRevealChild>;

        $r2 = r0.<android.support.design.transformation.FabTransformationBehavior$3: android.graphics.drawable.Drawable val$icon>;

        interfaceinvoke $r3.<android.support.design.circularreveal.CircularRevealWidget: void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public void onAnimationEnd(android.animation.Animator)
    {
        android.support.design.transformation.FabTransformationBehavior$3 r0;
        android.animation.Animator r1;
        android.support.design.circularreveal.CircularRevealWidget $r2;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$3;

        r1 := @parameter0: android.animation.Animator;

        $r2 = r0.<android.support.design.transformation.FabTransformationBehavior$3: android.support.design.circularreveal.CircularRevealWidget val$circularRevealChild>;

        interfaceinvoke $r2.<android.support.design.circularreveal.CircularRevealWidget: void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)>(null);

        return;
    }

android.support.design.transformation.FabTransformationBehavior$4
<android.support.design.transformation.FabTransformationBehavior$4: android.support.design.circularreveal.CircularRevealWidget val$circularRevealChild>
<android.support.design.transformation.FabTransformationBehavior$4: android.support.design.transformation.FabTransformationBehavior this$0>
    void <init>(android.support.design.transformation.FabTransformationBehavior, android.support.design.circularreveal.CircularRevealWidget)
    {
        android.support.design.transformation.FabTransformationBehavior$4 r0;
        android.support.design.transformation.FabTransformationBehavior r1;
        android.support.design.circularreveal.CircularRevealWidget r2;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$4;

        r1 := @parameter0: android.support.design.transformation.FabTransformationBehavior;

        r2 := @parameter1: android.support.design.circularreveal.CircularRevealWidget;

        r0.<android.support.design.transformation.FabTransformationBehavior$4: android.support.design.transformation.FabTransformationBehavior this$0> = r1;

        r0.<android.support.design.transformation.FabTransformationBehavior$4: android.support.design.circularreveal.CircularRevealWidget val$circularRevealChild> = r2;

        specialinvoke r0.<android.animation.AnimatorListenerAdapter: void <init>()>();

        return;
    }

    public void onAnimationEnd(android.animation.Animator)
    {
        android.support.design.transformation.FabTransformationBehavior$4 r0;
        android.animation.Animator r1;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo r2;
        android.support.design.circularreveal.CircularRevealWidget $r3, $r4;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$4;

        r1 := @parameter0: android.animation.Animator;

        $r3 = r0.<android.support.design.transformation.FabTransformationBehavior$4: android.support.design.circularreveal.CircularRevealWidget val$circularRevealChild>;

        r2 = interfaceinvoke $r3.<android.support.design.circularreveal.CircularRevealWidget: android.support.design.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()>();

        r2.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius> = 3.4028235E38F;

        $r4 = r0.<android.support.design.transformation.FabTransformationBehavior$4: android.support.design.circularreveal.CircularRevealWidget val$circularRevealChild>;

        interfaceinvoke $r4.<android.support.design.circularreveal.CircularRevealWidget: void setRevealInfo(android.support.design.circularreveal.CircularRevealWidget$RevealInfo)>(r2);

        return;
    }

android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec
<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.MotionSpec timings>
<android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec: android.support.design.animation.Positioning positioning>
    protected void <init>()
    {
        android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec r0;

        r0 := @this: android.support.design.transformation.FabTransformationBehavior$FabTransformationSpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

