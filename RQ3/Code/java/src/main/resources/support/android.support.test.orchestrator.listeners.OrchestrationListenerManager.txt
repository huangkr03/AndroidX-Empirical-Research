android.support.test.orchestrator.listeners.OrchestrationListenerManager
<android.support.test.orchestrator.listeners.OrchestrationListenerManager: android.app.Instrumentation instrumentation>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager: android.support.test.orchestrator.junit.ParcelableDescription lastDescription>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager: java.util.List listeners>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager: boolean markTerminationAsFailure>
    public void <init>(android.app.Instrumentation)
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r0;
        android.app.Instrumentation $r1;
        java.util.ArrayList $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        $r1 := @parameter0: android.app.Instrumentation;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: java.util.List listeners> = $r2;

        $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: boolean markTerminationAsFailure> = 0;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Instrumentation must not be null");

        throw $r3;

     label1:
        $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: android.app.Instrumentation instrumentation> = $r1;

        return;
    }

    private void cacheStatus(android.os.Bundle)
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r0;
        android.os.Bundle $r1;
        int[] $r2;
        android.support.test.orchestrator.junit.ParcelableDescription $r3;
        java.lang.String $r4;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent $r5;
        int $i0;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        $r1 := @parameter0: android.os.Bundle;

        $r3 = staticinvoke <android.support.test.orchestrator.junit.BundleJUnitUtils: android.support.test.orchestrator.junit.ParcelableDescription getDescription(android.os.Bundle)>($r1);

        if $r3 == null goto label1;

        $r3 = staticinvoke <android.support.test.orchestrator.junit.BundleJUnitUtils: android.support.test.orchestrator.junit.ParcelableDescription getDescription(android.os.Bundle)>($r1);

        $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: android.support.test.orchestrator.junit.ParcelableDescription lastDescription> = $r3;

     label1:
        $r4 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("TestEvent");

        $r5 = staticinvoke <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent valueOf(java.lang.String)>($r4);

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>;

        $i0 = virtualinvoke $r5.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label2;
        };

     label2:
        return;

     label3:
        $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: boolean markTerminationAsFailure> = 1;

        return;

     label4:
        $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: boolean markTerminationAsFailure> = 0;

        return;

     label5:
        $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: boolean markTerminationAsFailure> = 0;

        return;
    }

    private void handleNotificationForListener(android.support.test.orchestrator.listeners.OrchestrationRunListener, android.os.Bundle)
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r0;
        android.support.test.orchestrator.listeners.OrchestrationRunListener $r1;
        android.os.Bundle $r2;
        java.lang.String $r3;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent $r4;
        int[] $r5;
        int $i0;
        android.support.test.orchestrator.junit.ParcelableDescription $r6;
        android.support.test.orchestrator.junit.ParcelableFailure $r7;
        android.support.test.orchestrator.junit.ParcelableResult $r8;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.OrchestrationRunListener;

        $r2 := @parameter1: android.os.Bundle;

        $r3 = virtualinvoke $r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>("TestEvent");

        $r4 = staticinvoke <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent valueOf(java.lang.String)>($r3);

        $r5 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>;

        $i0 = virtualinvoke $r4.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label8;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label1;
        };

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ListenerManager", "Unknown notification type");

        return;

     label2:
        $r6 = staticinvoke <android.support.test.orchestrator.junit.BundleJUnitUtils: android.support.test.orchestrator.junit.ParcelableDescription getDescription(android.os.Bundle)>($r2);

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void testRunStarted(android.support.test.orchestrator.junit.ParcelableDescription)>($r6);

        return;

     label3:
        $r6 = staticinvoke <android.support.test.orchestrator.junit.BundleJUnitUtils: android.support.test.orchestrator.junit.ParcelableDescription getDescription(android.os.Bundle)>($r2);

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void testStarted(android.support.test.orchestrator.junit.ParcelableDescription)>($r6);

        return;

     label4:
        $r6 = staticinvoke <android.support.test.orchestrator.junit.BundleJUnitUtils: android.support.test.orchestrator.junit.ParcelableDescription getDescription(android.os.Bundle)>($r2);

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void testFinished(android.support.test.orchestrator.junit.ParcelableDescription)>($r6);

        return;

     label5:
        $r7 = staticinvoke <android.support.test.orchestrator.junit.BundleJUnitUtils: android.support.test.orchestrator.junit.ParcelableFailure getFailure(android.os.Bundle)>($r2);

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void testFailure(android.support.test.orchestrator.junit.ParcelableFailure)>($r7);

        return;

     label6:
        $r7 = staticinvoke <android.support.test.orchestrator.junit.BundleJUnitUtils: android.support.test.orchestrator.junit.ParcelableFailure getFailure(android.os.Bundle)>($r2);

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void testAssumptionFailure(android.support.test.orchestrator.junit.ParcelableFailure)>($r7);

        return;

     label7:
        $r6 = staticinvoke <android.support.test.orchestrator.junit.BundleJUnitUtils: android.support.test.orchestrator.junit.ParcelableDescription getDescription(android.os.Bundle)>($r2);

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void testIgnored(android.support.test.orchestrator.junit.ParcelableDescription)>($r6);

        return;

     label8:
        $r8 = staticinvoke <android.support.test.orchestrator.junit.BundleJUnitUtils: android.support.test.orchestrator.junit.ParcelableResult getResult(android.os.Bundle)>($r2);

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void testRunFinished(android.support.test.orchestrator.junit.ParcelableResult)>($r8);

        return;
    }

    public void addListener(android.support.test.orchestrator.listeners.OrchestrationRunListener)
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r0;
        android.support.test.orchestrator.listeners.OrchestrationRunListener $r1;
        android.app.Instrumentation $r2;
        java.util.List $r3;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.OrchestrationRunListener;

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: android.app.Instrumentation instrumentation>;

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void setInstrumentation(android.app.Instrumentation)>($r2);

        $r3 = $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: java.util.List listeners>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void handleNotification(android.os.Bundle)
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r0;
        android.os.Bundle $r1;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        android.support.test.orchestrator.listeners.OrchestrationRunListener $r7;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r1.<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>($r3);

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void cacheStatus(android.os.Bundle)>($r1);

        $r4 = $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: java.util.List listeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.support.test.orchestrator.listeners.OrchestrationRunListener) $r6;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void handleNotificationForListener(android.support.test.orchestrator.listeners.OrchestrationRunListener,android.os.Bundle)>($r7, $r1);

        goto label1;

     label2:
        return;
    }

    public void orchestrationRunStarted(int)
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r0;
        int $i0;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.support.test.orchestrator.listeners.OrchestrationRunListener $r4;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: java.util.List listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.support.test.orchestrator.listeners.OrchestrationRunListener) $r3;

        virtualinvoke $r4.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void orchestrationRunStarted(int)>($i0);

        goto label1;

     label2:
        return;
    }

    public void testProcessFinished(java.lang.String)
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r0;
        java.lang.String $r1, $r9;
        android.support.test.orchestrator.junit.ParcelableDescription $r2;
        java.lang.Throwable $r3;
        boolean $z0;
        java.util.List $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        android.support.test.orchestrator.listeners.OrchestrationRunListener $r7;
        android.support.test.orchestrator.junit.ParcelableFailure $r8;
        int $i0;
        java.lang.StringBuilder $r10;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        $r1 := @parameter0: java.lang.String;

        $z0 = $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: boolean markTerminationAsFailure>;

        if $z0 == 0 goto label2;

        $r4 = $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: java.util.List listeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.support.test.orchestrator.listeners.OrchestrationRunListener) $r6;

        $r8 = new android.support.test.orchestrator.junit.ParcelableFailure;

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: android.support.test.orchestrator.junit.ParcelableDescription lastDescription>;

        $r3 = new java.lang.Throwable;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i0 = $i0 + 56;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test instrumentation process crashed. Check ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for details");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.Throwable: void <init>(java.lang.String)>($r9);

        specialinvoke $r8.<android.support.test.orchestrator.junit.ParcelableFailure: void <init>(android.support.test.orchestrator.junit.ParcelableDescription,java.lang.Throwable)>($r2, $r3);

        virtualinvoke $r7.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void testFailure(android.support.test.orchestrator.junit.ParcelableFailure)>($r8);

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: android.support.test.orchestrator.junit.ParcelableDescription lastDescription>;

        virtualinvoke $r7.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void testFinished(android.support.test.orchestrator.junit.ParcelableDescription)>($r2);

        goto label1;

     label2:
        return;
    }

    public void testProcessStarted(android.support.test.orchestrator.junit.ParcelableDescription)
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r0;
        android.support.test.orchestrator.junit.ParcelableDescription $r1;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        $r1 := @parameter0: android.support.test.orchestrator.junit.ParcelableDescription;

        $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: android.support.test.orchestrator.junit.ParcelableDescription lastDescription> = $r1;

        $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: boolean markTerminationAsFailure> = 1;

        return;
    }

android.support.test.orchestrator.listeners.OrchestrationListenerManager$1
<android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>
    static void <clinit>()
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent[] $r0;
        int $i0;
        int[] $r1;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent $r2;
        java.lang.Throwable $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = staticinvoke <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent> = $r1;

        $r1 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>;

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_RUN_STARTED>;

     label01:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: int ordinal()>();

     label02:
        $r1[$i0] = 1;

     label03:
        $r1 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>;

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_FAILURE>;

     label04:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: int ordinal()>();

     label05:
        $r1[$i0] = 2;

     label06:
        $r1 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>;

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_RUN_FINISHED>;

     label07:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: int ordinal()>();

     label08:
        $r1[$i0] = 3;

     label09:
        $r1 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>;

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_STARTED>;

     label10:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: int ordinal()>();

     label11:
        $r1[$i0] = 4;

     label12:
        $r1 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>;

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_FINISHED>;

     label13:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: int ordinal()>();

     label14:
        $r1[$i0] = 5;

     label15:
        $r1 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>;

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_ASSUMPTION_FAILURE>;

     label16:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: int ordinal()>();

     label17:
        $r1[$i0] = 6;

     label18:
        $r1 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$OrchestrationListenerManager$TestEvent>;

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_IGNORED>;

     label19:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: int ordinal()>();

     label20:
        $r1[$i0] = 7;

        return;

     label21:
        $r3 := @caughtexception;

        return;

     label22:
        $r4 := @caughtexception;

        goto label18;

     label23:
        $r5 := @caughtexception;

        goto label15;

     label24:
        $r6 := @caughtexception;

        goto label12;

     label25:
        $r7 := @caughtexception;

        goto label09;

     label26:
        $r8 := @caughtexception;

        goto label06;

     label27:
        $r9 := @caughtexception;

        goto label03;

        catch java.lang.NoSuchFieldError from label01 to label02 with label27;
        catch java.lang.NoSuchFieldError from label04 to label05 with label26;
        catch java.lang.NoSuchFieldError from label07 to label08 with label25;
        catch java.lang.NoSuchFieldError from label10 to label11 with label24;
        catch java.lang.NoSuchFieldError from label13 to label14 with label23;
        catch java.lang.NoSuchFieldError from label16 to label17 with label22;
        catch java.lang.NoSuchFieldError from label19 to label20 with label21;
    }

android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent
<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent[] $VALUES>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_ASSUMPTION_FAILURE>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_FAILURE>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_FINISHED>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_IGNORED>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_RUN_FINISHED>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_RUN_STARTED>
<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_STARTED>
    static void <clinit>()
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent $r0;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent[] $r1;

        $r0 = new android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: void <init>(java.lang.String,int)>("TEST_RUN_STARTED", 0);

        <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_RUN_STARTED> = $r0;

        $r0 = new android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: void <init>(java.lang.String,int)>("TEST_RUN_FINISHED", 1);

        <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_RUN_FINISHED> = $r0;

        $r0 = new android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: void <init>(java.lang.String,int)>("TEST_STARTED", 2);

        <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_STARTED> = $r0;

        $r0 = new android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: void <init>(java.lang.String,int)>("TEST_FINISHED", 3);

        <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_FINISHED> = $r0;

        $r0 = new android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: void <init>(java.lang.String,int)>("TEST_FAILURE", 4);

        <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_FAILURE> = $r0;

        $r0 = new android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: void <init>(java.lang.String,int)>("TEST_ASSUMPTION_FAILURE", 5);

        <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_ASSUMPTION_FAILURE> = $r0;

        $r0 = new android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: void <init>(java.lang.String,int)>("TEST_IGNORED", 6);

        <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_IGNORED> = $r0;

        $r1 = newarray (android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent)[7];

        $r0 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_RUN_STARTED>;

        $r1[0] = $r0;

        $r0 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_RUN_FINISHED>;

        $r1[1] = $r0;

        $r0 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_STARTED>;

        $r1[2] = $r0;

        $r0 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_FINISHED>;

        $r1[3] = $r0;

        $r0 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_FAILURE>;

        $r1[4] = $r0;

        $r0 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_ASSUMPTION_FAILURE>;

        $r1[5] = $r0;

        $r0 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent TEST_IGNORED>;

        $r1[6] = $r0;

        <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent[] $VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/support/test/orchestrator/listeners/OrchestrationListenerManager$TestEvent;", $r0);

        $r2 = (android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent) $r1;

        return $r2;
    }

    public static android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent[] values()
    {
        java.lang.Object $r0;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent[] $r1;

        $r1 = <android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent: android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (android.support.test.orchestrator.listeners.OrchestrationListenerManager$TestEvent[]) $r0;

        return $r1;
    }

