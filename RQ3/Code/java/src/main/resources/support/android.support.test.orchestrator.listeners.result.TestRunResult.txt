android.support.test.orchestrator.listeners.result.TestRunResult
<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String LOG_TAG>
<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mAggregateMetrics>
<android.support.test.orchestrator.listeners.result.TestRunResult: long mElapsedTime>
<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mIsCountDirty>
<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mIsRunComplete>
<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String mRunFailureError>
<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mRunMetrics>
<android.support.test.orchestrator.listeners.result.TestRunResult: int[] mStatusCounts>
<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mTestResults>
<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String mTestRunName>
    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "Landroid/support/test/orchestrator/listeners/result/TestRunResult;";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String LOG_TAG> = $r0;

        return;
    }

    public void <init>()
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus[] $r1;
        int $i0;
        int[] $r2;
        java.util.LinkedHashMap r3;
        java.util.HashMap r4;
        java.util.Map r5;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r3 = new java.util.LinkedHashMap;

        specialinvoke r3.<java.util.LinkedHashMap: void <init>()>();

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mTestResults> = r3;

        r4 = new java.util.HashMap;

        specialinvoke r4.<java.util.HashMap: void <init>()>();

        r5 = (java.util.Map) r4;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mRunMetrics> = r5;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mIsRunComplete> = 0;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: long mElapsedTime> = 0L;

        $r1 = staticinvoke <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus[] values()>();

        $i0 = lengthof $r1;

        $r2 = newarray (int)[$i0];

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: int[] mStatusCounts> = $r2;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mIsCountDirty> = 1;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String mRunFailureError> = null;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mAggregateMetrics> = 0;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String mTestRunName> = "not started";

        return;
    }

    private void addTestResult(android.support.test.orchestrator.listeners.result.TestIdentifier, android.support.test.orchestrator.listeners.result.TestResult)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r1;
        android.support.test.orchestrator.listeners.result.TestResult $r2;
        java.util.Map $r3;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r2 := @parameter1: android.support.test.orchestrator.listeners.result.TestResult;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mIsCountDirty> = 1;

        $r3 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mTestResults>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    private java.lang.String combineValues(java.lang.String, java.lang.String)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        java.lang.String $r1, $r2, $r5;
        long $l0, $l1;
        java.lang.Long $r3, $r4;
        java.lang.Throwable $r6, $r9;
        double $d0, $d1;
        java.lang.Double $r7, $r8;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label11;

     label01:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

     label02:
        $l0 = $l1 + $l0;

     label03:
        $r5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

     label04:
        return $r5;

     label05:
        $r6 := @caughtexception;

     label06:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

     label07:
        $d0 = $d1 + $d0;

     label08:
        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

     label09:
        return $r1;

     label10:
        $r9 := @caughtexception;

     label11:
        return $r2;

        catch java.lang.NumberFormatException from label01 to label02 with label05;
        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.lang.NumberFormatException from label06 to label07 with label10;
        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    private void updateTestResult(android.support.test.orchestrator.listeners.result.TestIdentifier, android.support.test.orchestrator.listeners.result.TestResult$TestStatus, java.lang.String)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r1;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r2;
        java.lang.String $r3, $r7, $r9;
        java.util.Map $r4;
        java.lang.Object $r5;
        android.support.test.orchestrator.listeners.result.TestResult $r6;
        java.lang.Object[] $r8;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r2 := @parameter1: android.support.test.orchestrator.listeners.result.TestResult$TestStatus;

        $r3 := @parameter2: java.lang.String;

        $r4 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mTestResults>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (android.support.test.orchestrator.listeners.result.TestResult) $r5;

        if $r6 != null goto label1;

        $r7 = <android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String LOG_TAG>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r1;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("received test event without test start for %s", $r8);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r7, $r9);

        $r6 = new android.support.test.orchestrator.listeners.result.TestResult;

        specialinvoke $r6.<android.support.test.orchestrator.listeners.result.TestResult: void <init>()>();

     label1:
        virtualinvoke $r6.<android.support.test.orchestrator.listeners.result.TestResult: android.support.test.orchestrator.listeners.result.TestResult setStatus(android.support.test.orchestrator.listeners.result.TestResult$TestStatus)>($r2);

        virtualinvoke $r6.<android.support.test.orchestrator.listeners.result.TestResult: void setStackTrace(java.lang.String)>($r3);

        specialinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: void addTestResult(android.support.test.orchestrator.listeners.result.TestIdentifier,android.support.test.orchestrator.listeners.result.TestResult)>($r1, $r6);

        return;
    }

    public java.lang.String getName()
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        java.lang.String r1;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        r1 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String mTestRunName>;

        return r1;
    }

    public int getNumAllFailedTests()
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        int $i0;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r1;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus FAILURE>;

        $i0 = virtualinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: int getNumTestsInState(android.support.test.orchestrator.listeners.result.TestResult$TestStatus)>($r1);

        return $i0;
    }

    public int getNumTests()
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        int $i0;
        java.util.Map $r1;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mTestResults>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public int getNumTestsInState(android.support.test.orchestrator.listeners.result.TestResult$TestStatus)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r1, $r8;
        int[] $r2;
        boolean $z0;
        int $i0, $i1;
        java.util.Map $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        android.support.test.orchestrator.listeners.result.TestResult $r7;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.result.TestResult$TestStatus;

        $z0 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mIsCountDirty>;

        if $z0 == 0 goto label5;

        $i0 = 0;

     label1:
        $r2 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: int[] mStatusCounts>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r2 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: int[] mStatusCounts>;

        $r2[$i0] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mTestResults>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.support.test.orchestrator.listeners.result.TestResult) $r6;

        $r2 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: int[] mStatusCounts>;

        $r8 = virtualinvoke $r7.<android.support.test.orchestrator.listeners.result.TestResult: android.support.test.orchestrator.listeners.result.TestResult$TestStatus getStatus()>();

        $i0 = virtualinvoke $r8.<android.support.test.orchestrator.listeners.result.TestResult$TestStatus: int ordinal()>();

        $i1 = $r2[$i0];

        $i1 = $i1 + 1;

        $r2[$i0] = $i1;

        goto label3;

     label4:
        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mIsCountDirty> = 0;

     label5:
        $r2 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: int[] mStatusCounts>;

        $i0 = virtualinvoke $r1.<android.support.test.orchestrator.listeners.result.TestResult$TestStatus: int ordinal()>();

        $i0 = $r2[$i0];

        return $i0;
    }

    public java.util.Map getTestResults()
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        java.util.Map r1;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        r1 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mTestResults>;

        return r1;
    }

    public java.lang.String getTextSummary()
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        java.lang.StringBuilder $r1;
        java.lang.Object[] $r2;
        int $i0, $i1, $i2;
        java.lang.Integer $r3;
        java.lang.String $r4;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus[] $r5;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r6;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = newarray (java.lang.Object)[1];

        $i0 = virtualinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: int getNumTests()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Total tests %d, ", $r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = staticinvoke <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus[] values()>();

        $i0 = lengthof $r5;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r6 = $r5[$i1];

        $i2 = virtualinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: int getNumTestsInState(android.support.test.orchestrator.listeners.result.TestResult$TestStatus)>($r6);

        if $i2 <= 0 goto label2;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke $r6.<android.support.test.orchestrator.listeners.result.TestResult$TestStatus: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r2[0] = $r4;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %d, ", $r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void testAssumptionFailure(android.support.test.orchestrator.listeners.result.TestIdentifier, java.lang.String)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r1;
        java.lang.String $r2;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r3;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r2 := @parameter1: java.lang.String;

        $r3 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus ASSUMPTION_FAILURE>;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: void updateTestResult(android.support.test.orchestrator.listeners.result.TestIdentifier,android.support.test.orchestrator.listeners.result.TestResult$TestStatus,java.lang.String)>($r1, $r3, $r2);

        return;
    }

    public void testEnded(android.support.test.orchestrator.listeners.result.TestIdentifier, java.util.Map)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r1;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        android.support.test.orchestrator.listeners.result.TestResult $r5;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r6, $r7;
        boolean $z0;
        long $l0;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r2 := @parameter1: java.util.Map;

        $r3 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mTestResults>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (android.support.test.orchestrator.listeners.result.TestResult) $r4;

        if $r5 != null goto label1;

        $r5 = new android.support.test.orchestrator.listeners.result.TestResult;

        specialinvoke $r5.<android.support.test.orchestrator.listeners.result.TestResult: void <init>()>();

     label1:
        $r6 = virtualinvoke $r5.<android.support.test.orchestrator.listeners.result.TestResult: android.support.test.orchestrator.listeners.result.TestResult$TestStatus getStatus()>();

        $r7 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus INCOMPLETE>;

        $z0 = virtualinvoke $r6.<android.support.test.orchestrator.listeners.result.TestResult$TestStatus: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        $r6 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus PASSED>;

        virtualinvoke $r5.<android.support.test.orchestrator.listeners.result.TestResult: android.support.test.orchestrator.listeners.result.TestResult setStatus(android.support.test.orchestrator.listeners.result.TestResult$TestStatus)>($r6);

     label2:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r5.<android.support.test.orchestrator.listeners.result.TestResult: void setEndTime(long)>($l0);

        virtualinvoke $r5.<android.support.test.orchestrator.listeners.result.TestResult: void setMetrics(java.util.Map)>($r2);

        specialinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: void addTestResult(android.support.test.orchestrator.listeners.result.TestIdentifier,android.support.test.orchestrator.listeners.result.TestResult)>($r1, $r5);

        return;
    }

    public void testFailed(android.support.test.orchestrator.listeners.result.TestIdentifier, java.lang.String)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r1;
        java.lang.String $r2;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r3;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r2 := @parameter1: java.lang.String;

        $r3 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus FAILURE>;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: void updateTestResult(android.support.test.orchestrator.listeners.result.TestIdentifier,android.support.test.orchestrator.listeners.result.TestResult$TestStatus,java.lang.String)>($r1, $r3, $r2);

        return;
    }

    public void testIgnored(android.support.test.orchestrator.listeners.result.TestIdentifier)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r1;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r2;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r2 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus IGNORED>;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: void updateTestResult(android.support.test.orchestrator.listeners.result.TestIdentifier,android.support.test.orchestrator.listeners.result.TestResult$TestStatus,java.lang.String)>($r1, $r2, null);

        return;
    }

    public void testRunEnded(long, java.util.Map)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        long $l0, $l1;
        java.util.Map $r1, $r8;
        boolean $z0;
        java.util.Set $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.util.Map$Entry $r5;
        java.lang.String $r6, $r7;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.Map;

        $z0 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mAggregateMetrics>;

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r1 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mRunMetrics>;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.String) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.lang.String) $r4;

        $r6 = specialinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String combineValues(java.lang.String,java.lang.String)>($r6, $r7);

        $r1 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mRunMetrics>;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r4;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

        goto label1;

     label2:
        $r8 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map mRunMetrics>;

        interfaceinvoke $r8.<java.util.Map: void putAll(java.util.Map)>($r1);

     label3:
        $l1 = $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: long mElapsedTime>;

        $l0 = $l1 + $l0;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: long mElapsedTime> = $l0;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mIsRunComplete> = 1;

        return;
    }

    public void testRunStarted(java.lang.String, int)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String mTestRunName> = $r1;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: boolean mIsRunComplete> = 0;

        $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String mRunFailureError> = null;

        return;
    }

    public void testStarted(android.support.test.orchestrator.listeners.result.TestIdentifier)
    {
        android.support.test.orchestrator.listeners.result.TestRunResult $r0;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r1;
        android.support.test.orchestrator.listeners.result.TestResult $r2;

        $r0 := @this: android.support.test.orchestrator.listeners.result.TestRunResult;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r2 = new android.support.test.orchestrator.listeners.result.TestResult;

        specialinvoke $r2.<android.support.test.orchestrator.listeners.result.TestResult: void <init>()>();

        specialinvoke $r0.<android.support.test.orchestrator.listeners.result.TestRunResult: void addTestResult(android.support.test.orchestrator.listeners.result.TestIdentifier,android.support.test.orchestrator.listeners.result.TestResult)>($r1, $r2);

        return;
    }

