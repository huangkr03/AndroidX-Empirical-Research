android.support.design.circularreveal.CircularRevealHelper
<android.support.design.circularreveal.CircularRevealHelper: boolean DEBUG>
<android.support.design.circularreveal.CircularRevealHelper: int BITMAP_SHADER>
<android.support.design.circularreveal.CircularRevealHelper: int CLIP_PATH>
<android.support.design.circularreveal.CircularRevealHelper: int REVEAL_ANIMATOR>
<android.support.design.circularreveal.CircularRevealHelper: int STRATEGY>
<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealHelper$Delegate delegate>
<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>
<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Path revealPath>
<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint revealPaint>
<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>
<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>
<android.support.design.circularreveal.CircularRevealHelper: android.graphics.drawable.Drawable overlayDrawable>
<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint debugPaint>
<android.support.design.circularreveal.CircularRevealHelper: boolean buildingCircularRevealCache>
<android.support.design.circularreveal.CircularRevealHelper: boolean hasCircularRevealCache>
    public void <init>(android.support.design.circularreveal.CircularRevealHelper$Delegate)
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.support.design.circularreveal.CircularRevealHelper$Delegate r1;
        android.view.View $r2, $r3;
        android.graphics.Path $r4;
        android.graphics.Paint $r5, $r6, $r7;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        r1 := @parameter0: android.support.design.circularreveal.CircularRevealHelper$Delegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealHelper$Delegate delegate> = r1;

        $r2 = (android.view.View) r1;

        r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view> = $r2;

        $r3 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        virtualinvoke $r3.<android.view.View: void setWillNotDraw(boolean)>(0);

        $r4 = new android.graphics.Path;

        specialinvoke $r4.<android.graphics.Path: void <init>()>();

        r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Path revealPath> = $r4;

        $r5 = new android.graphics.Paint;

        specialinvoke $r5.<android.graphics.Paint: void <init>(int)>(7);

        r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint revealPaint> = $r5;

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>(int)>(1);

        r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint> = $r6;

        $r7 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>;

        virtualinvoke $r7.<android.graphics.Paint: void setColor(int)>(0);

        return;
    }

    public void buildCircularRevealCache()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.graphics.Canvas r1, $r14;
        int $i0, $i1, $i2, $i3, $i4;
        android.view.View $r2, $r3, $r9, $r10, $r11, $r12, $r15;
        android.graphics.BitmapShader $r4;
        android.graphics.Shader$TileMode $r5, $r6;
        android.graphics.Paint $r7;
        android.graphics.Bitmap$Config $r13;
        android.graphics.Bitmap r16;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $i0 = <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY>;

        if $i0 != 0 goto label3;

        r0.<android.support.design.circularreveal.CircularRevealHelper: boolean buildingCircularRevealCache> = 1;

        r0.<android.support.design.circularreveal.CircularRevealHelper: boolean hasCircularRevealCache> = 0;

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        virtualinvoke $r2.<android.view.View: void buildDrawingCache()>();

        $r3 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        r16 = virtualinvoke $r3.<android.view.View: android.graphics.Bitmap getDrawingCache()>();

        if r16 != null goto label1;

        $r9 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i1 = virtualinvoke $r9.<android.view.View: int getWidth()>();

        if $i1 == 0 goto label1;

        $r10 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i2 = virtualinvoke $r10.<android.view.View: int getHeight()>();

        if $i2 == 0 goto label1;

        $r11 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i3 = virtualinvoke $r11.<android.view.View: int getWidth()>();

        $r12 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i4 = virtualinvoke $r12.<android.view.View: int getHeight()>();

        $r13 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r16 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i3, $i4, $r13);

        $r14 = new android.graphics.Canvas;

        specialinvoke $r14.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r16);

        r1 = $r14;

        $r15 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        virtualinvoke $r15.<android.view.View: void draw(android.graphics.Canvas)>(r1);

     label1:
        if r16 == null goto label2;

        $r7 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint revealPaint>;

        $r4 = new android.graphics.BitmapShader;

        $r6 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        $r5 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r4.<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>(r16, $r6, $r5);

        virtualinvoke $r7.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r4);

     label2:
        r0.<android.support.design.circularreveal.CircularRevealHelper: boolean buildingCircularRevealCache> = 0;

        r0.<android.support.design.circularreveal.CircularRevealHelper: boolean hasCircularRevealCache> = 1;

     label3:
        return;
    }

    public void destroyCircularRevealCache()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        int $i0;
        android.view.View $r1, $r4;
        android.graphics.Paint $r2;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $i0 = <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY>;

        if $i0 != 0 goto label1;

        r0.<android.support.design.circularreveal.CircularRevealHelper: boolean hasCircularRevealCache> = 0;

        $r1 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        virtualinvoke $r1.<android.view.View: void destroyDrawingCache()>();

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint revealPaint>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(null);

        $r4 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        virtualinvoke $r4.<android.view.View: void invalidate()>();

     label1:
        return;
    }

    public void setRevealInfo(android.support.design.circularreveal.CircularRevealWidget$RevealInfo)
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo r1, $r2, $r3, $r4, $r5;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        r1 := @parameter0: android.support.design.circularreveal.CircularRevealWidget$RevealInfo;

        if r1 != null goto label1;

        r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo> = null;

        goto label4;

     label1:
        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        if $r2 != null goto label2;

        $r5 = new android.support.design.circularreveal.CircularRevealWidget$RevealInfo;

        specialinvoke $r5.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: void <init>(android.support.design.circularreveal.CircularRevealWidget$RevealInfo)>(r1);

        r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo> = $r5;

        goto label3;

     label2:
        $r3 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        virtualinvoke $r3.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: void set(android.support.design.circularreveal.CircularRevealWidget$RevealInfo)>(r1);

     label3:
        $f0 = r1.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

        $f1 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: float getDistanceToFurthestCorner(android.support.design.circularreveal.CircularRevealWidget$RevealInfo)>(r1);

        $z0 = staticinvoke <android.support.design.math.MathUtils: boolean geq(float,float,float)>($f0, $f1, 1.0E-4F);

        if $z0 == 0 goto label4;

        $r4 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $r4.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius> = 3.4028235E38F;

     label4:
        specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: void invalidateRevealInfo()>();

        return;
    }

    public android.support.design.circularreveal.CircularRevealWidget$RevealInfo getRevealInfo()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo r1, $r2, $r3, $r4;
        boolean $z0;
        float $f0;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = new android.support.design.circularreveal.CircularRevealWidget$RevealInfo;

        $r4 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        specialinvoke $r3.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: void <init>(android.support.design.circularreveal.CircularRevealWidget$RevealInfo)>($r4);

        r1 = $r3;

        $z0 = virtualinvoke r1.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: boolean isInvalid()>();

        if $z0 == 0 goto label2;

        $f0 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: float getDistanceToFurthestCorner(android.support.design.circularreveal.CircularRevealWidget$RevealInfo)>(r1);

        r1.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius> = $f0;

     label2:
        return r1;
    }

    public void setCircularRevealScrimColor(int)
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        int i0;
        android.graphics.Paint $r1;
        android.view.View $r2;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setColor(int)>(i0);

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        virtualinvoke $r2.<android.view.View: void invalidate()>();

        return;
    }

    public int getCircularRevealScrimColor()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.graphics.Paint $r1;
        int $i0;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $r1 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>;

        $i0 = virtualinvoke $r1.<android.graphics.Paint: int getColor()>();

        return $i0;
    }

    public android.graphics.drawable.Drawable getCircularRevealOverlayDrawable()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $r1 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.drawable.Drawable overlayDrawable>;

        return $r1;
    }

    public void setCircularRevealOverlayDrawable(android.graphics.drawable.Drawable)
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.graphics.drawable.Drawable r1;
        android.view.View $r2;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.drawable.Drawable overlayDrawable> = r1;

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        virtualinvoke $r2.<android.view.View: void invalidate()>();

        return;
    }

    private void invalidateRevealInfo()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        int $i0;
        android.graphics.Path $r1, $r7;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo $r2, $r3, $r4, $r5;
        android.graphics.Path$Direction $r6;
        float $f0, $f1, $f2;
        android.view.View $r8;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $i0 = <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY>;

        if $i0 != 1 goto label1;

        $r1 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Path revealPath>;

        virtualinvoke $r1.<android.graphics.Path: void rewind()>();

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        if $r2 == null goto label1;

        $r7 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Path revealPath>;

        $r3 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f2 = $r3.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerX>;

        $r4 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f1 = $r4.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerY>;

        $r5 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f0 = $r5.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

        $r6 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke $r7.<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>($f2, $f1, $f0, $r6);

     label1:
        $r8 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        virtualinvoke $r8.<android.view.View: void invalidate()>();

        return;
    }

    private float getDistanceToFurthestCorner(android.support.design.circularreveal.CircularRevealWidget$RevealInfo)
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo r1;
        android.view.View $r2, $r3;
        float $f0, $f1, $f2, $f3, $f4;
        int $i0, $i1;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        r1 := @parameter0: android.support.design.circularreveal.CircularRevealWidget$RevealInfo;

        $f0 = r1.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerX>;

        $f1 = r1.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerY>;

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i0 = virtualinvoke $r2.<android.view.View: int getWidth()>();

        $f2 = (float) $i0;

        $r3 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i1 = virtualinvoke $r3.<android.view.View: int getHeight()>();

        $f3 = (float) $i1;

        $f4 = staticinvoke <android.support.design.math.MathUtils: float distanceToFurthestCorner(float,float,float,float,float,float)>($f0, $f1, 0.0F, 0.0F, $f2, $f3);

        return $f4;
    }

    public void draw(android.graphics.Canvas)
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.graphics.Canvas r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1, $z2, $z4, $z5;
        android.support.design.circularreveal.CircularRevealHelper$Delegate $r2, $r6, $r11;
        android.view.View $r3, $r4, $r7, $r8, $r12, $r13;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        android.graphics.Paint $r5, $r9, $r14, $r18, $r22;
        android.graphics.Path $r10;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo $r15, $r16, $r17, $r19, $r20, $r21;
        java.lang.IllegalStateException $r23;
        java.lang.StringBuilder $r24, $r25, $r26;
        java.lang.String $r27;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        r1 := @parameter0: android.graphics.Canvas;

        $z0 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: boolean shouldDrawCircularReveal()>();

        if $z0 == 0 goto label6;

        $i3 = <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY>;

        tableswitch($i3)
        {
            case 0: goto label4;
            case 1: goto label2;
            case 2: goto label1;
            default: goto label5;
        };

     label1:
        $r6 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealHelper$Delegate delegate>;

        interfaceinvoke $r6.<android.support.design.circularreveal.CircularRevealHelper$Delegate: void actualDraw(android.graphics.Canvas)>(r1);

        $z2 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: boolean shouldDrawScrim()>();

        if $z2 == 0 goto label7;

        $r7 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i4 = virtualinvoke $r7.<android.view.View: int getWidth()>();

        $f2 = (float) $i4;

        $r8 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i5 = virtualinvoke $r8.<android.view.View: int getHeight()>();

        $f3 = (float) $i5;

        $r9 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, 0.0F, $f2, $f3, $r9);

        goto label7;

     label2:
        i0 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r10 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Path revealPath>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>($r10);

        $r11 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealHelper$Delegate delegate>;

        interfaceinvoke $r11.<android.support.design.circularreveal.CircularRevealHelper$Delegate: void actualDraw(android.graphics.Canvas)>(r1);

        $z4 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: boolean shouldDrawScrim()>();

        if $z4 == 0 goto label3;

        $r12 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i6 = virtualinvoke $r12.<android.view.View: int getWidth()>();

        $f4 = (float) $i6;

        $r13 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i7 = virtualinvoke $r13.<android.view.View: int getHeight()>();

        $f5 = (float) $i7;

        $r14 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, 0.0F, $f4, $f5, $r14);

     label3:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        goto label7;

     label4:
        $r15 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f8 = $r15.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerX>;

        $r16 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f7 = $r16.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerY>;

        $r17 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f6 = $r17.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

        $r18 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint revealPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f8, $f7, $f6, $r18);

        $z5 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: boolean shouldDrawScrim()>();

        if $z5 == 0 goto label7;

        $r19 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f11 = $r19.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerX>;

        $r20 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f10 = $r20.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerY>;

        $r21 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f9 = $r21.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

        $r22 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f11, $f10, $f9, $r22);

        goto label7;

     label5:
        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported strategy ");

        $i8 = <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY>;

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label6:
        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealHelper$Delegate delegate>;

        interfaceinvoke $r2.<android.support.design.circularreveal.CircularRevealHelper$Delegate: void actualDraw(android.graphics.Canvas)>(r1);

        $z1 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: boolean shouldDrawScrim()>();

        if $z1 == 0 goto label7;

        $r3 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i1 = virtualinvoke $r3.<android.view.View: int getWidth()>();

        $f0 = (float) $i1;

        $r4 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.view.View view>;

        $i2 = virtualinvoke $r4.<android.view.View: int getHeight()>();

        $f1 = (float) $i2;

        $r5 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, 0.0F, $f0, $f1, $r5);

     label7:
        specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: void drawOverlayDrawable(android.graphics.Canvas)>(r1);

        return;
    }

    private void drawOverlayDrawable(android.graphics.Canvas)
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        boolean $z0;
        android.graphics.drawable.Drawable $r3, $r6;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo $r4, $r5;
        int $i0, $i1;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        r1 := @parameter0: android.graphics.Canvas;

        $z0 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: boolean shouldDrawOverlayDrawable()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.drawable.Drawable overlayDrawable>;

        r2 = virtualinvoke $r3.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $r4 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f2 = $r4.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerX>;

        $i0 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $f3 = (float) $i0;

        $f4 = $f3 / 2.0F;

        f0 = $f2 - $f4;

        $r5 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f5 = $r5.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerY>;

        $i1 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $f6 = (float) $i1;

        $f7 = $f6 / 2.0F;

        f1 = $f5 - $f7;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(f0, f1);

        $r6 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.drawable.Drawable overlayDrawable>;

        virtualinvoke $r6.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        $f9 = neg f0;

        $f8 = neg f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f9, $f8);

     label1:
        return;
    }

    public boolean isOpaque()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.support.design.circularreveal.CircularRevealHelper$Delegate $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $r1 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealHelper$Delegate delegate>;

        $z0 = interfaceinvoke $r1.<android.support.design.circularreveal.CircularRevealHelper$Delegate: boolean actualIsOpaque()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: boolean shouldDrawCircularReveal()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean shouldDrawCircularReveal()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo $r1, $r2;
        int $i0;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $r1 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $z2 = virtualinvoke $r2.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: boolean isInvalid()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        z0 = $z3;

        $i0 = <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY>;

        if $i0 != 0 goto label6;

        if z0 != 0 goto label4;

        $z1 = r0.<android.support.design.circularreveal.CircularRevealHelper: boolean hasCircularRevealCache>;

        if $z1 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;

     label6:
        if z0 != 0 goto label7;

        $z5 = 1;

        goto label8;

     label7:
        $z5 = 0;

     label8:
        return $z5;
    }

    private boolean shouldDrawScrim()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        boolean $z0, $z1;
        android.graphics.Paint $r1;
        int $i0, $i1;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $z0 = r0.<android.support.design.circularreveal.CircularRevealHelper: boolean buildingCircularRevealCache>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>;

        $i0 = virtualinvoke $r1.<android.graphics.Paint: int getColor()>();

        $i1 = staticinvoke <android.graphics.Color: int alpha(int)>($i0);

        if $i1 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean shouldDrawOverlayDrawable()
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        boolean $z0, $z1;
        android.graphics.drawable.Drawable $r1;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo $r2;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        $z0 = r0.<android.support.design.circularreveal.CircularRevealHelper: boolean buildingCircularRevealCache>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.drawable.Drawable overlayDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        if $r2 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void drawDebugMode(android.graphics.Canvas)
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.graphics.Canvas r1;
        android.support.design.circularreveal.CircularRevealHelper$Delegate $r2;
        boolean $z0, $z1;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo $r3, $r4, $r5;
        android.graphics.Paint $r6;
        float $f0, $f1, $f2;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealHelper$Delegate delegate>;

        interfaceinvoke $r2.<android.support.design.circularreveal.CircularRevealHelper$Delegate: void actualDraw(android.graphics.Canvas)>(r1);

        $z0 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: boolean shouldDrawScrim()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f2 = $r3.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerX>;

        $r4 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f1 = $r4.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerY>;

        $r5 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f0 = $r5.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

        $r6 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint scrimPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f2, $f1, $f0, $r6);

     label1:
        $z1 = specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: boolean shouldDrawCircularReveal()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: void drawDebugCircle(android.graphics.Canvas,int,float)>(r1, -16777216, 10.0F);

        specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: void drawDebugCircle(android.graphics.Canvas,int,float)>(r1, -65536, 5.0F);

     label2:
        specialinvoke r0.<android.support.design.circularreveal.CircularRevealHelper: void drawOverlayDrawable(android.graphics.Canvas)>(r1);

        return;
    }

    private void drawDebugCircle(android.graphics.Canvas, int, float)
    {
        android.support.design.circularreveal.CircularRevealHelper r0;
        android.graphics.Canvas r1;
        int i0;
        float f0, $f1, $f2, $f3, $f4, $f5;
        android.graphics.Paint $r2, $r3, $r7;
        android.support.design.circularreveal.CircularRevealWidget$RevealInfo $r4, $r5, $r6;

        r0 := @this: android.support.design.circularreveal.CircularRevealHelper;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        $r2 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint debugPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>(i0);

        $r3 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint debugPaint>;

        virtualinvoke $r3.<android.graphics.Paint: void setStrokeWidth(float)>(f0);

        $r4 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f5 = $r4.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerX>;

        $r5 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f4 = $r5.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float centerY>;

        $r6 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.support.design.circularreveal.CircularRevealWidget$RevealInfo revealInfo>;

        $f2 = $r6.<android.support.design.circularreveal.CircularRevealWidget$RevealInfo: float radius>;

        $f1 = f0 / 2.0F;

        $f3 = $f2 - $f1;

        $r7 = r0.<android.support.design.circularreveal.CircularRevealHelper: android.graphics.Paint debugPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f5, $f4, $f3, $r7);

        return;
    }

    static void <clinit>()
    {
        int $i0, $i1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label1;

        <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY> = 2;

        goto label3;

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 18 goto label2;

        <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY> = 1;

        goto label3;

     label2:
        <android.support.design.circularreveal.CircularRevealHelper: int STRATEGY> = 0;

     label3:
        return;
    }

android.support.design.circularreveal.CircularRevealHelper$Delegate
<android.support.design.circularreveal.CircularRevealHelper$Delegate: void actualDraw(android.graphics.Canvas)>
<android.support.design.circularreveal.CircularRevealHelper$Delegate: boolean actualIsOpaque()>
android.support.design.circularreveal.CircularRevealHelper$Strategy
