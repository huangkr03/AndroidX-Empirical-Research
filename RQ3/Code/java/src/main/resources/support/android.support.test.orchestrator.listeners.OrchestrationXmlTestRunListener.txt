android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener
<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>
<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: long finishTime>
<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String mHostName>
<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: int mNumTests>
<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.io.File mReportDir>
<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String mReportPath>
<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>
<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: long startTime>
    static void <clinit>()
    {
        <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns> = null;

        return;
    }

    public void <init>()
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        java.io.File $r1, $r2;
        android.support.test.orchestrator.listeners.result.TestRunResult $r3;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationRunListener: void <init>()>();

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String mHostName> = "localhost";

        $r2 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "odo");

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.io.File mReportDir> = $r2;

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String mReportPath> = "";

        $r3 = new android.support.test.orchestrator.listeners.result.TestRunResult;

        specialinvoke $r3.<android.support.test.orchestrator.listeners.result.TestRunResult: void <init>()>();

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult> = $r3;

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: int mNumTests> = 0;

        return;
    }

    private void generateDocument(java.io.File, long)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        java.io.File $r1;
        long $l0;
        java.io.OutputStream $r2, $r4;
        java.lang.String $r3;
        org.kxml2.io.KXmlSerializer $r5;
        java.lang.Object[] $r6;
        android.support.test.orchestrator.listeners.result.TestRunResult $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: java.io.File;

        $l0 := @parameter1: long;

        $r2 = null;

        $r3 = virtualinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String getTimestamp()>();

     label01:
        $r4 = virtualinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.io.OutputStream createOutputResultStream(java.io.File)>($r1);

     label02:
        $r2 = $r4;

        $r5 = new org.kxml2.io.KXmlSerializer;

     label03:
        specialinvoke $r5.<org.kxml2.io.KXmlSerializer: void <init>()>();

        virtualinvoke $r5.<org.kxml2.io.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>($r4, "UTF-8");

        virtualinvoke $r5.<org.kxml2.io.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>("UTF-8", null);

        virtualinvoke $r5.<org.kxml2.io.KXmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        virtualinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: void printTestResults(org.kxml2.io.KXmlSerializer,java.lang.String,long)>($r5, $r3, $l0);

        virtualinvoke $r5.<org.kxml2.io.KXmlSerializer: void endDocument()>();

     label04:
        $r6 = newarray (java.lang.Object)[2];

     label05:
        $r3 = specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String getAbsoluteReportPath()>();

     label06:
        $r6[0] = $r3;

        $r7 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

     label07:
        $r3 = virtualinvoke $r7.<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String getTextSummary()>();

     label08:
        $r6[1] = $r3;

     label09:
        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("XML test result file generated at %s. %s", $r6);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("OrchestrationXmlTestRunListener", $r3);

     label10:
        if $r4 == null goto label24;

     label11:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label12:
        return;

     label13:
        $r8 := @caughtexception;

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("OrchestrationXmlTestRunListener", "Failed to generate report data", $r8);

     label15:
        if $r2 == null goto label24;

     label16:
        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label17:
        return;

     label18:
        $r9 := @caughtexception;

        return;

     label19:
        $r10 := @caughtexception;

        if $r2 == null goto label21;

     label20:
        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label21:
        throw $r10;

     label22:
        $r11 := @caughtexception;

        return;

     label23:
        $r12 := @caughtexception;

        goto label21;

     label24:
        return;

        catch java.io.IOException from label01 to label02 with label13;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.io.IOException from label11 to label12 with label22;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label20 to label21 with label23;
    }

    private java.lang.String getAbsoluteReportPath()
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        java.lang.String r1;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        r1 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String mReportPath>;

        return r1;
    }

    private void printFailedTest(org.kxml2.io.KXmlSerializer, java.lang.String, java.lang.String) throws java.io.IOException
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        org.kxml2.io.KXmlSerializer $r1;
        java.lang.String $r2, $r3, $r4;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: org.kxml2.io.KXmlSerializer;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>($r4, $r2);

        $r3 = specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String sanitize(java.lang.String)>($r3);

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>($r3);

        $r3 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>($r3, $r2);

        return;
    }

    private java.lang.String sanitize(java.lang.String)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        java.lang.String $r1;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\u0000", "<\\0>");

        return $r1;
    }

    private static android.support.test.orchestrator.listeners.result.TestIdentifier toTestIdentifier(android.support.test.orchestrator.junit.ParcelableDescription)
    {
        android.support.test.orchestrator.junit.ParcelableDescription $r0;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r1;
        java.lang.String $r2, $r3;

        $r0 := @parameter0: android.support.test.orchestrator.junit.ParcelableDescription;

        $r1 = new android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r2 = virtualinvoke $r0.<android.support.test.orchestrator.junit.ParcelableDescription: java.lang.String getClassName()>();

        $r3 = virtualinvoke $r0.<android.support.test.orchestrator.junit.ParcelableDescription: java.lang.String getMethodName()>();

        specialinvoke $r1.<android.support.test.orchestrator.listeners.result.TestIdentifier: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        return $r1;
    }

    java.io.OutputStream createOutputResultStream(java.io.File) throws java.io.IOException
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        java.io.File $r1;
        java.io.FileOutputStream $r2;
        boolean $z0;
        int $i0;
        android.app.Instrumentation $r3;
        android.content.Context $r4;
        java.lang.Object $r5;
        android.os.UserManager $r6;
        java.io.OutputStream $r7;
        java.io.IOException $r8;
        java.lang.String $r9;
        java.io.BufferedOutputStream $r10;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label2;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label1;

        $r3 = virtualinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.app.Instrumentation getInstrumentation()>();

        $r4 = virtualinvoke $r3.<android.app.Instrumentation: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r6 = (android.os.UserManager) $r5;

        $z0 = virtualinvoke $r6.<android.os.UserManager: boolean isUserUnlocked()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("OrchestrationXmlTestRunListener", "Currently no way to write output streams in direct boot mode.");

        $r7 = staticinvoke <com.google.common.io.ByteStreams: java.io.OutputStream nullOutputStream()>();

        return $r7;

     label1:
        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Failed to prepare report directory.");

        throw $r8;

     label2:
        $r1 = virtualinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.io.File getResultFile(java.io.File)>($r1);

        $r9 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String mReportPath> = $r9;

        $r10 = new java.io.BufferedOutputStream;

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        specialinvoke $r10.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r2);

        return $r10;
    }

    protected java.io.File getResultFile(java.io.File) throws java.io.IOException
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        java.io.File $r1;
        java.lang.Object[] $r2;
        java.lang.String $r3;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: java.io.File;

        $r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("test_result_", ".xml", $r1);

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Created xml report file at %s", $r2);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("OrchestrationXmlTestRunListener", $r3);

        return $r1;
    }

    protected java.lang.String getTestName(android.support.test.orchestrator.listeners.result.TestIdentifier)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r1;
        java.lang.String $r2;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r2 = virtualinvoke $r1.<android.support.test.orchestrator.listeners.result.TestIdentifier: java.lang.String getTestName()>();

        return $r2;
    }

    protected java.lang.String getTestSuiteName()
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        java.lang.String $r1;
        android.support.test.orchestrator.listeners.result.TestRunResult $r2;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $r1 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestRunResult: java.lang.String getName()>();

        return $r1;
    }

    java.lang.String getTimestamp()
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        java.text.SimpleDateFormat $r1;
        java.util.Locale $r2;
        java.util.TimeZone $r3;
        java.util.Date $r4;
        java.lang.String $r5;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 = new java.text.SimpleDateFormat;

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ss", $r2);

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        virtualinvoke $r1.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r3);

        virtualinvoke $r1.<java.text.SimpleDateFormat: void setLenient(boolean)>(1);

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>()>();

        $r5 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r4);

        return $r5;
    }

    public void orchestrationRunFinished()
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        long $l0, $l1;
        android.support.test.orchestrator.listeners.result.TestRunResult $r1;
        java.io.File $r2;
        java.util.HashMap r3;
        java.util.Map r4;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: long finishTime> = $l0;

        $l0 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: long finishTime>;

        $l1 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: long startTime>;

        $l0 = $l0 - $l1;

        $r1 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        r3 = new java.util.HashMap;

        specialinvoke r3.<java.util.HashMap: void <init>()>();

        r4 = (java.util.Map) r3;

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.result.TestRunResult: void testRunEnded(long,java.util.Map)>($l0, r4);

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.io.File mReportDir>;

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: void generateDocument(java.io.File,long)>($r2, $l0);

        return;
    }

    public void orchestrationRunStarted(int)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        int $i0;
        long $l1;
        android.support.test.orchestrator.listeners.result.TestRunResult $r1;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $i0 := @parameter0: int;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: long startTime> = $l1;

        $r1 = new android.support.test.orchestrator.listeners.result.TestRunResult;

        specialinvoke $r1.<android.support.test.orchestrator.listeners.result.TestRunResult: void <init>()>();

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult> = $r1;

        $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: int mNumTests> = $i0;

        $r1 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $i0 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: int mNumTests>;

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.result.TestRunResult: void testRunStarted(java.lang.String,int)>("", $i0);

        return;
    }

    void print(org.kxml2.io.KXmlSerializer, android.support.test.orchestrator.listeners.result.TestIdentifier, android.support.test.orchestrator.listeners.result.TestResult) throws java.io.IOException
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        org.kxml2.io.KXmlSerializer $r1;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r2;
        android.support.test.orchestrator.listeners.result.TestResult $r3;
        java.lang.String $r4, $r5;
        java.lang.Object[] $r6;
        long $l0, $l1;
        double $d0;
        java.lang.Double $r7;
        int[] $r8;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r9;
        int $i2;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: org.kxml2.io.KXmlSerializer;

        $r2 := @parameter1: android.support.test.orchestrator.listeners.result.TestIdentifier;

        $r3 := @parameter2: android.support.test.orchestrator.listeners.result.TestResult;

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>($r4, "testcase");

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $r5 = virtualinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String getTestName(android.support.test.orchestrator.listeners.result.TestIdentifier)>($r2);

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "name", $r5);

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $r5 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestIdentifier: java.lang.String getClassName()>();

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "classname", $r5);

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $r6 = newarray (java.lang.Object)[1];

        $l0 = virtualinvoke $r3.<android.support.test.orchestrator.listeners.result.TestResult: long getStartTime()>();

        $d0 = (double) $l0;

        $d0 = $d0 / 1000.0;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6[0] = $r7;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%.3f", $r6);

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "start-time", $r5);

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $r6 = newarray (java.lang.Object)[1];

        $l0 = virtualinvoke $r3.<android.support.test.orchestrator.listeners.result.TestResult: long getEndTime()>();

        $d0 = (double) $l0;

        $d0 = $d0 / 1000.0;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6[0] = $r7;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%.3f", $r6);

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "end-time", $r5);

        $l0 = virtualinvoke $r3.<android.support.test.orchestrator.listeners.result.TestResult: long getEndTime()>();

        $l1 = virtualinvoke $r3.<android.support.test.orchestrator.listeners.result.TestResult: long getStartTime()>();

        $l0 = $l0 - $l1;

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $d0 = (double) $l0;

        $d0 = $d0 / 1000.0;

        $r5 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "time", $r5);

        $r8 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$result$TestResult$TestStatus>;

        $r9 = virtualinvoke $r3.<android.support.test.orchestrator.listeners.result.TestResult: android.support.test.orchestrator.listeners.result.TestResult$TestStatus getStatus()>();

        $i2 = virtualinvoke $r9.<android.support.test.orchestrator.listeners.result.TestResult$TestStatus: int ordinal()>();

        $i2 = $r8[$i2];

        lookupswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>($r4, "testcase");

        return;

     label2:
        $r4 = virtualinvoke $r3.<android.support.test.orchestrator.listeners.result.TestResult: java.lang.String getStackTrace()>();

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: void printFailedTest(org.kxml2.io.KXmlSerializer,java.lang.String,java.lang.String)>($r1, "failure", $r4);

        goto label1;

     label3:
        $r4 = virtualinvoke $r3.<android.support.test.orchestrator.listeners.result.TestResult: java.lang.String getStackTrace()>();

        specialinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: void printFailedTest(org.kxml2.io.KXmlSerializer,java.lang.String,java.lang.String)>($r1, "skipped", $r4);

        goto label1;

     label4:
        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>($r4, "skipped");

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>($r4, "skipped");

        goto label1;
    }

    void printTestResults(org.kxml2.io.KXmlSerializer, java.lang.String, long) throws java.io.IOException
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        org.kxml2.io.KXmlSerializer $r1;
        java.lang.String $r2, $r4, $r5;
        long $l0;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r3;
        android.support.test.orchestrator.listeners.result.TestRunResult $r6;
        int $i1;
        double $d0;
        java.util.Map $r7;
        java.util.Set $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.util.Map$Entry $r11;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r12;
        android.support.test.orchestrator.listeners.result.TestResult $r13;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: org.kxml2.io.KXmlSerializer;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>($r4, "testsuite");

        $r4 = virtualinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String getTestSuiteName()>();

        if $r4 == null goto label1;

        $r5 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r5, "name", $r4);

     label1:
        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $r6 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $i1 = virtualinvoke $r6.<android.support.test.orchestrator.listeners.result.TestRunResult: int getNumTests()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "tests", $r5);

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $r6 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $i1 = virtualinvoke $r6.<android.support.test.orchestrator.listeners.result.TestRunResult: int getNumAllFailedTests()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "failures", $r5);

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "errors", "0");

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $r6 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $r3 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus IGNORED>;

        $i1 = virtualinvoke $r6.<android.support.test.orchestrator.listeners.result.TestRunResult: int getNumTestsInState(android.support.test.orchestrator.listeners.result.TestResult$TestStatus)>($r3);

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "skipped", $r5);

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $d0 = (double) $l0;

        $d0 = $d0 / 1000.0;

        $r5 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "time", $r5);

        $r4 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r4, "timestamp", $r2);

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        $r4 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String mHostName>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>($r2, "hostname", $r4);

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>($r2, "properties");

        $r2 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>($r2, "properties");

        $r6 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $r7 = virtualinvoke $r6.<android.support.test.orchestrator.listeners.result.TestRunResult: java.util.Map getTestResults()>();

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.Map$Entry) $r10;

        $r10 = interfaceinvoke $r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (android.support.test.orchestrator.listeners.result.TestIdentifier) $r10;

        $r10 = interfaceinvoke $r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (android.support.test.orchestrator.listeners.result.TestResult) $r10;

        virtualinvoke $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: void print(org.kxml2.io.KXmlSerializer,android.support.test.orchestrator.listeners.result.TestIdentifier,android.support.test.orchestrator.listeners.result.TestResult)>($r1, $r12, $r13);

        goto label2;

     label3:
        $r2 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: java.lang.String ns>;

        virtualinvoke $r1.<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>($r2, "testsuite");

        return;
    }

    public void testAssumptionFailure(android.support.test.orchestrator.junit.ParcelableFailure)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        android.support.test.orchestrator.junit.ParcelableFailure $r1;
        android.support.test.orchestrator.listeners.result.TestRunResult $r2;
        android.support.test.orchestrator.junit.ParcelableDescription $r3;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r4;
        java.lang.String $r5;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: android.support.test.orchestrator.junit.ParcelableFailure;

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $r3 = virtualinvoke $r1.<android.support.test.orchestrator.junit.ParcelableFailure: android.support.test.orchestrator.junit.ParcelableDescription getDescription()>();

        $r4 = staticinvoke <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestIdentifier toTestIdentifier(android.support.test.orchestrator.junit.ParcelableDescription)>($r3);

        $r5 = virtualinvoke $r1.<android.support.test.orchestrator.junit.ParcelableFailure: java.lang.String getTrace()>();

        virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestRunResult: void testAssumptionFailure(android.support.test.orchestrator.listeners.result.TestIdentifier,java.lang.String)>($r4, $r5);

        return;
    }

    public void testFailure(android.support.test.orchestrator.junit.ParcelableFailure)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        android.support.test.orchestrator.junit.ParcelableFailure $r1;
        android.support.test.orchestrator.listeners.result.TestRunResult $r2;
        android.support.test.orchestrator.junit.ParcelableDescription $r3;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r4;
        java.lang.String $r5;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: android.support.test.orchestrator.junit.ParcelableFailure;

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $r3 = virtualinvoke $r1.<android.support.test.orchestrator.junit.ParcelableFailure: android.support.test.orchestrator.junit.ParcelableDescription getDescription()>();

        $r4 = staticinvoke <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestIdentifier toTestIdentifier(android.support.test.orchestrator.junit.ParcelableDescription)>($r3);

        $r5 = virtualinvoke $r1.<android.support.test.orchestrator.junit.ParcelableFailure: java.lang.String getTrace()>();

        virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestRunResult: void testFailed(android.support.test.orchestrator.listeners.result.TestIdentifier,java.lang.String)>($r4, $r5);

        return;
    }

    public void testFinished(android.support.test.orchestrator.junit.ParcelableDescription)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        android.support.test.orchestrator.junit.ParcelableDescription $r1;
        android.support.test.orchestrator.listeners.result.TestRunResult $r2;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r3;
        java.util.HashMap r4;
        java.util.Map r5;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: android.support.test.orchestrator.junit.ParcelableDescription;

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $r3 = staticinvoke <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestIdentifier toTestIdentifier(android.support.test.orchestrator.junit.ParcelableDescription)>($r1);

        r4 = new java.util.HashMap;

        specialinvoke r4.<java.util.HashMap: void <init>()>();

        r5 = (java.util.Map) r4;

        virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestRunResult: void testEnded(android.support.test.orchestrator.listeners.result.TestIdentifier,java.util.Map)>($r3, r5);

        return;
    }

    public void testIgnored(android.support.test.orchestrator.junit.ParcelableDescription)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        android.support.test.orchestrator.junit.ParcelableDescription $r1;
        android.support.test.orchestrator.listeners.result.TestRunResult $r2;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r3;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: android.support.test.orchestrator.junit.ParcelableDescription;

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $r3 = staticinvoke <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestIdentifier toTestIdentifier(android.support.test.orchestrator.junit.ParcelableDescription)>($r1);

        virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestRunResult: void testIgnored(android.support.test.orchestrator.listeners.result.TestIdentifier)>($r3);

        return;
    }

    public void testRunFinished(android.support.test.orchestrator.junit.ParcelableResult)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        android.support.test.orchestrator.junit.ParcelableResult $r1;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: android.support.test.orchestrator.junit.ParcelableResult;

        return;
    }

    public void testRunStarted(android.support.test.orchestrator.junit.ParcelableDescription)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        android.support.test.orchestrator.junit.ParcelableDescription $r1;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: android.support.test.orchestrator.junit.ParcelableDescription;

        return;
    }

    public void testStarted(android.support.test.orchestrator.junit.ParcelableDescription)
    {
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r0;
        android.support.test.orchestrator.junit.ParcelableDescription $r1;
        android.support.test.orchestrator.listeners.result.TestRunResult $r2;
        android.support.test.orchestrator.listeners.result.TestIdentifier $r3;

        $r0 := @this: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        $r1 := @parameter0: android.support.test.orchestrator.junit.ParcelableDescription;

        $r2 = $r0.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestRunResult mRunResult>;

        $r3 = staticinvoke <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: android.support.test.orchestrator.listeners.result.TestIdentifier toTestIdentifier(android.support.test.orchestrator.junit.ParcelableDescription)>($r1);

        virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestRunResult: void testStarted(android.support.test.orchestrator.listeners.result.TestIdentifier)>($r3);

        return;
    }

android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener$1
<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$result$TestResult$TestStatus>
    static void <clinit>()
    {
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus[] $r0;
        int $i0;
        int[] $r1;
        android.support.test.orchestrator.listeners.result.TestResult$TestStatus $r2;
        java.lang.Throwable $r3, $r4, $r5;

        $r0 = staticinvoke <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$result$TestResult$TestStatus> = $r1;

        $r1 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$result$TestResult$TestStatus>;

        $r2 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus FAILURE>;

     label01:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestResult$TestStatus: int ordinal()>();

     label02:
        $r1[$i0] = 1;

     label03:
        $r1 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$result$TestResult$TestStatus>;

        $r2 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus ASSUMPTION_FAILURE>;

     label04:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestResult$TestStatus: int ordinal()>();

     label05:
        $r1[$i0] = 2;

     label06:
        $r1 = <android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener$1: int[] $SwitchMap$android$support$test$orchestrator$listeners$result$TestResult$TestStatus>;

        $r2 = <android.support.test.orchestrator.listeners.result.TestResult$TestStatus: android.support.test.orchestrator.listeners.result.TestResult$TestStatus IGNORED>;

     label07:
        $i0 = virtualinvoke $r2.<android.support.test.orchestrator.listeners.result.TestResult$TestStatus: int ordinal()>();

     label08:
        $r1[$i0] = 3;

        return;

     label09:
        $r3 := @caughtexception;

        return;

     label10:
        $r4 := @caughtexception;

        goto label06;

     label11:
        $r5 := @caughtexception;

        goto label03;

        catch java.lang.NoSuchFieldError from label01 to label02 with label11;
        catch java.lang.NoSuchFieldError from label04 to label05 with label10;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
    }

