android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor
<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: java.lang.String LOG_TAG>
<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>
    public void <init>(java.lang.String, int, java.util.concurrent.ThreadFactory)
    {
        android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.String r1, $r5, $r6, $r9, r11;
        int i0, $i1;
        java.util.concurrent.ThreadFactory r2;
        android.support.test.espresso.IdlingRegistry $r7;
        java.lang.Object[] $r8;
        android.support.test.espresso.idling.CountingIdlingResource r10;
        android.support.test.espresso.IdlingResource[] r12;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.concurrent.ThreadFactory;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>(i0, r2);

        r10 = new android.support.test.espresso.idling.CountingIdlingResource;

        specialinvoke r10.<android.support.test.espresso.idling.CountingIdlingResource: void <init>(java.lang.String)>(r1);

        r0.<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource> = r10;

        $r5 = "Register idling resource for scheduled thread pool ";

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 == 0 goto label1;

        $r9 = virtualinvoke $r5.<java.lang.String: java.lang.String concat(java.lang.String)>($r6);

        goto label2;

     label1:
        r11 = new java.lang.String;

        $r9 = r11;

        specialinvoke r11.<java.lang.String: void <init>(java.lang.String)>("Register idling resource for scheduled thread pool ");

     label2:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("IdlingThreadPoolExec", $r9);

        $r7 = staticinvoke <android.support.test.espresso.IdlingRegistry: android.support.test.espresso.IdlingRegistry getInstance()>();

        $r8 = newarray (android.support.test.espresso.IdlingResource)[1];

        $r8[0] = r0;

        r12 = (android.support.test.espresso.IdlingResource[]) $r8;

        virtualinvoke $r7.<android.support.test.espresso.IdlingRegistry: boolean register(android.support.test.espresso.IdlingResource[])>(r12);

        return;
    }

    public java.lang.String getName()
    {
        android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        android.support.test.espresso.idling.CountingIdlingResource $r1;
        java.lang.String $r2;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        $r1 = r0.<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $r2 = virtualinvoke $r1.<android.support.test.espresso.idling.CountingIdlingResource: java.lang.String getName()>();

        return $r2;
    }

    public boolean isIdleNow()
    {
        android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        android.support.test.espresso.idling.CountingIdlingResource $r1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        $r1 = r0.<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $z0 = virtualinvoke $r1.<android.support.test.espresso.idling.CountingIdlingResource: boolean isIdleNow()>();

        return $z0;
    }

    public void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource$ResourceCallback)
    {
        android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        android.support.test.espresso.IdlingResource$ResourceCallback r1;
        android.support.test.espresso.idling.CountingIdlingResource $r2;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: android.support.test.espresso.IdlingResource$ResourceCallback;

        $r2 = r0.<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r2.<android.support.test.espresso.idling.CountingIdlingResource: void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource$ResourceCallback)>(r1);

        return;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
    {
        android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        android.support.test.espresso.idling.CountingIdlingResource $r3;
        java.util.concurrent.ScheduledFuture $r4;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = r0.<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r3.<android.support.test.espresso.idling.CountingIdlingResource: void increment()>();

        $r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r1, l0, r2);

        return $r4;
    }

    public java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)
    {
        android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.util.concurrent.Callable r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        android.support.test.espresso.idling.CountingIdlingResource $r3;
        java.util.concurrent.ScheduledFuture $r4;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = r0.<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r3.<android.support.test.espresso.idling.CountingIdlingResource: void increment()>();

        $r4 = specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>(r1, l0, r2);

        return $r4;
    }

    protected void beforeExecute(java.lang.Thread, java.lang.Runnable)
    {
        android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.Thread r1;
        java.lang.Runnable r2;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Runnable;

        return;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.Throwable r2;
        android.support.test.espresso.idling.CountingIdlingResource $r3;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r3.<android.support.test.espresso.idling.CountingIdlingResource: void decrement()>();

        return;
    }

    protected void terminated()
    {
        android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor r0;
        android.support.test.espresso.idling.CountingIdlingResource $r1;
        java.lang.String $r3, $r4, $r5, $r8, r9;
        int $i0;
        android.support.test.espresso.IdlingRegistry $r6;
        java.lang.Object[] $r7;
        android.support.test.espresso.IdlingResource[] r10;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void terminated()>();

        $r3 = "Thread pool terminated, unregistering ";

        $r1 = r0.<android.support.test.espresso.idling.concurrent.IdlingScheduledThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $r4 = virtualinvoke $r1.<android.support.test.espresso.idling.CountingIdlingResource: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r8 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

        goto label2;

     label1:
        r9 = new java.lang.String;

        $r8 = r9;

        specialinvoke r9.<java.lang.String: void <init>(java.lang.String)>("Thread pool terminated, unregistering ");

     label2:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("IdlingThreadPoolExec", $r8);

        $r6 = staticinvoke <android.support.test.espresso.IdlingRegistry: android.support.test.espresso.IdlingRegistry getInstance()>();

        $r7 = newarray (android.support.test.espresso.IdlingResource)[1];

        $r7[0] = r0;

        r10 = (android.support.test.espresso.IdlingResource[]) $r7;

        virtualinvoke $r6.<android.support.test.espresso.IdlingRegistry: boolean unregister(android.support.test.espresso.IdlingResource[])>(r10);

        return;
    }

