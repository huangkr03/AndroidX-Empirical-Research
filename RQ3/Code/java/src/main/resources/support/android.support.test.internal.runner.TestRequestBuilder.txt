android.support.test.internal.runner.TestRequestBuilder
<android.support.test.internal.runner.TestRequestBuilder: java.lang.String LOG_TAG>
<android.support.test.internal.runner.TestRequestBuilder: java.lang.String LARGE_SIZE>
<android.support.test.internal.runner.TestRequestBuilder: java.lang.String MEDIUM_SIZE>
<android.support.test.internal.runner.TestRequestBuilder: java.lang.String SMALL_SIZE>
<android.support.test.internal.runner.TestRequestBuilder: java.lang.String EMULATOR_HARDWARE>
<android.support.test.internal.runner.TestRequestBuilder: java.lang.String[] mApkPaths>
<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestLoader mTestLoader>
<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter mClassMethodFilter>
<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter>
<android.support.test.internal.runner.TestRequestBuilder: boolean mSkipExecution>
<android.support.test.internal.runner.TestRequestBuilder: java.lang.String mTestPackageName>
<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestRequestBuilder$DeviceBuild mDeviceBuild>
<android.support.test.internal.runner.TestRequestBuilder: long mPerTestTimeout>
    public transient void <init>(java.io.PrintStream, java.lang.String[])
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.io.PrintStream r1;
        java.lang.String[] r2;
        android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl $r3;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: java.lang.String[];

        $r3 = new android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        specialinvoke $r3.<android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl: void <init>(android.support.test.internal.runner.TestRequestBuilder$1)>(null);

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder: void <init>(android.support.test.internal.runner.TestRequestBuilder$DeviceBuild,java.io.PrintStream,java.lang.String[])>($r3, r1, r2);

        return;
    }

    transient void <init>(android.support.test.internal.runner.TestRequestBuilder$DeviceBuild, java.io.PrintStream, java.lang.String[])
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        android.support.test.internal.runner.TestRequestBuilder$DeviceBuild r1;
        java.io.PrintStream r2;
        java.lang.String[] r3;
        android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter $r4, $r10;
        android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter $r5;
        android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter $r6;
        org.junit.runner.manipulation.Filter $r7, $r9, $r11;
        android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter $r8;
        android.support.test.internal.runner.TestLoader $r12;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: android.support.test.internal.runner.TestRequestBuilder$DeviceBuild;

        r2 := @parameter1: java.io.PrintStream;

        r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        specialinvoke $r4.<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: void <init>(android.support.test.internal.runner.TestRequestBuilder$1)>(null);

        r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter mClassMethodFilter> = $r4;

        $r5 = new android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        specialinvoke $r5.<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: void <init>(java.lang.Class)>(class "Landroid/test/suitebuilder/annotation/Suppress;");

        $r6 = new android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        specialinvoke $r6.<android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: void <init>(android.support.test.internal.runner.TestRequestBuilder,android.support.test.internal.runner.TestRequestBuilder$1)>(r0, null);

        $r7 = virtualinvoke $r5.<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r6);

        $r8 = new android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter;

        specialinvoke $r8.<android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: void <init>(android.support.test.internal.runner.TestRequestBuilder)>(r0);

        $r9 = virtualinvoke $r7.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r8);

        $r10 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter mClassMethodFilter>;

        $r11 = virtualinvoke $r9.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r10);

        r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter> = $r11;

        r0.<android.support.test.internal.runner.TestRequestBuilder: boolean mSkipExecution> = 0;

        r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.String mTestPackageName> = null;

        r0.<android.support.test.internal.runner.TestRequestBuilder: long mPerTestTimeout> = 0L;

        r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestRequestBuilder$DeviceBuild mDeviceBuild> = r1;

        r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.String[] mApkPaths> = r3;

        $r12 = new android.support.test.internal.runner.TestLoader;

        specialinvoke $r12.<android.support.test.internal.runner.TestLoader: void <init>(java.io.PrintStream)>(r2);

        r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestLoader mTestLoader> = $r12;

        return;
    }

    public void addTestClass(java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        android.support.test.internal.runner.TestLoader $r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestLoader mTestLoader>;

        virtualinvoke $r2.<android.support.test.internal.runner.TestLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        return;
    }

    public void addTestMethod(java.lang.String, java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1, r2;
        java.lang.Class r3;
        android.support.test.internal.runner.TestLoader $r4;
        android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter $r5;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestLoader mTestLoader>;

        r3 = virtualinvoke $r4.<android.support.test.internal.runner.TestLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        if r3 == null goto label1;

        $r5 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter mClassMethodFilter>;

        virtualinvoke $r5.<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: void add(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        return;
    }

    public void addTestPackageFilter(java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.String mTestPackageName> = r1;

        return;
    }

    public void addTestSizeFilter(java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1, $r2, $r3, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r5;
        android.support.test.internal.runner.TestRequestBuilder$SizeFilter $r7, $r10, $r13;
        org.junit.runner.manipulation.Filter $r8, $r9, $r11, $r12, $r14, $r15;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = "small";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r14 = r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter>;

        $r13 = new android.support.test.internal.runner.TestRequestBuilder$SizeFilter;

        specialinvoke $r13.<android.support.test.internal.runner.TestRequestBuilder$SizeFilter: void <init>(java.lang.Class)>(class "Landroid/test/suitebuilder/annotation/SmallTest;");

        $r15 = virtualinvoke $r14.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r13);

        r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter> = $r15;

        goto label4;

     label1:
        $r3 = "medium";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r11 = r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter>;

        $r10 = new android.support.test.internal.runner.TestRequestBuilder$SizeFilter;

        specialinvoke $r10.<android.support.test.internal.runner.TestRequestBuilder$SizeFilter: void <init>(java.lang.Class)>(class "Landroid/test/suitebuilder/annotation/MediumTest;");

        $r12 = virtualinvoke $r11.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r10);

        r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter> = $r12;

        goto label4;

     label2:
        $r4 = "large";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        $r8 = r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter>;

        $r7 = new android.support.test.internal.runner.TestRequestBuilder$SizeFilter;

        specialinvoke $r7.<android.support.test.internal.runner.TestRequestBuilder$SizeFilter: void <init>(java.lang.Class)>(class "Landroid/test/suitebuilder/annotation/LargeTest;");

        $r9 = virtualinvoke $r8.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r7);

        r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter> = $r9;

        goto label4;

     label3:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unrecognized test size \'%s\'", $r5);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TestRequestBuilder", $r6);

     label4:
        return;
    }

    public void addAnnotationInclusionFilter(java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        java.lang.Class r2;
        android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter $r3;
        org.junit.runner.manipulation.Filter $r4, $r5;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.Class loadAnnotationClass(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r4 = r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter>;

        $r3 = new android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter;

        specialinvoke $r3.<android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: void <init>(java.lang.Class)>(r2);

        $r5 = virtualinvoke $r4.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r3);

        r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter> = $r5;

     label1:
        return;
    }

    public void addAnnotationExclusionFilter(java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        java.lang.Class r2;
        android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter $r3;
        org.junit.runner.manipulation.Filter $r4, $r5;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.Class loadAnnotationClass(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r4 = r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter>;

        $r3 = new android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        specialinvoke $r3.<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: void <init>(java.lang.Class)>(r2);

        $r5 = virtualinvoke $r4.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r3);

        r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter> = $r5;

     label1:
        return;
    }

    public void addShardingFilter(int, int)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        int i0, i1;
        android.support.test.internal.runner.TestRequestBuilder$ShardingFilter $r1;
        org.junit.runner.manipulation.Filter $r2, $r3;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter>;

        $r1 = new android.support.test.internal.runner.TestRequestBuilder$ShardingFilter;

        specialinvoke $r1.<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: void <init>(int,int)>(i0, i1);

        $r3 = virtualinvoke $r2.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r1);

        r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter> = $r3;

        return;
    }

    public void setSkipExecution(boolean)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        boolean z0;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        z0 := @parameter0: boolean;

        r0.<android.support.test.internal.runner.TestRequestBuilder: boolean mSkipExecution> = z0;

        return;
    }

    public void setPerTestTimeout(long)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        long l0;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        l0 := @parameter0: long;

        r0.<android.support.test.internal.runner.TestRequestBuilder: long mPerTestTimeout> = l0;

        return;
    }

    public android.support.test.internal.runner.TestRequest build(android.app.Instrumentation, android.os.Bundle)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        android.app.Instrumentation r1;
        android.os.Bundle r2;
        org.junit.runner.Request r3;
        android.support.test.internal.runner.TestLoader $r4, $r7, $r13;
        boolean $z0, $z1;
        android.support.test.internal.util.AndroidRunnerParams $r5;
        long $l0;
        org.junit.runner.Computer $r6;
        java.util.Collection $r8, $r14;
        java.lang.Class[] $r9, $r11;
        java.lang.Object[] $r10;
        android.support.test.internal.runner.TestRequest $r12;
        android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest $r15;
        org.junit.runner.manipulation.Filter $r16;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: android.os.Bundle;

        $r4 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestLoader mTestLoader>;

        $z0 = virtualinvoke $r4.<android.support.test.internal.runner.TestLoader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder: void loadClassesFromClassPath()>();

     label1:
        $r5 = new android.support.test.internal.util.AndroidRunnerParams;

        $z1 = r0.<android.support.test.internal.runner.TestRequestBuilder: boolean mSkipExecution>;

        $l0 = r0.<android.support.test.internal.runner.TestRequestBuilder: long mPerTestTimeout>;

        specialinvoke $r5.<android.support.test.internal.util.AndroidRunnerParams: void <init>(android.app.Instrumentation,android.os.Bundle,boolean,long)>(r1, r2, $z1, $l0);

        $r6 = new org.junit.runner.Computer;

        specialinvoke $r6.<org.junit.runner.Computer: void <init>()>();

        $r7 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestLoader mTestLoader>;

        $r8 = virtualinvoke $r7.<android.support.test.internal.runner.TestLoader: java.util.Collection getLoadedClasses()>();

        $r9 = newarray (java.lang.Class)[0];

        $r10 = interfaceinvoke $r8.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.Class[]) $r10;

        r3 = staticinvoke <android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.Request classes(android.support.test.internal.util.AndroidRunnerParams,org.junit.runner.Computer,java.lang.Class[])>($r5, $r6, $r11);

        $r12 = new android.support.test.internal.runner.TestRequest;

        $r13 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestLoader mTestLoader>;

        $r14 = virtualinvoke $r13.<android.support.test.internal.runner.TestLoader: java.util.Collection getLoadFailures()>();

        $r15 = new android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest;

        $r16 = r0.<android.support.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter mFilter>;

        specialinvoke $r15.<android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest: void <init>(org.junit.runner.Request,org.junit.runner.manipulation.Filter)>(r3, $r16);

        specialinvoke $r12.<android.support.test.internal.runner.TestRequest: void <init>(java.util.Collection,org.junit.runner.Request)>($r14, $r15);

        return $r12;
    }

    private static transient org.junit.runner.Request classes(android.support.test.internal.util.AndroidRunnerParams, org.junit.runner.Computer, java.lang.Class[])
    {
        android.support.test.internal.util.AndroidRunnerParams r0;
        org.junit.runner.Computer r1;
        java.lang.Class[] r2;
        org.junit.runner.Request $r4;
        java.lang.Throwable $r5, r8;
        org.junit.runner.Runner r7;
        android.support.test.internal.runner.AndroidRunnerBuilder r9;
        java.lang.RuntimeException r10;
        org.junit.runners.model.RunnerBuilder r11;

        r0 := @parameter0: android.support.test.internal.util.AndroidRunnerParams;

        r1 := @parameter1: org.junit.runner.Computer;

        r2 := @parameter2: java.lang.Class[];

     label1:
        r9 = new android.support.test.internal.runner.AndroidRunnerBuilder;

        specialinvoke r9.<android.support.test.internal.runner.AndroidRunnerBuilder: void <init>(android.support.test.internal.util.AndroidRunnerParams)>(r0);

        r11 = (org.junit.runners.model.RunnerBuilder) r9;

        r7 = virtualinvoke r1.<org.junit.runner.Computer: org.junit.runner.Runner getSuite(org.junit.runners.model.RunnerBuilder,java.lang.Class[])>(r11, r2);

        $r4 = staticinvoke <org.junit.runner.Request: org.junit.runner.Request runner(org.junit.runner.Runner)>(r7);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r8 = $r5;

        r10 = new java.lang.RuntimeException;

        specialinvoke r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Suite constructor, called as above, should always complete");

        throw r10;

        catch org.junit.runners.model.InitializationError from label1 to label2 with label3;
    }

    private void loadClassesFromClassPath()
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.String r3;
        boolean $z0;
        java.lang.Object $r4;
        android.support.test.internal.runner.TestLoader $r5;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 = specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder: java.util.Collection getClassNamesFromClassPath()>();

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r4;

        $r5 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestLoader mTestLoader>;

        virtualinvoke $r5.<android.support.test.internal.runner.TestLoader: java.lang.Class loadIfTest(java.lang.String)>(r3);

        goto label1;

     label2:
        return;
    }

    private java.util.Collection getClassNamesFromClassPath()
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        android.support.test.internal.runner.ClassPathScanner r1, $r8;
        android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter r2, $r10;
        java.lang.Throwable r3, $r21;
        java.lang.Object[] $r4;
        java.lang.String[] $r5, $r9;
        java.lang.String $r6, $r7, $r12, $r20;
        android.support.test.internal.runner.ClassPathScanner$ExternalClassNameFilter $r11;
        android.support.test.internal.runner.ClassPathScanner$ClassNameFilter[] $r13;
        android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter $r14, $r15, $r16, $r17;
        java.util.Set $r18;
        android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter $r19;
        java.util.List $r22;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.String[] mApkPaths>;

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r5);

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Scanning classpath to find tests in apks %s", $r4);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("TestRequestBuilder", $r7);

        $r8 = new android.support.test.internal.runner.ClassPathScanner;

        $r9 = r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.String[] mApkPaths>;

        specialinvoke $r8.<android.support.test.internal.runner.ClassPathScanner: void <init>(java.lang.String[])>($r9);

        r1 = $r8;

        $r10 = new android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter;

        specialinvoke $r10.<android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: void <init>()>();

        r2 = $r10;

        $r11 = new android.support.test.internal.runner.ClassPathScanner$ExternalClassNameFilter;

        specialinvoke $r11.<android.support.test.internal.runner.ClassPathScanner$ExternalClassNameFilter: void <init>()>();

        virtualinvoke r2.<android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: void add(android.support.test.internal.runner.ClassPathScanner$ClassNameFilter)>($r11);

        $r12 = r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.String mTestPackageName>;

        if $r12 == null goto label1;

        $r19 = new android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter;

        $r20 = r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.String mTestPackageName>;

        specialinvoke $r19.<android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter: void <init>(java.lang.String)>($r20);

        virtualinvoke r2.<android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: void add(android.support.test.internal.runner.ClassPathScanner$ClassNameFilter)>($r19);

        goto label2;

     label1:
        $r13 = newarray (android.support.test.internal.runner.ClassPathScanner$ClassNameFilter)[4];

        $r14 = new android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter;

        specialinvoke $r14.<android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter: void <init>(java.lang.String)>("junit");

        $r13[0] = $r14;

        $r15 = new android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter;

        specialinvoke $r15.<android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter: void <init>(java.lang.String)>("org.junit");

        $r13[1] = $r15;

        $r16 = new android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter;

        specialinvoke $r16.<android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter: void <init>(java.lang.String)>("org.hamcrest");

        $r13[2] = $r16;

        $r17 = new android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter;

        specialinvoke $r17.<android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter: void <init>(java.lang.String)>("android.support.test.internal.runner.junit3");

        $r13[3] = $r17;

        virtualinvoke r2.<android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: void addAll(android.support.test.internal.runner.ClassPathScanner$ClassNameFilter[])>($r13);

     label2:
        $r18 = virtualinvoke r1.<android.support.test.internal.runner.ClassPathScanner: java.util.Set getClassPathEntries(android.support.test.internal.runner.ClassPathScanner$ClassNameFilter)>(r2);

     label3:
        return $r18;

     label4:
        $r21 := @caughtexception;

        r3 = $r21;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestRequestBuilder", "Failed to scan classes", r3);

        $r22 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r22;

        catch java.io.IOException from label2 to label3 with label4;
    }

    transient android.support.test.internal.runner.ClassPathScanner createClassPathScanner(java.lang.String[])
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.lang.String[] r1;
        android.support.test.internal.runner.ClassPathScanner $r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String[];

        $r2 = new android.support.test.internal.runner.ClassPathScanner;

        specialinvoke $r2.<android.support.test.internal.runner.ClassPathScanner: void <init>(java.lang.String[])>(r1);

        return $r2;
    }

    private java.lang.Class loadAnnotationClass(java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1, $r4, $r7;
        java.lang.Throwable $r2, $r5, r9, r10;
        java.lang.Object[] $r3, $r6;
        java.lang.Class r8;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

     label1:
        r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        r9 = $r5;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not find annotation class: %s", $r6);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TestRequestBuilder", $r7);

        goto label5;

     label4:
        $r2 := @caughtexception;

        r10 = $r2;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Class %s is not an annotation", $r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TestRequestBuilder", $r4);

     label5:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    private int getDeviceSdkInt()
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        android.support.test.internal.runner.TestRequestBuilder$DeviceBuild $r1;
        int $i0;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        $r1 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestRequestBuilder$DeviceBuild mDeviceBuild>;

        $i0 = interfaceinvoke $r1.<android.support.test.internal.runner.TestRequestBuilder$DeviceBuild: int getSdkVersionInt()>();

        return $i0;
    }

    private java.lang.String getDeviceHardware()
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        android.support.test.internal.runner.TestRequestBuilder$DeviceBuild $r1;
        java.lang.String $r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder;

        $r1 = r0.<android.support.test.internal.runner.TestRequestBuilder: android.support.test.internal.runner.TestRequestBuilder$DeviceBuild mDeviceBuild>;

        $r2 = interfaceinvoke $r1.<android.support.test.internal.runner.TestRequestBuilder$DeviceBuild: java.lang.String getHardware()>();

        return $r2;
    }

    static int access$300(android.support.test.internal.runner.TestRequestBuilder)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        int $i0;

        r0 := @parameter0: android.support.test.internal.runner.TestRequestBuilder;

        $i0 = specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder: int getDeviceSdkInt()>();

        return $i0;
    }

    static java.lang.String access$400(android.support.test.internal.runner.TestRequestBuilder)
    {
        android.support.test.internal.runner.TestRequestBuilder r0;
        java.lang.String $r1;

        r0 := @parameter0: android.support.test.internal.runner.TestRequestBuilder;

        $r1 = specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder: java.lang.String getDeviceHardware()>();

        return $r1;
    }

android.support.test.internal.runner.TestRequestBuilder$1
android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter
<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class mAnnotationClass>
    void <init>(java.lang.Class)
    {
        android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter r0;
        java.lang.Class r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$ParentFilter: void <init>(android.support.test.internal.runner.TestRequestBuilder$1)>(null);

        r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class mAnnotationClass> = r1;

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter r0;
        org.junit.runner.Description r1;
        java.lang.Class r2, $r3, $r5;
        java.lang.'annotation'.Annotation $r4;
        boolean $z0;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        r1 := @parameter0: org.junit.runner.Description;

        r2 = virtualinvoke r1.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if r2 == null goto label1;

        $r5 = r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class mAnnotationClass>;

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>($r5);

        if $z0 != 0 goto label2;

     label1:
        $r3 = r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class mAnnotationClass>;

        $r4 = virtualinvoke r1.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r3);

        if $r4 == null goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public java.lang.String describe()
    {
        android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class mAnnotationClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("not annotation %s", $r1);

        return $r4;
    }

android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter
<android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class mAnnotationClass>
    void <init>(java.lang.Class)
    {
        android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter r0;
        java.lang.Class r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$ParentFilter: void <init>(android.support.test.internal.runner.TestRequestBuilder$1)>(null);

        r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class mAnnotationClass> = r1;

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter r0;
        org.junit.runner.Description r1;
        java.lang.Class r2, $r3, $r5;
        java.lang.'annotation'.Annotation $r4;
        boolean $z0, $z1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter;

        r1 := @parameter0: org.junit.runner.Description;

        r2 = virtualinvoke r1.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        $r3 = r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class mAnnotationClass>;

        $r4 = virtualinvoke r1.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r3);

        if $r4 != null goto label1;

        if r2 == null goto label2;

        $r5 = r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class mAnnotationClass>;

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>($r5);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected java.lang.Class getAnnotationClass()
    {
        android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter r0;
        java.lang.Class $r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter;

        $r1 = r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class mAnnotationClass>;

        return $r1;
    }

    public java.lang.String describe()
    {
        android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class mAnnotationClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("annotation %s", $r1);

        return $r4;
    }

android.support.test.internal.runner.TestRequestBuilder$BlankRunner
    private void <init>()
    {
        android.support.test.internal.runner.TestRequestBuilder$BlankRunner r0;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$BlankRunner;

        specialinvoke r0.<org.junit.runner.Runner: void <init>()>();

        return;
    }

    public org.junit.runner.Description getDescription()
    {
        android.support.test.internal.runner.TestRequestBuilder$BlankRunner r0;
        java.lang.'annotation'.Annotation[] $r1;
        org.junit.runner.Description $r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$BlankRunner;

        $r1 = newarray (java.lang.'annotation'.Annotation)[0];

        $r2 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createSuiteDescription(java.lang.String,java.lang.'annotation'.Annotation[])>("no tests found", $r1);

        return $r2;
    }

    public void run(org.junit.runner.notification.RunNotifier)
    {
        android.support.test.internal.runner.TestRequestBuilder$BlankRunner r0;
        org.junit.runner.notification.RunNotifier r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$BlankRunner;

        r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        return;
    }

    void <init>(android.support.test.internal.runner.TestRequestBuilder$1)
    {
        android.support.test.internal.runner.TestRequestBuilder$BlankRunner r0;
        android.support.test.internal.runner.TestRequestBuilder$1 r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$BlankRunner;

        r1 := @parameter0: android.support.test.internal.runner.TestRequestBuilder$1;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$BlankRunner: void <init>()>();

        return;
    }

android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter
<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map mClassMethodFilterMap>
    private void <init>()
    {
        android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;
        java.util.HashMap $r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        specialinvoke r0.<org.junit.runner.manipulation.Filter: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map mClassMethodFilterMap> = $r1;

        return;
    }

    public boolean shouldRun(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;
        org.junit.runner.Description r1, r2;
        java.util.Map $r3, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.ArrayList $r4;
        java.lang.Object $r5, $r8;
        java.lang.String $r7;
        android.support.test.internal.runner.TestRequestBuilder$MethodFilter r9;
        java.util.Iterator r10;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $r3 = r0.<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map mClassMethodFilterMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r1.<org.junit.runner.Description: boolean isTest()>();

        if $z1 == 0 goto label3;

        $r6 = r0.<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map mClassMethodFilterMap>;

        $r7 = virtualinvoke r1.<org.junit.runner.Description: java.lang.String getClassName()>();

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r9 = (android.support.test.internal.runner.TestRequestBuilder$MethodFilter) $r8;

        if r9 == null goto label2;

        $z4 = virtualinvoke r9.<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: boolean shouldRun(org.junit.runner.Description)>(r1);

        return $z4;

     label2:
        goto label6;

     label3:
        $r4 = virtualinvoke r1.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        r10 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.junit.runner.Description) $r5;

        $z3 = virtualinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: boolean shouldRun(org.junit.runner.Description)>(r2);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        goto label4;

     label6:
        return 0;
    }

    public java.lang.String describe()
    {
        android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        return "Class and method filter";
    }

    public void add(java.lang.String, java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;
        java.lang.String r1, r2;
        java.util.Map $r3, $r6;
        java.lang.Object $r4;
        android.support.test.internal.runner.TestRequestBuilder$MethodFilter $r5, r8;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map mClassMethodFilterMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (android.support.test.internal.runner.TestRequestBuilder$MethodFilter) $r4;

        if r8 != null goto label1;

        $r5 = new android.support.test.internal.runner.TestRequestBuilder$MethodFilter;

        specialinvoke $r5.<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: void <init>(java.lang.String)>(r1);

        r8 = $r5;

        $r6 = r0.<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map mClassMethodFilterMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

     label1:
        virtualinvoke r8.<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: void add(java.lang.String)>(r2);

        return;
    }

    void <init>(android.support.test.internal.runner.TestRequestBuilder$1)
    {
        android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;
        android.support.test.internal.runner.TestRequestBuilder$1 r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        r1 := @parameter0: android.support.test.internal.runner.TestRequestBuilder$1;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: void <init>()>();

        return;
    }

android.support.test.internal.runner.TestRequestBuilder$DeviceBuild
<android.support.test.internal.runner.TestRequestBuilder$DeviceBuild: int getSdkVersionInt()>
<android.support.test.internal.runner.TestRequestBuilder$DeviceBuild: java.lang.String getHardware()>
android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl
    private void <init>()
    {
        android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl r0;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getSdkVersionInt()
    {
        android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl r0;
        int $i0;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        return $i0;
    }

    public java.lang.String getHardware()
    {
        android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl r0;
        java.lang.String $r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        $r1 = <android.os.Build: java.lang.String HARDWARE>;

        return $r1;
    }

    void <init>(android.support.test.internal.runner.TestRequestBuilder$1)
    {
        android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl r0;
        android.support.test.internal.runner.TestRequestBuilder$1 r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        r1 := @parameter0: android.support.test.internal.runner.TestRequestBuilder$1;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$DeviceBuildImpl: void <init>()>();

        return;
    }

android.support.test.internal.runner.TestRequestBuilder$ExtendedSuite
    static org.junit.runners.Suite createSuite(java.util.List)
    {
        java.util.List r0;
        java.lang.Throwable r1, $r4, r16;
        java.lang.String r2, $r7, $r12;
        java.lang.Class $r6;
        int $i0, $i1;
        java.lang.StringBuilder $r9, $r10, $r11, r14;
        android.support.test.internal.runner.TestRequestBuilder$ExtendedSuite r13;
        java.lang.RuntimeException r15;

        r0 := @parameter0: java.util.List;

     label1:
        r13 = new android.support.test.internal.runner.TestRequestBuilder$ExtendedSuite;

        specialinvoke r13.<android.support.test.internal.runner.TestRequestBuilder$ExtendedSuite: void <init>(java.util.List)>(r0);

     label2:
        return r13;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        r15 = new java.lang.RuntimeException;

        $r6 = class "Lorg/junit/runners/Suite;";

        r2 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i1 = 107 + $i0;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r9 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal Error: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Class<?>, List<Runner>) should never throw an InitializationError when passed a null Class");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        r16 = (java.lang.Throwable) r15;

        throw r16;

        catch org.junit.runners.model.InitializationError from label1 to label2 with label3;
    }

    void <init>(java.util.List) throws org.junit.runners.model.InitializationError
    {
        android.support.test.internal.runner.TestRequestBuilder$ExtendedSuite r0;
        java.util.List r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ExtendedSuite;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.junit.runners.Suite: void <init>(java.lang.Class,java.util.List)>(null, r1);

        return;
    }

android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest
<android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.Request mRequest>
<android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.manipulation.Filter mFilter>
    public void <init>(org.junit.runner.Request, org.junit.runner.manipulation.Filter)
    {
        android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest r0;
        org.junit.runner.Request r1;
        org.junit.runner.manipulation.Filter r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest;

        r1 := @parameter0: org.junit.runner.Request;

        r2 := @parameter1: org.junit.runner.manipulation.Filter;

        specialinvoke r0.<org.junit.runner.Request: void <init>()>();

        r0.<android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.Request mRequest> = r1;

        r0.<android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.manipulation.Filter mFilter> = r2;

        return;
    }

    public org.junit.runner.Runner getRunner()
    {
        android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest r0;
        org.junit.runner.Request $r1;
        org.junit.runner.manipulation.Filter $r2;
        java.lang.Throwable $r3, r6;
        android.support.test.internal.runner.TestRequestBuilder$BlankRunner $r4;
        org.junit.runner.Runner r5;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest;

     label1:
        $r1 = r0.<android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.Request mRequest>;

        r5 = virtualinvoke $r1.<org.junit.runner.Request: org.junit.runner.Runner getRunner()>();

        $r2 = r0.<android.support.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.manipulation.Filter mFilter>;

        virtualinvoke $r2.<org.junit.runner.manipulation.Filter: void apply(java.lang.Object)>(r5);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        r6 = $r3;

        $r4 = new android.support.test.internal.runner.TestRequestBuilder$BlankRunner;

        specialinvoke $r4.<android.support.test.internal.runner.TestRequestBuilder$BlankRunner: void <init>(android.support.test.internal.runner.TestRequestBuilder$1)>(null);

        return $r4;

        catch org.junit.runner.manipulation.NoTestsRemainException from label1 to label2 with label3;
    }

android.support.test.internal.runner.TestRequestBuilder$MethodFilter
<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: java.lang.String mClassName>
<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set mMethodNames>
    public void <init>(java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        java.lang.String r1;
        java.util.HashSet $r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$MethodFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.junit.runner.manipulation.Filter: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set mMethodNames> = $r2;

        r0.<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: java.lang.String mClassName> = r1;

        return;
    }

    public java.lang.String describe()
    {
        android.support.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$MethodFilter;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method filter for ");

        $r3 = r0.<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: java.lang.String mClassName>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" class");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean shouldRun(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        org.junit.runner.Description r1;
        boolean $z0, $z1;
        java.util.Set $r2;
        java.lang.String r3, r4;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$MethodFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $z0 = virtualinvoke r1.<org.junit.runner.Description: boolean isTest()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r1.<org.junit.runner.Description: java.lang.String getMethodName()>();

        r4 = specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: java.lang.String stripParameterizedSuffix(java.lang.String)>(r3);

        $r2 = r0.<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set mMethodNames>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        return $z1;

     label1:
        return 1;
    }

    private java.lang.String stripParameterizedSuffix(java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        java.util.regex.Pattern r1;
        java.util.regex.Matcher $r2;
        boolean $z0;
        int $i0;
        java.lang.String r3;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$MethodFilter;

        r3 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".+(\\[[0-9]+\\])$");

        $r2 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(91);

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        return r3;
    }

    public void add(java.lang.String)
    {
        android.support.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$MethodFilter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.support.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set mMethodNames>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

android.support.test.internal.runner.TestRequestBuilder$ParentFilter
    private void <init>()
    {
        android.support.test.internal.runner.TestRequestBuilder$ParentFilter r0;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ParentFilter;

        specialinvoke r0.<org.junit.runner.manipulation.Filter: void <init>()>();

        return;
    }

    public boolean shouldRun(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$ParentFilter r0;
        org.junit.runner.Description r1, r3;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r4;
        java.lang.Object $r5;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ParentFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $z0 = virtualinvoke r1.<org.junit.runner.Description: boolean isTest()>();

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$ParentFilter: boolean evaluateTest(org.junit.runner.Description)>(r1);

        return $z3;

     label1:
        $r4 = virtualinvoke r1.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.junit.runner.Description) $r5;

        $z2 = virtualinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$ParentFilter: boolean shouldRun(org.junit.runner.Description)>(r3);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

<android.support.test.internal.runner.TestRequestBuilder$ParentFilter: boolean evaluateTest(org.junit.runner.Description)>
    void <init>(android.support.test.internal.runner.TestRequestBuilder$1)
    {
        android.support.test.internal.runner.TestRequestBuilder$ParentFilter r0;
        android.support.test.internal.runner.TestRequestBuilder$1 r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ParentFilter;

        r1 := @parameter0: android.support.test.internal.runner.TestRequestBuilder$1;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$ParentFilter: void <init>()>();

        return;
    }

android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter
<android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: android.support.test.internal.runner.TestRequestBuilder this$0>
    void <init>(android.support.test.internal.runner.TestRequestBuilder)
    {
        android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter r0;
        android.support.test.internal.runner.TestRequestBuilder r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter;

        r1 := @parameter0: android.support.test.internal.runner.TestRequestBuilder;

        r0.<android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: android.support.test.internal.runner.TestRequestBuilder this$0> = r1;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: void <init>(java.lang.Class)>(class "Landroid/support/test/filters/RequiresDevice;");

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter r0;
        org.junit.runner.Description r1;
        boolean $z0, $z1, $z2;
        android.support.test.internal.runner.TestRequestBuilder $r2;
        java.lang.String $r3, $r4;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $z0 = specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: boolean evaluateTest(org.junit.runner.Description)>(r1);

        if $z0 != 0 goto label3;

        $r3 = "goldfish";

        $r2 = r0.<android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: android.support.test.internal.runner.TestRequestBuilder this$0>;

        $r4 = staticinvoke <android.support.test.internal.runner.TestRequestBuilder: java.lang.String access$400(android.support.test.internal.runner.TestRequestBuilder)>($r2);

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 1;
    }

    public java.lang.String describe()
    {
        android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("skip tests annotated with RequiresDevice if necessary", $r1);

        return $r2;
    }

android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter
<android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: android.support.test.internal.runner.TestRequestBuilder this$0>
    private void <init>(android.support.test.internal.runner.TestRequestBuilder)
    {
        android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        android.support.test.internal.runner.TestRequestBuilder r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        r1 := @parameter0: android.support.test.internal.runner.TestRequestBuilder;

        r0.<android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: android.support.test.internal.runner.TestRequestBuilder this$0> = r1;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$ParentFilter: void <init>(android.support.test.internal.runner.TestRequestBuilder$1)>(null);

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        org.junit.runner.Description r1;
        android.support.test.filters.SdkSuppress r2;
        android.support.test.internal.runner.TestRequestBuilder $r3;
        int $i0, $i1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        r1 := @parameter0: org.junit.runner.Description;

        r2 = specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: android.support.test.filters.SdkSuppress getAnnotationForTest(org.junit.runner.Description)>(r1);

        if r2 == null goto label1;

        $r3 = r0.<android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: android.support.test.internal.runner.TestRequestBuilder this$0>;

        $i0 = staticinvoke <android.support.test.internal.runner.TestRequestBuilder: int access$300(android.support.test.internal.runner.TestRequestBuilder)>($r3);

        $i1 = interfaceinvoke r2.<android.support.test.filters.SdkSuppress: int minSdkVersion()>();

        if $i0 >= $i1 goto label1;

        return 0;

     label1:
        return 1;
    }

    private android.support.test.filters.SdkSuppress getAnnotationForTest(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        org.junit.runner.Description r1;
        android.support.test.filters.SdkSuppress r2, $r6;
        java.lang.Class r3;
        java.lang.'annotation'.Annotation $r4, $r5;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $r4 = virtualinvoke r1.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/support/test/filters/SdkSuppress;");

        r2 = (android.support.test.filters.SdkSuppress) $r4;

        if r2 == null goto label1;

        return r2;

     label1:
        r3 = virtualinvoke r1.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if r3 == null goto label2;

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/support/test/filters/SdkSuppress;");

        $r6 = (android.support.test.filters.SdkSuppress) $r5;

        return $r6;

     label2:
        return null;
    }

    public java.lang.String describe()
    {
        android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("skip tests annotated with SdkSuppress if necessary", $r1);

        return $r2;
    }

    void <init>(android.support.test.internal.runner.TestRequestBuilder, android.support.test.internal.runner.TestRequestBuilder$1)
    {
        android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        android.support.test.internal.runner.TestRequestBuilder r1;
        android.support.test.internal.runner.TestRequestBuilder$1 r2;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        r1 := @parameter0: android.support.test.internal.runner.TestRequestBuilder;

        r2 := @parameter1: android.support.test.internal.runner.TestRequestBuilder$1;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: void <init>(android.support.test.internal.runner.TestRequestBuilder)>(r1);

        return;
    }

android.support.test.internal.runner.TestRequestBuilder$ShardingFilter
<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: int mNumShards>
<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: int mShardIndex>
    void <init>(int, int)
    {
        android.support.test.internal.runner.TestRequestBuilder$ShardingFilter r0;
        int i0, i1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ShardingFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.junit.runner.manipulation.Filter: void <init>()>();

        r0.<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: int mNumShards> = i0;

        r0.<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: int mShardIndex> = i1;

        return;
    }

    public boolean shouldRun(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$ShardingFilter r0;
        org.junit.runner.Description r1, r3;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ShardingFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $z0 = virtualinvoke r1.<org.junit.runner.Description: boolean isTest()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r1.<org.junit.runner.Description: int hashCode()>();

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $i2 = r0.<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: int mNumShards>;

        $i4 = $i1 % $i2;

        $i3 = r0.<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: int mShardIndex>;

        if $i4 != $i3 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        $r4 = virtualinvoke r1.<org.junit.runner.Description: java.util.ArrayList getChildren()>();

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.junit.runner.Description) $r5;

        $z2 = virtualinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: boolean shouldRun(org.junit.runner.Description)>(r3);

        if $z2 == 0 goto label5;

        return 1;

     label5:
        goto label4;

     label6:
        return 0;
    }

    public java.lang.String describe()
    {
        android.support.test.internal.runner.TestRequestBuilder$ShardingFilter r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Integer $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$ShardingFilter;

        $r1 = newarray (java.lang.Object)[2];

        $i0 = r0.<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: int mShardIndex>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i1 = r0.<android.support.test.internal.runner.TestRequestBuilder$ShardingFilter: int mNumShards>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Shard %s of %s shards", $r1);

        return $r4;
    }

android.support.test.internal.runner.TestRequestBuilder$SizeFilter
<android.support.test.internal.runner.TestRequestBuilder$SizeFilter: java.util.Set ALL_SIZES>
    void <init>(java.lang.Class)
    {
        android.support.test.internal.runner.TestRequestBuilder$SizeFilter r0;
        java.lang.Class r1;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$SizeFilter;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: void <init>(java.lang.Class)>(r1);

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        android.support.test.internal.runner.TestRequestBuilder$SizeFilter r0;
        org.junit.runner.Description r1;
        java.lang.Class r2, $r5, $r7, $r11;
        java.util.Iterator r3;
        java.lang.'annotation'.Annotation r4, $r6;
        boolean $z0, $z1, $z2;
        java.util.Collection $r8;
        java.lang.Object $r9;
        java.util.Set $r10;

        r0 := @this: android.support.test.internal.runner.TestRequestBuilder$SizeFilter;

        r1 := @parameter0: org.junit.runner.Description;

        r2 = virtualinvoke r1.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        $r5 = virtualinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$SizeFilter: java.lang.Class getAnnotationClass()>();

        $r6 = virtualinvoke r1.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r5);

        if $r6 == null goto label1;

        return 1;

     label1:
        if r2 == null goto label5;

        $r7 = virtualinvoke r0.<android.support.test.internal.runner.TestRequestBuilder$SizeFilter: java.lang.Class getAnnotationClass()>();

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>($r7);

        if $z0 == 0 goto label5;

        $r8 = virtualinvoke r1.<org.junit.runner.Description: java.util.Collection getAnnotations()>();

        r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.'annotation'.Annotation) $r9;

        $r10 = <android.support.test.internal.runner.TestRequestBuilder$SizeFilter: java.util.Set ALL_SIZES>;

        $r11 = interfaceinvoke r4.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z2 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>($r11);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.lang.Class[] $r1;
        java.util.List $r2;
        java.util.Set $r3;

        $r0 = new java.util.HashSet;

        $r1 = newarray (java.lang.Class)[3];

        $r1[0] = class "Landroid/test/suitebuilder/annotation/SmallTest;";

        $r1[1] = class "Landroid/test/suitebuilder/annotation/MediumTest;";

        $r1[2] = class "Landroid/test/suitebuilder/annotation/LargeTest;";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        <android.support.test.internal.runner.TestRequestBuilder$SizeFilter: java.util.Set ALL_SIZES> = $r3;

        return;
    }

