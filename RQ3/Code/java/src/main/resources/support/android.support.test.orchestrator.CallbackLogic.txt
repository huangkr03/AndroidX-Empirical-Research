android.support.test.orchestrator.CallbackLogic
<android.support.test.orchestrator.CallbackLogic: com.google.common.base.Splitter CLASS_METHOD_SPLITTER>
<android.support.test.orchestrator.CallbackLogic: java.util.List listOfTests>
<android.support.test.orchestrator.CallbackLogic: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>
<android.support.test.orchestrator.CallbackLogic: java.lang.Object testLock>
    static void <clinit>()
    {
        com.google.common.base.Splitter $r0;

        $r0 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(char)>(35);

        <android.support.test.orchestrator.CallbackLogic: com.google.common.base.Splitter CLASS_METHOD_SPLITTER> = $r0;

        return;
    }

    void <init>()
    {
        android.support.test.orchestrator.CallbackLogic $r0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;

        $r0 := @this: android.support.test.orchestrator.CallbackLogic;

        specialinvoke $r0.<android.support.test.orchestrator.callback.OrchestratorCallback$Stub: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r0.<android.support.test.orchestrator.CallbackLogic: java.util.List listOfTests> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0.<android.support.test.orchestrator.CallbackLogic: java.lang.Object testLock> = $r2;

        return;
    }

    public void addTest(java.lang.String)
    {
        android.support.test.orchestrator.CallbackLogic $r0;
        java.lang.String $r1, $r6;
        java.lang.Object $r2, $r5;
        com.google.common.base.Splitter $r3;
        java.util.List $r4, $r7;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r8;

        $r0 := @this: android.support.test.orchestrator.CallbackLogic;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.support.test.orchestrator.CallbackLogic: java.lang.Object testLock>;

        entermonitor $r2;

     label1:
        $r3 = <android.support.test.orchestrator.CallbackLogic: com.google.common.base.Splitter CLASS_METHOD_SPLITTER>;

        $r4 = virtualinvoke $r3.<com.google.common.base.Splitter: java.util.List splitToList(java.lang.CharSequence)>($r1);

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 <= 1 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1);

        $r6 = (java.lang.String) $r5;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1);

        $r6 = (java.lang.String) $r5;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("null");

        if $z0 == 0 goto label4;

     label2:
        $r7 = $r0.<android.support.test.orchestrator.CallbackLogic: java.util.List listOfTests>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r1 = (java.lang.String) $r5;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r1);

     label3:
        exitmonitor $r2;

        return;

     label4:
        $r4 = $r0.<android.support.test.orchestrator.CallbackLogic: java.util.List listOfTests>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        goto label3;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor $r2;

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    java.util.List provideCollectedTests()
    {
        android.support.test.orchestrator.CallbackLogic $r0;
        java.lang.Object $r1;
        java.util.List $r2;
        java.util.ArrayList $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.support.test.orchestrator.CallbackLogic;

        $r1 = $r0.<android.support.test.orchestrator.CallbackLogic: java.lang.Object testLock>;

        entermonitor $r1;

     label1:
        $r3 = new java.util.ArrayList;

        $r2 = $r0.<android.support.test.orchestrator.CallbackLogic: java.util.List listOfTests>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

     label2:
        exitmonitor $r1;

        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor $r1;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void sendTestNotification(android.os.Bundle)
    {
        android.support.test.orchestrator.CallbackLogic $r0;
        android.os.Bundle $r1;
        java.lang.Object $r2;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.support.test.orchestrator.CallbackLogic;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = $r0.<android.support.test.orchestrator.CallbackLogic: java.lang.Object testLock>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<android.support.test.orchestrator.CallbackLogic: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "Unable to process test notification. No ListenerManager");

        $r3 = $r0.<android.support.test.orchestrator.CallbackLogic: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        virtualinvoke $r3.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void handleNotification(android.os.Bundle)>($r1);

     label2:
        exitmonitor $r2;

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor $r2;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void setListenerManager(android.support.test.orchestrator.listeners.OrchestrationListenerManager)
    {
        android.support.test.orchestrator.CallbackLogic $r0;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r1, $r4;
        java.lang.Object $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r5;

        $r0 := @this: android.support.test.orchestrator.CallbackLogic;

        $r1 := @parameter0: android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        $r2 = $r0.<android.support.test.orchestrator.CallbackLogic: java.lang.Object testLock>;

        entermonitor $r2;

     label1:
        $r4 = $r0.<android.support.test.orchestrator.CallbackLogic: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        if $r4 != null goto label4;

        $z0 = 1;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Listener manager assigned twice.");

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "Listener manager null");

        $r1 = (android.support.test.orchestrator.listeners.OrchestrationListenerManager) $r3;

        $r0.<android.support.test.orchestrator.CallbackLogic: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager> = $r1;

     label3:
        exitmonitor $r2;

        return;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor $r2;

        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

