android.support.design.internal.ThemeEnforcement
<android.support.design.internal.ThemeEnforcement: int[] APPCOMPAT_CHECK_ATTRS>
<android.support.design.internal.ThemeEnforcement: java.lang.String APPCOMPAT_THEME_NAME>
<android.support.design.internal.ThemeEnforcement: int[] MATERIAL_CHECK_ATTRS>
<android.support.design.internal.ThemeEnforcement: java.lang.String MATERIAL_THEME_NAME>
    private void <init>()
    {
        android.support.design.internal.ThemeEnforcement r0;

        r0 := @this: android.support.design.internal.ThemeEnforcement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.content.res.TypedArray obtainStyledAttributes(android.content.Context, android.util.AttributeSet, int[], int, int)
    {
        android.content.Context r0;
        android.util.AttributeSet r1;
        int[] r2;
        int i0, i1;
        android.content.res.TypedArray $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.AttributeSet;

        r2 := @parameter2: int[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        staticinvoke <android.support.design.internal.ThemeEnforcement: void checkCompatibleTheme(android.content.Context,android.util.AttributeSet,int,int)>(r0, r1, i0, i1);

        $r3 = virtualinvoke r0.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r1, r2, i0, i1);

        return $r3;
    }

    public static android.support.v7.widget.TintTypedArray obtainTintedStyledAttributes(android.content.Context, android.util.AttributeSet, int[], int, int)
    {
        android.content.Context r0;
        android.util.AttributeSet r1;
        int[] r2;
        int i0, i1;
        android.support.v7.widget.TintTypedArray $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.AttributeSet;

        r2 := @parameter2: int[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        staticinvoke <android.support.design.internal.ThemeEnforcement: void checkCompatibleTheme(android.content.Context,android.util.AttributeSet,int,int)>(r0, r1, i0, i1);

        $r3 = staticinvoke <android.support.v7.widget.TintTypedArray: android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>(r0, r1, r2, i0, i1);

        return $r3;
    }

    private static void checkCompatibleTheme(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.content.Context r0;
        android.util.AttributeSet r1;
        int i0, i1, $i2;
        android.content.res.TypedArray r2;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = <android.support.design.internal.R$styleable: int[] ThemeEnforcement>;

        r2 = virtualinvoke r0.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r1, $r3, i0, i1);

        $i2 = <android.support.design.internal.R$styleable: int ThemeEnforcement_enforceMaterialTheme>;

        z0 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i2, 0);

        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        if z0 == 0 goto label1;

        staticinvoke <android.support.design.internal.ThemeEnforcement: void checkMaterialTheme(android.content.Context)>(r0);

     label1:
        staticinvoke <android.support.design.internal.ThemeEnforcement: void checkAppCompatTheme(android.content.Context)>(r0);

        return;
    }

    public static void checkAppCompatTheme(android.content.Context)
    {
        android.content.Context r0;
        int[] $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = <android.support.design.internal.ThemeEnforcement: int[] APPCOMPAT_CHECK_ATTRS>;

        staticinvoke <android.support.design.internal.ThemeEnforcement: void checkTheme(android.content.Context,int[],java.lang.String)>(r0, $r1, "Theme.AppCompat");

        return;
    }

    public static void checkMaterialTheme(android.content.Context)
    {
        android.content.Context r0;
        int[] $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = <android.support.design.internal.ThemeEnforcement: int[] MATERIAL_CHECK_ATTRS>;

        staticinvoke <android.support.design.internal.ThemeEnforcement: void checkTheme(android.content.Context,int[],java.lang.String)>(r0, $r1, "Theme.MaterialComponents");

        return;
    }

    private static void checkTheme(android.content.Context, int[], java.lang.String)
    {
        android.content.Context r0;
        int[] r1;
        java.lang.String r2, $r9;
        android.content.res.TypedArray r3;
        boolean z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: int[];

        r2 := @parameter2: java.lang.String;

        r3 = virtualinvoke r0.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>(r1);

        $z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean hasValue(int)>(0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        if z0 == 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The style on this component requires your app theme to be ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (or a descendant).");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label3:
        return;
    }

    static void <clinit>()
    {
        int[] $r0, $r1;
        int $i0, $i1;

        $r0 = newarray (int)[1];

        $i0 = <android.support.design.internal.R$attr: int colorPrimary>;

        $r0[0] = $i0;

        <android.support.design.internal.ThemeEnforcement: int[] APPCOMPAT_CHECK_ATTRS> = $r0;

        $r1 = newarray (int)[1];

        $i1 = <android.support.design.internal.R$attr: int colorSecondaryLight>;

        $r1[0] = $i1;

        <android.support.design.internal.ThemeEnforcement: int[] MATERIAL_CHECK_ATTRS> = $r1;

        return;
    }

