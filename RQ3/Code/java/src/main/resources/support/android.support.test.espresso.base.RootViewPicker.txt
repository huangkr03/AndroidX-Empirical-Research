android.support.test.espresso.base.RootViewPicker
<android.support.test.espresso.base.RootViewPicker: java.lang.String TAG>
<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList CREATED_WAIT_TIMES>
<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList RESUMED_WAIT_TIMES>
<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.UiController uiController>
<android.support.test.espresso.base.RootViewPicker: android.support.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>
<android.support.test.espresso.base.RootViewPicker: java.util.concurrent.atomic.AtomicReference needsActivity>
<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.base.RootViewPicker$RootResultFetcher rootResultFetcher>
    void <init>(android.support.test.espresso.UiController, android.support.test.espresso.base.RootViewPicker$RootResultFetcher, android.support.test.runner.lifecycle.ActivityLifecycleMonitor, java.util.concurrent.atomic.AtomicReference)
    {
        android.support.test.espresso.base.RootViewPicker r0;
        android.support.test.espresso.UiController r1;
        android.support.test.espresso.base.RootViewPicker$RootResultFetcher r2;
        android.support.test.runner.lifecycle.ActivityLifecycleMonitor r3;
        java.util.concurrent.atomic.AtomicReference r4;

        r0 := @this: android.support.test.espresso.base.RootViewPicker;

        r1 := @parameter0: android.support.test.espresso.UiController;

        r2 := @parameter1: android.support.test.espresso.base.RootViewPicker$RootResultFetcher;

        r3 := @parameter2: android.support.test.runner.lifecycle.ActivityLifecycleMonitor;

        r4 := @parameter3: java.util.concurrent.atomic.AtomicReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.UiController uiController> = r1;

        r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.base.RootViewPicker$RootResultFetcher rootResultFetcher> = r2;

        r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor> = r3;

        r0.<android.support.test.espresso.base.RootViewPicker: java.util.concurrent.atomic.AtomicReference needsActivity> = r4;

        return;
    }

    public android.view.View get()
    {
        android.support.test.espresso.base.RootViewPicker r0;
        android.os.Looper $r1, $r2;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicReference $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        android.view.View $r6;

        r0 := @this: android.support.test.espresso.base.RootViewPicker;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "must be called on main thread.");

        $r3 = r0.<android.support.test.espresso.base.RootViewPicker: java.util.concurrent.atomic.AtomicReference needsActivity>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r5 = (java.lang.Boolean) $r4;

        $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<android.support.test.espresso.base.RootViewPicker: void waitForAtLeastOneActivityToBeResumed()>();

     label1:
        $r6 = specialinvoke r0.<android.support.test.espresso.base.RootViewPicker: android.view.View pickRootView()>();

        return $r6;
    }

    private android.support.test.espresso.Root waitForRootToBeReady(android.support.test.espresso.Root)
    {
        android.support.test.espresso.base.RootViewPicker r0;
        android.support.test.espresso.Root r1;
        long l0, $l1, $l2, $l3, $l5;
        android.support.test.espresso.base.RootViewPicker$RootReadyBackoff r2, r9;
        java.util.concurrent.TimeUnit $r3;
        byte $b4;
        java.lang.Object[] $r6;
        java.lang.String $r7;
        boolean $z0;
        android.support.test.espresso.UiController $r8;
        java.lang.RuntimeException r10;
        java.lang.Throwable r11;

        r0 := @this: android.support.test.espresso.base.RootViewPicker;

        r1 := @parameter0: android.support.test.espresso.Root;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>(10L);

        l0 = $l1 + $l2;

        r9 = new android.support.test.espresso.base.RootViewPicker$RootReadyBackoff;

        specialinvoke r9.<android.support.test.espresso.base.RootViewPicker$RootReadyBackoff: void <init>()>();

        r2 = r9;

     label1:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b4 = $l3 cmp l0;

        if $b4 > 0 goto label3;

        $z0 = virtualinvoke r1.<android.support.test.espresso.Root: boolean isReady()>();

        if $z0 == 0 goto label2;

        return r1;

     label2:
        $r8 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.UiController uiController>;

        $l5 = virtualinvoke r2.<android.support.test.espresso.base.RootViewPicker$BackOff: long getNextBackoffInMillis()>();

        interfaceinvoke $r8.<android.support.test.espresso.UiController: void loopMainThreadForAtLeast(long)>($l5);

        goto label1;

     label3:
        r10 = new java.lang.RuntimeException;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Waited for the root of the view hierarchy to have window focus and not request layout for 10 seconds. If you specified a non default root matcher, it may be picking a root that never takes focus. Root:\n%s", $r6);

        specialinvoke r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        r11 = (java.lang.Throwable) r10;

        throw r11;
    }

    private android.support.test.espresso.Root pickARoot()
    {
        android.support.test.espresso.base.RootViewPicker r0;
        long l0, $l1, $l2, $l3, $l7, $l8;
        android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff r1, r20;
        android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff r2, r21;
        java.util.concurrent.TimeUnit $r3;
        android.support.test.espresso.base.RootViewPicker$RootResultFetcher $r4, $r19;
        byte $b4;
        android.support.test.espresso.base.RootViewPicker$RootResults$State $r7, $r8, $r14;
        org.hamcrest.Matcher $r9;
        java.util.List $r10;
        android.support.test.espresso.NoMatchingRootException $r11;
        android.support.test.espresso.Root $r12, $r17;
        int[] $r13;
        int $i5, $i6;
        android.support.test.espresso.UiController $r15, $r16;
        android.support.test.espresso.base.RootViewPicker$RootResults r18;
        java.lang.Throwable r22;

        r0 := @this: android.support.test.espresso.base.RootViewPicker;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>(60L);

        l0 = $l1 + $l2;

        $r4 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.base.RootViewPicker$RootResultFetcher rootResultFetcher>;

        r18 = virtualinvoke $r4.<android.support.test.espresso.base.RootViewPicker$RootResultFetcher: android.support.test.espresso.base.RootViewPicker$RootResults fetch()>();

        r20 = new android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff;

        specialinvoke r20.<android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: void <init>()>();

        r1 = r20;

        r21 = new android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff;

        specialinvoke r21.<android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: void <init>()>();

        r2 = r21;

     label1:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b4 = $l3 cmp l0;

        if $b4 > 0 goto label6;

        $r13 = <android.support.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$android$support$test$espresso$base$RootViewPicker$RootResults$State>;

        $r14 = virtualinvoke r18.<android.support.test.espresso.base.RootViewPicker$RootResults: android.support.test.espresso.base.RootViewPicker$RootResults$State getState()>();

        $i5 = virtualinvoke $r14.<android.support.test.espresso.base.RootViewPicker$RootResults$State: int ordinal()>();

        $i6 = $r13[$i5];

        tableswitch($i6)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label2:
        $r17 = virtualinvoke r18.<android.support.test.espresso.base.RootViewPicker$RootResults: android.support.test.espresso.Root getPickedRoot()>();

        return $r17;

     label3:
        $r16 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.UiController uiController>;

        $l8 = virtualinvoke r1.<android.support.test.espresso.base.RootViewPicker$BackOff: long getNextBackoffInMillis()>();

        interfaceinvoke $r16.<android.support.test.espresso.UiController: void loopMainThreadForAtLeast(long)>($l8);

        goto label5;

     label4:
        $r15 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.UiController uiController>;

        $l7 = virtualinvoke r2.<android.support.test.espresso.base.RootViewPicker$BackOff: long getNextBackoffInMillis()>();

        interfaceinvoke $r15.<android.support.test.espresso.UiController: void loopMainThreadForAtLeast(long)>($l7);

     label5:
        $r19 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.base.RootViewPicker$RootResultFetcher rootResultFetcher>;

        r18 = virtualinvoke $r19.<android.support.test.espresso.base.RootViewPicker$RootResultFetcher: android.support.test.espresso.base.RootViewPicker$RootResults fetch()>();

        goto label1;

     label6:
        $r7 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>;

        $r8 = virtualinvoke r18.<android.support.test.espresso.base.RootViewPicker$RootResults: android.support.test.espresso.base.RootViewPicker$RootResults$State getState()>();

        if $r7 != $r8 goto label7;

        $r12 = virtualinvoke r18.<android.support.test.espresso.base.RootViewPicker$RootResults: android.support.test.espresso.Root getPickedRoot()>();

        return $r12;

     label7:
        $r9 = staticinvoke <android.support.test.espresso.base.RootViewPicker$RootResults: org.hamcrest.Matcher access$000(android.support.test.espresso.base.RootViewPicker$RootResults)>(r18);

        $r10 = staticinvoke <android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List access$100(android.support.test.espresso.base.RootViewPicker$RootResults)>(r18);

        $r11 = staticinvoke <android.support.test.espresso.NoMatchingRootException: android.support.test.espresso.NoMatchingRootException create(org.hamcrest.Matcher,java.util.List)>($r9, $r10);

        r22 = (java.lang.Throwable) $r11;

        throw r22;
    }

    private android.view.View pickRootView()
    {
        android.support.test.espresso.base.RootViewPicker r0;
        android.support.test.espresso.Root $r1, $r2;
        android.view.View $r3;

        r0 := @this: android.support.test.espresso.base.RootViewPicker;

        $r1 = specialinvoke r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.Root pickARoot()>();

        $r2 = specialinvoke r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.Root waitForRootToBeReady(android.support.test.espresso.Root)>($r1);

        $r3 = virtualinvoke $r2.<android.support.test.espresso.Root: android.view.View getDecorView()>();

        return $r3;
    }

    private void waitForAtLeastOneActivityToBeResumed()
    {
        android.support.test.espresso.base.RootViewPicker r0;
        java.util.ArrayList r1;
        java.util.Iterator r2;
        android.support.test.runner.lifecycle.Stage r3, $r4, $r18, $r23, $r24, $r37;
        android.support.test.runner.lifecycle.ActivityLifecycleMonitor $r5, $r19, $r34, $r38;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList $r6, $r7;
        java.lang.Object $r9, $r21, $r33;
        java.lang.Integer $r10, $r22;
        int $i0, $i2;
        java.lang.String $r12, $r16, $r27, $r31;
        java.lang.StringBuilder $r13, $r14, $r15, $r28, $r29, $r30, r43, r45;
        android.support.test.espresso.UiController $r17, $r32, $r36;
        java.util.EnumSet $r25;
        java.util.Collection $r35, r39, r42;
        android.support.test.espresso.core.internal.deps.guava.collect.UnmodifiableIterator r40, r41;
        long l4, l5;
        java.lang.RuntimeException r44;
        android.support.test.espresso.NoActivityResumedException r46;
        java.util.List r47, r48, r49;
        java.lang.Throwable r50, r51;

        r0 := @this: android.support.test.espresso.base.RootViewPicker;

        $r5 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>;

        $r4 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage RESUMED>;

        r39 = interfaceinvoke $r5.<android.support.test.runner.lifecycle.ActivityLifecycleMonitor: java.util.Collection getActivitiesInStage(android.support.test.runner.lifecycle.Stage)>($r4);

        $z0 = interfaceinvoke r39.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r36 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.UiController uiController>;

        interfaceinvoke $r36.<android.support.test.espresso.UiController: void loopMainThreadUntilIdle()>();

        $r38 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>;

        $r37 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage RESUMED>;

        r39 = interfaceinvoke $r38.<android.support.test.runner.lifecycle.ActivityLifecycleMonitor: java.util.Collection getActivitiesInStage(android.support.test.runner.lifecycle.Stage)>($r37);

     label01:
        $z1 = interfaceinvoke r39.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label11;

        r1 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        $r6 = <android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList CREATED_WAIT_TIMES>;

        r40 = virtualinvoke $r6.<android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList: android.support.test.espresso.core.internal.deps.guava.collect.UnmodifiableIterator iterator()>();

     label02:
        $z2 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r21 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        $r22 = (java.lang.Integer) $r21;

        $i2 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        l4 = (long) $i2;

        $r24 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage PRE_ON_CREATE>;

        $r23 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage RESTARTED>;

        $r25 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>($r24, $r23);

        r2 = virtualinvoke $r25.<java.util.EnumSet: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label04;

        $r33 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.support.test.runner.lifecycle.Stage) $r33;

        $r34 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>;

        $r35 = interfaceinvoke $r34.<android.support.test.runner.lifecycle.ActivityLifecycleMonitor: java.util.Collection getActivitiesInStage(android.support.test.runner.lifecycle.Stage)>(r3);

        r47 = (java.util.List) r1;

        interfaceinvoke r47.<java.util.List: boolean addAll(java.util.Collection)>($r35);

        goto label03;

     label04:
        r48 = (java.util.List) r1;

        $z7 = interfaceinvoke r48.<java.util.List: boolean isEmpty()>();

        if $z7 != 0 goto label05;

        goto label06;

     label05:
        $r27 = <android.support.test.espresso.base.RootViewPicker: java.lang.String TAG>;

        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>(int)>(72);

        $r28 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No activities found - waiting: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms for one to appear.");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r27, $r31);

        $r32 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.UiController uiController>;

        interfaceinvoke $r32.<android.support.test.espresso.UiController: void loopMainThreadForAtLeast(long)>(l4);

        goto label02;

     label06:
        r49 = (java.util.List) r1;

        $z3 = interfaceinvoke r49.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label07;

        r44 = new java.lang.RuntimeException;

        specialinvoke r44.<java.lang.RuntimeException: void <init>(java.lang.String)>("No activities found. Did you t to launch the activity by calling getActivity() or startActivitySync or similar?");

        r50 = (java.lang.Throwable) r44;

        throw r50;

     label07:
        $r7 = <android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList RESUMED_WAIT_TIMES>;

        r41 = virtualinvoke $r7.<android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList: android.support.test.espresso.core.internal.deps.guava.collect.UnmodifiableIterator iterator()>();

     label08:
        $z4 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r9 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Integer) $r9;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        l5 = (long) $i0;

        $r12 = <android.support.test.espresso.base.RootViewPicker: java.lang.String TAG>;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>(int)>(82);

        $r13 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No activity currently resumed - waiting: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms for one to appear.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r12, $r16);

        $r17 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.UiController uiController>;

        interfaceinvoke $r17.<android.support.test.espresso.UiController: void loopMainThreadForAtLeast(long)>(l5);

        $r19 = r0.<android.support.test.espresso.base.RootViewPicker: android.support.test.runner.lifecycle.ActivityLifecycleMonitor activityLifecycleMonitor>;

        $r18 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage RESUMED>;

        r42 = interfaceinvoke $r19.<android.support.test.runner.lifecycle.ActivityLifecycleMonitor: java.util.Collection getActivitiesInStage(android.support.test.runner.lifecycle.Stage)>($r18);

        $z5 = interfaceinvoke r42.<java.util.Collection: boolean isEmpty()>();

        if $z5 != 0 goto label09;

        return;

     label09:
        goto label08;

     label10:
        r46 = new android.support.test.espresso.NoActivityResumedException;

        specialinvoke r46.<android.support.test.espresso.NoActivityResumedException: void <init>(java.lang.String)>("No activities in stage RESUMED. Did you t to launch the activity. (test.getActivity() or similar)?");

        r51 = (java.lang.Throwable) r46;

        throw r51;

     label11:
        return;
    }

    public volatile java.lang.Object get()
    {
        android.support.test.espresso.base.RootViewPicker r0;
        android.view.View $r1;

        r0 := @this: android.support.test.espresso.base.RootViewPicker;

        $r1 = virtualinvoke r0.<android.support.test.espresso.base.RootViewPicker: android.view.View get()>();

        return $r1;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = <android.support.test.espresso.base.RootViewPicker: java.lang.String TAG>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.lang.Integer $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList $r6, $r13;

        $r0 = class "Landroid/support/test/espresso/base/RootViewPicker;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.support.test.espresso.base.RootViewPicker: java.lang.String TAG> = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(150);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(250);

        $r6 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r4, $r5);

        <android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList CREATED_WAIT_TIMES> = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(500);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2000);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30000);

        $r13 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r7, $r8, $r9, $r10, $r11, $r12);

        <android.support.test.espresso.base.RootViewPicker: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList RESUMED_WAIT_TIMES> = $r13;

        return;
    }

android.support.test.espresso.base.RootViewPicker$1
<android.support.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$android$support$test$espresso$base$RootViewPicker$RootResults$State>
    static void <clinit>()
    {
        android.support.test.espresso.base.RootViewPicker$RootResults$State[] $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1, $r3, $r5, $r7;
        android.support.test.espresso.base.RootViewPicker$RootResults$State $r2, $r4, $r6;
        java.lang.Throwable $r8, $r9, $r10, r11, r12, r13;

        $r0 = staticinvoke <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <android.support.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$android$support$test$espresso$base$RootViewPicker$RootResults$State> = $r1;

     label01:
        $r3 = <android.support.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$android$support$test$espresso$base$RootViewPicker$RootResults$State>;

        $r2 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>;

        $i1 = virtualinvoke $r2.<android.support.test.espresso.base.RootViewPicker$RootResults$State: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        r11 = $r10;

     label04:
        $r5 = <android.support.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$android$support$test$espresso$base$RootViewPicker$RootResults$State>;

        $r4 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT>;

        $i2 = virtualinvoke $r4.<android.support.test.espresso.base.RootViewPicker$RootResults$State: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

        r12 = $r8;

     label07:
        $r7 = <android.support.test.espresso.base.RootViewPicker$1: int[] $SwitchMap$android$support$test$espresso$base$RootViewPicker$RootResults$State>;

        $r6 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>;

        $i3 = virtualinvoke $r6.<android.support.test.espresso.base.RootViewPicker$RootResults$State: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        r13 = $r9;

     label10:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
    }

android.support.test.espresso.base.RootViewPicker$BackOff
<android.support.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>
<android.support.test.espresso.base.RootViewPicker$BackOff: java.util.concurrent.TimeUnit timeUnit>
<android.support.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts>
    public void <init>(java.util.List, java.util.concurrent.TimeUnit)
    {
        android.support.test.espresso.base.RootViewPicker$BackOff r0;
        java.util.List r1;
        java.util.concurrent.TimeUnit r2;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$BackOff;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.TimeUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts> = 0;

        r0.<android.support.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes> = r1;

        r0.<android.support.test.espresso.base.RootViewPicker$BackOff: java.util.concurrent.TimeUnit timeUnit> = r2;

        return;
    }

<android.support.test.espresso.base.RootViewPicker$BackOff: long getNextBackoffInMillis()>
    protected final long getBackoffForAttempt()
    {
        android.support.test.espresso.base.RootViewPicker$BackOff r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10;
        java.util.List $r1, $r2, $r6, $r7;
        java.lang.Object $r3, $r8;
        java.lang.Integer $r4, $r9;
        long $l6, $l7, $l11;
        java.util.concurrent.TimeUnit $r5;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$BackOff;

        $i1 = r0.<android.support.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts>;

        $r1 = r0.<android.support.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 < $i2 goto label1;

        $r7 = r0.<android.support.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>;

        $r6 = r0.<android.support.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>;

        $i8 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i9 = $i8 - 1;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i9);

        $r9 = (java.lang.Integer) $r8;

        $i10 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $l11 = (long) $i10;

        return $l11;

     label1:
        $r2 = r0.<android.support.test.espresso.base.RootViewPicker$BackOff: java.util.List backoffTimes>;

        $i3 = r0.<android.support.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i3);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i4 = r0.<android.support.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts>;

        $i5 = $i4 + 1;

        r0.<android.support.test.espresso.base.RootViewPicker$BackOff: int numberOfAttempts> = $i5;

        $r5 = r0.<android.support.test.espresso.base.RootViewPicker$BackOff: java.util.concurrent.TimeUnit timeUnit>;

        $l6 = (long) i0;

        $l7 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>($l6);

        return $l7;
    }

android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff
<android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_ACTIVE_ROOTS_BACKOFF>
    public void <init>()
    {
        android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff r0;
        java.util.concurrent.TimeUnit $r1;
        android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList $r2;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff;

        $r2 = <android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_ACTIVE_ROOTS_BACKOFF>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<android.support.test.espresso.base.RootViewPicker$BackOff: void <init>(java.util.List,java.util.concurrent.TimeUnit)>($r2, $r1);

        return;
    }

    public long getNextBackoffInMillis()
    {
        android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff r0;
        long l0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff;

        l0 = virtualinvoke r0.<android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: long getBackoffForAttempt()>();

        $r1 = staticinvoke <android.support.test.espresso.base.RootViewPicker: java.lang.String access$200()>();

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[0] = $r3;

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>($r1, "No active roots available - waiting: %sms for one to appear.", $r2);

        return l0;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList $r9;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(130);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(210);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(340);

        $r9 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8);

        <android.support.test.espresso.base.RootViewPicker$NoActiveRootsBackoff: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_ACTIVE_ROOTS_BACKOFF> = $r9;

        return;
    }

android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff
<android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_MATCHING_ROOT_BACKOFF>
    public void <init>()
    {
        android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff r0;
        java.util.concurrent.TimeUnit $r1;
        android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList $r2;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff;

        $r2 = <android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_MATCHING_ROOT_BACKOFF>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<android.support.test.espresso.base.RootViewPicker$BackOff: void <init>(java.util.List,java.util.concurrent.TimeUnit)>($r2, $r1);

        return;
    }

    public long getNextBackoffInMillis()
    {
        android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff r0;
        long l0;
        java.lang.String $r1, $r4;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff;

        l0 = virtualinvoke r0.<android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: long getBackoffForAttempt()>();

        $r1 = staticinvoke <android.support.test.espresso.base.RootViewPicker: java.lang.String access$200()>();

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No matching root available - waiting: %sms for one to appear.", $r2);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, $r4);

        return l0;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2, $r3, $r4, $r5;
        android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList $r6;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(400);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2000);

        $r6 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2, $r3, $r4, $r5);

        <android.support.test.espresso.base.RootViewPicker$NoMatchingRootBackoff: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList NO_MATCHING_ROOT_BACKOFF> = $r6;

        return;
    }

android.support.test.espresso.base.RootViewPicker$RootReadyBackoff
<android.support.test.espresso.base.RootViewPicker$RootReadyBackoff: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList ROOT_READY_BACKOFF>
    public void <init>()
    {
        android.support.test.espresso.base.RootViewPicker$RootReadyBackoff r0;
        java.util.concurrent.TimeUnit $r1;
        android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList $r2;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootReadyBackoff;

        $r2 = <android.support.test.espresso.base.RootViewPicker$RootReadyBackoff: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList ROOT_READY_BACKOFF>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<android.support.test.espresso.base.RootViewPicker$BackOff: void <init>(java.util.List,java.util.concurrent.TimeUnit)>($r2, $r1);

        return;
    }

    public long getNextBackoffInMillis()
    {
        android.support.test.espresso.base.RootViewPicker$RootReadyBackoff r0;
        long l0;
        java.lang.String $r1, $r4;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootReadyBackoff;

        l0 = virtualinvoke r0.<android.support.test.espresso.base.RootViewPicker$RootReadyBackoff: long getBackoffForAttempt()>();

        $r1 = staticinvoke <android.support.test.espresso.base.RootViewPicker: java.lang.String access$200()>();

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Root not ready - waiting: %sms for one to appear.", $r2);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r1, $r4);

        return l0;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList $r8;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(25);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(400);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(800);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        $r8 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7);

        <android.support.test.espresso.base.RootViewPicker$RootReadyBackoff: android.support.test.espresso.core.internal.deps.guava.collect.ImmutableList ROOT_READY_BACKOFF> = $r8;

        return;
    }

android.support.test.espresso.base.RootViewPicker$RootResultFetcher
<android.support.test.espresso.base.RootViewPicker$RootResultFetcher: org.hamcrest.Matcher selector>
<android.support.test.espresso.base.RootViewPicker$RootResultFetcher: android.support.test.espresso.base.ActiveRootLister activeRootLister>
    public void <init>(android.support.test.espresso.base.ActiveRootLister, java.util.concurrent.atomic.AtomicReference)
    {
        android.support.test.espresso.base.RootViewPicker$RootResultFetcher r0;
        android.support.test.espresso.base.ActiveRootLister r1;
        java.util.concurrent.atomic.AtomicReference r2;
        java.lang.Object $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootResultFetcher;

        r1 := @parameter0: android.support.test.espresso.base.ActiveRootLister;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.base.RootViewPicker$RootResultFetcher: android.support.test.espresso.base.ActiveRootLister activeRootLister> = r1;

        $r3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (org.hamcrest.Matcher) $r3;

        r0.<android.support.test.espresso.base.RootViewPicker$RootResultFetcher: org.hamcrest.Matcher selector> = $r4;

        return;
    }

    public android.support.test.espresso.base.RootViewPicker$RootResults fetch()
    {
        android.support.test.espresso.base.RootViewPicker$RootResultFetcher r0;
        java.util.List r1, r11, r12;
        java.util.ArrayList r2;
        java.util.Iterator r3;
        android.support.test.espresso.Root r4;
        android.support.test.espresso.base.ActiveRootLister $r5;
        boolean $z0, $z1;
        org.hamcrest.Matcher $r7, $r9;
        java.lang.Object $r8;
        android.support.test.espresso.base.RootViewPicker$RootResults r10;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootResultFetcher;

        $r5 = r0.<android.support.test.espresso.base.RootViewPicker$RootResultFetcher: android.support.test.espresso.base.ActiveRootLister activeRootLister>;

        r1 = interfaceinvoke $r5.<android.support.test.espresso.base.ActiveRootLister: java.util.List listActiveRoots()>();

        r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.support.test.espresso.Root) $r8;

        $r9 = r0.<android.support.test.espresso.base.RootViewPicker$RootResultFetcher: org.hamcrest.Matcher selector>;

        $z1 = interfaceinvoke $r9.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        r11 = (java.util.List) r2;

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        r10 = new android.support.test.espresso.base.RootViewPicker$RootResults;

        $r7 = r0.<android.support.test.espresso.base.RootViewPicker$RootResultFetcher: org.hamcrest.Matcher selector>;

        r12 = (java.util.List) r2;

        specialinvoke r10.<android.support.test.espresso.base.RootViewPicker$RootResults: void <init>(java.util.List,java.util.List,org.hamcrest.Matcher,android.support.test.espresso.base.RootViewPicker$1)>(r1, r12, $r7, null);

        return r10;
    }

android.support.test.espresso.base.RootViewPicker$RootResults$State
<android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT>
<android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>
<android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>
<android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State[] $VALUES>
    public static android.support.test.espresso.base.RootViewPicker$RootResults$State[] values()
    {
        android.support.test.espresso.base.RootViewPicker$RootResults$State[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (android.support.test.espresso.base.RootViewPicker$RootResults$State[]) $r1;

        return $r2;
    }

    public static android.support.test.espresso.base.RootViewPicker$RootResults$State valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        android.support.test.espresso.base.RootViewPicker$RootResults$State $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/support/test/espresso/base/RootViewPicker$RootResults$State;", r0);

        $r2 = (android.support.test.espresso.base.RootViewPicker$RootResults$State) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        android.support.test.espresso.base.RootViewPicker$RootResults$State r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootResults$State;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        android.support.test.espresso.base.RootViewPicker$RootResults$State $r0, $r1, $r2, $r4, $r5, $r6;
        android.support.test.espresso.base.RootViewPicker$RootResults$State[] $r3;

        $r0 = new android.support.test.espresso.base.RootViewPicker$RootResults$State;

        specialinvoke $r0.<android.support.test.espresso.base.RootViewPicker$RootResults$State: void <init>(java.lang.String,int)>("NO_ROOTS_PRESENT", 0);

        <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT> = $r0;

        $r1 = new android.support.test.espresso.base.RootViewPicker$RootResults$State;

        specialinvoke $r1.<android.support.test.espresso.base.RootViewPicker$RootResults$State: void <init>(java.lang.String,int)>("NO_ROOTS_PICKED", 1);

        <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED> = $r1;

        $r2 = new android.support.test.espresso.base.RootViewPicker$RootResults$State;

        specialinvoke $r2.<android.support.test.espresso.base.RootViewPicker$RootResults$State: void <init>(java.lang.String,int)>("ROOTS_PICKED", 2);

        <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED> = $r2;

        $r3 = newarray (android.support.test.espresso.base.RootViewPicker$RootResults$State)[3];

        $r4 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT>;

        $r3[0] = $r4;

        $r5 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>;

        $r3[1] = $r5;

        $r6 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>;

        $r3[2] = $r6;

        <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State[] $VALUES> = $r3;

        return;
    }

android.support.test.espresso.base.RootViewPicker$RootResults
<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List allRoots>
<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>
<android.support.test.espresso.base.RootViewPicker$RootResults: org.hamcrest.Matcher rootSelector>
    private void <init>(java.util.List, java.util.List, org.hamcrest.Matcher)
    {
        android.support.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.List r1, r2;
        org.hamcrest.Matcher r3;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootResults;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.hamcrest.Matcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List allRoots> = r1;

        r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots> = r2;

        r0.<android.support.test.espresso.base.RootViewPicker$RootResults: org.hamcrest.Matcher rootSelector> = r3;

        return;
    }

    private static boolean isTopmostRoot(android.support.test.espresso.Root, android.support.test.espresso.Root)
    {
        android.support.test.espresso.Root r0, r1;
        android.support.test.espresso.util.EspressoOptional $r2, $r5;
        java.lang.Object $r3, $r6;
        android.view.WindowManager$LayoutParams $r4, $r7;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: android.support.test.espresso.Root;

        r1 := @parameter1: android.support.test.espresso.Root;

        $r2 = virtualinvoke r1.<android.support.test.espresso.Root: android.support.test.espresso.util.EspressoOptional getWindowLayoutParams()>();

        $r3 = virtualinvoke $r2.<android.support.test.espresso.util.EspressoOptional: java.lang.Object get()>();

        $r4 = (android.view.WindowManager$LayoutParams) $r3;

        $i0 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        $r5 = virtualinvoke r0.<android.support.test.espresso.Root: android.support.test.espresso.util.EspressoOptional getWindowLayoutParams()>();

        $r6 = virtualinvoke $r5.<android.support.test.espresso.util.EspressoOptional: java.lang.Object get()>();

        $r7 = (android.view.WindowManager$LayoutParams) $r6;

        $i1 = $r7.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 <= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.support.test.espresso.base.RootViewPicker$RootResults$State getState()
    {
        android.support.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.List $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0;
        android.support.test.espresso.base.RootViewPicker$RootResults$State $r4, $r5, $r6, $r7;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootResults;

        $r1 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List allRoots>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r7 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PRESENT>;

        return $r7;

     label1:
        $r2 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r6 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>;

        return $r6;

     label2:
        $r3 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 < 1 goto label3;

        $r5 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State ROOTS_PICKED>;

        return $r5;

     label3:
        $r4 = <android.support.test.espresso.base.RootViewPicker$RootResults$State: android.support.test.espresso.base.RootViewPicker$RootResults$State NO_ROOTS_PICKED>;

        return $r4;
    }

    private android.support.test.espresso.Root getRootFromMultipleRoots()
    {
        android.support.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.Iterator r1;
        android.support.test.espresso.Root r2, r9;
        java.util.List $r3, $r5, $r6;
        java.lang.Object $r4, $r7;
        int $i0;
        boolean $z0, $z1, $z2;
        org.hamcrest.Matcher $r8;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootResults;

        $r3 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r9 = (android.support.test.espresso.Root) $r4;

        $r5 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i0 < 1 goto label4;

        $r6 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        r1 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.support.test.espresso.Root) $r7;

        $r8 = staticinvoke <android.support.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher isDialog()>();

        $z1 = interfaceinvoke $r8.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        return r2;

     label2:
        $z2 = staticinvoke <android.support.test.espresso.base.RootViewPicker$RootResults: boolean isTopmostRoot(android.support.test.espresso.Root,android.support.test.espresso.Root)>(r9, r2);

        if $z2 == 0 goto label3;

        r9 = r2;

     label3:
        goto label1;

     label4:
        return r9;
    }

    public android.support.test.espresso.Root getPickedRoot()
    {
        android.support.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.List $r1, $r2, $r7;
        int $i0;
        java.lang.Object $r3;
        android.support.test.espresso.Root $r4, $r8;
        java.lang.String $r5;
        java.lang.Object[] $r6;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootResults;

        $r1 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        $r5 = staticinvoke <android.support.test.espresso.base.RootViewPicker: java.lang.String access$200()>();

        $r6 = newarray (java.lang.Object)[1];

        $r7 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $r6[0] = $r7;

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>($r5, "Multiple root windows detected: %s", $r6);

        $r8 = specialinvoke r0.<android.support.test.espresso.base.RootViewPicker$RootResults: android.support.test.espresso.Root getRootFromMultipleRoots()>();

        return $r8;

     label1:
        $r2 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List pickedRoots>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (android.support.test.espresso.Root) $r3;

        return $r4;
    }

    static org.hamcrest.Matcher access$000(android.support.test.espresso.base.RootViewPicker$RootResults)
    {
        android.support.test.espresso.base.RootViewPicker$RootResults r0;
        org.hamcrest.Matcher $r1;

        r0 := @parameter0: android.support.test.espresso.base.RootViewPicker$RootResults;

        $r1 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: org.hamcrest.Matcher rootSelector>;

        return $r1;
    }

    static java.util.List access$100(android.support.test.espresso.base.RootViewPicker$RootResults)
    {
        android.support.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.espresso.base.RootViewPicker$RootResults;

        $r1 = r0.<android.support.test.espresso.base.RootViewPicker$RootResults: java.util.List allRoots>;

        return $r1;
    }

    void <init>(java.util.List, java.util.List, org.hamcrest.Matcher, android.support.test.espresso.base.RootViewPicker$1)
    {
        android.support.test.espresso.base.RootViewPicker$RootResults r0;
        java.util.List r1, r2;
        org.hamcrest.Matcher r3;
        android.support.test.espresso.base.RootViewPicker$1 r4;

        r0 := @this: android.support.test.espresso.base.RootViewPicker$RootResults;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.hamcrest.Matcher;

        r4 := @parameter3: android.support.test.espresso.base.RootViewPicker$1;

        specialinvoke r0.<android.support.test.espresso.base.RootViewPicker$RootResults: void <init>(java.util.List,java.util.List,org.hamcrest.Matcher)>(r1, r2, r3);

        return;
    }

