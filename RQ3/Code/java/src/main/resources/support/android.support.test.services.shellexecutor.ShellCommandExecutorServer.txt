android.support.test.services.shellexecutor.ShellCommandExecutorServer
<android.support.test.services.shellexecutor.ShellCommandExecutorServer: java.lang.String TAG>
<android.support.test.services.shellexecutor.ShellCommandExecutorServer: java.util.concurrent.ExecutorService executor>
<android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.os.HandlerThread handlerThread>
<android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.support.test.services.shellexecutor.ShellCommandExecutor shellCommandExecutor>
    static void <clinit>()
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r0;
        java.util.concurrent.ThreadFactory $r1;
        java.util.concurrent.ExecutorService $r2;

        $r0 = new com.google.common.util.concurrent.ThreadFactoryBuilder;

        specialinvoke $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>("ShellCmdExec #%d");

        $r1 = virtualinvoke $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>();

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>($r1);

        <android.support.test.services.shellexecutor.ShellCommandExecutorServer: java.util.concurrent.ExecutorService executor> = $r2;

        return;
    }

    void <init>()
    {
        android.support.test.services.shellexecutor.ShellCommandExecutorServer $r0;
        android.support.test.services.shellexecutor.ShellCommandExecutor $r1;
        java.util.concurrent.ExecutorService $r2;
        android.os.HandlerThread $r3;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutorServer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new android.support.test.services.shellexecutor.ShellCommandExecutor;

        $r2 = <android.support.test.services.shellexecutor.ShellCommandExecutorServer: java.util.concurrent.ExecutorService executor>;

        specialinvoke $r1.<android.support.test.services.shellexecutor.ShellCommandExecutor: void <init>(java.util.concurrent.ExecutorService)>($r2);

        $r0.<android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.support.test.services.shellexecutor.ShellCommandExecutor shellCommandExecutor> = $r1;

        $r3 = new android.os.HandlerThread;

        specialinvoke $r3.<android.os.HandlerThread: void <init>(java.lang.String)>("SpeakEasyPublish");

        $r0.<android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.os.HandlerThread handlerThread> = $r3;

        return;
    }

    static android.support.test.services.shellexecutor.ShellCommandExecutor access$000(android.support.test.services.shellexecutor.ShellCommandExecutorServer)
    {
        android.support.test.services.shellexecutor.ShellCommandExecutorServer $r0;
        android.support.test.services.shellexecutor.ShellCommandExecutor r1;

        $r0 := @parameter0: android.support.test.services.shellexecutor.ShellCommandExecutorServer;

        r1 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.support.test.services.shellexecutor.ShellCommandExecutor shellCommandExecutor>;

        return r1;
    }

    java.lang.String start() throws java.lang.InterruptedException
    {
        android.support.test.services.shellexecutor.ShellCommandExecutorServer $r0;
        android.os.HandlerThread $r1;
        boolean $z0;
        android.os.Looper $r2;
        android.os.IBinder $r3;
        android.support.test.services.speakeasy.SpeakEasyProtocol$PublishResult $r4;
        java.lang.String $r5;
        android.support.test.services.shellexecutor.ShellCommandExecutorServer$1 r6;
        java.lang.RuntimeException r7;
        java.lang.Throwable r8;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutorServer;

        $r1 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.os.HandlerThread handlerThread>;

        $z0 = virtualinvoke $r1.<android.os.HandlerThread: boolean isAlive()>();

        if $z0 != 0 goto label1;

        $r1 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.os.HandlerThread handlerThread>;

        virtualinvoke $r1.<android.os.HandlerThread: void setDaemon(boolean)>(1);

        $r1 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.os.HandlerThread handlerThread>;

        virtualinvoke $r1.<android.os.HandlerThread: void start()>();

     label1:
        r6 = new android.support.test.services.shellexecutor.ShellCommandExecutorServer$1;

        specialinvoke r6.<android.support.test.services.shellexecutor.ShellCommandExecutorServer$1: void <init>(android.support.test.services.shellexecutor.ShellCommandExecutorServer)>($r0);

        $r1 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.os.HandlerThread handlerThread>;

        $r2 = virtualinvoke $r1.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r3 = virtualinvoke r6.<android.support.test.services.shellexecutor.Command$Stub: android.os.IBinder asBinder()>();

        $r4 = staticinvoke <android.support.test.services.shellexecutor.BlockingPublish: android.support.test.services.speakeasy.SpeakEasyProtocol$PublishResult getResult(android.os.Looper,android.os.IBinder)>($r2, $r3);

        $z0 = $r4.<android.support.test.services.speakeasy.SpeakEasyProtocol$PublishResult: boolean published>;

        if $z0 == 0 goto label2;

        $r5 = $r4.<android.support.test.services.speakeasy.SpeakEasyProtocol$PublishResult: java.lang.String key>;

        return $r5;

     label2:
        r7 = new java.lang.RuntimeException;

        $r5 = $r4.<android.support.test.services.speakeasy.SpeakEasyProtocol$PublishResult: java.lang.String error>;

        specialinvoke r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        r8 = (java.lang.Throwable) r7;

        throw r8;
    }

android.support.test.services.shellexecutor.ShellCommandExecutorServer$1
<android.support.test.services.shellexecutor.ShellCommandExecutorServer$1: android.support.test.services.shellexecutor.ShellCommandExecutorServer this$0>
    void <init>(android.support.test.services.shellexecutor.ShellCommandExecutorServer)
    {
        android.support.test.services.shellexecutor.ShellCommandExecutorServer$1 $r0;
        android.support.test.services.shellexecutor.ShellCommandExecutorServer $r1;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutorServer$1;

        $r1 := @parameter0: android.support.test.services.shellexecutor.ShellCommandExecutorServer;

        $r0.<android.support.test.services.shellexecutor.ShellCommandExecutorServer$1: android.support.test.services.shellexecutor.ShellCommandExecutorServer this$0> = $r1;

        specialinvoke $r0.<android.support.test.services.shellexecutor.Command$Stub: void <init>()>();

        return;
    }

    public void execute(java.lang.String, java.util.List, java.util.Map, boolean, android.os.ParcelFileDescriptor)
    {
        android.support.test.services.shellexecutor.ShellCommandExecutorServer$1 $r0;
        java.lang.String $r1;
        java.util.List $r2;
        java.util.Map $r3;
        boolean $z0;
        android.os.ParcelFileDescriptor $r4;
        android.support.test.services.shellexecutor.ShellCommandExecutor $r5;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream $r6;
        android.support.test.services.shellexecutor.ShellCommand $r7;
        android.support.test.services.shellexecutor.ShellCommandExecutorServer $r8;
        java.lang.Throwable $r9, $r10;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutorServer$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: java.util.Map;

        $z0 := @parameter3: boolean;

        $r4 := @parameter4: android.os.ParcelFileDescriptor;

        $r6 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r6.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>($r4);

        $r7 = new android.support.test.services.shellexecutor.ShellCommand;

     label1:
        specialinvoke $r7.<android.support.test.services.shellexecutor.ShellCommand: void <init>(java.lang.String,java.util.List,java.util.Map,boolean)>($r1, $r2, $r3, $z0);

     label2:
        $r8 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutorServer$1: android.support.test.services.shellexecutor.ShellCommandExecutorServer this$0>;

     label3:
        $r5 = staticinvoke <android.support.test.services.shellexecutor.ShellCommandExecutorServer: android.support.test.services.shellexecutor.ShellCommandExecutor access$000(android.support.test.services.shellexecutor.ShellCommandExecutorServer)>($r8);

        virtualinvoke $r5.<android.support.test.services.shellexecutor.ShellCommandExecutor: void execute(android.support.test.services.shellexecutor.ShellCommand,java.io.OutputStream)>($r7, $r6);

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ShellCmdExec", "Running command threw an exception", $r9);

     label6:
        virtualinvoke $r6.<java.io.OutputStream: void close()>();

        virtualinvoke $r4.<android.os.ParcelFileDescriptor: void close()>();

     label7:
        return;

     label8:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ShellCmdExec", "Unable to close the output", $r10);

        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.io.IOException from label6 to label7 with label8;
    }

