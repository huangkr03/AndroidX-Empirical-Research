android.support.test.espresso.base.BaseLayerModule
    public void <init>()
    {
        android.support.test.espresso.base.BaseLayerModule r0;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.support.test.runner.lifecycle.ActivityLifecycleMonitor provideLifecycleMonitor()
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.support.test.runner.lifecycle.ActivityLifecycleMonitor $r1;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        $r1 = staticinvoke <android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: android.support.test.runner.lifecycle.ActivityLifecycleMonitor getInstance()>();

        return $r1;
    }

    public android.content.Context provideTargetContext()
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.content.Context $r1;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        $r1 = staticinvoke <android.support.test.InstrumentationRegistry: android.content.Context getTargetContext()>();

        return $r1;
    }

    public android.os.Looper provideMainLooper()
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.os.Looper $r1;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        return $r1;
    }

    public android.support.test.espresso.base.IdleNotifier provideCompatAsyncTaskMonitor(android.support.test.espresso.base.ThreadPoolExecutorExtractor)
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.support.test.espresso.base.ThreadPoolExecutorExtractor r1;
        android.support.test.espresso.core.internal.deps.guava.base.Optional r2;
        boolean $z0;
        android.support.test.espresso.base.NoopRunnableIdleNotifier $r3;
        android.support.test.espresso.base.AsyncTaskPoolMonitor $r4;
        java.lang.Object $r5;
        java.util.concurrent.ThreadPoolExecutor $r6;
        android.support.test.espresso.base.IdleNotifier $r7;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: android.support.test.espresso.base.ThreadPoolExecutorExtractor;

        r2 = virtualinvoke r1.<android.support.test.espresso.base.ThreadPoolExecutorExtractor: android.support.test.espresso.core.internal.deps.guava.base.Optional getCompatAsyncTaskThreadPool()>();

        $z0 = virtualinvoke r2.<android.support.test.espresso.core.internal.deps.guava.base.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r4 = new android.support.test.espresso.base.AsyncTaskPoolMonitor;

        $r5 = virtualinvoke r2.<android.support.test.espresso.core.internal.deps.guava.base.Optional: java.lang.Object get()>();

        $r6 = (java.util.concurrent.ThreadPoolExecutor) $r5;

        specialinvoke $r4.<android.support.test.espresso.base.AsyncTaskPoolMonitor: void <init>(java.util.concurrent.ThreadPoolExecutor)>($r6);

        $r7 = virtualinvoke $r4.<android.support.test.espresso.base.AsyncTaskPoolMonitor: android.support.test.espresso.base.IdleNotifier asIdleNotifier()>();

        return $r7;

     label1:
        $r3 = new android.support.test.espresso.base.NoopRunnableIdleNotifier;

        specialinvoke $r3.<android.support.test.espresso.base.NoopRunnableIdleNotifier: void <init>()>();

        return $r3;
    }

    public java.util.concurrent.Executor provideMainThreadExecutor(android.os.Looper)
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.os.Looper r1;
        android.os.Handler r2, $r3;
        android.support.test.espresso.base.BaseLayerModule$1 $r4;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: android.os.Looper;

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>(r1);

        r2 = $r3;

        $r4 = new android.support.test.espresso.base.BaseLayerModule$1;

        specialinvoke $r4.<android.support.test.espresso.base.BaseLayerModule$1: void <init>(android.support.test.espresso.base.BaseLayerModule,android.os.Handler)>(r0, r2);

        return $r4;
    }

    public android.support.test.espresso.base.IdleNotifier provideDynamicNotifer(android.support.test.espresso.base.IdlingResourceRegistry)
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.support.test.espresso.base.IdlingResourceRegistry r1;
        android.support.test.espresso.IdlingRegistry $r2, $r4;
        java.util.Collection $r3, $r5;
        android.support.test.espresso.base.IdleNotifier $r6;
        java.lang.Iterable r7, r8;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: android.support.test.espresso.base.IdlingResourceRegistry;

        $r2 = staticinvoke <android.support.test.espresso.IdlingRegistry: android.support.test.espresso.IdlingRegistry getInstance()>();

        $r3 = virtualinvoke $r2.<android.support.test.espresso.IdlingRegistry: java.util.Collection getResources()>();

        $r4 = staticinvoke <android.support.test.espresso.IdlingRegistry: android.support.test.espresso.IdlingRegistry getInstance()>();

        $r5 = virtualinvoke $r4.<android.support.test.espresso.IdlingRegistry: java.util.Collection getLoopers()>();

        r7 = (java.lang.Iterable) $r3;

        r8 = (java.lang.Iterable) $r5;

        virtualinvoke r1.<android.support.test.espresso.base.IdlingResourceRegistry: void sync(java.lang.Iterable,java.lang.Iterable)>(r7, r8);

        $r6 = virtualinvoke r1.<android.support.test.espresso.base.IdlingResourceRegistry: android.support.test.espresso.base.IdleNotifier asIdleNotifier()>();

        return $r6;
    }

    public android.support.test.espresso.base.IdleNotifier provideSdkAsyncTaskMonitor(android.support.test.espresso.base.ThreadPoolExecutorExtractor)
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.support.test.espresso.base.ThreadPoolExecutorExtractor r1;
        android.support.test.espresso.base.AsyncTaskPoolMonitor $r2;
        java.util.concurrent.ThreadPoolExecutor $r3;
        android.support.test.espresso.base.IdleNotifier $r4;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: android.support.test.espresso.base.ThreadPoolExecutorExtractor;

        $r2 = new android.support.test.espresso.base.AsyncTaskPoolMonitor;

        $r3 = virtualinvoke r1.<android.support.test.espresso.base.ThreadPoolExecutorExtractor: java.util.concurrent.ThreadPoolExecutor getAsyncTaskThreadPool()>();

        specialinvoke $r2.<android.support.test.espresso.base.AsyncTaskPoolMonitor: void <init>(java.util.concurrent.ThreadPoolExecutor)>($r3);

        $r4 = virtualinvoke $r2.<android.support.test.espresso.base.AsyncTaskPoolMonitor: android.support.test.espresso.base.IdleNotifier asIdleNotifier()>();

        return $r4;
    }

    public android.support.test.espresso.base.ActiveRootLister provideActiveRootLister(android.support.test.espresso.base.RootsOracle)
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.support.test.espresso.base.RootsOracle r1;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: android.support.test.espresso.base.RootsOracle;

        return r1;
    }

    public android.support.test.espresso.base.EventInjector provideEventInjector()
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        int i0;
        java.lang.StringBuilder $r3, $r4, r14;
        java.lang.String $r5;
        android.support.test.espresso.base.InputManagerEventInjectionStrategy r9, r12;
        android.support.test.espresso.base.EventInjectionStrategy r10;
        android.support.test.espresso.base.WindowManagerEventInjectionStrategy r11, r13;
        java.lang.RuntimeException r15;
        android.support.test.espresso.base.EventInjector r16;
        java.lang.Throwable r17;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 16 goto label1;

        r12 = new android.support.test.espresso.base.InputManagerEventInjectionStrategy;

        specialinvoke r12.<android.support.test.espresso.base.InputManagerEventInjectionStrategy: void <init>()>();

        r9 = r12;

        virtualinvoke r9.<android.support.test.espresso.base.InputManagerEventInjectionStrategy: void initialize()>();

        r10 = r9;

        goto label3;

     label1:
        if i0 < 7 goto label2;

        r13 = new android.support.test.espresso.base.WindowManagerEventInjectionStrategy;

        specialinvoke r13.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: void <init>()>();

        r11 = r13;

        virtualinvoke r11.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: void initialize()>();

        r10 = r11;

        goto label3;

     label2:
        r15 = new java.lang.RuntimeException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>(int)>(68);

        $r3 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("API Level 6 and below is not supported. You are running: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        r17 = (java.lang.Throwable) r15;

        throw r17;

     label3:
        r16 = new android.support.test.espresso.base.EventInjector;

        specialinvoke r16.<android.support.test.espresso.base.EventInjector: void <init>(android.support.test.espresso.base.EventInjectionStrategy)>(r10);

        return r16;
    }

    android.support.test.espresso.FailureHandler provideFailureHandler(android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder)
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder r1;
        android.support.test.espresso.FailureHandler $r2;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        r1 := @parameter0: android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder;

        $r2 = virtualinvoke r1.<android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder: android.support.test.espresso.FailureHandler get()>();

        return $r2;
    }

    public android.support.test.espresso.core.internal.deps.guava.util.concurrent.ListeningExecutorService provideRemoteExecutor()
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        java.util.concurrent.TimeUnit $r3;
        android.support.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder $r5, r9;
        java.util.concurrent.ThreadFactory $r6;
        android.support.test.espresso.core.internal.deps.guava.util.concurrent.ListeningExecutorService $r7;
        java.util.concurrent.LinkedBlockingQueue r8;
        java.util.concurrent.ThreadPoolExecutor r10;
        java.util.concurrent.ExecutorService r11;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        r10 = new java.util.concurrent.ThreadPoolExecutor;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        r8 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke r8.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r9 = new android.support.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder;

        specialinvoke r9.<android.support.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder: void <init>()>();

        $r5 = virtualinvoke r9.<android.support.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder: android.support.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)>("Espresso Remote #%d");

        $r6 = virtualinvoke $r5.<android.support.test.espresso.core.internal.deps.guava.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()>();

        specialinvoke r10.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 5, 10L, $r3, r8, $r6);

        r11 = (java.util.concurrent.ExecutorService) r10;

        $r7 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.util.concurrent.MoreExecutors: android.support.test.espresso.core.internal.deps.guava.util.concurrent.ListeningExecutorService listeningDecorator(java.util.concurrent.ExecutorService)>(r11);

        return $r7;
    }

    android.support.test.espresso.FailureHandler provideFailureHander()
    {
        android.support.test.espresso.base.BaseLayerModule r0;
        android.support.test.espresso.base.DefaultFailureHandler $r1;
        android.content.Context $r2;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule;

        $r1 = new android.support.test.espresso.base.DefaultFailureHandler;

        $r2 = staticinvoke <android.support.test.InstrumentationRegistry: android.content.Context getTargetContext()>();

        specialinvoke $r1.<android.support.test.espresso.base.DefaultFailureHandler: void <init>(android.content.Context)>($r2);

        return $r1;
    }

android.support.test.espresso.base.BaseLayerModule$1
<android.support.test.espresso.base.BaseLayerModule$1: android.os.Handler val$handler>
    void <init>(android.support.test.espresso.base.BaseLayerModule, android.os.Handler)
    {
        android.support.test.espresso.base.BaseLayerModule$1 r0;
        android.support.test.espresso.base.BaseLayerModule r1;
        android.os.Handler r2;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule$1;

        r1 := @parameter0: android.support.test.espresso.base.BaseLayerModule;

        r2 := @parameter1: android.os.Handler;

        r0.<android.support.test.espresso.base.BaseLayerModule$1: android.os.Handler val$handler> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(java.lang.Runnable)
    {
        android.support.test.espresso.base.BaseLayerModule$1 r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule$1;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<android.support.test.espresso.base.BaseLayerModule$1: android.os.Handler val$handler>;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return;
    }

android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder
<android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder: java.util.concurrent.atomic.AtomicReference holder>
    public void <init>(android.support.test.espresso.FailureHandler)
    {
        android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder r0;
        android.support.test.espresso.FailureHandler r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder;

        r1 := @parameter0: android.support.test.espresso.FailureHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(r1);

        r0.<android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder: java.util.concurrent.atomic.AtomicReference holder> = $r2;

        return;
    }

    public void update(android.support.test.espresso.FailureHandler)
    {
        android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder r0;
        android.support.test.espresso.FailureHandler r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder;

        r1 := @parameter0: android.support.test.espresso.FailureHandler;

        $r2 = r0.<android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder: java.util.concurrent.atomic.AtomicReference holder>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return;
    }

    public android.support.test.espresso.FailureHandler get()
    {
        android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        android.support.test.espresso.FailureHandler $r3;

        r0 := @this: android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder;

        $r1 = r0.<android.support.test.espresso.base.BaseLayerModule$FailureHandlerHolder: java.util.concurrent.atomic.AtomicReference holder>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (android.support.test.espresso.FailureHandler) $r2;

        return $r3;
    }

