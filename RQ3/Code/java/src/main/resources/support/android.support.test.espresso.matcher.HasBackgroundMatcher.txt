android.support.test.espresso.matcher.HasBackgroundMatcher
<android.support.test.espresso.matcher.HasBackgroundMatcher: java.lang.String TAG>
<android.support.test.espresso.matcher.HasBackgroundMatcher: int drawableId>
    public void <init>(int)
    {
        android.support.test.espresso.matcher.HasBackgroundMatcher r0;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.HasBackgroundMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.HasBackgroundMatcher: int drawableId> = i0;

        return;
    }

    protected boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.HasBackgroundMatcher r0;
        android.view.View r1;
        android.graphics.drawable.Drawable $r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.HasBackgroundMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke r1.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        $i0 = r0.<android.support.test.espresso.matcher.HasBackgroundMatcher: int drawableId>;

        $z0 = staticinvoke <android.support.test.espresso.matcher.HasBackgroundMatcher: boolean assertDrawable(android.graphics.drawable.Drawable,int,android.view.View)>($r2, $i0, r1);

        return $z0;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.HasBackgroundMatcher r0;
        org.hamcrest.Description r1;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.support.test.espresso.matcher.HasBackgroundMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        i0 = r0.<android.support.test.espresso.matcher.HasBackgroundMatcher: int drawableId>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(44);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("has background with drawable ID: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r5);

        return;
    }

    static boolean compareBitmaps(android.graphics.Bitmap, android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, r1;
        int[] r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0;

        r0 := @parameter0: android.graphics.Bitmap;

        r1 := @parameter1: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        if $i0 != $i1 goto label1;

        $i2 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i3 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        if $i2 != $i3 goto label1;

        $i4 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i5 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i6 = $i4 * $i5;

        r2 = newarray (int)[$i6];

        $i7 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i8 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $i9 = $i7 * $i8;

        r3 = newarray (int)[$i9];

        $i10 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i11 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i12 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r0.<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>(r2, 0, $i10, 0, 0, $i11, $i12);

        $i13 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i14 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i15 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r1.<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>(r3, 0, $i13, 0, 0, $i14, $i15);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(r2, r3);

        return $z0;

     label1:
        return 0;
    }

    private static boolean assertDrawable(android.graphics.drawable.Drawable, int, android.view.View)
    {
        android.graphics.drawable.Drawable r0;
        int i0, $i1;
        android.view.View r1;
        java.lang.Throwable r2, $r9, $r11, $r12, r14;
        boolean $z0, z1, z2;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        android.graphics.drawable.BitmapDrawable $r5, $r7;
        android.graphics.Bitmap $r6, $r8, r13;
        java.lang.String $r10;
        java.lang.OutOfMemoryError r15, r16;

        r0 := @parameter0: android.graphics.drawable.Drawable;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.View;

        if null == r0 goto label01;

        $z0 = r0 instanceof android.graphics.drawable.BitmapDrawable;

        if $z0 != 0 goto label02;

     label01:
        return 0;

     label02:
        r13 = null;

     label03:
        $r3 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        r13 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>($r4, i0);

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 12 goto label06;

        $r7 = (android.graphics.drawable.BitmapDrawable) r0;

        $r8 = virtualinvoke $r7.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        z1 = virtualinvoke $r8.<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>(r13);

     label04:
        if r13 == null goto label05;

        virtualinvoke r13.<android.graphics.Bitmap: void recycle()>();

     label05:
        return z1;

     label06:
        $r5 = (android.graphics.drawable.BitmapDrawable) r0;

        $r6 = virtualinvoke $r5.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        z2 = staticinvoke <android.support.test.espresso.matcher.HasBackgroundMatcher: boolean compareBitmaps(android.graphics.Bitmap,android.graphics.Bitmap)>($r6, r13);

     label07:
        if r13 == null goto label08;

        virtualinvoke r13.<android.graphics.Bitmap: void recycle()>();

     label08:
        return z2;

     label09:
        $r9 := @caughtexception;

        r14 = $r9;

        r15 = (java.lang.OutOfMemoryError) r14;

        $r10 = virtualinvoke r15.<java.lang.OutOfMemoryError: java.lang.String getMessage()>();

        r16 = (java.lang.OutOfMemoryError) r14;

        $r11 = virtualinvoke r16.<java.lang.OutOfMemoryError: java.lang.Throwable getCause()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HasBackgroundMatcher", $r10, $r11);

     label10:
        if r13 == null goto label11;

        virtualinvoke r13.<android.graphics.Bitmap: void recycle()>();

     label11:
        return 0;

     label12:
        $r12 := @caughtexception;

        r2 = $r12;

     label13:
        if r13 == null goto label14;

        virtualinvoke r13.<android.graphics.Bitmap: void recycle()>();

     label14:
        throw r2;

        catch java.lang.OutOfMemoryError from label03 to label04 with label09;
        catch java.lang.OutOfMemoryError from label06 to label07 with label09;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    protected volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.HasBackgroundMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.HasBackgroundMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.HasBackgroundMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

