android.support.design.transformation.ExpandableBehavior
<android.support.design.transformation.ExpandableBehavior: int STATE_UNINITIALIZED>
<android.support.design.transformation.ExpandableBehavior: int STATE_EXPANDED>
<android.support.design.transformation.ExpandableBehavior: int STATE_COLLAPSED>
<android.support.design.transformation.ExpandableBehavior: int currentState>
    public void <init>()
    {
        android.support.design.transformation.ExpandableBehavior r0;

        r0 := @this: android.support.design.transformation.ExpandableBehavior;

        specialinvoke r0.<android.support.design.widget.CoordinatorLayout$Behavior: void <init>()>();

        r0.<android.support.design.transformation.ExpandableBehavior: int currentState> = 0;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.support.design.transformation.ExpandableBehavior r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.support.design.transformation.ExpandableBehavior;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.support.design.widget.CoordinatorLayout$Behavior: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        r0.<android.support.design.transformation.ExpandableBehavior: int currentState> = 0;

        return;
    }

<android.support.design.transformation.ExpandableBehavior: boolean layoutDependsOn(android.support.design.widget.CoordinatorLayout,android.view.View,android.view.View)>
<android.support.design.transformation.ExpandableBehavior: boolean onExpandedStateChange(android.view.View,android.view.View,boolean,boolean)>
    public boolean onLayoutChild(android.support.design.widget.CoordinatorLayout, android.view.View, int)
    {
        android.support.design.transformation.ExpandableBehavior r0;
        android.support.design.widget.CoordinatorLayout r1;
        android.view.View r2;
        int i0, i1;
        android.support.design.expandable.ExpandableWidget r3;
        boolean $z0, $z1, $z2, $z3;
        android.view.ViewTreeObserver $r4;
        android.support.design.transformation.ExpandableBehavior$1 $r5;
        byte $b2;

        r0 := @this: android.support.design.transformation.ExpandableBehavior;

        r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $z0 = staticinvoke <android.support.v4.view.ViewCompat: boolean isLaidOut(android.view.View)>(r2);

        if $z0 != 0 goto label3;

        r3 = virtualinvoke r0.<android.support.design.transformation.ExpandableBehavior: android.support.design.expandable.ExpandableWidget findExpandableWidget(android.support.design.widget.CoordinatorLayout,android.view.View)>(r1, r2);

        if r3 == null goto label3;

        $z1 = interfaceinvoke r3.<android.support.design.expandable.ExpandableWidget: boolean isExpanded()>();

        $z2 = specialinvoke r0.<android.support.design.transformation.ExpandableBehavior: boolean didStateChange(boolean)>($z1);

        if $z2 == 0 goto label3;

        $z3 = interfaceinvoke r3.<android.support.design.expandable.ExpandableWidget: boolean isExpanded()>();

        if $z3 == 0 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = 2;

     label2:
        r0.<android.support.design.transformation.ExpandableBehavior: int currentState> = $b2;

        i1 = r0.<android.support.design.transformation.ExpandableBehavior: int currentState>;

        $r4 = virtualinvoke r2.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r5 = new android.support.design.transformation.ExpandableBehavior$1;

        specialinvoke $r5.<android.support.design.transformation.ExpandableBehavior$1: void <init>(android.support.design.transformation.ExpandableBehavior,android.view.View,int,android.support.design.expandable.ExpandableWidget)>(r0, r2, i1, r3);

        virtualinvoke $r4.<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>($r5);

     label3:
        return 0;
    }

    public boolean onDependentViewChanged(android.support.design.widget.CoordinatorLayout, android.view.View, android.view.View)
    {
        android.support.design.transformation.ExpandableBehavior r0;
        android.support.design.widget.CoordinatorLayout r1;
        android.view.View r2, r3, $r5;
        android.support.design.expandable.ExpandableWidget r4;
        boolean z0, $z1, $z2, $z3, $z4;
        byte $b0;

        r0 := @this: android.support.design.transformation.ExpandableBehavior;

        r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        r2 := @parameter1: android.view.View;

        r3 := @parameter2: android.view.View;

        r4 = (android.support.design.expandable.ExpandableWidget) r3;

        z0 = interfaceinvoke r4.<android.support.design.expandable.ExpandableWidget: boolean isExpanded()>();

        $z1 = specialinvoke r0.<android.support.design.transformation.ExpandableBehavior: boolean didStateChange(boolean)>(z0);

        if $z1 == 0 goto label3;

        $z2 = interfaceinvoke r4.<android.support.design.expandable.ExpandableWidget: boolean isExpanded()>();

        if $z2 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 2;

     label2:
        r0.<android.support.design.transformation.ExpandableBehavior: int currentState> = $b0;

        $r5 = (android.view.View) r4;

        $z3 = interfaceinvoke r4.<android.support.design.expandable.ExpandableWidget: boolean isExpanded()>();

        $z4 = virtualinvoke r0.<android.support.design.transformation.ExpandableBehavior: boolean onExpandedStateChange(android.view.View,android.view.View,boolean,boolean)>($r5, r2, $z3, 1);

        return $z4;

     label3:
        return 0;
    }

    protected android.support.design.expandable.ExpandableWidget findExpandableWidget(android.support.design.widget.CoordinatorLayout, android.view.View)
    {
        android.support.design.transformation.ExpandableBehavior r0;
        android.support.design.widget.CoordinatorLayout r1;
        android.view.View r2, r4;
        java.util.List r3;
        int i0, i1;
        java.lang.Object $r5;
        boolean $z0;
        android.support.design.expandable.ExpandableWidget $r6;

        r0 := @this: android.support.design.transformation.ExpandableBehavior;

        r1 := @parameter0: android.support.design.widget.CoordinatorLayout;

        r2 := @parameter1: android.view.View;

        r3 = virtualinvoke r1.<android.support.design.widget.CoordinatorLayout: java.util.List getDependencies(android.view.View)>(r2);

        i1 = 0;

        i0 = interfaceinvoke r3.<java.util.List: int size()>();

     label1:
        if i1 >= i0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (android.view.View) $r5;

        $z0 = virtualinvoke r0.<android.support.design.transformation.ExpandableBehavior: boolean layoutDependsOn(android.support.design.widget.CoordinatorLayout,android.view.View,android.view.View)>(r1, r2, r4);

        if $z0 == 0 goto label2;

        $r6 = (android.support.design.expandable.ExpandableWidget) r4;

        return $r6;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private boolean didStateChange(boolean)
    {
        android.support.design.transformation.ExpandableBehavior r0;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2;

        r0 := @this: android.support.design.transformation.ExpandableBehavior;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label4;

        $i1 = r0.<android.support.design.transformation.ExpandableBehavior: int currentState>;

        if $i1 == 0 goto label1;

        $i2 = r0.<android.support.design.transformation.ExpandableBehavior: int currentState>;

        if $i2 != 2 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $i0 = r0.<android.support.design.transformation.ExpandableBehavior: int currentState>;

        if $i0 != 1 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    public static android.support.design.transformation.ExpandableBehavior 'from'(android.view.View, java.lang.Class)
    {
        android.view.View r0;
        java.lang.Class r1;
        android.view.ViewGroup$LayoutParams r2;
        android.support.design.widget.CoordinatorLayout$Behavior r3;
        boolean $z0, $z1;
        android.support.design.widget.CoordinatorLayout$LayoutParams $r4;
        java.lang.Object $r5;
        android.support.design.transformation.ExpandableBehavior $r6;
        java.lang.IllegalArgumentException $r7, $r8;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.Class;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $z0 = r2 instanceof android.support.design.widget.CoordinatorLayout$LayoutParams;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The view is not a child of CoordinatorLayout");

        throw $r8;

     label1:
        $r4 = (android.support.design.widget.CoordinatorLayout$LayoutParams) r2;

        r3 = virtualinvoke $r4.<android.support.design.widget.CoordinatorLayout$LayoutParams: android.support.design.widget.CoordinatorLayout$Behavior getBehavior()>();

        $z1 = r3 instanceof android.support.design.transformation.ExpandableBehavior;

        if $z1 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The view is not associated with ExpandableBehavior");

        throw $r7;

     label2:
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r3);

        $r6 = (android.support.design.transformation.ExpandableBehavior) $r5;

        return $r6;
    }

    static int access$000(android.support.design.transformation.ExpandableBehavior)
    {
        android.support.design.transformation.ExpandableBehavior r0;
        int $i0;

        r0 := @parameter0: android.support.design.transformation.ExpandableBehavior;

        $i0 = r0.<android.support.design.transformation.ExpandableBehavior: int currentState>;

        return $i0;
    }

android.support.design.transformation.ExpandableBehavior$1
<android.support.design.transformation.ExpandableBehavior$1: android.view.View val$child>
<android.support.design.transformation.ExpandableBehavior$1: int val$expectedState>
<android.support.design.transformation.ExpandableBehavior$1: android.support.design.expandable.ExpandableWidget val$dep>
<android.support.design.transformation.ExpandableBehavior$1: android.support.design.transformation.ExpandableBehavior this$0>
    void <init>(android.support.design.transformation.ExpandableBehavior, android.view.View, int, android.support.design.expandable.ExpandableWidget)
    {
        android.support.design.transformation.ExpandableBehavior$1 r0;
        android.support.design.transformation.ExpandableBehavior r1;
        android.view.View r2;
        int i0;
        android.support.design.expandable.ExpandableWidget r3;

        r0 := @this: android.support.design.transformation.ExpandableBehavior$1;

        r1 := @parameter0: android.support.design.transformation.ExpandableBehavior;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        r3 := @parameter3: android.support.design.expandable.ExpandableWidget;

        r0.<android.support.design.transformation.ExpandableBehavior$1: android.support.design.transformation.ExpandableBehavior this$0> = r1;

        r0.<android.support.design.transformation.ExpandableBehavior$1: android.view.View val$child> = r2;

        r0.<android.support.design.transformation.ExpandableBehavior$1: int val$expectedState> = i0;

        r0.<android.support.design.transformation.ExpandableBehavior$1: android.support.design.expandable.ExpandableWidget val$dep> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean onPreDraw()
    {
        android.support.design.transformation.ExpandableBehavior$1 r0;
        android.view.View $r1, $r7, $r8;
        android.view.ViewTreeObserver $r2;
        android.support.design.transformation.ExpandableBehavior $r3, $r6;
        int $i0, $i1;
        android.support.design.expandable.ExpandableWidget $r4, $r5;
        boolean $z0;

        r0 := @this: android.support.design.transformation.ExpandableBehavior$1;

        $r1 = r0.<android.support.design.transformation.ExpandableBehavior$1: android.view.View val$child>;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        virtualinvoke $r2.<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>(r0);

        $r3 = r0.<android.support.design.transformation.ExpandableBehavior$1: android.support.design.transformation.ExpandableBehavior this$0>;

        $i0 = staticinvoke <android.support.design.transformation.ExpandableBehavior: int access$000(android.support.design.transformation.ExpandableBehavior)>($r3);

        $i1 = r0.<android.support.design.transformation.ExpandableBehavior$1: int val$expectedState>;

        if $i0 != $i1 goto label1;

        $r6 = r0.<android.support.design.transformation.ExpandableBehavior$1: android.support.design.transformation.ExpandableBehavior this$0>;

        $r4 = r0.<android.support.design.transformation.ExpandableBehavior$1: android.support.design.expandable.ExpandableWidget val$dep>;

        $r7 = (android.view.View) $r4;

        $r8 = r0.<android.support.design.transformation.ExpandableBehavior$1: android.view.View val$child>;

        $r5 = r0.<android.support.design.transformation.ExpandableBehavior$1: android.support.design.expandable.ExpandableWidget val$dep>;

        $z0 = interfaceinvoke $r5.<android.support.design.expandable.ExpandableWidget: boolean isExpanded()>();

        virtualinvoke $r6.<android.support.design.transformation.ExpandableBehavior: boolean onExpandedStateChange(android.view.View,android.view.View,boolean,boolean)>($r7, $r8, $z0, 0);

     label1:
        return 0;
    }

