android.support.test.orchestrator.AndroidTestOrchestrator
<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.regex.Pattern FULLY_QUALIFIED_CLASS_AND_METHOD>
<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.List RUNTIME_PERMISSIONS>
<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.CallbackLogic callbackLogic>
<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>
<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>
<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.ServiceConnection mConnection>
<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.concurrent.ExecutorService mExecutorService>
<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest>
<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.Iterator mTestIterator>
<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.runner.UsageTrackerFacilitator mUsageTrackerFacilitator>
<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResult$Builder resultBuilder>
<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResultPrinter resultPrinter>
<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener xmlTestRunListener>
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        java.lang.String[] $r1;
        java.util.List $r2;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\w\\.?]+#\\w+");

        <android.support.test.orchestrator.AndroidTestOrchestrator: java.util.regex.Pattern FULLY_QUALIFIED_CLASS_AND_METHOD> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "android.permission.WRITE_EXTERNAL_STORAGE";

        $r1[1] = "android.permission.READ_EXTERNAL_STORAGE";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        <android.support.test.orchestrator.AndroidTestOrchestrator: java.util.List RUNTIME_PERMISSIONS> = $r2;

        return;
    }

    public void <init>()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        java.util.concurrent.ExecutorService $r1;
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r2;
        android.support.test.orchestrator.listeners.OrchestrationResult$Builder $r3;
        android.support.test.orchestrator.listeners.OrchestrationResultPrinter $r4;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r5;
        android.support.test.orchestrator.AndroidTestOrchestrator$1 $r6;
        java.util.concurrent.ThreadFactory $r7;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        specialinvoke $r0.<android.app.Instrumentation: void <init>()>();

        $r2 = new android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener;

        specialinvoke $r2.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: void <init>()>();

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener xmlTestRunListener> = $r2;

        $r3 = new android.support.test.orchestrator.listeners.OrchestrationResult$Builder;

        specialinvoke $r3.<android.support.test.orchestrator.listeners.OrchestrationResult$Builder: void <init>()>();

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResult$Builder resultBuilder> = $r3;

        $r4 = new android.support.test.orchestrator.listeners.OrchestrationResultPrinter;

        specialinvoke $r4.<android.support.test.orchestrator.listeners.OrchestrationResultPrinter: void <init>()>();

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResultPrinter resultPrinter> = $r4;

        $r5 = new android.support.test.orchestrator.listeners.OrchestrationListenerManager;

        specialinvoke $r5.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void <init>(android.app.Instrumentation)>($r0);

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager> = $r5;

        $r6 = new android.support.test.orchestrator.AndroidTestOrchestrator$1;

        specialinvoke $r6.<android.support.test.orchestrator.AndroidTestOrchestrator$1: void <init>(android.support.test.orchestrator.AndroidTestOrchestrator)>($r0);

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.ServiceConnection mConnection> = $r6;

        $r7 = <android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0: java.util.concurrent.ThreadFactory $instance>;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>($r7);

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.concurrent.ExecutorService mExecutorService> = $r1;

        return;
    }

    static android.support.test.orchestrator.CallbackLogic access$000(android.support.test.orchestrator.AndroidTestOrchestrator)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.support.test.orchestrator.CallbackLogic r1;

        $r0 := @parameter0: android.support.test.orchestrator.AndroidTestOrchestrator;

        r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.CallbackLogic callbackLogic>;

        return r1;
    }

    static android.support.test.orchestrator.CallbackLogic access$002(android.support.test.orchestrator.AndroidTestOrchestrator, android.support.test.orchestrator.CallbackLogic)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.support.test.orchestrator.CallbackLogic $r1;

        $r0 := @parameter0: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 := @parameter1: android.support.test.orchestrator.CallbackLogic;

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.CallbackLogic callbackLogic> = $r1;

        return $r1;
    }

    static android.support.test.orchestrator.listeners.OrchestrationListenerManager access$100(android.support.test.orchestrator.AndroidTestOrchestrator)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager r1;

        $r0 := @parameter0: android.support.test.orchestrator.AndroidTestOrchestrator;

        r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        return r1;
    }

    static void access$200(android.support.test.orchestrator.AndroidTestOrchestrator)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;

        $r0 := @parameter0: android.support.test.orchestrator.AndroidTestOrchestrator;

        specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void collectTests()>();

        return;
    }

    static android.os.Bundle access$300(android.support.test.orchestrator.AndroidTestOrchestrator)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.os.Bundle $r1;

        $r0 := @parameter0: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle createResultBundle()>();

        return $r1;
    }

    static android.os.Bundle access$400(android.support.test.orchestrator.AndroidTestOrchestrator)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.os.Bundle r1;

        $r0 := @parameter0: android.support.test.orchestrator.AndroidTestOrchestrator;

        r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        return r1;
    }

    static java.lang.String access$500(android.os.Bundle)
    {
        android.os.Bundle $r0;
        java.lang.String $r1;

        $r0 := @parameter0: android.os.Bundle;

        $r1 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getSecret(android.os.Bundle)>($r0);

        return $r1;
    }

    static java.lang.String access$600(android.support.test.orchestrator.AndroidTestOrchestrator, android.os.Bundle)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.os.Bundle $r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 := @parameter1: android.os.Bundle;

        $r2 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getTargetPackage(android.os.Bundle)>($r1);

        return $r2;
    }

    static java.lang.String access$700(android.content.Context, java.lang.String, java.lang.String, java.util.List)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r2;
        java.util.List $r3;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.util.List;

        $r1 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String execShellCommandSync(android.content.Context,java.lang.String,java.lang.String,java.util.List)>($r0, $r1, $r2, $r3);

        return $r1;
    }

    static java.lang.String access$800(android.os.Bundle)
    {
        android.os.Bundle $r0;
        java.lang.String $r1;

        $r0 := @parameter0: android.os.Bundle;

        $r1 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getTargetInstrPackage(android.os.Bundle)>($r0);

        return $r1;
    }

    private void addListeners(int)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        int $i0;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r1;
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r2;
        android.support.test.orchestrator.listeners.OrchestrationResult$Builder $r3;
        android.support.test.orchestrator.listeners.OrchestrationResultPrinter $r4;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        $r2 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener xmlTestRunListener>;

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void addListener(android.support.test.orchestrator.listeners.OrchestrationRunListener)>($r2);

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResult$Builder resultBuilder>;

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void addListener(android.support.test.orchestrator.listeners.OrchestrationRunListener)>($r3);

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResultPrinter resultPrinter>;

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void addListener(android.support.test.orchestrator.listeners.OrchestrationRunListener)>($r4);

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        virtualinvoke $r1.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void orchestrationRunStarted(int)>($i0);

        return;
    }

    static java.lang.String addTestCoverageSupport(android.os.Bundle, java.lang.String)
    {
        android.os.Bundle $r0;
        java.lang.String $r1, $r2, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.Object[] $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: android.os.Bundle;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: boolean shouldRunCoverage(android.os.Bundle)>($r0);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: boolean runsInIsolatedMode(android.os.Bundle)>($r0);

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke $r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFilePath");

        if $r2 == null goto label3;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label4;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r2;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The coverage path [%s] is either null or empty", $r4);

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label4:
        $r5 = virtualinvoke $r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFile");

        if $r5 == null goto label5;

        $r3 = new java.lang.IllegalStateException;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = "coverageFile";

        $r1 = virtualinvoke $r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFile");

        $r4[1] = $r1;

        $r4[2] = "coverageFilePath";

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t use a custom coverage file name [-e %s %s] when running through orchestrator in isolated mode. Since the generated coverage files will overwrite each other. Please consider using [%s] instead.", $r4);

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label5:
        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + 3;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".ec");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    private void clearPackageData()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.support.test.orchestrator.AndroidTestOrchestrator$2 $r1;
        boolean $z0;
        android.os.Bundle $r2;
        java.util.concurrent.ExecutorService $r3;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r2 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $z0 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: boolean shouldClearPackageData(android.os.Bundle)>($r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.concurrent.ExecutorService mExecutorService>;

        $r1 = new android.support.test.orchestrator.AndroidTestOrchestrator$2;

        specialinvoke $r1.<android.support.test.orchestrator.AndroidTestOrchestrator$2: void <init>(android.support.test.orchestrator.AndroidTestOrchestrator)>($r0);

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r1);

        return;
    }

    private void collectTests()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.os.Bundle $r1;
        java.lang.String $r2, $r4;
        boolean $z0;
        java.lang.Object[] $r3;
        android.support.test.orchestrator.CallbackLogic $r5;
        java.util.concurrent.ExecutorService $r6;
        android.content.Context $r7;
        java.io.OutputStream $r8;
        android.support.test.orchestrator.TestRunnable $r9;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r2 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("class");

        $z0 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: boolean isSingleMethodTest(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r2;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Single test parameter %s, skipping test collection", $r3);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidTestOrchestrator", $r4);

        $r5 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.CallbackLogic callbackLogic>;

        virtualinvoke $r5.<android.support.test.orchestrator.CallbackLogic: void addTest(java.lang.String)>($r2);

        virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void runFinished()>();

        return;

     label1:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Multiple test parameter %s, starting test collection", $r3);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidTestOrchestrator", $r2);

        $r6 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.concurrent.ExecutorService mExecutorService>;

        $r7 = virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r2 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getSecret(android.os.Bundle)>($r1);

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r8 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.io.OutputStream getOutputStream()>();

        $r9 = staticinvoke <android.support.test.orchestrator.TestRunnable: android.support.test.orchestrator.TestRunnable testCollectionRunnable(android.content.Context,java.lang.String,android.os.Bundle,java.io.OutputStream,android.support.test.orchestrator.TestRunnable$RunFinishedListener)>($r7, $r2, $r1, $r8, $r0);

        interfaceinvoke $r6.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r9);

        return;
    }

    private void connectOrchestratorService()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.content.Intent $r1;
        android.content.Context $r2;
        android.content.ServiceConnection $r3;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 = new android.content.Intent;

        $r2 = virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

        specialinvoke $r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r2, class "Landroid/support/test/orchestrator/OrchestratorService;");

        $r2 = virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.ServiceConnection mConnection>;

        virtualinvoke $r2.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>($r1, $r3, 1);

        return;
    }

    private android.os.Bundle createResultBundle()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.os.Bundle $r1;
        java.io.ByteArrayOutputStream $r2;
        java.io.PrintStream $r3;
        android.support.test.orchestrator.listeners.OrchestrationResult$Builder $r4;
        android.support.test.orchestrator.listeners.OrchestrationResultPrinter $r5;
        android.support.test.orchestrator.listeners.OrchestrationResult $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = new java.io.PrintStream;

        specialinvoke $r3.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r2);

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResult$Builder resultBuilder>;

     label1:
        virtualinvoke $r4.<android.support.test.orchestrator.listeners.OrchestrationResult$Builder: void orchestrationRunFinished()>();

     label2:
        $r5 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResultPrinter resultPrinter>;

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResult$Builder resultBuilder>;

     label3:
        $r6 = virtualinvoke $r4.<android.support.test.orchestrator.listeners.OrchestrationResult$Builder: android.support.test.orchestrator.listeners.OrchestrationResult build()>();

        virtualinvoke $r5.<android.support.test.orchestrator.listeners.OrchestrationResultPrinter: void orchestrationRunFinished(java.io.PrintStream,android.support.test.orchestrator.listeners.OrchestrationResult)>($r3, $r6);

     label4:
        virtualinvoke $r3.<java.io.PrintStream: void close()>();

        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r7[0] = $r8;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\n%s", $r7);

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r8);

        return $r1;

     label5:
        $r9 := @caughtexception;

        virtualinvoke $r3.<java.io.PrintStream: void close()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private static java.lang.String execShellCommandSync(android.content.Context, java.lang.String, java.lang.String, java.util.List)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r2;
        java.util.List $r3;
        java.lang.Object[] $r4;
        java.lang.Throwable $r5, $r6, $r7;
        java.util.HashMap r8;
        java.util.Map r9;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.util.List;

        r8 = new java.util.HashMap;

     label01:
        specialinvoke r8.<java.util.HashMap: void <init>()>();

     label02:
        r9 = (java.util.Map) r8;

     label03:
        $r1 = staticinvoke <android.support.test.services.shellexecutor.ShellCommandClient: java.lang.String execOnServerSync(android.content.Context,java.lang.String,java.lang.String,java.util.List,java.util.Map,boolean)>($r0, $r1, $r2, $r3, r9, 0);

     label04:
        goto label10;

     label05:
        $r5 := @caughtexception;

        if $r5 == null goto label09;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r2;

        $r4[1] = $r3;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed executing shell command [%s] with params [%s]", $r4);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidTestOrchestrator", $r1, $r5);

        return null;

     label06:
        $r6 := @caughtexception;

        if $r6 == null goto label09;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r2;

        $r4[1] = $r3;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed executing shell command [%s] with params [%s]", $r4);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidTestOrchestrator", $r1, $r6);

        return null;

     label07:
        $r7 := @caughtexception;

        goto label08;

     label08:
        throw $r7;

     label09:
        return null;

     label10:
        return $r1;

        catch java.io.IOException from label01 to label02 with label05;
        catch java.io.IOException from label03 to label04 with label05;
        catch android.os.RemoteException from label01 to label02 with label06;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
    }

    private void executeEntireTestSuite()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.os.Bundle $r1;
        java.lang.String $r2;
        java.util.concurrent.ExecutorService $r3;
        android.content.Context $r4;
        java.io.OutputStream $r5;
        android.support.test.orchestrator.TestRunnable $r6;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r2 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest>;

        if $r2 == null goto label1;

        $r1 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle createResultBundle()>();

        virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void finish(int,android.os.Bundle)>(-1, $r1);

        return;

     label1:
        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest> = "";

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.concurrent.ExecutorService mExecutorService>;

        $r4 = virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r2 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getSecret(android.os.Bundle)>($r1);

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r5 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.io.OutputStream getOutputStream()>();

        $r6 = staticinvoke <android.support.test.orchestrator.TestRunnable: android.support.test.orchestrator.TestRunnable legacyTestRunnable(android.content.Context,java.lang.String,android.os.Bundle,java.io.OutputStream,android.support.test.orchestrator.TestRunnable$RunFinishedListener)>($r4, $r2, $r1, $r5, $r0);

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r6);

        return;
    }

    private void executeNextTest()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        java.lang.String $r1, $r8, $r10;
        java.util.concurrent.ExecutorService $r2;
        java.util.Iterator $r3;
        boolean $z0;
        android.os.Bundle $r4;
        java.lang.Object $r5;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r6;
        android.support.test.orchestrator.junit.ParcelableDescription $r7;
        android.content.Context $r9;
        java.io.OutputStream $r11;
        android.support.test.orchestrator.TestRunnable $r12;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.Iterator mTestIterator>;

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r4 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle createResultBundle()>();

        virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void finish(int,android.os.Bundle)>(-1, $r4);

        return;

     label1:
        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.Iterator mTestIterator>;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r5;

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest> = $r1;

        $r6 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        $r7 = new android.support.test.orchestrator.junit.ParcelableDescription;

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest>;

        specialinvoke $r7.<android.support.test.orchestrator.junit.ParcelableDescription: void <init>(java.lang.String)>($r1);

        virtualinvoke $r6.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void testProcessStarted(android.support.test.orchestrator.junit.ParcelableDescription)>($r7);

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest>;

        $r8 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String addTestCoverageSupport(android.os.Bundle,java.lang.String)>($r4, $r1);

        if $r8 == null goto label2;

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("coverageFile", $r8);

     label2:
        specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void clearPackageData()>();

        $r2 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.concurrent.ExecutorService mExecutorService>;

        $r9 = virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r10 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getSecret(android.os.Bundle)>($r4);

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r11 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.io.OutputStream getOutputStream()>();

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest>;

        $r12 = staticinvoke <android.support.test.orchestrator.TestRunnable: android.support.test.orchestrator.TestRunnable singleTestRunnable(android.content.Context,java.lang.String,android.os.Bundle,java.io.OutputStream,android.support.test.orchestrator.TestRunnable$RunFinishedListener,java.lang.String)>($r9, $r10, $r4, $r11, $r0, $r1);

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r12);

        if $r8 == null goto label3;

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        virtualinvoke $r4.<android.os.Bundle: void remove(java.lang.String)>("coverageFile");

     label3:
        return;
    }

    private java.lang.String getOutputFile()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest>;

        if $r1 != null goto label1;

        return "testCollection.txt";

     label1:
        $r2 = newarray (java.lang.Object)[1];

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest>;

        $r2[0] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.txt", $r2);

        return $r1;
    }

    private java.io.OutputStream getOutputStream()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.content.Context $r1, $r2;
        int $i0;
        java.lang.String $r3;
        java.io.FileOutputStream $r4;
        java.lang.Throwable $r5;
        java.lang.RuntimeException r6;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

     label1:
        $r1 = virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

     label2:
        $r2 = $r1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label5;

     label3:
        $r1 = staticinvoke <android.support.v4.content.ContextCompat: android.content.Context createDeviceProtectedStorageContext(android.content.Context)>($r1);

     label4:
        $r2 = $r1;

     label5:
        $r3 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getOutputFile()>();

        $r4 = virtualinvoke $r2.<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>($r3, 0);

     label6:
        return $r4;

     label7:
        $r5 := @caughtexception;

        r6 = new java.lang.RuntimeException;

        specialinvoke r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not open stream for output");

        $r5 = (java.lang.Throwable) r6;

        throw $r5;

        catch java.io.FileNotFoundException from label1 to label2 with label7;
        catch java.io.FileNotFoundException from label3 to label4 with label7;
        catch java.io.FileNotFoundException from label5 to label6 with label7;
    }

    private static java.lang.String getSecret(android.os.Bundle)
    {
        android.os.Bundle $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: android.os.Bundle;

        $r1 = virtualinvoke $r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("shellExecKey");

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot find secret for ShellExecutor binder published at shellExecKey");

        throw $r2;

     label1:
        return $r1;
    }

    private static java.lang.String getTargetInstrPackage(android.os.Bundle)
    {
        android.os.Bundle $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;

        $r0 := @parameter0: android.os.Bundle;

        $r1 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getTargetInstrumentation(android.os.Bundle)>($r0);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("/", -1);

        $r1 = $r2[0];

        return $r1;
    }

    private static java.lang.String getTargetInstrumentation(android.os.Bundle)
    {
        android.os.Bundle $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: android.os.Bundle;

        $r1 = virtualinvoke $r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("targetInstrumentation");

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must provide a target instrumentation using the following runner arg: targetInstrumentation");

        throw $r2;

     label1:
        return $r1;
    }

    private java.lang.String getTargetPackage(android.os.Bundle)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.os.Bundle $r1;
        java.lang.String $r2, $r3;
        java.lang.String[] $r4;
        android.content.Context $r5;
        android.content.pm.PackageManager $r6;
        android.content.ComponentName $r7;
        android.content.pm.InstrumentationInfo $r8;
        java.lang.Throwable $r9;
        java.lang.IllegalStateException $r10;
        int $i0;
        java.lang.StringBuilder $r11;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getTargetInstrPackage(android.os.Bundle)>($r1);

        $r3 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getTargetInstrumentation(android.os.Bundle)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("/", -1);

        $r3 = $r4[1];

        $r5 = virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r7 = new android.content.ComponentName;

     label1:
        specialinvoke $r7.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        $r8 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>($r7, 0);

     label2:
        $r3 = $r8.<android.content.pm.InstrumentationInfo: java.lang.String targetPackage>;

        return $r3;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalStateException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + 41;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package [");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] cannot be found on the system.");

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r10;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private void grantRuntimePermissions(java.util.List)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        java.util.List $r1;
        int $i0;
        android.content.Context $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String $r5, $r7, $r9;
        android.os.Bundle $r6;
        java.lang.String[] $r8;
        java.lang.IllegalStateException $r10;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 := @parameter0: java.util.List;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 24 goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

        $r3 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>($r5);

        if $i0 == 0 goto label2;

        $r6 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r7 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getSecret(android.os.Bundle)>($r6);

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "grant";

        $r9 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        $r8[1] = $r9;

        $r8[2] = $r5;

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String execShellCommandSync(android.content.Context,java.lang.String,java.lang.String,java.util.List)>($r2, $r7, "pm", $r1);

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>($r5);

        if $i0 == 0 goto label2;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Permission requested but not granted!");

        throw $r10;

     label3:
        return;
    }

    static boolean isSingleMethodTest(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = <android.support.test.orchestrator.AndroidTestOrchestrator: java.util.regex.Pattern FULLY_QUALIFIED_CLASS_AND_METHOD>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    static final java.lang.Thread lambda$new$0$AndroidTestOrchestrator(java.lang.Runnable)
    {
        java.lang.Runnable $r0;
        java.util.concurrent.ThreadFactory $r1;
        java.lang.Thread $r2;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>($r0);

        virtualinvoke $r2.<java.lang.Thread: void setName(java.lang.String)>("AndroidTestOrchestrator");

        return $r2;
    }

    private void registerUserTracker()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.support.test.internal.runner.tracker.AnalyticsBasedUsageTracker$Builder $r1;
        android.support.test.runner.UsageTrackerFacilitator $r2;
        android.os.Bundle $r3;
        boolean $z0;
        android.content.Context $r4;
        java.lang.String $r5;
        android.support.test.internal.runner.tracker.UsageTracker $r6;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r2 = new android.support.test.runner.UsageTrackerFacilitator;

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $z0 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: boolean shouldTrackUsage(android.os.Bundle)>($r3);

        specialinvoke $r2.<android.support.test.runner.UsageTrackerFacilitator: void <init>(boolean)>($z0);

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.runner.UsageTrackerFacilitator mUsageTrackerFacilitator> = $r2;

        $r4 = virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getTargetContext()>();

        if $r4 == null goto label1;

        $r2 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.runner.UsageTrackerFacilitator mUsageTrackerFacilitator>;

        $r1 = new android.support.test.internal.runner.tracker.AnalyticsBasedUsageTracker$Builder;

        specialinvoke $r1.<android.support.test.internal.runner.tracker.AnalyticsBasedUsageTracker$Builder: void <init>(android.content.Context)>($r4);

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $r5 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getTargetInstrPackage(android.os.Bundle)>($r3);

        $r1 = virtualinvoke $r1.<android.support.test.internal.runner.tracker.AnalyticsBasedUsageTracker$Builder: android.support.test.internal.runner.tracker.AnalyticsBasedUsageTracker$Builder withTargetPackage(java.lang.String)>($r5);

        $r6 = virtualinvoke $r1.<android.support.test.internal.runner.tracker.AnalyticsBasedUsageTracker$Builder: android.support.test.internal.runner.tracker.UsageTracker buildIfPossible()>();

        virtualinvoke $r2.<android.support.test.runner.UsageTrackerFacilitator: void registerUsageTracker(android.support.test.internal.runner.tracker.UsageTracker)>($r6);

     label1:
        return;
    }

    private static boolean runsInIsolatedMode(android.os.Bundle)
    {
        android.os.Bundle $r0;
        java.lang.Boolean $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: android.os.Bundle;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r2 = virtualinvoke $r1.<java.lang.Boolean: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("isolated");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean shouldClearPackageData(android.os.Bundle)
    {
        android.os.Bundle $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: android.os.Bundle;

        $r1 = virtualinvoke $r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("clearPackageData");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r1);

        return $z0;
    }

    private static boolean shouldRunCoverage(android.os.Bundle)
    {
        android.os.Bundle $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: android.os.Bundle;

        $r1 = virtualinvoke $r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverage");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r1);

        return $z0;
    }

    private static boolean shouldTrackUsage(android.os.Bundle)
    {
        android.os.Bundle $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: android.os.Bundle;

        $r1 = virtualinvoke $r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("disableAnalytics");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void finish(int, android.os.Bundle)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        int $i0;
        android.os.Bundle $r1;
        android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener $r2;
        android.support.test.runner.UsageTrackerFacilitator $r3;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.os.Bundle;

        $r2 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener xmlTestRunListener>;

        virtualinvoke $r2.<android.support.test.orchestrator.listeners.OrchestrationXmlTestRunListener: void orchestrationRunFinished()>();

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.runner.UsageTrackerFacilitator mUsageTrackerFacilitator>;

     label01:
        virtualinvoke $r3.<android.support.test.runner.UsageTrackerFacilitator: void trackUsage(java.lang.String,java.lang.String)>("AndroidTestOrchestrator", "1.0.2");

     label02:
        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.runner.UsageTrackerFacilitator mUsageTrackerFacilitator>;

     label03:
        virtualinvoke $r3.<android.support.test.runner.UsageTrackerFacilitator: void sendUsages()>();

     label04:
        specialinvoke $r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>($i0, $r1);

     label05:
        return;

     label06:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidTestOrchestrator", "Security exception thrown on shutdown", $r4);

        $r1 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle createResultBundle()>();

        specialinvoke $r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>($i0, $r1);

        return;

     label07:
        $r5 := @caughtexception;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidTestOrchestrator", "Failed to send analytics.", $r5);

     label09:
        specialinvoke $r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>($i0, $r1);

     label10:
        return;

     label11:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidTestOrchestrator", "Security exception thrown on shutdown", $r6);

        $r1 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle createResultBundle()>();

        specialinvoke $r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>($i0, $r1);

        return;

     label12:
        $r7 := @caughtexception;

     label13:
        specialinvoke $r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>($i0, $r1);

     label14:
        throw $r7;

     label15:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidTestOrchestrator", "Security exception thrown on shutdown", $r8);

        $r1 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle createResultBundle()>();

        specialinvoke $r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>($i0, $r1);

        goto label14;

        catch java.lang.RuntimeException from label01 to label02 with label07;
        catch java.lang.RuntimeException from label03 to label04 with label07;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.SecurityException from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.SecurityException from label09 to label10 with label11;
        catch java.lang.SecurityException from label13 to label14 with label15;
    }

    public void onCreate(android.os.Bundle)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        android.os.Bundle $r1, $r4;
        java.lang.String $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("debug");

        if $r2 == null goto label1;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidTestOrchestrator", "Waiting for debugger to connect...");

        staticinvoke <android.os.Debug: void waitForDebugger()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidTestOrchestrator", "Debugger connected.");

     label1:
        $r2 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("targetInstrumentation");

        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must provide a target instrumentation.");

        throw $r3;

     label2:
        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments> = $r1;

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("orchestratorService", "OrchestratorService");

        specialinvoke $r0.<android.app.Instrumentation: void onCreate(android.os.Bundle)>($r1);

        virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void start()>();

        return;
    }

    public boolean onException(java.lang.Object, java.lang.Throwable)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        boolean $z0;
        android.support.test.orchestrator.listeners.OrchestrationResultPrinter $r3;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationResultPrinter resultPrinter>;

        virtualinvoke $r3.<android.support.test.orchestrator.listeners.OrchestrationResultPrinter: void reportProcessCrash(java.lang.Throwable)>($r2);

        $z0 = specialinvoke $r0.<android.app.Instrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>($r1, $r2);

        return $z0;
    }

    public void onStart()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        java.util.List $r1;
        java.lang.Throwable $r2;
        android.os.Bundle $r3;
        java.lang.String $r4, $r5;
        int $i0;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        specialinvoke $r0.<android.app.Instrumentation: void onStart()>();

     label1:
        specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void registerUserTracker()>();

     label2:
        $r1 = <android.support.test.orchestrator.AndroidTestOrchestrator: java.util.List RUNTIME_PERMISSIONS>;

     label3:
        specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void grantRuntimePermissions(java.util.List)>($r1);

        specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void connectOrchestratorService()>();

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidTestOrchestrator", "Fatal exception when setting up.", $r2);

        $r3 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle createResultBundle()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("Fatal exception when setting up.\n");

        $r5 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r2);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label7;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

     label6:
        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r5);

        virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void finish(int,android.os.Bundle)>(-1, $r3);

        return;

     label7:
        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>($r4);

        goto label6;

        catch java.lang.RuntimeException from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label5;
    }

    public void runFinished()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator $r0;
        java.lang.String $r1;
        android.support.test.orchestrator.CallbackLogic $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        int $i0;
        boolean $z0;
        android.os.Bundle $r5;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r6;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String mTest>;

        if $r1 != null goto label1;

        $r2 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.CallbackLogic callbackLogic>;

        $r3 = virtualinvoke $r2.<android.support.test.orchestrator.CallbackLogic: java.util.List provideCollectedTests()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.util.Iterator mTestIterator> = $r4;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void addListeners(int)>($i0);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r5 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle createResultBundle()>();

        virtualinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void finish(int,android.os.Bundle)>(0, $r5);

        return;

     label1:
        $r6 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager listenerManager>;

        $r1 = specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String getOutputFile()>();

        virtualinvoke $r6.<android.support.test.orchestrator.listeners.OrchestrationListenerManager: void testProcessFinished(java.lang.String)>($r1);

     label2:
        $r5 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle mArguments>;

        $z0 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: boolean runsInIsolatedMode(android.os.Bundle)>($r5);

        if $z0 == 0 goto label3;

        specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void executeNextTest()>();

        return;

     label3:
        specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator: void executeEntireTestSuite()>();

        return;
    }

android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0
<android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0: java.util.concurrent.ThreadFactory $instance>
    static void <clinit>()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0 $r0;

        $r0 = new android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0;

        specialinvoke $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0: void <init>()>();

        <android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0: java.util.concurrent.ThreadFactory $instance> = $r0;

        return;
    }

    private void <init>()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0 $r0;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0 $r0;
        java.lang.Runnable $r1;
        java.lang.Thread $r2;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator$$Lambda$0;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.Thread lambda$new$0$AndroidTestOrchestrator(java.lang.Runnable)>($r1);

        return $r2;
    }

android.support.test.orchestrator.AndroidTestOrchestrator$1
<android.support.test.orchestrator.AndroidTestOrchestrator$1: android.support.test.orchestrator.AndroidTestOrchestrator this$0>
    void <init>(android.support.test.orchestrator.AndroidTestOrchestrator)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator$1 $r0;
        android.support.test.orchestrator.AndroidTestOrchestrator $r1;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator$1;

        $r1 := @parameter0: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$1: android.support.test.orchestrator.AndroidTestOrchestrator this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onServiceConnected(android.content.ComponentName, android.os.IBinder)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator$1 $r0;
        android.content.ComponentName $r1;
        android.os.IBinder $r2;
        android.support.test.orchestrator.AndroidTestOrchestrator $r3;
        android.support.test.orchestrator.CallbackLogic $r4;
        android.support.test.orchestrator.listeners.OrchestrationListenerManager $r5;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator$1;

        $r1 := @parameter0: android.content.ComponentName;

        $r2 := @parameter1: android.os.IBinder;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidTestOrchestrator", "AndroidTestOrchestrator has connected to the orchestration service");

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$1: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r4 = (android.support.test.orchestrator.CallbackLogic) $r2;

        staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.CallbackLogic access$002(android.support.test.orchestrator.AndroidTestOrchestrator,android.support.test.orchestrator.CallbackLogic)>($r3, $r4);

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$1: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r4 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.CallbackLogic access$000(android.support.test.orchestrator.AndroidTestOrchestrator)>($r3);

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$1: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r5 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: android.support.test.orchestrator.listeners.OrchestrationListenerManager access$100(android.support.test.orchestrator.AndroidTestOrchestrator)>($r3);

        virtualinvoke $r4.<android.support.test.orchestrator.CallbackLogic: void setListenerManager(android.support.test.orchestrator.listeners.OrchestrationListenerManager)>($r5);

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$1: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: void access$200(android.support.test.orchestrator.AndroidTestOrchestrator)>($r3);

        return;
    }

    public void onServiceDisconnected(android.content.ComponentName)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator$1 $r0;
        android.content.ComponentName $r1;
        android.os.Bundle $r2;
        android.support.test.orchestrator.AndroidTestOrchestrator $r3, $r4;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator$1;

        $r1 := @parameter0: android.content.ComponentName;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidTestOrchestrator", "AndroidTestOrchestrator has prematurely disconnected from the orchestration service,run cancelled.");

        $r3 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$1: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r4 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$1: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r2 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle access$300(android.support.test.orchestrator.AndroidTestOrchestrator)>($r4);

        virtualinvoke $r3.<android.support.test.orchestrator.AndroidTestOrchestrator: void finish(int,android.os.Bundle)>(0, $r2);

        return;
    }

android.support.test.orchestrator.AndroidTestOrchestrator$2
<android.support.test.orchestrator.AndroidTestOrchestrator$2: android.support.test.orchestrator.AndroidTestOrchestrator this$0>
    void <init>(android.support.test.orchestrator.AndroidTestOrchestrator)
    {
        android.support.test.orchestrator.AndroidTestOrchestrator$2 $r0;
        android.support.test.orchestrator.AndroidTestOrchestrator $r1;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator$2;

        $r1 := @parameter0: android.support.test.orchestrator.AndroidTestOrchestrator;

        $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$2: android.support.test.orchestrator.AndroidTestOrchestrator this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.orchestrator.AndroidTestOrchestrator$2 $r0;
        android.support.test.orchestrator.AndroidTestOrchestrator $r1, $r6;
        android.content.Context $r2;
        android.os.Bundle $r3;
        java.lang.String $r4, $r7;
        java.lang.String[] $r5;
        java.util.List $r8;

        $r0 := @this: android.support.test.orchestrator.AndroidTestOrchestrator$2;

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$2: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r2 = virtualinvoke $r1.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$2: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r3 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle access$400(android.support.test.orchestrator.AndroidTestOrchestrator)>($r1);

        $r4 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String access$500(android.os.Bundle)>($r3);

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "clear";

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$2: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r6 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$2: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r3 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle access$400(android.support.test.orchestrator.AndroidTestOrchestrator)>($r6);

        $r7 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String access$600(android.support.test.orchestrator.AndroidTestOrchestrator,android.os.Bundle)>($r1, $r3);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String access$700(android.content.Context,java.lang.String,java.lang.String,java.util.List)>($r2, $r4, "pm", $r8);

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$2: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r2 = virtualinvoke $r1.<android.support.test.orchestrator.AndroidTestOrchestrator: android.content.Context getContext()>();

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$2: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r3 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle access$400(android.support.test.orchestrator.AndroidTestOrchestrator)>($r1);

        $r4 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String access$500(android.os.Bundle)>($r3);

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "clear";

        $r1 = $r0.<android.support.test.orchestrator.AndroidTestOrchestrator$2: android.support.test.orchestrator.AndroidTestOrchestrator this$0>;

        $r3 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: android.os.Bundle access$400(android.support.test.orchestrator.AndroidTestOrchestrator)>($r1);

        $r7 = staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String access$800(android.os.Bundle)>($r3);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        staticinvoke <android.support.test.orchestrator.AndroidTestOrchestrator: java.lang.String access$700(android.content.Context,java.lang.String,java.lang.String,java.util.List)>($r2, $r4, "pm", $r8);

        return;
    }

