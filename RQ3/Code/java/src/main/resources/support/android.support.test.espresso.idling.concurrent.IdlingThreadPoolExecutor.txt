android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor
<android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: java.lang.String LOG_TAG>
<android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>
    public void <init>(java.lang.String, int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory)
    {
        android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        java.lang.String r1, $r7, $r8, $r11, r13;
        int i0, i1, $i3;
        long l2;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.BlockingQueue r3;
        java.util.concurrent.ThreadFactory r4;
        android.support.test.espresso.IdlingRegistry $r9;
        java.lang.Object[] $r10;
        android.support.test.espresso.idling.CountingIdlingResource r12;
        android.support.test.espresso.IdlingResource[] r14;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r2 := @parameter4: java.util.concurrent.TimeUnit;

        r3 := @parameter5: java.util.concurrent.BlockingQueue;

        r4 := @parameter6: java.util.concurrent.ThreadFactory;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(i0, i1, l2, r2, r3, r4);

        r12 = new android.support.test.espresso.idling.CountingIdlingResource;

        specialinvoke r12.<android.support.test.espresso.idling.CountingIdlingResource: void <init>(java.lang.String)>(r1);

        r0.<android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource> = r12;

        $r7 = "Register idling resource for thread pool ";

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i3 == 0 goto label1;

        $r11 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r8);

        goto label2;

     label1:
        r13 = new java.lang.String;

        $r11 = r13;

        specialinvoke r13.<java.lang.String: void <init>(java.lang.String)>("Register idling resource for thread pool ");

     label2:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("IdlingThreadPoolExec", $r11);

        $r9 = staticinvoke <android.support.test.espresso.IdlingRegistry: android.support.test.espresso.IdlingRegistry getInstance()>();

        $r10 = newarray (android.support.test.espresso.IdlingResource)[1];

        $r10[0] = r0;

        r14 = (android.support.test.espresso.IdlingResource[]) $r10;

        virtualinvoke $r9.<android.support.test.espresso.IdlingRegistry: boolean register(android.support.test.espresso.IdlingResource[])>(r14);

        return;
    }

    public java.lang.String getName()
    {
        android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        android.support.test.espresso.idling.CountingIdlingResource $r1;
        java.lang.String $r2;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        $r1 = r0.<android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $r2 = virtualinvoke $r1.<android.support.test.espresso.idling.CountingIdlingResource: java.lang.String getName()>();

        return $r2;
    }

    public boolean isIdleNow()
    {
        android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        android.support.test.espresso.idling.CountingIdlingResource $r1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        $r1 = r0.<android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $z0 = virtualinvoke $r1.<android.support.test.espresso.idling.CountingIdlingResource: boolean isIdleNow()>();

        return $z0;
    }

    public void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource$ResourceCallback)
    {
        android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        android.support.test.espresso.IdlingResource$ResourceCallback r1;
        android.support.test.espresso.idling.CountingIdlingResource $r2;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        r1 := @parameter0: android.support.test.espresso.IdlingResource$ResourceCallback;

        $r2 = r0.<android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r2.<android.support.test.espresso.idling.CountingIdlingResource: void registerIdleTransitionCallback(android.support.test.espresso.IdlingResource$ResourceCallback)>(r1);

        return;
    }

    public synchronized void execute(java.lang.Runnable)
    {
        android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        java.lang.Runnable r1;
        android.support.test.espresso.idling.CountingIdlingResource $r2;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r2.<android.support.test.espresso.idling.CountingIdlingResource: void increment()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>(r1);

        return;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.Throwable r2;
        android.support.test.espresso.idling.CountingIdlingResource $r3;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        virtualinvoke $r3.<android.support.test.espresso.idling.CountingIdlingResource: void decrement()>();

        return;
    }

    protected void terminated()
    {
        android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor r0;
        android.support.test.espresso.idling.CountingIdlingResource $r1;
        java.lang.String $r3, $r4, $r5, $r8, r9;
        int $i0;
        android.support.test.espresso.IdlingRegistry $r6;
        java.lang.Object[] $r7;
        android.support.test.espresso.IdlingResource[] r10;

        r0 := @this: android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void terminated()>();

        $r3 = "Thread pool terminated, unregistering ";

        $r1 = r0.<android.support.test.espresso.idling.concurrent.IdlingThreadPoolExecutor: android.support.test.espresso.idling.CountingIdlingResource countingIdlingResource>;

        $r4 = virtualinvoke $r1.<android.support.test.espresso.idling.CountingIdlingResource: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r8 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

        goto label2;

     label1:
        r9 = new java.lang.String;

        $r8 = r9;

        specialinvoke r9.<java.lang.String: void <init>(java.lang.String)>("Thread pool terminated, unregistering ");

     label2:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("IdlingThreadPoolExec", $r8);

        $r6 = staticinvoke <android.support.test.espresso.IdlingRegistry: android.support.test.espresso.IdlingRegistry getInstance()>();

        $r7 = newarray (android.support.test.espresso.IdlingResource)[1];

        $r7[0] = r0;

        r10 = (android.support.test.espresso.IdlingResource[]) $r7;

        virtualinvoke $r6.<android.support.test.espresso.IdlingRegistry: boolean unregister(android.support.test.espresso.IdlingResource[])>(r10);

        return;
    }

