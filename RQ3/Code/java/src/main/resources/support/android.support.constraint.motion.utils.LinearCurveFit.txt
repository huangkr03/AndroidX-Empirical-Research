android.support.constraint.motion.utils.LinearCurveFit
<android.support.constraint.motion.utils.LinearCurveFit: java.lang.String TAG>
<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>
<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>
<android.support.constraint.motion.utils.LinearCurveFit: double mTotalLength>
    public void <init>(double[], double[][])
    {
        android.support.constraint.motion.utils.LinearCurveFit r0;
        double[] r1, $r3, $r4, $r5;
        double[][] r2;
        int i0, i1, $i2, i3;
        double d0, d1, $d2, $d3, $d4, d5, d6, d7;

        r0 := @this: android.support.constraint.motion.utils.LinearCurveFit;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        specialinvoke r0.<android.support.constraint.motion.utils.CurveFit: void <init>()>();

        r0.<android.support.constraint.motion.utils.LinearCurveFit: double mTotalLength> = #NaN;

        i0 = lengthof r1;

        $r3 = r2[0];

        i1 = lengthof $r3;

        r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT> = r1;

        r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY> = r2;

        if i1 <= 2 goto label4;

        d5 = 0.0;

        d6 = 0.0;

        d7 = 0.0;

        i3 = 0;

     label1:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label3;

        $r4 = r2[i3];

        d0 = $r4[0];

        $r5 = r2[i3];

        d1 = $r5[0];

        if i3 <= 0 goto label2;

        $d3 = d0 - d6;

        $d2 = d1 - d7;

        $d4 = staticinvoke <java.lang.Math: double hypot(double,double)>($d3, $d2);

        d5 = d5 + $d4;

     label2:
        d6 = d0;

        d7 = d1;

        i3 = i3 + 1;

        goto label1;

     label3:
        r0.<android.support.constraint.motion.utils.LinearCurveFit: double mTotalLength> = 0.0;

     label4:
        return;
    }

    private double getLength2D(double)
    {
        android.support.constraint.motion.utils.LinearCurveFit r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, d29, d30, d31, d32, d33, d34, d35, d36;
        int i0, $i2, $i4, $i6, $i8, $i9, $i10, i11;
        boolean $z0;
        double[] $r1, $r2, $r3, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r16, $r18, $r20;
        byte $b1, $b3, $b5, $b7;
        double[][] $r4, $r6, $r13, $r15, $r17, $r19;

        r0 := @this: android.support.constraint.motion.utils.LinearCurveFit;

        d0 := @parameter0: double;

        $d7 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double mTotalLength>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d7);

        if $z0 == 0 goto label1;

        return 0.0;

     label1:
        $r1 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        i0 = lengthof $r1;

        $r2 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d8 = $r2[0];

        $b1 = d0 cmpg $d8;

        if $b1 > 0 goto label2;

        return 0.0;

     label2:
        $r3 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i2 = i0 - 1;

        $d9 = $r3[$i2];

        $b3 = d0 cmpl $d9;

        if $b3 < 0 goto label3;

        $d28 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double mTotalLength>;

        return $d28;

     label3:
        d29 = 0.0;

        d30 = 0.0;

        d31 = 0.0;

        i11 = 0;

     label4:
        $i4 = i0 - 1;

        if i11 >= $i4 goto label8;

        $r4 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r5 = $r4[i11];

        d32 = $r5[0];

        $r6 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r7 = $r6[i11];

        d33 = $r7[1];

        if i11 <= 0 goto label5;

        $d26 = d32 - d30;

        $d25 = d33 - d31;

        $d27 = staticinvoke <java.lang.Math: double hypot(double,double)>($d26, $d25);

        d29 = d29 + $d27;

     label5:
        d30 = d32;

        d31 = d33;

        $r8 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d10 = $r8[i11];

        $b5 = d0 cmpl $d10;

        if $b5 != 0 goto label6;

        return d29;

     label6:
        $r9 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i6 = i11 + 1;

        $d11 = $r9[$i6];

        $b7 = d0 cmpg $d11;

        if $b7 >= 0 goto label7;

        $r10 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i8 = i11 + 1;

        $d13 = $r10[$i8];

        $r11 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d12 = $r11[i11];

        d1 = $d13 - $d12;

        $r12 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d14 = $r12[i11];

        $d15 = d0 - $d14;

        d2 = $d15 / d1;

        $r13 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r14 = $r13[i11];

        d3 = $r14[0];

        $r15 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i9 = i11 + 1;

        $r16 = $r15[$i9];

        d4 = $r16[0];

        $r17 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r18 = $r17[i11];

        d5 = $r18[1];

        $r19 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i10 = i11 + 1;

        $r20 = $r19[$i10];

        d6 = $r20[1];

        $d16 = 1.0 - d2;

        $d18 = d5 * $d16;

        $d17 = d6 * d2;

        $d19 = $d18 + $d17;

        d34 = d33 - $d19;

        $d20 = 1.0 - d2;

        $d22 = d3 * $d20;

        $d21 = d4 * d2;

        $d23 = $d22 + $d21;

        d35 = d32 - $d23;

        $d24 = staticinvoke <java.lang.Math: double hypot(double,double)>(d34, d35);

        d36 = d29 + $d24;

        return d36;

     label7:
        i11 = i11 + 1;

        goto label4;

     label8:
        return 0.0;
    }

    public void getPos(double, double[])
    {
        android.support.constraint.motion.utils.LinearCurveFit r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d19;
        double[] r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r15, $r17, $r19, $r21;
        int i0, i1, $i3, $i5, $i7, $i9, $i10, $i11, i12, i13, i14, i15, i16;
        double[][] $r3, $r12, $r14, $r16, $r18, $r20;
        byte $b2, $b4, $b6, $b8;

        r0 := @this: android.support.constraint.motion.utils.LinearCurveFit;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $r2 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        i0 = lengthof $r2;

        $r3 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        $r5 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d4 = $r5[0];

        $b2 = d0 cmpg $d4;

        if $b2 > 0 goto label03;

        i12 = 0;

     label01:
        if i12 >= i1 goto label02;

        $r20 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r21 = $r20[0];

        $d18 = $r21[i12];

        r1[i12] = $d18;

        i12 = i12 + 1;

        goto label01;

     label02:
        return;

     label03:
        $r6 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i3 = i0 - 1;

        $d5 = $r6[$i3];

        $b4 = d0 cmpl $d5;

        if $b4 < 0 goto label06;

        i13 = 0;

     label04:
        if i13 >= i1 goto label05;

        $r18 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i11 = i0 - 1;

        $r19 = $r18[$i11];

        $d17 = $r19[i13];

        r1[i13] = $d17;

        i13 = i13 + 1;

        goto label04;

     label05:
        return;

     label06:
        i14 = 0;

     label07:
        $i5 = i0 - 1;

        if i14 >= $i5 goto label13;

        $r7 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d6 = $r7[i14];

        $b6 = d0 cmpl $d6;

        if $b6 != 0 goto label09;

        i15 = 0;

     label08:
        if i15 >= i1 goto label09;

        $r16 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r17 = $r16[i14];

        $d16 = $r17[i15];

        r1[i15] = $d16;

        i15 = i15 + 1;

        goto label08;

     label09:
        $r8 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i7 = i14 + 1;

        $d7 = $r8[$i7];

        $b8 = d0 cmpg $d7;

        if $b8 >= 0 goto label12;

        $r9 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i9 = i14 + 1;

        $d9 = $r9[$i9];

        $r10 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d8 = $r10[i14];

        d19 = $d9 - $d8;

        $r11 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d10 = $r11[i14];

        $d11 = d0 - $d10;

        d1 = $d11 / d19;

        i16 = 0;

     label10:
        if i16 >= i1 goto label11;

        $r12 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r13 = $r12[i14];

        d2 = $r13[i16];

        $r14 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i10 = i14 + 1;

        $r15 = $r14[$i10];

        d3 = $r15[i16];

        $d12 = 1.0 - d1;

        $d14 = d2 * $d12;

        $d13 = d3 * d1;

        $d15 = $d14 + $d13;

        r1[i16] = $d15;

        i16 = i16 + 1;

        goto label10;

     label11:
        return;

     label12:
        i14 = i14 + 1;

        goto label07;

     label13:
        return;
    }

    public void getPos(double, float[])
    {
        android.support.constraint.motion.utils.LinearCurveFit r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d19;
        float[] r1;
        int i0, i1, $i3, $i5, $i7, $i9, $i10, $i11, i12, i13, i14, i15, i16;
        double[] $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r15, $r17, $r19, $r21;
        double[][] $r3, $r12, $r14, $r16, $r18, $r20;
        byte $b2, $b4, $b6, $b8;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.support.constraint.motion.utils.LinearCurveFit;

        d0 := @parameter0: double;

        r1 := @parameter1: float[];

        $r2 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        i0 = lengthof $r2;

        $r3 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        $r5 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d4 = $r5[0];

        $b2 = d0 cmpg $d4;

        if $b2 > 0 goto label03;

        i12 = 0;

     label01:
        if i12 >= i1 goto label02;

        $r20 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r21 = $r20[0];

        $d18 = $r21[i12];

        $f3 = (float) $d18;

        r1[i12] = $f3;

        i12 = i12 + 1;

        goto label01;

     label02:
        return;

     label03:
        $r6 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i3 = i0 - 1;

        $d5 = $r6[$i3];

        $b4 = d0 cmpl $d5;

        if $b4 < 0 goto label06;

        i13 = 0;

     label04:
        if i13 >= i1 goto label05;

        $r18 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i11 = i0 - 1;

        $r19 = $r18[$i11];

        $d17 = $r19[i13];

        $f2 = (float) $d17;

        r1[i13] = $f2;

        i13 = i13 + 1;

        goto label04;

     label05:
        return;

     label06:
        i14 = 0;

     label07:
        $i5 = i0 - 1;

        if i14 >= $i5 goto label13;

        $r7 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d6 = $r7[i14];

        $b6 = d0 cmpl $d6;

        if $b6 != 0 goto label09;

        i15 = 0;

     label08:
        if i15 >= i1 goto label09;

        $r16 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r17 = $r16[i14];

        $d16 = $r17[i15];

        $f1 = (float) $d16;

        r1[i15] = $f1;

        i15 = i15 + 1;

        goto label08;

     label09:
        $r8 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i7 = i14 + 1;

        $d7 = $r8[$i7];

        $b8 = d0 cmpg $d7;

        if $b8 >= 0 goto label12;

        $r9 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i9 = i14 + 1;

        $d9 = $r9[$i9];

        $r10 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d8 = $r10[i14];

        d19 = $d9 - $d8;

        $r11 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d10 = $r11[i14];

        $d11 = d0 - $d10;

        d1 = $d11 / d19;

        i16 = 0;

     label10:
        if i16 >= i1 goto label11;

        $r12 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r13 = $r12[i14];

        d2 = $r13[i16];

        $r14 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i10 = i14 + 1;

        $r15 = $r14[$i10];

        d3 = $r15[i16];

        $d12 = 1.0 - d1;

        $d14 = d2 * $d12;

        $d13 = d3 * d1;

        $d15 = $d14 + $d13;

        $f0 = (float) $d15;

        r1[i16] = $f0;

        i16 = i16 + 1;

        goto label10;

     label11:
        return;

     label12:
        i14 = i14 + 1;

        goto label07;

     label13:
        return;
    }

    public double getPos(double, int)
    {
        android.support.constraint.motion.utils.LinearCurveFit r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        int i0, i1, $i3, $i5, $i7, $i9, $i10, $i11, i12;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r12, $r14, $r16, $r18;
        byte $b2, $b4, $b6, $b8;
        double[][] $r9, $r11, $r13, $r15, $r17;

        r0 := @this: android.support.constraint.motion.utils.LinearCurveFit;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $r1 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        i1 = lengthof $r1;

        $r2 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d5 = $r2[0];

        $b2 = d0 cmpg $d5;

        if $b2 > 0 goto label1;

        $r17 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r18 = $r17[0];

        $d19 = $r18[i0];

        return $d19;

     label1:
        $r3 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i3 = i1 - 1;

        $d6 = $r3[$i3];

        $b4 = d0 cmpl $d6;

        if $b4 < 0 goto label2;

        $r15 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i11 = i1 - 1;

        $r16 = $r15[$i11];

        $d18 = $r16[i0];

        return $d18;

     label2:
        i12 = 0;

     label3:
        $i5 = i1 - 1;

        if i12 >= $i5 goto label6;

        $r4 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d7 = $r4[i12];

        $b6 = d0 cmpl $d7;

        if $b6 != 0 goto label4;

        $r13 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r14 = $r13[i12];

        $d17 = $r14[i0];

        return $d17;

     label4:
        $r5 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i7 = i12 + 1;

        $d8 = $r5[$i7];

        $b8 = d0 cmpg $d8;

        if $b8 >= 0 goto label5;

        $r6 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i9 = i12 + 1;

        $d10 = $r6[$i9];

        $r7 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d9 = $r7[i12];

        d1 = $d10 - $d9;

        $r8 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d11 = $r8[i12];

        $d12 = d0 - $d11;

        d2 = $d12 / d1;

        $r9 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r10 = $r9[i12];

        d3 = $r10[i0];

        $r11 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i10 = i12 + 1;

        $r12 = $r11[$i10];

        d4 = $r12[i0];

        $d13 = 1.0 - d2;

        $d15 = d3 * $d13;

        $d14 = d4 * d2;

        $d16 = $d15 + $d14;

        return $d16;

     label5:
        i12 = i12 + 1;

        goto label3;

     label6:
        return 0.0;
    }

    public void getSlope(double, double[])
    {
        android.support.constraint.motion.utils.LinearCurveFit r0;
        double[] r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r14, $r15, $r16;
        int i0, i1, $i3, $i5, $i7, $i8, $i9, i10, $i11, i12;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13;
        double[][] $r3, $r11, $r13;
        byte $b2, $b4, $b6;

        r0 := @this: android.support.constraint.motion.utils.LinearCurveFit;

        d13 := @parameter0: double;

        r1 := @parameter1: double[];

        $r2 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        i0 = lengthof $r2;

        $r3 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        $r5 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d4 = $r5[0];

        $b2 = d13 cmpg $d4;

        if $b2 > 0 goto label1;

        $r16 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        d13 = $r16[0];

        goto label2;

     label1:
        $r6 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i3 = i0 - 1;

        $d5 = $r6[$i3];

        $b4 = d13 cmpl $d5;

        if $b4 < 0 goto label2;

        $r15 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i9 = i0 - 1;

        d13 = $r15[$i9];

     label2:
        i10 = 0;

     label3:
        $i11 = i0 - 1;

        if i10 >= $i11 goto label7;

        $r7 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i5 = i10 + 1;

        $d6 = $r7[$i5];

        $b6 = d13 cmpg $d6;

        if $b6 > 0 goto label6;

        $r8 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i7 = i10 + 1;

        $d8 = $r8[$i7];

        $r9 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d7 = $r9[i10];

        d0 = $d8 - $d7;

        $r10 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d9 = $r10[i10];

        $d10 = d13 - $d9;

        d1 = $d10 / d0;

        i12 = 0;

     label4:
        if i12 >= i1 goto label5;

        $r11 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r12 = $r11[i10];

        d2 = $r12[i12];

        $r13 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i8 = i10 + 1;

        $r14 = $r13[$i8];

        d3 = $r14[i12];

        $d11 = d3 - d2;

        $d12 = $d11 / d0;

        r1[i12] = $d12;

        i12 = i12 + 1;

        goto label4;

     label5:
        goto label7;

     label6:
        i10 = i10 + 1;

        goto label3;

     label7:
        return;
    }

    public double getSlope(double, int)
    {
        android.support.constraint.motion.utils.LinearCurveFit r0;
        int i0, i1, $i3, $i5, $i7, $i8, $i9, i10, $i11;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r11, $r12, $r13;
        byte $b2, $b4, $b6;
        double[][] $r8, $r10;

        r0 := @this: android.support.constraint.motion.utils.LinearCurveFit;

        d13 := @parameter0: double;

        i0 := @parameter1: int;

        $r1 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        i1 = lengthof $r1;

        $r2 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d4 = $r2[0];

        $b2 = d13 cmpg $d4;

        if $b2 >= 0 goto label1;

        $r13 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        d13 = $r13[0];

        goto label2;

     label1:
        $r3 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i3 = i1 - 1;

        $d5 = $r3[$i3];

        $b4 = d13 cmpl $d5;

        if $b4 < 0 goto label2;

        $r12 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i9 = i1 - 1;

        d13 = $r12[$i9];

     label2:
        i10 = 0;

     label3:
        $i11 = i1 - 1;

        if i10 >= $i11 goto label5;

        $r4 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i5 = i10 + 1;

        $d6 = $r4[$i5];

        $b6 = d13 cmpg $d6;

        if $b6 > 0 goto label4;

        $r5 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $i7 = i10 + 1;

        $d8 = $r5[$i7];

        $r6 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d7 = $r6[i10];

        d0 = $d8 - $d7;

        $r7 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        $d9 = $r7[i10];

        $d10 = d13 - $d9;

        d1 = $d10 / d0;

        $r8 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $r9 = $r8[i10];

        d2 = $r9[i0];

        $r10 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[][] mY>;

        $i8 = i10 + 1;

        $r11 = $r10[$i8];

        d3 = $r11[i0];

        $d11 = d3 - d2;

        $d12 = $d11 / d0;

        return $d12;

     label4:
        i10 = i10 + 1;

        goto label3;

     label5:
        return 0.0;
    }

    public double[] getTimePoints()
    {
        android.support.constraint.motion.utils.LinearCurveFit r0;
        double[] $r1;

        r0 := @this: android.support.constraint.motion.utils.LinearCurveFit;

        $r1 = r0.<android.support.constraint.motion.utils.LinearCurveFit: double[] mT>;

        return $r1;
    }

