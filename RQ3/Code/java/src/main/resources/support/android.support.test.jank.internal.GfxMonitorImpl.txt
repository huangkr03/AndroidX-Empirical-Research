android.support.test.jank.internal.GfxMonitorImpl
<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>
<android.support.test.jank.internal.GfxMonitorImpl: android.app.UiAutomation mUiAutomation>
<android.support.test.jank.internal.GfxMonitorImpl: java.lang.String mProcess>
    public void <init>(android.app.UiAutomation, java.lang.String)
    {
        android.support.test.jank.internal.GfxMonitorImpl r0;
        android.app.UiAutomation r1;
        java.lang.String r2;
        android.support.test.jank.internal.GfxMonitorImpl$JankStat[] r3;
        int i0, i1;
        android.support.test.jank.internal.GfxMonitorImpl$JankStat r4;
        java.util.EnumMap $r5;
        java.lang.Class $r6, $r7;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r8;
        java.util.ArrayList $r9, $r12;
        java.util.Map $r10, $r13;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl;

        r1 := @parameter0: android.app.UiAutomation;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.EnumMap;

        specialinvoke $r5.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Landroid/support/test/jank/internal/GfxMonitorImpl$JankStat;");

        r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats> = $r5;

        r0.<android.support.test.jank.internal.GfxMonitorImpl: android.app.UiAutomation mUiAutomation> = r1;

        r0.<android.support.test.jank.internal.GfxMonitorImpl: java.lang.String mProcess> = r2;

        r3 = staticinvoke <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat[] values()>();

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r4 = r3[i1];

        $r6 = virtualinvoke r4.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.lang.Class getType()>();

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Integer;");

        if $z0 == 0 goto label2;

        $r13 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r12);

        goto label4;

     label2:
        $r7 = virtualinvoke r4.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.lang.Class getType()>();

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Double;");

        if $z1 == 0 goto label3;

        $r10 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9);

        goto label4;

     label3:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unsupported JankStat type");

        throw $r8;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }

    public void startIteration() throws java.io.IOException
    {
        android.support.test.jank.internal.GfxMonitorImpl r0;
        android.os.ParcelFileDescriptor r1;
        java.io.BufferedReader r2, $r7;
        java.lang.Object[] $r3;
        java.lang.String $r4, $r6, $r10;
        android.app.UiAutomation $r5;
        java.io.InputStreamReader $r8;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r9;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl;

        $r5 = r0.<android.support.test.jank.internal.GfxMonitorImpl: android.app.UiAutomation mUiAutomation>;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.lang.String mProcess>;

        $r3[0] = $r4;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("dumpsys gfxinfo %s reset", $r3);

        r1 = virtualinvoke $r5.<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>($r6);

        $r7 = new java.io.BufferedReader;

        $r8 = new java.io.InputStreamReader;

        $r9 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke $r9.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r1);

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9);

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader)>($r8);

        r2 = $r7;

     label1:
        $r10 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r10 == null goto label2;

        goto label1;

     label2:
        return;
    }

    public int stopIteration() throws java.io.IOException
    {
        android.support.test.jank.internal.GfxMonitorImpl r0;
        android.os.ParcelFileDescriptor r1;
        java.io.BufferedReader r2, $r9;
        java.lang.String r3, r4, $r6, $r8, $r12, $r19, $r20, $r21;
        java.lang.Object[] $r5, $r18;
        android.app.UiAutomation $r7;
        java.io.InputStreamReader $r10;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r11;
        android.support.test.jank.internal.GfxMonitorImpl$JankStat $r13, r32, r36;
        java.util.Map $r14, $r25, $r28;
        java.lang.Object $r15, $r16, $r26, $r29;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        java.lang.Integer $r17, $r30;
        boolean $z0, $z1, $z2;
        java.lang.Class $r22, $r23;
        java.lang.IllegalStateException $r24;
        java.lang.Double $r27;
        android.support.test.jank.internal.GfxMonitorImpl$JankStat[] r31, r35;
        java.util.List r33, r34, r37;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl;

        $r7 = r0.<android.support.test.jank.internal.GfxMonitorImpl: android.app.UiAutomation mUiAutomation>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.lang.String mProcess>;

        $r5[0] = $r6;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("dumpsys gfxinfo %s", $r5);

        r1 = virtualinvoke $r7.<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>($r8);

        $r9 = new java.io.BufferedReader;

        $r10 = new java.io.InputStreamReader;

        $r11 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke $r11.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r1);

        specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r11);

        specialinvoke $r9.<java.io.BufferedReader: void <init>(java.io.Reader)>($r10);

        r2 = $r9;

     label01:
        $r12 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();

        r3 = $r12;

        if $r12 == null goto label07;

        r31 = staticinvoke <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat[] values()>();

        i3 = lengthof r31;

        i4 = 0;

     label02:
        if i4 >= i3 goto label06;

        r32 = r31[i4];

        $r21 = virtualinvoke r32.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.lang.String parse(java.lang.String)>(r3);

        r4 = $r21;

        if $r21 == null goto label05;

        $r22 = virtualinvoke r32.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.lang.Class getType()>();

        $z1 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Integer;");

        if $z1 == 0 goto label03;

        $r28 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32);

        r33 = (java.util.List) $r29;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r4);

        interfaceinvoke r33.<java.util.List: boolean add(java.lang.Object)>($r30);

        goto label06;

     label03:
        $r23 = virtualinvoke r32.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.lang.Class getType()>();

        $z2 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Double;");

        if $z2 == 0 goto label04;

        $r25 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32);

        r34 = (java.util.List) $r26;

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r4);

        interfaceinvoke r34.<java.util.List: boolean add(java.lang.Object)>($r27);

        goto label06;

     label04:
        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unsupported JankStat type");

        throw $r24;

     label05:
        i4 = i4 + 1;

        goto label02;

     label06:
        goto label01;

     label07:
        r35 = staticinvoke <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat[] values()>();

        i5 = lengthof r35;

        i6 = 0;

     label08:
        if i6 >= i5 goto label10;

        r36 = r35[i6];

        $z0 = virtualinvoke r36.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: boolean wasParsedSuccessfully()>();

        if $z0 != 0 goto label09;

        $r18 = newarray (java.lang.Object)[1];

        $r19 = virtualinvoke r36.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.lang.String name()>();

        $r18[0] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to parse %s", $r18);

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r20);

     label09:
        virtualinvoke r36.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void reset()>();

        i6 = i6 + 1;

        goto label08;

     label10:
        $r14 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r13 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat TOTAL_FRAMES>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        r37 = (java.util.List) $r15;

        $i0 = interfaceinvoke r37.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r16 = interfaceinvoke r37.<java.util.List: java.lang.Object get(int)>($i1);

        $r17 = (java.lang.Integer) $r16;

        $i2 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        return $i2;
    }

    private void putAvgMaxInteger(android.os.Bundle, java.lang.String, java.lang.String, java.util.List)
    {
        android.support.test.jank.internal.GfxMonitorImpl r0;
        android.os.Bundle r1;
        java.lang.String r2, r3;
        java.util.List r4;
        double $d0;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        int $i0;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.List;

        $d0 = staticinvoke <android.support.test.jank.internal.MetricsHelper: double computeAverageInt(java.util.List)>(r4);

        virtualinvoke r1.<android.os.Bundle: void putDouble(java.lang.String,double)>(r2, $d0);

        $r5 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>(r4);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>(r3, $i0);

        return;
    }

    private void putAvgMaxDouble(android.os.Bundle, java.lang.String, java.lang.String, java.util.List)
    {
        android.support.test.jank.internal.GfxMonitorImpl r0;
        android.os.Bundle r1;
        java.lang.String r2, r3;
        java.util.List r4;
        double $d0, $d1;
        java.lang.Object $r5;
        java.lang.Double $r6;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.List;

        $d0 = staticinvoke <android.support.test.jank.internal.MetricsHelper: double computeAverageFloat(java.util.List)>(r4);

        virtualinvoke r1.<android.os.Bundle: void putDouble(java.lang.String,double)>(r2, $d0);

        $r5 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>(r4);

        $r6 = (java.lang.Double) $r5;

        $d1 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        virtualinvoke r1.<android.os.Bundle: void putDouble(java.lang.String,double)>(r3, $d1);

        return;
    }

    private java.util.List transformToPercentage(java.util.List, java.util.List)
    {
        android.support.test.jank.internal.GfxMonitorImpl r0;
        java.util.List r1, r2;
        java.util.ArrayList r3, $r6;
        java.util.Iterator r4, r5;
        double d0, d1, $d2, $d3;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r7, $r9;
        java.lang.Integer $r8, $r10;
        java.lang.Double $r11;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = $r6;

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Integer) $r7;

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        d0 = (double) $i1;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Integer) $r9;

        $i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        d1 = (double) $i2;

        $d2 = d0 / d1;

        $d3 = $d2 * 100.0;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        return r3;
    }

    public android.os.Bundle getMetrics()
    {
        android.support.test.jank.internal.GfxMonitorImpl r0;
        android.os.Bundle r1, $r8;
        java.util.List r2, r3, r4, r5, r6, r7, $r15, $r19, $r23, $r27, $r31, $r35, $r39, $r43, $r47;
        android.support.test.jank.internal.GfxMonitorImpl$JankStat $r9, $r12, $r16, $r20, $r24, $r28, $r32, $r36, $r40, $r44;
        java.util.Map $r10, $r13, $r17, $r21, $r25, $r29, $r33, $r37, $r41, $r45;
        java.lang.Object $r11, $r14, $r18, $r22, $r26, $r30, $r34, $r38, $r42, $r46;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl;

        $r8 = new android.os.Bundle;

        specialinvoke $r8.<android.os.Bundle: void <init>()>();

        r1 = $r8;

        $r10 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r9 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat TOTAL_FRAMES>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r2 = (java.util.List) $r11;

        $r13 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r12 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_JANKY>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        $r15 = (java.util.List) $r14;

        specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: void putAvgMaxDouble(android.os.Bundle,java.lang.String,java.lang.String,java.util.List)>(r1, "gfx-avg-jank", "gfx-max-jank", $r15);

        $r17 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r16 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_90TH>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        $r19 = (java.util.List) $r18;

        specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: void putAvgMaxInteger(android.os.Bundle,java.lang.String,java.lang.String,java.util.List)>(r1, "gfx-avg-frame-time-90", "gfx-max-frame-time-90", $r19);

        $r21 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r20 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_95TH>;

        $r22 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

        $r23 = (java.util.List) $r22;

        specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: void putAvgMaxInteger(android.os.Bundle,java.lang.String,java.lang.String,java.util.List)>(r1, "gfx-avg-frame-time-95", "gfx-max-frame-time-95", $r23);

        $r25 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r24 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_99TH>;

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24);

        $r27 = (java.util.List) $r26;

        specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: void putAvgMaxInteger(android.os.Bundle,java.lang.String,java.lang.String,java.util.List)>(r1, "gfx-avg-frame-time-99", "gfx-max-frame-time-99", $r27);

        $r29 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r28 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_MISSED_VSYNC>;

        $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>($r28);

        $r31 = (java.util.List) $r30;

        r3 = specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.List transformToPercentage(java.util.List,java.util.List)>($r31, r2);

        specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: void putAvgMaxDouble(android.os.Bundle,java.lang.String,java.lang.String,java.util.List)>(r1, "gfx-avg-missed-vsync", "gfx-max-missed-vsync", r3);

        $r33 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r32 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_HIGH_INPUT_LATENCY>;

        $r34 = interfaceinvoke $r33.<java.util.Map: java.lang.Object get(java.lang.Object)>($r32);

        $r35 = (java.util.List) $r34;

        r4 = specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.List transformToPercentage(java.util.List,java.util.List)>($r35, r2);

        specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: void putAvgMaxDouble(android.os.Bundle,java.lang.String,java.lang.String,java.util.List)>(r1, "gfx-avg-high-input-latency", "gfx-max-high-input-latency", r4);

        $r37 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r36 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_UI_THREAD>;

        $r38 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>($r36);

        $r39 = (java.util.List) $r38;

        r5 = specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.List transformToPercentage(java.util.List,java.util.List)>($r39, r2);

        specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: void putAvgMaxDouble(android.os.Bundle,java.lang.String,java.lang.String,java.util.List)>(r1, "gfx-avg-slow-ui-thread", "gfx-max-slow-ui-thread", r5);

        $r41 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r40 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_BITMAP_UPLOADS>;

        $r42 = interfaceinvoke $r41.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40);

        $r43 = (java.util.List) $r42;

        r6 = specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.List transformToPercentage(java.util.List,java.util.List)>($r43, r2);

        specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: void putAvgMaxDouble(android.os.Bundle,java.lang.String,java.lang.String,java.util.List)>(r1, "gfx-avg-slow-bitmap-uploads", "gfx-max-slow-bitmap-uploads", r6);

        $r45 = r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.Map mAccumulatedStats>;

        $r44 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_DRAW>;

        $r46 = interfaceinvoke $r45.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44);

        $r47 = (java.util.List) $r46;

        r7 = specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: java.util.List transformToPercentage(java.util.List,java.util.List)>($r47, r2);

        specialinvoke r0.<android.support.test.jank.internal.GfxMonitorImpl: void putAvgMaxDouble(android.os.Bundle,java.lang.String,java.lang.String,java.util.List)>(r1, "gfx-avg-slow-draw", "gfx-max-slow-draw", r7);

        return r1;
    }

    private java.lang.String getMatchGroup(java.lang.String, java.util.regex.Pattern, int)
    {
        android.support.test.jank.internal.GfxMonitorImpl r0;
        java.lang.String r1, r4;
        java.util.regex.Pattern r2;
        int i0;
        java.util.regex.Matcher r3;
        boolean $z0;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.regex.Pattern;

        i0 := @parameter2: int;

        r4 = null;

        r3 = virtualinvoke r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        r4 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(i0);

     label1:
        return r4;
    }

android.support.test.jank.internal.GfxMonitorImpl$JankStat
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat TOTAL_FRAMES>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_JANKY>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_90TH>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_95TH>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_99TH>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_MISSED_VSYNC>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_HIGH_INPUT_LATENCY>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_UI_THREAD>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_BITMAP_UPLOADS>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_DRAW>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: boolean mSuccessfulParse>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.util.regex.Pattern mParsePattern>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: int mGroupIndex>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.lang.Class mType>
<android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat[] $VALUES>
    public static android.support.test.jank.internal.GfxMonitorImpl$JankStat[] values()
    {
        android.support.test.jank.internal.GfxMonitorImpl$JankStat[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (android.support.test.jank.internal.GfxMonitorImpl$JankStat[]) $r1;

        return $r2;
    }

    public static android.support.test.jank.internal.GfxMonitorImpl$JankStat valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        android.support.test.jank.internal.GfxMonitorImpl$JankStat $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/support/test/jank/internal/GfxMonitorImpl$JankStat;", r0);

        $r2 = (android.support.test.jank.internal.GfxMonitorImpl$JankStat) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.util.regex.Pattern, int, java.lang.Class)
    {
        android.support.test.jank.internal.GfxMonitorImpl$JankStat r0;
        java.lang.String r1;
        int i0, i1;
        java.util.regex.Pattern r2;
        java.lang.Class r3;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.regex.Pattern;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.Class;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: boolean mSuccessfulParse> = 0;

        r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.util.regex.Pattern mParsePattern> = r2;

        r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: int mGroupIndex> = i1;

        r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.lang.Class mType> = r3;

        return;
    }

    java.lang.String parse(java.lang.String)
    {
        android.support.test.jank.internal.GfxMonitorImpl$JankStat r0;
        java.lang.String r1, r4;
        java.util.regex.Matcher r2;
        java.util.regex.Pattern $r3;
        boolean $z0;
        int $i0;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        r1 := @parameter0: java.lang.String;

        r4 = null;

        $r3 = r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.util.regex.Pattern mParsePattern>;

        r2 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: int mGroupIndex>;

        r4 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>($i0);

        r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: boolean mSuccessfulParse> = 1;

     label1:
        return r4;
    }

    boolean wasParsedSuccessfully()
    {
        android.support.test.jank.internal.GfxMonitorImpl$JankStat r0;
        boolean $z0;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $z0 = r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: boolean mSuccessfulParse>;

        return $z0;
    }

    void reset()
    {
        android.support.test.jank.internal.GfxMonitorImpl$JankStat r0;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: boolean mSuccessfulParse> = 0;

        return;
    }

    java.lang.Class getType()
    {
        android.support.test.jank.internal.GfxMonitorImpl$JankStat r0;
        java.lang.Class $r1;

        r0 := @this: android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r1 = r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: java.lang.Class mType>;

        return $r1;
    }

    static void <clinit>()
    {
        android.support.test.jank.internal.GfxMonitorImpl$JankStat $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        java.util.regex.Pattern $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        android.support.test.jank.internal.GfxMonitorImpl$JankStat[] $r20;

        $r0 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*Total frames rendered: (\\d+)");

        specialinvoke $r0.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("TOTAL_FRAMES", 0, $r1, 1, class "Ljava/lang/Integer;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat TOTAL_FRAMES> = $r0;

        $r2 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*Janky frames: (\\d+) \\((\\d+(\\.\\d+))%\\)");

        specialinvoke $r2.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("NUM_JANKY", 1, $r3, 2, class "Ljava/lang/Double;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_JANKY> = $r2;

        $r4 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*90th percentile: (\\d+)ms");

        specialinvoke $r4.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("FRAME_TIME_90TH", 2, $r5, 1, class "Ljava/lang/Integer;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_90TH> = $r4;

        $r6 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*95th percentile: (\\d+)ms");

        specialinvoke $r6.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("FRAME_TIME_95TH", 3, $r7, 1, class "Ljava/lang/Integer;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_95TH> = $r6;

        $r8 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r9 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*99th percentile: (\\d+)ms");

        specialinvoke $r8.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("FRAME_TIME_99TH", 4, $r9, 1, class "Ljava/lang/Integer;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_99TH> = $r8;

        $r10 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r11 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*Number Missed Vsync: (\\d+)");

        specialinvoke $r10.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("NUM_MISSED_VSYNC", 5, $r11, 1, class "Ljava/lang/Integer;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_MISSED_VSYNC> = $r10;

        $r12 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r13 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*Number High input latency: (\\d+)");

        specialinvoke $r12.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("NUM_HIGH_INPUT_LATENCY", 6, $r13, 1, class "Ljava/lang/Integer;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_HIGH_INPUT_LATENCY> = $r12;

        $r14 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r15 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*Number Slow UI thread: (\\d+)");

        specialinvoke $r14.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("NUM_SLOW_UI_THREAD", 7, $r15, 1, class "Ljava/lang/Integer;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_UI_THREAD> = $r14;

        $r16 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r17 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*Number Slow bitmap uploads: (\\d+)");

        specialinvoke $r16.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("NUM_SLOW_BITMAP_UPLOADS", 8, $r17, 1, class "Ljava/lang/Integer;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_BITMAP_UPLOADS> = $r16;

        $r18 = new android.support.test.jank.internal.GfxMonitorImpl$JankStat;

        $r19 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*Number Slow issue draw commands: (\\d+)");

        specialinvoke $r18.<android.support.test.jank.internal.GfxMonitorImpl$JankStat: void <init>(java.lang.String,int,java.util.regex.Pattern,int,java.lang.Class)>("NUM_SLOW_DRAW", 9, $r19, 1, class "Ljava/lang/Integer;");

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_DRAW> = $r18;

        $r20 = newarray (android.support.test.jank.internal.GfxMonitorImpl$JankStat)[10];

        $r21 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat TOTAL_FRAMES>;

        $r20[0] = $r21;

        $r22 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_JANKY>;

        $r20[1] = $r22;

        $r23 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_90TH>;

        $r20[2] = $r23;

        $r24 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_95TH>;

        $r20[3] = $r24;

        $r25 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat FRAME_TIME_99TH>;

        $r20[4] = $r25;

        $r26 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_MISSED_VSYNC>;

        $r20[5] = $r26;

        $r27 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_HIGH_INPUT_LATENCY>;

        $r20[6] = $r27;

        $r28 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_UI_THREAD>;

        $r20[7] = $r28;

        $r29 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_BITMAP_UPLOADS>;

        $r20[8] = $r29;

        $r30 = <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat NUM_SLOW_DRAW>;

        $r20[9] = $r30;

        <android.support.test.jank.internal.GfxMonitorImpl$JankStat: android.support.test.jank.internal.GfxMonitorImpl$JankStat[] $VALUES> = $r20;

        return;
    }

