android.support.test.runner.intent.IntentStubberRegistry
<android.support.test.runner.intent.IntentStubberRegistry: android.support.test.runner.intent.IntentStubber mInstance>
<android.support.test.runner.intent.IntentStubberRegistry: java.util.concurrent.atomic.AtomicBoolean mIsLoaded>
    public static void load(android.support.test.runner.intent.IntentStubber)
    {
        android.support.test.runner.intent.IntentStubber r0;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0, $z1;

        r0 := @parameter0: android.support.test.runner.intent.IntentStubber;

        staticinvoke <android.support.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "IntentStubber cannot be null!");

        $r2 = <android.support.test.runner.intent.IntentStubberRegistry: java.util.concurrent.atomic.AtomicBoolean mIsLoaded>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z1, "Intent stubber already registered! Multiple stubbers are notallowedAre you running under an ");

        <android.support.test.runner.intent.IntentStubberRegistry: android.support.test.runner.intent.IntentStubber mInstance> = r0;

        return;
    }

    public static boolean isLoaded()
    {
        java.util.concurrent.atomic.AtomicBoolean $r0;
        boolean $z0;

        $r0 = <android.support.test.runner.intent.IntentStubberRegistry: java.util.concurrent.atomic.AtomicBoolean mIsLoaded>;

        $z0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public static android.support.test.runner.intent.IntentStubber getInstance()
    {
        android.support.test.runner.intent.IntentStubber $r0, $r1;
        boolean $z0;

        staticinvoke <android.support.test.runner.intent.IntentStubberRegistry: void checkMain()>();

        $r0 = <android.support.test.runner.intent.IntentStubberRegistry: android.support.test.runner.intent.IntentStubber mInstance>;

        if null == $r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z0, "No intent monitor registered! Are you running under an Instrumentation which registers intent monitors?");

        $r1 = <android.support.test.runner.intent.IntentStubberRegistry: android.support.test.runner.intent.IntentStubber mInstance>;

        return $r1;
    }

    private static void checkMain()
    {
        android.os.Looper $r0, $r1;
        boolean $z0;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <android.support.test.internal.util.Checks: void checkState(boolean,java.lang.Object)>($z0, "Must be called on main thread.");

        return;
    }

    private void <init>()
    {
        android.support.test.runner.intent.IntentStubberRegistry r0;

        r0 := @this: android.support.test.runner.intent.IntentStubberRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized void reset()
    {
        java.util.concurrent.atomic.AtomicBoolean $r0;

        <android.support.test.runner.intent.IntentStubberRegistry: android.support.test.runner.intent.IntentStubber mInstance> = null;

        $r0 = <android.support.test.runner.intent.IntentStubberRegistry: java.util.concurrent.atomic.AtomicBoolean mIsLoaded>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicBoolean $r0;

        $r0 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        <android.support.test.runner.intent.IntentStubberRegistry: java.util.concurrent.atomic.AtomicBoolean mIsLoaded> = $r0;

        return;
    }

