android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture
<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture inputFuture>
<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType>
<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback>
    static android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture create(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture, java.lang.Class, android.support.test.espresso.web.internal.deps.guava.base.Function, java.util.concurrent.Executor)
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture r0;
        java.lang.Class r1;
        android.support.test.espresso.web.internal.deps.guava.base.Function r2;
        java.util.concurrent.Executor r3, $r6;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture r4, $r5;

        r0 := @parameter0: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: android.support.test.espresso.web.internal.deps.guava.base.Function;

        r3 := @parameter3: java.util.concurrent.Executor;

        $r5 = new android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture;

        specialinvoke $r5.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture: void <init>(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture,java.lang.Class,android.support.test.espresso.web.internal.deps.guava.base.Function)>(r0, r1, r2);

        r4 = $r5;

        $r6 = staticinvoke <android.support.test.espresso.web.internal.deps.guava.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractFuture)>(r3, r4);

        interfaceinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r4, $r6);

        return r4;
    }

    static android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture create(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture, java.lang.Class, android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction, java.util.concurrent.Executor)
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture r0;
        java.lang.Class r1;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction r2;
        java.util.concurrent.Executor r3, $r6;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture r4, $r5;

        r0 := @parameter0: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction;

        r3 := @parameter3: java.util.concurrent.Executor;

        $r5 = new android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture;

        specialinvoke $r5.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture: void <init>(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture,java.lang.Class,android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction)>(r0, r1, r2);

        r4 = $r5;

        $r6 = staticinvoke <android.support.test.espresso.web.internal.deps.guava.util.concurrent.MoreExecutors: java.util.concurrent.Executor rejectionPropagatingExecutor(java.util.concurrent.Executor,android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractFuture)>(r3, r4);

        interfaceinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r4, $r6);

        return r4;
    }

    void <init>(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture, java.lang.Class, java.lang.Object)
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture r0;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture r1, $r5;
        java.lang.Class r2, $r7;
        java.lang.Object r3, $r4, $r6, $r8;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture;

        r1 := @parameter0: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractFuture$TrustedFuture: void <init>()>();

        $r4 = staticinvoke <android.support.test.espresso.web.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture) $r4;

        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture inputFuture> = $r5;

        $r6 = staticinvoke <android.support.test.espresso.web.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r7 = (java.lang.Class) $r6;

        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = $r7;

        $r8 = staticinvoke <android.support.test.espresso.web.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = $r8;

        return;
    }

    public final void run()
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture r0;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture r1;
        java.lang.Class r2;
        java.lang.Object r3, r4, $r9, r13;
        java.lang.Throwable r5, r6, $r7, $r8, $r10, $r11, $r12, r14, r15, r16, r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z8, $z9, $z10;
        java.util.concurrent.ExecutionException r18;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture;

        r1 = r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture inputFuture>;

        r2 = r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType>;

        r3 = r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback>;

        if r1 != null goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        if r2 != null goto label03;

        $z9 = 1;

        goto label04;

     label03:
        $z9 = 0;

     label04:
        $z0 = $z8 | $z9;

        if r3 != null goto label05;

        $z10 = 1;

        goto label06;

     label05:
        $z10 = 0;

     label06:
        $z1 = $z0 | $z10;

        $z2 = virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: boolean isCancelled()>();

        $z3 = $z1 | $z2;

        if $z3 == 0 goto label07;

        return;

     label07:
        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture inputFuture> = null;

        r13 = null;

        r14 = null;

     label08:
        r13 = staticinvoke <android.support.test.espresso.web.internal.deps.guava.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)>(r1);

     label09:
        goto label12;

     label10:
        $r7 := @caughtexception;

        r15 = $r7;

        r18 = (java.util.concurrent.ExecutionException) r15;

        $r8 = virtualinvoke r18.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $r9 = staticinvoke <android.support.test.espresso.web.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r8);

        r14 = (java.lang.Throwable) $r9;

        goto label12;

     label11:
        $r10 := @caughtexception;

        r16 = $r10;

        r14 = r16;

     label12:
        if r14 != null goto label13;

        virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: boolean set(java.lang.Object)>(r13);

        return;

     label13:
        $z4 = staticinvoke <android.support.test.espresso.web.internal.deps.guava.util.concurrent.Platform: boolean isInstanceOfThrowableClass(java.lang.Throwable,java.lang.Class)>(r14, r2);

        if $z4 != 0 goto label14;

        virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: boolean setException(java.lang.Throwable)>(r14);

        return;

     label14:
        r17 = r14;

     label15:
        r4 = virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object doFallback(java.lang.Object,java.lang.Throwable)>(r3, r17);

     label16:
        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

        goto label21;

     label17:
        $r11 := @caughtexception;

        r5 = $r11;

        virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: boolean setException(java.lang.Throwable)>(r5);

     label18:
        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

        return;

     label19:
        $r12 := @caughtexception;

        r6 = $r12;

     label20:
        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

        throw r6;

     label21:
        virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: void setResult(java.lang.Object)>(r4);

        return;

        catch java.util.concurrent.ExecutionException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    protected java.lang.String pendingToString()
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture r0;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture r1;
        java.lang.Class r2;
        java.lang.Object r3;
        java.lang.String r4, r5, r6, $r7, $r8, $r9, $r10, $r11, $r19, $r20, r25, r26, r27, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture;

        r1 = r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture inputFuture>;

        r2 = r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType>;

        r3 = r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback>;

        r4 = specialinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractFuture$TrustedFuture: java.lang.String pendingToString()>();

        r25 = "";

        if r1 == null goto label1;

        r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r26);

        $i7 = virtualinvoke $r20.<java.lang.String: int length()>();

        $i8 = 16 + $i7;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(int)>($i8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inputFuture=[");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        if r2 == null goto label2;

        if r3 == null goto label2;

        r27 = r25;

        r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r27);

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i2 = 29 + $i1;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);

        $i3 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r6);

        $i5 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i6 = $i4 + $i5;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(int)>($i6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exceptionType=[");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], fallback=[");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label2:
        if r4 == null goto label5;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r25);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        $r28 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r8);

        goto label4;

     label3:
        $r28 = new java.lang.String;

        specialinvoke $r28.<java.lang.String: void <init>(java.lang.String)>($r7);

     label4:
        return $r28;

     label5:
        return null;
    }

<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object doFallback(java.lang.Object,java.lang.Throwable)>
<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: void setResult(java.lang.Object)>
    protected final void afterDone()
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture r0;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture $r1;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture;

        $r1 = r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture inputFuture>;

        virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: void maybePropagateCancellationTo(java.util.concurrent.Future)>($r1);

        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture inputFuture> = null;

        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Class exceptionType> = null;

        r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: java.lang.Object fallback> = null;

        return;
    }

android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture
    void <init>(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture, java.lang.Class, android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction)
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture r0;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture r1;
        java.lang.Class r2;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction r3;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture;

        r1 := @parameter0: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction;

        specialinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: void <init>(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object)>(r1, r2, r3);

        return;
    }

    android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture doFallback(android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction, java.lang.Throwable) throws java.lang.Exception
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture r0;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction r1;
        java.lang.Throwable r2;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture r3;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture;

        r1 := @parameter0: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction;

        r2 := @parameter1: java.lang.Throwable;

        r3 = interfaceinvoke r1.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture apply(java.lang.Object)>(r2);

        staticinvoke <android.support.test.espresso.web.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "AsyncFunction.apply returned null instead of a Future. Did you mean to return immediateFuture(null)?");

        return r3;
    }

    void setResult(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture)
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture r0;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture r1;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture;

        r1 := @parameter0: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture;

        virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture: boolean setFuture(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture)>(r1);

        return;
    }

    volatile void setResult(java.lang.Object)
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture r0;
        java.lang.Object r1;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture $r2;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture) r1;

        virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture: void setResult(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture)>($r2);

        return;
    }

    volatile java.lang.Object doFallback(java.lang.Object, java.lang.Throwable) throws java.lang.Exception
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction $r3;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture $r4;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = (android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction) r1;

        $r4 = virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$AsyncCatchingFuture: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture doFallback(android.support.test.espresso.web.internal.deps.guava.util.concurrent.AsyncFunction,java.lang.Throwable)>($r3, r2);

        return $r4;
    }

android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture
    void <init>(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture, java.lang.Class, android.support.test.espresso.web.internal.deps.guava.base.Function)
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture r0;
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture r1;
        java.lang.Class r2;
        android.support.test.espresso.web.internal.deps.guava.base.Function r3;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture;

        r1 := @parameter0: android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: android.support.test.espresso.web.internal.deps.guava.base.Function;

        specialinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture: void <init>(android.support.test.espresso.web.internal.deps.guava.util.concurrent.ListenableFuture,java.lang.Class,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Object doFallback(android.support.test.espresso.web.internal.deps.guava.base.Function, java.lang.Throwable) throws java.lang.Exception
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture r0;
        android.support.test.espresso.web.internal.deps.guava.base.Function r1;
        java.lang.Throwable r2;
        java.lang.Object $r3;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture;

        r1 := @parameter0: android.support.test.espresso.web.internal.deps.guava.base.Function;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = interfaceinvoke r1.<android.support.test.espresso.web.internal.deps.guava.base.Function: java.lang.Object apply(java.lang.Object)>(r2);

        return $r3;
    }

    void setResult(java.lang.Object)
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture r0;
        java.lang.Object r1;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture: boolean set(java.lang.Object)>(r1);

        return;
    }

    volatile java.lang.Object doFallback(java.lang.Object, java.lang.Throwable) throws java.lang.Exception
    {
        android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2;
        android.support.test.espresso.web.internal.deps.guava.base.Function $r3;

        r0 := @this: android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = (android.support.test.espresso.web.internal.deps.guava.base.Function) r1;

        $r4 = virtualinvoke r0.<android.support.test.espresso.web.internal.deps.guava.util.concurrent.AbstractCatchingFuture$CatchingFuture: java.lang.Object doFallback(android.support.test.espresso.web.internal.deps.guava.base.Function,java.lang.Throwable)>($r3, r2);

        return $r4;
    }

