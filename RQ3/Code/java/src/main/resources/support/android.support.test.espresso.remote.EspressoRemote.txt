android.support.test.espresso.remote.EspressoRemote
<android.support.test.espresso.remote.EspressoRemote: java.lang.String TAG>
<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote DEFAULT_INSTANCE>
<android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>
<android.support.test.espresso.remote.EspressoRemote: java.lang.String BUNDLE_KEY_TYPE>
<android.support.test.espresso.remote.EspressoRemote: java.lang.String BUNDLE_KEY_UUID>
<android.support.test.espresso.remote.EspressoRemote: java.lang.String BUNDLE_KEY_PROTO>
<android.support.test.espresso.remote.EspressoRemote: android.support.test.internal.runner.InstrumentationConnection instrumentationConnection>
<android.support.test.espresso.remote.EspressoRemote: int MSG_TERMINATE>
<android.support.test.espresso.remote.EspressoRemote: int MSG_FORWARD_TO_REMOTE_ESPRESSO>
<android.support.test.espresso.remote.EspressoRemote: int MSG_HANDLE_ESPRESSO_REQUEST>
<android.support.test.espresso.remote.EspressoRemote: int MSG_HANDLE_ESPRESSO_RESPONSE>
<android.support.test.espresso.remote.EspressoRemote: int MSG_HANDLE_EMPTY_REQUEST>
<android.support.test.espresso.remote.EspressoRemote: boolean isRemoteProcess>
<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>
    void <init>(android.support.test.internal.runner.InstrumentationConnection)
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        android.support.test.internal.runner.InstrumentationConnection r1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: android.support.test.internal.runner.InstrumentationConnection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        <android.support.test.espresso.remote.EspressoRemote: android.support.test.internal.runner.InstrumentationConnection instrumentationConnection> = r1;

        return;
    }

    private void <init>()
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        android.support.test.internal.runner.InstrumentationConnection $r1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        $r1 = staticinvoke <android.support.test.internal.runner.InstrumentationConnection: android.support.test.internal.runner.InstrumentationConnection getInstance()>();

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote: void <init>(android.support.test.internal.runner.InstrumentationConnection)>($r1);

        return;
    }

    public static android.support.test.espresso.remote.EspressoRemote getInstance()
    {
        android.support.test.espresso.remote.EspressoRemote $r0;

        $r0 = <android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote DEFAULT_INSTANCE>;

        return $r0;
    }

    private static void remoteInit()
    {
        java.lang.Object[] $r0;
        android.support.test.espresso.remote.EspressoRemote $r1;

        $r0 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "remoteInit called", $r0);

        $r1 = staticinvoke <android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote getInstance()>();

        virtualinvoke $r1.<android.support.test.espresso.remote.EspressoRemote: void init()>();

        return;
    }

    public synchronized void init()
    {
        android.support.test.espresso.remote.EspressoRemote r0, $r8;
        android.os.HandlerThread r1, $r9;
        java.lang.Object[] $r2;
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler $r3, $r10, $r12;
        java.lang.String $r4, $r6, $r7, $r14, $r16;
        int $i0;
        android.os.Looper $r11;
        android.os.Messenger $r13;
        android.support.test.internal.runner.InstrumentationConnection $r15;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "init called", $r2);

        $r3 = r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        if null != $r3 goto label3;

        $r6 = "Initializing Espresso Remote of type: ";

        $r4 = <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r16 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r7);

        goto label2;

     label1:
        $r16 = new java.lang.String;

        specialinvoke $r16.<java.lang.String: void <init>(java.lang.String)>("Initializing Espresso Remote of type: ");

     label2:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EspressoRemote", $r16);

        $r8 = <android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote DEFAULT_INSTANCE>;

        staticinvoke <android.support.test.espresso.remote.RemoteInteractionRegistry: void registerInstance(android.support.test.espresso.remote.RemoteInteraction)>($r8);

        staticinvoke <android.support.test.espresso.remote.EspressoRemote: void initRemoteRegistry()>();

        $r9 = new android.os.HandlerThread;

        specialinvoke $r9.<android.os.HandlerThread: void <init>(java.lang.String)>("EspressoRemoteThread");

        r1 = $r9;

        virtualinvoke r1.<android.os.HandlerThread: void start()>();

        $r10 = new android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        $r11 = virtualinvoke r1.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r10.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void <init>(android.support.test.espresso.remote.EspressoRemote,android.os.Looper)>(r0, $r11);

        r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler> = $r10;

        $r15 = <android.support.test.espresso.remote.EspressoRemote: android.support.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r14 = <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        $r12 = r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        $r13 = $r12.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>;

        virtualinvoke $r15.<android.support.test.internal.runner.InstrumentationConnection: void registerClient(java.lang.String,android.os.Messenger)>($r14, $r13);

     label3:
        return;
    }

    public synchronized void terminate()
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        java.lang.Object[] $r1;
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler $r2, $r3;
        android.os.Message $r4;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "terminate called", $r1);

        $r2 = r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        $r4 = staticinvoke <android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message access$000(android.support.test.espresso.remote.EspressoRemote$IncomingHandler,int)>($r3, 1);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler> = null;

     label1:
        return;
    }

    public synchronized boolean isRemoteProcess()
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        boolean $z0;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        $z0 = <android.support.test.espresso.remote.EspressoRemote: boolean isRemoteProcess>;

        return $z0;
    }

    public synchronized java.util.concurrent.Callable createRemoteCheckCallable(org.hamcrest.Matcher, org.hamcrest.Matcher, java.util.Map, android.support.test.espresso.ViewAssertion)
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        org.hamcrest.Matcher r1, r2;
        java.util.Map r3;
        android.support.test.espresso.ViewAssertion r4;
        android.support.test.espresso.remote.EspressoRemote$1 $r5;
        java.util.concurrent.Callable $r6;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: android.support.test.espresso.ViewAssertion;

        $r5 = new android.support.test.espresso.remote.EspressoRemote$1;

        specialinvoke $r5.<android.support.test.espresso.remote.EspressoRemote$1: void <init>(android.support.test.espresso.remote.EspressoRemote,android.support.test.espresso.ViewAssertion,org.hamcrest.Matcher,org.hamcrest.Matcher,java.util.Map)>(r0, r4, r1, r2, r3);

        $r6 = specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote: java.util.concurrent.Callable createRemoteInteraction(java.lang.Runnable)>($r5);

        return $r6;
    }

    public synchronized transient java.util.concurrent.Callable createRemotePerformCallable(org.hamcrest.Matcher, org.hamcrest.Matcher, java.util.Map, android.support.test.espresso.ViewAction[])
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        org.hamcrest.Matcher r1, r2;
        java.util.Map r3;
        android.support.test.espresso.ViewAction[] r4;
        android.support.test.espresso.remote.EspressoRemote$2 $r5;
        java.util.concurrent.Callable $r6;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: android.support.test.espresso.ViewAction[];

        $r5 = new android.support.test.espresso.remote.EspressoRemote$2;

        specialinvoke $r5.<android.support.test.espresso.remote.EspressoRemote$2: void <init>(android.support.test.espresso.remote.EspressoRemote,android.support.test.espresso.ViewAction[],org.hamcrest.Matcher,org.hamcrest.Matcher,java.util.Map)>(r0, r4, r1, r2, r3);

        $r6 = specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote: java.util.concurrent.Callable createRemoteInteraction(java.lang.Runnable)>($r5);

        return $r6;
    }

    private java.util.concurrent.Callable createRemoteInteraction(java.lang.Runnable)
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        java.lang.Runnable r1;
        android.support.test.espresso.remote.EspressoRemote$3 $r2;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = new android.support.test.espresso.remote.EspressoRemote$3;

        specialinvoke $r2.<android.support.test.espresso.remote.EspressoRemote$3: void <init>(android.support.test.espresso.remote.EspressoRemote,java.lang.Runnable)>(r0, r1);

        return $r2;
    }

    void initiateRemoteCall(byte[], java.util.Map)
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        byte[] r1;
        java.util.Map r2;
        java.lang.Object[] $r3;
        java.lang.Throwable $r4, r6;
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r5;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.util.Map;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "initiateRemoteCall", $r3);

     label1:
        r5 = specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$ResponseHolder sendMessageSynchronously(int,byte[],java.util.Map)>(3, r1, r2);

        staticinvoke <android.support.test.espresso.remote.EspressoRemote: void reportResults(android.support.test.espresso.remote.EspressoRemote$ResponseHolder)>(r5);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private void sendEmptyRequest()
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        java.lang.Throwable r1, $r4;
        java.lang.Object[] $r2;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "sendEmptyRequest", $r2);

     label1:
        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$ResponseHolder sendMessageSynchronously(int,byte[],java.util.Map)>(5, null, null);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private synchronized android.support.test.espresso.remote.EspressoRemote$ResponseHolder sendMessageSynchronously(int, byte[], java.util.Map) throws java.lang.InterruptedException
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        int i0;
        byte[] r1;
        java.util.Map r2;
        java.util.UUID r3;
        java.util.concurrent.CountDownLatch r4, r28;
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r5, r26, r29;
        android.os.Message r6;
        android.os.Bundle r7;
        java.lang.Throwable r8, $r19, $r21, r27;
        java.lang.Object[] $r9, $r12, $r22;
        java.lang.Integer $r10, $r23;
        java.lang.String $r11, $r24;
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler $r15, $r16, $r17, $r18, $r20;
        java.lang.Thread $r25;
        java.io.Serializable r30;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.util.Map;

        r3 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r9 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r10;

        $r9[1] = r3;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Sending sync msg [%s] with uuid [%s]", $r9);

        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", $r11, $r12);

        r28 = new java.util.concurrent.CountDownLatch;

        specialinvoke r28.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r4 = r28;

        r29 = new android.support.test.espresso.remote.EspressoRemote$ResponseHolder;

        specialinvoke r29.<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: void <init>(java.util.concurrent.CountDownLatch)>(r4);

        r5 = r29;

        $r15 = r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        r6 = staticinvoke <android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message access$000(android.support.test.espresso.remote.EspressoRemote$IncomingHandler,int)>($r15, 2);

        r6.<android.os.Message: int arg1> = i0;

        r7 = virtualinvoke r6.<android.os.Message: android.os.Bundle getData()>();

        r30 = (java.io.Serializable) r3;

        virtualinvoke r7.<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>("uuid", r30);

        if r1 == null goto label1;

        virtualinvoke r7.<android.os.Bundle: void putByteArray(java.lang.String,byte[])>("proto", r1);

     label1:
        staticinvoke <android.support.test.espresso.remote.EspressoRemote: void setIBindersToBundle(java.util.Map,android.os.Bundle)>(r2, r7);

        virtualinvoke r6.<android.os.Message: void setData(android.os.Bundle)>(r7);

        $r16 = r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        staticinvoke <android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void access$200(android.support.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID,android.support.test.espresso.remote.EspressoRemote$ResponseHolder)>($r16, r3, r5);

        $r17 = r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        virtualinvoke $r17.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: boolean sendMessage(android.os.Message)>(r6);

     label2:
        virtualinvoke r4.<java.util.concurrent.CountDownLatch: void await()>();

        r26 = r5;

     label3:
        $r18 = r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        staticinvoke <android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void access$300(android.support.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID)>($r18, r3);

        return r26;

     label4:
        $r21 := @caughtexception;

        r27 = $r21;

        $r22 = newarray (java.lang.Object)[2];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r22[0] = $r23;

        $r22[1] = r3;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Interrupted while waiting for a response from msg [%s] with uuid [%s]", $r22);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("EspressoRemote", $r24, r27);

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote: void sendEmptyRequest()>();

        $r25 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r25.<java.lang.Thread: void interrupt()>();

        throw r27;

     label5:
        $r19 := @caughtexception;

        r8 = $r19;

     label6:
        $r20 = r0.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        staticinvoke <android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void access$300(android.support.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID)>($r20, r3);

        throw r8;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    private static void setIBindersToBundle(java.util.Map, android.os.Bundle)
    {
        java.util.Map r0;
        android.os.Bundle r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        boolean $z0, $z1;
        java.util.Set $r4;
        java.lang.Object $r5, $r6, $r9;
        android.support.test.internal.util.ParcelableIBinder $r7;
        java.lang.String $r8;
        android.os.IBinder $r10;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: android.os.Bundle;

        if r0 == null goto label2;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r6;

        $r7 = new android.support.test.internal.util.ParcelableIBinder;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (android.os.IBinder) $r9;

        specialinvoke $r7.<android.support.test.internal.util.ParcelableIBinder: void <init>(android.os.IBinder)>($r10);

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>($r8, $r7);

        goto label1;

     label2:
        return;
    }

    private synchronized boolean hasRemoteEspressoInstances()
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        java.util.Set r1;
        java.lang.String $r2;
        android.support.test.internal.runner.InstrumentationConnection $r3;
        int $i0;
        boolean $z0;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote;

        $r3 = <android.support.test.espresso.remote.EspressoRemote: android.support.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r2 = <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        r1 = virtualinvoke $r3.<android.support.test.internal.runner.InstrumentationConnection: java.util.Set getClientsForType(java.lang.String)>($r2);

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        if $i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static void initRemoteRegistry()
    {
        android.support.test.espresso.remote.RemoteDescriptorRegistry r0;

        r0 = staticinvoke <android.support.test.espresso.remote.RemoteDescriptorRegistry: android.support.test.espresso.remote.RemoteDescriptorRegistry getInstance()>();

        staticinvoke <android.support.test.espresso.matcher.RemoteRootMatchers: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.matcher.RemoteViewMatchers: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.action.RemoteViewActions: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.assertion.RemoteViewAssertions: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.matcher.RemoteHamcrestCoreMatchers13: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.DataInteractionRemote: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.web.action.RemoteWebActions: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.web.model.RemoteWebModelAtoms: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.web.sugar.RemoteWebSugar: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.web.webdriver.RemoteWebDriverAtoms: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.web.assertion.RemoteWebViewAssertions: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        staticinvoke <android.support.test.espresso.web.matcher.RemoteWebMatchers: void init(android.support.test.espresso.remote.RemoteDescriptorRegistry)>(r0);

        return;
    }

    private static void reportResults(android.support.test.espresso.remote.EspressoRemote$ResponseHolder)
    {
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        byte[] r1;
        java.lang.String r2, $r10, $r12, $r16;
        android.os.Bundle $r3;
        android.support.test.espresso.remote.InteractionResponse$Builder $r4, $r5;
        android.support.test.espresso.remote.InteractionResponse$Status $r6, $r7;
        boolean $z0;
        android.support.test.espresso.remote.RemoteEspressoException $r8, $r19;
        android.support.test.espresso.remote.InteractionResponse$RemoteError $r9;
        java.lang.IllegalStateException $r11, $r17;
        int $i0, $i1;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.Throwable $r18, r21;
        android.support.test.espresso.remote.InteractionResponse r20;

        r0 := @parameter0: android.support.test.espresso.remote.EspressoRemote$ResponseHolder;

        $r3 = virtualinvoke r0.<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle getData()>();

        r1 = virtualinvoke $r3.<android.os.Bundle: byte[] getByteArray(java.lang.String)>("proto");

        if null != r1 goto label1;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Espresso remote response doesn\'t contain a valid response");

        throw $r17;

     label1:
        $r4 = new android.support.test.espresso.remote.InteractionResponse$Builder;

        specialinvoke $r4.<android.support.test.espresso.remote.InteractionResponse$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<android.support.test.espresso.remote.InteractionResponse$Builder: android.support.test.espresso.remote.InteractionResponse$Builder setResultProto(byte[])>(r1);

        r20 = virtualinvoke $r5.<android.support.test.espresso.remote.InteractionResponse$Builder: android.support.test.espresso.remote.InteractionResponse build()>();

        $r6 = <android.support.test.espresso.remote.InteractionResponse$Status: android.support.test.espresso.remote.InteractionResponse$Status Error>;

        $r7 = virtualinvoke r20.<android.support.test.espresso.remote.InteractionResponse: android.support.test.espresso.remote.InteractionResponse$Status getStatus()>();

        if $r6 != $r7 goto label3;

        $z0 = virtualinvoke r20.<android.support.test.espresso.remote.InteractionResponse: boolean hasRemoteError()>();

        if $z0 != 0 goto label2;

        $r11 = new java.lang.IllegalStateException;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r20);

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i1 = 102 + $i0;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interaction response reported Status.Error, but noerror message was attached to interaction response: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label2:
        $r8 = new android.support.test.espresso.remote.RemoteEspressoException;

        $r9 = virtualinvoke r20.<android.support.test.espresso.remote.InteractionResponse: android.support.test.espresso.remote.InteractionResponse$RemoteError getRemoteError()>();

        $r10 = virtualinvoke $r9.<android.support.test.espresso.remote.InteractionResponse$RemoteError: java.lang.String getDescription()>();

        specialinvoke $r8.<android.support.test.espresso.remote.RemoteEspressoException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        r21 = $r18;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("EspressoRemote", "Could not parse Interaction response", r21);

        $r19 = new android.support.test.espresso.remote.RemoteEspressoException;

        specialinvoke $r19.<android.support.test.espresso.remote.RemoteEspressoException: void <init>(java.lang.String,java.lang.Throwable)>("Could not parse Interaction response", r21);

        throw $r19;

     label5:
        return;

        catch android.support.test.espresso.remote.RemoteProtocolException from label1 to label3 with label4;
    }

    static boolean access$100(android.support.test.espresso.remote.EspressoRemote)
    {
        android.support.test.espresso.remote.EspressoRemote r0;
        boolean $z0;

        r0 := @parameter0: android.support.test.espresso.remote.EspressoRemote;

        $z0 = specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote: boolean hasRemoteEspressoInstances()>();

        return $z0;
    }

    static boolean access$502(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <android.support.test.espresso.remote.EspressoRemote: boolean isRemoteProcess> = z0;

        return z0;
    }

    static void <clinit>()
    {
        android.support.test.internal.runner.tracker.UsageTracker $r0;
        android.support.test.espresso.remote.EspressoRemote $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        $r0 = staticinvoke <android.support.test.internal.runner.tracker.UsageTrackerRegistry: android.support.test.internal.runner.tracker.UsageTracker getInstance()>();

        interfaceinvoke $r0.<android.support.test.internal.runner.tracker.UsageTracker: void trackUsage(java.lang.String,java.lang.String)>("Espresso-MPE", "3.0.2");

        $r1 = new android.support.test.espresso.remote.EspressoRemote;

        specialinvoke $r1.<android.support.test.espresso.remote.EspressoRemote: void <init>()>();

        <android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote DEFAULT_INSTANCE> = $r1;

        $r2 = class "Landroid/support/test/espresso/remote/EspressoRemote;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getCanonicalName()>();

        <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE> = $r3;

        return;
    }

android.support.test.espresso.remote.EspressoRemote$1
<android.support.test.espresso.remote.EspressoRemote$1: android.support.test.espresso.ViewAssertion val$viewAssertion>
<android.support.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$rootMatcher>
<android.support.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$viewMatcher>
<android.support.test.espresso.remote.EspressoRemote$1: java.util.Map val$iBinders>
<android.support.test.espresso.remote.EspressoRemote$1: android.support.test.espresso.remote.EspressoRemote this$0>
    void <init>(android.support.test.espresso.remote.EspressoRemote, android.support.test.espresso.ViewAssertion, org.hamcrest.Matcher, org.hamcrest.Matcher, java.util.Map)
    {
        android.support.test.espresso.remote.EspressoRemote$1 r0;
        android.support.test.espresso.remote.EspressoRemote r1;
        android.support.test.espresso.ViewAssertion r2;
        org.hamcrest.Matcher r3, r4;
        java.util.Map r5;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$1;

        r1 := @parameter0: android.support.test.espresso.remote.EspressoRemote;

        r2 := @parameter1: android.support.test.espresso.ViewAssertion;

        r3 := @parameter2: org.hamcrest.Matcher;

        r4 := @parameter3: org.hamcrest.Matcher;

        r5 := @parameter4: java.util.Map;

        r0.<android.support.test.espresso.remote.EspressoRemote$1: android.support.test.espresso.remote.EspressoRemote this$0> = r1;

        r0.<android.support.test.espresso.remote.EspressoRemote$1: android.support.test.espresso.ViewAssertion val$viewAssertion> = r2;

        r0.<android.support.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$rootMatcher> = r3;

        r0.<android.support.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$viewMatcher> = r4;

        r0.<android.support.test.espresso.remote.EspressoRemote$1: java.util.Map val$iBinders> = r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.espresso.remote.EspressoRemote$1 r0;
        android.support.test.espresso.remote.InteractionRequest r1;
        java.lang.Object[] $r2;
        android.support.test.espresso.ViewAssertion $r3, $r10;
        java.lang.String $r4;
        android.support.test.espresso.remote.InteractionRequest$Builder $r5, $r7, $r9, $r11;
        org.hamcrest.Matcher $r6, $r8;
        android.support.test.espresso.remote.EspressoRemote $r12;
        android.support.test.espresso.remote.internal.deps.protobuf.MessageLite $r13;
        byte[] $r14;
        java.util.Map $r15;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$1;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<android.support.test.espresso.remote.EspressoRemote$1: android.support.test.espresso.ViewAssertion val$viewAssertion>;

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Attempting to run check interaction on a remote process for ViewAssertion: %s", $r2);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EspressoRemote", $r4);

        $r5 = new android.support.test.espresso.remote.InteractionRequest$Builder;

        specialinvoke $r5.<android.support.test.espresso.remote.InteractionRequest$Builder: void <init>()>();

        $r6 = r0.<android.support.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$rootMatcher>;

        $r7 = virtualinvoke $r5.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest$Builder setRootMatcher(org.hamcrest.Matcher)>($r6);

        $r8 = r0.<android.support.test.espresso.remote.EspressoRemote$1: org.hamcrest.Matcher val$viewMatcher>;

        $r9 = virtualinvoke $r7.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest$Builder setViewMatcher(org.hamcrest.Matcher)>($r8);

        $r10 = r0.<android.support.test.espresso.remote.EspressoRemote$1: android.support.test.espresso.ViewAssertion val$viewAssertion>;

        $r11 = virtualinvoke $r9.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest$Builder setViewAssertion(android.support.test.espresso.ViewAssertion)>($r10);

        r1 = virtualinvoke $r11.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest build()>();

        $r12 = r0.<android.support.test.espresso.remote.EspressoRemote$1: android.support.test.espresso.remote.EspressoRemote this$0>;

        $r13 = virtualinvoke r1.<android.support.test.espresso.remote.InteractionRequest: android.support.test.espresso.remote.internal.deps.protobuf.MessageLite toProto()>();

        $r14 = interfaceinvoke $r13.<android.support.test.espresso.remote.internal.deps.protobuf.MessageLite: byte[] toByteArray()>();

        $r15 = r0.<android.support.test.espresso.remote.EspressoRemote$1: java.util.Map val$iBinders>;

        virtualinvoke $r12.<android.support.test.espresso.remote.EspressoRemote: void initiateRemoteCall(byte[],java.util.Map)>($r14, $r15);

        return;
    }

android.support.test.espresso.remote.EspressoRemote$2
<android.support.test.espresso.remote.EspressoRemote$2: android.support.test.espresso.ViewAction[] val$viewActions>
<android.support.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$rootMatcher>
<android.support.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$viewMatcher>
<android.support.test.espresso.remote.EspressoRemote$2: java.util.Map val$iBinders>
<android.support.test.espresso.remote.EspressoRemote$2: android.support.test.espresso.remote.EspressoRemote this$0>
    void <init>(android.support.test.espresso.remote.EspressoRemote, android.support.test.espresso.ViewAction[], org.hamcrest.Matcher, org.hamcrest.Matcher, java.util.Map)
    {
        android.support.test.espresso.remote.EspressoRemote$2 r0;
        android.support.test.espresso.remote.EspressoRemote r1;
        android.support.test.espresso.ViewAction[] r2;
        org.hamcrest.Matcher r3, r4;
        java.util.Map r5;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$2;

        r1 := @parameter0: android.support.test.espresso.remote.EspressoRemote;

        r2 := @parameter1: android.support.test.espresso.ViewAction[];

        r3 := @parameter2: org.hamcrest.Matcher;

        r4 := @parameter3: org.hamcrest.Matcher;

        r5 := @parameter4: java.util.Map;

        r0.<android.support.test.espresso.remote.EspressoRemote$2: android.support.test.espresso.remote.EspressoRemote this$0> = r1;

        r0.<android.support.test.espresso.remote.EspressoRemote$2: android.support.test.espresso.ViewAction[] val$viewActions> = r2;

        r0.<android.support.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$rootMatcher> = r3;

        r0.<android.support.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$viewMatcher> = r4;

        r0.<android.support.test.espresso.remote.EspressoRemote$2: java.util.Map val$iBinders> = r5;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.espresso.remote.EspressoRemote$2 r0;
        android.support.test.espresso.ViewAction[] r1;
        int i0, i2;
        android.support.test.espresso.ViewAction r2;
        android.support.test.espresso.remote.InteractionRequest r3;
        java.lang.Object[] $r4;
        java.lang.String $r5;
        android.support.test.espresso.remote.InteractionRequest$Builder $r6, $r8, $r10, $r11;
        org.hamcrest.Matcher $r7, $r9;
        android.support.test.espresso.remote.EspressoRemote $r12;
        android.support.test.espresso.remote.internal.deps.protobuf.MessageLite $r13;
        byte[] $r14;
        java.util.Map $r15;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$2;

        r1 = r0.<android.support.test.espresso.remote.EspressoRemote$2: android.support.test.espresso.ViewAction[] val$viewActions>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r2 = r1[i2];

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r2;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Attempting to run perform interaction on a remote processes for ViewAction: %s", $r4);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EspressoRemote", $r5);

        $r6 = new android.support.test.espresso.remote.InteractionRequest$Builder;

        specialinvoke $r6.<android.support.test.espresso.remote.InteractionRequest$Builder: void <init>()>();

        $r7 = r0.<android.support.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$rootMatcher>;

        $r8 = virtualinvoke $r6.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest$Builder setRootMatcher(org.hamcrest.Matcher)>($r7);

        $r9 = r0.<android.support.test.espresso.remote.EspressoRemote$2: org.hamcrest.Matcher val$viewMatcher>;

        $r10 = virtualinvoke $r8.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest$Builder setViewMatcher(org.hamcrest.Matcher)>($r9);

        $r11 = virtualinvoke $r10.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest$Builder setViewAction(android.support.test.espresso.ViewAction)>(r2);

        r3 = virtualinvoke $r11.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest build()>();

        $r12 = r0.<android.support.test.espresso.remote.EspressoRemote$2: android.support.test.espresso.remote.EspressoRemote this$0>;

        $r13 = virtualinvoke r3.<android.support.test.espresso.remote.InteractionRequest: android.support.test.espresso.remote.internal.deps.protobuf.MessageLite toProto()>();

        $r14 = interfaceinvoke $r13.<android.support.test.espresso.remote.internal.deps.protobuf.MessageLite: byte[] toByteArray()>();

        $r15 = r0.<android.support.test.espresso.remote.EspressoRemote$2: java.util.Map val$iBinders>;

        virtualinvoke $r12.<android.support.test.espresso.remote.EspressoRemote: void initiateRemoteCall(byte[],java.util.Map)>($r14, $r15);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

android.support.test.espresso.remote.EspressoRemote$3
<android.support.test.espresso.remote.EspressoRemote$3: java.lang.Runnable val$runnable>
<android.support.test.espresso.remote.EspressoRemote$3: android.support.test.espresso.remote.EspressoRemote this$0>
    void <init>(android.support.test.espresso.remote.EspressoRemote, java.lang.Runnable)
    {
        android.support.test.espresso.remote.EspressoRemote$3 r0;
        android.support.test.espresso.remote.EspressoRemote r1;
        java.lang.Runnable r2;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$3;

        r1 := @parameter0: android.support.test.espresso.remote.EspressoRemote;

        r2 := @parameter1: java.lang.Runnable;

        r0.<android.support.test.espresso.remote.EspressoRemote$3: android.support.test.espresso.remote.EspressoRemote this$0> = r1;

        r0.<android.support.test.espresso.remote.EspressoRemote$3: java.lang.Runnable val$runnable> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Void call() throws java.lang.InterruptedException
    {
        android.support.test.espresso.remote.EspressoRemote$3 r0;
        long[] r1, r2, $r3;
        int i0, i5;
        long l1, $l2, $l3;
        java.util.concurrent.TimeUnit $r4, $r5;
        android.support.test.espresso.remote.NoRemoteEspressoInstanceException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        android.support.test.espresso.remote.EspressoRemote $r12;
        boolean $z0;
        java.lang.Runnable $r13;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$3;

        $r3 = newarray (long)[6];

        $r3[0] = 10L;

        $r3[1] = 50L;

        $r3[2] = 100L;

        $r3[3] = 500L;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r4.<java.util.concurrent.TimeUnit: long toMillis(long)>(2L);

        $r3[4] = $l2;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l3 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toMillis(long)>(30L);

        $r3[5] = $l3;

        r1 = $r3;

        r2 = r1;

        i0 = lengthof r2;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        l1 = r2[i5];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(78);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No remote Espresso instance - waiting: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms for one to start");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EspressoRemote", $r11);

        staticinvoke <java.lang.Thread: void sleep(long)>(l1);

        $r12 = r0.<android.support.test.espresso.remote.EspressoRemote$3: android.support.test.espresso.remote.EspressoRemote this$0>;

        $z0 = staticinvoke <android.support.test.espresso.remote.EspressoRemote: boolean access$100(android.support.test.espresso.remote.EspressoRemote)>($r12);

        if $z0 == 0 goto label2;

        $r13 = r0.<android.support.test.espresso.remote.EspressoRemote$3: java.lang.Runnable val$runnable>;

        interfaceinvoke $r13.<java.lang.Runnable: void run()>();

        return null;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $r6 = new android.support.test.espresso.remote.NoRemoteEspressoInstanceException;

        specialinvoke $r6.<android.support.test.espresso.remote.NoRemoteEspressoInstanceException: void <init>(java.lang.String)>("No remote Espresso instances at this time.");

        throw $r6;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        android.support.test.espresso.remote.EspressoRemote$3 r0;
        java.lang.Void $r1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$3;

        $r1 = virtualinvoke r0.<android.support.test.espresso.remote.EspressoRemote$3: java.lang.Void call()>();

        return $r1;
    }

android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1
<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: java.util.UUID val$latchId>
<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: android.support.test.espresso.remote.EspressoRemote$ResponseHolder val$response>
<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: android.support.test.espresso.remote.EspressoRemote$IncomingHandler this$1>
    void <init>(android.support.test.espresso.remote.EspressoRemote$IncomingHandler, java.util.UUID, android.support.test.espresso.remote.EspressoRemote$ResponseHolder)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1 r0;
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r1;
        java.util.UUID r2;
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r3;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1;

        r1 := @parameter0: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r2 := @parameter1: java.util.UUID;

        r3 := @parameter2: android.support.test.espresso.remote.EspressoRemote$ResponseHolder;

        r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: android.support.test.espresso.remote.EspressoRemote$IncomingHandler this$1> = r1;

        r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: java.util.UUID val$latchId> = r2;

        r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: android.support.test.espresso.remote.EspressoRemote$ResponseHolder val$response> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Void call()
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1 r0;
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler $r1;
        java.util.Map $r2;
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder $r3;
        java.util.UUID $r4;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1;

        $r1 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: android.support.test.espresso.remote.EspressoRemote$IncomingHandler this$1>;

        $r2 = staticinvoke <android.support.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map access$400(android.support.test.espresso.remote.EspressoRemote$IncomingHandler)>($r1);

        $r4 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: java.util.UUID val$latchId>;

        $r3 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: android.support.test.espresso.remote.EspressoRemote$ResponseHolder val$response>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        return null;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1 r0;
        java.lang.Void $r1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1;

        $r1 = virtualinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: java.lang.Void call()>();

        return $r1;
    }

android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2
<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2: java.util.UUID val$latchId>
<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2: android.support.test.espresso.remote.EspressoRemote$IncomingHandler this$1>
    void <init>(android.support.test.espresso.remote.EspressoRemote$IncomingHandler, java.util.UUID)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2 r0;
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r1;
        java.util.UUID r2;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2;

        r1 := @parameter0: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r2 := @parameter1: java.util.UUID;

        r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2: android.support.test.espresso.remote.EspressoRemote$IncomingHandler this$1> = r1;

        r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2: java.util.UUID val$latchId> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Void call()
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2 r0;
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler $r1;
        java.util.Map $r2;
        java.util.UUID $r3;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2;

        $r1 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2: android.support.test.espresso.remote.EspressoRemote$IncomingHandler this$1>;

        $r2 = staticinvoke <android.support.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map access$400(android.support.test.espresso.remote.EspressoRemote$IncomingHandler)>($r1);

        $r3 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2: java.util.UUID val$latchId>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        return null;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2 r0;
        java.lang.Void $r1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2;

        $r1 = virtualinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2: java.lang.Void call()>();

        return $r1;
    }

android.support.test.espresso.remote.EspressoRemote$IncomingHandler
<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map responses>
<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>
<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.support.test.espresso.remote.EspressoRemote this$0>
    public void <init>(android.support.test.espresso.remote.EspressoRemote, android.os.Looper)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        android.support.test.espresso.remote.EspressoRemote r1;
        android.os.Looper r2, $r5, $r7;
        java.util.HashMap r8;
        android.os.Messenger r9;
        java.lang.IllegalStateException r10;
        java.util.Map r11;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter0: android.support.test.espresso.remote.EspressoRemote;

        r2 := @parameter1: android.os.Looper;

        r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.support.test.espresso.remote.EspressoRemote this$0> = r1;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        r8 = new java.util.HashMap;

        specialinvoke r8.<java.util.HashMap: void <init>()>();

        r11 = (java.util.Map) r8;

        r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map responses> = r11;

        r9 = new android.os.Messenger;

        specialinvoke r9.<android.os.Messenger: void <init>(android.os.Handler)>(r0);

        r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler> = r9;

        $r5 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r5 == r2 goto label1;

        $r7 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r7 != r2 goto label2;

     label1:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This handler should not be using the main thread looper nor the instrumentation thread looper.");

        throw r10;

     label2:
        return;
    }

    public void handleMessage(android.os.Message)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        android.os.Message r1;
        android.os.Bundle $r2, $r6, $r15, $r17, $r20, $r22;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.lang.String $r5, $r7, $r8, $r12, $r27, r28;
        boolean $z0;
        int $i0, $i1, $i3, $i4, i6;
        java.lang.StringBuilder $r9, $r10, $r11, $r24, $r25, $r26;
        android.os.Messenger $r13, $r19;
        java.lang.Object[] $r14, $r16, $r18, $r21, $r23;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter0: android.os.Message;

        $r2 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r2.<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>($r4);

        $r5 = <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        $r6 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        $r7 = virtualinvoke $r6.<android.os.Bundle: java.lang.String getString(java.lang.String)>("type");

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r13 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if null != $r13 goto label2;

     label1:
        r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r28);

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i1 = 63 + $i0;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type mismatch or no valid Messenger present, ignoring message: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("EspressoRemote", $r12);

        return;

     label2:
        $i3 = r1.<android.os.Message: int what>;

        tableswitch($i3)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            default: goto label8;
        };

     label3:
        $r23 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_TERMINATE", $r23);

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void doDie()>();

        goto label9;

     label4:
        $r21 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_FORWARD_TO_REMOTE_ESPRESSO", $r21);

        $i4 = r1.<android.os.Message: int arg1>;

        $r22 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void sendMsgToRemoteEspressos(int,android.os.Bundle)>($i4, $r22);

        goto label9;

     label5:
        $r18 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_HANDLE_ESPRESSO_REQUEST", $r18);

        $r19 = r1.<android.os.Message: android.os.Messenger replyTo>;

        $r20 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void handleEspressoRequest(android.os.Messenger,android.os.Bundle)>($r19, $r20);

        goto label9;

     label6:
        $r16 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_HANDLE_ESPRESSO_RESPONSE", $r16);

        $r17 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void handleEspressoResponse(android.os.Bundle)>($r17);

        goto label9;

     label7:
        $r14 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleMessage: MSG_HANDLE_EMPTY_REQUEST", $r14);

        $r15 = virtualinvoke r1.<android.os.Message: android.os.Bundle getData()>();

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void sendMsgToRemoteEspressos(int,android.os.Bundle)>(4, $r15);

        goto label9;

     label8:
        i6 = r1.<android.os.Message: int what>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(int)>(42);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown message code received: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("EspressoRemote", $r27);

        specialinvoke r0.<android.os.Handler: void handleMessage(android.os.Message)>(r1);

     label9:
        return;
    }

    private void associateResponse(java.util.UUID, android.support.test.espresso.remote.EspressoRemote$ResponseHolder)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        java.util.UUID r1;
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r2;
        java.util.concurrent.FutureTask r3, r15;
        java.lang.Throwable $r7, $r9, $r10, r12, r13;
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1 r14;
        java.lang.IllegalStateException r16, r17;
        java.lang.Runnable r18;
        java.util.concurrent.ExecutionException r19;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: android.support.test.espresso.remote.EspressoRemote$ResponseHolder;

        r15 = new java.util.concurrent.FutureTask;

        r14 = new android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1;

        specialinvoke r14.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$1: void <init>(android.support.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID,android.support.test.espresso.remote.EspressoRemote$ResponseHolder)>(r0, r1, r2);

        specialinvoke r15.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r14);

        r3 = r15;

        r18 = (java.lang.Runnable) r3;

        virtualinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: boolean post(java.lang.Runnable)>(r18);

     label1:
        virtualinvoke r3.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        r12 = $r10;

        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r12);

        throw r16;

     label4:
        $r7 := @caughtexception;

        r13 = $r7;

        r17 = new java.lang.IllegalStateException;

        r19 = (java.util.concurrent.ExecutionException) r13;

        $r9 = virtualinvoke r19.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r9);

        throw r17;

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
    }

    private void disassociateResponse(java.util.UUID)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        java.util.UUID r1;
        java.util.concurrent.FutureTask r2, r14;
        java.lang.Throwable $r6, $r8, $r10, r11, r12;
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2 r13;
        java.lang.IllegalStateException r15, r16;
        java.lang.Runnable r17;
        java.util.concurrent.ExecutionException r18;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter0: java.util.UUID;

        r14 = new java.util.concurrent.FutureTask;

        r13 = new android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2;

        specialinvoke r13.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler$2: void <init>(android.support.test.espresso.remote.EspressoRemote$IncomingHandler,java.util.UUID)>(r0, r1);

        specialinvoke r14.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r13);

        r2 = r14;

        r17 = (java.lang.Runnable) r2;

        virtualinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: boolean post(java.lang.Runnable)>(r17);

     label1:
        virtualinvoke r2.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r11 = $r6;

        r15 = new java.lang.IllegalStateException;

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r11);

        throw r15;

     label4:
        $r8 := @caughtexception;

        r12 = $r8;

        r16 = new java.lang.IllegalStateException;

        r18 = (java.util.concurrent.ExecutionException) r12;

        $r10 = virtualinvoke r18.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r10);

        throw r16;

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
    }

    private void doDie()
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        android.os.Messenger $r1;
        java.lang.String $r2;
        android.support.test.internal.runner.InstrumentationConnection $r3;
        android.os.Looper $r4;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        $r3 = <android.support.test.espresso.remote.EspressoRemote: android.support.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r2 = <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        $r1 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>;

        virtualinvoke $r3.<android.support.test.internal.runner.InstrumentationConnection: void unregisterClient(java.lang.String,android.os.Messenger)>($r2, $r1);

        $r4 = virtualinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Looper getLooper()>();

        virtualinvoke $r4.<android.os.Looper: void quit()>();

        return;
    }

    private android.os.Message getEspressoMessage(int)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0, $r4;
        int i0;
        android.os.Message r1;
        android.os.Bundle r2, $r6;
        android.support.test.espresso.remote.EspressoRemote $r3;
        android.os.Messenger $r5;
        java.lang.String $r7;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        i0 := @parameter0: int;

        $r3 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.support.test.espresso.remote.EspressoRemote this$0>;

        $r4 = $r3.<android.support.test.espresso.remote.EspressoRemote: android.support.test.espresso.remote.EspressoRemote$IncomingHandler incomingHandler>;

        r1 = virtualinvoke $r4.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message obtainMessage(int)>(i0);

        $r5 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>;

        r1.<android.os.Message: android.os.Messenger replyTo> = $r5;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r2 = $r6;

        $r7 = <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("type", $r7);

        virtualinvoke r1.<android.os.Message: void setData(android.os.Bundle)>(r2);

        return r1;
    }

    private void sendMsgToRemoteEspressos(int, android.os.Bundle)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        int i0;
        android.os.Bundle r1;
        android.os.Message r2;
        java.util.Set r3;
        java.util.Iterator r4;
        android.os.Messenger r5, $r11;
        java.lang.Throwable r6, $r12;
        java.lang.Object[] $r7;
        java.lang.String $r8, $r13;
        android.support.test.internal.runner.InstrumentationConnection $r9, $r14;
        java.lang.Object $r10;
        boolean $z0, $z1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "sendMsgToRemoteEspressos called", $r7);

        r2 = specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message getEspressoMessage(int)>(i0);

        virtualinvoke r2.<android.os.Message: void setData(android.os.Bundle)>(r1);

        $r9 = <android.support.test.espresso.remote.EspressoRemote: android.support.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r8 = <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        r3 = virtualinvoke $r9.<android.support.test.internal.runner.InstrumentationConnection: java.util.Set getClientsForType(java.lang.String)>($r8);

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.os.Messenger) $r10;

        $r11 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Messenger messengerHandler>;

        $z0 = virtualinvoke $r11.<android.os.Messenger: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        virtualinvoke r5.<android.os.Messenger: void send(android.os.Message)>(r2);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r6 = $r12;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("EspressoRemote", "The remote process is terminated unexpectedly", r6);

        $r14 = <android.support.test.espresso.remote.EspressoRemote: android.support.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r13 = <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        virtualinvoke $r14.<android.support.test.internal.runner.InstrumentationConnection: void unregisterClient(java.lang.String,android.os.Messenger)>($r13, r5);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void handleEspressoRequest(android.os.Messenger, android.os.Bundle)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        android.os.Messenger r1;
        android.os.Bundle r2, r5;
        java.util.UUID r3;
        android.os.Message r4;
        android.support.test.espresso.remote.InteractionResponse r6;
        java.lang.Throwable r7, $r14;
        java.io.Serializable $r8, r17;
        java.lang.Object[] $r9, $r11;
        java.lang.String $r10, $r15;
        android.support.test.espresso.remote.internal.deps.protobuf.MessageLite $r12;
        byte[] $r13;
        android.support.test.internal.runner.InstrumentationConnection $r16;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter0: android.os.Messenger;

        r2 := @parameter1: android.os.Bundle;

        $r8 = virtualinvoke r2.<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>("uuid");

        r3 = (java.util.UUID) $r8;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r3;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("handleEspressoRequest for id: %s", $r9);

        $r11 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", $r10, $r11);

        r4 = specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message getEspressoMessage(int)>(4);

        r5 = virtualinvoke r4.<android.os.Message: android.os.Bundle getData()>();

        r17 = (java.io.Serializable) r3;

        virtualinvoke r5.<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>("uuid", r17);

        staticinvoke <android.support.test.espresso.remote.EspressoRemote: boolean access$502(boolean)>(1);

        r6 = specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.support.test.espresso.remote.InteractionResponse executeRequest(android.os.Bundle)>(r2);

        $r12 = virtualinvoke r6.<android.support.test.espresso.remote.InteractionResponse: android.support.test.espresso.remote.internal.deps.protobuf.MessageLite toProto()>();

        $r13 = interfaceinvoke $r12.<android.support.test.espresso.remote.internal.deps.protobuf.MessageLite: byte[] toByteArray()>();

        virtualinvoke r5.<android.os.Bundle: void putByteArray(java.lang.String,byte[])>("proto", $r13);

        virtualinvoke r4.<android.os.Message: void setData(android.os.Bundle)>(r5);

     label1:
        virtualinvoke r1.<android.os.Messenger: void send(android.os.Message)>(r4);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r7 = $r14;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("EspressoRemote", "The remote caller process is terminated unexpectedly", r7);

        $r16 = <android.support.test.espresso.remote.EspressoRemote: android.support.test.internal.runner.InstrumentationConnection instrumentationConnection>;

        $r15 = <android.support.test.espresso.remote.EspressoRemote: java.lang.String TYPE>;

        virtualinvoke $r16.<android.support.test.internal.runner.InstrumentationConnection: void unregisterClient(java.lang.String,android.os.Messenger)>($r15, r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.support.test.espresso.remote.InteractionResponse executeRequest(android.os.Bundle)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        android.os.Bundle r1;
        byte[] r2;
        android.support.test.internal.util.ParcelableIBinder r3;
        android.support.test.espresso.remote.IInteractionExecutionStatus r4;
        java.lang.Throwable r5, $r11, $r14, $r17, $r20, $r22, r26, r27, r28, r40;
        android.support.test.espresso.remote.InteractionRequest$Builder $r7, r33;
        android.os.Parcelable $r8;
        android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy $r9;
        android.os.IBinder $r10;
        java.lang.String $r13, $r16, $r19;
        android.support.test.espresso.remote.InteractionResponse$Status r23;
        android.support.test.espresso.remote.InteractionResponse$RemoteError r24, r35, r36, r37;
        android.support.test.espresso.remote.InteractionRequest r25;
        boolean z0;
        android.support.test.espresso.remote.InteractionResponse$Builder $r30, $r31, r38;
        android.support.test.espresso.remote.InteractionResponse $r32;
        java.lang.RuntimeException r34;
        android.os.RemoteException r39;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter0: android.os.Bundle;

        r2 = virtualinvoke r1.<android.os.Bundle: byte[] getByteArray(java.lang.String)>("proto");

        r23 = <android.support.test.espresso.remote.InteractionResponse$Status: android.support.test.espresso.remote.InteractionResponse$Status Error>;

        r24 = null;

     label01:
        r33 = new android.support.test.espresso.remote.InteractionRequest$Builder;

        specialinvoke r33.<android.support.test.espresso.remote.InteractionRequest$Builder: void <init>()>();

        $r7 = virtualinvoke r33.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest$Builder setRequestProto(byte[])>(r2);

        r25 = virtualinvoke $r7.<android.support.test.espresso.remote.InteractionRequest$Builder: android.support.test.espresso.remote.InteractionRequest build()>();

        $r8 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("executionStatus");

        r3 = (android.support.test.internal.util.ParcelableIBinder) $r8;

        z0 = 0;

        if r3 == null goto label05;

        $r10 = virtualinvoke r3.<android.support.test.internal.util.ParcelableIBinder: android.os.IBinder getIBinder()>();

        r4 = staticinvoke <android.support.test.espresso.remote.IInteractionExecutionStatus$Stub: android.support.test.espresso.remote.IInteractionExecutionStatus asInterface(android.os.IBinder)>($r10);

     label02:
        z0 = interfaceinvoke r4.<android.support.test.espresso.remote.IInteractionExecutionStatus: boolean canExecute()>();

     label03:
        goto label05;

     label04:
        $r20 := @caughtexception;

        r5 = $r20;

        r34 = new java.lang.RuntimeException;

        r39 = (android.os.RemoteException) r5;

        $r22 = virtualinvoke r39.<android.os.RemoteException: java.lang.Throwable getCause()>();

        specialinvoke r34.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to query interaction execution status", $r22);

        r40 = (java.lang.Throwable) r34;

        throw r40;

     label05:
        if z0 == 0 goto label06;

        $r9 = staticinvoke <android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy 'from'(android.support.test.espresso.remote.InteractionRequest,android.os.Bundle)>(r25, r1);

        r23 = virtualinvoke $r9.<android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: android.support.test.espresso.remote.InteractionResponse$Status execute()>();

     label06:
        goto label10;

     label07:
        $r11 := @caughtexception;

        r26 = $r11;

        r35 = new android.support.test.espresso.remote.InteractionResponse$RemoteError;

        $r13 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.String getStackTraceAsString(java.lang.Throwable)>(r26);

        specialinvoke r35.<android.support.test.espresso.remote.InteractionResponse$RemoteError: void <init>(int,java.lang.String)>(1, $r13);

        r24 = r35;

        goto label10;

     label08:
        $r14 := @caughtexception;

        r27 = $r14;

        r36 = new android.support.test.espresso.remote.InteractionResponse$RemoteError;

        $r16 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.String getStackTraceAsString(java.lang.Throwable)>(r27);

        specialinvoke r36.<android.support.test.espresso.remote.InteractionResponse$RemoteError: void <init>(int,java.lang.String)>(0, $r16);

        r24 = r36;

        goto label10;

     label09:
        $r17 := @caughtexception;

        r28 = $r17;

        r37 = new android.support.test.espresso.remote.InteractionResponse$RemoteError;

        $r19 = staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Throwables: java.lang.String getStackTraceAsString(java.lang.Throwable)>(r28);

        specialinvoke r37.<android.support.test.espresso.remote.InteractionResponse$RemoteError: void <init>(int,java.lang.String)>(0, $r19);

        r24 = r37;

     label10:
        r38 = new android.support.test.espresso.remote.InteractionResponse$Builder;

        specialinvoke r38.<android.support.test.espresso.remote.InteractionResponse$Builder: void <init>()>();

        $r30 = virtualinvoke r38.<android.support.test.espresso.remote.InteractionResponse$Builder: android.support.test.espresso.remote.InteractionResponse$Builder setStatus(android.support.test.espresso.remote.InteractionResponse$Status)>(r23);

        $r31 = virtualinvoke $r30.<android.support.test.espresso.remote.InteractionResponse$Builder: android.support.test.espresso.remote.InteractionResponse$Builder setRemoteError(android.support.test.espresso.remote.InteractionResponse$RemoteError)>(r24);

        $r32 = virtualinvoke $r31.<android.support.test.espresso.remote.InteractionResponse$Builder: android.support.test.espresso.remote.InteractionResponse build()>();

        return $r32;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch android.support.test.espresso.remote.RemoteProtocolException from label01 to label06 with label07;
        catch java.lang.RuntimeException from label01 to label06 with label08;
        catch java.lang.Error from label01 to label06 with label09;
    }

    private void handleEspressoResponse(android.os.Bundle)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        android.os.Bundle r1;
        java.util.UUID r2;
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r3;
        java.lang.String r4, $r11, $r15;
        java.io.Serializable $r5;
        java.lang.Object[] $r6;
        java.util.Map $r7;
        java.lang.Object $r8;
        java.util.concurrent.CountDownLatch $r9;
        java.lang.IllegalStateException $r10;
        int $i0, $i1;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter0: android.os.Bundle;

        $r5 = virtualinvoke r1.<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>("uuid");

        r2 = (java.util.UUID) $r5;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r2;

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "handleEspressoResponse for id: %s", $r6);

        $r7 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map responses>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (android.support.test.espresso.remote.EspressoRemote$ResponseHolder) $r8;

        if null != r3 goto label1;

        $r10 = new java.lang.IllegalStateException;

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i1 = 45 + $i0;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received a response from an unknown message: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label1:
        virtualinvoke r3.<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: void setData(android.os.Bundle)>(r1);

        $r9 = virtualinvoke r3.<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: java.util.concurrent.CountDownLatch getLatch()>();

        virtualinvoke $r9.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    static android.os.Message access$000(android.support.test.espresso.remote.EspressoRemote$IncomingHandler, int)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        int i0;
        android.os.Message $r1;

        r0 := @parameter0: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: android.os.Message getEspressoMessage(int)>(i0);

        return $r1;
    }

    static void access$200(android.support.test.espresso.remote.EspressoRemote$IncomingHandler, java.util.UUID, android.support.test.espresso.remote.EspressoRemote$ResponseHolder)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        java.util.UUID r1;
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r2;

        r0 := @parameter0: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter1: java.util.UUID;

        r2 := @parameter2: android.support.test.espresso.remote.EspressoRemote$ResponseHolder;

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void associateResponse(java.util.UUID,android.support.test.espresso.remote.EspressoRemote$ResponseHolder)>(r1, r2);

        return;
    }

    static void access$300(android.support.test.espresso.remote.EspressoRemote$IncomingHandler, java.util.UUID)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        java.util.UUID r1;

        r0 := @parameter0: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        r1 := @parameter1: java.util.UUID;

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: void disassociateResponse(java.util.UUID)>(r1);

        return;
    }

    static java.util.Map access$400(android.support.test.espresso.remote.EspressoRemote$IncomingHandler)
    {
        android.support.test.espresso.remote.EspressoRemote$IncomingHandler r0;
        java.util.Map $r1;

        r0 := @parameter0: android.support.test.espresso.remote.EspressoRemote$IncomingHandler;

        $r1 = r0.<android.support.test.espresso.remote.EspressoRemote$IncomingHandler: java.util.Map responses>;

        return $r1;
    }

android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy
<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher rootMatcher>
<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher viewMatcher>
<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: android.support.test.espresso.ViewAssertion viewAssertion>
    public void <init>(org.hamcrest.Matcher, org.hamcrest.Matcher, android.support.test.espresso.ViewAssertion)
    {
        android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy r0;
        org.hamcrest.Matcher r1, r2;
        android.support.test.espresso.ViewAssertion r3;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: android.support.test.espresso.ViewAssertion;

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void <init>()>();

        r0.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher rootMatcher> = r1;

        r0.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher viewMatcher> = r2;

        r0.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: android.support.test.espresso.ViewAssertion viewAssertion> = r3;

        return;
    }

    public android.support.test.espresso.remote.InteractionResponse$Status execute()
    {
        android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy r0;
        java.lang.Object[] $r1;
        org.hamcrest.Matcher $r2, $r3, $r5, $r7;
        android.support.test.espresso.ViewAssertion $r4, $r9;
        android.support.test.espresso.ViewInteraction $r6, $r8;
        android.support.test.espresso.remote.InteractionResponse$Status $r11;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher rootMatcher>;

        $r1[0] = $r2;

        $r3 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher viewMatcher>;

        $r1[1] = $r3;

        $r4 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: android.support.test.espresso.ViewAssertion viewAssertion>;

        $r1[2] = $r4;

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "Remotely executing:\nonView(%S).inRoot(%s).check(%s)", $r1);

        $r5 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher viewMatcher>;

        $r6 = staticinvoke <android.support.test.espresso.Espresso: android.support.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r5);

        $r7 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: org.hamcrest.Matcher rootMatcher>;

        $r8 = virtualinvoke $r6.<android.support.test.espresso.ViewInteraction: android.support.test.espresso.ViewInteraction inRoot(org.hamcrest.Matcher)>($r7);

        $r9 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: android.support.test.espresso.ViewAssertion viewAssertion>;

        virtualinvoke $r8.<android.support.test.espresso.ViewInteraction: android.support.test.espresso.ViewInteraction check(android.support.test.espresso.ViewAssertion)>($r9);

        $r11 = <android.support.test.espresso.remote.InteractionResponse$Status: android.support.test.espresso.remote.InteractionResponse$Status Ok>;

        return $r11;
    }

android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy
<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher rootMatcher>
<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher viewMatcher>
<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: android.support.test.espresso.ViewAction viewAction>
    public void <init>(org.hamcrest.Matcher, org.hamcrest.Matcher, android.support.test.espresso.ViewAction)
    {
        android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy r0;
        org.hamcrest.Matcher r1, r2;
        android.support.test.espresso.ViewAction r3;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: android.support.test.espresso.ViewAction;

        specialinvoke r0.<android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void <init>()>();

        r0.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher rootMatcher> = r1;

        r0.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher viewMatcher> = r2;

        r0.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: android.support.test.espresso.ViewAction viewAction> = r3;

        return;
    }

    public android.support.test.espresso.remote.InteractionResponse$Status execute()
    {
        android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy r0;
        java.lang.Object[] $r1;
        org.hamcrest.Matcher $r2, $r3, $r5, $r7;
        android.support.test.espresso.ViewAction $r4, $r10;
        android.support.test.espresso.ViewInteraction $r6, $r8;
        android.support.test.espresso.ViewAction[] $r9;
        android.support.test.espresso.remote.InteractionResponse$Status $r12;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher rootMatcher>;

        $r1[0] = $r2;

        $r3 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher viewMatcher>;

        $r1[1] = $r3;

        $r4 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: android.support.test.espresso.ViewAction viewAction>;

        $r1[2] = $r4;

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "Remotely executing:\nonView(%s).inRoot(%s).perform(%s)", $r1);

        $r5 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher viewMatcher>;

        $r6 = staticinvoke <android.support.test.espresso.Espresso: android.support.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r5);

        $r7 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: org.hamcrest.Matcher rootMatcher>;

        $r8 = virtualinvoke $r6.<android.support.test.espresso.ViewInteraction: android.support.test.espresso.ViewInteraction inRoot(org.hamcrest.Matcher)>($r7);

        $r9 = newarray (android.support.test.espresso.ViewAction)[1];

        $r10 = r0.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: android.support.test.espresso.ViewAction viewAction>;

        $r9[0] = $r10;

        virtualinvoke $r8.<android.support.test.espresso.ViewInteraction: android.support.test.espresso.ViewInteraction perform(android.support.test.espresso.ViewAction[])>($r9);

        $r12 = <android.support.test.espresso.remote.InteractionResponse$Status: android.support.test.espresso.remote.InteractionResponse$Status Ok>;

        return $r12;
    }

android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy
    void <init>()
    {
        android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy r0;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy 'from'(android.support.test.espresso.remote.InteractionRequest, android.os.Bundle)
    {
        android.support.test.espresso.remote.InteractionRequest r0;
        android.os.Bundle r1;
        java.lang.Object[] $r3;
        org.hamcrest.Matcher $r4, $r5, $r10, $r11, $r13, $r14;
        android.support.test.espresso.ViewAction $r6, $r8, r15;
        android.support.test.espresso.ViewAssertion $r7, r16;
        android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy $r9;
        android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy $r12;

        r0 := @parameter0: android.support.test.espresso.remote.InteractionRequest;

        r1 := @parameter1: android.os.Bundle;

        staticinvoke <android.support.test.espresso.remote.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "interactionRequest cannot be null!");

        $r3 = newarray (java.lang.Object)[4];

        $r4 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getRootMatcher()>();

        $r3[0] = $r4;

        $r5 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getViewMatcher()>();

        $r3[1] = $r5;

        $r6 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: android.support.test.espresso.ViewAction getViewAction()>();

        $r3[2] = $r6;

        $r7 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: android.support.test.espresso.ViewAssertion getViewAssertion()>();

        $r3[3] = $r7;

        staticinvoke <android.support.test.internal.util.LogUtil: void logDebugWithProcess(java.lang.String,java.lang.String,java.lang.Object[])>("EspressoRemote", "Creating RemoteInteractionStrategy from values:\nRootMatcher: %s\nViewMatcher: %s\nViewAction: %s\nView Assertion: %s", $r3);

        $r8 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: android.support.test.espresso.ViewAction getViewAction()>();

        if $r8 == null goto label1;

        r15 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: android.support.test.espresso.ViewAction getViewAction()>();

        staticinvoke <android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void setIBinderFromBundle(java.lang.Object,android.os.Bundle)>(r15, r1);

        $r12 = new android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy;

        $r13 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getRootMatcher()>();

        $r14 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getViewMatcher()>();

        specialinvoke $r12.<android.support.test.espresso.remote.EspressoRemote$OnViewPerformStrategy: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher,android.support.test.espresso.ViewAction)>($r13, $r14, r15);

        return $r12;

     label1:
        r16 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: android.support.test.espresso.ViewAssertion getViewAssertion()>();

        staticinvoke <android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void setIBinderFromBundle(java.lang.Object,android.os.Bundle)>(r16, r1);

        $r9 = new android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy;

        $r10 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getRootMatcher()>();

        $r11 = virtualinvoke r0.<android.support.test.espresso.remote.InteractionRequest: org.hamcrest.Matcher getViewMatcher()>();

        specialinvoke $r9.<android.support.test.espresso.remote.EspressoRemote$OnViewCheckStrategy: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher,android.support.test.espresso.ViewAssertion)>($r10, $r11, r16);

        return $r9;
    }

    private static void setIBinderFromBundle(java.lang.Object, android.os.Bundle)
    {
        java.lang.Object r0;
        android.os.Bundle r1;
        boolean $z0;
        android.support.test.espresso.remote.Bindable $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.os.Bundle;

        $z0 = r0 instanceof android.support.test.espresso.remote.Bindable;

        if $z0 == 0 goto label1;

        $r2 = (android.support.test.espresso.remote.Bindable) r0;

        staticinvoke <android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: void setIBinderFromBundle(android.support.test.espresso.remote.Bindable,android.os.Bundle)>($r2, r1);

     label1:
        return;
    }

    private static void setIBinderFromBundle(android.support.test.espresso.remote.Bindable, android.os.Bundle)
    {
        android.support.test.espresso.remote.Bindable r0;
        android.os.Bundle r1;
        android.support.test.internal.util.ParcelableIBinder r2;
        java.lang.String $r3;
        android.os.Parcelable $r4;
        android.os.IBinder $r5;

        r0 := @parameter0: android.support.test.espresso.remote.Bindable;

        r1 := @parameter1: android.os.Bundle;

        $r3 = interfaceinvoke r0.<android.support.test.espresso.remote.Bindable: java.lang.String getId()>();

        $r4 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>($r3);

        r2 = (android.support.test.internal.util.ParcelableIBinder) $r4;

        $r5 = virtualinvoke r2.<android.support.test.internal.util.ParcelableIBinder: android.os.IBinder getIBinder()>();

        interfaceinvoke r0.<android.support.test.espresso.remote.Bindable: void setIBinder(android.os.IBinder)>($r5);

        return;
    }

<android.support.test.espresso.remote.EspressoRemote$RemoteInteractionStrategy: android.support.test.espresso.remote.InteractionResponse$Status execute()>
android.support.test.espresso.remote.EspressoRemote$ResponseHolder
<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: java.util.concurrent.CountDownLatch latch>
<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle data>
    public void <init>(java.util.concurrent.CountDownLatch)
    {
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        java.util.concurrent.CountDownLatch r1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$ResponseHolder;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle data> = null;

        r0.<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: java.util.concurrent.CountDownLatch latch> = r1;

        return;
    }

    public void setData(android.os.Bundle)
    {
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        android.os.Bundle r1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$ResponseHolder;

        r1 := @parameter0: android.os.Bundle;

        r0.<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle data> = r1;

        return;
    }

    public android.os.Bundle getData()
    {
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        android.os.Bundle $r1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$ResponseHolder;

        $r1 = r0.<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: android.os.Bundle data>;

        return $r1;
    }

    public java.util.concurrent.CountDownLatch getLatch()
    {
        android.support.test.espresso.remote.EspressoRemote$ResponseHolder r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: android.support.test.espresso.remote.EspressoRemote$ResponseHolder;

        $r1 = r0.<android.support.test.espresso.remote.EspressoRemote$ResponseHolder: java.util.concurrent.CountDownLatch latch>;

        return $r1;
    }

