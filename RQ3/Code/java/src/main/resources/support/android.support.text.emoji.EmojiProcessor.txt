android.support.text.emoji.EmojiProcessor
<android.support.text.emoji.EmojiProcessor: int ACTION_ADVANCE_BOTH>
<android.support.text.emoji.EmojiProcessor: int ACTION_ADVANCE_END>
<android.support.text.emoji.EmojiProcessor: int ACTION_FLUSH>
<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.EmojiCompat$SpanFactory mSpanFactory>
<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.MetadataRepo mMetadataRepo>
<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.EmojiProcessor$GlyphChecker mGlyphChecker>
<android.support.text.emoji.EmojiProcessor: boolean mUseEmojiAsDefaultStyle>
<android.support.text.emoji.EmojiProcessor: int[] mEmojiAsDefaultStyleExceptions>
    void <init>(android.support.text.emoji.MetadataRepo, android.support.text.emoji.EmojiCompat$SpanFactory, boolean, int[])
    {
        android.support.text.emoji.EmojiProcessor r0;
        android.support.text.emoji.MetadataRepo r1;
        android.support.text.emoji.EmojiCompat$SpanFactory r2;
        boolean z0;
        int[] r3;
        android.support.text.emoji.EmojiProcessor$GlyphChecker $r4;

        r0 := @this: android.support.text.emoji.EmojiProcessor;

        r1 := @parameter0: android.support.text.emoji.MetadataRepo;

        r2 := @parameter1: android.support.text.emoji.EmojiCompat$SpanFactory;

        z0 := @parameter2: boolean;

        r3 := @parameter3: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.support.text.emoji.EmojiProcessor$GlyphChecker;

        specialinvoke $r4.<android.support.text.emoji.EmojiProcessor$GlyphChecker: void <init>()>();

        r0.<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.EmojiProcessor$GlyphChecker mGlyphChecker> = $r4;

        r0.<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.EmojiCompat$SpanFactory mSpanFactory> = r2;

        r0.<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.MetadataRepo mMetadataRepo> = r1;

        r0.<android.support.text.emoji.EmojiProcessor: boolean mUseEmojiAsDefaultStyle> = z0;

        r0.<android.support.text.emoji.EmojiProcessor: int[] mEmojiAsDefaultStyleExceptions> = r3;

        return;
    }

    android.support.text.emoji.EmojiMetadata getEmojiMetadata(java.lang.CharSequence)
    {
        android.support.text.emoji.EmojiProcessor r0;
        java.lang.CharSequence r1;
        android.support.text.emoji.EmojiProcessor$ProcessorSm r2, $r3;
        int i0, i1, i2, $i3, i4;
        android.support.text.emoji.MetadataRepo $r4;
        android.support.text.emoji.MetadataRepo$Node $r5;
        int[] $r6;
        boolean $z0, $z1;
        android.support.text.emoji.EmojiMetadata $r7;

        r0 := @this: android.support.text.emoji.EmojiProcessor;

        r1 := @parameter0: java.lang.CharSequence;

        $r3 = new android.support.text.emoji.EmojiProcessor$ProcessorSm;

        $r4 = r0.<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.MetadataRepo mMetadataRepo>;

        $r5 = virtualinvoke $r4.<android.support.text.emoji.MetadataRepo: android.support.text.emoji.MetadataRepo$Node getRootNode()>();

        $z0 = r0.<android.support.text.emoji.EmojiProcessor: boolean mUseEmojiAsDefaultStyle>;

        $r6 = r0.<android.support.text.emoji.EmojiProcessor: int[] mEmojiAsDefaultStyleExceptions>;

        specialinvoke $r3.<android.support.text.emoji.EmojiProcessor$ProcessorSm: void <init>(android.support.text.emoji.MetadataRepo$Node,boolean,int[])>($r5, $z0, $r6);

        r2 = $r3;

        i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        i1 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r1, i4);

        i2 = virtualinvoke r2.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int check(int)>(i1);

        if i2 == 2 goto label2;

        return null;

     label2:
        $i3 = staticinvoke <java.lang.Character: int charCount(int)>(i1);

        i4 = i4 + $i3;

        goto label1;

     label3:
        $z1 = virtualinvoke r2.<android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean isInFlushableState()>();

        if $z1 == 0 goto label4;

        $r7 = virtualinvoke r2.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.EmojiMetadata getCurrentMetadata()>();

        return $r7;

     label4:
        return null;
    }

    java.lang.CharSequence process(java.lang.CharSequence, int, int, int, boolean)
    {
        android.support.text.emoji.EmojiProcessor r0;
        java.lang.CharSequence r1, r22, r42;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21;
        java.lang.Throwable r2, $r17;
        android.support.text.emoji.widget.SpannableBuilder $r3, $r4, $r16, $r18;
        android.support.text.emoji.EmojiMetadata $r5, $r7, $r8, $r10;
        java.lang.Object[] $r11, $r13;
        android.support.text.emoji.EmojiSpan[] $r12, r20;
        android.text.Spanned $r14;
        java.lang.Object r19, $r28, r29;
        android.support.text.emoji.EmojiSpan r21;
        android.support.text.emoji.MetadataRepo $r24;
        android.support.text.emoji.MetadataRepo$Node $r25;
        int[] $r26;
        android.support.text.emoji.EmojiProcessor$ProcessorSm r27, r31;
        android.text.SpannableString r30, r32, r33;
        android.text.Spannable r34, r35, r36, r37, r38, r39, r40, r41;

        r0 := @this: android.support.text.emoji.EmojiProcessor;

        r1 := @parameter0: java.lang.CharSequence;

        i10 := @parameter1: int;

        i11 := @parameter2: int;

        i12 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 = r1 instanceof android.support.text.emoji.widget.SpannableBuilder;

        if z1 == 0 goto label01;

        $r16 = (android.support.text.emoji.widget.SpannableBuilder) r1;

        virtualinvoke $r16.<android.support.text.emoji.widget.SpannableBuilder: void beginBatchEdit()>();

     label01:
        r19 = null;

        if z1 != 0 goto label02;

        $z5 = r1 instanceof android.text.Spannable;

        if $z5 == 0 goto label03;

     label02:
        r19 = (android.text.Spannable) r1;

        goto label04;

     label03:
        $z6 = r1 instanceof android.text.Spanned;

        if $z6 == 0 goto label04;

        $r14 = (android.text.Spanned) r1;

        $i9 = i10 - 1;

        $i8 = i11 + 1;

        i13 = interfaceinvoke $r14.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>($i9, $i8, class "Landroid/support/text/emoji/EmojiSpan;");

        if i13 > i11 goto label04;

        r30 = new android.text.SpannableString;

        specialinvoke r30.<android.text.SpannableString: void <init>(java.lang.CharSequence)>(r1);

        r19 = r30;

     label04:
        if r19 == null goto label07;

        r34 = (android.text.Spannable) r19;

        $r13 = interfaceinvoke r34.<android.text.Spannable: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i10, i11, class "Landroid/support/text/emoji/EmojiSpan;");

        r20 = (android.support.text.emoji.EmojiSpan[]) $r13;

        if r20 == null goto label07;

        $i7 = lengthof r20;

        if $i7 <= 0 goto label07;

        i14 = lengthof r20;

        i15 = 0;

     label05:
        if i15 >= i14 goto label07;

        r21 = r20[i15];

        r35 = (android.text.Spannable) r19;

        i16 = interfaceinvoke r35.<android.text.Spannable: int getSpanStart(java.lang.Object)>(r21);

        r36 = (android.text.Spannable) r19;

        i0 = interfaceinvoke r36.<android.text.Spannable: int getSpanEnd(java.lang.Object)>(r21);

        if i16 == i11 goto label06;

        r37 = (android.text.Spannable) r19;

        interfaceinvoke r37.<android.text.Spannable: void removeSpan(java.lang.Object)>(r21);

     label06:
        i10 = staticinvoke <java.lang.Math: int min(int,int)>(i16, i10);

        i11 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i11);

        i15 = i15 + 1;

        goto label05;

     label07:
        if i10 == i11 goto label08;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i10 < $i1 goto label11;

     label08:
        r22 = r1;

     label09:
        if z1 == 0 goto label10;

        $r3 = (android.support.text.emoji.widget.SpannableBuilder) r1;

        virtualinvoke $r3.<android.support.text.emoji.widget.SpannableBuilder: void endBatchEdit()>();

     label10:
        return r22;

     label11:
        if i12 == 2147483647 goto label12;

        if r19 == null goto label12;

        r38 = (android.text.Spannable) r19;

        $i5 = interfaceinvoke r38.<android.text.Spannable: int length()>();

        r39 = (android.text.Spannable) r19;

        $r11 = interfaceinvoke r39.<android.text.Spannable: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i5, class "Landroid/support/text/emoji/EmojiSpan;");

        $r12 = (android.support.text.emoji.EmojiSpan[]) $r11;

        $i6 = lengthof $r12;

        i12 = i12 - $i6;

     label12:
        i17 = 0;

        r31 = new android.support.text.emoji.EmojiProcessor$ProcessorSm;

        $r24 = r0.<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.MetadataRepo mMetadataRepo>;

        $r25 = virtualinvoke $r24.<android.support.text.emoji.MetadataRepo: android.support.text.emoji.MetadataRepo$Node getRootNode()>();

        $z7 = r0.<android.support.text.emoji.EmojiProcessor: boolean mUseEmojiAsDefaultStyle>;

        $r26 = r0.<android.support.text.emoji.EmojiProcessor: int[] mEmojiAsDefaultStyleExceptions>;

        specialinvoke r31.<android.support.text.emoji.EmojiProcessor$ProcessorSm: void <init>(android.support.text.emoji.MetadataRepo$Node,boolean,int[])>($r25, $z7, $r26);

        r27 = r31;

        i18 = i10;

        i19 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r1, i18);

     label13:
        if i18 >= i11 goto label21;

        if i17 >= i12 goto label21;

        i20 = virtualinvoke r27.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int check(int)>(i19);

        tableswitch(i20)
        {
            case 1: goto label14;
            case 2: goto label15;
            case 3: goto label16;
            default: goto label20;
        };

     label14:
        $i3 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r1, i10);

        $i4 = staticinvoke <java.lang.Character: int charCount(int)>($i3);

        i10 = i10 + $i4;

        i18 = i10;

        if i18 >= i11 goto label20;

        i19 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r1, i18);

        goto label20;

     label15:
        $i2 = staticinvoke <java.lang.Character: int charCount(int)>(i19);

        i18 = i18 + $i2;

        if i18 >= i11 goto label20;

        i19 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r1, i18);

        goto label20;

     label16:
        if z0 != 0 goto label17;

        $r10 = virtualinvoke r27.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.EmojiMetadata getFlushMetadata()>();

        $z4 = specialinvoke r0.<android.support.text.emoji.EmojiProcessor: boolean hasGlyph(java.lang.CharSequence,int,int,android.support.text.emoji.EmojiMetadata)>(r1, i10, i18, $r10);

        if $z4 != 0 goto label19;

     label17:
        if r19 != null goto label18;

        r32 = new android.text.SpannableString;

        specialinvoke r32.<android.text.SpannableString: void <init>(java.lang.CharSequence)>(r1);

        r19 = r32;

     label18:
        $r8 = virtualinvoke r27.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.EmojiMetadata getFlushMetadata()>();

        r40 = (android.text.Spannable) r19;

        specialinvoke r0.<android.support.text.emoji.EmojiProcessor: void addEmoji(android.text.Spannable,android.support.text.emoji.EmojiMetadata,int,int)>(r40, $r8, i10, i18);

        i17 = i17 + 1;

     label19:
        i10 = i18;

     label20:
        goto label13;

     label21:
        $z2 = virtualinvoke r27.<android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean isInFlushableState()>();

        if $z2 == 0 goto label24;

        if i17 >= i12 goto label24;

        if z0 != 0 goto label22;

        $r7 = virtualinvoke r27.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.EmojiMetadata getCurrentMetadata()>();

        $z3 = specialinvoke r0.<android.support.text.emoji.EmojiProcessor: boolean hasGlyph(java.lang.CharSequence,int,int,android.support.text.emoji.EmojiMetadata)>(r1, i10, i18, $r7);

        if $z3 != 0 goto label24;

     label22:
        if r19 != null goto label23;

        r33 = new android.text.SpannableString;

        specialinvoke r33.<android.text.SpannableString: void <init>(java.lang.CharSequence)>(r1);

        r19 = r33;

     label23:
        $r5 = virtualinvoke r27.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.EmojiMetadata getCurrentMetadata()>();

        r41 = (android.text.Spannable) r19;

        specialinvoke r0.<android.support.text.emoji.EmojiProcessor: void addEmoji(android.text.Spannable,android.support.text.emoji.EmojiMetadata,int,int)>(r41, $r5, i10, i18);

        i21 = i17 + 1;

     label24:
        if r19 != null goto label25;

        $r28 = r1;

        goto label26;

     label25:
        $r28 = r19;

     label26:
        r29 = $r28;

     label27:
        if z1 == 0 goto label28;

        $r4 = (android.support.text.emoji.widget.SpannableBuilder) r1;

        virtualinvoke $r4.<android.support.text.emoji.widget.SpannableBuilder: void endBatchEdit()>();

     label28:
        r42 = (java.lang.CharSequence) r29;

        return r42;

     label29:
        $r17 := @caughtexception;

        r2 = $r17;

     label30:
        if z1 == 0 goto label31;

        $r18 = (android.support.text.emoji.widget.SpannableBuilder) r1;

        virtualinvoke $r18.<android.support.text.emoji.widget.SpannableBuilder: void endBatchEdit()>();

     label31:
        throw r2;

        catch java.lang.Throwable from label01 to label09 with label29;
        catch java.lang.Throwable from label11 to label27 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
    }

    static boolean handleOnKeyDown(android.text.Editable, int, android.view.KeyEvent)
    {
        android.text.Editable r0;
        int i0;
        android.view.KeyEvent r1;
        boolean z0;

        r0 := @parameter0: android.text.Editable;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        lookupswitch(i0)
        {
            case 67: goto label1;
            case 112: goto label2;
            default: goto label3;
        };

     label1:
        z0 = staticinvoke <android.support.text.emoji.EmojiProcessor: boolean delete(android.text.Editable,android.view.KeyEvent,boolean)>(r0, r1, 0);

        goto label4;

     label2:
        z0 = staticinvoke <android.support.text.emoji.EmojiProcessor: boolean delete(android.text.Editable,android.view.KeyEvent,boolean)>(r0, r1, 1);

        goto label4;

     label3:
        z0 = 0;

     label4:
        if z0 == 0 goto label5;

        staticinvoke <android.text.method.MetaKeyKeyListener: void adjustMetaAfterKeypress(android.text.Spannable)>(r0);

        return 1;

     label5:
        return 0;
    }

    private static boolean delete(android.text.Editable, android.view.KeyEvent, boolean)
    {
        android.text.Editable r0;
        android.view.KeyEvent r1;
        boolean z0, $z1, $z2;
        int i0, i1, i2, i3, i4, $i5, i6;
        android.support.text.emoji.EmojiSpan[] r2;
        android.support.text.emoji.EmojiSpan r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: android.text.Editable;

        r1 := @parameter1: android.view.KeyEvent;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <android.support.text.emoji.EmojiProcessor: boolean hasModifiers(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label1;

        return 0;

     label1:
        i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r0);

        i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        $z2 = staticinvoke <android.support.text.emoji.EmojiProcessor: boolean hasInvalidSelection(int,int)>(i0, i1);

        if $z2 == 0 goto label2;

        return 0;

     label2:
        $r4 = interfaceinvoke r0.<android.text.Editable: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/support/text/emoji/EmojiSpan;");

        r2 = (android.support.text.emoji.EmojiSpan[]) $r4;

        if r2 == null goto label8;

        $i5 = lengthof r2;

        if $i5 <= 0 goto label8;

        i2 = lengthof r2;

        i6 = 0;

     label3:
        if i6 >= i2 goto label8;

        r3 = r2[i6];

        i3 = interfaceinvoke r0.<android.text.Editable: int getSpanStart(java.lang.Object)>(r3);

        i4 = interfaceinvoke r0.<android.text.Editable: int getSpanEnd(java.lang.Object)>(r3);

        if z0 == 0 goto label4;

        if i3 == i0 goto label6;

     label4:
        if z0 != 0 goto label5;

        if i4 == i0 goto label6;

     label5:
        if i0 <= i3 goto label7;

        if i0 >= i4 goto label7;

     label6:
        interfaceinvoke r0.<android.text.Editable: android.text.Editable delete(int,int)>(i3, i4);

        return 1;

     label7:
        i6 = i6 + 1;

        goto label3;

     label8:
        return 0;
    }

    static boolean handleDeleteSurroundingText(android.view.inputmethod.InputConnection, android.text.Editable, int, int, boolean)
    {
        android.view.inputmethod.InputConnection r0;
        android.text.Editable r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i18;
        boolean z0, $z1;
        android.support.text.emoji.EmojiSpan[] r2;
        android.support.text.emoji.EmojiSpan r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: android.view.inputmethod.InputConnection;

        r1 := @parameter1: android.text.Editable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        if r1 == null goto label01;

        if r0 != null goto label02;

     label01:
        return 0;

     label02:
        if i0 < 0 goto label03;

        if i1 >= 0 goto label04;

     label03:
        return 0;

     label04:
        i2 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r1);

        i3 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r1);

        $z1 = staticinvoke <android.support.text.emoji.EmojiProcessor: boolean hasInvalidSelection(int,int)>(i2, i3);

        if $z1 == 0 goto label05;

        return 0;

     label05:
        if z0 == 0 goto label07;

        $i12 = staticinvoke <java.lang.Math: int max(int,int)>(i0, 0);

        i14 = staticinvoke <android.support.text.emoji.EmojiProcessor$CodepointIndexFinder: int findIndexBackward(java.lang.CharSequence,int,int)>(r1, i2, $i12);

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 0);

        i15 = staticinvoke <android.support.text.emoji.EmojiProcessor$CodepointIndexFinder: int findIndexForward(java.lang.CharSequence,int,int)>(r1, i3, $i13);

        if i14 == -1 goto label06;

        if i15 != -1 goto label08;

     label06:
        return 0;

     label07:
        $i7 = i2 - i0;

        i14 = staticinvoke <java.lang.Math: int max(int,int)>($i7, 0);

        $i8 = i3 + i1;

        $i9 = interfaceinvoke r1.<android.text.Editable: int length()>();

        i15 = staticinvoke <java.lang.Math: int min(int,int)>($i8, $i9);

     label08:
        $r4 = interfaceinvoke r1.<android.text.Editable: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i14, i15, class "Landroid/support/text/emoji/EmojiSpan;");

        r2 = (android.support.text.emoji.EmojiSpan[]) $r4;

        if r2 == null goto label11;

        $i10 = lengthof r2;

        if $i10 <= 0 goto label11;

        i4 = lengthof r2;

        i16 = 0;

     label09:
        if i16 >= i4 goto label10;

        r3 = r2[i16];

        i5 = interfaceinvoke r1.<android.text.Editable: int getSpanStart(java.lang.Object)>(r3);

        i6 = interfaceinvoke r1.<android.text.Editable: int getSpanEnd(java.lang.Object)>(r3);

        i14 = staticinvoke <java.lang.Math: int min(int,int)>(i5, i14);

        i15 = staticinvoke <java.lang.Math: int max(int,int)>(i6, i15);

        i16 = i16 + 1;

        goto label09;

     label10:
        i17 = staticinvoke <java.lang.Math: int max(int,int)>(i14, 0);

        $i11 = interfaceinvoke r1.<android.text.Editable: int length()>();

        i18 = staticinvoke <java.lang.Math: int min(int,int)>(i15, $i11);

        interfaceinvoke r0.<android.view.inputmethod.InputConnection: boolean beginBatchEdit()>();

        interfaceinvoke r1.<android.text.Editable: android.text.Editable delete(int,int)>(i17, i18);

        interfaceinvoke r0.<android.view.inputmethod.InputConnection: boolean endBatchEdit()>();

        return 1;

     label11:
        return 0;
    }

    private static boolean hasInvalidSelection(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == -1 goto label1;

        if i1 == -1 goto label1;

        if i0 == i1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean hasModifiers(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r0.<android.view.KeyEvent: int getMetaState()>();

        $z0 = staticinvoke <android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>($i0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void addEmoji(android.text.Spannable, android.support.text.emoji.EmojiMetadata, int, int)
    {
        android.support.text.emoji.EmojiProcessor r0;
        android.text.Spannable r1;
        android.support.text.emoji.EmojiMetadata r2;
        int i0, i1;
        android.support.text.emoji.EmojiSpan r3;
        android.support.text.emoji.EmojiCompat$SpanFactory $r4;

        r0 := @this: android.support.text.emoji.EmojiProcessor;

        r1 := @parameter0: android.text.Spannable;

        r2 := @parameter1: android.support.text.emoji.EmojiMetadata;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r4 = r0.<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.EmojiCompat$SpanFactory mSpanFactory>;

        r3 = virtualinvoke $r4.<android.support.text.emoji.EmojiCompat$SpanFactory: android.support.text.emoji.EmojiSpan createSpan(android.support.text.emoji.EmojiMetadata)>(r2);

        interfaceinvoke r1.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>(r3, i0, i1, 33);

        return;
    }

    private boolean hasGlyph(java.lang.CharSequence, int, int, android.support.text.emoji.EmojiMetadata)
    {
        android.support.text.emoji.EmojiProcessor r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2, $i3, $i4, $i6;
        android.support.text.emoji.EmojiMetadata r2;
        boolean z0, $z1;
        android.support.text.emoji.EmojiProcessor$GlyphChecker $r3;
        short $s5;

        r0 := @this: android.support.text.emoji.EmojiProcessor;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.support.text.emoji.EmojiMetadata;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 >= 23 goto label1;

        $s5 = virtualinvoke r2.<android.support.text.emoji.EmojiMetadata: short getSdkAdded()>();

        $i6 = <android.os.Build$VERSION: int SDK_INT>;

        if $s5 <= $i6 goto label1;

        return 0;

     label1:
        $i3 = virtualinvoke r2.<android.support.text.emoji.EmojiMetadata: int getHasGlyph()>();

        if $i3 != 0 goto label2;

        $r3 = r0.<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.EmojiProcessor$GlyphChecker mGlyphChecker>;

        z0 = virtualinvoke $r3.<android.support.text.emoji.EmojiProcessor$GlyphChecker: boolean hasGlyph(java.lang.CharSequence,int,int)>(r1, i0, i1);

        virtualinvoke r2.<android.support.text.emoji.EmojiMetadata: void setHasGlyph(boolean)>(z0);

     label2:
        $i4 = virtualinvoke r2.<android.support.text.emoji.EmojiMetadata: int getHasGlyph()>();

        if $i4 != 2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    void setGlyphChecker(android.support.text.emoji.EmojiProcessor$GlyphChecker)
    {
        android.support.text.emoji.EmojiProcessor r0;
        android.support.text.emoji.EmojiProcessor$GlyphChecker r1;

        r0 := @this: android.support.text.emoji.EmojiProcessor;

        r1 := @parameter0: android.support.text.emoji.EmojiProcessor$GlyphChecker;

        staticinvoke <android.support.v4.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<android.support.text.emoji.EmojiProcessor: android.support.text.emoji.EmojiProcessor$GlyphChecker mGlyphChecker> = r1;

        return;
    }

android.support.text.emoji.EmojiProcessor$CodepointIndexFinder
<android.support.text.emoji.EmojiProcessor$CodepointIndexFinder: int INVALID_INDEX>
    private void <init>()
    {
        android.support.text.emoji.EmojiProcessor$CodepointIndexFinder r0;

        r0 := @this: android.support.text.emoji.EmojiProcessor$CodepointIndexFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int findIndexBackward(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i4, i5;
        char c3;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 = i0;

        z3 = 0;

        i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i4 < 0 goto label01;

        if i2 >= i4 goto label02;

     label01:
        return -1;

     label02:
        if i1 >= 0 goto label03;

        return -1;

     label03:
        i5 = i1;

     label04:
        if i5 != 0 goto label05;

        return i4;

     label05:
        i4 = i4 + -1;

        if i4 >= 0 goto label07;

        if z3 == 0 goto label06;

        return -1;

     label06:
        return 0;

     label07:
        c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        if z3 == 0 goto label09;

        $z2 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c3);

        if $z2 != 0 goto label08;

        return -1;

     label08:
        z3 = 0;

        i5 = i5 + -1;

        goto label04;

     label09:
        $z0 = staticinvoke <java.lang.Character: boolean isSurrogate(char)>(c3);

        if $z0 != 0 goto label10;

        i5 = i5 + -1;

        goto label04;

     label10:
        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c3);

        if $z1 == 0 goto label11;

        return -1;

     label11:
        z3 = 1;

        goto label04;
    }

    static int findIndexForward(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i4, i5;
        char c3;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 = i0;

        z3 = 0;

        i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i4 < 0 goto label01;

        if i2 >= i4 goto label02;

     label01:
        return -1;

     label02:
        if i1 >= 0 goto label03;

        return -1;

     label03:
        i5 = i1;

     label04:
        if i5 != 0 goto label05;

        return i4;

     label05:
        if i4 < i2 goto label07;

        if z3 == 0 goto label06;

        return -1;

     label06:
        return i2;

     label07:
        c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        if z3 == 0 goto label09;

        $z2 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c3);

        if $z2 != 0 goto label08;

        return -1;

     label08:
        i5 = i5 + -1;

        z3 = 0;

        i4 = i4 + 1;

        goto label04;

     label09:
        $z0 = staticinvoke <java.lang.Character: boolean isSurrogate(char)>(c3);

        if $z0 != 0 goto label10;

        i5 = i5 + -1;

        i4 = i4 + 1;

        goto label04;

     label10:
        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(c3);

        if $z1 == 0 goto label11;

        return -1;

     label11:
        z3 = 1;

        i4 = i4 + 1;

        goto label04;
    }

android.support.text.emoji.EmojiProcessor$GlyphChecker
<android.support.text.emoji.EmojiProcessor$GlyphChecker: int PAINT_TEXT_SIZE>
<android.support.text.emoji.EmojiProcessor$GlyphChecker: java.lang.ThreadLocal sStringBuilder>
<android.support.text.emoji.EmojiProcessor$GlyphChecker: android.text.TextPaint mTextPaint>
    void <init>()
    {
        android.support.text.emoji.EmojiProcessor$GlyphChecker r0;
        android.text.TextPaint $r1, $r2;

        r0 := @this: android.support.text.emoji.EmojiProcessor$GlyphChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.text.TextPaint;

        specialinvoke $r1.<android.text.TextPaint: void <init>()>();

        r0.<android.support.text.emoji.EmojiProcessor$GlyphChecker: android.text.TextPaint mTextPaint> = $r1;

        $r2 = r0.<android.support.text.emoji.EmojiProcessor$GlyphChecker: android.text.TextPaint mTextPaint>;

        virtualinvoke $r2.<android.text.TextPaint: void setTextSize(float)>(10.0F);

        return;
    }

    public boolean hasGlyph(java.lang.CharSequence, int, int)
    {
        android.support.text.emoji.EmojiProcessor$GlyphChecker r0;
        java.lang.CharSequence r1;
        int i0, i2;
        java.lang.StringBuilder r2;
        android.text.TextPaint $r3;
        java.lang.String $r4;
        boolean $z0;
        char $c1;

        r0 := @this: android.support.text.emoji.EmojiProcessor$GlyphChecker;

        r1 := @parameter0: java.lang.CharSequence;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r2 = staticinvoke <android.support.text.emoji.EmojiProcessor$GlyphChecker: java.lang.StringBuilder getStringBuilder()>();

        virtualinvoke r2.<java.lang.StringBuilder: void setLength(int)>(0);

     label1:
        if i2 >= i0 goto label2;

        $c1 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = r0.<android.support.text.emoji.EmojiProcessor$GlyphChecker: android.text.TextPaint mTextPaint>;

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <android.support.v4.graphics.PaintCompat: boolean hasGlyph(android.graphics.Paint,java.lang.String)>($r3, $r4);

        return $z0;
    }

    private static java.lang.StringBuilder getStringBuilder()
    {
        java.lang.ThreadLocal $r0, $r2, $r6;
        java.lang.Object $r1, $r3;
        java.lang.StringBuilder $r4, $r5;

        $r0 = <android.support.text.emoji.EmojiProcessor$GlyphChecker: java.lang.ThreadLocal sStringBuilder>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r1 != null goto label1;

        $r6 = <android.support.text.emoji.EmojiProcessor$GlyphChecker: java.lang.ThreadLocal sStringBuilder>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>($r5);

     label1:
        $r2 = <android.support.text.emoji.EmojiProcessor$GlyphChecker: java.lang.ThreadLocal sStringBuilder>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (java.lang.StringBuilder) $r3;

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <android.support.text.emoji.EmojiProcessor$GlyphChecker: java.lang.ThreadLocal sStringBuilder> = $r0;

        return;
    }

android.support.text.emoji.EmojiProcessor$ProcessorSm
<android.support.text.emoji.EmojiProcessor$ProcessorSm: int STATE_DEFAULT>
<android.support.text.emoji.EmojiProcessor$ProcessorSm: int STATE_WALKING>
<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mState>
<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mRootNode>
<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode>
<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mFlushNode>
<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mLastCodepoint>
<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mCurrentDepth>
<android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean mUseEmojiAsDefaultStyle>
<android.support.text.emoji.EmojiProcessor$ProcessorSm: int[] mEmojiAsDefaultStyleExceptions>
    void <init>(android.support.text.emoji.MetadataRepo$Node, boolean, int[])
    {
        android.support.text.emoji.EmojiProcessor$ProcessorSm r0;
        android.support.text.emoji.MetadataRepo$Node r1;
        boolean z0;
        int[] r2;

        r0 := @this: android.support.text.emoji.EmojiProcessor$ProcessorSm;

        r1 := @parameter0: android.support.text.emoji.MetadataRepo$Node;

        z0 := @parameter1: boolean;

        r2 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mState> = 1;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mRootNode> = r1;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode> = r1;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean mUseEmojiAsDefaultStyle> = z0;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int[] mEmojiAsDefaultStyleExceptions> = r2;

        return;
    }

    int check(int)
    {
        android.support.text.emoji.EmojiProcessor$ProcessorSm r0;
        int i0, $i1, $i2, $i5, $i6, i7;
        android.support.text.emoji.MetadataRepo$Node r1, $r2, $r3, $r5, $r6;
        boolean $z0, $z1, $z2;
        android.support.text.emoji.EmojiMetadata $r4;

        r0 := @this: android.support.text.emoji.EmojiProcessor$ProcessorSm;

        i0 := @parameter0: int;

        $r2 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode>;

        r1 = virtualinvoke $r2.<android.support.text.emoji.MetadataRepo$Node: android.support.text.emoji.MetadataRepo$Node get(int)>(i0);

        $i1 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mState>;

        lookupswitch($i1)
        {
            case 1: goto label08;
            case 2: goto label01;
            default: goto label08;
        };

     label01:
        if r1 == null goto label02;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode> = r1;

        $i5 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mCurrentDepth>;

        $i6 = $i5 + 1;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mCurrentDepth> = $i6;

        i7 = 2;

        goto label10;

     label02:
        $z0 = staticinvoke <android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean isTextStyle(int)>(i0);

        if $z0 == 0 goto label03;

        i7 = specialinvoke r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int reset()>();

        goto label10;

     label03:
        $z1 = staticinvoke <android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean isEmojiStyle(int)>(i0);

        if $z1 == 0 goto label04;

        i7 = 2;

        goto label10;

     label04:
        $r3 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode>;

        $r4 = virtualinvoke $r3.<android.support.text.emoji.MetadataRepo$Node: android.support.text.emoji.EmojiMetadata getData()>();

        if $r4 == null goto label07;

        $i2 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mCurrentDepth>;

        if $i2 != 1 goto label06;

        $z2 = specialinvoke r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean shouldUseEmojiPresentationStyleForSingleCodepoint()>();

        if $z2 == 0 goto label05;

        $r6 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode>;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mFlushNode> = $r6;

        i7 = 3;

        specialinvoke r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int reset()>();

        goto label10;

     label05:
        i7 = specialinvoke r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int reset()>();

        goto label10;

     label06:
        $r5 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode>;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mFlushNode> = $r5;

        i7 = 3;

        specialinvoke r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int reset()>();

        goto label10;

     label07:
        i7 = specialinvoke r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int reset()>();

        goto label10;

     label08:
        if r1 != null goto label09;

        i7 = specialinvoke r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int reset()>();

        goto label10;

     label09:
        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mState> = 2;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode> = r1;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mCurrentDepth> = 1;

        i7 = 2;

     label10:
        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mLastCodepoint> = i0;

        return i7;
    }

    private int reset()
    {
        android.support.text.emoji.EmojiProcessor$ProcessorSm r0;
        android.support.text.emoji.MetadataRepo$Node $r1;

        r0 := @this: android.support.text.emoji.EmojiProcessor$ProcessorSm;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mState> = 1;

        $r1 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mRootNode>;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode> = $r1;

        r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mCurrentDepth> = 0;

        return 1;
    }

    android.support.text.emoji.EmojiMetadata getFlushMetadata()
    {
        android.support.text.emoji.EmojiProcessor$ProcessorSm r0;
        android.support.text.emoji.MetadataRepo$Node $r1;
        android.support.text.emoji.EmojiMetadata $r2;

        r0 := @this: android.support.text.emoji.EmojiProcessor$ProcessorSm;

        $r1 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mFlushNode>;

        $r2 = virtualinvoke $r1.<android.support.text.emoji.MetadataRepo$Node: android.support.text.emoji.EmojiMetadata getData()>();

        return $r2;
    }

    android.support.text.emoji.EmojiMetadata getCurrentMetadata()
    {
        android.support.text.emoji.EmojiProcessor$ProcessorSm r0;
        android.support.text.emoji.MetadataRepo$Node $r1;
        android.support.text.emoji.EmojiMetadata $r2;

        r0 := @this: android.support.text.emoji.EmojiProcessor$ProcessorSm;

        $r1 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode>;

        $r2 = virtualinvoke $r1.<android.support.text.emoji.MetadataRepo$Node: android.support.text.emoji.EmojiMetadata getData()>();

        return $r2;
    }

    boolean isInFlushableState()
    {
        android.support.text.emoji.EmojiProcessor$ProcessorSm r0;
        int $i0, $i1;
        android.support.text.emoji.MetadataRepo$Node $r1;
        android.support.text.emoji.EmojiMetadata $r2;
        boolean $z0, $z1;

        r0 := @this: android.support.text.emoji.EmojiProcessor$ProcessorSm;

        $i0 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mState>;

        if $i0 != 2 goto label2;

        $r1 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode>;

        $r2 = virtualinvoke $r1.<android.support.text.emoji.MetadataRepo$Node: android.support.text.emoji.EmojiMetadata getData()>();

        if $r2 == null goto label2;

        $i1 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mCurrentDepth>;

        if $i1 > 1 goto label1;

        $z0 = specialinvoke r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean shouldUseEmojiPresentationStyleForSingleCodepoint()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private boolean shouldUseEmojiPresentationStyleForSingleCodepoint()
    {
        android.support.text.emoji.EmojiProcessor$ProcessorSm r0;
        int i0, i1, $i2;
        android.support.text.emoji.MetadataRepo$Node $r1, $r4;
        android.support.text.emoji.EmojiMetadata $r2, $r5;
        boolean $z0, $z1, $z2;
        int[] $r3, $r6;

        r0 := @this: android.support.text.emoji.EmojiProcessor$ProcessorSm;

        $r1 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode>;

        $r2 = virtualinvoke $r1.<android.support.text.emoji.MetadataRepo$Node: android.support.text.emoji.EmojiMetadata getData()>();

        $z0 = virtualinvoke $r2.<android.support.text.emoji.EmojiMetadata: boolean isDefaultEmoji()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i2 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int mLastCodepoint>;

        $z1 = staticinvoke <android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean isEmojiStyle(int)>($i2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: boolean mUseEmojiAsDefaultStyle>;

        if $z2 == 0 goto label4;

        $r3 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int[] mEmojiAsDefaultStyleExceptions>;

        if $r3 != null goto label3;

        return 1;

     label3:
        $r4 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: android.support.text.emoji.MetadataRepo$Node mCurrentNode>;

        $r5 = virtualinvoke $r4.<android.support.text.emoji.MetadataRepo$Node: android.support.text.emoji.EmojiMetadata getData()>();

        i0 = virtualinvoke $r5.<android.support.text.emoji.EmojiMetadata: int getCodepointAt(int)>(0);

        $r6 = r0.<android.support.text.emoji.EmojiProcessor$ProcessorSm: int[] mEmojiAsDefaultStyleExceptions>;

        i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r6, i0);

        if i1 >= 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private static boolean isEmojiStyle(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 != 65039 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isTextStyle(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 != 65038 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

