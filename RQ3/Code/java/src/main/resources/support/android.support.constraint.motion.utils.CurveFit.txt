android.support.constraint.motion.utils.CurveFit
<android.support.constraint.motion.utils.CurveFit: int SPLINE>
<android.support.constraint.motion.utils.CurveFit: int LINEAR>
<android.support.constraint.motion.utils.CurveFit: int CONSTANT>
    public void <init>()
    {
        android.support.constraint.motion.utils.CurveFit r0;

        r0 := @this: android.support.constraint.motion.utils.CurveFit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.support.constraint.motion.utils.CurveFit get(int, double[], double[][])
    {
        double[] r0, $r3;
        double[][] r1;
        int $i0, i1;
        android.support.constraint.motion.utils.CurveFit$Constant $r2;
        double $d0;
        android.support.constraint.motion.utils.MonotonicCurveFit $r4;
        android.support.constraint.motion.utils.LinearCurveFit $r5;

        i1 := @parameter0: int;

        r0 := @parameter1: double[];

        r1 := @parameter2: double[][];

        $i0 = lengthof r0;

        if $i0 != 1 goto label1;

        i1 = 2;

     label1:
        lookupswitch(i1)
        {
            case 0: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        $r4 = new android.support.constraint.motion.utils.MonotonicCurveFit;

        specialinvoke $r4.<android.support.constraint.motion.utils.MonotonicCurveFit: void <init>(double[],double[][])>(r0, r1);

        return $r4;

     label3:
        $r2 = new android.support.constraint.motion.utils.CurveFit$Constant;

        $d0 = r0[0];

        $r3 = r1[0];

        specialinvoke $r2.<android.support.constraint.motion.utils.CurveFit$Constant: void <init>(double,double[])>($d0, $r3);

        return $r2;

     label4:
        $r5 = new android.support.constraint.motion.utils.LinearCurveFit;

        specialinvoke $r5.<android.support.constraint.motion.utils.LinearCurveFit: void <init>(double[],double[][])>(r0, r1);

        return $r5;
    }

    public static android.support.constraint.motion.utils.CurveFit getArc(int[], double[], double[][])
    {
        int[] r0;
        double[] r1;
        double[][] r2;
        android.support.constraint.motion.utils.ArcCurveFit $r3;

        r0 := @parameter0: int[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[][];

        $r3 = new android.support.constraint.motion.utils.ArcCurveFit;

        specialinvoke $r3.<android.support.constraint.motion.utils.ArcCurveFit: void <init>(int[],double[],double[][])>(r0, r1, r2);

        return $r3;
    }

<android.support.constraint.motion.utils.CurveFit: void getPos(double,double[])>
<android.support.constraint.motion.utils.CurveFit: void getPos(double,float[])>
<android.support.constraint.motion.utils.CurveFit: double getPos(double,int)>
<android.support.constraint.motion.utils.CurveFit: void getSlope(double,double[])>
<android.support.constraint.motion.utils.CurveFit: double getSlope(double,int)>
<android.support.constraint.motion.utils.CurveFit: double[] getTimePoints()>
