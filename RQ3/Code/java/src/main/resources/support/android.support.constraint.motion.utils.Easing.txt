android.support.constraint.motion.utils.Easing
<android.support.constraint.motion.utils.Easing: android.support.constraint.motion.utils.Easing sDefault>
<android.support.constraint.motion.utils.Easing: java.lang.String str>
<android.support.constraint.motion.utils.Easing: java.lang.String STANDARD>
<android.support.constraint.motion.utils.Easing: java.lang.String ACCELERATE>
<android.support.constraint.motion.utils.Easing: java.lang.String DECELERATE>
<android.support.constraint.motion.utils.Easing: java.lang.String LINEAR>
<android.support.constraint.motion.utils.Easing: java.lang.String DECELERATE_NAME>
<android.support.constraint.motion.utils.Easing: java.lang.String ACCELERATE_NAME>
<android.support.constraint.motion.utils.Easing: java.lang.String STANDARD_NAME>
<android.support.constraint.motion.utils.Easing: java.lang.String LINEAR_NAME>
<android.support.constraint.motion.utils.Easing: java.lang.String[] NAMED_EASING>
    public void <init>()
    {
        android.support.constraint.motion.utils.Easing r0;

        r0 := @this: android.support.constraint.motion.utils.Easing;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.constraint.motion.utils.Easing: java.lang.String str> = "identity";

        return;
    }

    public static android.support.constraint.motion.utils.Easing getInterpolator(java.lang.String)
    {
        java.lang.String r0, r1, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;
        android.support.constraint.motion.utils.Easing$CubicEasing $r2, $r3, $r4, $r5, $r13;
        java.lang.StringBuilder $r6, $r7, $r10;
        java.lang.String[] $r8;
        android.support.constraint.motion.utils.Easing $r12;
        byte b2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("cubic");

        if $z0 == 0 goto label02;

        $r13 = new android.support.constraint.motion.utils.Easing$CubicEasing;

        specialinvoke $r13.<android.support.constraint.motion.utils.Easing$CubicEasing: void <init>(java.lang.String)>(r0);

        return $r13;

     label02:
        r1 = r0;

        b2 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1354466595: goto label04;
            case -1263948740: goto label05;
            case -1102672091: goto label06;
            case 1312628413: goto label03;
            default: goto label07;
        };

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("standard");

        if $z1 == 0 goto label07;

        b2 = 0;

        goto label07;

     label04:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("accelerate");

        if $z4 == 0 goto label07;

        b2 = 1;

        goto label07;

     label05:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("decelerate");

        if $z3 == 0 goto label07;

        b2 = 2;

        goto label07;

     label06:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("linear");

        if $z2 == 0 goto label07;

        b2 = 3;

     label07:
        tableswitch(b2)
        {
            case 0: goto label08;
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            default: goto label12;
        };

     label08:
        $r5 = new android.support.constraint.motion.utils.Easing$CubicEasing;

        specialinvoke $r5.<android.support.constraint.motion.utils.Easing$CubicEasing: void <init>(java.lang.String)>("cubic(0.4, 0.0, 0.2, 1)");

        return $r5;

     label09:
        $r4 = new android.support.constraint.motion.utils.Easing$CubicEasing;

        specialinvoke $r4.<android.support.constraint.motion.utils.Easing$CubicEasing: void <init>(java.lang.String)>("cubic(0.4, 0.05, 0.8, 0.7)");

        return $r4;

     label10:
        $r3 = new android.support.constraint.motion.utils.Easing$CubicEasing;

        specialinvoke $r3.<android.support.constraint.motion.utils.Easing$CubicEasing: void <init>(java.lang.String)>("cubic(0.0, 0.0, 0.2, 0.95)");

        return $r3;

     label11:
        $r2 = new android.support.constraint.motion.utils.Easing$CubicEasing;

        specialinvoke $r2.<android.support.constraint.motion.utils.Easing$CubicEasing: void <init>(java.lang.String)>("cubic(1, 1, 0, 0)");

        return $r2;

     label12:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transitionEasing syntax error syntax:transitionEasing=\"cubic(1.0,0.5,0.0,0.6)\" or ");

        $r8 = <android.support.constraint.motion.utils.Easing: java.lang.String[] NAMED_EASING>;

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r8);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ConstraintSet", $r11);

        $r12 = <android.support.constraint.motion.utils.Easing: android.support.constraint.motion.utils.Easing sDefault>;

        return $r12;
    }

    public double get(double)
    {
        android.support.constraint.motion.utils.Easing r0;
        double d0;

        r0 := @this: android.support.constraint.motion.utils.Easing;

        d0 := @parameter0: double;

        return d0;
    }

    public java.lang.String toString()
    {
        android.support.constraint.motion.utils.Easing r0;
        java.lang.String $r1;

        r0 := @this: android.support.constraint.motion.utils.Easing;

        $r1 = r0.<android.support.constraint.motion.utils.Easing: java.lang.String str>;

        return $r1;
    }

    public double getDiff(double)
    {
        android.support.constraint.motion.utils.Easing r0;
        double d0;

        r0 := @this: android.support.constraint.motion.utils.Easing;

        d0 := @parameter0: double;

        return 1.0;
    }

    static void <clinit>()
    {
        android.support.constraint.motion.utils.Easing $r0;
        java.lang.String[] $r1;

        $r0 = new android.support.constraint.motion.utils.Easing;

        specialinvoke $r0.<android.support.constraint.motion.utils.Easing: void <init>()>();

        <android.support.constraint.motion.utils.Easing: android.support.constraint.motion.utils.Easing sDefault> = $r0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "standard";

        $r1[1] = "accelerate";

        $r1[2] = "decelerate";

        $r1[3] = "linear";

        <android.support.constraint.motion.utils.Easing: java.lang.String[] NAMED_EASING> = $r1;

        return;
    }

android.support.constraint.motion.utils.Easing$CubicEasing
<android.support.constraint.motion.utils.Easing$CubicEasing: double error>
<android.support.constraint.motion.utils.Easing$CubicEasing: double d_error>
<android.support.constraint.motion.utils.Easing$CubicEasing: double x1>
<android.support.constraint.motion.utils.Easing$CubicEasing: double y1>
<android.support.constraint.motion.utils.Easing$CubicEasing: double x2>
<android.support.constraint.motion.utils.Easing$CubicEasing: double y2>
    void <init>(java.lang.String)
    {
        android.support.constraint.motion.utils.Easing$CubicEasing r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.support.constraint.motion.utils.Easing$CubicEasing;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.support.constraint.motion.utils.Easing: void <init>()>();

        r0.<android.support.constraint.motion.utils.Easing$CubicEasing: java.lang.String str> = r1;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(40);

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(44, i0);

        $i5 = i0 + 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i5, i1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

        r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x1> = $d0;

        $i6 = i1 + 1;

        i2 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(44, $i6);

        $i7 = i1 + 1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i7, i2);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

        r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y1> = $d1;

        $i8 = i2 + 1;

        i3 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(44, $i8);

        $i9 = i2 + 1;

        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i9, i3);

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r7);

        r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x2> = $d2;

        $i10 = i3 + 1;

        i4 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(41, $i10);

        $i11 = i3 + 1;

        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i11, i4);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $d3 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r9);

        r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y2> = $d3;

        return;
    }

    public void <init>(double, double, double, double)
    {
        android.support.constraint.motion.utils.Easing$CubicEasing r0;
        double d0, d1, d2, d3;

        r0 := @this: android.support.constraint.motion.utils.Easing$CubicEasing;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<android.support.constraint.motion.utils.Easing: void <init>()>();

        virtualinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: void setup(double,double,double,double)>(d0, d1, d2, d3);

        return;
    }

    void setup(double, double, double, double)
    {
        android.support.constraint.motion.utils.Easing$CubicEasing r0;
        double d0, d1, d2, d3;

        r0 := @this: android.support.constraint.motion.utils.Easing$CubicEasing;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x1> = d0;

        r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y1> = d1;

        r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x2> = d2;

        r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y2> = d3;

        return;
    }

    private double getX(double)
    {
        android.support.constraint.motion.utils.Easing$CubicEasing r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;

        r0 := @this: android.support.constraint.motion.utils.Easing$CubicEasing;

        d0 := @parameter0: double;

        d1 = 1.0 - d0;

        $d5 = 3.0 * d1;

        $d6 = $d5 * d1;

        d2 = $d6 * d0;

        $d7 = 3.0 * d1;

        $d8 = $d7 * d0;

        d3 = $d8 * d0;

        $d9 = d0 * d0;

        d4 = $d9 * d0;

        $d10 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x1>;

        $d13 = $d10 * d2;

        $d11 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x2>;

        $d12 = $d11 * d3;

        $d14 = $d13 + $d12;

        $d15 = $d14 + d4;

        return $d15;
    }

    private double getY(double)
    {
        android.support.constraint.motion.utils.Easing$CubicEasing r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;

        r0 := @this: android.support.constraint.motion.utils.Easing$CubicEasing;

        d0 := @parameter0: double;

        d1 = 1.0 - d0;

        $d5 = 3.0 * d1;

        $d6 = $d5 * d1;

        d2 = $d6 * d0;

        $d7 = 3.0 * d1;

        $d8 = $d7 * d0;

        d3 = $d8 * d0;

        $d9 = d0 * d0;

        d4 = $d9 * d0;

        $d10 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y1>;

        $d13 = $d10 * d2;

        $d11 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y2>;

        $d12 = $d11 * d3;

        $d14 = $d13 + $d12;

        $d15 = $d14 + d4;

        return $d15;
    }

    private double getDiffX(double)
    {
        android.support.constraint.motion.utils.Easing$CubicEasing r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;

        r0 := @this: android.support.constraint.motion.utils.Easing$CubicEasing;

        d0 := @parameter0: double;

        d1 = 1.0 - d0;

        $d2 = 3.0 * d1;

        $d4 = $d2 * d1;

        $d3 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x1>;

        $d11 = $d4 * $d3;

        $d5 = 6.0 * d1;

        $d9 = $d5 * d0;

        $d7 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x2>;

        $d6 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x1>;

        $d8 = $d7 - $d6;

        $d10 = $d9 * $d8;

        $d17 = $d11 + $d10;

        $d12 = 3.0 * d0;

        $d15 = $d12 * d0;

        $d13 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double x2>;

        $d14 = 1.0 - $d13;

        $d16 = $d15 * $d14;

        $d18 = $d17 + $d16;

        return $d18;
    }

    private double getDiffY(double)
    {
        android.support.constraint.motion.utils.Easing$CubicEasing r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;

        r0 := @this: android.support.constraint.motion.utils.Easing$CubicEasing;

        d0 := @parameter0: double;

        d1 = 1.0 - d0;

        $d2 = 3.0 * d1;

        $d4 = $d2 * d1;

        $d3 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y1>;

        $d11 = $d4 * $d3;

        $d5 = 6.0 * d1;

        $d9 = $d5 * d0;

        $d7 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y2>;

        $d6 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y1>;

        $d8 = $d7 - $d6;

        $d10 = $d9 * $d8;

        $d17 = $d11 + $d10;

        $d12 = 3.0 * d0;

        $d15 = $d12 * d0;

        $d13 = r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double y2>;

        $d14 = 1.0 - $d13;

        $d16 = $d15 * $d14;

        $d18 = $d17 + $d16;

        return $d18;
    }

    public double getDiff(double)
    {
        android.support.constraint.motion.utils.Easing$CubicEasing r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14, d15;
        byte $b0, $b1;

        r0 := @this: android.support.constraint.motion.utils.Easing$CubicEasing;

        d0 := @parameter0: double;

        d12 = 0.5;

        d13 = 0.5;

     label1:
        $d4 = <android.support.constraint.motion.utils.Easing$CubicEasing: double d_error>;

        $b0 = d13 cmpl $d4;

        if $b0 <= 0 goto label4;

        d14 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getX(double)>(d12);

        d13 = d13 * 0.5;

        $b1 = d14 cmpg d0;

        if $b1 >= 0 goto label2;

        d12 = d12 + d13;

        goto label3;

     label2:
        d12 = d12 - d13;

     label3:
        goto label1;

     label4:
        $d5 = d12 - d13;

        d15 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getX(double)>($d5);

        $d6 = d12 + d13;

        d1 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getX(double)>($d6);

        $d7 = d12 - d13;

        d2 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getY(double)>($d7);

        $d8 = d12 + d13;

        d3 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getY(double)>($d8);

        $d10 = d3 - d2;

        $d9 = d1 - d15;

        $d11 = $d10 / $d9;

        return $d11;
    }

    public double get(double)
    {
        android.support.constraint.motion.utils.Easing$CubicEasing r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16, d17, d18;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: android.support.constraint.motion.utils.Easing$CubicEasing;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        return 0.0;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 < 0 goto label2;

        return 1.0;

     label2:
        d15 = 0.5;

        d16 = 0.5;

     label3:
        $d4 = <android.support.constraint.motion.utils.Easing$CubicEasing: double error>;

        $b2 = d16 cmpl $d4;

        if $b2 <= 0 goto label6;

        d17 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getX(double)>(d15);

        d16 = d16 * 0.5;

        $b3 = d17 cmpg d0;

        if $b3 >= 0 goto label4;

        d15 = d15 + d16;

        goto label5;

     label4:
        d15 = d15 - d16;

     label5:
        goto label3;

     label6:
        $d5 = d15 - d16;

        d18 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getX(double)>($d5);

        $d6 = d15 + d16;

        d1 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getX(double)>($d6);

        $d7 = d15 - d16;

        d2 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getY(double)>($d7);

        $d8 = d15 + d16;

        d3 = specialinvoke r0.<android.support.constraint.motion.utils.Easing$CubicEasing: double getY(double)>($d8);

        $d10 = d3 - d2;

        $d9 = d0 - d18;

        $d12 = $d10 * $d9;

        $d11 = d1 - d18;

        $d13 = $d12 / $d11;

        $d14 = $d13 + d2;

        return $d14;
    }

    static void <clinit>()
    {
        <android.support.constraint.motion.utils.Easing$CubicEasing: double error> = 0.01;

        <android.support.constraint.motion.utils.Easing$CubicEasing: double d_error> = 1.0E-4;

        return;
    }

