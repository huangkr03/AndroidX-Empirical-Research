android.support.test.espresso.assertion.ViewAssertions
<android.support.test.espresso.assertion.ViewAssertions: java.lang.String TAG>
    private void <init>()
    {
        android.support.test.espresso.assertion.ViewAssertions r0;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.support.test.espresso.ViewAssertion doesNotExist()
    {
        android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion $r0;

        $r0 = new android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion;

        specialinvoke $r0.<android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion: void <init>(android.support.test.espresso.assertion.ViewAssertions$1)>(null);

        return $r0;
    }

    public static android.support.test.espresso.ViewAssertion matches(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3;
        android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion $r1;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke $r1.<android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion: void <init>(org.hamcrest.Matcher,android.support.test.espresso.assertion.ViewAssertions$1)>($r3, null);

        return $r1;
    }

    public static android.support.test.espresso.ViewAssertion selectedDescendantsMatch(org.hamcrest.Matcher, org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, r1;
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r1 := @parameter1: org.hamcrest.Matcher;

        $r2 = new android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion;

        specialinvoke $r2.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher,android.support.test.espresso.assertion.ViewAssertions$1)>(r0, r1, null);

        return $r2;
    }

    static java.lang.String access$300()
    {
        java.lang.String $r0;

        $r0 = <android.support.test.espresso.assertion.ViewAssertions: java.lang.String TAG>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroid/support/test/espresso/assertion/ViewAssertions;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.support.test.espresso.assertion.ViewAssertions: java.lang.String TAG> = $r1;

        return;
    }

android.support.test.espresso.assertion.ViewAssertions$1
android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion
    private void <init>()
    {
        android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion r0;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void check(android.view.View, android.support.test.espresso.NoMatchingViewException)
    {
        android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion r0;
        android.view.View r1;
        android.support.test.espresso.NoMatchingViewException r2;
        java.lang.String $r3, $r4, $r5, $r9;
        int $i0;
        java.lang.Boolean $r6, $r7;
        org.hamcrest.Matcher $r8;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.support.test.espresso.NoMatchingViewException;

        if r1 == null goto label3;

        $r3 = "View is present in the hierarchy: ";

        $r4 = staticinvoke <android.support.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>(r1);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r9 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

        goto label2;

     label1:
        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(java.lang.String)>("View is present in the hierarchy: ");

     label2:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r7);

        staticinvoke <android.support.test.espresso.matcher.ViewMatchers: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>($r9, $r6, $r8);

     label3:
        return;
    }

    void <init>(android.support.test.espresso.assertion.ViewAssertions$1)
    {
        android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion r0;
        android.support.test.espresso.assertion.ViewAssertions$1 r1;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion;

        r1 := @parameter0: android.support.test.espresso.assertion.ViewAssertions$1;

        specialinvoke r0.<android.support.test.espresso.assertion.ViewAssertions$DoesNotExistViewAssertion: void <init>()>();

        return;
    }

android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion
<android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion: org.hamcrest.Matcher viewMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion: org.hamcrest.Matcher viewMatcher> = r1;

        return;
    }

    public void check(android.view.View, android.support.test.espresso.NoMatchingViewException)
    {
        android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion r0;
        android.view.View r1;
        android.support.test.espresso.NoMatchingViewException r2;
        org.hamcrest.StringDescription r3, r16;
        org.hamcrest.Matcher $r6, $r9;
        java.lang.String $r8, $r11, $r12, $r14, $r15;
        java.lang.Object[] $r10;
        java.lang.Throwable r17;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.support.test.espresso.NoMatchingViewException;

        r16 = new org.hamcrest.StringDescription;

        specialinvoke r16.<org.hamcrest.StringDescription: void <init>()>();

        r3 = r16;

        virtualinvoke r3.<org.hamcrest.StringDescription: org.hamcrest.Description appendText(java.lang.String)>("\'");

        $r6 = r0.<android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion: org.hamcrest.Matcher viewMatcher>;

        interfaceinvoke $r6.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r3);

        if r2 == null goto label1;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke r2.<android.support.test.espresso.NoMatchingViewException: java.lang.String getViewMatcherDescription()>();

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\' check could not be performed because view \'%s\' was not found.\n", $r10);

        virtualinvoke r3.<org.hamcrest.StringDescription: org.hamcrest.Description appendText(java.lang.String)>($r12);

        $r14 = staticinvoke <android.support.test.espresso.assertion.ViewAssertions: java.lang.String access$300()>();

        $r15 = virtualinvoke r3.<org.hamcrest.StringDescription: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r14, $r15);

        r17 = (java.lang.Throwable) r2;

        throw r17;

     label1:
        virtualinvoke r3.<org.hamcrest.StringDescription: org.hamcrest.Description appendText(java.lang.String)>("\' doesn\'t match the selected view.");

        $r8 = virtualinvoke r3.<org.hamcrest.StringDescription: java.lang.String toString()>();

        $r9 = r0.<android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion: org.hamcrest.Matcher viewMatcher>;

        staticinvoke <android.support.test.espresso.matcher.ViewMatchers: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>($r8, r1, $r9);

        return;
    }

    public java.lang.String toString()
    {
        android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion r0;
        java.lang.Object[] $r1;
        org.hamcrest.Matcher $r2;
        java.lang.String $r3;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion: org.hamcrest.Matcher viewMatcher>;

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("MatchesViewAssertion{viewMatcher=%s}", $r1);

        return $r3;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.assertion.ViewAssertions$1)
    {
        android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.assertion.ViewAssertions$1 r2;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.assertion.ViewAssertions$1;

        specialinvoke r0.<android.support.test.espresso.assertion.ViewAssertions$MatchesViewAssertion: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1
<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion this$0>
    void <init>(android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion)
    {
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1 r0;
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion r1;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1;

        r1 := @parameter0: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion;

        r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(android.view.View)
    {
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1 r0;
        android.view.View r1;
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion $r2;
        org.hamcrest.Matcher $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion this$0>;

        $r3 = staticinvoke <android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher access$400(android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion)>($r2);

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1 r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1: boolean apply(android.view.View)>($r2);

        return $z0;
    }

android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion
<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher selector>
<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher matcher>
    private void <init>(org.hamcrest.Matcher, org.hamcrest.Matcher)
    {
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion r0;
        org.hamcrest.Matcher r1, r2;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher selector> = r1;

        r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher matcher> = r2;

        return;
    }

    public void check(android.view.View, android.support.test.espresso.NoMatchingViewException)
    {
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion r0;
        android.view.View r1, r17;
        android.support.test.espresso.NoMatchingViewException r2;
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1 r3, r19;
        java.util.Iterator r4;
        java.util.ArrayList r5, r20;
        java.lang.Iterable $r8, $r9;
        boolean $z0, $z1;
        int $i0;
        java.lang.Object[] $r11;
        org.hamcrest.Matcher $r12, $r16;
        java.lang.String $r13, r18;
        java.lang.Object $r15;
        junit.framework.AssertionFailedError r21;
        java.util.List r22, r23, r24;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.support.test.espresso.NoMatchingViewException;

        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r19 = new android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1;

        specialinvoke r19.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion$1: void <init>(android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion)>(r0);

        r3 = r19;

        $r8 = staticinvoke <android.support.test.espresso.util.TreeIterables: java.lang.Iterable breadthFirstViewTraversal(android.view.View)>(r1);

        $r9 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,android.support.test.espresso.core.internal.deps.guava.base.Predicate)>($r8, r3);

        r4 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

        r20 = new java.util.ArrayList;

        specialinvoke r20.<java.util.ArrayList: void <init>()>();

        r5 = r20;

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r17 = (android.view.View) $r15;

        $r16 = r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher matcher>;

        $z1 = interfaceinvoke $r16.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r17);

        if $z1 != 0 goto label2;

        r22 = (java.util.List) r5;

        interfaceinvoke r22.<java.util.List: boolean add(java.lang.Object)>(r17);

     label2:
        goto label1;

     label3:
        r23 = (java.util.List) r5;

        $i0 = interfaceinvoke r23.<java.util.List: int size()>();

        if $i0 <= 0 goto label4;

        $r11 = newarray (java.lang.Object)[1];

        $r12 = r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher matcher>;

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("At least one view did not match the required matcher: %s", $r11);

        r24 = (java.util.List) r5;

        r18 = staticinvoke <android.support.test.espresso.util.HumanReadables: java.lang.String getViewHierarchyErrorMessage(android.view.View,java.util.List,java.lang.String,java.lang.String)>(r1, r24, $r13, "****DOES NOT MATCH****");

        r21 = new junit.framework.AssertionFailedError;

        specialinvoke r21.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(r18);

        throw r21;

     label4:
        return;
    }

    public java.lang.String toString()
    {
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion r0;
        java.lang.Object[] $r1;
        org.hamcrest.Matcher $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher selector>;

        $r1[0] = $r2;

        $r3 = r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher matcher>;

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("SelectedDescendantsMatchViewAssertion{selector=%s, matcher=%s}", $r1);

        return $r4;
    }

    void <init>(org.hamcrest.Matcher, org.hamcrest.Matcher, android.support.test.espresso.assertion.ViewAssertions$1)
    {
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion r0;
        org.hamcrest.Matcher r1, r2;
        android.support.test.espresso.assertion.ViewAssertions$1 r3;

        r0 := @this: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.hamcrest.Matcher;

        r3 := @parameter2: android.support.test.espresso.assertion.ViewAssertions$1;

        specialinvoke r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: void <init>(org.hamcrest.Matcher,org.hamcrest.Matcher)>(r1, r2);

        return;
    }

    static org.hamcrest.Matcher access$400(android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion)
    {
        android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion r0;
        org.hamcrest.Matcher $r1;

        r0 := @parameter0: android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion;

        $r1 = r0.<android.support.test.espresso.assertion.ViewAssertions$SelectedDescendantsMatchViewAssertion: org.hamcrest.Matcher selector>;

        return $r1;
    }

