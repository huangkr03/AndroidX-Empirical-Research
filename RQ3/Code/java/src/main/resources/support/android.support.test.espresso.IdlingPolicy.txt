android.support.test.espresso.IdlingPolicy
<android.support.test.espresso.IdlingPolicy: java.lang.String TAG>
<android.support.test.espresso.IdlingPolicy: long idleTimeout>
<android.support.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit unit>
<android.support.test.espresso.IdlingPolicy: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler>
    public long getIdleTimeout()
    {
        android.support.test.espresso.IdlingPolicy r0;
        long $l0;

        r0 := @this: android.support.test.espresso.IdlingPolicy;

        $l0 = r0.<android.support.test.espresso.IdlingPolicy: long idleTimeout>;

        return $l0;
    }

    public java.util.concurrent.TimeUnit getIdleTimeoutUnit()
    {
        android.support.test.espresso.IdlingPolicy r0;
        java.util.concurrent.TimeUnit $r1;

        r0 := @this: android.support.test.espresso.IdlingPolicy;

        $r1 = r0.<android.support.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit unit>;

        return $r1;
    }

    public void handleTimeout(java.util.List, java.lang.String)
    {
        android.support.test.espresso.IdlingPolicy r0;
        java.util.List r1;
        java.lang.String r2, $r5, $r9, $r13, $r17, r18, r19;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r3;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        java.lang.StringBuilder $r7, $r8, $r15, $r16, r21, r22;
        android.support.test.espresso.AppNotIdleException $r11;
        android.support.test.espresso.IdlingResourceTimeoutException r20;
        java.lang.IllegalStateException r23;
        java.lang.Throwable r24, r25;

        r0 := @this: android.support.test.espresso.IdlingPolicy;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        $r4 = <android.support.test.espresso.IdlingPolicy$1: int[] $SwitchMap$android$support$test$espresso$IdlingPolicy$ResponseAction>;

        $r3 = r0.<android.support.test.espresso.IdlingPolicy: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler>;

        $i0 = virtualinvoke $r3.<android.support.test.espresso.IdlingPolicy$ResponseAction: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r11 = staticinvoke <android.support.test.espresso.AppNotIdleException: android.support.test.espresso.AppNotIdleException create(java.util.List,java.lang.String)>(r1, r2);

        r24 = (java.lang.Throwable) $r11;

        throw r24;

     label2:
        r20 = new android.support.test.espresso.IdlingResourceTimeoutException;

        specialinvoke r20.<android.support.test.espresso.IdlingResourceTimeoutException: void <init>(java.util.List)>(r1);

        r25 = (java.lang.Throwable) r20;

        throw r25;

     label3:
        r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r18);

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i3 = 30 + $i2;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r7 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("These resources are not idle: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("IdlingPolicy", $r9);

        goto label5;

     label4:
        r23 = new java.lang.IllegalStateException;

        r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r19);

        $i5 = virtualinvoke $r13.<java.lang.String: int length()>();

        $i6 = 24 + $i5;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>(int)>($i6);

        $r15 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("should never reach here.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw r23;

     label5:
        return;
    }

    android.support.test.espresso.IdlingPolicy$Builder toBuilder()
    {
        android.support.test.espresso.IdlingPolicy r0;
        android.support.test.espresso.IdlingPolicy$Builder $r1;

        r0 := @this: android.support.test.espresso.IdlingPolicy;

        $r1 = new android.support.test.espresso.IdlingPolicy$Builder;

        specialinvoke $r1.<android.support.test.espresso.IdlingPolicy$Builder: void <init>(android.support.test.espresso.IdlingPolicy,android.support.test.espresso.IdlingPolicy$1)>(r0, null);

        return $r1;
    }

    private void <init>(android.support.test.espresso.IdlingPolicy$Builder)
    {
        android.support.test.espresso.IdlingPolicy r0;
        android.support.test.espresso.IdlingPolicy$Builder r1;
        long $l0, $l2;
        byte $b1;
        java.util.concurrent.TimeUnit $r2, $r4;
        java.lang.Object $r3, $r6;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r5, $r7;
        boolean $z0;

        r0 := @this: android.support.test.espresso.IdlingPolicy;

        r1 := @parameter0: android.support.test.espresso.IdlingPolicy$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <android.support.test.espresso.IdlingPolicy$Builder: long access$100(android.support.test.espresso.IdlingPolicy$Builder)>(r1);

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        $l2 = staticinvoke <android.support.test.espresso.IdlingPolicy$Builder: long access$100(android.support.test.espresso.IdlingPolicy$Builder)>(r1);

        r0.<android.support.test.espresso.IdlingPolicy: long idleTimeout> = $l2;

        $r2 = staticinvoke <android.support.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit access$200(android.support.test.espresso.IdlingPolicy$Builder)>(r1);

        $r3 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (java.util.concurrent.TimeUnit) $r3;

        r0.<android.support.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit unit> = $r4;

        $r5 = staticinvoke <android.support.test.espresso.IdlingPolicy$Builder: android.support.test.espresso.IdlingPolicy$ResponseAction access$300(android.support.test.espresso.IdlingPolicy$Builder)>(r1);

        $r6 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r7 = (android.support.test.espresso.IdlingPolicy$ResponseAction) $r6;

        r0.<android.support.test.espresso.IdlingPolicy: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r7;

        return;
    }

    void <init>(android.support.test.espresso.IdlingPolicy$Builder, android.support.test.espresso.IdlingPolicy$1)
    {
        android.support.test.espresso.IdlingPolicy r0;
        android.support.test.espresso.IdlingPolicy$Builder r1;
        android.support.test.espresso.IdlingPolicy$1 r2;

        r0 := @this: android.support.test.espresso.IdlingPolicy;

        r1 := @parameter0: android.support.test.espresso.IdlingPolicy$Builder;

        r2 := @parameter1: android.support.test.espresso.IdlingPolicy$1;

        specialinvoke r0.<android.support.test.espresso.IdlingPolicy: void <init>(android.support.test.espresso.IdlingPolicy$Builder)>(r1);

        return;
    }

    static long access$500(android.support.test.espresso.IdlingPolicy)
    {
        android.support.test.espresso.IdlingPolicy r0;
        long $l0;

        r0 := @parameter0: android.support.test.espresso.IdlingPolicy;

        $l0 = r0.<android.support.test.espresso.IdlingPolicy: long idleTimeout>;

        return $l0;
    }

    static java.util.concurrent.TimeUnit access$600(android.support.test.espresso.IdlingPolicy)
    {
        android.support.test.espresso.IdlingPolicy r0;
        java.util.concurrent.TimeUnit $r1;

        r0 := @parameter0: android.support.test.espresso.IdlingPolicy;

        $r1 = r0.<android.support.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit unit>;

        return $r1;
    }

    static android.support.test.espresso.IdlingPolicy$ResponseAction access$700(android.support.test.espresso.IdlingPolicy)
    {
        android.support.test.espresso.IdlingPolicy r0;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @parameter0: android.support.test.espresso.IdlingPolicy;

        $r1 = r0.<android.support.test.espresso.IdlingPolicy: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler>;

        return $r1;
    }

android.support.test.espresso.IdlingPolicy$1
<android.support.test.espresso.IdlingPolicy$1: int[] $SwitchMap$android$support$test$espresso$IdlingPolicy$ResponseAction>
    static void <clinit>()
    {
        android.support.test.espresso.IdlingPolicy$ResponseAction[] $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1, $r3, $r5, $r7;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r2, $r4, $r6;
        java.lang.Throwable $r8, $r9, $r10, r11, r12, r13;

        $r0 = staticinvoke <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <android.support.test.espresso.IdlingPolicy$1: int[] $SwitchMap$android$support$test$espresso$IdlingPolicy$ResponseAction> = $r1;

     label01:
        $r3 = <android.support.test.espresso.IdlingPolicy$1: int[] $SwitchMap$android$support$test$espresso$IdlingPolicy$ResponseAction>;

        $r2 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE>;

        $i1 = virtualinvoke $r2.<android.support.test.espresso.IdlingPolicy$ResponseAction: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        r11 = $r10;

     label04:
        $r5 = <android.support.test.espresso.IdlingPolicy$1: int[] $SwitchMap$android$support$test$espresso$IdlingPolicy$ResponseAction>;

        $r4 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT>;

        $i2 = virtualinvoke $r4.<android.support.test.espresso.IdlingPolicy$ResponseAction: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

        r12 = $r9;

     label07:
        $r7 = <android.support.test.espresso.IdlingPolicy$1: int[] $SwitchMap$android$support$test$espresso$IdlingPolicy$ResponseAction>;

        $r6 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR>;

        $i3 = virtualinvoke $r6.<android.support.test.espresso.IdlingPolicy$ResponseAction: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        r13 = $r8;

     label10:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
    }

android.support.test.espresso.IdlingPolicy$Builder
<android.support.test.espresso.IdlingPolicy$Builder: long idleTimeout>
<android.support.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit>
<android.support.test.espresso.IdlingPolicy$Builder: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler>
    public void <init>()
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;

        r0 := @this: android.support.test.espresso.IdlingPolicy$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.IdlingPolicy$Builder: long idleTimeout> = -1L;

        r0.<android.support.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit> = null;

        r0.<android.support.test.espresso.IdlingPolicy$Builder: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler> = null;

        return;
    }

    public android.support.test.espresso.IdlingPolicy build()
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        android.support.test.espresso.IdlingPolicy $r1;

        r0 := @this: android.support.test.espresso.IdlingPolicy$Builder;

        $r1 = new android.support.test.espresso.IdlingPolicy;

        specialinvoke $r1.<android.support.test.espresso.IdlingPolicy: void <init>(android.support.test.espresso.IdlingPolicy$Builder,android.support.test.espresso.IdlingPolicy$1)>(r0, null);

        return $r1;
    }

    private void <init>(android.support.test.espresso.IdlingPolicy)
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        android.support.test.espresso.IdlingPolicy r1;
        long $l0;
        java.util.concurrent.TimeUnit $r2;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r3;

        r0 := @this: android.support.test.espresso.IdlingPolicy$Builder;

        r1 := @parameter0: android.support.test.espresso.IdlingPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.IdlingPolicy$Builder: long idleTimeout> = -1L;

        r0.<android.support.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit> = null;

        r0.<android.support.test.espresso.IdlingPolicy$Builder: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler> = null;

        $l0 = staticinvoke <android.support.test.espresso.IdlingPolicy: long access$500(android.support.test.espresso.IdlingPolicy)>(r1);

        r0.<android.support.test.espresso.IdlingPolicy$Builder: long idleTimeout> = $l0;

        $r2 = staticinvoke <android.support.test.espresso.IdlingPolicy: java.util.concurrent.TimeUnit access$600(android.support.test.espresso.IdlingPolicy)>(r1);

        r0.<android.support.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit> = $r2;

        $r3 = staticinvoke <android.support.test.espresso.IdlingPolicy: android.support.test.espresso.IdlingPolicy$ResponseAction access$700(android.support.test.espresso.IdlingPolicy)>(r1);

        r0.<android.support.test.espresso.IdlingPolicy$Builder: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r3;

        return;
    }

    public android.support.test.espresso.IdlingPolicy$Builder withIdlingTimeout(long)
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        long l0;

        r0 := @this: android.support.test.espresso.IdlingPolicy$Builder;

        l0 := @parameter0: long;

        r0.<android.support.test.espresso.IdlingPolicy$Builder: long idleTimeout> = l0;

        return r0;
    }

    public android.support.test.espresso.IdlingPolicy$Builder withIdlingTimeoutUnit(java.util.concurrent.TimeUnit)
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        java.util.concurrent.TimeUnit r1;

        r0 := @this: android.support.test.espresso.IdlingPolicy$Builder;

        r1 := @parameter0: java.util.concurrent.TimeUnit;

        r0.<android.support.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit> = r1;

        return r0;
    }

    public android.support.test.espresso.IdlingPolicy$Builder throwAppNotIdleException()
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @this: android.support.test.espresso.IdlingPolicy$Builder;

        $r1 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE>;

        r0.<android.support.test.espresso.IdlingPolicy$Builder: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r1;

        return r0;
    }

    public android.support.test.espresso.IdlingPolicy$Builder throwIdlingResourceTimeoutException()
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @this: android.support.test.espresso.IdlingPolicy$Builder;

        $r1 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT>;

        r0.<android.support.test.espresso.IdlingPolicy$Builder: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r1;

        return r0;
    }

    public android.support.test.espresso.IdlingPolicy$Builder logWarning()
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @this: android.support.test.espresso.IdlingPolicy$Builder;

        $r1 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR>;

        r0.<android.support.test.espresso.IdlingPolicy$Builder: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler> = $r1;

        return r0;
    }

    void <init>(android.support.test.espresso.IdlingPolicy, android.support.test.espresso.IdlingPolicy$1)
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        android.support.test.espresso.IdlingPolicy r1;
        android.support.test.espresso.IdlingPolicy$1 r2;

        r0 := @this: android.support.test.espresso.IdlingPolicy$Builder;

        r1 := @parameter0: android.support.test.espresso.IdlingPolicy;

        r2 := @parameter1: android.support.test.espresso.IdlingPolicy$1;

        specialinvoke r0.<android.support.test.espresso.IdlingPolicy$Builder: void <init>(android.support.test.espresso.IdlingPolicy)>(r1);

        return;
    }

    static long access$100(android.support.test.espresso.IdlingPolicy$Builder)
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        long $l0;

        r0 := @parameter0: android.support.test.espresso.IdlingPolicy$Builder;

        $l0 = r0.<android.support.test.espresso.IdlingPolicy$Builder: long idleTimeout>;

        return $l0;
    }

    static java.util.concurrent.TimeUnit access$200(android.support.test.espresso.IdlingPolicy$Builder)
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        java.util.concurrent.TimeUnit $r1;

        r0 := @parameter0: android.support.test.espresso.IdlingPolicy$Builder;

        $r1 = r0.<android.support.test.espresso.IdlingPolicy$Builder: java.util.concurrent.TimeUnit unit>;

        return $r1;
    }

    static android.support.test.espresso.IdlingPolicy$ResponseAction access$300(android.support.test.espresso.IdlingPolicy$Builder)
    {
        android.support.test.espresso.IdlingPolicy$Builder r0;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r1;

        r0 := @parameter0: android.support.test.espresso.IdlingPolicy$Builder;

        $r1 = r0.<android.support.test.espresso.IdlingPolicy$Builder: android.support.test.espresso.IdlingPolicy$ResponseAction errorHandler>;

        return $r1;
    }

android.support.test.espresso.IdlingPolicy$ResponseAction
<android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE>
<android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT>
<android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR>
<android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction[] $VALUES>
    public static android.support.test.espresso.IdlingPolicy$ResponseAction[] values()
    {
        android.support.test.espresso.IdlingPolicy$ResponseAction[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (android.support.test.espresso.IdlingPolicy$ResponseAction[]) $r1;

        return $r2;
    }

    public static android.support.test.espresso.IdlingPolicy$ResponseAction valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        android.support.test.espresso.IdlingPolicy$ResponseAction $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/support/test/espresso/IdlingPolicy$ResponseAction;", r0);

        $r2 = (android.support.test.espresso.IdlingPolicy$ResponseAction) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        android.support.test.espresso.IdlingPolicy$ResponseAction r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.support.test.espresso.IdlingPolicy$ResponseAction;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        android.support.test.espresso.IdlingPolicy$ResponseAction $r0, $r1, $r2, $r4, $r5, $r6;
        android.support.test.espresso.IdlingPolicy$ResponseAction[] $r3;

        $r0 = new android.support.test.espresso.IdlingPolicy$ResponseAction;

        specialinvoke $r0.<android.support.test.espresso.IdlingPolicy$ResponseAction: void <init>(java.lang.String,int)>("THROW_APP_NOT_IDLE", 0);

        <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE> = $r0;

        $r1 = new android.support.test.espresso.IdlingPolicy$ResponseAction;

        specialinvoke $r1.<android.support.test.espresso.IdlingPolicy$ResponseAction: void <init>(java.lang.String,int)>("THROW_IDLE_TIMEOUT", 1);

        <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT> = $r1;

        $r2 = new android.support.test.espresso.IdlingPolicy$ResponseAction;

        specialinvoke $r2.<android.support.test.espresso.IdlingPolicy$ResponseAction: void <init>(java.lang.String,int)>("LOG_ERROR", 2);

        <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR> = $r2;

        $r3 = newarray (android.support.test.espresso.IdlingPolicy$ResponseAction)[3];

        $r4 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_APP_NOT_IDLE>;

        $r3[0] = $r4;

        $r5 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction THROW_IDLE_TIMEOUT>;

        $r3[1] = $r5;

        $r6 = <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction LOG_ERROR>;

        $r3[2] = $r6;

        <android.support.test.espresso.IdlingPolicy$ResponseAction: android.support.test.espresso.IdlingPolicy$ResponseAction[] $VALUES> = $r3;

        return;
    }

