android.support.design.widget.CircularBorderDrawable
<android.support.design.widget.CircularBorderDrawable: float DRAW_STROKE_WIDTH_MULTIPLE>
<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint paint>
<android.support.design.widget.CircularBorderDrawable: android.graphics.Rect rect>
<android.support.design.widget.CircularBorderDrawable: android.graphics.RectF rectF>
<android.support.design.widget.CircularBorderDrawable: float borderWidth>
<android.support.design.widget.CircularBorderDrawable: int topOuterStrokeColor>
<android.support.design.widget.CircularBorderDrawable: int topInnerStrokeColor>
<android.support.design.widget.CircularBorderDrawable: int bottomOuterStrokeColor>
<android.support.design.widget.CircularBorderDrawable: int bottomInnerStrokeColor>
<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList borderTint>
<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>
<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader>
<android.support.design.widget.CircularBorderDrawable: float rotation>
    public void <init>()
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.Rect $r1;
        android.graphics.RectF $r2;
        android.graphics.Paint $r3, $r5;
        android.graphics.Paint$Style $r4;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Rect rect> = $r1;

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.RectF rectF> = $r2;

        r0.<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader> = 1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>(int)>(1);

        r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint paint> = $r3;

        $r5 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint paint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        return;
    }

    void setGradientColors(int, int, int, int)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        int i0, i1, i2, i3;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r0.<android.support.design.widget.CircularBorderDrawable: int topOuterStrokeColor> = i0;

        r0.<android.support.design.widget.CircularBorderDrawable: int topInnerStrokeColor> = i1;

        r0.<android.support.design.widget.CircularBorderDrawable: int bottomOuterStrokeColor> = i2;

        r0.<android.support.design.widget.CircularBorderDrawable: int bottomInnerStrokeColor> = i3;

        return;
    }

    void setBorderWidth(float)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        float f0, $f1, $f2;
        byte $b0;
        android.graphics.Paint $r1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.CircularBorderDrawable: float borderWidth>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.widget.CircularBorderDrawable: float borderWidth> = f0;

        $r1 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint paint>;

        $f2 = f0 * 1.3333F;

        virtualinvoke $r1.<android.graphics.Paint: void setStrokeWidth(float)>($f2);

        r0.<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader> = 1;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.Canvas r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        android.graphics.RectF r2;
        boolean $z0;
        android.graphics.Paint $r3, $r6, $r7;
        android.graphics.Rect $r4, $r5;
        android.graphics.Shader $r8;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $z0 = r0.<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader>;

        if $z0 == 0 goto label1;

        $r7 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint paint>;

        $r8 = specialinvoke r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Shader createGradientShader()>();

        virtualinvoke $r7.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r8);

        r0.<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader> = 0;

     label1:
        $r3 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint paint>;

        $f1 = virtualinvoke $r3.<android.graphics.Paint: float getStrokeWidth()>();

        f0 = $f1 / 2.0F;

        r2 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.RectF rectF>;

        $r4 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Rect rect>;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void copyBounds(android.graphics.Rect)>($r4);

        $r5 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Rect rect>;

        virtualinvoke r2.<android.graphics.RectF: void set(android.graphics.Rect)>($r5);

        $f2 = r2.<android.graphics.RectF: float left>;

        $f3 = $f2 + f0;

        r2.<android.graphics.RectF: float left> = $f3;

        $f4 = r2.<android.graphics.RectF: float top>;

        $f5 = $f4 + f0;

        r2.<android.graphics.RectF: float top> = $f5;

        $f6 = r2.<android.graphics.RectF: float right>;

        $f7 = $f6 - f0;

        r2.<android.graphics.RectF: float right> = $f7;

        $f8 = r2.<android.graphics.RectF: float bottom>;

        $f9 = $f8 - f0;

        r2.<android.graphics.RectF: float bottom> = $f9;

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $f10 = r0.<android.support.design.widget.CircularBorderDrawable: float rotation>;

        $f11 = virtualinvoke r2.<android.graphics.RectF: float centerX()>();

        $f12 = virtualinvoke r2.<android.graphics.RectF: float centerY()>();

        virtualinvoke r1.<android.graphics.Canvas: void rotate(float,float,float)>($f10, $f11, $f12);

        $r6 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint paint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>(r2, $r6);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        return;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.Rect r1;
        int i0;
        float $f0;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        r1 := @parameter0: android.graphics.Rect;

        $f0 = r0.<android.support.design.widget.CircularBorderDrawable: float borderWidth>;

        i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(i0, i0, i0, i0);

        return 1;
    }

    public void setAlpha(int)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        int i0;
        android.graphics.Paint $r1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint paint>;

        virtualinvoke $r1.<android.graphics.Paint: void setAlpha(int)>(i0);

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

        return;
    }

    void setBorderTint(android.content.res.ColorStateList)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.content.res.ColorStateList r1;
        int[] $r2;
        int $i0, $i1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: int[] getState()>();

        $i0 = r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>;

        $i1 = virtualinvoke r1.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r2, $i0);

        r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor> = $i1;

     label1:
        r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList borderTint> = r1;

        r0.<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader> = 1;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.ColorFilter r1;
        android.graphics.Paint $r2;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Paint paint>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(r1);

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

        return;
    }

    public int getOpacity()
    {
        android.support.design.widget.CircularBorderDrawable r0;
        float $f0;
        byte $b0, $b1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $f0 = r0.<android.support.design.widget.CircularBorderDrawable: float borderWidth>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        $b1 = -3;

        goto label2;

     label1:
        $b1 = -2;

     label2:
        return $b1;
    }

    final void setRotation(float)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.widget.CircularBorderDrawable: float rotation>;

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        r0.<android.support.design.widget.CircularBorderDrawable: float rotation> = f0;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.Rect r1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r0.<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader> = 1;

        return;
    }

    public boolean isStateful()
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.content.res.ColorStateList $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        $r1 = r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList borderTint>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList borderTint>;

        $z1 = virtualinvoke $r2.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z1 != 0 goto label2;

     label1:
        $z0 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    protected boolean onStateChange(int[])
    {
        android.support.design.widget.CircularBorderDrawable r0;
        int[] r1;
        int i0, $i1, $i2;
        android.content.res.ColorStateList $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        r1 := @parameter0: int[];

        $r2 = r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList borderTint>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.widget.CircularBorderDrawable: android.content.res.ColorStateList borderTint>;

        $i1 = r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>;

        i0 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>(r1, $i1);

        $i2 = r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>;

        if i0 == $i2 goto label1;

        r0.<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader> = 1;

        r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor> = i0;

     label1:
        $z1 = r0.<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void invalidateSelf()>();

     label2:
        $z0 = r0.<android.support.design.widget.CircularBorderDrawable: boolean invalidateShader>;

        return $z0;
    }

    private android.graphics.Shader createGradientShader()
    {
        android.support.design.widget.CircularBorderDrawable r0;
        android.graphics.Rect r1;
        float f0, $f1, $f2, $f3, $f4, $f5;
        int[] r2;
        float[] r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        android.graphics.LinearGradient $r4;
        android.graphics.Shader$TileMode $r5;

        r0 := @this: android.support.design.widget.CircularBorderDrawable;

        r1 = r0.<android.support.design.widget.CircularBorderDrawable: android.graphics.Rect rect>;

        virtualinvoke r0.<android.support.design.widget.CircularBorderDrawable: void copyBounds(android.graphics.Rect)>(r1);

        $f1 = r0.<android.support.design.widget.CircularBorderDrawable: float borderWidth>;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f2 = (float) $i0;

        f0 = $f1 / $f2;

        r2 = newarray (int)[6];

        $i2 = r0.<android.support.design.widget.CircularBorderDrawable: int topOuterStrokeColor>;

        $i1 = r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>;

        $i3 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i2, $i1);

        r2[0] = $i3;

        $i5 = r0.<android.support.design.widget.CircularBorderDrawable: int topInnerStrokeColor>;

        $i4 = r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>;

        $i6 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i5, $i4);

        r2[1] = $i6;

        $i7 = r0.<android.support.design.widget.CircularBorderDrawable: int topInnerStrokeColor>;

        $i8 = staticinvoke <android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)>($i7, 0);

        $i9 = r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>;

        $i10 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i8, $i9);

        r2[2] = $i10;

        $i11 = r0.<android.support.design.widget.CircularBorderDrawable: int bottomInnerStrokeColor>;

        $i12 = staticinvoke <android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)>($i11, 0);

        $i13 = r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>;

        $i14 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i12, $i13);

        r2[3] = $i14;

        $i16 = r0.<android.support.design.widget.CircularBorderDrawable: int bottomInnerStrokeColor>;

        $i15 = r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>;

        $i17 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i16, $i15);

        r2[4] = $i17;

        $i19 = r0.<android.support.design.widget.CircularBorderDrawable: int bottomOuterStrokeColor>;

        $i18 = r0.<android.support.design.widget.CircularBorderDrawable: int currentBorderTintColor>;

        $i20 = staticinvoke <android.support.v4.graphics.ColorUtils: int compositeColors(int,int)>($i19, $i18);

        r2[5] = $i20;

        r3 = newarray (float)[6];

        r3[0] = 0.0F;

        r3[1] = f0;

        r3[2] = 0.5F;

        r3[3] = 0.5F;

        $f3 = 1.0F - f0;

        r3[4] = $f3;

        r3[5] = 1.0F;

        $r4 = new android.graphics.LinearGradient;

        $i21 = r1.<android.graphics.Rect: int top>;

        $f5 = (float) $i21;

        $i22 = r1.<android.graphics.Rect: int bottom>;

        $f4 = (float) $i22;

        $r5 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        specialinvoke $r4.<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>(0.0F, $f5, 0.0F, $f4, r2, r3, $r5);

        return $r4;
    }

android.support.design.widget.CircularBorderDrawable$1
android.support.design.widget.CircularBorderDrawable$CircularBorderState
<android.support.design.widget.CircularBorderDrawable$CircularBorderState: android.support.design.widget.CircularBorderDrawable this$0>
    private void <init>(android.support.design.widget.CircularBorderDrawable)
    {
        android.support.design.widget.CircularBorderDrawable$CircularBorderState r0;
        android.support.design.widget.CircularBorderDrawable r1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable$CircularBorderState;

        r1 := @parameter0: android.support.design.widget.CircularBorderDrawable;

        r0.<android.support.design.widget.CircularBorderDrawable$CircularBorderState: android.support.design.widget.CircularBorderDrawable this$0> = r1;

        specialinvoke r0.<android.graphics.drawable.Drawable$ConstantState: void <init>()>();

        return;
    }

    public android.graphics.drawable.Drawable newDrawable()
    {
        android.support.design.widget.CircularBorderDrawable$CircularBorderState r0;
        android.support.design.widget.CircularBorderDrawable $r1;

        r0 := @this: android.support.design.widget.CircularBorderDrawable$CircularBorderState;

        $r1 = r0.<android.support.design.widget.CircularBorderDrawable$CircularBorderState: android.support.design.widget.CircularBorderDrawable this$0>;

        return $r1;
    }

    public int getChangingConfigurations()
    {
        android.support.design.widget.CircularBorderDrawable$CircularBorderState r0;

        r0 := @this: android.support.design.widget.CircularBorderDrawable$CircularBorderState;

        return 0;
    }

    void <init>(android.support.design.widget.CircularBorderDrawable, android.support.design.widget.CircularBorderDrawable$1)
    {
        android.support.design.widget.CircularBorderDrawable$CircularBorderState r0;
        android.support.design.widget.CircularBorderDrawable r1;
        android.support.design.widget.CircularBorderDrawable$1 r2;

        r0 := @this: android.support.design.widget.CircularBorderDrawable$CircularBorderState;

        r1 := @parameter0: android.support.design.widget.CircularBorderDrawable;

        r2 := @parameter1: android.support.design.widget.CircularBorderDrawable$1;

        specialinvoke r0.<android.support.design.widget.CircularBorderDrawable$CircularBorderState: void <init>(android.support.design.widget.CircularBorderDrawable)>(r1);

        return;
    }

