android.support.test.internal.runner.ClassPathScanner
<android.support.test.internal.runner.ClassPathScanner: java.util.Set mApkPaths>
    public transient void <init>(java.lang.String[])
    {
        android.support.test.internal.runner.ClassPathScanner r0;
        java.lang.String[] r1, r2;
        int i0, i1;
        java.lang.String r3;
        java.util.HashSet $r4;
        java.util.Set $r5;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<android.support.test.internal.runner.ClassPathScanner: java.util.Set mApkPaths> = $r4;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r5 = r0.<android.support.test.internal.runner.ClassPathScanner: java.util.Set mApkPaths>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void addEntriesFromApk(java.util.Set, java.lang.String, android.support.test.internal.runner.ClassPathScanner$ClassNameFilter) throws java.io.IOException
    {
        android.support.test.internal.runner.ClassPathScanner r0;
        java.util.Set r1;
        java.lang.String r2, r5;
        android.support.test.internal.runner.ClassPathScanner$ClassNameFilter r3;
        java.util.Enumeration r4;
        java.lang.Throwable r6, $r9;
        dalvik.system.DexFile $r7, r10;
        boolean $z0, $z1;
        java.lang.Object $r8;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.support.test.internal.runner.ClassPathScanner$ClassNameFilter;

        r10 = null;

     label1:
        $r7 = new dalvik.system.DexFile;

        specialinvoke $r7.<dalvik.system.DexFile: void <init>(java.lang.String)>(r2);

        r10 = $r7;

        r4 = virtualinvoke r0.<android.support.test.internal.runner.ClassPathScanner: java.util.Enumeration getDexEntries(dalvik.system.DexFile)>(r10);

     label2:
        $z0 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.lang.String) $r8;

        $z1 = interfaceinvoke r3.<android.support.test.internal.runner.ClassPathScanner$ClassNameFilter: boolean accept(java.lang.String)>(r5);

        if $z1 == 0 goto label3;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r5);

     label3:
        goto label2;

     label4:
        if r10 == null goto label8;

        virtualinvoke r10.<dalvik.system.DexFile: void close()>();

        goto label8;

     label5:
        $r9 := @caughtexception;

        r6 = $r9;

     label6:
        if r10 == null goto label7;

        virtualinvoke r10.<dalvik.system.DexFile: void close()>();

     label7:
        throw r6;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    java.util.Enumeration getDexEntries(dalvik.system.DexFile)
    {
        android.support.test.internal.runner.ClassPathScanner r0;
        dalvik.system.DexFile r1;
        java.util.Enumeration $r2;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner;

        r1 := @parameter0: dalvik.system.DexFile;

        $r2 = virtualinvoke r1.<dalvik.system.DexFile: java.util.Enumeration entries()>();

        return $r2;
    }

    public java.util.Set getClassPathEntries(android.support.test.internal.runner.ClassPathScanner$ClassNameFilter) throws java.io.IOException
    {
        android.support.test.internal.runner.ClassPathScanner r0;
        android.support.test.internal.runner.ClassPathScanner$ClassNameFilter r1;
        java.util.LinkedHashSet r2, $r5;
        java.util.Iterator r3;
        java.lang.String r4;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner;

        r1 := @parameter0: android.support.test.internal.runner.ClassPathScanner$ClassNameFilter;

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r2 = $r5;

        $r6 = r0.<android.support.test.internal.runner.ClassPathScanner: java.util.Set mApkPaths>;

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r7;

        specialinvoke r0.<android.support.test.internal.runner.ClassPathScanner: void addEntriesFromApk(java.util.Set,java.lang.String,android.support.test.internal.runner.ClassPathScanner$ClassNameFilter)>(r2, r4, r1);

        goto label1;

     label2:
        return r2;
    }

android.support.test.internal.runner.ClassPathScanner$AcceptAllFilter
    public void <init>()
    {
        android.support.test.internal.runner.ClassPathScanner$AcceptAllFilter r0;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$AcceptAllFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean accept(java.lang.String)
    {
        android.support.test.internal.runner.ClassPathScanner$AcceptAllFilter r0;
        java.lang.String r1;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$AcceptAllFilter;

        r1 := @parameter0: java.lang.String;

        return 1;
    }

android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter
<android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: java.util.List mFilters>
    public void <init>()
    {
        android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter r0;
        java.util.ArrayList $r1;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: java.util.List mFilters> = $r1;

        return;
    }

    public void add(android.support.test.internal.runner.ClassPathScanner$ClassNameFilter)
    {
        android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter r0;
        android.support.test.internal.runner.ClassPathScanner$ClassNameFilter r1;
        java.util.List $r2;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter;

        r1 := @parameter0: android.support.test.internal.runner.ClassPathScanner$ClassNameFilter;

        $r2 = r0.<android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: java.util.List mFilters>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public transient void addAll(android.support.test.internal.runner.ClassPathScanner$ClassNameFilter[])
    {
        android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter r0;
        android.support.test.internal.runner.ClassPathScanner$ClassNameFilter[] r1;
        java.util.List $r2, $r3;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter;

        r1 := @parameter0: android.support.test.internal.runner.ClassPathScanner$ClassNameFilter[];

        $r2 = r0.<android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: java.util.List mFilters>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    public boolean accept(java.lang.String)
    {
        android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter r0;
        java.lang.String r1;
        java.util.Iterator r2;
        android.support.test.internal.runner.ClassPathScanner$ClassNameFilter r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<android.support.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: java.util.List mFilters>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.support.test.internal.runner.ClassPathScanner$ClassNameFilter) $r5;

        $z1 = interfaceinvoke r3.<android.support.test.internal.runner.ClassPathScanner$ClassNameFilter: boolean accept(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

android.support.test.internal.runner.ClassPathScanner$ClassNameFilter
<android.support.test.internal.runner.ClassPathScanner$ClassNameFilter: boolean accept(java.lang.String)>
android.support.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter
<android.support.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter: java.util.Set mExcludedClassNames>
    public void <init>(java.util.Set)
    {
        android.support.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter r0;
        java.util.Set r1;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter: java.util.Set mExcludedClassNames> = r1;

        return;
    }

    public boolean accept(java.lang.String)
    {
        android.support.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter r0;
        java.lang.String r1;
        java.util.Set $r2;
        boolean $z0, $z1;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.support.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter: java.util.Set mExcludedClassNames>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter
<android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter: java.lang.String mPkgName>
    void <init>(java.lang.String)
    {
        android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter r0;
        java.lang.String r1, $r3;
        boolean $z0;
        java.lang.Object[] $r2;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z0 != 0 goto label1;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.", $r2);

        r0.<android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter: java.lang.String mPkgName> = $r3;

        goto label2;

     label1:
        r0.<android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter: java.lang.String mPkgName> = r1;

     label2:
        return;
    }

    public boolean accept(java.lang.String)
    {
        android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.support.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter: java.lang.String mPkgName>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

android.support.test.internal.runner.ClassPathScanner$ExternalClassNameFilter
    public void <init>()
    {
        android.support.test.internal.runner.ClassPathScanner$ExternalClassNameFilter r0;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ExternalClassNameFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean accept(java.lang.String)
    {
        android.support.test.internal.runner.ClassPathScanner$ExternalClassNameFilter r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$ExternalClassNameFilter;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("$");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter
<android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter: java.lang.String mPkgName>
    void <init>(java.lang.String)
    {
        android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter r0;
        java.lang.String r1, $r3;
        boolean $z0;
        java.lang.Object[] $r2;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z0 != 0 goto label1;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.", $r2);

        r0.<android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter: java.lang.String mPkgName> = $r3;

        goto label2;

     label1:
        r0.<android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter: java.lang.String mPkgName> = r1;

     label2:
        return;
    }

    public boolean accept(java.lang.String)
    {
        android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.support.test.internal.runner.ClassPathScanner$InclusivePackageNameFilter: java.lang.String mPkgName>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        return $z0;
    }

