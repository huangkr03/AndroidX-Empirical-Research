android.support.design.chip.Chip
<android.support.design.chip.Chip: int CLOSE_ICON_VIRTUAL_ID>
<android.support.design.chip.Chip: int[] SELECTED_STATE>
<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>
<android.support.design.chip.Chip: android.view.View$OnClickListener onCloseIconClickListener>
<android.support.design.chip.Chip: android.widget.CompoundButton$OnCheckedChangeListener onCheckedChangeListenerInternal>
<android.support.design.chip.Chip: boolean deferredCheckedValue>
<android.support.design.chip.Chip: int focusedVirtualView>
<android.support.design.chip.Chip: boolean closeIconPressed>
<android.support.design.chip.Chip: boolean closeIconHovered>
<android.support.design.chip.Chip: boolean closeIconFocused>
<android.support.design.chip.Chip: android.support.design.chip.Chip$ChipTouchHelper touchHelper>
<android.support.design.chip.Chip: android.graphics.Rect rect>
<android.support.design.chip.Chip: android.graphics.RectF rectF>
    public void <init>(android.content.Context)
    {
        android.support.design.chip.Chip r0;
        android.content.Context r1;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.support.design.chip.Chip: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.support.design.chip.Chip r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int $i0;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        $i0 = <android.support.design.chip.R$attr: int chipStyle>;

        specialinvoke r0.<android.support.design.chip.Chip: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, $i0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.support.design.chip.Chip r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, $i1;
        android.support.design.chip.ChipDrawable r3;
        android.support.design.chip.Chip$ChipTouchHelper $r7, r10;
        boolean $z0;
        android.graphics.Rect r8;
        android.graphics.RectF r9;
        android.view.View r11, r13;
        android.support.v4.view.AccessibilityDelegateCompat r12;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        r0.<android.support.design.chip.Chip: int focusedVirtualView> = -2147483648;

        r8 = new android.graphics.Rect;

        specialinvoke r8.<android.graphics.Rect: void <init>()>();

        r0.<android.support.design.chip.Chip: android.graphics.Rect rect> = r8;

        r9 = new android.graphics.RectF;

        specialinvoke r9.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.chip.Chip: android.graphics.RectF rectF> = r9;

        $i1 = <android.support.design.chip.R$style: int Widget_MaterialComponents_Chip_Action>;

        r3 = staticinvoke <android.support.design.chip.ChipDrawable: android.support.design.chip.ChipDrawable createFromAttributes(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, $i1);

        virtualinvoke r0.<android.support.design.chip.Chip: void setChipDrawable(android.support.design.chip.ChipDrawable)>(r3);

        r10 = new android.support.design.chip.Chip$ChipTouchHelper;

        specialinvoke r10.<android.support.design.chip.Chip$ChipTouchHelper: void <init>(android.support.design.chip.Chip,android.support.design.chip.Chip)>(r0, r0);

        r0.<android.support.design.chip.Chip: android.support.design.chip.Chip$ChipTouchHelper touchHelper> = r10;

        $r7 = r0.<android.support.design.chip.Chip: android.support.design.chip.Chip$ChipTouchHelper touchHelper>;

        r11 = (android.view.View) r0;

        r12 = (android.support.v4.view.AccessibilityDelegateCompat) $r7;

        staticinvoke <android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>(r11, r12);

        r13 = (android.view.View) r0;

        staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>(r13, 1);

        specialinvoke r0.<android.support.design.chip.Chip: void initOutlineProvider()>();

        $z0 = r0.<android.support.design.chip.Chip: boolean deferredCheckedValue>;

        virtualinvoke r0.<android.support.design.chip.Chip: void setChecked(boolean)>($z0);

        return;
    }

    private void initOutlineProvider()
    {
        android.support.design.chip.Chip r0;
        int $i0;
        android.support.design.chip.Chip$1 $r1;

        r0 := @this: android.support.design.chip.Chip;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label1;

        $r1 = new android.support.design.chip.Chip$1;

        specialinvoke $r1.<android.support.design.chip.Chip$1: void <init>(android.support.design.chip.Chip)>(r0);

        virtualinvoke r0.<android.support.design.chip.Chip: void setOutlineProvider(android.view.ViewOutlineProvider)>($r1);

     label1:
        return;
    }

    public android.graphics.drawable.Drawable getChipDrawable()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        return $r1;
    }

    public void setChipDrawable(android.support.design.chip.ChipDrawable)
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable r1, $r3, $r4, $r5, $r6, $r7, $r9, $r12, $r13;
        android.graphics.drawable.RippleDrawable r2, r14;
        boolean $z0;
        android.content.res.ColorStateList $r10, $r11;
        android.view.View r15, r16;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.support.design.chip.ChipDrawable;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r3 == r1 goto label2;

        $r4 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        specialinvoke r0.<android.support.design.chip.Chip: void unapplyChipDrawable(android.support.design.chip.ChipDrawable)>($r4);

        r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable> = r1;

        $r5 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        specialinvoke r0.<android.support.design.chip.Chip: void applyChipDrawable(android.support.design.chip.ChipDrawable)>($r5);

        $z0 = <android.support.design.ripple.RippleUtils: boolean USE_FRAMEWORK_RIPPLE>;

        if $z0 == 0 goto label1;

        r14 = new android.graphics.drawable.RippleDrawable;

        $r9 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r10 = virtualinvoke $r9.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList getRippleColor()>();

        $r11 = staticinvoke <android.support.design.ripple.RippleUtils: android.content.res.ColorStateList convertToRippleDrawableColor(android.content.res.ColorStateList)>($r10);

        $r12 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        specialinvoke r14.<android.graphics.drawable.RippleDrawable: void <init>(android.content.res.ColorStateList,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>($r11, $r12, null);

        r2 = r14;

        $r13 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r13.<android.support.design.chip.ChipDrawable: void setUseCompatRipple(boolean)>(0);

        r15 = (android.view.View) r0;

        staticinvoke <android.support.v4.view.ViewCompat: void setBackground(android.view.View,android.graphics.drawable.Drawable)>(r15, r2);

        goto label2;

     label1:
        $r6 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r6.<android.support.design.chip.ChipDrawable: void setUseCompatRipple(boolean)>(1);

        $r7 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        r16 = (android.view.View) r0;

        staticinvoke <android.support.v4.view.ViewCompat: void setBackground(android.view.View,android.graphics.drawable.Drawable)>(r16, $r7);

     label2:
        return;
    }

    private void unapplyChipDrawable(android.support.design.chip.ChipDrawable)
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable r1;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.support.design.chip.ChipDrawable;

        if r1 == null goto label1;

        virtualinvoke r1.<android.support.design.chip.ChipDrawable: void setDelegate(android.support.design.chip.ChipDrawable$Delegate)>(null);

     label1:
        return;
    }

    private void applyChipDrawable(android.support.design.chip.ChipDrawable)
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable r1;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.support.design.chip.ChipDrawable;

        virtualinvoke r1.<android.support.design.chip.ChipDrawable: void setDelegate(android.support.design.chip.ChipDrawable$Delegate)>(r0);

        return;
    }

    protected int[] onCreateDrawableState(int)
    {
        android.support.design.chip.Chip r0;
        int i0, $i1;
        int[] r1, $r2;
        boolean $z0;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        r1 = specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: int[] onCreateDrawableState(int)>($i1);

        $z0 = virtualinvoke r0.<android.support.design.chip.Chip: boolean isChecked()>();

        if $z0 == 0 goto label1;

        $r2 = <android.support.design.chip.Chip: int[] SELECTED_STATE>;

        staticinvoke <android.support.design.chip.Chip: int[] mergeDrawableStates(int[],int[])>(r1, $r2);

     label1:
        return r1;
    }

    public void onChipDrawableSizeChange()
    {
        android.support.design.chip.Chip r0;
        int $i0;

        r0 := @this: android.support.design.chip.Chip;

        virtualinvoke r0.<android.support.design.chip.Chip: void requestLayout()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label1;

        virtualinvoke r0.<android.support.design.chip.Chip: void invalidateOutline()>();

     label1:
        return;
    }

    public void setChecked(boolean)
    {
        android.support.design.chip.Chip r0;
        boolean z0, z1, $z2;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.widget.CompoundButton$OnCheckedChangeListener $r3, $r4;
        android.widget.CompoundButton r5;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 != null goto label1;

        r0.<android.support.design.chip.Chip: boolean deferredCheckedValue> = z0;

        goto label2;

     label1:
        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $z2 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: boolean isCheckable()>();

        if $z2 == 0 goto label2;

        z1 = virtualinvoke r0.<android.support.design.chip.Chip: boolean isChecked()>();

        specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: void setChecked(boolean)>(z0);

        if z1 == z0 goto label2;

        $r3 = r0.<android.support.design.chip.Chip: android.widget.CompoundButton$OnCheckedChangeListener onCheckedChangeListenerInternal>;

        if $r3 == null goto label2;

        $r4 = r0.<android.support.design.chip.Chip: android.widget.CompoundButton$OnCheckedChangeListener onCheckedChangeListenerInternal>;

        r5 = (android.widget.CompoundButton) r0;

        interfaceinvoke $r4.<android.widget.CompoundButton$OnCheckedChangeListener: void onCheckedChanged(android.widget.CompoundButton,boolean)>(r5, z0);

     label2:
        return;
    }

    void setOnCheckedChangeListenerInternal(android.widget.CompoundButton$OnCheckedChangeListener)
    {
        android.support.design.chip.Chip r0;
        android.widget.CompoundButton$OnCheckedChangeListener r1;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.widget.CompoundButton$OnCheckedChangeListener;

        r0.<android.support.design.chip.Chip: android.widget.CompoundButton$OnCheckedChangeListener onCheckedChangeListenerInternal> = r1;

        return;
    }

    public void setOnCloseIconClickListener(android.view.View$OnClickListener)
    {
        android.support.design.chip.Chip r0;
        android.view.View$OnClickListener r1;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.view.View$OnClickListener;

        r0.<android.support.design.chip.Chip: android.view.View$OnClickListener onCloseIconClickListener> = r1;

        return;
    }

    public boolean performCloseIconClick()
    {
        android.support.design.chip.Chip r0;
        android.view.View$OnClickListener $r1, $r3;
        android.support.design.chip.Chip$ChipTouchHelper $r2;
        boolean z1;
        android.view.View r4;

        r0 := @this: android.support.design.chip.Chip;

        virtualinvoke r0.<android.support.design.chip.Chip: void playSoundEffect(int)>(0);

        $r1 = r0.<android.support.design.chip.Chip: android.view.View$OnClickListener onCloseIconClickListener>;

        if $r1 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.view.View$OnClickListener onCloseIconClickListener>;

        r4 = (android.view.View) r0;

        interfaceinvoke $r3.<android.view.View$OnClickListener: void onClick(android.view.View)>(r4);

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.Chip$ChipTouchHelper touchHelper>;

        virtualinvoke $r2.<android.support.design.chip.Chip$ChipTouchHelper: boolean sendEventForVirtualView(int,int)>(0, 1);

        return z1;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.support.design.chip.Chip r0;
        android.view.MotionEvent r1;
        int i0;
        boolean z0, $z1, $z2, $z3, z5, $z6;
        android.graphics.RectF $r2;
        float $f0, $f1;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.view.MotionEvent;

        z5 = 0;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        $r2 = specialinvoke r0.<android.support.design.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        z0 = virtualinvoke $r2.<android.graphics.RectF: boolean contains(float,float)>($f0, $f1);

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label4;
            case 2: goto label2;
            case 3: goto label5;
            default: goto label6;
        };

     label1:
        if z0 == 0 goto label6;

        specialinvoke r0.<android.support.design.chip.Chip: void setCloseIconPressed(boolean)>(1);

        z5 = 1;

        goto label6;

     label2:
        $z2 = r0.<android.support.design.chip.Chip: boolean closeIconPressed>;

        if $z2 == 0 goto label6;

        if z0 != 0 goto label3;

        specialinvoke r0.<android.support.design.chip.Chip: void setCloseIconPressed(boolean)>(0);

     label3:
        z5 = 1;

        goto label6;

     label4:
        $z3 = r0.<android.support.design.chip.Chip: boolean closeIconPressed>;

        if $z3 == 0 goto label5;

        virtualinvoke r0.<android.support.design.chip.Chip: boolean performCloseIconClick()>();

        z5 = 1;

     label5:
        specialinvoke r0.<android.support.design.chip.Chip: void setCloseIconPressed(boolean)>(0);

        goto label6;

     label6:
        if z5 != 0 goto label7;

        $z1 = specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label8;

     label7:
        $z6 = 1;

        goto label9;

     label8:
        $z6 = 0;

     label9:
        return $z6;
    }

    public boolean onHoverEvent(android.view.MotionEvent)
    {
        android.support.design.chip.Chip r0;
        android.view.MotionEvent r1;
        int i0;
        android.graphics.RectF $r2;
        float $f0, $f1;
        boolean $z0, $z1;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        lookupswitch(i0)
        {
            case 7: goto label1;
            case 10: goto label2;
            default: goto label3;
        };

     label1:
        $r2 = specialinvoke r0.<android.support.design.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z0 = virtualinvoke $r2.<android.graphics.RectF: boolean contains(float,float)>($f0, $f1);

        specialinvoke r0.<android.support.design.chip.Chip: void setCloseIconHovered(boolean)>($z0);

        goto label3;

     label2:
        specialinvoke r0.<android.support.design.chip.Chip: void setCloseIconHovered(boolean)>(0);

        goto label3;

     label3:
        $z1 = specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: boolean onHoverEvent(android.view.MotionEvent)>(r1);

        return $z1;
    }

    protected boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        android.support.design.chip.Chip r0;
        android.view.MotionEvent r1;
        android.support.design.chip.Chip$ChipTouchHelper $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.Chip$ChipTouchHelper touchHelper>;

        $z0 = virtualinvoke $r2.<android.support.design.chip.Chip$ChipTouchHelper: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        android.support.design.chip.Chip r0;
        boolean z0;
        int i0;
        android.graphics.Rect r1;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.support.design.chip.Chip: void setFocusedVirtualView(int)>(-1);

        goto label2;

     label1:
        specialinvoke r0.<android.support.design.chip.Chip: void setFocusedVirtualView(int)>(-2147483648);

     label2:
        virtualinvoke r0.<android.support.design.chip.Chip: void invalidate()>();

        specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: void onFocusChanged(boolean,int,android.graphics.Rect)>(z0, i0, r1);

        return;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        android.support.design.chip.Chip r0;
        int i0, $i1, $i2;
        android.view.KeyEvent r1;
        android.view.ViewParent r2, $r3;
        boolean $z0, $z1, $z2, $z6, $z7, $z8, $z9, z10, $z11;
        byte b3;
        java.lang.Object r5;
        android.view.View r6, r7, r8, r9, r10;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        z10 = 0;

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        lookupswitch($i1)
        {
            case 21: goto label01;
            case 22: goto label02;
            case 23: goto label05;
            case 61: goto label09;
            case 66: goto label05;
            default: goto label15;
        };

     label01:
        $z8 = virtualinvoke r1.<android.view.KeyEvent: boolean hasNoModifiers()>();

        if $z8 == 0 goto label15;

        r6 = (android.view.View) r0;

        $z9 = staticinvoke <android.support.design.internal.ViewUtils: boolean isLayoutRtl(android.view.View)>(r6);

        z10 = specialinvoke r0.<android.support.design.chip.Chip: boolean moveFocus(boolean)>($z9);

        goto label15;

     label02:
        $z6 = virtualinvoke r1.<android.view.KeyEvent: boolean hasNoModifiers()>();

        if $z6 == 0 goto label15;

        r7 = (android.view.View) r0;

        $z7 = staticinvoke <android.support.design.internal.ViewUtils: boolean isLayoutRtl(android.view.View)>(r7);

        if $z7 != 0 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        z10 = specialinvoke r0.<android.support.design.chip.Chip: boolean moveFocus(boolean)>($z11);

        goto label15;

     label05:
        $i2 = r0.<android.support.design.chip.Chip: int focusedVirtualView>;

        lookupswitch($i2)
        {
            case -2147483648: goto label08;
            case -1: goto label06;
            case 0: goto label07;
            default: goto label08;
        };

     label06:
        virtualinvoke r0.<android.support.design.chip.Chip: boolean performClick()>();

        return 1;

     label07:
        virtualinvoke r0.<android.support.design.chip.Chip: boolean performCloseIconClick()>();

        return 1;

     label08:
        goto label15;

     label09:
        b3 = 0;

        $z0 = virtualinvoke r1.<android.view.KeyEvent: boolean hasNoModifiers()>();

        if $z0 == 0 goto label10;

        b3 = 2;

        goto label11;

     label10:
        $z1 = virtualinvoke r1.<android.view.KeyEvent: boolean hasModifiers(int)>(1);

        if $z1 == 0 goto label11;

        b3 = 1;

     label11:
        if b3 == 0 goto label15;

        r2 = virtualinvoke r0.<android.support.design.chip.Chip: android.view.ViewParent getParent()>();

        r5 = r0;

     label12:
        r8 = (android.view.View) r5;

        r5 = virtualinvoke r8.<android.view.View: android.view.View focusSearch(int)>(b3);

        if r5 == null goto label13;

        if r5 == r0 goto label13;

        r9 = (android.view.View) r5;

        $r3 = virtualinvoke r9.<android.view.View: android.view.ViewParent getParent()>();

        if $r3 == r2 goto label12;

     label13:
        if r5 == null goto label14;

        r10 = (android.view.View) r5;

        virtualinvoke r10.<android.view.View: boolean requestFocus()>();

        return 1;

     label14:
        goto label15;

     label15:
        if z10 == 0 goto label16;

        virtualinvoke r0.<android.support.design.chip.Chip: void invalidate()>();

        return 1;

     label16:
        $z2 = specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: boolean onKeyDown(int,android.view.KeyEvent)>(i0, r1);

        return $z2;
    }

    private boolean moveFocus(boolean)
    {
        android.support.design.chip.Chip r0;
        boolean z0, z1;
        int $i0, $i1;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.support.design.chip.Chip: void ensureFocus()>();

        z1 = 0;

        if z0 == 0 goto label1;

        $i1 = r0.<android.support.design.chip.Chip: int focusedVirtualView>;

        if $i1 != -1 goto label2;

        specialinvoke r0.<android.support.design.chip.Chip: void setFocusedVirtualView(int)>(0);

        z1 = 1;

        goto label2;

     label1:
        $i0 = r0.<android.support.design.chip.Chip: int focusedVirtualView>;

        if $i0 != 0 goto label2;

        specialinvoke r0.<android.support.design.chip.Chip: void setFocusedVirtualView(int)>(-1);

        z1 = 1;

     label2:
        return z1;
    }

    private void ensureFocus()
    {
        android.support.design.chip.Chip r0;
        int $i0;

        r0 := @this: android.support.design.chip.Chip;

        $i0 = r0.<android.support.design.chip.Chip: int focusedVirtualView>;

        if $i0 != -2147483648 goto label1;

        specialinvoke r0.<android.support.design.chip.Chip: void setFocusedVirtualView(int)>(-1);

     label1:
        return;
    }

    public void getFocusedRect(android.graphics.Rect)
    {
        android.support.design.chip.Chip r0;
        android.graphics.Rect r1, $r2;
        int $i0;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.graphics.Rect;

        $i0 = r0.<android.support.design.chip.Chip: int focusedVirtualView>;

        if $i0 != 0 goto label1;

        $r2 = specialinvoke r0.<android.support.design.chip.Chip: android.graphics.Rect getCloseIconTouchBoundsInt()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        goto label2;

     label1:
        specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: void getFocusedRect(android.graphics.Rect)>(r1);

     label2:
        return;
    }

    private void setFocusedVirtualView(int)
    {
        android.support.design.chip.Chip r0;
        int i0, $i1, $i2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $i1 = r0.<android.support.design.chip.Chip: int focusedVirtualView>;

        if $i1 == i0 goto label2;

        $i2 = r0.<android.support.design.chip.Chip: int focusedVirtualView>;

        if $i2 != 0 goto label1;

        specialinvoke r0.<android.support.design.chip.Chip: void setCloseIconFocused(boolean)>(0);

     label1:
        r0.<android.support.design.chip.Chip: int focusedVirtualView> = i0;

        if i0 != 0 goto label2;

        specialinvoke r0.<android.support.design.chip.Chip: void setCloseIconFocused(boolean)>(1);

     label2:
        return;
    }

    private void setCloseIconPressed(boolean)
    {
        android.support.design.chip.Chip r0;
        boolean z0, $z1;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.support.design.chip.Chip: boolean closeIconPressed>;

        if $z1 == z0 goto label1;

        r0.<android.support.design.chip.Chip: boolean closeIconPressed> = z0;

        virtualinvoke r0.<android.support.design.chip.Chip: void refreshDrawableState()>();

     label1:
        return;
    }

    private void setCloseIconHovered(boolean)
    {
        android.support.design.chip.Chip r0;
        boolean z0, $z1;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.support.design.chip.Chip: boolean closeIconHovered>;

        if $z1 == z0 goto label1;

        r0.<android.support.design.chip.Chip: boolean closeIconHovered> = z0;

        virtualinvoke r0.<android.support.design.chip.Chip: void refreshDrawableState()>();

     label1:
        return;
    }

    private void setCloseIconFocused(boolean)
    {
        android.support.design.chip.Chip r0;
        boolean z0, $z1;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.support.design.chip.Chip: boolean closeIconFocused>;

        if $z1 == z0 goto label1;

        r0.<android.support.design.chip.Chip: boolean closeIconFocused> = z0;

        virtualinvoke r0.<android.support.design.chip.Chip: void refreshDrawableState()>();

     label1:
        return;
    }

    protected void drawableStateChanged()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2, $r3;
        boolean $z0, z1;
        int[] $r4;

        r0 := @this: android.support.design.chip.Chip;

        specialinvoke r0.<android.support.v7.widget.AppCompatCheckBox: void drawableStateChanged()>();

        z1 = 0;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $z0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: boolean isCloseIconStateful()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r4 = specialinvoke r0.<android.support.design.chip.Chip: int[] createCloseIconDrawableState()>();

        z1 = virtualinvoke $r3.<android.support.design.chip.ChipDrawable: boolean setCloseIconState(int[])>($r4);

     label1:
        if z1 == 0 goto label2;

        virtualinvoke r0.<android.support.design.chip.Chip: void invalidate()>();

     label2:
        return;
    }

    private int[] createCloseIconDrawableState()
    {
        android.support.design.chip.Chip r0;
        int[] r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int i0, i1, i2;

        r0 := @this: android.support.design.chip.Chip;

        i0 = 0;

        $z0 = virtualinvoke r0.<android.support.design.chip.Chip: boolean isEnabled()>();

        if $z0 == 0 goto label01;

        i0 = i0 + 1;

     label01:
        $z1 = r0.<android.support.design.chip.Chip: boolean closeIconFocused>;

        if $z1 == 0 goto label02;

        i0 = i0 + 1;

     label02:
        $z2 = r0.<android.support.design.chip.Chip: boolean closeIconHovered>;

        if $z2 == 0 goto label03;

        i0 = i0 + 1;

     label03:
        $z3 = r0.<android.support.design.chip.Chip: boolean closeIconPressed>;

        if $z3 == 0 goto label04;

        i0 = i0 + 1;

     label04:
        $z4 = virtualinvoke r0.<android.support.design.chip.Chip: boolean isChecked()>();

        if $z4 == 0 goto label05;

        i0 = i0 + 1;

     label05:
        r1 = newarray (int)[i0];

        i1 = 0;

        $z5 = virtualinvoke r0.<android.support.design.chip.Chip: boolean isEnabled()>();

        if $z5 == 0 goto label06;

        r1[i1] = 16842910;

        i1 = i1 + 1;

     label06:
        $z6 = r0.<android.support.design.chip.Chip: boolean closeIconFocused>;

        if $z6 == 0 goto label07;

        r1[i1] = 16842908;

        i1 = i1 + 1;

     label07:
        $z7 = r0.<android.support.design.chip.Chip: boolean closeIconHovered>;

        if $z7 == 0 goto label08;

        r1[i1] = 16843623;

        i1 = i1 + 1;

     label08:
        $z8 = r0.<android.support.design.chip.Chip: boolean closeIconPressed>;

        if $z8 == 0 goto label09;

        r1[i1] = 16842919;

        i1 = i1 + 1;

     label09:
        $z9 = virtualinvoke r0.<android.support.design.chip.Chip: boolean isChecked()>();

        if $z9 == 0 goto label10;

        r1[i1] = 16842913;

        i2 = i1 + 1;

     label10:
        return r1;
    }

    private boolean hasCloseIcon()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.graphics.drawable.Drawable $r3;
        boolean $z0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable getCloseIcon()>();

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private android.graphics.RectF getCloseIconTouchBounds()
    {
        android.support.design.chip.Chip r0;
        android.graphics.RectF $r1, $r2, $r3;
        boolean $z0;
        android.support.design.chip.ChipDrawable $r4;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.graphics.RectF rectF>;

        virtualinvoke $r1.<android.graphics.RectF: void setEmpty()>();

        $z0 = specialinvoke r0.<android.support.design.chip.Chip: boolean hasCloseIcon()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = r0.<android.support.design.chip.Chip: android.graphics.RectF rectF>;

        virtualinvoke $r4.<android.support.design.chip.ChipDrawable: void getCloseIconTouchBounds(android.graphics.RectF)>($r3);

     label1:
        $r2 = r0.<android.support.design.chip.Chip: android.graphics.RectF rectF>;

        return $r2;
    }

    private android.graphics.Rect getCloseIconTouchBoundsInt()
    {
        android.support.design.chip.Chip r0;
        android.graphics.RectF r1;
        float $f0, $f1, $f2, $f3;
        int $i0, $i1, $i2, $i3;
        android.graphics.Rect $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 = specialinvoke r0.<android.support.design.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        $r2 = r0.<android.support.design.chip.Chip: android.graphics.Rect rect>;

        $f0 = r1.<android.graphics.RectF: float left>;

        $i3 = (int) $f0;

        $f1 = r1.<android.graphics.RectF: float top>;

        $i2 = (int) $f1;

        $f2 = r1.<android.graphics.RectF: float right>;

        $i1 = (int) $f2;

        $f3 = r1.<android.graphics.RectF: float bottom>;

        $i0 = (int) $f3;

        virtualinvoke $r2.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i2, $i1, $i0);

        $r3 = r0.<android.support.design.chip.Chip: android.graphics.Rect rect>;

        return $r3;
    }

    public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent, int)
    {
        android.support.design.chip.Chip r0;
        android.view.MotionEvent r1;
        int i0;
        android.graphics.RectF $r2;
        float $f0, $f1;
        boolean $z0, $z1;
        android.content.Context $r3;
        android.view.PointerIcon $r4;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<android.support.design.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z0 = virtualinvoke $r2.<android.graphics.RectF: boolean contains(float,float)>($f0, $f1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.support.design.chip.Chip: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<android.support.design.chip.Chip: android.content.Context getContext()>();

        $r4 = staticinvoke <android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>($r3, 1002);

        return $r4;

     label1:
        return null;
    }

    public android.content.res.ColorStateList getChipBackgroundColor()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.content.res.ColorStateList $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList getChipBackgroundColor()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setChipBackgroundColorResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipBackgroundColorResource(int)>(i0);

     label1:
        return;
    }

    public void setChipBackgroundColor(android.content.res.ColorStateList)
    {
        android.support.design.chip.Chip r0;
        android.content.res.ColorStateList r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setChipBackgroundColor(android.content.res.ColorStateList)>(r1);

     label1:
        return;
    }

    public float getChipMinHeight()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getChipMinHeight()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setChipMinHeightResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipMinHeightResource(int)>(i0);

     label1:
        return;
    }

    public void setChipMinHeight(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipMinHeight(float)>(f0);

     label1:
        return;
    }

    public float getChipCornerRadius()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getChipCornerRadius()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setChipCornerRadiusResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipCornerRadiusResource(int)>(i0);

     label1:
        return;
    }

    public void setChipCornerRadius(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipCornerRadius(float)>(f0);

     label1:
        return;
    }

    public android.content.res.ColorStateList getChipStrokeColor()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.content.res.ColorStateList $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList getChipStrokeColor()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setChipStrokeColorResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipStrokeColorResource(int)>(i0);

     label1:
        return;
    }

    public void setChipStrokeColor(android.content.res.ColorStateList)
    {
        android.support.design.chip.Chip r0;
        android.content.res.ColorStateList r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setChipStrokeColor(android.content.res.ColorStateList)>(r1);

     label1:
        return;
    }

    public float getChipStrokeWidth()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getChipStrokeWidth()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setChipStrokeWidthResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipStrokeWidthResource(int)>(i0);

     label1:
        return;
    }

    public void setChipStrokeWidth(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipStrokeWidth(float)>(f0);

     label1:
        return;
    }

    public android.content.res.ColorStateList getRippleColor()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.content.res.ColorStateList $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList getRippleColor()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setRippleColorResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setRippleColorResource(int)>(i0);

     label1:
        return;
    }

    public void setRippleColor(android.content.res.ColorStateList)
    {
        android.support.design.chip.Chip r0;
        android.content.res.ColorStateList r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setRippleColor(android.content.res.ColorStateList)>(r1);

     label1:
        return;
    }

    public java.lang.CharSequence getChipText()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        java.lang.CharSequence $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: java.lang.CharSequence getChipText()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setChipTextResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipTextResource(int)>(i0);

     label1:
        return;
    }

    public void setChipText(java.lang.CharSequence)
    {
        android.support.design.chip.Chip r0;
        java.lang.CharSequence r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setChipText(java.lang.CharSequence)>(r1);

     label1:
        return;
    }

    public android.support.design.resources.TextAppearance getTextAppearance()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.support.design.resources.TextAppearance $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance getTextAppearance()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setTextAppearanceResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setTextAppearanceResource(int)>(i0);

     label1:
        return;
    }

    public void setTextAppearance(android.support.design.resources.TextAppearance)
    {
        android.support.design.chip.Chip r0;
        android.support.design.resources.TextAppearance r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.support.design.resources.TextAppearance;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setTextAppearance(android.support.design.resources.TextAppearance)>(r1);

     label1:
        return;
    }

    public boolean isChipIconEnabled()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $z0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: boolean isChipIconEnabled()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setChipIconEnabledResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipIconEnabledResource(int)>(i0);

     label1:
        return;
    }

    public void setChipIconEnabled(boolean)
    {
        android.support.design.chip.Chip r0;
        boolean z0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipIconEnabled(boolean)>(z0);

     label1:
        return;
    }

    public android.graphics.drawable.Drawable getChipIcon()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable getChipIcon()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setChipIconResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipIconResource(int)>(i0);

     label1:
        return;
    }

    public void setChipIcon(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.Chip r0;
        android.graphics.drawable.Drawable r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setChipIcon(android.graphics.drawable.Drawable)>(r1);

     label1:
        return;
    }

    public float getChipIconSize()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getChipIconSize()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setChipIconSizeResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipIconSizeResource(int)>(i0);

     label1:
        return;
    }

    public void setChipIconSize(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipIconSize(float)>(f0);

     label1:
        return;
    }

    public boolean isCloseIconEnabled()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $z0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: boolean isCloseIconEnabled()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setCloseIconEnabledResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconEnabledResource(int)>(i0);

     label1:
        return;
    }

    public void setCloseIconEnabled(boolean)
    {
        android.support.design.chip.Chip r0;
        boolean z0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconEnabled(boolean)>(z0);

     label1:
        return;
    }

    public android.graphics.drawable.Drawable getCloseIcon()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable getCloseIcon()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setCloseIconResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconResource(int)>(i0);

     label1:
        return;
    }

    public void setCloseIcon(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.Chip r0;
        android.graphics.drawable.Drawable r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setCloseIcon(android.graphics.drawable.Drawable)>(r1);

     label1:
        return;
    }

    public android.content.res.ColorStateList getCloseIconTint()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.content.res.ColorStateList $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList getCloseIconTint()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setCloseIconTintResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconTintResource(int)>(i0);

     label1:
        return;
    }

    public void setCloseIconTint(android.content.res.ColorStateList)
    {
        android.support.design.chip.Chip r0;
        android.content.res.ColorStateList r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setCloseIconTint(android.content.res.ColorStateList)>(r1);

     label1:
        return;
    }

    public float getCloseIconSize()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getCloseIconSize()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setCloseIconSizeResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconSizeResource(int)>(i0);

     label1:
        return;
    }

    public void setCloseIconSize(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconSize(float)>(f0);

     label1:
        return;
    }

    public boolean isCheckable()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $z0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: boolean isCheckable()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setCheckableResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCheckableResource(int)>(i0);

     label1:
        return;
    }

    public void setCheckable(boolean)
    {
        android.support.design.chip.Chip r0;
        boolean z0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCheckable(boolean)>(z0);

     label1:
        return;
    }

    public boolean isCheckedIconEnabled()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $z0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: boolean isCheckedIconEnabled()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setCheckedIconEnabledResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCheckedIconEnabledResource(int)>(i0);

     label1:
        return;
    }

    public void setCheckedIconEnabled(boolean)
    {
        android.support.design.chip.Chip r0;
        boolean z0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCheckedIconEnabled(boolean)>(z0);

     label1:
        return;
    }

    public android.graphics.drawable.Drawable getCheckedIcon()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable getCheckedIcon()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setCheckedIconResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCheckedIconResource(int)>(i0);

     label1:
        return;
    }

    public void setCheckedIcon(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.Chip r0;
        android.graphics.drawable.Drawable r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setCheckedIcon(android.graphics.drawable.Drawable)>(r1);

     label1:
        return;
    }

    public android.support.design.animation.MotionSpec getShowMotionSpec()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.support.design.animation.MotionSpec $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.support.design.animation.MotionSpec getShowMotionSpec()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setShowMotionSpecResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setShowMotionSpecResource(int)>(i0);

     label1:
        return;
    }

    public void setShowMotionSpec(android.support.design.animation.MotionSpec)
    {
        android.support.design.chip.Chip r0;
        android.support.design.animation.MotionSpec r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.support.design.animation.MotionSpec;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setShowMotionSpec(android.support.design.animation.MotionSpec)>(r1);

     label1:
        return;
    }

    public android.support.design.animation.MotionSpec getHideMotionSpec()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        android.support.design.animation.MotionSpec $r3;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $r3 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: android.support.design.animation.MotionSpec getHideMotionSpec()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setHideMotionSpecResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setHideMotionSpecResource(int)>(i0);

     label1:
        return;
    }

    public void setHideMotionSpec(android.support.design.animation.MotionSpec)
    {
        android.support.design.chip.Chip r0;
        android.support.design.animation.MotionSpec r1;
        android.support.design.chip.ChipDrawable $r2, $r3;

        r0 := @this: android.support.design.chip.Chip;

        r1 := @parameter0: android.support.design.animation.MotionSpec;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r2 == null goto label1;

        $r3 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void setHideMotionSpec(android.support.design.animation.MotionSpec)>(r1);

     label1:
        return;
    }

    public float getChipStartPadding()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getChipStartPadding()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setChipStartPaddingResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipStartPaddingResource(int)>(i0);

     label1:
        return;
    }

    public void setChipStartPadding(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipStartPadding(float)>(f0);

     label1:
        return;
    }

    public float getIconStartPadding()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getIconStartPadding()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setIconStartPaddingResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setIconStartPaddingResource(int)>(i0);

     label1:
        return;
    }

    public void setIconStartPadding(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setIconStartPadding(float)>(f0);

     label1:
        return;
    }

    public float getIconEndPadding()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getIconEndPadding()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setIconEndPaddingResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setIconEndPaddingResource(int)>(i0);

     label1:
        return;
    }

    public void setIconEndPadding(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setIconEndPadding(float)>(f0);

     label1:
        return;
    }

    public float getTextStartPadding()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getTextStartPadding()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setTextStartPaddingResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setTextStartPaddingResource(int)>(i0);

     label1:
        return;
    }

    public void setTextStartPadding(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setTextStartPadding(float)>(f0);

     label1:
        return;
    }

    public float getTextEndPadding()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getTextEndPadding()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setTextEndPaddingResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setTextEndPaddingResource(int)>(i0);

     label1:
        return;
    }

    public void setTextEndPadding(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setTextEndPadding(float)>(f0);

     label1:
        return;
    }

    public float getCloseIconStartPadding()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getCloseIconStartPadding()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setCloseIconStartPaddingResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconStartPaddingResource(int)>(i0);

     label1:
        return;
    }

    public void setCloseIconStartPadding(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconStartPadding(float)>(f0);

     label1:
        return;
    }

    public float getCloseIconEndPadding()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getCloseIconEndPadding()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setCloseIconEndPaddingResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconEndPaddingResource(int)>(i0);

     label1:
        return;
    }

    public void setCloseIconEndPadding(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setCloseIconEndPadding(float)>(f0);

     label1:
        return;
    }

    public float getChipEndPadding()
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1, $r2;
        float $f0;

        r0 := @this: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        $f0 = virtualinvoke $r2.<android.support.design.chip.ChipDrawable: float getChipEndPadding()>();

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public void setChipEndPaddingResource(int)
    {
        android.support.design.chip.Chip r0;
        int i0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipEndPaddingResource(int)>(i0);

     label1:
        return;
    }

    public void setChipEndPadding(float)
    {
        android.support.design.chip.Chip r0;
        float f0;
        android.support.design.chip.ChipDrawable $r1, $r2;

        r0 := @this: android.support.design.chip.Chip;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        virtualinvoke $r2.<android.support.design.chip.ChipDrawable: void setChipEndPadding(float)>(f0);

     label1:
        return;
    }

    static android.support.design.chip.ChipDrawable access$000(android.support.design.chip.Chip)
    {
        android.support.design.chip.Chip r0;
        android.support.design.chip.ChipDrawable $r1;

        r0 := @parameter0: android.support.design.chip.Chip;

        $r1 = r0.<android.support.design.chip.Chip: android.support.design.chip.ChipDrawable chipDrawable>;

        return $r1;
    }

    static boolean access$100(android.support.design.chip.Chip)
    {
        android.support.design.chip.Chip r0;
        boolean $z0;

        r0 := @parameter0: android.support.design.chip.Chip;

        $z0 = specialinvoke r0.<android.support.design.chip.Chip: boolean hasCloseIcon()>();

        return $z0;
    }

    static android.graphics.RectF access$200(android.support.design.chip.Chip)
    {
        android.support.design.chip.Chip r0;
        android.graphics.RectF $r1;

        r0 := @parameter0: android.support.design.chip.Chip;

        $r1 = specialinvoke r0.<android.support.design.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()>();

        return $r1;
    }

    static android.graphics.Rect access$300(android.support.design.chip.Chip)
    {
        android.support.design.chip.Chip r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: android.support.design.chip.Chip;

        $r1 = specialinvoke r0.<android.support.design.chip.Chip: android.graphics.Rect getCloseIconTouchBoundsInt()>();

        return $r1;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[1];

        $r0[0] = 16842913;

        <android.support.design.chip.Chip: int[] SELECTED_STATE> = $r0;

        return;
    }

android.support.design.chip.Chip$1
<android.support.design.chip.Chip$1: android.support.design.chip.Chip this$0>
    void <init>(android.support.design.chip.Chip)
    {
        android.support.design.chip.Chip$1 r0;
        android.support.design.chip.Chip r1;

        r0 := @this: android.support.design.chip.Chip$1;

        r1 := @parameter0: android.support.design.chip.Chip;

        r0.<android.support.design.chip.Chip$1: android.support.design.chip.Chip this$0> = r1;

        specialinvoke r0.<android.view.ViewOutlineProvider: void <init>()>();

        return;
    }

    public void getOutline(android.view.View, android.graphics.Outline)
    {
        android.support.design.chip.Chip$1 r0;
        android.view.View r1;
        android.graphics.Outline r2;
        android.support.design.chip.Chip $r3, $r5;
        android.support.design.chip.ChipDrawable $r4, $r6;

        r0 := @this: android.support.design.chip.Chip$1;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Outline;

        $r3 = r0.<android.support.design.chip.Chip$1: android.support.design.chip.Chip this$0>;

        $r4 = staticinvoke <android.support.design.chip.Chip: android.support.design.chip.ChipDrawable access$000(android.support.design.chip.Chip)>($r3);

        if $r4 == null goto label1;

        $r5 = r0.<android.support.design.chip.Chip$1: android.support.design.chip.Chip this$0>;

        $r6 = staticinvoke <android.support.design.chip.Chip: android.support.design.chip.ChipDrawable access$000(android.support.design.chip.Chip)>($r5);

        virtualinvoke $r6.<android.support.design.chip.ChipDrawable: void getOutline(android.graphics.Outline)>(r2);

        goto label2;

     label1:
        virtualinvoke r2.<android.graphics.Outline: void setAlpha(float)>(0.0F);

     label2:
        return;
    }

android.support.design.chip.Chip$2
<android.support.design.chip.Chip$2: android.support.design.chip.Chip this$0>
    void <init>(android.support.design.chip.Chip)
    {
        android.support.design.chip.Chip$2 r0;
        android.support.design.chip.Chip r1;

        r0 := @this: android.support.design.chip.Chip$2;

        r1 := @parameter0: android.support.design.chip.Chip;

        r0.<android.support.design.chip.Chip$2: android.support.design.chip.Chip this$0> = r1;

        specialinvoke r0.<android.view.ViewOutlineProvider: void <init>()>();

        return;
    }

    public void getOutline(android.view.View, android.graphics.Outline)
    {
        android.support.design.chip.Chip$2 r0;
        android.view.View r1;
        android.graphics.Outline r2;
        android.support.design.chip.Chip $r3, $r5;
        android.support.design.chip.ChipDrawable $r4, $r6;

        r0 := @this: android.support.design.chip.Chip$2;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Outline;

        $r3 = r0.<android.support.design.chip.Chip$2: android.support.design.chip.Chip this$0>;

        $r4 = staticinvoke <android.support.design.chip.Chip: android.support.design.chip.ChipDrawable access$000(android.support.design.chip.Chip)>($r3);

        if $r4 == null goto label1;

        $r5 = r0.<android.support.design.chip.Chip$2: android.support.design.chip.Chip this$0>;

        $r6 = staticinvoke <android.support.design.chip.Chip: android.support.design.chip.ChipDrawable access$000(android.support.design.chip.Chip)>($r5);

        virtualinvoke $r6.<android.support.design.chip.ChipDrawable: void getOutline(android.graphics.Outline)>(r2);

        goto label2;

     label1:
        virtualinvoke r2.<android.graphics.Outline: void setAlpha(float)>(0.0F);

     label2:
        return;
    }

android.support.design.chip.Chip$ChipTouchHelper
<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>
    void <init>(android.support.design.chip.Chip, android.support.design.chip.Chip)
    {
        android.support.design.chip.Chip$ChipTouchHelper r0;
        android.support.design.chip.Chip r1, r2;
        android.view.View r3;

        r0 := @this: android.support.design.chip.Chip$ChipTouchHelper;

        r1 := @parameter0: android.support.design.chip.Chip;

        r2 := @parameter1: android.support.design.chip.Chip;

        r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0> = r1;

        r3 = (android.view.View) r2;

        specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void <init>(android.view.View)>(r3);

        return;
    }

    protected int getVirtualViewAt(float, float)
    {
        android.support.design.chip.Chip$ChipTouchHelper r0;
        float f0, f1;
        android.support.design.chip.Chip $r1, $r2;
        boolean $z0, $z1;
        android.graphics.RectF $r3;
        byte $b0;

        r0 := @this: android.support.design.chip.Chip$ChipTouchHelper;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $z0 = staticinvoke <android.support.design.chip.Chip: boolean access$100(android.support.design.chip.Chip)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $r3 = staticinvoke <android.support.design.chip.Chip: android.graphics.RectF access$200(android.support.design.chip.Chip)>($r2);

        $z1 = virtualinvoke $r3.<android.graphics.RectF: boolean contains(float,float)>(f0, f1);

        if $z1 == 0 goto label1;

        $b0 = 0;

        goto label2;

     label1:
        $b0 = -1;

     label2:
        return $b0;
    }

    protected void getVisibleVirtualViews(java.util.List)
    {
        android.support.design.chip.Chip$ChipTouchHelper r0;
        java.util.List r1;
        java.lang.Integer $r2, $r4;
        android.support.design.chip.Chip $r3;
        boolean $z1;

        r0 := @this: android.support.design.chip.Chip$ChipTouchHelper;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r3 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $z1 = staticinvoke <android.support.design.chip.Chip: boolean access$100(android.support.design.chip.Chip)>($r3);

        if $z1 == 0 goto label1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r4);

     label1:
        return;
    }

    protected void onPopulateNodeForVirtualView(int, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)
    {
        android.support.design.chip.Chip$ChipTouchHelper r0;
        int i0, $i1;
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat r1;
        android.support.design.chip.Chip $r2, $r3, $r6, $r9;
        boolean $z0, $z1;
        android.content.Context $r4;
        java.lang.String $r5;
        android.graphics.Rect $r7;
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat $r8;

        r0 := @this: android.support.design.chip.Chip$ChipTouchHelper;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;

        $r2 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $z0 = staticinvoke <android.support.design.chip.Chip: boolean access$100(android.support.design.chip.Chip)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $r4 = virtualinvoke $r3.<android.support.design.chip.Chip: android.content.Context getContext()>();

        $i1 = <android.support.design.chip.R$string: int mtrl_chip_close_icon_content_description>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getString(int)>($i1);

        virtualinvoke r1.<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setContentDescription(java.lang.CharSequence)>($r5);

        $r6 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $r7 = staticinvoke <android.support.design.chip.Chip: android.graphics.Rect access$300(android.support.design.chip.Chip)>($r6);

        virtualinvoke r1.<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setBoundsInParent(android.graphics.Rect)>($r7);

        $r8 = <android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLICK>;

        virtualinvoke r1.<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void addAction(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat)>($r8);

        $r9 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $z1 = virtualinvoke $r9.<android.support.design.chip.Chip: boolean isEnabled()>();

        virtualinvoke r1.<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setEnabled(boolean)>($z1);

        goto label2;

     label1:
        virtualinvoke r1.<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setContentDescription(java.lang.CharSequence)>("");

     label2:
        return;
    }

    protected void onPopulateNodeForHost(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)
    {
        android.support.design.chip.Chip$ChipTouchHelper r0;
        android.support.v4.view.accessibility.AccessibilityNodeInfoCompat r1;
        android.support.design.chip.Chip $r2, $r7, $r10, $r19;
        android.support.design.chip.ChipDrawable $r3, $r8, $r11, $r20;
        java.lang.StringBuilder $r4, $r5, $r15, $r18;
        java.lang.String $r6, $r14, $r17;
        boolean $z0, $z1;
        java.lang.Class $r13, $r16;
        java.lang.Object $r21;

        r0 := @this: android.support.design.chip.Chip$ChipTouchHelper;

        r1 := @parameter0: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;

        $r2 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $r3 = staticinvoke <android.support.design.chip.Chip: android.support.design.chip.ChipDrawable access$000(android.support.design.chip.Chip)>($r2);

        if $r3 == null goto label1;

        $r10 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $r11 = staticinvoke <android.support.design.chip.Chip: android.support.design.chip.ChipDrawable access$000(android.support.design.chip.Chip)>($r10);

        $z0 = virtualinvoke $r11.<android.support.design.chip.ChipDrawable: boolean isCheckable()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke r1.<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setCheckable(boolean)>($z1);

        $r13 = class "Landroid/support/design/chip/Chip;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setClassName(java.lang.CharSequence)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = class "Landroid/support/design/chip/Chip;";

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getSimpleName()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r4 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

        $r19 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $r20 = staticinvoke <android.support.design.chip.Chip: android.support.design.chip.ChipDrawable access$000(android.support.design.chip.Chip)>($r19);

        if $r20 == null goto label3;

        $r7 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $r8 = staticinvoke <android.support.design.chip.Chip: android.support.design.chip.ChipDrawable access$000(android.support.design.chip.Chip)>($r7);

        $r21 = virtualinvoke $r8.<android.support.design.chip.ChipDrawable: java.lang.CharSequence getChipText()>();

        goto label4;

     label3:
        $r21 = "";

     label4:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setContentDescription(java.lang.CharSequence)>($r6);

        return;
    }

    protected boolean onPerformActionForVirtualView(int, int, android.os.Bundle)
    {
        android.support.design.chip.Chip$ChipTouchHelper r0;
        int i0, i1;
        android.os.Bundle r1;
        android.support.design.chip.Chip $r2;
        boolean $z0;

        r0 := @this: android.support.design.chip.Chip$ChipTouchHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.Bundle;

        if i1 != 16 goto label1;

        if i0 != 0 goto label1;

        $r2 = r0.<android.support.design.chip.Chip$ChipTouchHelper: android.support.design.chip.Chip this$0>;

        $z0 = virtualinvoke $r2.<android.support.design.chip.Chip: boolean performCloseIconClick()>();

        return $z0;

     label1:
        return 0;
    }

