android.support.test.espresso.base.WindowManagerEventInjectionStrategy
<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.String TAG>
<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: boolean initComplete>
<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.Object wmInstance>
<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.reflect.Method injectInputKeyEventMethod>
<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.reflect.Method injectInputMotionEventMethod>
    void <init>()
    {
        android.support.test.espresso.base.WindowManagerEventInjectionStrategy r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.base.WindowManagerEventInjectionStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 7 goto label1;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 > 15 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Unsupported API level.");

        return;
    }

    void initialize()
    {
        android.support.test.espresso.base.WindowManagerEventInjectionStrategy r0;
        java.lang.reflect.Method r1, r4, $r15, $r16, $r21, $r22;
        java.lang.Object r2, $r10, $r11, $r17;
        java.lang.Class r3, $r12, $r14, $r18, $r20, r33;
        boolean $z0;
        java.lang.String $r5;
        java.lang.Class[] $r6, $r8, $r13, $r19;
        java.lang.Object[] $r7, $r9;
        java.lang.Throwable $r23, $r24, $r26, $r28, $r30, $r31, r34, r35, r36, r37, r38, r39, r44, r45, r46, r47;
        java.lang.RuntimeException r40, r41, r42, r43;

        r0 := @this: android.support.test.espresso.base.WindowManagerEventInjectionStrategy;

        $z0 = r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: boolean initComplete>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = <android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r5, "Trying to create injection strategy.");

        r33 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.os.ServiceManager");

        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Ljava/lang/String;";

        r1 = virtualinvoke r33.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getService", $r6);

        virtualinvoke r1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = "window";

        r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r33, $r7);

        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.view.IWindowManager$Stub");

        $r8 = newarray (java.lang.Class)[1];

        $r8[0] = class "Landroid/os/IBinder;";

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("asInterface", $r8);

        virtualinvoke r4.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r2;

        $r10 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r9);

        r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.Object wmInstance> = $r10;

        $r11 = r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.Object wmInstance>;

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = newarray (java.lang.Class)[2];

        $r13[0] = class "Landroid/view/MotionEvent;";

        $r14 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r13[1] = $r14;

        $r15 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("injectPointerEvent", $r13);

        r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.reflect.Method injectInputMotionEventMethod> = $r15;

        $r16 = r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.reflect.Method injectInputMotionEventMethod>;

        virtualinvoke $r16.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r17 = r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.Object wmInstance>;

        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = newarray (java.lang.Class)[2];

        $r19[0] = class "Landroid/view/KeyEvent;";

        $r20 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r19[1] = $r20;

        $r21 = virtualinvoke $r18.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("injectKeyEvent", $r19);

        r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.reflect.Method injectInputKeyEventMethod> = $r21;

        $r22 = r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.reflect.Method injectInputKeyEventMethod>;

        virtualinvoke $r22.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: boolean initComplete> = 1;

     label2:
        goto label9;

     label3:
        $r26 := @caughtexception;

        r34 = $r26;

        r40 = new java.lang.RuntimeException;

        specialinvoke r40.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r34);

        r44 = (java.lang.Throwable) r40;

        throw r44;

     label4:
        $r28 := @caughtexception;

        r35 = $r28;

        r41 = new java.lang.RuntimeException;

        specialinvoke r41.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r35);

        r45 = (java.lang.Throwable) r41;

        throw r45;

     label5:
        $r30 := @caughtexception;

        r36 = $r30;

        throw r36;

     label6:
        $r24 := @caughtexception;

        r37 = $r24;

        r42 = new java.lang.RuntimeException;

        specialinvoke r42.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r37);

        r46 = (java.lang.Throwable) r42;

        throw r46;

     label7:
        $r31 := @caughtexception;

        r38 = $r31;

        r43 = new java.lang.RuntimeException;

        specialinvoke r43.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r38);

        r47 = (java.lang.Throwable) r43;

        throw r47;

     label8:
        $r23 := @caughtexception;

        r39 = $r23;

        throw r39;

     label9:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
        catch java.lang.NoSuchMethodException from label1 to label2 with label7;
        catch java.lang.SecurityException from label1 to label2 with label8;
    }

    public boolean injectKeyEvent(android.view.KeyEvent) throws android.support.test.espresso.InjectEventSecurityException
    {
        android.support.test.espresso.base.WindowManagerEventInjectionStrategy r0;
        android.view.KeyEvent r1;
        java.lang.Throwable r2, $r9, $r11, $r14, $r15, r17, r18, r19, r20, r25, r27;
        java.lang.Object[] $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object $r5, $r7;
        java.lang.Boolean $r6, $r8;
        boolean $z0, $z1;
        java.lang.RuntimeException r21, r23;
        android.support.test.espresso.InjectEventSecurityException r22, r24;
        java.lang.reflect.InvocationTargetException r26;

        r0 := @this: android.support.test.espresso.base.WindowManagerEventInjectionStrategy;

        r1 := @parameter0: android.view.KeyEvent;

     label1:
        $r4 = r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.reflect.Method injectInputKeyEventMethod>;

        $r5 = r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.Object wmInstance>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r3[1] = $r6;

        $r7 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r3);

        $r8 = (java.lang.Boolean) $r7;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r15 := @caughtexception;

        r17 = $r15;

        r21 = new java.lang.RuntimeException;

        specialinvoke r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r17);

        r25 = (java.lang.Throwable) r21;

        throw r25;

     label4:
        $r14 := @caughtexception;

        r18 = $r14;

        throw r18;

     label5:
        $r11 := @caughtexception;

        r19 = $r11;

        r26 = (java.lang.reflect.InvocationTargetException) r19;

        r2 = virtualinvoke r26.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z1 = r2 instanceof java.lang.SecurityException;

        if $z1 == 0 goto label6;

        r22 = new android.support.test.espresso.InjectEventSecurityException;

        specialinvoke r22.<android.support.test.espresso.InjectEventSecurityException: void <init>(java.lang.Throwable)>(r2);

        throw r22;

     label6:
        r23 = new java.lang.RuntimeException;

        specialinvoke r23.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19);

        r27 = (java.lang.Throwable) r23;

        throw r27;

     label7:
        $r9 := @caughtexception;

        r20 = $r9;

        r24 = new android.support.test.espresso.InjectEventSecurityException;

        specialinvoke r24.<android.support.test.espresso.InjectEventSecurityException: void <init>(java.lang.Throwable)>(r20);

        throw r24;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.SecurityException from label1 to label2 with label7;
    }

    public boolean injectMotionEvent(android.view.MotionEvent) throws android.support.test.espresso.InjectEventSecurityException
    {
        android.support.test.espresso.base.WindowManagerEventInjectionStrategy r0;
        android.view.MotionEvent r1;
        java.lang.Throwable r2, $r9, $r12, $r14, $r16, r17, r18, r19, r20, r25, r27;
        java.lang.Object[] $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object $r5, $r7;
        java.lang.Boolean $r6, $r8;
        boolean $z0, $z1;
        java.lang.RuntimeException r21, r23;
        android.support.test.espresso.InjectEventSecurityException r22, r24;
        java.lang.reflect.InvocationTargetException r26;

        r0 := @this: android.support.test.espresso.base.WindowManagerEventInjectionStrategy;

        r1 := @parameter0: android.view.MotionEvent;

     label1:
        $r4 = r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.reflect.Method injectInputMotionEventMethod>;

        $r5 = r0.<android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.Object wmInstance>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r3[1] = $r6;

        $r7 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r3);

        $r8 = (java.lang.Boolean) $r7;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r12 := @caughtexception;

        r17 = $r12;

        r21 = new java.lang.RuntimeException;

        specialinvoke r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r17);

        r25 = (java.lang.Throwable) r21;

        throw r25;

     label4:
        $r16 := @caughtexception;

        r18 = $r16;

        throw r18;

     label5:
        $r9 := @caughtexception;

        r19 = $r9;

        r26 = (java.lang.reflect.InvocationTargetException) r19;

        r2 = virtualinvoke r26.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z1 = r2 instanceof java.lang.SecurityException;

        if $z1 == 0 goto label6;

        r22 = new android.support.test.espresso.InjectEventSecurityException;

        specialinvoke r22.<android.support.test.espresso.InjectEventSecurityException: void <init>(java.lang.Throwable)>(r2);

        throw r22;

     label6:
        r23 = new java.lang.RuntimeException;

        specialinvoke r23.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19);

        r27 = (java.lang.Throwable) r23;

        throw r27;

     label7:
        $r14 := @caughtexception;

        r20 = $r14;

        r24 = new android.support.test.espresso.InjectEventSecurityException;

        specialinvoke r24.<android.support.test.espresso.InjectEventSecurityException: void <init>(java.lang.Throwable)>(r20);

        throw r24;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
        catch java.lang.SecurityException from label1 to label2 with label7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroid/support/test/espresso/base/WindowManagerEventInjectionStrategy;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.support.test.espresso.base.WindowManagerEventInjectionStrategy: java.lang.String TAG> = $r1;

        return;
    }

