android.support.test.espresso.assertion.LayoutAssertions
    private void <init>()
    {
        android.support.test.espresso.assertion.LayoutAssertions r0;

        r0 := @this: android.support.test.espresso.assertion.LayoutAssertions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.support.test.espresso.ViewAssertion noEllipsizedText()
    {
        org.hamcrest.Matcher $r0, $r1, $r2;
        android.support.test.espresso.ViewAssertion $r3;

        $r0 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isAssignableFrom(java.lang.Class)>(class "Landroid/widget/TextView;");

        $r1 = staticinvoke <android.support.test.espresso.matcher.LayoutMatchers: org.hamcrest.Matcher hasEllipsizedText()>();

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r1);

        $r3 = staticinvoke <android.support.test.espresso.assertion.ViewAssertions: android.support.test.espresso.ViewAssertion selectedDescendantsMatch(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r0, $r2);

        return $r3;
    }

    public static android.support.test.espresso.ViewAssertion noMultilineButtons()
    {
        org.hamcrest.Matcher $r0, $r1, $r2;
        android.support.test.espresso.ViewAssertion $r3;

        $r0 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isAssignableFrom(java.lang.Class)>(class "Landroid/widget/Button;");

        $r1 = staticinvoke <android.support.test.espresso.matcher.LayoutMatchers: org.hamcrest.Matcher hasMultilineText()>();

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r1);

        $r3 = staticinvoke <android.support.test.espresso.assertion.ViewAssertions: android.support.test.espresso.ViewAssertion selectedDescendantsMatch(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r0, $r2);

        return $r3;
    }

    public static android.support.test.espresso.ViewAssertion noOverlaps(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3;
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion $r1;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke $r1.<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: void <init>(org.hamcrest.Matcher,android.support.test.espresso.assertion.LayoutAssertions$1)>($r3, null);

        return $r1;
    }

    public static android.support.test.espresso.ViewAssertion noOverlaps()
    {
        android.support.test.espresso.matcher.ViewMatchers$Visibility $r0;
        org.hamcrest.Matcher $r1, $r2, $r3, $r5;
        org.hamcrest.core.AnyOf $r4;
        android.support.test.espresso.ViewAssertion $r6;

        $r0 = <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>;

        $r1 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withEffectiveVisibility(android.support.test.espresso.matcher.ViewMatchers$Visibility)>($r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isAssignableFrom(java.lang.Class)>(class "Landroid/widget/TextView;");

        $r3 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isAssignableFrom(java.lang.Class)>(class "Landroid/widget/ImageView;");

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r2, $r3);

        $r5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r1, $r4);

        $r6 = staticinvoke <android.support.test.espresso.assertion.LayoutAssertions: android.support.test.espresso.ViewAssertion noOverlaps(org.hamcrest.Matcher)>($r5);

        return $r6;
    }

    private static android.graphics.Rect getRect(android.view.View)
    {
        android.view.View r0;
        int[] r1, $r2;
        android.graphics.Rect $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @parameter0: android.view.View;

        $r2 = newarray (int)[2];

        $r2[0] = 0;

        $r2[1] = 0;

        r1 = $r2;

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1);

        $r3 = new android.graphics.Rect;

        $i0 = r1[0];

        $i1 = r1[1];

        $i2 = r1[0];

        $i3 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i4 = $i2 + $i3;

        $i5 = $i4 - 1;

        $i6 = r1[1];

        $i7 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i8 = $i6 + $i7;

        $i9 = $i8 - 1;

        specialinvoke $r3.<android.graphics.Rect: void <init>(int,int,int,int)>($i0, $i1, $i5, $i9);

        return $r3;
    }

    static android.graphics.Rect access$200(android.view.View)
    {
        android.view.View r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: android.view.View;

        $r1 = staticinvoke <android.support.test.espresso.assertion.LayoutAssertions: android.graphics.Rect getRect(android.view.View)>(r0);

        return $r1;
    }

android.support.test.espresso.assertion.LayoutAssertions$1
android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1
<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion this$0>
    void <init>(android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion)
    {
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1 r0;
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r1;

        r0 := @this: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1;

        r1 := @parameter0: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        r0.<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(android.view.View)
    {
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1 r0;
        android.view.View r1;
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion $r2;
        org.hamcrest.Matcher $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion this$0>;

        $r3 = staticinvoke <android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher access$100(android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion)>($r2);

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1 r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: boolean apply(android.view.View)>($r2);

        return $z0;
    }

android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion
<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher selector>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher selector> = r1;

        return;
    }

    public void check(android.view.View, android.support.test.espresso.NoMatchingViewException)
    {
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r0;
        android.view.View r1, r7, r10;
        android.support.test.espresso.NoMatchingViewException r2;
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1 r3, r29;
        java.util.Iterator r4, r9;
        java.util.LinkedList r5, r30;
        java.lang.StringBuilder r6, r31;
        android.graphics.Rect r8, r11;
        java.lang.Iterable $r13, $r14;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2;
        java.lang.String $r18, $r22, $r23, $r24;
        java.lang.Object $r19, $r20;
        java.lang.Object[] $r21;
        android.widget.TextView $r27;
        java.lang.CharSequence $r28;
        junit.framework.AssertionFailedError r32;
        java.lang.Throwable r33;
        java.util.List r34, r35;

        r0 := @this: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.support.test.espresso.NoMatchingViewException;

        r29 = new android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1;

        specialinvoke r29.<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion$1: void <init>(android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion)>(r0);

        r3 = r29;

        if r2 == null goto label01;

        r33 = (java.lang.Throwable) r2;

        throw r33;

     label01:
        $r13 = staticinvoke <android.support.test.espresso.util.TreeIterables: java.lang.Iterable breadthFirstViewTraversal(android.view.View)>(r1);

        $r14 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,android.support.test.espresso.core.internal.deps.guava.base.Predicate)>($r13, r3);

        r4 = interfaceinvoke $r14.<java.lang.Iterable: java.util.Iterator iterator()>();

        r30 = new java.util.LinkedList;

        specialinvoke r30.<java.util.LinkedList: void <init>()>();

        r5 = r30;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        r6 = r31;

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r19 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.view.View) $r19;

        r8 = staticinvoke <android.support.test.espresso.assertion.LayoutAssertions: android.graphics.Rect access$200(android.view.View)>(r7);

        $z1 = virtualinvoke r8.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 != 0 goto label09;

        $z2 = r7 instanceof android.widget.TextView;

        if $z2 == 0 goto label03;

        $r27 = (android.widget.TextView) r7;

        $r28 = virtualinvoke $r27.<android.widget.TextView: java.lang.CharSequence getText()>();

        $i2 = interfaceinvoke $r28.<java.lang.CharSequence: int length()>();

        if $i2 == 0 goto label09;

     label03:
        r34 = (java.util.List) r5;

        r9 = interfaceinvoke r34.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z7 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label08;

        $r20 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.view.View) $r20;

        $z4 = r7 instanceof android.widget.ImageView;

        if $z4 == 0 goto label05;

        $z6 = r10 instanceof android.widget.ImageView;

        if $z6 == 0 goto label05;

        goto label04;

     label05:
        r11 = staticinvoke <android.support.test.espresso.assertion.LayoutAssertions: android.graphics.Rect access$200(android.view.View)>(r10);

        $z5 = staticinvoke <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>(r8, r11);

        if $z5 == 0 goto label07;

        $i1 = virtualinvoke r6.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label06;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n\n");

     label06:
        $r21 = newarray (java.lang.Object)[2];

        $r22 = staticinvoke <android.support.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>(r7);

        $r21[0] = $r22;

        $r23 = staticinvoke <android.support.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>(r10);

        $r21[1] = $r23;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s overlaps\n%s", $r21);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        goto label08;

     label07:
        goto label04;

     label08:
        r35 = (java.util.List) r5;

        interfaceinvoke r35.<java.util.List: boolean add(java.lang.Object)>(r7);

     label09:
        goto label02;

     label10:
        $i0 = virtualinvoke r6.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label11;

        r32 = new junit.framework.AssertionFailedError;

        $r18 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r32.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>($r18);

        throw r32;

     label11:
        return;
    }

    public java.lang.String toString()
    {
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r0;
        java.lang.Object[] $r1;
        org.hamcrest.Matcher $r2;
        java.lang.String $r3;

        r0 := @this: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher selector>;

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("NoOverlapsViewAssertion{selector=%s}", $r1);

        return $r3;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.assertion.LayoutAssertions$1)
    {
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.assertion.LayoutAssertions$1 r2;

        r0 := @this: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.assertion.LayoutAssertions$1;

        specialinvoke r0.<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    static org.hamcrest.Matcher access$100(android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion)
    {
        android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion r0;
        org.hamcrest.Matcher $r1;

        r0 := @parameter0: android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion;

        $r1 = r0.<android.support.test.espresso.assertion.LayoutAssertions$NoOverlapsViewAssertion: org.hamcrest.Matcher selector>;

        return $r1;
    }

