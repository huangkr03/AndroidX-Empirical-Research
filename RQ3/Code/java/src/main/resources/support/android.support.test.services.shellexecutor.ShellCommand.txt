android.support.test.services.shellexecutor.ShellCommand
<android.support.test.services.shellexecutor.ShellCommand: java.lang.String command>
<android.support.test.services.shellexecutor.ShellCommand: boolean executeThroughShell>
<android.support.test.services.shellexecutor.ShellCommand: java.util.List parameters>
<android.support.test.services.shellexecutor.ShellCommand: java.util.Map shellEnv>
    void <init>(java.lang.String, java.util.List, java.util.Map, boolean)
    {
        android.support.test.services.shellexecutor.ShellCommand $r0;
        java.lang.String $r1;
        java.util.List $r2;
        java.util.Map $r3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException r4;
        java.util.ArrayList r5;
        java.util.HashMap r6;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommand;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: java.util.Map;

        $z0 := @parameter3: boolean;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z1 == 0 goto label1;

        r4 = new java.lang.IllegalArgumentException;

        specialinvoke r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null or empty command");

        throw r4;

     label1:
        $r0.<android.support.test.services.shellexecutor.ShellCommand: java.lang.String command> = $r1;

        r5 = new java.util.ArrayList;

        specialinvoke r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r5);

        $r0.<android.support.test.services.shellexecutor.ShellCommand: java.util.List parameters> = $r2;

        r6 = new java.util.HashMap;

        specialinvoke r6.<java.util.HashMap: void <init>(java.util.Map)>($r3);

        $r3 = (java.util.Map) r6;

        $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

        $r0.<android.support.test.services.shellexecutor.ShellCommand: java.util.Map shellEnv> = $r3;

        $r0.<android.support.test.services.shellexecutor.ShellCommand: boolean executeThroughShell> = $z0;

        return;
    }

    public boolean executeThroughShell()
    {
        android.support.test.services.shellexecutor.ShellCommand $r0;
        boolean z0;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommand;

        z0 = $r0.<android.support.test.services.shellexecutor.ShellCommand: boolean executeThroughShell>;

        return z0;
    }

    public java.lang.String getCommand()
    {
        android.support.test.services.shellexecutor.ShellCommand $r0;
        java.lang.String r1;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommand;

        r1 = $r0.<android.support.test.services.shellexecutor.ShellCommand: java.lang.String command>;

        return r1;
    }

    public java.util.List getParameters()
    {
        android.support.test.services.shellexecutor.ShellCommand $r0;
        java.util.List r1;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommand;

        r1 = $r0.<android.support.test.services.shellexecutor.ShellCommand: java.util.List parameters>;

        return r1;
    }

    public java.util.Map getShellEnv()
    {
        android.support.test.services.shellexecutor.ShellCommand $r0;
        java.util.Map r1;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommand;

        r1 = $r0.<android.support.test.services.shellexecutor.ShellCommand: java.util.Map shellEnv>;

        return r1;
    }

