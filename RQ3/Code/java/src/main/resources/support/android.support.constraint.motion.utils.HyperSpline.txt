android.support.constraint.motion.utils.HyperSpline
<android.support.constraint.motion.utils.HyperSpline: int mPoints>
<android.support.constraint.motion.utils.HyperSpline: android.support.constraint.motion.utils.HyperSpline$Cubic[][] mCurve>
<android.support.constraint.motion.utils.HyperSpline: int mDimensionality>
<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>
<android.support.constraint.motion.utils.HyperSpline: double mTotalLength>
<android.support.constraint.motion.utils.HyperSpline: double[][] mCtl>
    public void <init>(double[][])
    {
        android.support.constraint.motion.utils.HyperSpline r0;
        double[][] r1;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline;

        r1 := @parameter0: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<android.support.constraint.motion.utils.HyperSpline: void setup(double[][])>(r1);

        return;
    }

    public void <init>()
    {
        android.support.constraint.motion.utils.HyperSpline r0;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup(double[][])
    {
        android.support.constraint.motion.utils.HyperSpline r0;
        double[][] r1, $r3, $r11, $r13, $r17;
        double[] $r2, $r5, $r6, $r7, $r12, $r14, $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i18;
        android.support.constraint.motion.utils.HyperSpline$Cubic[][] $r4, $r8, $r15;
        double $d0, $d1, $d2, $d3;
        android.support.constraint.motion.utils.HyperSpline$Cubic[] $r9, $r16, r20;
        android.support.constraint.motion.utils.HyperSpline$Cubic $r10;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline;

        r1 := @parameter0: double[][];

        $r2 = r1[0];

        $i0 = lengthof $r2;

        r0.<android.support.constraint.motion.utils.HyperSpline: int mDimensionality> = $i0;

        $i1 = lengthof r1;

        r0.<android.support.constraint.motion.utils.HyperSpline: int mPoints> = $i1;

        $i3 = r0.<android.support.constraint.motion.utils.HyperSpline: int mDimensionality>;

        $i2 = r0.<android.support.constraint.motion.utils.HyperSpline: int mPoints>;

        $r3 = newmultiarray (double)[$i3][$i2];

        r0.<android.support.constraint.motion.utils.HyperSpline: double[][] mCtl> = $r3;

        $i4 = r0.<android.support.constraint.motion.utils.HyperSpline: int mDimensionality>;

        $r4 = newarray (android.support.constraint.motion.utils.HyperSpline$Cubic[])[$i4];

        r0.<android.support.constraint.motion.utils.HyperSpline: android.support.constraint.motion.utils.HyperSpline$Cubic[][] mCurve> = $r4;

        i14 = 0;

     label01:
        $i5 = r0.<android.support.constraint.motion.utils.HyperSpline: int mDimensionality>;

        if i14 >= $i5 goto label04;

        i15 = 0;

     label02:
        $i13 = r0.<android.support.constraint.motion.utils.HyperSpline: int mPoints>;

        if i15 >= $i13 goto label03;

        $r17 = r0.<android.support.constraint.motion.utils.HyperSpline: double[][] mCtl>;

        $r19 = $r17[i14];

        $r18 = r1[i15];

        $d3 = $r18[i14];

        $r19[i15] = $d3;

        i15 = i15 + 1;

        goto label02;

     label03:
        i14 = i14 + 1;

        goto label01;

     label04:
        i16 = 0;

     label05:
        $i6 = r0.<android.support.constraint.motion.utils.HyperSpline: int mDimensionality>;

        if i16 >= $i6 goto label06;

        $r15 = r0.<android.support.constraint.motion.utils.HyperSpline: android.support.constraint.motion.utils.HyperSpline$Cubic[][] mCurve>;

        $r11 = r0.<android.support.constraint.motion.utils.HyperSpline: double[][] mCtl>;

        $r12 = $r11[i16];

        $i12 = lengthof $r12;

        $r13 = r0.<android.support.constraint.motion.utils.HyperSpline: double[][] mCtl>;

        $r14 = $r13[i16];

        $r16 = staticinvoke <android.support.constraint.motion.utils.HyperSpline: android.support.constraint.motion.utils.HyperSpline$Cubic[] calcNaturalCubic(int,double[])>($i12, $r14);

        $r15[i16] = $r16;

        i16 = i16 + 1;

        goto label05;

     label06:
        $i7 = r0.<android.support.constraint.motion.utils.HyperSpline: int mPoints>;

        $i8 = $i7 - 1;

        $r5 = newarray (double)[$i8];

        r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength> = $r5;

        r0.<android.support.constraint.motion.utils.HyperSpline: double mTotalLength> = 0.0;

        $i9 = r0.<android.support.constraint.motion.utils.HyperSpline: int mDimensionality>;

        r20 = newarray (android.support.constraint.motion.utils.HyperSpline$Cubic)[$i9];

        i17 = 0;

     label07:
        $r6 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $i10 = lengthof $r6;

        if i17 >= $i10 goto label10;

        i18 = 0;

     label08:
        $i11 = r0.<android.support.constraint.motion.utils.HyperSpline: int mDimensionality>;

        if i18 >= $i11 goto label09;

        $r8 = r0.<android.support.constraint.motion.utils.HyperSpline: android.support.constraint.motion.utils.HyperSpline$Cubic[][] mCurve>;

        $r9 = $r8[i18];

        $r10 = $r9[i17];

        r20[i18] = $r10;

        i18 = i18 + 1;

        goto label08;

     label09:
        $d0 = r0.<android.support.constraint.motion.utils.HyperSpline: double mTotalLength>;

        $r7 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d1 = virtualinvoke r0.<android.support.constraint.motion.utils.HyperSpline: double approxLength(android.support.constraint.motion.utils.HyperSpline$Cubic[])>(r20);

        $r7[i17] = $d1;

        $d2 = $d0 + $d1;

        r0.<android.support.constraint.motion.utils.HyperSpline: double mTotalLength> = $d2;

        i17 = i17 + 1;

        goto label07;

     label10:
        return;
    }

    public void getVelocity(double, double[])
    {
        android.support.constraint.motion.utils.HyperSpline r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        double[] r1, $r2, $r5, $r7, $r8;
        int $i0, $i1, i3, i4, $i5;
        android.support.constraint.motion.utils.HyperSpline$Cubic[][] $r3;
        android.support.constraint.motion.utils.HyperSpline$Cubic[] $r4;
        android.support.constraint.motion.utils.HyperSpline$Cubic $r6;
        byte $b2;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $d2 = r0.<android.support.constraint.motion.utils.HyperSpline: double mTotalLength>;

        d8 = d0 * $d2;

        d1 = 0.0;

        i3 = 0;

     label1:
        $r2 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        if i3 >= $i1 goto label2;

        $r7 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d6 = $r7[i3];

        $b2 = $d6 cmpg d8;

        if $b2 >= 0 goto label2;

        $r8 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d7 = $r8[i3];

        d8 = d8 - $d7;

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        $i5 = lengthof r1;

        if i4 >= $i5 goto label4;

        $r3 = r0.<android.support.constraint.motion.utils.HyperSpline: android.support.constraint.motion.utils.HyperSpline$Cubic[][] mCurve>;

        $r4 = $r3[i4];

        $r6 = $r4[i3];

        $r5 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d3 = $r5[i3];

        $d4 = d8 / $d3;

        $d5 = virtualinvoke $r6.<android.support.constraint.motion.utils.HyperSpline$Cubic: double vel(double)>($d4);

        r1[i4] = $d5;

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public void getPos(double, double[])
    {
        android.support.constraint.motion.utils.HyperSpline r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        double[] r1, $r2, $r5, $r7, $r8;
        int $i0, $i1, i3, i4, $i5;
        android.support.constraint.motion.utils.HyperSpline$Cubic[][] $r3;
        android.support.constraint.motion.utils.HyperSpline$Cubic[] $r4;
        android.support.constraint.motion.utils.HyperSpline$Cubic $r6;
        byte $b2;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $d2 = r0.<android.support.constraint.motion.utils.HyperSpline: double mTotalLength>;

        d8 = d0 * $d2;

        d1 = 0.0;

        i3 = 0;

     label1:
        $r2 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        if i3 >= $i1 goto label2;

        $r7 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d6 = $r7[i3];

        $b2 = $d6 cmpg d8;

        if $b2 >= 0 goto label2;

        $r8 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d7 = $r8[i3];

        d8 = d8 - $d7;

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        $i5 = lengthof r1;

        if i4 >= $i5 goto label4;

        $r3 = r0.<android.support.constraint.motion.utils.HyperSpline: android.support.constraint.motion.utils.HyperSpline$Cubic[][] mCurve>;

        $r4 = $r3[i4];

        $r6 = $r4[i3];

        $r5 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d3 = $r5[i3];

        $d4 = d8 / $d3;

        $d5 = virtualinvoke $r6.<android.support.constraint.motion.utils.HyperSpline$Cubic: double eval(double)>($d4);

        r1[i4] = $d5;

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public void getPos(double, float[])
    {
        android.support.constraint.motion.utils.HyperSpline r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        float[] r1;
        double[] $r2, $r5, $r7, $r8;
        int $i0, $i1, i3, i4, $i5;
        android.support.constraint.motion.utils.HyperSpline$Cubic[][] $r3;
        android.support.constraint.motion.utils.HyperSpline$Cubic[] $r4;
        android.support.constraint.motion.utils.HyperSpline$Cubic $r6;
        float $f0;
        byte $b2;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline;

        d0 := @parameter0: double;

        r1 := @parameter1: float[];

        $d2 = r0.<android.support.constraint.motion.utils.HyperSpline: double mTotalLength>;

        d8 = d0 * $d2;

        d1 = 0.0;

        i3 = 0;

     label1:
        $r2 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        if i3 >= $i1 goto label2;

        $r7 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d6 = $r7[i3];

        $b2 = $d6 cmpg d8;

        if $b2 >= 0 goto label2;

        $r8 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d7 = $r8[i3];

        d8 = d8 - $d7;

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        $i5 = lengthof r1;

        if i4 >= $i5 goto label4;

        $r3 = r0.<android.support.constraint.motion.utils.HyperSpline: android.support.constraint.motion.utils.HyperSpline$Cubic[][] mCurve>;

        $r4 = $r3[i4];

        $r6 = $r4[i3];

        $r5 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d3 = $r5[i3];

        $d4 = d8 / $d3;

        $d5 = virtualinvoke $r6.<android.support.constraint.motion.utils.HyperSpline$Cubic: double eval(double)>($d4);

        $f0 = (float) $d5;

        r1[i4] = $f0;

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public double getPos(double, int)
    {
        android.support.constraint.motion.utils.HyperSpline r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        int i0, $i1, $i2, i4;
        double[] $r1, $r4, $r6, $r7;
        android.support.constraint.motion.utils.HyperSpline$Cubic[][] $r2;
        android.support.constraint.motion.utils.HyperSpline$Cubic[] $r3;
        android.support.constraint.motion.utils.HyperSpline$Cubic $r5;
        byte $b3;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d2 = r0.<android.support.constraint.motion.utils.HyperSpline: double mTotalLength>;

        d8 = d0 * $d2;

        d1 = 0.0;

        i4 = 0;

     label1:
        $r1 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        if i4 >= $i2 goto label2;

        $r6 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d6 = $r6[i4];

        $b3 = $d6 cmpg d8;

        if $b3 >= 0 goto label2;

        $r7 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d7 = $r7[i4];

        d8 = d8 - $d7;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = r0.<android.support.constraint.motion.utils.HyperSpline: android.support.constraint.motion.utils.HyperSpline$Cubic[][] mCurve>;

        $r3 = $r2[i0];

        $r5 = $r3[i4];

        $r4 = r0.<android.support.constraint.motion.utils.HyperSpline: double[] mCurveLength>;

        $d3 = $r4[i4];

        $d4 = d8 / $d3;

        $d5 = virtualinvoke $r5.<android.support.constraint.motion.utils.HyperSpline$Cubic: double eval(double)>($d4);

        return $d5;
    }

    public double approxLength(android.support.constraint.motion.utils.HyperSpline$Cubic[])
    {
        android.support.constraint.motion.utils.HyperSpline r0;
        android.support.constraint.motion.utils.HyperSpline$Cubic[] r1;
        int i0, $i1, $i3, $i4, i6, i7;
        double[] r2;
        byte $b2, $b5;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7, d8, d9, d10, d11, d12, d13, d14;
        android.support.constraint.motion.utils.HyperSpline$Cubic $r3, $r4;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline;

        r1 := @parameter0: android.support.constraint.motion.utils.HyperSpline$Cubic[];

        d6 = 0.0;

        i0 = lengthof r1;

        $i1 = lengthof r1;

        r2 = newarray (double)[$i1];

        d7 = 0.0;

     label1:
        $b2 = d7 cmpg 1.0;

        if $b2 >= 0 goto label5;

        d8 = 0.0;

        i6 = 0;

     label2:
        $i4 = lengthof r1;

        if i6 >= $i4 goto label3;

        d9 = r2[i6];

        $r4 = r1[i6];

        $d4 = virtualinvoke $r4.<android.support.constraint.motion.utils.HyperSpline$Cubic: double eval(double)>(d7);

        r2[i6] = $d4;

        d10 = d9 - $d4;

        $d5 = d10 * d10;

        d8 = d8 + $d5;

        i6 = i6 + 1;

        goto label2;

     label3:
        $b5 = d7 cmpl 0.0;

        if $b5 <= 0 goto label4;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>(d8);

        d6 = d6 + $d3;

     label4:
        d7 = d7 + 0.1;

        goto label1;

     label5:
        d11 = 0.0;

        i7 = 0;

     label6:
        $i3 = lengthof r1;

        if i7 >= $i3 goto label7;

        d12 = r2[i7];

        $r3 = r1[i7];

        $d1 = virtualinvoke $r3.<android.support.constraint.motion.utils.HyperSpline$Cubic: double eval(double)>(1.0);

        r2[i7] = $d1;

        d13 = d12 - $d1;

        $d2 = d13 * d13;

        d11 = d11 + $d2;

        i7 = i7 + 1;

        goto label6;

     label7:
        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(d11);

        d14 = d6 + $d0;

        return d14;
    }

    static android.support.constraint.motion.utils.HyperSpline$Cubic[] calcNaturalCubic(int, double[])
    {
        double[] r0, r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53;
        android.support.constraint.motion.utils.HyperSpline$Cubic $r4;
        float $f0;
        android.support.constraint.motion.utils.HyperSpline$Cubic[] r5;

        i12 := @parameter0: int;

        r0 := @parameter1: double[];

        r1 = newarray (double)[i12];

        r2 = newarray (double)[i12];

        r3 = newarray (double)[i12];

        i13 = i12 + -1;

        r1[0] = 0.5;

        i14 = 1;

     label1:
        if i14 >= i13 goto label2;

        $i11 = i14 - 1;

        $d51 = r1[$i11];

        $d52 = 4.0 - $d51;

        $d53 = 1.0 / $d52;

        r1[i14] = $d53;

        i14 = i14 + 1;

        goto label1;

     label2:
        $i0 = i13 - 1;

        $d0 = r1[$i0];

        $d1 = 2.0 - $d0;

        $d2 = 1.0 / $d1;

        r1[i13] = $d2;

        $d4 = r0[1];

        $d3 = r0[0];

        $d5 = $d4 - $d3;

        $d7 = 3.0 * $d5;

        $d6 = r1[0];

        $d8 = $d7 * $d6;

        r2[0] = $d8;

        i15 = 1;

     label3:
        if i15 >= i13 goto label4;

        $i8 = i15 + 1;

        $d44 = r0[$i8];

        $i9 = i15 - 1;

        $d43 = r0[$i9];

        $d45 = $d44 - $d43;

        $d47 = 3.0 * $d45;

        $i10 = i15 - 1;

        $d46 = r2[$i10];

        $d49 = $d47 - $d46;

        $d48 = r1[i15];

        $d50 = $d49 * $d48;

        r2[i15] = $d50;

        i15 = i15 + 1;

        goto label3;

     label4:
        $d10 = r0[i13];

        $i1 = i13 - 1;

        $d9 = r0[$i1];

        $d11 = $d10 - $d9;

        $d13 = 3.0 * $d11;

        $i2 = i13 - 1;

        $d12 = r2[$i2];

        $d15 = $d13 - $d12;

        $d14 = r1[i13];

        $d16 = $d15 * $d14;

        r2[i13] = $d16;

        $d17 = r2[i13];

        r3[i13] = $d17;

        i16 = i13 - 1;

     label5:
        if i16 < 0 goto label6;

        $d41 = r2[i16];

        $d39 = r1[i16];

        $i7 = i16 + 1;

        $d38 = r3[$i7];

        $d40 = $d39 * $d38;

        $d42 = $d41 - $d40;

        r3[i16] = $d42;

        i16 = i16 + -1;

        goto label5;

     label6:
        r5 = newarray (android.support.constraint.motion.utils.HyperSpline$Cubic)[i13];

        i17 = 0;

     label7:
        if i17 >= i13 goto label8;

        $r4 = new android.support.constraint.motion.utils.HyperSpline$Cubic;

        $d18 = r0[i17];

        $f0 = (float) $d18;

        $d37 = (double) $f0;

        $d36 = r3[i17];

        $i3 = i17 + 1;

        $d20 = r0[$i3];

        $d19 = r0[i17];

        $d21 = $d20 - $d19;

        $d24 = 3.0 * $d21;

        $d22 = r3[i17];

        $d23 = 2.0 * $d22;

        $d26 = $d24 - $d23;

        $i4 = i17 + 1;

        $d25 = r3[$i4];

        $d35 = $d26 - $d25;

        $d28 = r0[i17];

        $i5 = i17 + 1;

        $d27 = r0[$i5];

        $d29 = $d28 - $d27;

        $d31 = 2.0 * $d29;

        $d30 = r3[i17];

        $d33 = $d31 + $d30;

        $i6 = i17 + 1;

        $d32 = r3[$i6];

        $d34 = $d33 + $d32;

        specialinvoke $r4.<android.support.constraint.motion.utils.HyperSpline$Cubic: void <init>(double,double,double,double)>($d37, $d36, $d35, $d34);

        r5[i17] = $r4;

        i17 = i17 + 1;

        goto label7;

     label8:
        return r5;
    }

android.support.constraint.motion.utils.HyperSpline$Cubic
<android.support.constraint.motion.utils.HyperSpline$Cubic: double mA>
<android.support.constraint.motion.utils.HyperSpline$Cubic: double mB>
<android.support.constraint.motion.utils.HyperSpline$Cubic: double mC>
<android.support.constraint.motion.utils.HyperSpline$Cubic: double mD>
<android.support.constraint.motion.utils.HyperSpline$Cubic: double THIRD>
<android.support.constraint.motion.utils.HyperSpline$Cubic: double HALF>
    public void <init>(double, double, double, double)
    {
        android.support.constraint.motion.utils.HyperSpline$Cubic r0;
        double d0, d1, d2, d3;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline$Cubic;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mA> = d0;

        r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mB> = d1;

        r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mC> = d2;

        r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mD> = d3;

        return;
    }

    public double eval(double)
    {
        android.support.constraint.motion.utils.HyperSpline$Cubic r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline$Cubic;

        d0 := @parameter0: double;

        $d1 = r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mD>;

        $d3 = $d1 * d0;

        $d2 = r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mC>;

        $d4 = $d3 + $d2;

        $d6 = $d4 * d0;

        $d5 = r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mB>;

        $d7 = $d6 + $d5;

        $d9 = $d7 * d0;

        $d8 = r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mA>;

        $d10 = $d9 + $d8;

        return $d10;
    }

    public double vel(double)
    {
        android.support.constraint.motion.utils.HyperSpline$Cubic r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: android.support.constraint.motion.utils.HyperSpline$Cubic;

        d0 := @parameter0: double;

        $d1 = r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mD>;

        $d2 = $d1 * 0.3333333333333333;

        $d5 = $d2 * d0;

        $d3 = r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mC>;

        $d4 = $d3 * 0.5;

        $d6 = $d5 + $d4;

        $d8 = $d6 * d0;

        $d7 = r0.<android.support.constraint.motion.utils.HyperSpline$Cubic: double mB>;

        $d9 = $d8 + $d7;

        return $d9;
    }

