android.support.test.uiautomator.PointerGesture
<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>
<android.support.test.uiautomator.PointerGesture: long mDelay>
<android.support.test.uiautomator.PointerGesture: long mDuration>
    public void <init>(android.graphics.Point)
    {
        android.support.test.uiautomator.PointerGesture r0;
        android.graphics.Point r1;

        r0 := @this: android.support.test.uiautomator.PointerGesture;

        r1 := @parameter0: android.graphics.Point;

        specialinvoke r0.<android.support.test.uiautomator.PointerGesture: void <init>(android.graphics.Point,long)>(r1, 0L);

        return;
    }

    public void <init>(android.graphics.Point, long)
    {
        android.support.test.uiautomator.PointerGesture r0;
        android.graphics.Point r1;
        long l0;
        java.util.ArrayDeque $r2;
        byte $b1;
        android.support.test.uiautomator.PointerGesture$PointerPauseAction $r3;
        java.util.Deque $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.support.test.uiautomator.PointerGesture;

        r1 := @parameter0: android.graphics.Point;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions> = $r2;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("initialDelay cannot be negative");

        throw $r5;

     label1:
        $r4 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r3 = new android.support.test.uiautomator.PointerGesture$PointerPauseAction;

        specialinvoke $r3.<android.support.test.uiautomator.PointerGesture$PointerPauseAction: void <init>(android.graphics.Point,long)>(r1, 0L);

        interfaceinvoke $r4.<java.util.Deque: void addFirst(java.lang.Object)>($r3);

        r0.<android.support.test.uiautomator.PointerGesture: long mDelay> = l0;

        return;
    }

    public android.support.test.uiautomator.PointerGesture pause(long)
    {
        android.support.test.uiautomator.PointerGesture r0;
        long l0, $l2, $l3, $l4;
        byte $b1;
        android.support.test.uiautomator.PointerGesture$PointerPauseAction $r1;
        java.util.Deque $r2, $r3, $r7;
        java.lang.Object $r4, $r8;
        android.support.test.uiautomator.PointerGesture$PointerAction $r5, $r9;
        android.graphics.Point $r6;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: android.support.test.uiautomator.PointerGesture;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("time cannot be negative");

        throw $r10;

     label1:
        $r3 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r1 = new android.support.test.uiautomator.PointerGesture$PointerPauseAction;

        $r2 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r4 = interfaceinvoke $r2.<java.util.Deque: java.lang.Object peekLast()>();

        $r5 = (android.support.test.uiautomator.PointerGesture$PointerAction) $r4;

        $r6 = $r5.<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point end>;

        specialinvoke $r1.<android.support.test.uiautomator.PointerGesture$PointerPauseAction: void <init>(android.graphics.Point,long)>($r6, l0);

        interfaceinvoke $r3.<java.util.Deque: void addLast(java.lang.Object)>($r1);

        $l2 = r0.<android.support.test.uiautomator.PointerGesture: long mDuration>;

        $r7 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r8 = interfaceinvoke $r7.<java.util.Deque: java.lang.Object peekLast()>();

        $r9 = (android.support.test.uiautomator.PointerGesture$PointerAction) $r8;

        $l3 = $r9.<android.support.test.uiautomator.PointerGesture$PointerAction: long duration>;

        $l4 = $l2 + $l3;

        r0.<android.support.test.uiautomator.PointerGesture: long mDuration> = $l4;

        return r0;
    }

    public android.support.test.uiautomator.PointerGesture move(android.graphics.Point, int)
    {
        android.support.test.uiautomator.PointerGesture r0;
        android.graphics.Point r1, $r7;
        int i0;
        android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction $r2;
        java.util.Deque $r3, $r4, $r8;
        java.lang.Object $r5, $r9;
        android.support.test.uiautomator.PointerGesture$PointerAction $r6, $r10;
        long $l1, $l2, $l3;

        r0 := @this: android.support.test.uiautomator.PointerGesture;

        r1 := @parameter0: android.graphics.Point;

        i0 := @parameter1: int;

        $r4 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r2 = new android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction;

        $r3 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r5 = interfaceinvoke $r3.<java.util.Deque: java.lang.Object peekLast()>();

        $r6 = (android.support.test.uiautomator.PointerGesture$PointerAction) $r5;

        $r7 = $r6.<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point end>;

        specialinvoke $r2.<android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction: void <init>(android.graphics.Point,android.graphics.Point,int)>($r7, r1, i0);

        interfaceinvoke $r4.<java.util.Deque: void addLast(java.lang.Object)>($r2);

        $l1 = r0.<android.support.test.uiautomator.PointerGesture: long mDuration>;

        $r8 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r9 = interfaceinvoke $r8.<java.util.Deque: java.lang.Object peekLast()>();

        $r10 = (android.support.test.uiautomator.PointerGesture$PointerAction) $r9;

        $l2 = $r10.<android.support.test.uiautomator.PointerGesture$PointerAction: long duration>;

        $l3 = $l1 + $l2;

        r0.<android.support.test.uiautomator.PointerGesture: long mDuration> = $l3;

        return r0;
    }

    public android.graphics.Point start()
    {
        android.support.test.uiautomator.PointerGesture r0;
        java.util.Deque $r1;
        java.lang.Object $r2;
        android.support.test.uiautomator.PointerGesture$PointerAction $r3;
        android.graphics.Point $r4;

        r0 := @this: android.support.test.uiautomator.PointerGesture;

        $r1 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object peekFirst()>();

        $r3 = (android.support.test.uiautomator.PointerGesture$PointerAction) $r2;

        $r4 = $r3.<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point start>;

        return $r4;
    }

    public android.graphics.Point end()
    {
        android.support.test.uiautomator.PointerGesture r0;
        java.util.Deque $r1;
        java.lang.Object $r2;
        android.support.test.uiautomator.PointerGesture$PointerAction $r3;
        android.graphics.Point $r4;

        r0 := @this: android.support.test.uiautomator.PointerGesture;

        $r1 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object peekLast()>();

        $r3 = (android.support.test.uiautomator.PointerGesture$PointerAction) $r2;

        $r4 = $r3.<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point end>;

        return $r4;
    }

    public long duration()
    {
        android.support.test.uiautomator.PointerGesture r0;
        long $l0;

        r0 := @this: android.support.test.uiautomator.PointerGesture;

        $l0 = r0.<android.support.test.uiautomator.PointerGesture: long mDuration>;

        return $l0;
    }

    public long delay()
    {
        android.support.test.uiautomator.PointerGesture r0;
        long $l0;

        r0 := @this: android.support.test.uiautomator.PointerGesture;

        $l0 = r0.<android.support.test.uiautomator.PointerGesture: long mDelay>;

        return $l0;
    }

    public android.graphics.Point pointAt(long)
    {
        android.support.test.uiautomator.PointerGesture r0;
        java.util.Iterator r1;
        android.support.test.uiautomator.PointerGesture$PointerAction r2, $r6;
        byte $b0, $b3;
        long $l1, $l2, $l4, $l5, l6, l7;
        java.util.Deque $r3, $r4;
        boolean $z0;
        java.lang.Object $r5, $r8;
        android.graphics.Point $r7, $r9;
        float $f0, $f1, $f2;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: android.support.test.uiautomator.PointerGesture;

        l6 := @parameter0: long;

        $b0 = l6 cmp 0L;

        if $b0 >= 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Time cannot be negative");

        throw $r10;

     label1:
        $l1 = r0.<android.support.test.uiautomator.PointerGesture: long mDelay>;

        l7 = l6 - $l1;

        $r3 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        r1 = interfaceinvoke $r3.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.support.test.uiautomator.PointerGesture$PointerAction) $r8;

        $l2 = r2.<android.support.test.uiautomator.PointerGesture$PointerAction: long duration>;

        $b3 = l7 cmp $l2;

        if $b3 >= 0 goto label3;

        $f1 = (float) l7;

        $l5 = r2.<android.support.test.uiautomator.PointerGesture$PointerAction: long duration>;

        $f0 = (float) $l5;

        $f2 = $f1 / $f0;

        $r9 = virtualinvoke r2.<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point interpolate(float)>($f2);

        return $r9;

     label3:
        $l4 = r2.<android.support.test.uiautomator.PointerGesture$PointerAction: long duration>;

        l7 = l7 - $l4;

        goto label2;

     label4:
        $r4 = r0.<android.support.test.uiautomator.PointerGesture: java.util.Deque mActions>;

        $r5 = interfaceinvoke $r4.<java.util.Deque: java.lang.Object peekLast()>();

        $r6 = (android.support.test.uiautomator.PointerGesture$PointerAction) $r5;

        $r7 = $r6.<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point end>;

        return $r7;
    }

android.support.test.uiautomator.PointerGesture$PointerAction
<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point start>
<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point end>
<android.support.test.uiautomator.PointerGesture$PointerAction: long duration>
    public void <init>(android.graphics.Point, android.graphics.Point, long)
    {
        android.support.test.uiautomator.PointerGesture$PointerAction r0;
        android.graphics.Point r1, r2;
        long l0;

        r0 := @this: android.support.test.uiautomator.PointerGesture$PointerAction;

        r1 := @parameter0: android.graphics.Point;

        r2 := @parameter1: android.graphics.Point;

        l0 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point start> = r1;

        r0.<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point end> = r2;

        r0.<android.support.test.uiautomator.PointerGesture$PointerAction: long duration> = l0;

        return;
    }

<android.support.test.uiautomator.PointerGesture$PointerAction: android.graphics.Point interpolate(float)>
android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction
    public void <init>(android.graphics.Point, android.graphics.Point, int)
    {
        android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction r0;
        android.graphics.Point r1, r2;
        int i0;
        double $d0, $d1, $d2, $d3;
        long $l1;

        r0 := @this: android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction;

        r1 := @parameter0: android.graphics.Point;

        r2 := @parameter1: android.graphics.Point;

        i0 := @parameter2: int;

        $d0 = staticinvoke <android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction: double calcDistance(android.graphics.Point,android.graphics.Point)>(r1, r2);

        $d2 = 1000.0 * $d0;

        $d1 = (double) i0;

        $d3 = $d2 / $d1;

        $l1 = (long) $d3;

        specialinvoke r0.<android.support.test.uiautomator.PointerGesture$PointerAction: void <init>(android.graphics.Point,android.graphics.Point,long)>(r1, r2, $l1);

        return;
    }

    public android.graphics.Point interpolate(float)
    {
        android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction r0;
        float f0, $f1, $f2, $f3, $f4;
        android.graphics.Point r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction;

        f0 := @parameter0: float;

        $r2 = new android.graphics.Point;

        $r3 = r0.<android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction: android.graphics.Point start>;

        specialinvoke $r2.<android.graphics.Point: void <init>(android.graphics.Point)>($r3);

        r1 = $r2;

        $r4 = r0.<android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction: android.graphics.Point end>;

        $i1 = $r4.<android.graphics.Point: int x>;

        $r5 = r0.<android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction: android.graphics.Point start>;

        $i0 = $r5.<android.graphics.Point: int x>;

        $i2 = $i1 - $i0;

        $f1 = (float) $i2;

        $f2 = f0 * $f1;

        $i7 = (int) $f2;

        $r6 = r0.<android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction: android.graphics.Point end>;

        $i4 = $r6.<android.graphics.Point: int y>;

        $r7 = r0.<android.support.test.uiautomator.PointerGesture$PointerLinearMoveAction: android.graphics.Point start>;

        $i3 = $r7.<android.graphics.Point: int y>;

        $i5 = $i4 - $i3;

        $f3 = (float) $i5;

        $f4 = f0 * $f3;

        $i6 = (int) $f4;

        virtualinvoke r1.<android.graphics.Point: void offset(int,int)>($i7, $i6);

        return r1;
    }

    private static double calcDistance(android.graphics.Point, android.graphics.Point)
    {
        android.graphics.Point r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        double $d0, $d1;

        r0 := @parameter0: android.graphics.Point;

        r1 := @parameter1: android.graphics.Point;

        $i1 = r1.<android.graphics.Point: int x>;

        $i0 = r0.<android.graphics.Point: int x>;

        $i5 = $i1 - $i0;

        $i3 = r1.<android.graphics.Point: int x>;

        $i2 = r0.<android.graphics.Point: int x>;

        $i4 = $i3 - $i2;

        $i13 = $i5 * $i4;

        $i7 = r1.<android.graphics.Point: int y>;

        $i6 = r0.<android.graphics.Point: int y>;

        $i11 = $i7 - $i6;

        $i9 = r1.<android.graphics.Point: int y>;

        $i8 = r0.<android.graphics.Point: int y>;

        $i10 = $i9 - $i8;

        $i12 = $i11 * $i10;

        $i14 = $i13 + $i12;

        $d0 = (double) $i14;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        return $d1;
    }

android.support.test.uiautomator.PointerGesture$PointerPauseAction
    public void <init>(android.graphics.Point, long)
    {
        android.support.test.uiautomator.PointerGesture$PointerPauseAction r0;
        android.graphics.Point r1;
        long l0;

        r0 := @this: android.support.test.uiautomator.PointerGesture$PointerPauseAction;

        r1 := @parameter0: android.graphics.Point;

        l0 := @parameter1: long;

        specialinvoke r0.<android.support.test.uiautomator.PointerGesture$PointerAction: void <init>(android.graphics.Point,android.graphics.Point,long)>(r1, r1, l0);

        return;
    }

    public android.graphics.Point interpolate(float)
    {
        android.support.test.uiautomator.PointerGesture$PointerPauseAction r0;
        float f0;
        android.graphics.Point $r1, $r2;

        r0 := @this: android.support.test.uiautomator.PointerGesture$PointerPauseAction;

        f0 := @parameter0: float;

        $r1 = new android.graphics.Point;

        $r2 = r0.<android.support.test.uiautomator.PointerGesture$PointerPauseAction: android.graphics.Point start>;

        specialinvoke $r1.<android.graphics.Point: void <init>(android.graphics.Point)>($r2);

        return $r1;
    }

