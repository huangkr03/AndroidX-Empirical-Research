android.support.constraint.motion.utils.MonotonicCurveFit
<android.support.constraint.motion.utils.MonotonicCurveFit: java.lang.String TAG>
<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>
<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>
<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>
    public void <init>(double[], double[][])
    {
        android.support.constraint.motion.utils.MonotonicCurveFit r0;
        double[] r1, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        double[][] r2, r3, r4;
        int i0, i1, $i2, $i3, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27;
        byte $b4, $b6;

        r0 := @this: android.support.constraint.motion.utils.MonotonicCurveFit;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        specialinvoke r0.<android.support.constraint.motion.utils.CurveFit: void <init>()>();

        i0 = lengthof r1;

        $r5 = r2[0];

        i1 = lengthof $r5;

        $i2 = i0 - 1;

        r3 = newmultiarray (double)[$i2][i1];

        r4 = newmultiarray (double)[i0][i1];

        i15 = 0;

     label01:
        if i15 >= i1 goto label06;

        i16 = 0;

     label02:
        $i9 = i0 - 1;

        if i16 >= $i9 goto label05;

        $i12 = i16 + 1;

        $d16 = r1[$i12];

        $d15 = r1[i16];

        d26 = $d16 - $d15;

        $r21 = r3[i16];

        $i13 = i16 + 1;

        $r19 = r2[$i13];

        $d18 = $r19[i15];

        $r20 = r2[i16];

        $d17 = $r20[i15];

        $d19 = $d18 - $d17;

        $d20 = $d19 / d26;

        $r21[i15] = $d20;

        if i16 != 0 goto label03;

        $r26 = r4[i16];

        $r25 = r3[i16];

        $d25 = $r25[i15];

        $r26[i15] = $d25;

        goto label04;

     label03:
        $r24 = r4[i16];

        $i14 = i16 - 1;

        $r22 = r3[$i14];

        $d22 = $r22[i15];

        $r23 = r3[i16];

        $d21 = $r23[i15];

        $d23 = $d22 + $d21;

        $d24 = $d23 * 0.5;

        $r24[i15] = $d24;

     label04:
        i16 = i16 + 1;

        goto label02;

     label05:
        $i10 = i0 - 1;

        $r18 = r4[$i10];

        $i11 = i0 - 2;

        $r17 = r3[$i11];

        $d14 = $r17[i15];

        $r18[i15] = $d14;

        i15 = i15 + 1;

        goto label01;

     label06:
        i17 = 0;

     label07:
        $i3 = i0 - 1;

        if i17 >= $i3 goto label12;

        i18 = 0;

     label08:
        if i18 >= i1 goto label11;

        $r6 = r3[i17];

        $d3 = $r6[i18];

        $b4 = $d3 cmpl 0.0;

        if $b4 != 0 goto label09;

        $r15 = r4[i17];

        $r15[i18] = 0.0;

        $i8 = i17 + 1;

        $r16 = r4[$i8];

        $r16[i18] = 0.0;

        goto label10;

     label09:
        $r7 = r4[i17];

        $d5 = $r7[i18];

        $r8 = r3[i17];

        $d4 = $r8[i18];

        d27 = $d5 / $d4;

        $i5 = i17 + 1;

        $r9 = r4[$i5];

        $d7 = $r9[i18];

        $r10 = r3[i17];

        $d6 = $r10[i18];

        d0 = $d7 / $d6;

        d1 = staticinvoke <java.lang.Math: double hypot(double,double)>(d27, d0);

        $b6 = d1 cmpl 9.0;

        if $b6 <= 0 goto label10;

        d2 = 3.0 / d1;

        $r12 = r4[i17];

        $d9 = d2 * d27;

        $r11 = r3[i17];

        $d8 = $r11[i18];

        $d10 = $d9 * $d8;

        $r12[i18] = $d10;

        $i7 = i17 + 1;

        $r14 = r4[$i7];

        $d12 = d2 * d0;

        $r13 = r3[i17];

        $d11 = $r13[i18];

        $d13 = $d12 * $d11;

        $r14[i18] = $d13;

     label10:
        i18 = i18 + 1;

        goto label08;

     label11:
        i17 = i17 + 1;

        goto label07;

     label12:
        r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT> = r1;

        r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY> = r2;

        r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent> = r4;

        return;
    }

    public void getPos(double, double[])
    {
        android.support.constraint.motion.utils.MonotonicCurveFit r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18;
        double[] r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        int i0, i1, $i3, $i5, $i7, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17;
        double[][] $r3, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        byte $b2, $b4, $b6, $b8;

        r0 := @this: android.support.constraint.motion.utils.MonotonicCurveFit;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $r2 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        i0 = lengthof $r2;

        $r3 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        $r5 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d6 = $r5[0];

        $b2 = d0 cmpg $d6;

        if $b2 > 0 goto label03;

        i13 = 0;

     label01:
        if i13 >= i1 goto label02;

        $r24 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r25 = $r24[0];

        $d17 = $r25[i13];

        r1[i13] = $d17;

        i13 = i13 + 1;

        goto label01;

     label02:
        return;

     label03:
        $r6 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i3 = i0 - 1;

        $d7 = $r6[$i3];

        $b4 = d0 cmpl $d7;

        if $b4 < 0 goto label06;

        i14 = 0;

     label04:
        if i14 >= i1 goto label05;

        $r22 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $i12 = i0 - 1;

        $r23 = $r22[$i12];

        $d16 = $r23[i14];

        r1[i14] = $d16;

        i14 = i14 + 1;

        goto label04;

     label05:
        return;

     label06:
        i15 = 0;

     label07:
        $i5 = i0 - 1;

        if i15 >= $i5 goto label13;

        $r7 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d8 = $r7[i15];

        $b6 = d0 cmpl $d8;

        if $b6 != 0 goto label09;

        i16 = 0;

     label08:
        if i16 >= i1 goto label09;

        $r20 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r21 = $r20[i15];

        $d15 = $r21[i16];

        r1[i16] = $d15;

        i16 = i16 + 1;

        goto label08;

     label09:
        $r8 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i7 = i15 + 1;

        $d9 = $r8[$i7];

        $b8 = d0 cmpg $d9;

        if $b8 >= 0 goto label12;

        $r9 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i9 = i15 + 1;

        $d11 = $r9[$i9];

        $r10 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d10 = $r10[i15];

        d18 = $d11 - $d10;

        $r11 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d12 = $r11[i15];

        $d13 = d0 - $d12;

        d1 = $d13 / d18;

        i17 = 0;

     label10:
        if i17 >= i1 goto label11;

        $r12 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r13 = $r12[i15];

        d2 = $r13[i17];

        $r14 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $i10 = i15 + 1;

        $r15 = $r14[$i10];

        d3 = $r15[i17];

        $r16 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $r17 = $r16[i15];

        d4 = $r17[i17];

        $r18 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $i11 = i15 + 1;

        $r19 = $r18[$i11];

        d5 = $r19[i17];

        $d14 = staticinvoke <android.support.constraint.motion.utils.MonotonicCurveFit: double interpolate(double,double,double,double,double,double)>(d18, d1, d2, d3, d4, d5);

        r1[i17] = $d14;

        i17 = i17 + 1;

        goto label10;

     label11:
        return;

     label12:
        i15 = i15 + 1;

        goto label07;

     label13:
        return;
    }

    public void getPos(double, float[])
    {
        android.support.constraint.motion.utils.MonotonicCurveFit r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18;
        float[] r1;
        int i0, i1, $i3, $i5, $i7, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17;
        double[] $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        double[][] $r3, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        byte $b2, $b4, $b6, $b8;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.support.constraint.motion.utils.MonotonicCurveFit;

        d0 := @parameter0: double;

        r1 := @parameter1: float[];

        $r2 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        i0 = lengthof $r2;

        $r3 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        $r5 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d6 = $r5[0];

        $b2 = d0 cmpg $d6;

        if $b2 > 0 goto label03;

        i13 = 0;

     label01:
        if i13 >= i1 goto label02;

        $r24 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r25 = $r24[0];

        $d17 = $r25[i13];

        $f3 = (float) $d17;

        r1[i13] = $f3;

        i13 = i13 + 1;

        goto label01;

     label02:
        return;

     label03:
        $r6 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i3 = i0 - 1;

        $d7 = $r6[$i3];

        $b4 = d0 cmpl $d7;

        if $b4 < 0 goto label06;

        i14 = 0;

     label04:
        if i14 >= i1 goto label05;

        $r22 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $i12 = i0 - 1;

        $r23 = $r22[$i12];

        $d16 = $r23[i14];

        $f2 = (float) $d16;

        r1[i14] = $f2;

        i14 = i14 + 1;

        goto label04;

     label05:
        return;

     label06:
        i15 = 0;

     label07:
        $i5 = i0 - 1;

        if i15 >= $i5 goto label13;

        $r7 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d8 = $r7[i15];

        $b6 = d0 cmpl $d8;

        if $b6 != 0 goto label09;

        i16 = 0;

     label08:
        if i16 >= i1 goto label09;

        $r20 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r21 = $r20[i15];

        $d15 = $r21[i16];

        $f1 = (float) $d15;

        r1[i16] = $f1;

        i16 = i16 + 1;

        goto label08;

     label09:
        $r8 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i7 = i15 + 1;

        $d9 = $r8[$i7];

        $b8 = d0 cmpg $d9;

        if $b8 >= 0 goto label12;

        $r9 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i9 = i15 + 1;

        $d11 = $r9[$i9];

        $r10 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d10 = $r10[i15];

        d18 = $d11 - $d10;

        $r11 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d12 = $r11[i15];

        $d13 = d0 - $d12;

        d1 = $d13 / d18;

        i17 = 0;

     label10:
        if i17 >= i1 goto label11;

        $r12 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r13 = $r12[i15];

        d2 = $r13[i17];

        $r14 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $i10 = i15 + 1;

        $r15 = $r14[$i10];

        d3 = $r15[i17];

        $r16 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $r17 = $r16[i15];

        d4 = $r17[i17];

        $r18 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $i11 = i15 + 1;

        $r19 = $r18[$i11];

        d5 = $r19[i17];

        $d14 = staticinvoke <android.support.constraint.motion.utils.MonotonicCurveFit: double interpolate(double,double,double,double,double,double)>(d18, d1, d2, d3, d4, d5);

        $f0 = (float) $d14;

        r1[i17] = $f0;

        i17 = i17 + 1;

        goto label10;

     label11:
        return;

     label12:
        i15 = i15 + 1;

        goto label07;

     label13:
        return;
    }

    public double getPos(double, int)
    {
        android.support.constraint.motion.utils.MonotonicCurveFit r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        int i0, i1, $i3, $i5, $i7, $i9, $i10, $i11, $i12, i13;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22;
        byte $b2, $b4, $b6, $b8;
        double[][] $r9, $r11, $r13, $r15, $r17, $r19, $r21;

        r0 := @this: android.support.constraint.motion.utils.MonotonicCurveFit;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $r1 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        i1 = lengthof $r1;

        $r2 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d7 = $r2[0];

        $b2 = d0 cmpg $d7;

        if $b2 > 0 goto label1;

        $r21 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r22 = $r21[0];

        $d18 = $r22[i0];

        return $d18;

     label1:
        $r3 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i3 = i1 - 1;

        $d8 = $r3[$i3];

        $b4 = d0 cmpl $d8;

        if $b4 < 0 goto label2;

        $r19 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $i12 = i1 - 1;

        $r20 = $r19[$i12];

        $d17 = $r20[i0];

        return $d17;

     label2:
        i13 = 0;

     label3:
        $i5 = i1 - 1;

        if i13 >= $i5 goto label6;

        $r4 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d9 = $r4[i13];

        $b6 = d0 cmpl $d9;

        if $b6 != 0 goto label4;

        $r17 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r18 = $r17[i13];

        $d16 = $r18[i0];

        return $d16;

     label4:
        $r5 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i7 = i13 + 1;

        $d10 = $r5[$i7];

        $b8 = d0 cmpg $d10;

        if $b8 >= 0 goto label5;

        $r6 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i9 = i13 + 1;

        $d12 = $r6[$i9];

        $r7 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d11 = $r7[i13];

        d1 = $d12 - $d11;

        $r8 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d13 = $r8[i13];

        $d14 = d0 - $d13;

        d2 = $d14 / d1;

        $r9 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r10 = $r9[i13];

        d3 = $r10[i0];

        $r11 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $i10 = i13 + 1;

        $r12 = $r11[$i10];

        d4 = $r12[i0];

        $r13 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $r14 = $r13[i13];

        d5 = $r14[i0];

        $r15 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $i11 = i13 + 1;

        $r16 = $r15[$i11];

        d6 = $r16[i0];

        $d15 = staticinvoke <android.support.constraint.motion.utils.MonotonicCurveFit: double interpolate(double,double,double,double,double,double)>(d1, d2, d3, d4, d5, d6);

        return $d15;

     label5:
        i13 = i13 + 1;

        goto label3;

     label6:
        return 0.0;
    }

    public void getSlope(double, double[])
    {
        android.support.constraint.motion.utils.MonotonicCurveFit r0;
        double[] r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r14, $r16, $r18, $r19, $r20;
        int i0, i1, $i3, $i5, $i7, $i8, $i9, $i10, i11, $i12, i13;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15;
        double[][] $r3, $r11, $r13, $r15, $r17;
        byte $b2, $b4, $b6;

        r0 := @this: android.support.constraint.motion.utils.MonotonicCurveFit;

        d15 := @parameter0: double;

        r1 := @parameter1: double[];

        $r2 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        i0 = lengthof $r2;

        $r3 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        $r5 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d6 = $r5[0];

        $b2 = d15 cmpg $d6;

        if $b2 > 0 goto label1;

        $r20 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        d15 = $r20[0];

        goto label2;

     label1:
        $r6 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i3 = i0 - 1;

        $d7 = $r6[$i3];

        $b4 = d15 cmpl $d7;

        if $b4 < 0 goto label2;

        $r19 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i10 = i0 - 1;

        d15 = $r19[$i10];

     label2:
        i11 = 0;

     label3:
        $i12 = i0 - 1;

        if i11 >= $i12 goto label7;

        $r7 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i5 = i11 + 1;

        $d8 = $r7[$i5];

        $b6 = d15 cmpg $d8;

        if $b6 > 0 goto label6;

        $r8 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i7 = i11 + 1;

        $d10 = $r8[$i7];

        $r9 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d9 = $r9[i11];

        d0 = $d10 - $d9;

        $r10 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d11 = $r10[i11];

        $d12 = d15 - $d11;

        d1 = $d12 / d0;

        i13 = 0;

     label4:
        if i13 >= i1 goto label5;

        $r11 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r12 = $r11[i11];

        d2 = $r12[i13];

        $r13 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $i8 = i11 + 1;

        $r14 = $r13[$i8];

        d3 = $r14[i13];

        $r15 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $r16 = $r15[i11];

        d4 = $r16[i13];

        $r17 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $i9 = i11 + 1;

        $r18 = $r17[$i9];

        d5 = $r18[i13];

        $d13 = staticinvoke <android.support.constraint.motion.utils.MonotonicCurveFit: double diff(double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5);

        $d14 = $d13 / d0;

        r1[i13] = $d14;

        i13 = i13 + 1;

        goto label4;

     label5:
        goto label7;

     label6:
        i11 = i11 + 1;

        goto label3;

     label7:
        return;
    }

    public double getSlope(double, int)
    {
        android.support.constraint.motion.utils.MonotonicCurveFit r0;
        int i0, i1, $i3, $i5, $i7, $i8, $i9, $i10, i11, $i12;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r11, $r13, $r15, $r16, $r17;
        byte $b2, $b4, $b6;
        double[][] $r8, $r10, $r12, $r14;

        r0 := @this: android.support.constraint.motion.utils.MonotonicCurveFit;

        d15 := @parameter0: double;

        i0 := @parameter1: int;

        $r1 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        i1 = lengthof $r1;

        $r2 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d6 = $r2[0];

        $b2 = d15 cmpg $d6;

        if $b2 >= 0 goto label1;

        $r17 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        d15 = $r17[0];

        goto label2;

     label1:
        $r3 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i3 = i1 - 1;

        $d7 = $r3[$i3];

        $b4 = d15 cmpl $d7;

        if $b4 < 0 goto label2;

        $r16 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i10 = i1 - 1;

        d15 = $r16[$i10];

     label2:
        i11 = 0;

     label3:
        $i12 = i1 - 1;

        if i11 >= $i12 goto label5;

        $r4 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i5 = i11 + 1;

        $d8 = $r4[$i5];

        $b6 = d15 cmpg $d8;

        if $b6 > 0 goto label4;

        $r5 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $i7 = i11 + 1;

        $d10 = $r5[$i7];

        $r6 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d9 = $r6[i11];

        d0 = $d10 - $d9;

        $r7 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        $d11 = $r7[i11];

        $d12 = d15 - $d11;

        d1 = $d12 / d0;

        $r8 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $r9 = $r8[i11];

        d2 = $r9[i0];

        $r10 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mY>;

        $i8 = i11 + 1;

        $r11 = $r10[$i8];

        d3 = $r11[i0];

        $r12 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $r13 = $r12[i11];

        d4 = $r13[i0];

        $r14 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[][] mTangent>;

        $i9 = i11 + 1;

        $r15 = $r14[$i9];

        d5 = $r15[i0];

        $d13 = staticinvoke <android.support.constraint.motion.utils.MonotonicCurveFit: double diff(double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5);

        $d14 = $d13 / d0;

        return $d14;

     label4:
        i11 = i11 + 1;

        goto label3;

     label5:
        return 0.0;
    }

    public double[] getTimePoints()
    {
        android.support.constraint.motion.utils.MonotonicCurveFit r0;
        double[] $r1;

        r0 := @this: android.support.constraint.motion.utils.MonotonicCurveFit;

        $r1 = r0.<android.support.constraint.motion.utils.MonotonicCurveFit: double[] mT>;

        return $r1;
    }

    private static double interpolate(double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 = d1 * d1;

        d7 = d6 * d1;

        $d8 = -2.0 * d7;

        $d11 = $d8 * d3;

        $d9 = 3.0 * d6;

        $d10 = $d9 * d3;

        $d14 = $d11 + $d10;

        $d12 = 2.0 * d7;

        $d13 = $d12 * d2;

        $d17 = $d14 + $d13;

        $d15 = 3.0 * d6;

        $d16 = $d15 * d2;

        $d18 = $d17 - $d16;

        $d21 = $d18 + d2;

        $d19 = d0 * d5;

        $d20 = $d19 * d7;

        $d24 = $d21 + $d20;

        $d22 = d0 * d4;

        $d23 = $d22 * d7;

        $d27 = $d24 + $d23;

        $d25 = d0 * d5;

        $d26 = $d25 * d6;

        $d31 = $d27 - $d26;

        $d28 = 2.0 * d0;

        $d29 = $d28 * d4;

        $d30 = $d29 * d6;

        $d34 = $d31 - $d30;

        $d32 = d0 * d4;

        $d33 = $d32 * d1;

        $d35 = $d34 + $d33;

        return $d35;
    }

    private static double diff(double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 = d1 * d1;

        $d7 = -6.0 * d6;

        $d10 = $d7 * d3;

        $d8 = 6.0 * d1;

        $d9 = $d8 * d3;

        $d13 = $d10 + $d9;

        $d11 = 6.0 * d6;

        $d12 = $d11 * d2;

        $d16 = $d13 + $d12;

        $d14 = 6.0 * d1;

        $d15 = $d14 * d2;

        $d20 = $d16 - $d15;

        $d17 = 3.0 * d0;

        $d18 = $d17 * d5;

        $d19 = $d18 * d6;

        $d24 = $d20 + $d19;

        $d21 = 3.0 * d0;

        $d22 = $d21 * d4;

        $d23 = $d22 * d6;

        $d28 = $d24 + $d23;

        $d25 = 2.0 * d0;

        $d26 = $d25 * d5;

        $d27 = $d26 * d1;

        $d32 = $d28 - $d27;

        $d29 = 4.0 * d0;

        $d30 = $d29 * d4;

        $d31 = $d30 * d1;

        $d34 = $d32 - $d31;

        $d33 = d0 * d4;

        $d35 = $d34 + $d33;

        return $d35;
    }

