android.support.v4.provider.FontsContractCompat
<android.support.v4.provider.FontsContractCompat: java.lang.String TAG>
<android.support.v4.provider.FontsContractCompat: java.lang.String PARCEL_FONT_RESULTS>
<android.support.v4.provider.FontsContractCompat: int RESULT_CODE_PROVIDER_NOT_FOUND>
<android.support.v4.provider.FontsContractCompat: int RESULT_CODE_WRONG_CERTIFICATES>
<android.support.v4.provider.FontsContractCompat: android.support.v4.util.LruCache sTypefaceCache>
<android.support.v4.provider.FontsContractCompat: int BACKGROUND_THREAD_KEEP_ALIVE_DURATION_MS>
<android.support.v4.provider.FontsContractCompat: android.support.v4.provider.SelfDestructiveThread sBackgroundThread>
<android.support.v4.provider.FontsContractCompat: java.lang.Object sLock>
<android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies>
<android.support.v4.provider.FontsContractCompat: java.util.Comparator sByteArrayComparator>
    private void <init>()
    {
        android.support.v4.provider.FontsContractCompat r0;

        r0 := @this: android.support.v4.provider.FontsContractCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.support.v4.provider.FontsContractCompat$TypefaceResult getFontInternal(android.content.Context, android.support.v4.provider.FontRequest, int)
    {
        android.content.Context r0;
        android.support.v4.provider.FontRequest r1;
        int i0, $i1, $i2;
        android.support.v4.provider.FontsContractCompat$FontFamilyResult r2;
        android.support.v4.provider.FontsContractCompat$TypefaceResult $r3, $r5, $r8;
        android.support.v4.provider.FontsContractCompat$FontInfo[] $r4;
        java.lang.Throwable $r7, r9;
        android.graphics.Typeface r10;
        byte $b3, $b4, b5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.support.v4.provider.FontRequest;

        i0 := @parameter2: int;

     label1:
        r2 = staticinvoke <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,android.support.v4.provider.FontRequest)>(r0, null, r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = new android.support.v4.provider.FontsContractCompat$TypefaceResult;

        specialinvoke $r8.<android.support.v4.provider.FontsContractCompat$TypefaceResult: void <init>(android.graphics.Typeface,int)>(null, -1);

        return $r8;

     label4:
        $i1 = virtualinvoke r2.<android.support.v4.provider.FontsContractCompat$FontFamilyResult: int getStatusCode()>();

        if $i1 != 0 goto label7;

        $r4 = virtualinvoke r2.<android.support.v4.provider.FontsContractCompat$FontFamilyResult: android.support.v4.provider.FontsContractCompat$FontInfo[] getFonts()>();

        r10 = staticinvoke <android.support.v4.graphics.TypefaceCompat: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,android.support.v4.provider.FontsContractCompat$FontInfo[],int)>(r0, null, $r4, i0);

        $r5 = new android.support.v4.provider.FontsContractCompat$TypefaceResult;

        if r10 == null goto label5;

        $b3 = 0;

        goto label6;

     label5:
        $b3 = -3;

     label6:
        specialinvoke $r5.<android.support.v4.provider.FontsContractCompat$TypefaceResult: void <init>(android.graphics.Typeface,int)>(r10, $b3);

        return $r5;

     label7:
        $i2 = virtualinvoke r2.<android.support.v4.provider.FontsContractCompat$FontFamilyResult: int getStatusCode()>();

        if $i2 != 1 goto label8;

        $b4 = -2;

        goto label9;

     label8:
        $b4 = -3;

     label9:
        b5 = $b4;

        $r3 = new android.support.v4.provider.FontsContractCompat$TypefaceResult;

        specialinvoke $r3.<android.support.v4.provider.FontsContractCompat$TypefaceResult: void <init>(android.graphics.Typeface,int)>(null, b5);

        return $r3;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public static void resetCache()
    {
        android.support.v4.util.LruCache $r0;

        $r0 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.LruCache sTypefaceCache>;

        virtualinvoke $r0.<android.support.v4.util.LruCache: void evictAll()>();

        return;
    }

    public static android.graphics.Typeface getFontSync(android.content.Context, android.support.v4.provider.FontRequest, android.support.v4.content.res.ResourcesCompat$FontCallback, android.os.Handler, boolean, int, int)
    {
        android.content.Context r0;
        android.support.v4.provider.FontRequest r1;
        android.support.v4.content.res.ResourcesCompat$FontCallback r2;
        android.os.Handler r3;
        boolean z0, $z1;
        int i0, i1, $i2, $i3;
        java.lang.String r4, $r10;
        android.graphics.Typeface r5, $r29, $r30, $r34;
        java.lang.Object r6, $r15, $r17, $r24, $r27;
        java.util.ArrayList r7, $r21, $r25;
        java.lang.Throwable r8, $r31, $r32;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;
        android.support.v4.util.LruCache $r14;
        android.support.v4.provider.FontsContractCompat$1 $r16, r35;
        android.support.v4.util.SimpleArrayMap $r18, $r22, $r23;
        android.support.v4.provider.FontsContractCompat$3 $r19;
        android.support.v4.provider.SelfDestructiveThread $r20, $r26;
        android.support.v4.provider.FontsContractCompat$TypefaceResult $r28, r33;
        android.support.v4.provider.FontsContractCompat$2 $r36, r37;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.support.v4.provider.FontRequest;

        r2 := @parameter2: android.support.v4.content.res.ResourcesCompat$FontCallback;

        r3 := @parameter3: android.os.Handler;

        z0 := @parameter4: boolean;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r1.<android.support.v4.provider.FontRequest: java.lang.String getIdentifier()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.LruCache sTypefaceCache>;

        $r15 = virtualinvoke $r14.<android.support.v4.util.LruCache: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (android.graphics.Typeface) $r15;

        if r5 == null goto label02;

        if r2 == null goto label01;

        virtualinvoke r2.<android.support.v4.content.res.ResourcesCompat$FontCallback: void onFontRetrieved(android.graphics.Typeface)>(r5);

     label01:
        return r5;

     label02:
        if z0 == 0 goto label05;

        if i0 != -1 goto label05;

        r33 = staticinvoke <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.FontsContractCompat$TypefaceResult getFontInternal(android.content.Context,android.support.v4.provider.FontRequest,int)>(r0, r1, i1);

        if r2 == null goto label04;

        $i2 = r33.<android.support.v4.provider.FontsContractCompat$TypefaceResult: int mResult>;

        if $i2 != 0 goto label03;

        $r30 = r33.<android.support.v4.provider.FontsContractCompat$TypefaceResult: android.graphics.Typeface mTypeface>;

        virtualinvoke r2.<android.support.v4.content.res.ResourcesCompat$FontCallback: void callbackSuccessAsync(android.graphics.Typeface,android.os.Handler)>($r30, r3);

        goto label04;

     label03:
        $i3 = r33.<android.support.v4.provider.FontsContractCompat$TypefaceResult: int mResult>;

        virtualinvoke r2.<android.support.v4.content.res.ResourcesCompat$FontCallback: void callbackFailAsync(int,android.os.Handler)>($i3, r3);

     label04:
        $r34 = r33.<android.support.v4.provider.FontsContractCompat$TypefaceResult: android.graphics.Typeface mTypeface>;

        return $r34;

     label05:
        $r16 = new android.support.v4.provider.FontsContractCompat$1;

        specialinvoke $r16.<android.support.v4.provider.FontsContractCompat$1: void <init>(android.content.Context,android.support.v4.provider.FontRequest,int,java.lang.String)>(r0, r1, i1, r4);

        r35 = $r16;

        if z0 == 0 goto label09;

     label06:
        $r26 = <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.SelfDestructiveThread sBackgroundThread>;

        $r27 = virtualinvoke $r26.<android.support.v4.provider.SelfDestructiveThread: java.lang.Object postAndWait(java.util.concurrent.Callable,int)>(r35, i0);

        $r28 = (android.support.v4.provider.FontsContractCompat$TypefaceResult) $r27;

        $r29 = $r28.<android.support.v4.provider.FontsContractCompat$TypefaceResult: android.graphics.Typeface mTypeface>;

     label07:
        return $r29;

     label08:
        $r32 := @caughtexception;

        return null;

     label09:
        if r2 != null goto label10;

        $r36 = null;

        goto label11;

     label10:
        $r36 = new android.support.v4.provider.FontsContractCompat$2;

        specialinvoke $r36.<android.support.v4.provider.FontsContractCompat$2: void <init>(android.support.v4.content.res.ResourcesCompat$FontCallback,android.os.Handler)>(r2, r3);

     label11:
        r37 = $r36;

        $r17 = <android.support.v4.provider.FontsContractCompat: java.lang.Object sLock>;

        r6 = $r17;

        entermonitor $r17;

     label12:
        $r18 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies>;

        $z1 = virtualinvoke $r18.<android.support.v4.util.SimpleArrayMap: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label15;

        if r37 == null goto label13;

        $r23 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies>;

        $r24 = virtualinvoke $r23.<android.support.v4.util.SimpleArrayMap: java.lang.Object get(java.lang.Object)>(r4);

        $r25 = (java.util.ArrayList) $r24;

        virtualinvoke $r25.<java.util.ArrayList: boolean add(java.lang.Object)>(r37);

     label13:
        exitmonitor r6;

     label14:
        return null;

     label15:
        if r37 == null goto label16;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r7 = $r21;

        virtualinvoke r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r37);

        $r22 = <android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies>;

        virtualinvoke $r22.<android.support.v4.util.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r7);

     label16:
        exitmonitor r6;

     label17:
        goto label20;

     label18:
        $r31 := @caughtexception;

        r8 = $r31;

        exitmonitor r6;

     label19:
        throw r8;

     label20:
        $r20 = <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.SelfDestructiveThread sBackgroundThread>;

        $r19 = new android.support.v4.provider.FontsContractCompat$3;

        specialinvoke $r19.<android.support.v4.provider.FontsContractCompat$3: void <init>(java.lang.String)>(r4);

        virtualinvoke $r20.<android.support.v4.provider.SelfDestructiveThread: void postAndReply(java.util.concurrent.Callable,android.support.v4.provider.SelfDestructiveThread$ReplyCallback)>(r35, $r19);

        return null;

        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label12 to label14 with label18;
        catch java.lang.Throwable from label15 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public static void requestFont(android.content.Context, android.support.v4.provider.FontRequest, android.support.v4.provider.FontsContractCompat$FontRequestCallback, android.os.Handler)
    {
        android.content.Context r0;
        android.support.v4.provider.FontRequest r1;
        android.support.v4.provider.FontsContractCompat$FontRequestCallback r2;
        android.os.Handler r3, r4, $r5;
        android.support.v4.provider.FontsContractCompat$4 $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.support.v4.provider.FontRequest;

        r2 := @parameter2: android.support.v4.provider.FontsContractCompat$FontRequestCallback;

        r3 := @parameter3: android.os.Handler;

        $r5 = new android.os.Handler;

        specialinvoke $r5.<android.os.Handler: void <init>()>();

        r4 = $r5;

        $r6 = new android.support.v4.provider.FontsContractCompat$4;

        specialinvoke $r6.<android.support.v4.provider.FontsContractCompat$4: void <init>(android.content.Context,android.support.v4.provider.FontRequest,android.os.Handler,android.support.v4.provider.FontsContractCompat$FontRequestCallback)>(r0, r1, r4, r2);

        virtualinvoke r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        return;
    }

    public static android.graphics.Typeface buildTypeface(android.content.Context, android.os.CancellationSignal, android.support.v4.provider.FontsContractCompat$FontInfo[])
    {
        android.content.Context r0;
        android.os.CancellationSignal r1;
        android.support.v4.provider.FontsContractCompat$FontInfo[] r2;
        android.graphics.Typeface $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.CancellationSignal;

        r2 := @parameter2: android.support.v4.provider.FontsContractCompat$FontInfo[];

        $r3 = staticinvoke <android.support.v4.graphics.TypefaceCompat: android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,android.support.v4.provider.FontsContractCompat$FontInfo[],int)>(r0, r1, r2, 0);

        return $r3;
    }

    public static java.util.Map prepareFontData(android.content.Context, android.support.v4.provider.FontsContractCompat$FontInfo[], android.os.CancellationSignal)
    {
        android.content.Context r0;
        android.support.v4.provider.FontsContractCompat$FontInfo[] r1, r4;
        android.os.CancellationSignal r2;
        java.util.HashMap r3, $r8;
        int i0, $i1, i2;
        android.support.v4.provider.FontsContractCompat$FontInfo r5;
        android.net.Uri r6;
        java.nio.ByteBuffer r7;
        java.util.Map $r9;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.support.v4.provider.FontsContractCompat$FontInfo[];

        r2 := @parameter2: android.os.CancellationSignal;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r3 = $r8;

        r4 = r1;

        i0 = lengthof r4;

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        r5 = r4[i2];

        $i1 = virtualinvoke r5.<android.support.v4.provider.FontsContractCompat$FontInfo: int getResultCode()>();

        if $i1 == 0 goto label2;

        goto label4;

     label2:
        r6 = virtualinvoke r5.<android.support.v4.provider.FontsContractCompat$FontInfo: android.net.Uri getUri()>();

        $z0 = virtualinvoke r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        r7 = staticinvoke <android.support.v4.graphics.TypefaceCompatUtil: java.nio.ByteBuffer mmap(android.content.Context,android.os.CancellationSignal,android.net.Uri)>(r0, r2, r6);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r3);

        return $r9;
    }

    public static android.support.v4.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context, android.os.CancellationSignal, android.support.v4.provider.FontRequest) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.Context r0;
        android.os.CancellationSignal r1;
        android.support.v4.provider.FontRequest r2;
        android.content.pm.ProviderInfo r3;
        android.support.v4.provider.FontsContractCompat$FontInfo[] r4;
        android.content.pm.PackageManager $r5;
        android.content.res.Resources $r6;
        java.lang.String $r7;
        android.support.v4.provider.FontsContractCompat$FontFamilyResult $r8, $r9;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.CancellationSignal;

        r2 := @parameter2: android.support.v4.provider.FontRequest;

        $r5 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r6 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = staticinvoke <android.support.v4.provider.FontsContractCompat: android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,android.support.v4.provider.FontRequest,android.content.res.Resources)>($r5, r2, $r6);

        if r3 != null goto label1;

        $r9 = new android.support.v4.provider.FontsContractCompat$FontFamilyResult;

        specialinvoke $r9.<android.support.v4.provider.FontsContractCompat$FontFamilyResult: void <init>(int,android.support.v4.provider.FontsContractCompat$FontInfo[])>(1, null);

        return $r9;

     label1:
        $r7 = r3.<android.content.pm.ProviderInfo: java.lang.String authority>;

        r4 = staticinvoke <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context,android.support.v4.provider.FontRequest,java.lang.String,android.os.CancellationSignal)>(r0, r2, $r7, r1);

        $r8 = new android.support.v4.provider.FontsContractCompat$FontFamilyResult;

        specialinvoke $r8.<android.support.v4.provider.FontsContractCompat$FontFamilyResult: void <init>(int,android.support.v4.provider.FontsContractCompat$FontInfo[])>(0, r4);

        return $r8;
    }

    public static android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager, android.support.v4.provider.FontRequest, android.content.res.Resources) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.pm.PackageManager r0;
        android.support.v4.provider.FontRequest r1;
        android.content.res.Resources r2;
        java.lang.String r3, $r9, $r10, $r11, $r23, $r25, $r30;
        android.content.pm.ProviderInfo r4;
        java.util.List r5, r7;
        android.content.pm.PackageInfo r6;
        java.util.ArrayList r8, $r14;
        boolean $z0, $z1;
        android.content.pm.Signature[] $r12;
        java.util.Comparator $r13, $r17;
        int $i0, i1;
        java.lang.Object $r15;
        java.util.Collection $r16;
        android.content.pm.PackageManager$NameNotFoundException $r18, $r26;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r24, $r27, $r28, $r29;

        r0 := @parameter0: android.content.pm.PackageManager;

        r1 := @parameter1: android.support.v4.provider.FontRequest;

        r2 := @parameter2: android.content.res.Resources;

        r3 = virtualinvoke r1.<android.support.v4.provider.FontRequest: java.lang.String getProviderAuthority()>();

        r4 = virtualinvoke r0.<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>(r3, 0);

        if r4 != null goto label1;

        $r26 = new android.content.pm.PackageManager$NameNotFoundException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No package found for authority: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r30);

        throw $r26;

     label1:
        $r9 = r4.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r10 = virtualinvoke r1.<android.support.v4.provider.FontRequest: java.lang.String getProviderPackage()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label2;

        $r18 = new android.content.pm.PackageManager$NameNotFoundException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found content provider ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but package was not ");

        $r23 = virtualinvoke r1.<android.support.v4.provider.FontRequest: java.lang.String getProviderPackage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r25);

        throw $r18;

     label2:
        $r11 = r4.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        r6 = virtualinvoke r0.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r11, 64);

        $r12 = r6.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        r5 = staticinvoke <android.support.v4.provider.FontsContractCompat: java.util.List convertToByteArrayList(android.content.pm.Signature[])>($r12);

        $r13 = <android.support.v4.provider.FontsContractCompat: java.util.Comparator sByteArrayComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r5, $r13);

        r7 = staticinvoke <android.support.v4.provider.FontsContractCompat: java.util.List getCertificates(android.support.v4.provider.FontRequest,android.content.res.Resources)>(r1, r2);

        i1 = 0;

     label3:
        $i0 = interfaceinvoke r7.<java.util.List: int size()>();

        if i1 >= $i0 goto label5;

        $r14 = new java.util.ArrayList;

        $r15 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i1);

        $r16 = (java.util.Collection) $r15;

        specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>($r16);

        r8 = $r14;

        $r17 = <android.support.v4.provider.FontsContractCompat: java.util.Comparator sByteArrayComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r8, $r17);

        $z1 = staticinvoke <android.support.v4.provider.FontsContractCompat: boolean equalsByteArrayList(java.util.List,java.util.List)>(r5, r8);

        if $z1 == 0 goto label4;

        return r4;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return null;
    }

    private static java.util.List getCertificates(android.support.v4.provider.FontRequest, android.content.res.Resources)
    {
        android.support.v4.provider.FontRequest r0;
        android.content.res.Resources r1;
        int i0;
        java.util.List $r2, $r3, $r4;

        r0 := @parameter0: android.support.v4.provider.FontRequest;

        r1 := @parameter1: android.content.res.Resources;

        $r2 = virtualinvoke r0.<android.support.v4.provider.FontRequest: java.util.List getCertificates()>();

        if $r2 == null goto label1;

        $r4 = virtualinvoke r0.<android.support.v4.provider.FontRequest: java.util.List getCertificates()>();

        return $r4;

     label1:
        i0 = virtualinvoke r0.<android.support.v4.provider.FontRequest: int getCertificatesArrayResId()>();

        $r3 = staticinvoke <android.support.v4.content.res.FontResourcesParserCompat: java.util.List readCerts(android.content.res.Resources,int)>(r1, i0);

        return $r3;
    }

    private static boolean equalsByteArrayList(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2, $r4;
        byte[] $r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = (byte[]) $r2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (byte[]) $r4;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r5);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private static java.util.List convertToByteArrayList(android.content.pm.Signature[])
    {
        android.content.pm.Signature[] r0;
        java.util.ArrayList r1, $r2;
        int $i0, i1;
        android.content.pm.Signature $r3;
        byte[] $r4;

        r0 := @parameter0: android.content.pm.Signature[];

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r3 = r0[i1];

        $r4 = virtualinvoke $r3.<android.content.pm.Signature: byte[] toByteArray()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    static android.support.v4.provider.FontsContractCompat$FontInfo[] getFontFromProvider(android.content.Context, android.support.v4.provider.FontRequest, java.lang.String, android.os.CancellationSignal)
    {
        android.content.Context r0;
        android.support.v4.provider.FontRequest r1;
        java.lang.String r2, $r18, $r26;
        android.os.CancellationSignal r3;
        android.net.Uri r4, r5, r30;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i15, i16;
        boolean z0, $z1, $z3;
        java.lang.Throwable r6, $r27;
        java.util.ArrayList $r7, $r22, r28;
        android.net.Uri$Builder $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        android.content.ContentResolver $r15, $r23;
        java.lang.String[] $r16, $r17, $r24, $r25;
        android.support.v4.provider.FontsContractCompat$FontInfo[] $r19, $r21;
        java.lang.Object[] $r20;
        android.database.Cursor r29;
        long l13, l14;
        android.support.v4.provider.FontsContractCompat$FontInfo $r31;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.support.v4.provider.FontRequest;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.CancellationSignal;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r28 = $r7;

        $r8 = new android.net.Uri$Builder;

        specialinvoke $r8.<android.net.Uri$Builder: void <init>()>();

        $r9 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r10 = virtualinvoke $r9.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r2);

        r4 = virtualinvoke $r10.<android.net.Uri$Builder: android.net.Uri build()>();

        $r11 = new android.net.Uri$Builder;

        specialinvoke $r11.<android.net.Uri$Builder: void <init>()>();

        $r12 = virtualinvoke $r11.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r13 = virtualinvoke $r12.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("file");

        r5 = virtualinvoke $r14.<android.net.Uri$Builder: android.net.Uri build()>();

        r29 = null;

     label01:
        $i8 = <android.os.Build$VERSION: int SDK_INT>;

        if $i8 <= 16 goto label02;

        $r23 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r24 = newarray (java.lang.String)[7];

        $r24[0] = "_id";

        $r24[1] = "file_id";

        $r24[2] = "font_ttc_index";

        $r24[3] = "font_variation_settings";

        $r24[4] = "font_weight";

        $r24[5] = "font_italic";

        $r24[6] = "result_code";

        $r25 = newarray (java.lang.String)[1];

        $r26 = virtualinvoke r1.<android.support.v4.provider.FontRequest: java.lang.String getQuery()>();

        $r25[0] = $r26;

        r29 = virtualinvoke $r23.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r4, $r24, "query = ?", $r25, null, r3);

        goto label03;

     label02:
        $r15 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r16 = newarray (java.lang.String)[7];

        $r16[0] = "_id";

        $r16[1] = "file_id";

        $r16[2] = "font_ttc_index";

        $r16[3] = "font_variation_settings";

        $r16[4] = "font_weight";

        $r16[5] = "font_italic";

        $r16[6] = "result_code";

        $r17 = newarray (java.lang.String)[1];

        $r18 = virtualinvoke r1.<android.support.v4.provider.FontRequest: java.lang.String getQuery()>();

        $r17[0] = $r18;

        r29 = virtualinvoke $r15.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r4, $r16, "query = ?", $r17, null);

     label03:
        if r29 == null goto label15;

        $i9 = interfaceinvoke r29.<android.database.Cursor: int getCount()>();

        if $i9 <= 0 goto label15;

        i0 = interfaceinvoke r29.<android.database.Cursor: int getColumnIndex(java.lang.String)>("result_code");

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r28 = $r22;

        i1 = interfaceinvoke r29.<android.database.Cursor: int getColumnIndex(java.lang.String)>("_id");

        i2 = interfaceinvoke r29.<android.database.Cursor: int getColumnIndex(java.lang.String)>("file_id");

        i3 = interfaceinvoke r29.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_ttc_index");

        i4 = interfaceinvoke r29.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_weight");

        i5 = interfaceinvoke r29.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_italic");

     label04:
        $z1 = interfaceinvoke r29.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label15;

        if i0 == -1 goto label05;

        $i11 = interfaceinvoke r29.<android.database.Cursor: int getInt(int)>(i0);

        goto label06;

     label05:
        $i11 = 0;

     label06:
        i6 = $i11;

        if i3 == -1 goto label07;

        $i12 = interfaceinvoke r29.<android.database.Cursor: int getInt(int)>(i3);

        goto label08;

     label07:
        $i12 = 0;

     label08:
        i7 = $i12;

        if i2 != -1 goto label09;

        l13 = interfaceinvoke r29.<android.database.Cursor: long getLong(int)>(i1);

        r30 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>(r4, l13);

        goto label10;

     label09:
        l14 = interfaceinvoke r29.<android.database.Cursor: long getLong(int)>(i2);

        r30 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>(r5, l14);

     label10:
        if i4 == -1 goto label11;

        $i15 = interfaceinvoke r29.<android.database.Cursor: int getInt(int)>(i4);

        goto label12;

     label11:
        $i15 = 400;

     label12:
        i16 = $i15;

        if i5 == -1 goto label13;

        $i10 = interfaceinvoke r29.<android.database.Cursor: int getInt(int)>(i5);

        if $i10 != 1 goto label13;

        $z3 = 1;

        goto label14;

     label13:
        $z3 = 0;

     label14:
        z0 = $z3;

        $r31 = new android.support.v4.provider.FontsContractCompat$FontInfo;

        specialinvoke $r31.<android.support.v4.provider.FontsContractCompat$FontInfo: void <init>(android.net.Uri,int,int,boolean,int)>(r30, i7, i16, z0, i6);

        virtualinvoke r28.<java.util.ArrayList: boolean add(java.lang.Object)>($r31);

        goto label04;

     label15:
        if r29 == null goto label19;

        interfaceinvoke r29.<android.database.Cursor: void close()>();

        goto label19;

     label16:
        $r27 := @caughtexception;

        r6 = $r27;

     label17:
        if r29 == null goto label18;

        interfaceinvoke r29.<android.database.Cursor: void close()>();

     label18:
        throw r6;

     label19:
        $r19 = newarray (android.support.v4.provider.FontsContractCompat$FontInfo)[0];

        $r20 = virtualinvoke r28.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        $r21 = (android.support.v4.provider.FontsContractCompat$FontInfo[]) $r20;

        return $r21;

        catch java.lang.Throwable from label01 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    static void <clinit>()
    {
        android.support.v4.util.LruCache $r0;
        android.support.v4.provider.SelfDestructiveThread $r1;
        java.lang.Object $r2;
        android.support.v4.util.SimpleArrayMap $r3;
        android.support.v4.provider.FontsContractCompat$5 $r4;

        $r0 = new android.support.v4.util.LruCache;

        specialinvoke $r0.<android.support.v4.util.LruCache: void <init>(int)>(16);

        <android.support.v4.provider.FontsContractCompat: android.support.v4.util.LruCache sTypefaceCache> = $r0;

        $r1 = new android.support.v4.provider.SelfDestructiveThread;

        specialinvoke $r1.<android.support.v4.provider.SelfDestructiveThread: void <init>(java.lang.String,int,int)>("fonts", 10, 10000);

        <android.support.v4.provider.FontsContractCompat: android.support.v4.provider.SelfDestructiveThread sBackgroundThread> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <android.support.v4.provider.FontsContractCompat: java.lang.Object sLock> = $r2;

        $r3 = new android.support.v4.util.SimpleArrayMap;

        specialinvoke $r3.<android.support.v4.util.SimpleArrayMap: void <init>()>();

        <android.support.v4.provider.FontsContractCompat: android.support.v4.util.SimpleArrayMap sPendingReplies> = $r3;

        $r4 = new android.support.v4.provider.FontsContractCompat$5;

        specialinvoke $r4.<android.support.v4.provider.FontsContractCompat$5: void <init>()>();

        <android.support.v4.provider.FontsContractCompat: java.util.Comparator sByteArrayComparator> = $r4;

        return;
    }

