android.support.test.internal.runner.listener.CoverageListener
<android.support.test.internal.runner.listener.CoverageListener: java.lang.String mCoverageFilePath>
<android.support.test.internal.runner.listener.CoverageListener: java.lang.String REPORT_KEY_COVERAGE_PATH>
<android.support.test.internal.runner.listener.CoverageListener: java.lang.String DEFAULT_COVERAGE_FILE_NAME>
<android.support.test.internal.runner.listener.CoverageListener: java.lang.String LOG_TAG>
    public void <init>(java.lang.String)
    {
        android.support.test.internal.runner.listener.CoverageListener r0;
        java.lang.String r1;

        r0 := @this: android.support.test.internal.runner.listener.CoverageListener;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.support.test.internal.runner.listener.InstrumentationRunListener: void <init>()>();

        r0.<android.support.test.internal.runner.listener.CoverageListener: java.lang.String mCoverageFilePath> = r1;

        return;
    }

    public void setInstrumentation(android.app.Instrumentation)
    {
        android.support.test.internal.runner.listener.CoverageListener r0;
        android.app.Instrumentation r1;
        java.lang.String $r2, $r6, $r8, $r11;
        java.lang.StringBuilder $r3, $r7, $r9, $r10;
        android.content.Context $r4;
        java.io.File $r5;

        r0 := @this: android.support.test.internal.runner.listener.CoverageListener;

        r1 := @parameter0: android.app.Instrumentation;

        specialinvoke r0.<android.support.test.internal.runner.listener.InstrumentationRunListener: void setInstrumentation(android.app.Instrumentation)>(r1);

        $r2 = r0.<android.support.test.internal.runner.listener.CoverageListener: java.lang.String mCoverageFilePath>;

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.io.File getFilesDir()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = <java.io.File: java.lang.String separator>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("coverage.ec");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<android.support.test.internal.runner.listener.CoverageListener: java.lang.String mCoverageFilePath> = $r11;

     label1:
        return;
    }

    public void instrumentationRunFinished(java.io.PrintStream, android.os.Bundle)
    {
        android.support.test.internal.runner.listener.CoverageListener r0;
        java.io.PrintStream r1;
        android.os.Bundle r2;

        r0 := @this: android.support.test.internal.runner.listener.CoverageListener;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: android.os.Bundle;

        specialinvoke r0.<android.support.test.internal.runner.listener.CoverageListener: void generateCoverageReport(java.io.PrintStream,android.os.Bundle)>(r1, r2);

        return;
    }

    private void generateCoverageReport(java.io.PrintStream, android.os.Bundle)
    {
        android.support.test.internal.runner.listener.CoverageListener r0;
        java.io.PrintStream r1;
        android.os.Bundle r2;
        java.io.File r3, $r5;
        java.lang.reflect.Method r4;
        java.lang.String $r6, $r15, $r17;
        java.lang.Class[] $r7;
        java.lang.Class $r8, $r9, $r10, r25;
        java.lang.Object[] $r11, $r16;
        java.lang.Boolean $r12, $r13;
        java.lang.Throwable $r19, $r20, $r21, $r22, $r23, $r24, r26, r27, r28, r29, r30, r31;

        r0 := @this: android.support.test.internal.runner.listener.CoverageListener;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: android.os.Bundle;

        $r5 = new java.io.File;

        $r6 = r0.<android.support.test.internal.runner.listener.CoverageListener: java.lang.String mCoverageFilePath>;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r6);

        r3 = $r5;

     label1:
        r25 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.vladium.emma.rt.RT");

        $r7 = newarray (java.lang.Class)[3];

        $r8 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7[0] = $r8;

        $r9 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r7[1] = $r9;

        $r10 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r7[2] = $r10;

        r4 = virtualinvoke r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dumpCoverageData", $r7);

        $r11 = newarray (java.lang.Object)[3];

        $r11[0] = r3;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r11[1] = $r12;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r11[2] = $r13;

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r11);

        $r15 = r0.<android.support.test.internal.runner.listener.CoverageListener: java.lang.String mCoverageFilePath>;

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("coverageFilePath", $r15);

        $r16 = newarray (java.lang.Object)[1];

        $r17 = r0.<android.support.test.internal.runner.listener.CoverageListener: java.lang.String mCoverageFilePath>;

        $r16[0] = $r17;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("\nGenerated code coverage data to %s", $r16);

     label2:
        goto label9;

     label3:
        $r22 := @caughtexception;

        r26 = $r22;

        specialinvoke r0.<android.support.test.internal.runner.listener.CoverageListener: void reportEmmaError(java.io.PrintStream,java.lang.String,java.lang.Exception)>(r1, "Is emma jar on classpath?", r26);

        goto label9;

     label4:
        $r23 := @caughtexception;

        r27 = $r23;

        specialinvoke r0.<android.support.test.internal.runner.listener.CoverageListener: void reportEmmaError(java.io.PrintStream,java.lang.Exception)>(r1, r27);

        goto label9;

     label5:
        $r20 := @caughtexception;

        r28 = $r20;

        specialinvoke r0.<android.support.test.internal.runner.listener.CoverageListener: void reportEmmaError(java.io.PrintStream,java.lang.Exception)>(r1, r28);

        goto label9;

     label6:
        $r21 := @caughtexception;

        r29 = $r21;

        specialinvoke r0.<android.support.test.internal.runner.listener.CoverageListener: void reportEmmaError(java.io.PrintStream,java.lang.Exception)>(r1, r29);

        goto label9;

     label7:
        $r19 := @caughtexception;

        r30 = $r19;

        specialinvoke r0.<android.support.test.internal.runner.listener.CoverageListener: void reportEmmaError(java.io.PrintStream,java.lang.Exception)>(r1, r30);

        goto label9;

     label8:
        $r24 := @caughtexception;

        r31 = $r24;

        specialinvoke r0.<android.support.test.internal.runner.listener.CoverageListener: void reportEmmaError(java.io.PrintStream,java.lang.Exception)>(r1, r31);

     label9:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.SecurityException from label1 to label2 with label4;
        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label8;
    }

    private void reportEmmaError(java.io.PrintStream, java.lang.Exception)
    {
        android.support.test.internal.runner.listener.CoverageListener r0;
        java.io.PrintStream r1;
        java.lang.Exception r2;

        r0 := @this: android.support.test.internal.runner.listener.CoverageListener;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: java.lang.Exception;

        specialinvoke r0.<android.support.test.internal.runner.listener.CoverageListener: void reportEmmaError(java.io.PrintStream,java.lang.String,java.lang.Exception)>(r1, "", r2);

        return;
    }

    private void reportEmmaError(java.io.PrintStream, java.lang.String, java.lang.Exception)
    {
        android.support.test.internal.runner.listener.CoverageListener r0;
        java.io.PrintStream r1;
        java.lang.String r2, r4, $r8;
        java.lang.Exception r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Object[] $r9;

        r0 := @this: android.support.test.internal.runner.listener.CoverageListener;

        r1 := @parameter0: java.io.PrintStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to generate emma coverage. ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = <android.support.test.internal.runner.listener.CoverageListener: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, r4, r3);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r4;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("\nError: %s", $r9);

        return;
    }

    static void <clinit>()
    {
        <android.support.test.internal.runner.listener.CoverageListener: java.lang.String LOG_TAG> = null;

        return;
    }

