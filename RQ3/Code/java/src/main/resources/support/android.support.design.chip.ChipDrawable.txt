android.support.design.chip.ChipDrawable
<android.support.design.chip.ChipDrawable: boolean DEBUG>
<android.support.design.chip.ChipDrawable: int[] DEFAULT_STATE>
<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>
<android.support.design.chip.ChipDrawable: float chipMinHeight>
<android.support.design.chip.ChipDrawable: float chipCornerRadius>
<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>
<android.support.design.chip.ChipDrawable: float chipStrokeWidth>
<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList rippleColor>
<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>
<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance>
<android.support.design.chip.ChipDrawable: boolean chipIconEnabled>
<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>
<android.support.design.chip.ChipDrawable: float chipIconSize>
<android.support.design.chip.ChipDrawable: boolean closeIconEnabled>
<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>
<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList closeIconTint>
<android.support.design.chip.ChipDrawable: float closeIconSize>
<android.support.design.chip.ChipDrawable: boolean checkable>
<android.support.design.chip.ChipDrawable: boolean checkedIconEnabled>
<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>
<android.support.design.chip.ChipDrawable: android.support.design.animation.MotionSpec showMotionSpec>
<android.support.design.chip.ChipDrawable: android.support.design.animation.MotionSpec hideMotionSpec>
<android.support.design.chip.ChipDrawable: float chipStartPadding>
<android.support.design.chip.ChipDrawable: float iconStartPadding>
<android.support.design.chip.ChipDrawable: float iconEndPadding>
<android.support.design.chip.ChipDrawable: float textStartPadding>
<android.support.design.chip.ChipDrawable: float textEndPadding>
<android.support.design.chip.ChipDrawable: float closeIconStartPadding>
<android.support.design.chip.ChipDrawable: float closeIconEndPadding>
<android.support.design.chip.ChipDrawable: float chipEndPadding>
<android.support.design.chip.ChipDrawable: android.content.Context context>
<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint>
<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>
<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>
<android.support.design.chip.ChipDrawable: android.graphics.Paint$FontMetrics fontMetrics>
<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>
<android.support.design.chip.ChipDrawable: android.graphics.PointF pointF>
<android.support.design.chip.ChipDrawable: int currentChipBackgroundColor>
<android.support.design.chip.ChipDrawable: int currentChipStrokeColor>
<android.support.design.chip.ChipDrawable: int currentCompatRippleColor>
<android.support.design.chip.ChipDrawable: int currentChipTextColor>
<android.support.design.chip.ChipDrawable: boolean currentChecked>
<android.support.design.chip.ChipDrawable: int currentTint>
<android.support.design.chip.ChipDrawable: int alpha>
<android.support.design.chip.ChipDrawable: android.graphics.ColorFilter colorFilter>
<android.support.design.chip.ChipDrawable: android.graphics.PorterDuffColorFilter tintFilter>
<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList tint>
<android.support.design.chip.ChipDrawable: android.graphics.PorterDuff$Mode tintMode>
<android.support.design.chip.ChipDrawable: int[] closeIconStateSet>
<android.support.design.chip.ChipDrawable: boolean useCompatRipple>
<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList compatRippleColor>
<android.support.design.chip.ChipDrawable: java.lang.ref.WeakReference delegate>
<android.support.design.chip.ChipDrawable: boolean chipTextWidthDirty>
<android.support.design.chip.ChipDrawable: float chipTextWidth>
    public static android.support.design.chip.ChipDrawable createFromAttributes(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.content.Context r0;
        android.util.AttributeSet r1;
        int i0, i1;
        android.support.design.chip.ChipDrawable r2, $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = new android.support.design.chip.ChipDrawable;

        specialinvoke $r3.<android.support.design.chip.ChipDrawable: void <init>(android.content.Context)>(r0);

        r2 = $r3;

        specialinvoke r2.<android.support.design.chip.ChipDrawable: void loadFromAttributes(android.util.AttributeSet,int,int)>(r1, i0, i1);

        return r2;
    }

    public static android.support.design.chip.ChipDrawable createFromResource(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1, i2, i3;
        android.util.AttributeSet r1;
        android.content.res.Resources $r2;
        java.lang.String $r3, $r11, $r13;
        boolean $z0;
        android.support.design.chip.ChipDrawable $r4;
        org.xmlpull.v1.XmlPullParserException $r5, $r6;
        java.lang.Throwable $r7, r16;
        android.content.res.Resources$NotFoundException $r8, r17;
        java.lang.StringBuilder $r9, $r10, $r12;
        android.content.res.XmlResourceParser r15;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

     label1:
        $r2 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        r15 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i0);

     label2:
        i2 = interfaceinvoke r15.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i2 == 2 goto label3;

        if i2 != 1 goto label2;

     label3:
        if i2 == 2 goto label4;

        $r6 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        throw $r6;

     label4:
        $r3 = interfaceinvoke r15.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r3, "chip");

        if $z0 != 0 goto label5;

        $r5 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r5.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Must have a <chip> start tag");

        throw $r5;

     label5:
        r1 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r15);

        i3 = interfaceinvoke r1.<android.util.AttributeSet: int getStyleAttribute()>();

        if i3 != 0 goto label6;

        i3 = <android.support.design.chip.R$style: int Widget_MaterialComponents_Chip_Entry>;

     label6:
        $i1 = <android.support.design.chip.R$attr: int chipStandaloneStyle>;

        $r4 = staticinvoke <android.support.design.chip.ChipDrawable: android.support.design.chip.ChipDrawable createFromAttributes(android.content.Context,android.util.AttributeSet,int,int)>(r0, r1, $i1, i3);

     label7:
        return $r4;

     label8:
        $r7 := @caughtexception;

        r16 = $r7;

        $r8 = new android.content.res.Resources$NotFoundException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load chip resource ID #0x");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>($r13);

        r17 = $r8;

        virtualinvoke r17.<android.content.res.Resources$NotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>(r16);

        throw r17;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label7 with label8;
        catch java.io.IOException from label1 to label7 with label8;
    }

    private void <init>(android.content.Context)
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.Context r1;
        android.text.TextPaint $r2, $r9;
        android.graphics.Paint $r3, $r12, $r16;
        android.graphics.Paint$FontMetrics $r4;
        android.graphics.RectF $r5;
        android.graphics.PointF $r6;
        android.graphics.PorterDuff$Mode $r7;
        java.lang.ref.WeakReference $r8;
        android.content.res.Resources $r10;
        android.util.DisplayMetrics $r11;
        float $f0;
        int[] $r13, $r14;
        android.graphics.Paint$Style $r15;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r2 = new android.text.TextPaint;

        specialinvoke $r2.<android.text.TextPaint: void <init>(int)>(1);

        r0.<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint> = $r2;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>(int)>(1);

        r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint> = $r3;

        $r4 = new android.graphics.Paint$FontMetrics;

        specialinvoke $r4.<android.graphics.Paint$FontMetrics: void <init>()>();

        r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint$FontMetrics fontMetrics> = $r4;

        $r5 = new android.graphics.RectF;

        specialinvoke $r5.<android.graphics.RectF: void <init>()>();

        r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF> = $r5;

        $r6 = new android.graphics.PointF;

        specialinvoke $r6.<android.graphics.PointF: void <init>()>();

        r0.<android.support.design.chip.ChipDrawable: android.graphics.PointF pointF> = $r6;

        r0.<android.support.design.chip.ChipDrawable: int alpha> = 255;

        $r7 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_IN>;

        r0.<android.support.design.chip.ChipDrawable: android.graphics.PorterDuff$Mode tintMode> = $r7;

        $r8 = new java.lang.ref.WeakReference;

        specialinvoke $r8.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(null);

        r0.<android.support.design.chip.ChipDrawable: java.lang.ref.WeakReference delegate> = $r8;

        r0.<android.support.design.chip.ChipDrawable: boolean chipTextWidthDirty> = 1;

        r0.<android.support.design.chip.ChipDrawable: android.content.Context context> = r1;

        $r9 = r0.<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint>;

        $r10 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r11 = virtualinvoke $r10.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r11.<android.util.DisplayMetrics: float density>;

        $r9.<android.text.TextPaint: float density> = $f0;

        r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint> = null;

        $r12 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        if $r12 == null goto label1;

        $r16 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        $r15 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r16.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r15);

     label1:
        $r13 = <android.support.design.chip.ChipDrawable: int[] DEFAULT_STATE>;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean setState(int[])>($r13);

        $r14 = <android.support.design.chip.ChipDrawable: int[] DEFAULT_STATE>;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean setCloseIconState(int[])>($r14);

        return;
    }

    private void loadFromAttributes(android.util.AttributeSet, int, int)
    {
        android.support.design.chip.ChipDrawable r0;
        android.util.AttributeSet r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        android.content.res.TypedArray r2;
        int[] $r3;
        android.content.Context $r4, $r5, $r7, $r9, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        android.content.res.ColorStateList $r6, $r8, $r10, $r19;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        java.lang.CharSequence $r11;
        android.support.design.resources.TextAppearance $r13;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.drawable.Drawable $r15, $r17, $r21;
        android.support.design.animation.MotionSpec $r23, $r25;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.util.AttributeSet;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r3 = <android.support.design.chip.R$styleable: int[] ChipDrawable>;

        r2 = staticinvoke <android.support.design.internal.ThemeEnforcement: android.content.res.TypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>($r4, r1, $r3, i0, i1);

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i2 = <android.support.design.chip.R$styleable: int ChipDrawable_chipBackgroundColor>;

        $r6 = staticinvoke <android.support.design.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r5, r2, $i2);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipBackgroundColor(android.content.res.ColorStateList)>($r6);

        $i3 = <android.support.design.chip.R$styleable: int ChipDrawable_chipMinHeight>;

        $f0 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i3, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipMinHeight(float)>($f0);

        $i4 = <android.support.design.chip.R$styleable: int ChipDrawable_chipCornerRadius>;

        $f1 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i4, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipCornerRadius(float)>($f1);

        $r7 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i5 = <android.support.design.chip.R$styleable: int ChipDrawable_chipStrokeColor>;

        $r8 = staticinvoke <android.support.design.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r7, r2, $i5);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipStrokeColor(android.content.res.ColorStateList)>($r8);

        $i6 = <android.support.design.chip.R$styleable: int ChipDrawable_chipStrokeWidth>;

        $f2 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i6, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipStrokeWidth(float)>($f2);

        $r9 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i7 = <android.support.design.chip.R$styleable: int ChipDrawable_rippleColor>;

        $r10 = staticinvoke <android.support.design.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r9, r2, $i7);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setRippleColor(android.content.res.ColorStateList)>($r10);

        $i8 = <android.support.design.chip.R$styleable: int ChipDrawable_chipText>;

        $r11 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>($i8);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipText(java.lang.CharSequence)>($r11);

        $r12 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i9 = <android.support.design.chip.R$styleable: int ChipDrawable_android_textAppearance>;

        $r13 = staticinvoke <android.support.design.resources.MaterialResources: android.support.design.resources.TextAppearance getTextAppearance(android.content.Context,android.content.res.TypedArray,int)>($r12, r2, $i9);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setTextAppearance(android.support.design.resources.TextAppearance)>($r13);

        $i10 = <android.support.design.chip.R$styleable: int ChipDrawable_chipIconEnabled>;

        $z0 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i10, 0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipIconEnabled(boolean)>($z0);

        $r14 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i11 = <android.support.design.chip.R$styleable: int ChipDrawable_chipIcon>;

        $r15 = staticinvoke <android.support.design.resources.MaterialResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,android.content.res.TypedArray,int)>($r14, r2, $i11);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipIcon(android.graphics.drawable.Drawable)>($r15);

        $i12 = <android.support.design.chip.R$styleable: int ChipDrawable_chipIconSize>;

        $f3 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i12, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipIconSize(float)>($f3);

        $i13 = <android.support.design.chip.R$styleable: int ChipDrawable_closeIconEnabled>;

        $z1 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i13, 0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconEnabled(boolean)>($z1);

        $r16 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i14 = <android.support.design.chip.R$styleable: int ChipDrawable_closeIcon>;

        $r17 = staticinvoke <android.support.design.resources.MaterialResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,android.content.res.TypedArray,int)>($r16, r2, $i14);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIcon(android.graphics.drawable.Drawable)>($r17);

        $r18 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i15 = <android.support.design.chip.R$styleable: int ChipDrawable_closeIconTint>;

        $r19 = staticinvoke <android.support.design.resources.MaterialResources: android.content.res.ColorStateList getColorStateList(android.content.Context,android.content.res.TypedArray,int)>($r18, r2, $i15);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconTint(android.content.res.ColorStateList)>($r19);

        $i16 = <android.support.design.chip.R$styleable: int ChipDrawable_closeIconSize>;

        $f4 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i16, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconSize(float)>($f4);

        $i17 = <android.support.design.chip.R$styleable: int ChipDrawable_android_checkable>;

        $z2 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i17, 0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCheckable(boolean)>($z2);

        $i18 = <android.support.design.chip.R$styleable: int ChipDrawable_checkedIconEnabled>;

        $z3 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i18, 0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCheckedIconEnabled(boolean)>($z3);

        $r20 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i19 = <android.support.design.chip.R$styleable: int ChipDrawable_checkedIcon>;

        $r21 = staticinvoke <android.support.design.resources.MaterialResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,android.content.res.TypedArray,int)>($r20, r2, $i19);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCheckedIcon(android.graphics.drawable.Drawable)>($r21);

        $r22 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i20 = <android.support.design.chip.R$styleable: int ChipDrawable_showMotionSpec>;

        $r23 = staticinvoke <android.support.design.animation.MotionSpec: android.support.design.animation.MotionSpec createFromAttribute(android.content.Context,android.content.res.TypedArray,int)>($r22, r2, $i20);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setShowMotionSpec(android.support.design.animation.MotionSpec)>($r23);

        $r24 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $i21 = <android.support.design.chip.R$styleable: int ChipDrawable_hideMotionSpec>;

        $r25 = staticinvoke <android.support.design.animation.MotionSpec: android.support.design.animation.MotionSpec createFromAttribute(android.content.Context,android.content.res.TypedArray,int)>($r24, r2, $i21);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setHideMotionSpec(android.support.design.animation.MotionSpec)>($r25);

        $i22 = <android.support.design.chip.R$styleable: int ChipDrawable_chipStartPadding>;

        $f5 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i22, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipStartPadding(float)>($f5);

        $i23 = <android.support.design.chip.R$styleable: int ChipDrawable_iconStartPadding>;

        $f6 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i23, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setIconStartPadding(float)>($f6);

        $i24 = <android.support.design.chip.R$styleable: int ChipDrawable_iconEndPadding>;

        $f7 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i24, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setIconEndPadding(float)>($f7);

        $i25 = <android.support.design.chip.R$styleable: int ChipDrawable_textStartPadding>;

        $f8 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i25, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setTextStartPadding(float)>($f8);

        $i26 = <android.support.design.chip.R$styleable: int ChipDrawable_textEndPadding>;

        $f9 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i26, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setTextEndPadding(float)>($f9);

        $i27 = <android.support.design.chip.R$styleable: int ChipDrawable_closeIconStartPadding>;

        $f10 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i27, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconStartPadding(float)>($f10);

        $i28 = <android.support.design.chip.R$styleable: int ChipDrawable_closeIconEndPadding>;

        $f11 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i28, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconEndPadding(float)>($f11);

        $i29 = <android.support.design.chip.R$styleable: int ChipDrawable_chipEndPadding>;

        $f12 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>($i29, 0.0F);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipEndPadding(float)>($f12);

        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    public void setUseCompatRipple(boolean)
    {
        android.support.design.chip.ChipDrawable r0;
        boolean z0, $z1;
        int[] $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.support.design.chip.ChipDrawable: boolean useCompatRipple>;

        if $z1 == z0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: boolean useCompatRipple> = z0;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void updateCompatRippleColor()>();

        $r1 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean onStateChange(int[])>($r1);

     label1:
        return;
    }

    public boolean getUseCompatRipple()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean useCompatRipple>;

        return $z0;
    }

    public void setDelegate(android.support.design.chip.ChipDrawable$Delegate)
    {
        android.support.design.chip.ChipDrawable r0;
        android.support.design.chip.ChipDrawable$Delegate r1;
        java.lang.ref.WeakReference $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.support.design.chip.ChipDrawable$Delegate;

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        r0.<android.support.design.chip.ChipDrawable: java.lang.ref.WeakReference delegate> = $r2;

        return;
    }

    protected void onSizeChange()
    {
        android.support.design.chip.ChipDrawable r0;
        android.support.design.chip.ChipDrawable$Delegate r1;
        java.lang.ref.WeakReference $r2;
        java.lang.Object $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r2 = r0.<android.support.design.chip.ChipDrawable: java.lang.ref.WeakReference delegate>;

        $r3 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r1 = (android.support.design.chip.ChipDrawable$Delegate) $r3;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.support.design.chip.ChipDrawable$Delegate: void onChipDrawableSizeChange()>();

     label1:
        return;
    }

    public void getChipTouchBounds(android.graphics.RectF)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.RectF r1;
        android.graphics.Rect $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.RectF;

        $r2 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.Rect getBounds()>();

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateChipTouchBounds(android.graphics.Rect,android.graphics.RectF)>($r2, r1);

        return;
    }

    public void getCloseIconTouchBounds(android.graphics.RectF)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.RectF r1;
        android.graphics.Rect $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.RectF;

        $r2 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.Rect getBounds()>();

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateCloseIconTouchBounds(android.graphics.Rect,android.graphics.RectF)>($r2, r1);

        return;
    }

    public int getIntrinsicWidth()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        int $i0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipStartPadding>;

        $f1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        $f3 = $f0 + $f1;

        $f2 = r0.<android.support.design.chip.ChipDrawable: float textStartPadding>;

        $f4 = $f3 + $f2;

        $f5 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float getChipTextWidth()>();

        $f7 = $f4 + $f5;

        $f6 = r0.<android.support.design.chip.ChipDrawable: float textEndPadding>;

        $f8 = $f7 + $f6;

        $f9 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateCloseIconWidth()>();

        $f11 = $f8 + $f9;

        $f10 = r0.<android.support.design.chip.ChipDrawable: float chipEndPadding>;

        $f12 = $f11 + $f10;

        $i0 = (int) $f12;

        return $i0;
    }

    public int getIntrinsicHeight()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;
        int $i0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipMinHeight>;

        $i0 = (int) $f0;

        return $i0;
    }

    private boolean showsChipIcon()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0, $z1;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean chipIconEnabled>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean showsCheckedIcon()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0, $z1, $z2;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean checkedIconEnabled>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        if $r1 == null goto label1;

        $z1 = r0.<android.support.design.chip.ChipDrawable: boolean currentChecked>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean showsCloseIcon()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0, $z1;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean closeIconEnabled>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean canShowCheckedIcon()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0, $z1, $z2;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean checkedIconEnabled>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        if $r1 == null goto label1;

        $z1 = r0.<android.support.design.chip.ChipDrawable: boolean checkable>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private float calculateChipIconWidth()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z1 == 0 goto label2;

     label1:
        $f1 = r0.<android.support.design.chip.ChipDrawable: float iconStartPadding>;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipIconSize>;

        $f3 = $f1 + $f0;

        $f2 = r0.<android.support.design.chip.ChipDrawable: float iconEndPadding>;

        $f4 = $f3 + $f2;

        return $f4;

     label2:
        return 0.0F;
    }

    private float getChipTextWidth()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0;
        java.lang.CharSequence $r1;
        float $f0, $f1, $f2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean chipTextWidthDirty>;

        if $z0 != 0 goto label1;

        $f2 = r0.<android.support.design.chip.ChipDrawable: float chipTextWidth>;

        return $f2;

     label1:
        $r1 = r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>;

        $f0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipTextWidth(java.lang.CharSequence)>($r1);

        r0.<android.support.design.chip.ChipDrawable: float chipTextWidth> = $f0;

        r0.<android.support.design.chip.ChipDrawable: boolean chipTextWidthDirty> = 0;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipTextWidth>;

        return $f1;
    }

    private float calculateChipTextWidth(java.lang.CharSequence)
    {
        android.support.design.chip.ChipDrawable r0;
        java.lang.CharSequence r1;
        android.text.TextPaint $r2;
        int $i0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: java.lang.CharSequence;

        if r1 != null goto label1;

        return 0.0F;

     label1:
        $r2 = r0.<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint>;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $f0 = virtualinvoke $r2.<android.text.TextPaint: float measureText(java.lang.CharSequence,int,int)>(r1, 0, $i0);

        return $f0;
    }

    private float calculateCloseIconWidth()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float closeIconStartPadding>;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float closeIconSize>;

        $f3 = $f1 + $f0;

        $f2 = r0.<android.support.design.chip.ChipDrawable: float closeIconEndPadding>;

        $f4 = $f3 + $f2;

        return $f4;

     label1:
        return 0.0F;
    }

    public void draw(android.graphics.Canvas)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.Rect getBounds()>();

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int getAlpha()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        i8 = 0;

        $i1 = r0.<android.support.design.chip.ChipDrawable: int alpha>;

        if $i1 >= 255 goto label3;

        $i3 = r2.<android.graphics.Rect: int left>;

        $f3 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int top>;

        $f2 = (float) $i4;

        $i5 = r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i5;

        $i6 = r2.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i6;

        $i7 = r0.<android.support.design.chip.ChipDrawable: int alpha>;

        i8 = staticinvoke <android.support.design.canvas.CanvasCompat: int saveLayerAlpha(android.graphics.Canvas,float,float,float,float,int)>(r1, $f3, $f2, $f1, $f0, $i7);

     label3:
        specialinvoke r0.<android.support.design.chip.ChipDrawable: void drawChipBackground(android.graphics.Canvas,android.graphics.Rect)>(r1, r2);

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void drawChipStroke(android.graphics.Canvas,android.graphics.Rect)>(r1, r2);

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void drawCompatRipple(android.graphics.Canvas,android.graphics.Rect)>(r1, r2);

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void drawChipIcon(android.graphics.Canvas,android.graphics.Rect)>(r1, r2);

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void drawCheckedIcon(android.graphics.Canvas,android.graphics.Rect)>(r1, r2);

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void drawChipText(android.graphics.Canvas,android.graphics.Rect)>(r1, r2);

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void drawCloseIcon(android.graphics.Canvas,android.graphics.Rect)>(r1, r2);

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void drawDebug(android.graphics.Canvas,android.graphics.Rect)>(r1, r2);

        $i2 = r0.<android.support.design.chip.ChipDrawable: int alpha>;

        if $i2 >= 255 goto label4;

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i8);

     label4:
        return;
    }

    private void drawChipBackground(android.graphics.Canvas, android.graphics.Rect)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        int $i0;
        android.graphics.Paint $r3, $r5, $r6, $r10;
        android.graphics.Paint$Style $r4;
        android.graphics.ColorFilter $r7;
        android.graphics.RectF $r9, $r11;
        float $f0, $f1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $i0 = r0.<android.support.design.chip.ChipDrawable: int currentChipBackgroundColor>;

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r6 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r7 = specialinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.ColorFilter getTintColorFilter()>();

        virtualinvoke $r6.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r7);

        $r9 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        virtualinvoke $r9.<android.graphics.RectF: void set(android.graphics.Rect)>(r2);

        $r11 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius>;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius>;

        $r10 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r11, $f1, $f0, $r10);

        return;
    }

    private void drawChipStroke(android.graphics.Canvas, android.graphics.Rect)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5;
        android.graphics.Paint $r3, $r5, $r6, $r10;
        android.graphics.Paint$Style $r4;
        android.graphics.ColorFilter $r7;
        android.graphics.RectF $r9, $r11;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipStrokeWidth>;

        $b0 = $f1 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $i1 = r0.<android.support.design.chip.ChipDrawable: int currentChipStrokeColor>;

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i1);

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r6 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r7 = specialinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.ColorFilter getTintColorFilter()>();

        virtualinvoke $r6.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>($r7);

        $r9 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $i2 = r2.<android.graphics.Rect: int left>;

        $f4 = (float) $i2;

        $f2 = r0.<android.support.design.chip.ChipDrawable: float chipStrokeWidth>;

        $f3 = $f2 / 2.0F;

        $f17 = $f4 + $f3;

        $i3 = r2.<android.graphics.Rect: int top>;

        $f7 = (float) $i3;

        $f5 = r0.<android.support.design.chip.ChipDrawable: float chipStrokeWidth>;

        $f6 = $f5 / 2.0F;

        $f16 = $f7 + $f6;

        $i4 = r2.<android.graphics.Rect: int right>;

        $f10 = (float) $i4;

        $f8 = r0.<android.support.design.chip.ChipDrawable: float chipStrokeWidth>;

        $f9 = $f8 / 2.0F;

        $f15 = $f10 - $f9;

        $i5 = r2.<android.graphics.Rect: int bottom>;

        $f13 = (float) $i5;

        $f11 = r0.<android.support.design.chip.ChipDrawable: float chipStrokeWidth>;

        $f12 = $f11 / 2.0F;

        $f14 = $f13 - $f12;

        virtualinvoke $r9.<android.graphics.RectF: void set(float,float,float,float)>($f17, $f16, $f15, $f14);

        $f20 = r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius>;

        $f18 = r0.<android.support.design.chip.ChipDrawable: float chipStrokeWidth>;

        $f19 = $f18 / 2.0F;

        f0 = $f20 - $f19;

        $r11 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r10 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r11, f0, f0, $r10);

     label1:
        return;
    }

    private void drawCompatRipple(android.graphics.Canvas, android.graphics.Rect)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        int $i0;
        android.graphics.Paint $r3, $r5, $r7;
        android.graphics.Paint$Style $r4;
        android.graphics.RectF $r6, $r8;
        float $f0, $f1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $i0 = r0.<android.support.design.chip.ChipDrawable: int currentCompatRippleColor>;

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i0);

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r5.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r6 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        virtualinvoke $r6.<android.graphics.RectF: void set(android.graphics.Rect)>(r2);

        $r8 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius>;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius>;

        $r7 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r8, $f1, $f0, $r7);

        return;
    }

    private void drawChipIcon(android.graphics.Canvas, android.graphics.Rect)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        float f0, f1, $f2, $f3, $f4, $f5;
        boolean $z0;
        android.graphics.RectF $r3, $r4, $r5, $r6, $r8;
        android.graphics.drawable.Drawable $r7, $r9;
        int $i0, $i1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateChipIconBounds(android.graphics.Rect,android.graphics.RectF)>(r2, $r3);

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        f0 = $r4.<android.graphics.RectF: float left>;

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        f1 = $r5.<android.graphics.RectF: float top>;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(f0, f1);

        $r7 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $r6 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f2 = virtualinvoke $r6.<android.graphics.RectF: float width()>();

        $i0 = (int) $f2;

        $r8 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f3 = virtualinvoke $r8.<android.graphics.RectF: float height()>();

        $i1 = (int) $f3;

        virtualinvoke $r7.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        $r9 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        virtualinvoke $r9.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        $f5 = neg f0;

        $f4 = neg f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f5, $f4);

     label1:
        return;
    }

    private void drawCheckedIcon(android.graphics.Canvas, android.graphics.Rect)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        float f0, f1, $f2, $f3, $f4, $f5;
        boolean $z0;
        android.graphics.RectF $r3, $r4, $r5, $r6, $r8;
        android.graphics.drawable.Drawable $r7, $r9;
        int $i0, $i1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateChipIconBounds(android.graphics.Rect,android.graphics.RectF)>(r2, $r3);

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        f0 = $r4.<android.graphics.RectF: float left>;

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        f1 = $r5.<android.graphics.RectF: float top>;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(f0, f1);

        $r7 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $r6 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f2 = virtualinvoke $r6.<android.graphics.RectF: float width()>();

        $i0 = (int) $f2;

        $r8 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f3 = virtualinvoke $r8.<android.graphics.RectF: float height()>();

        $i1 = (int) $f3;

        virtualinvoke $r7.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        $r9 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        virtualinvoke $r9.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        $f5 = neg f0;

        $f4 = neg f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f5, $f4);

     label1:
        return;
    }

    private void drawChipText(android.graphics.Canvas, android.graphics.Rect)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        android.graphics.Paint$Align r3;
        boolean z0, $z2;
        java.lang.CharSequence $r4, $r10, $r11;
        android.graphics.PointF $r5, $r12, $r13;
        android.graphics.RectF $r6, $r9, $r15;
        android.support.design.resources.TextAppearance $r7, $r20;
        android.text.TextPaint $r8, $r14, $r16, $r18;
        float $f0, $f1, $f2, $f3;
        byte $b0;
        int $i1, i2;
        int[] $r17;
        android.content.Context $r19;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        $r4 = r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>;

        if $r4 == null goto label5;

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.graphics.PointF pointF>;

        r3 = specialinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint$Align calculateChipTextOrigin(android.graphics.Rect,android.graphics.PointF)>(r2, $r5);

        $r6 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateChipTextBounds(android.graphics.Rect,android.graphics.RectF)>(r2, $r6);

        $r7 = r0.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance>;

        if $r7 == null goto label1;

        $r16 = r0.<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint>;

        $r17 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        $r16.<android.text.TextPaint: int[] drawableState> = $r17;

        $r20 = r0.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance>;

        $r19 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r18 = r0.<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint>;

        virtualinvoke $r20.<android.support.design.resources.TextAppearance: void updateDrawState(android.content.Context,android.text.TextPaint)>($r19, $r18);

     label1:
        $r8 = r0.<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint>;

        virtualinvoke $r8.<android.text.TextPaint: void setTextAlign(android.graphics.Paint$Align)>(r3);

        $f0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float getChipTextWidth()>();

        $r9 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f1 = virtualinvoke $r9.<android.graphics.RectF: float width()>();

        $b0 = $f0 cmpl $f1;

        if $b0 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        i2 = 0;

        if z0 == 0 goto label4;

        i2 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r15 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>($r15);

     label4:
        $r11 = r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>;

        $r10 = r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>;

        $i1 = interfaceinvoke $r10.<java.lang.CharSequence: int length()>();

        $r12 = r0.<android.support.design.chip.ChipDrawable: android.graphics.PointF pointF>;

        $f3 = $r12.<android.graphics.PointF: float x>;

        $r13 = r0.<android.support.design.chip.ChipDrawable: android.graphics.PointF pointF>;

        $f2 = $r13.<android.graphics.PointF: float y>;

        $r14 = r0.<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>($r11, 0, $i1, $f3, $f2, $r14);

        if z0 == 0 goto label5;

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i2);

     label5:
        return;
    }

    private void drawCloseIcon(android.graphics.Canvas, android.graphics.Rect)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        float f0, f1, $f2, $f3, $f4, $f5;
        boolean $z0;
        android.graphics.RectF $r3, $r4, $r5, $r6, $r8;
        android.graphics.drawable.Drawable $r7, $r9;
        int $i0, $i1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateCloseIconBounds(android.graphics.Rect,android.graphics.RectF)>(r2, $r3);

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        f0 = $r4.<android.graphics.RectF: float left>;

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        f1 = $r5.<android.graphics.RectF: float top>;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(f0, f1);

        $r7 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $r6 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f2 = virtualinvoke $r6.<android.graphics.RectF: float width()>();

        $i0 = (int) $f2;

        $r8 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $f3 = virtualinvoke $r8.<android.graphics.RectF: float height()>();

        $i1 = (int) $f3;

        virtualinvoke $r7.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        $r9 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        virtualinvoke $r9.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        $f5 = neg f0;

        $f4 = neg f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f5, $f4);

     label1:
        return;
    }

    private void drawDebug(android.graphics.Canvas, android.graphics.Rect)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        android.graphics.Paint $r3, $r4, $r5, $r7, $r9, $r11, $r13, $r15, $r18, $r20;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;
        android.graphics.RectF $r6, $r8, $r10, $r12, $r14, $r16, $r17, $r19;
        float $f0, $f1, $f2, $f3;
        java.lang.CharSequence $r21;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        if $r3 == null goto label5;

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        $i0 = staticinvoke <android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)>(-16777216, 127);

        virtualinvoke $r4.<android.graphics.Paint: void setColor(int)>($i0);

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>(r2, $r5);

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 != 0 goto label1;

        $z2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z2 == 0 goto label2;

     label1:
        $r6 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateChipIconBounds(android.graphics.Rect,android.graphics.RectF)>(r2, $r6);

        $r8 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r7 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>($r8, $r7);

     label2:
        $r21 = r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>;

        if $r21 == null goto label3;

        $i3 = r2.<android.graphics.Rect: int left>;

        $f0 = (float) $i3;

        $f1 = virtualinvoke r2.<android.graphics.Rect: float exactCenterY()>();

        $i4 = r2.<android.graphics.Rect: int right>;

        $f2 = (float) $i4;

        $f3 = virtualinvoke r2.<android.graphics.Rect: float exactCenterY()>();

        $r20 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r20);

     label3:
        $z1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z1 == 0 goto label4;

        $r17 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateCloseIconBounds(android.graphics.Rect,android.graphics.RectF)>(r2, $r17);

        $r19 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r18 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>($r19, $r18);

     label4:
        $r9 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        $i1 = staticinvoke <android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)>(-65536, 127);

        virtualinvoke $r9.<android.graphics.Paint: void setColor(int)>($i1);

        $r10 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateChipTouchBounds(android.graphics.Rect,android.graphics.RectF)>(r2, $r10);

        $r12 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r11 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>($r12, $r11);

        $r13 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        $i2 = staticinvoke <android.support.v4.graphics.ColorUtils: int setAlphaComponent(int,int)>(-16711936, 127);

        virtualinvoke $r13.<android.graphics.Paint: void setColor(int)>($i2);

        $r14 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void calculateCloseIconTouchBounds(android.graphics.Rect,android.graphics.RectF)>(r2, $r14);

        $r16 = r0.<android.support.design.chip.ChipDrawable: android.graphics.RectF rectF>;

        $r15 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint debugPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>($r16, $r15);

     label5:
        return;
    }

    private void calculateChipIconBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Rect r1;
        android.graphics.RectF r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        boolean $z0, $z1;
        int $i0, $i1, $i2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.RectF;

        virtualinvoke r2.<android.graphics.RectF: void setEmpty()>();

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z1 == 0 goto label4;

     label1:
        $f2 = r0.<android.support.design.chip.ChipDrawable: float chipStartPadding>;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float iconStartPadding>;

        f0 = $f2 + $f1;

        $i0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label2;

        $i2 = r1.<android.graphics.Rect: int left>;

        $f15 = (float) $i2;

        $f16 = $f15 + f0;

        r2.<android.graphics.RectF: float left> = $f16;

        $f18 = r2.<android.graphics.RectF: float left>;

        $f17 = r0.<android.support.design.chip.ChipDrawable: float chipIconSize>;

        $f19 = $f18 + $f17;

        r2.<android.graphics.RectF: float right> = $f19;

        goto label3;

     label2:
        $i1 = r1.<android.graphics.Rect: int right>;

        $f3 = (float) $i1;

        $f4 = $f3 - f0;

        r2.<android.graphics.RectF: float right> = $f4;

        $f6 = r2.<android.graphics.RectF: float right>;

        $f5 = r0.<android.support.design.chip.ChipDrawable: float chipIconSize>;

        $f7 = $f6 - $f5;

        r2.<android.graphics.RectF: float left> = $f7;

     label3:
        $f8 = virtualinvoke r1.<android.graphics.Rect: float exactCenterY()>();

        $f9 = r0.<android.support.design.chip.ChipDrawable: float chipIconSize>;

        $f10 = $f9 / 2.0F;

        $f11 = $f8 - $f10;

        r2.<android.graphics.RectF: float top> = $f11;

        $f13 = r2.<android.graphics.RectF: float top>;

        $f12 = r0.<android.support.design.chip.ChipDrawable: float chipIconSize>;

        $f14 = $f13 + $f12;

        r2.<android.graphics.RectF: float bottom> = $f14;

     label4:
        return;
    }

    private android.graphics.Paint$Align calculateChipTextOrigin(android.graphics.Rect, android.graphics.PointF)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Rect r1;
        android.graphics.PointF r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        java.lang.CharSequence $r3;
        int $i0, $i1, $i2, $i3;
        android.graphics.Paint$Align r4;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.PointF;

        virtualinvoke r2.<android.graphics.PointF: void set(float,float)>(0.0F, 0.0F);

        r4 = <android.graphics.Paint$Align: android.graphics.Paint$Align LEFT>;

        $r3 = r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>;

        if $r3 == null goto label3;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipStartPadding>;

        $f2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        $f4 = $f1 + $f2;

        $f3 = r0.<android.support.design.chip.ChipDrawable: float textStartPadding>;

        f0 = $f4 + $f3;

        $i0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i3 = r1.<android.graphics.Rect: int left>;

        $f10 = (float) $i3;

        $f11 = $f10 + f0;

        r2.<android.graphics.PointF: float x> = $f11;

        r4 = <android.graphics.Paint$Align: android.graphics.Paint$Align LEFT>;

        goto label2;

     label1:
        $i1 = r1.<android.graphics.Rect: int right>;

        $f5 = (float) $i1;

        $f6 = $f5 - f0;

        r2.<android.graphics.PointF: float x> = $f6;

        r4 = <android.graphics.Paint$Align: android.graphics.Paint$Align RIGHT>;

     label2:
        $i2 = virtualinvoke r1.<android.graphics.Rect: int centerY()>();

        $f7 = (float) $i2;

        $f8 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipTextCenterFromBaseline()>();

        $f9 = $f7 - $f8;

        r2.<android.graphics.PointF: float y> = $f9;

     label3:
        return r4;
    }

    private float calculateChipTextCenterFromBaseline()
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Paint$FontMetrics $r1, $r3, $r4;
        android.text.TextPaint $r2;
        float $f1, $f2, $f3, $f4;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint>;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint$FontMetrics fontMetrics>;

        virtualinvoke $r2.<android.text.TextPaint: float getFontMetrics(android.graphics.Paint$FontMetrics)>($r1);

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint$FontMetrics fontMetrics>;

        $f2 = $r3.<android.graphics.Paint$FontMetrics: float descent>;

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint$FontMetrics fontMetrics>;

        $f1 = $r4.<android.graphics.Paint$FontMetrics: float ascent>;

        $f3 = $f2 + $f1;

        $f4 = $f3 / 2.0F;

        return $f4;
    }

    private void calculateChipTextBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Rect r1;
        android.graphics.RectF r2;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        java.lang.CharSequence $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.RectF;

        virtualinvoke r2.<android.graphics.RectF: void setEmpty()>();

        $r3 = r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>;

        if $r3 == null goto label3;

        $f2 = r0.<android.support.design.chip.ChipDrawable: float chipStartPadding>;

        $f3 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        $f5 = $f2 + $f3;

        $f4 = r0.<android.support.design.chip.ChipDrawable: float textStartPadding>;

        f0 = $f5 + $f4;

        $f6 = r0.<android.support.design.chip.ChipDrawable: float chipEndPadding>;

        $f7 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateCloseIconWidth()>();

        $f9 = $f6 + $f7;

        $f8 = r0.<android.support.design.chip.ChipDrawable: float textEndPadding>;

        f1 = $f9 + $f8;

        $i0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i5 = r1.<android.graphics.Rect: int left>;

        $f16 = (float) $i5;

        $f17 = $f16 + f0;

        r2.<android.graphics.RectF: float left> = $f17;

        $i6 = r1.<android.graphics.Rect: int right>;

        $f18 = (float) $i6;

        $f19 = $f18 - f1;

        r2.<android.graphics.RectF: float right> = $f19;

        goto label2;

     label1:
        $i1 = r1.<android.graphics.Rect: int left>;

        $f10 = (float) $i1;

        $f11 = $f10 + f1;

        r2.<android.graphics.RectF: float left> = $f11;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f12 = (float) $i2;

        $f13 = $f12 - f0;

        r2.<android.graphics.RectF: float right> = $f13;

     label2:
        $i3 = r1.<android.graphics.Rect: int top>;

        $f14 = (float) $i3;

        r2.<android.graphics.RectF: float top> = $f14;

        $i4 = r1.<android.graphics.Rect: int bottom>;

        $f15 = (float) $i4;

        r2.<android.graphics.RectF: float bottom> = $f15;

     label3:
        return;
    }

    private void calculateCloseIconBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Rect r1;
        android.graphics.RectF r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        boolean $z0;
        int $i0, $i1, $i2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.RectF;

        virtualinvoke r2.<android.graphics.RectF: void setEmpty()>();

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label3;

        $f2 = r0.<android.support.design.chip.ChipDrawable: float chipEndPadding>;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float closeIconEndPadding>;

        f0 = $f2 + $f1;

        $i0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f15 = (float) $i2;

        $f16 = $f15 - f0;

        r2.<android.graphics.RectF: float right> = $f16;

        $f18 = r2.<android.graphics.RectF: float right>;

        $f17 = r0.<android.support.design.chip.ChipDrawable: float closeIconSize>;

        $f19 = $f18 - $f17;

        r2.<android.graphics.RectF: float left> = $f19;

        goto label2;

     label1:
        $i1 = r1.<android.graphics.Rect: int left>;

        $f3 = (float) $i1;

        $f4 = $f3 + f0;

        r2.<android.graphics.RectF: float left> = $f4;

        $f6 = r2.<android.graphics.RectF: float left>;

        $f5 = r0.<android.support.design.chip.ChipDrawable: float closeIconSize>;

        $f7 = $f6 + $f5;

        r2.<android.graphics.RectF: float right> = $f7;

     label2:
        $f8 = virtualinvoke r1.<android.graphics.Rect: float exactCenterY()>();

        $f9 = r0.<android.support.design.chip.ChipDrawable: float closeIconSize>;

        $f10 = $f9 / 2.0F;

        $f11 = $f8 - $f10;

        r2.<android.graphics.RectF: float top> = $f11;

        $f13 = r2.<android.graphics.RectF: float top>;

        $f12 = r0.<android.support.design.chip.ChipDrawable: float closeIconSize>;

        $f14 = $f13 + $f12;

        r2.<android.graphics.RectF: float bottom> = $f14;

     label3:
        return;
    }

    private void calculateChipTouchBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Rect r1;
        android.graphics.RectF r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        boolean $z0;
        int $i0, $i1, $i2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.RectF;

        virtualinvoke r2.<android.graphics.RectF: void set(android.graphics.Rect)>(r1);

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label2;

        $f2 = r0.<android.support.design.chip.ChipDrawable: float chipEndPadding>;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float closeIconEndPadding>;

        $f4 = $f2 + $f1;

        $f3 = r0.<android.support.design.chip.ChipDrawable: float closeIconSize>;

        $f6 = $f4 + $f3;

        $f5 = r0.<android.support.design.chip.ChipDrawable: float closeIconStartPadding>;

        $f8 = $f6 + $f5;

        $f7 = r0.<android.support.design.chip.ChipDrawable: float textEndPadding>;

        f0 = $f8 + $f7;

        $i0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f11 = (float) $i2;

        $f12 = $f11 - f0;

        r2.<android.graphics.RectF: float right> = $f12;

        goto label2;

     label1:
        $i1 = r1.<android.graphics.Rect: int left>;

        $f9 = (float) $i1;

        $f10 = $f9 + f0;

        r2.<android.graphics.RectF: float left> = $f10;

     label2:
        return;
    }

    private void calculateCloseIconTouchBounds(android.graphics.Rect, android.graphics.RectF)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Rect r1;
        android.graphics.RectF r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.RectF;

        virtualinvoke r2.<android.graphics.RectF: void setEmpty()>();

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label3;

        $f2 = r0.<android.support.design.chip.ChipDrawable: float chipEndPadding>;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float closeIconEndPadding>;

        $f4 = $f2 + $f1;

        $f3 = r0.<android.support.design.chip.ChipDrawable: float closeIconSize>;

        $f6 = $f4 + $f3;

        $f5 = r0.<android.support.design.chip.ChipDrawable: float closeIconStartPadding>;

        $f8 = $f6 + $f5;

        $f7 = r0.<android.support.design.chip.ChipDrawable: float textEndPadding>;

        f0 = $f8 + $f7;

        $i0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(r0);

        if $i0 != 0 goto label1;

        $i5 = r1.<android.graphics.Rect: int right>;

        $f14 = (float) $i5;

        r2.<android.graphics.RectF: float right> = $f14;

        $f15 = r2.<android.graphics.RectF: float right>;

        $f16 = $f15 - f0;

        r2.<android.graphics.RectF: float left> = $f16;

        goto label2;

     label1:
        $i1 = r1.<android.graphics.Rect: int left>;

        $f9 = (float) $i1;

        r2.<android.graphics.RectF: float left> = $f9;

        $i2 = r1.<android.graphics.Rect: int left>;

        $f10 = (float) $i2;

        $f11 = $f10 + f0;

        r2.<android.graphics.RectF: float right> = $f11;

     label2:
        $i3 = r1.<android.graphics.Rect: int top>;

        $f12 = (float) $i3;

        r2.<android.graphics.RectF: float top> = $f12;

        $i4 = r1.<android.graphics.Rect: int bottom>;

        $f13 = (float) $i4;

        r2.<android.graphics.RectF: float bottom> = $f13;

     label3:
        return;
    }

    public boolean isStateful()
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList $r1, $r2, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.support.design.resources.TextAppearance $r3;
        android.graphics.drawable.Drawable $r4, $r5;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>;

        $z0 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.content.res.ColorStateList)>($r1);

        if $z0 != 0 goto label2;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>;

        $z1 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.content.res.ColorStateList)>($r2);

        if $z1 != 0 goto label2;

        $z2 = r0.<android.support.design.chip.ChipDrawable: boolean useCompatRipple>;

        if $z2 == 0 goto label1;

        $r7 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList compatRippleColor>;

        $z8 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.content.res.ColorStateList)>($r7);

        if $z8 != 0 goto label2;

     label1:
        $r3 = r0.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance>;

        $z3 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.support.design.resources.TextAppearance)>($r3);

        if $z3 != 0 goto label2;

        $z4 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean canShowCheckedIcon()>();

        if $z4 != 0 goto label2;

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z5 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r4);

        if $z5 != 0 goto label2;

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z6 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r5);

        if $z6 != 0 goto label2;

        $r6 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        $z7 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.content.res.ColorStateList)>($r6);

        if $z7 == 0 goto label3;

     label2:
        $z9 = 1;

        goto label4;

     label3:
        $z9 = 0;

     label4:
        return $z9;
    }

    public boolean isCloseIconStateful()
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z0 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r1);

        return $z0;
    }

    public boolean setCloseIconState(int[])
    {
        android.support.design.chip.ChipDrawable r0;
        int[] r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: int[];

        $r2 = r0.<android.support.design.chip.ChipDrawable: int[] closeIconStateSet>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r2, r1);

        if $z0 != 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: int[] closeIconStateSet> = r1;

        $z1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        $z2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean onStateChange(int[],int[])>($r3, r1);

        return $z2;

     label1:
        return 0;
    }

    public int[] getCloseIconState()
    {
        android.support.design.chip.ChipDrawable r0;
        int[] $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: int[] closeIconStateSet>;

        return $r1;
    }

    protected boolean onStateChange(int[])
    {
        android.support.design.chip.ChipDrawable r0;
        int[] r1, $r2;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getCloseIconState()>();

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean onStateChange(int[],int[])>(r1, $r2);

        return $z0;
    }

    private boolean onStateChange(int[], int[])
    {
        android.support.design.chip.ChipDrawable r0;
        int[] r1, r2, $r6;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, $z12, $z13;
        float f0, f1;
        android.content.res.ColorStateList $r3, $r4, $r5, $r14, $r16, $r19, $r21, $r22, $r23, $r24, $r26;
        android.graphics.drawable.Drawable $r7, $r8, $r9, $r10, $r11, $r12, $r17;
        android.graphics.PorterDuff$Mode $r13;
        android.graphics.PorterDuffColorFilter $r15;
        byte $b9;
        android.support.design.resources.TextAppearance $r18, $r20, $r25;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        z10 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean onStateChange(int[])>(r1);

        z11 = 0;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>;

        if $r3 == null goto label01;

        $r24 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>;

        $i13 = r0.<android.support.design.chip.ChipDrawable: int currentChipBackgroundColor>;

        $i14 = virtualinvoke $r24.<android.content.res.ColorStateList: int getColorForState(int[],int)>(r1, $i13);

        goto label02;

     label01:
        $i14 = 0;

     label02:
        i0 = $i14;

        $i4 = r0.<android.support.design.chip.ChipDrawable: int currentChipBackgroundColor>;

        if $i4 == i0 goto label03;

        r0.<android.support.design.chip.ChipDrawable: int currentChipBackgroundColor> = i0;

        z10 = 1;

     label03:
        $r4 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>;

        if $r4 == null goto label04;

        $r23 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>;

        $i12 = r0.<android.support.design.chip.ChipDrawable: int currentChipStrokeColor>;

        $i15 = virtualinvoke $r23.<android.content.res.ColorStateList: int getColorForState(int[],int)>(r1, $i12);

        goto label05;

     label04:
        $i15 = 0;

     label05:
        i1 = $i15;

        $i5 = r0.<android.support.design.chip.ChipDrawable: int currentChipStrokeColor>;

        if $i5 == i1 goto label06;

        r0.<android.support.design.chip.ChipDrawable: int currentChipStrokeColor> = i1;

        z10 = 1;

     label06:
        $r5 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList compatRippleColor>;

        if $r5 == null goto label07;

        $r22 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList compatRippleColor>;

        $i11 = r0.<android.support.design.chip.ChipDrawable: int currentCompatRippleColor>;

        $i16 = virtualinvoke $r22.<android.content.res.ColorStateList: int getColorForState(int[],int)>(r1, $i11);

        goto label08;

     label07:
        $i16 = 0;

     label08:
        i2 = $i16;

        $i6 = r0.<android.support.design.chip.ChipDrawable: int currentCompatRippleColor>;

        if $i6 == i2 goto label09;

        r0.<android.support.design.chip.ChipDrawable: int currentCompatRippleColor> = i2;

        $z9 = r0.<android.support.design.chip.ChipDrawable: boolean useCompatRipple>;

        if $z9 == 0 goto label09;

        z10 = 1;

     label09:
        $r25 = r0.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance>;

        if $r25 == null goto label10;

        $r18 = r0.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance>;

        $r19 = $r18.<android.support.design.resources.TextAppearance: android.content.res.ColorStateList textColor>;

        if $r19 == null goto label10;

        $r20 = r0.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance>;

        $r21 = $r20.<android.support.design.resources.TextAppearance: android.content.res.ColorStateList textColor>;

        $i10 = r0.<android.support.design.chip.ChipDrawable: int currentChipTextColor>;

        $i17 = virtualinvoke $r21.<android.content.res.ColorStateList: int getColorForState(int[],int)>(r1, $i10);

        goto label11;

     label10:
        $i17 = 0;

     label11:
        i3 = $i17;

        $i18 = r0.<android.support.design.chip.ChipDrawable: int currentChipTextColor>;

        if $i18 == i3 goto label12;

        r0.<android.support.design.chip.ChipDrawable: int currentChipTextColor> = i3;

        z10 = 1;

     label12:
        $r6 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        $z1 = staticinvoke <android.support.design.chip.ChipDrawable: boolean hasState(int[],int)>($r6, 16842912);

        if $z1 == 0 goto label13;

        $z8 = r0.<android.support.design.chip.ChipDrawable: boolean checkable>;

        if $z8 == 0 goto label13;

        $z12 = 1;

        goto label14;

     label13:
        $z12 = 0;

     label14:
        z0 = $z12;

        $z13 = r0.<android.support.design.chip.ChipDrawable: boolean currentChecked>;

        if $z13 == z0 goto label15;

        $r17 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        if $r17 == null goto label15;

        f1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<android.support.design.chip.ChipDrawable: boolean currentChecked> = z0;

        f0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        z10 = 1;

        $b9 = f1 cmpl f0;

        if $b9 == 0 goto label15;

        z11 = 1;

     label15:
        $r26 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        if $r26 == null goto label16;

        $r16 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        $i8 = r0.<android.support.design.chip.ChipDrawable: int currentTint>;

        $i19 = virtualinvoke $r16.<android.content.res.ColorStateList: int getColorForState(int[],int)>(r1, $i8);

        goto label17;

     label16:
        $i19 = 0;

     label17:
        i20 = $i19;

        $i7 = r0.<android.support.design.chip.ChipDrawable: int currentTint>;

        if $i7 == i20 goto label18;

        r0.<android.support.design.chip.ChipDrawable: int currentTint> = i20;

        $r14 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        $r13 = r0.<android.support.design.chip.ChipDrawable: android.graphics.PorterDuff$Mode tintMode>;

        $r15 = staticinvoke <android.support.design.drawable.DrawableUtils: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.drawable.Drawable,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>(r0, $r14, $r13);

        r0.<android.support.design.chip.ChipDrawable: android.graphics.PorterDuffColorFilter tintFilter> = $r15;

        z10 = 1;

     label18:
        $r7 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z2 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r7);

        if $z2 == 0 goto label19;

        $r12 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z7 = virtualinvoke $r12.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        z10 = z10 | $z7;

     label19:
        $r8 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z3 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r8);

        if $z3 == 0 goto label20;

        $r11 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z6 = virtualinvoke $r11.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        z10 = z10 | $z6;

     label20:
        $r9 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z4 = staticinvoke <android.support.design.chip.ChipDrawable: boolean isStateful(android.graphics.drawable.Drawable)>($r9);

        if $z4 == 0 goto label21;

        $r10 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z5 = virtualinvoke $r10.<android.graphics.drawable.Drawable: boolean setState(int[])>(r2);

        z10 = z10 | $z5;

     label21:
        if z10 == 0 goto label22;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

     label22:
        if z11 == 0 goto label23;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label23:
        return z10;
    }

    private static boolean isStateful(android.content.res.ColorStateList)
    {
        android.content.res.ColorStateList r0;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.res.ColorStateList;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean isStateful(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.Drawable r0;
        boolean $z0, $z1;

        r0 := @parameter0: android.graphics.drawable.Drawable;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean isStateful(android.support.design.resources.TextAppearance)
    {
        android.support.design.resources.TextAppearance r0;
        android.content.res.ColorStateList $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: android.support.design.resources.TextAppearance;

        if r0 == null goto label1;

        $r1 = r0.<android.support.design.resources.TextAppearance: android.content.res.ColorStateList textColor>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.resources.TextAppearance: android.content.res.ColorStateList textColor>;

        $z0 = virtualinvoke $r2.<android.content.res.ColorStateList: boolean isStateful()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean onLayoutDirectionChanged(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        android.graphics.drawable.Drawable $r1, $r2, $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        z6 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean onLayoutDirectionChanged(int)>(i0);

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z5 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i0);

        z6 = z6 | $z5;

     label1:
        $z1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z1 == 0 goto label2;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z4 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i0);

        z6 = z6 | $z4;

     label2:
        $z2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z2 == 0 goto label3;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z3 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i0);

        z6 = z6 | $z3;

     label3:
        if z6 == 0 goto label4;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

     label4:
        return 1;
    }

    protected boolean onLevelChange(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        android.graphics.drawable.Drawable $r1, $r2, $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        z6 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean onLevelChange(int)>(i0);

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z5 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean setLevel(int)>(i0);

        z6 = z6 | $z5;

     label1:
        $z1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z1 == 0 goto label2;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z4 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setLevel(int)>(i0);

        z6 = z6 | $z4;

     label2:
        $z2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z2 == 0 goto label3;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z3 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setLevel(int)>(i0);

        z6 = z6 | $z3;

     label3:
        if z6 == 0 goto label4;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

     label4:
        return z6;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.support.design.chip.ChipDrawable r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        android.graphics.drawable.Drawable $r1, $r2, $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z8 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        $z2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z2 == 0 goto label1;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        $z7 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        z8 = z8 | $z7;

     label1:
        $z3 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if $z3 == 0 goto label2;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        $z6 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        z8 = z8 | $z6;

     label2:
        $z4 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z4 == 0 goto label3;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $z5 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        z8 = z8 | $z5;

     label3:
        if z8 == 0 goto label4;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

     label4:
        return z8;
    }

    public void setAlpha(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0, $i1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $i1 = r0.<android.support.design.chip.ChipDrawable: int alpha>;

        if $i1 == i0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: int alpha> = i0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public int getAlpha()
    {
        android.support.design.chip.ChipDrawable r0;
        int $i0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $i0 = r0.<android.support.design.chip.ChipDrawable: int alpha>;

        return $i0;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.ColorFilter r1, $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.ColorFilter colorFilter>;

        if $r2 == r1 goto label1;

        r0.<android.support.design.chip.ChipDrawable: android.graphics.ColorFilter colorFilter> = r1;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public android.graphics.ColorFilter getColorFilter()
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.ColorFilter $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.ColorFilter colorFilter>;

        return $r1;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList r1, $r2;
        int[] $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        if $r2 == r1 goto label1;

        r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList tint> = r1;

        $r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean onStateChange(int[])>($r3);

     label1:
        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.PorterDuff$Mode r1, $r2;
        android.content.res.ColorStateList $r3;
        android.graphics.PorterDuffColorFilter $r4;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.PorterDuff$Mode tintMode>;

        if $r2 == r1 goto label1;

        r0.<android.support.design.chip.ChipDrawable: android.graphics.PorterDuff$Mode tintMode> = r1;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList tint>;

        $r4 = staticinvoke <android.support.design.drawable.DrawableUtils: android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.drawable.Drawable,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode)>(r0, $r3, r1);

        r0.<android.support.design.chip.ChipDrawable: android.graphics.PorterDuffColorFilter tintFilter> = $r4;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public int getOpacity()
    {
        android.support.design.chip.ChipDrawable r0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        return -3;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.Outline r1;
        android.graphics.Rect r2;
        boolean $z0;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.Outline;

        r2 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.Rect getBounds()>();

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $f3 = r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius>;

        virtualinvoke r1.<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)>(r2, $f3);

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int getIntrinsicWidth()>();

        $i1 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int getIntrinsicHeight()>();

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius>;

        virtualinvoke r1.<android.graphics.Outline: void setRoundRect(int,int,int,int,float)>(0, 0, $i0, $i1, $f0);

     label2:
        $i2 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int getAlpha()>();

        $f1 = (float) $i2;

        $f2 = $f1 / 255.0F;

        virtualinvoke r1.<android.graphics.Outline: void setAlpha(float)>($f2);

        return;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable r1;
        android.graphics.drawable.Drawable$Callback r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r2 == null goto label1;

        interfaceinvoke r2.<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>(r0);

     label1:
        return;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        long l0;
        android.graphics.drawable.Drawable$Callback r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        l0 := @parameter2: long;

        r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r3 == null goto label1;

        interfaceinvoke r3.<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>(r0, r2, l0);

     label1:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        android.graphics.drawable.Drawable$Callback r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r3 == null goto label1;

        interfaceinvoke r3.<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>(r0, r2);

     label1:
        return;
    }

    private void unapplyChildDrawable(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

     label1:
        return;
    }

    private void applyChildDrawable(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable r1, $r2;
        int $i0, $i1;
        boolean $z2, $z4, $z6;
        int[] $r3, $r5;
        android.content.res.ColorStateList $r4;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        if r1 == null goto label3;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $i0 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: int getLayoutDirection(android.graphics.drawable.Drawable)>(r0);

        staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: boolean setLayoutDirection(android.graphics.drawable.Drawable,int)>(r1, $i0);

        $i1 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int getLevel()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setLevel(int)>($i1);

        $z2 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean isVisible()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z2, 0);

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        if r1 != $r2 goto label2;

        $z6 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z6 == 0 goto label1;

        $r5 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getCloseIconState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r5);

     label1:
        $r4 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList closeIconTint>;

        staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>(r1, $r4);

        goto label3;

     label2:
        $z4 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z4 == 0 goto label3;

        $r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3);

     label3:
        return;
    }

    private android.graphics.ColorFilter getTintColorFilter()
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.ColorFilter $r1, r3;
        java.lang.Object $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.ColorFilter colorFilter>;

        if $r1 == null goto label1;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.ColorFilter colorFilter>;

        goto label2;

     label1:
        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.PorterDuffColorFilter tintFilter>;

     label2:
        r3 = (android.graphics.ColorFilter) $r2;

        return r3;
    }

    private void updateCompatRippleColor()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0;
        android.content.res.ColorStateList $r1, $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean useCompatRipple>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList rippleColor>;

        $r3 = staticinvoke <android.support.design.ripple.RippleUtils: android.content.res.ColorStateList convertToRippleDrawableColor(android.content.res.ColorStateList)>($r1);

        goto label2;

     label1:
        $r3 = null;

     label2:
        r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList compatRippleColor> = $r3;

        return;
    }

    private static boolean hasState(int[], int)
    {
        int[] r0, r1;
        int i0, i1, i2, i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return 0;

     label1:
        r1 = r0;

        i1 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        i2 = r1[i3];

        if i2 != i0 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    public android.content.res.ColorStateList getChipBackgroundColor()
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>;

        return $r1;
    }

    public void setChipBackgroundColorResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.ColorStateList $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipBackgroundColor(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setChipBackgroundColor(android.content.res.ColorStateList)
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList r1, $r2;
        int[] $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor>;

        if $r2 == r1 goto label1;

        r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipBackgroundColor> = r1;

        $r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean onStateChange(int[])>($r3);

     label1:
        return;
    }

    public float getChipMinHeight()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipMinHeight>;

        return $f0;
    }

    public void setChipMinHeightResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipMinHeight(float)>($f0);

        return;
    }

    public void setChipMinHeight(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipMinHeight>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float chipMinHeight> = f0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public float getChipCornerRadius()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius>;

        return $f0;
    }

    public void setChipCornerRadiusResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipCornerRadius(float)>($f0);

        return;
    }

    public void setChipCornerRadius(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float chipCornerRadius> = f0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public android.content.res.ColorStateList getChipStrokeColor()
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>;

        return $r1;
    }

    public void setChipStrokeColorResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.ColorStateList $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipStrokeColor(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setChipStrokeColor(android.content.res.ColorStateList)
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList r1, $r2;
        int[] $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor>;

        if $r2 == r1 goto label1;

        r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList chipStrokeColor> = r1;

        $r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean onStateChange(int[])>($r3);

     label1:
        return;
    }

    public float getChipStrokeWidth()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipStrokeWidth>;

        return $f0;
    }

    public void setChipStrokeWidthResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipStrokeWidth(float)>($f0);

        return;
    }

    public void setChipStrokeWidth(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;
        android.graphics.Paint $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipStrokeWidth>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float chipStrokeWidth> = f0;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.Paint chipPaint>;

        virtualinvoke $r1.<android.graphics.Paint: void setStrokeWidth(float)>(f0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public android.content.res.ColorStateList getRippleColor()
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList rippleColor>;

        return $r1;
    }

    public void setRippleColorResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.ColorStateList $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setRippleColor(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setRippleColor(android.content.res.ColorStateList)
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList r1, $r2;
        int[] $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList rippleColor>;

        if $r2 == r1 goto label1;

        r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList rippleColor> = r1;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void updateCompatRippleColor()>();

        $r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean onStateChange(int[])>($r3);

     label1:
        return;
    }

    public java.lang.CharSequence getChipText()
    {
        android.support.design.chip.ChipDrawable r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>;

        return $r1;
    }

    public void setChipTextResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        java.lang.String $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipText(java.lang.CharSequence)>($r3);

        return;
    }

    public void setChipText(java.lang.CharSequence)
    {
        android.support.design.chip.ChipDrawable r0;
        java.lang.CharSequence r1, $r2, $r4;
        android.support.v4.text.BidiFormatter $r3;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText>;

        if $r2 == r1 goto label1;

        $r3 = staticinvoke <android.support.v4.text.BidiFormatter: android.support.v4.text.BidiFormatter getInstance()>();

        $r4 = virtualinvoke $r3.<android.support.v4.text.BidiFormatter: java.lang.CharSequence unicodeWrap(java.lang.CharSequence)>(r1);

        r0.<android.support.design.chip.ChipDrawable: java.lang.CharSequence chipText> = $r4;

        r0.<android.support.design.chip.ChipDrawable: boolean chipTextWidthDirty> = 1;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public android.support.design.resources.TextAppearance getTextAppearance()
    {
        android.support.design.chip.ChipDrawable r0;
        android.support.design.resources.TextAppearance $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance>;

        return $r1;
    }

    public void setTextAppearanceResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.support.design.resources.TextAppearance $r1;
        android.content.Context $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = new android.support.design.resources.TextAppearance;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        specialinvoke $r1.<android.support.design.resources.TextAppearance: void <init>(android.content.Context,int)>($r2, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setTextAppearance(android.support.design.resources.TextAppearance)>($r1);

        return;
    }

    public void setTextAppearance(android.support.design.resources.TextAppearance)
    {
        android.support.design.chip.ChipDrawable r0;
        android.support.design.resources.TextAppearance r1, $r2;
        int[] $r3;
        android.text.TextPaint $r4;
        android.content.Context $r5;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.support.design.resources.TextAppearance;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance>;

        if $r2 == r1 goto label2;

        r0.<android.support.design.chip.ChipDrawable: android.support.design.resources.TextAppearance textAppearance> = r1;

        if r1 == null goto label1;

        $r5 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.text.TextPaint textPaint>;

        virtualinvoke r1.<android.support.design.resources.TextAppearance: void updateMeasureState(android.content.Context,android.text.TextPaint)>($r5, $r4);

        r0.<android.support.design.chip.ChipDrawable: boolean chipTextWidthDirty> = 1;

     label1:
        $r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean onStateChange(int[])>($r3);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label2:
        return;
    }

    public boolean isChipIconEnabled()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean chipIconEnabled>;

        return $z0;
    }

    public void setChipIconEnabledResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipIconEnabled(boolean)>($z0);

        return;
    }

    public void setChipIconEnabled(boolean)
    {
        android.support.design.chip.ChipDrawable r0;
        boolean z0, z1, z2, z3, $z4, $z5;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        z0 := @parameter0: boolean;

        $z4 = r0.<android.support.design.chip.ChipDrawable: boolean chipIconEnabled>;

        if $z4 == z0 goto label5;

        z1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        r0.<android.support.design.chip.ChipDrawable: boolean chipIconEnabled> = z0;

        z2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        if z1 == z2 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        z3 = $z5;

        if z3 == 0 goto label5;

        if z2 == 0 goto label3;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r2);

        goto label4;

     label3:
        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r1);

     label4:
        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label5:
        return;
    }

    public android.graphics.drawable.Drawable getChipIcon()
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        return $r1;
    }

    public void setChipIconResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <android.support.v7.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r1, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipIcon(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public void setChipIcon(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable r1, r2, $r3;
        float f0, f1;
        boolean $z0;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        if r2 == r1 goto label2;

        f0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon> = r1;

        f1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>(r2);

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsChipIcon()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable chipIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r3);

     label1:
        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $b0 = f0 cmpl f1;

        if $b0 == 0 goto label2;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label2:
        return;
    }

    public float getChipIconSize()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipIconSize>;

        return $f0;
    }

    public void setChipIconSizeResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipIconSize(float)>($f0);

        return;
    }

    public void setChipIconSize(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, f1, f2, $f3;
        byte $b0, $b1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f3 = r0.<android.support.design.chip.ChipDrawable: float chipIconSize>;

        $b0 = $f3 cmpl f0;

        if $b0 == 0 goto label1;

        f1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<android.support.design.chip.ChipDrawable: float chipIconSize> = f0;

        f2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $b1 = f1 cmpl f2;

        if $b1 == 0 goto label1;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public boolean isCloseIconEnabled()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean closeIconEnabled>;

        return $z0;
    }

    public void setCloseIconEnabledResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconEnabled(boolean)>($z0);

        return;
    }

    public void setCloseIconEnabled(boolean)
    {
        android.support.design.chip.ChipDrawable r0;
        boolean z0, z1, z2, z3, $z4, $z5;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        z0 := @parameter0: boolean;

        $z4 = r0.<android.support.design.chip.ChipDrawable: boolean closeIconEnabled>;

        if $z4 == z0 goto label5;

        z1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        r0.<android.support.design.chip.ChipDrawable: boolean closeIconEnabled> = z0;

        z2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if z1 == z2 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        z3 = $z5;

        if z3 == 0 goto label5;

        if z2 == 0 goto label3;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r2);

        goto label4;

     label3:
        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r1);

     label4:
        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label5:
        return;
    }

    public android.graphics.drawable.Drawable getCloseIcon()
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        return $r1;
    }

    public void setCloseIconResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <android.support.v7.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r1, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIcon(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public void setCloseIcon(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable r1, r2, $r3, $r4, $r5, $r7, $r8, $r9;
        float f0, f1;
        boolean $z0;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        if $r3 == null goto label1;

        $r7 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        $r8 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable unwrap(android.graphics.drawable.Drawable)>($r7);

        goto label2;

     label1:
        $r8 = null;

     label2:
        r2 = $r8;

        if r2 == r1 goto label6;

        f0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateCloseIconWidth()>();

        if r1 == null goto label3;

        $r5 = staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)>(r1);

        $r9 = virtualinvoke $r5.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        goto label4;

     label3:
        $r9 = null;

     label4:
        r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon> = $r9;

        f1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateCloseIconWidth()>();

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>(r2);

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label5;

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r4);

     label5:
        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $b0 = f0 cmpl f1;

        if $b0 == 0 goto label6;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label6:
        return;
    }

    public android.content.res.ColorStateList getCloseIconTint()
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList closeIconTint>;

        return $r1;
    }

    public void setCloseIconTintResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.ColorStateList $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <android.support.v7.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconTint(android.content.res.ColorStateList)>($r2);

        return;
    }

    public void setCloseIconTint(android.content.res.ColorStateList)
    {
        android.support.design.chip.ChipDrawable r0;
        android.content.res.ColorStateList r1, $r2;
        boolean $z0;
        int[] $r3;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList closeIconTint>;

        if $r2 == r1 goto label2;

        r0.<android.support.design.chip.ChipDrawable: android.content.res.ColorStateList closeIconTint> = r1;

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable closeIcon>;

        staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r4, r1);

     label1:
        $r3 = virtualinvoke r0.<android.support.design.chip.ChipDrawable: int[] getState()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: boolean onStateChange(int[])>($r3);

     label2:
        return;
    }

    public float getCloseIconSize()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float closeIconSize>;

        return $f0;
    }

    public void setCloseIconSizeResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconSize(float)>($f0);

        return;
    }

    public void setCloseIconSize(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float closeIconSize>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float closeIconSize> = f0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public boolean isCheckable()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean checkable>;

        return $z0;
    }

    public void setCheckableResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCheckable(boolean)>($z0);

        return;
    }

    public void setCheckable(boolean)
    {
        android.support.design.chip.ChipDrawable r0;
        boolean z0, $z1, $z2;
        float f0, f1;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.support.design.chip.ChipDrawable: boolean checkable>;

        if $z1 == z0 goto label2;

        r0.<android.support.design.chip.ChipDrawable: boolean checkable> = z0;

        f0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        if z0 != 0 goto label1;

        $z2 = r0.<android.support.design.chip.ChipDrawable: boolean currentChecked>;

        if $z2 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: boolean currentChecked> = 0;

     label1:
        f1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $b0 = f0 cmpl f1;

        if $b0 == 0 goto label2;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label2:
        return;
    }

    public boolean isCheckedIconEnabled()
    {
        android.support.design.chip.ChipDrawable r0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $z0 = r0.<android.support.design.chip.ChipDrawable: boolean checkedIconEnabled>;

        return $z0;
    }

    public void setCheckedIconEnabledResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCheckedIconEnabled(boolean)>($z0);

        return;
    }

    public void setCheckedIconEnabled(boolean)
    {
        android.support.design.chip.ChipDrawable r0;
        boolean z0, z1, z2, z3, $z4, $z5;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        z0 := @parameter0: boolean;

        $z4 = r0.<android.support.design.chip.ChipDrawable: boolean checkedIconEnabled>;

        if $z4 == z0 goto label5;

        z1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCheckedIcon()>();

        r0.<android.support.design.chip.ChipDrawable: boolean checkedIconEnabled> = z0;

        z2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCheckedIcon()>();

        if z1 == z2 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        z3 = $z5;

        if z3 == 0 goto label5;

        if z2 == 0 goto label3;

        $r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r2);

        goto label4;

     label3:
        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r1);

     label4:
        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label5:
        return;
    }

    public android.graphics.drawable.Drawable getCheckedIcon()
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        return $r1;
    }

    public void setCheckedIconResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <android.support.v7.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r1, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCheckedIcon(android.graphics.drawable.Drawable)>($r2);

        return;
    }

    public void setCheckedIcon(android.graphics.drawable.Drawable)
    {
        android.support.design.chip.ChipDrawable r0;
        android.graphics.drawable.Drawable r1, r2, $r3, $r4;
        float f0, f1;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        if r2 == r1 goto label1;

        f0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon> = r1;

        f1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        $r3 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void unapplyChildDrawable(android.graphics.drawable.Drawable)>($r3);

        $r4 = r0.<android.support.design.chip.ChipDrawable: android.graphics.drawable.Drawable checkedIcon>;

        specialinvoke r0.<android.support.design.chip.ChipDrawable: void applyChildDrawable(android.graphics.drawable.Drawable)>($r4);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $b0 = f0 cmpl f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public android.support.design.animation.MotionSpec getShowMotionSpec()
    {
        android.support.design.chip.ChipDrawable r0;
        android.support.design.animation.MotionSpec $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.support.design.animation.MotionSpec showMotionSpec>;

        return $r1;
    }

    public void setShowMotionSpecResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.support.design.animation.MotionSpec $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <android.support.design.animation.MotionSpec: android.support.design.animation.MotionSpec createFromResource(android.content.Context,int)>($r1, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setShowMotionSpec(android.support.design.animation.MotionSpec)>($r2);

        return;
    }

    public void setShowMotionSpec(android.support.design.animation.MotionSpec)
    {
        android.support.design.chip.ChipDrawable r0;
        android.support.design.animation.MotionSpec r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.support.design.animation.MotionSpec;

        r0.<android.support.design.chip.ChipDrawable: android.support.design.animation.MotionSpec showMotionSpec> = r1;

        return;
    }

    public android.support.design.animation.MotionSpec getHideMotionSpec()
    {
        android.support.design.chip.ChipDrawable r0;
        android.support.design.animation.MotionSpec $r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.support.design.animation.MotionSpec hideMotionSpec>;

        return $r1;
    }

    public void setHideMotionSpecResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.support.design.animation.MotionSpec $r2;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = staticinvoke <android.support.design.animation.MotionSpec: android.support.design.animation.MotionSpec createFromResource(android.content.Context,int)>($r1, i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setHideMotionSpec(android.support.design.animation.MotionSpec)>($r2);

        return;
    }

    public void setHideMotionSpec(android.support.design.animation.MotionSpec)
    {
        android.support.design.chip.ChipDrawable r0;
        android.support.design.animation.MotionSpec r1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        r1 := @parameter0: android.support.design.animation.MotionSpec;

        r0.<android.support.design.chip.ChipDrawable: android.support.design.animation.MotionSpec hideMotionSpec> = r1;

        return;
    }

    public float getChipStartPadding()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipStartPadding>;

        return $f0;
    }

    public void setChipStartPaddingResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipStartPadding(float)>($f0);

        return;
    }

    public void setChipStartPadding(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipStartPadding>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float chipStartPadding> = f0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public float getIconStartPadding()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float iconStartPadding>;

        return $f0;
    }

    public void setIconStartPaddingResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setIconStartPadding(float)>($f0);

        return;
    }

    public void setIconStartPadding(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, f1, f2, $f3;
        byte $b0, $b1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f3 = r0.<android.support.design.chip.ChipDrawable: float iconStartPadding>;

        $b0 = $f3 cmpl f0;

        if $b0 == 0 goto label1;

        f1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<android.support.design.chip.ChipDrawable: float iconStartPadding> = f0;

        f2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $b1 = f1 cmpl f2;

        if $b1 == 0 goto label1;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public float getIconEndPadding()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float iconEndPadding>;

        return $f0;
    }

    public void setIconEndPaddingResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setIconEndPadding(float)>($f0);

        return;
    }

    public void setIconEndPadding(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, f1, f2, $f3;
        byte $b0, $b1;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f3 = r0.<android.support.design.chip.ChipDrawable: float iconEndPadding>;

        $b0 = $f3 cmpl f0;

        if $b0 == 0 goto label1;

        f1 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        r0.<android.support.design.chip.ChipDrawable: float iconEndPadding> = f0;

        f2 = specialinvoke r0.<android.support.design.chip.ChipDrawable: float calculateChipIconWidth()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $b1 = f1 cmpl f2;

        if $b1 == 0 goto label1;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public float getTextStartPadding()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float textStartPadding>;

        return $f0;
    }

    public void setTextStartPaddingResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setTextStartPadding(float)>($f0);

        return;
    }

    public void setTextStartPadding(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float textStartPadding>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float textStartPadding> = f0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public float getTextEndPadding()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float textEndPadding>;

        return $f0;
    }

    public void setTextEndPaddingResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setTextEndPadding(float)>($f0);

        return;
    }

    public void setTextEndPadding(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float textEndPadding>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float textEndPadding> = f0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public float getCloseIconStartPadding()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float closeIconStartPadding>;

        return $f0;
    }

    public void setCloseIconStartPaddingResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconStartPadding(float)>($f0);

        return;
    }

    public void setCloseIconStartPadding(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float closeIconStartPadding>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float closeIconStartPadding> = f0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public float getCloseIconEndPadding()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float closeIconEndPadding>;

        return $f0;
    }

    public void setCloseIconEndPaddingResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setCloseIconEndPadding(float)>($f0);

        return;
    }

    public void setCloseIconEndPadding(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;
        boolean $z0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float closeIconEndPadding>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float closeIconEndPadding> = f0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        $z0 = specialinvoke r0.<android.support.design.chip.ChipDrawable: boolean showsCloseIcon()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    public float getChipEndPadding()
    {
        android.support.design.chip.ChipDrawable r0;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        $f0 = r0.<android.support.design.chip.ChipDrawable: float chipEndPadding>;

        return $f0;
    }

    public void setChipEndPaddingResource(int)
    {
        android.support.design.chip.ChipDrawable r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        float $f0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.support.design.chip.ChipDrawable: android.content.Context context>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $f0 = virtualinvoke $r2.<android.content.res.Resources: float getDimension(int)>(i0);

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void setChipEndPadding(float)>($f0);

        return;
    }

    public void setChipEndPadding(float)
    {
        android.support.design.chip.ChipDrawable r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: android.support.design.chip.ChipDrawable;

        f0 := @parameter0: float;

        $f1 = r0.<android.support.design.chip.ChipDrawable: float chipEndPadding>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        r0.<android.support.design.chip.ChipDrawable: float chipEndPadding> = f0;

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        virtualinvoke r0.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

     label1:
        return;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[1];

        $r0[0] = 16842910;

        <android.support.design.chip.ChipDrawable: int[] DEFAULT_STATE> = $r0;

        return;
    }

android.support.design.chip.ChipDrawable$1
<android.support.design.chip.ChipDrawable$1: android.support.design.chip.ChipDrawable this$0>
    void <init>(android.support.design.chip.ChipDrawable)
    {
        android.support.design.chip.ChipDrawable$1 r0;
        android.support.design.chip.ChipDrawable r1;

        r0 := @this: android.support.design.chip.ChipDrawable$1;

        r1 := @parameter0: android.support.design.chip.ChipDrawable;

        r0.<android.support.design.chip.ChipDrawable$1: android.support.design.chip.ChipDrawable this$0> = r1;

        specialinvoke r0.<android.support.v4.content.res.ResourcesCompat$FontCallback: void <init>()>();

        return;
    }

    public void onFontRetrieved(android.graphics.Typeface)
    {
        android.support.design.chip.ChipDrawable$1 r0;
        android.graphics.Typeface r1;
        android.support.design.chip.ChipDrawable $r2, $r3, $r4;

        r0 := @this: android.support.design.chip.ChipDrawable$1;

        r1 := @parameter0: android.graphics.Typeface;

        $r2 = r0.<android.support.design.chip.ChipDrawable$1: android.support.design.chip.ChipDrawable this$0>;

        staticinvoke <android.support.design.chip.ChipDrawable: boolean access$002(android.support.design.chip.ChipDrawable,boolean)>($r2, 1);

        $r3 = r0.<android.support.design.chip.ChipDrawable$1: android.support.design.chip.ChipDrawable this$0>;

        virtualinvoke $r3.<android.support.design.chip.ChipDrawable: void onSizeChange()>();

        $r4 = r0.<android.support.design.chip.ChipDrawable$1: android.support.design.chip.ChipDrawable this$0>;

        virtualinvoke $r4.<android.support.design.chip.ChipDrawable: void invalidateSelf()>();

        return;
    }

    public void onFontRetrievalFailed(int)
    {
        android.support.design.chip.ChipDrawable$1 r0;
        int i0;

        r0 := @this: android.support.design.chip.ChipDrawable$1;

        i0 := @parameter0: int;

        return;
    }

android.support.design.chip.ChipDrawable$Delegate
<android.support.design.chip.ChipDrawable$Delegate: void onChipDrawableSizeChange()>
