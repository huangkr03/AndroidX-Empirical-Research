android.support.wearable.watchface.SharedMemoryImage
<android.support.wearable.watchface.SharedMemoryImage: android.support.wearable.watchface.SharedMemoryImage$Companion Companion>
    public void <init>()
    {
        android.support.wearable.watchface.SharedMemoryImage r0;

        r0 := @this: android.support.wearable.watchface.SharedMemoryImage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        android.support.wearable.watchface.SharedMemoryImage$Companion $r0;

        $r0 = new android.support.wearable.watchface.SharedMemoryImage$Companion;

        specialinvoke $r0.<android.support.wearable.watchface.SharedMemoryImage$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <android.support.wearable.watchface.SharedMemoryImage: android.support.wearable.watchface.SharedMemoryImage$Companion Companion> = $r0;

        return;
    }

android.support.wearable.watchface.SharedMemoryImage$Companion
    private void <init>()
    {
        android.support.wearable.watchface.SharedMemoryImage$Companion r0;

        r0 := @this: android.support.wearable.watchface.SharedMemoryImage$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final android.os.Bundle ashmemWriteImageBundle(android.graphics.Bitmap)
    {
        android.support.wearable.watchface.SharedMemoryImage$Companion r0;
        android.graphics.Bitmap r1;
        java.io.Closeable r2;
        boolean z0, z2, z3, z5;
        android.os.SharedMemory r3, r16;
        android.os.Bundle r5, $r8, r18, r19;
        androidx.wear.utility.TraceEvent $r6, r15;
        int $i0, $i1, $i2, $i3;
        java.nio.Buffer $r7;
        android.graphics.Bitmap$Config $r9;
        android.os.Parcelable $r10;
        java.lang.Throwable $r11, $r12, $r13, r14, r20, r21, r22, r23;
        java.nio.ByteBuffer r17;

        r0 := @this: android.support.wearable.watchface.SharedMemoryImage$Companion;

        r1 := @parameter0: android.graphics.Bitmap;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bitmap");

        $r6 = new androidx.wear.utility.TraceEvent;

        specialinvoke $r6.<androidx.wear.utility.TraceEvent: void <init>(java.lang.String)>("SharedMemoryImage.ashmemWriteImageBundle");

        r2 = (java.io.Closeable) $r6;

        z0 = 0;

        z5 = 0;

        r14 = (java.lang.Throwable) null;

     label01:
        r15 = (androidx.wear.utility.TraceEvent) r2;

        $i0 = virtualinvoke r1.<android.graphics.Bitmap: int getAllocationByteCount()>();

        r16 = staticinvoke <android.os.SharedMemory: android.os.SharedMemory create(java.lang.String,int)>("WatchFace.Screenshot.Bitmap", $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r16, "create(\"WatchFace.Screen\u2026tmap.allocationByteCount)");

        r3 = r16;

        r17 = null;

     label02:
        r17 = virtualinvoke r3.<android.os.SharedMemory: java.nio.ByteBuffer mapReadWrite()>();

        $r7 = (java.nio.Buffer) r17;

        virtualinvoke r1.<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>($r7);

        $r8 = new android.os.Bundle;

        specialinvoke $r8.<android.os.Bundle: void <init>()>();

        r18 = $r8;

        z2 = 0;

        z3 = 0;

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        virtualinvoke r18.<android.os.Bundle: void putInt(java.lang.String,int)>("KEY_BITMAP_WIDTH_PX", $i1);

        $i2 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r18.<android.os.Bundle: void putInt(java.lang.String,int)>("KEY_BITMAP_HEIGHT_PX", $i2);

        $r9 = virtualinvoke r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $i3 = virtualinvoke $r9.<android.graphics.Bitmap$Config: int ordinal()>();

        virtualinvoke r18.<android.os.Bundle: void putInt(java.lang.String,int)>("KEY_BITMAP_CONFIG_ORDINAL", $i3);

        $r10 = (android.os.Parcelable) r3;

        virtualinvoke r18.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("KEY_SCREENSHOT", $r10);

        r19 = r18;

     label03:
        if r17 == null goto label04;

        staticinvoke <android.os.SharedMemory: void unmap(java.nio.ByteBuffer)>(r17);

     label04:
        r5 = r19;

     label05:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r2, r14);

        return r5;

     label06:
        $r13 := @caughtexception;

        r20 = $r13;

     label07:
        if r17 == null goto label08;

        staticinvoke <android.os.SharedMemory: void unmap(java.nio.ByteBuffer)>(r17);

     label08:
        throw r20;

     label09:
        $r11 := @caughtexception;

        r21 = $r11;

        r22 = r21;

        throw r21;

     label10:
        $r12 := @caughtexception;

        r23 = $r12;

     label11:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r2, r22);

        throw r23;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label06 to label09 with label09;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public final android.graphics.Bitmap ashmemReadImageBundle(android.os.Bundle)
    {
        android.support.wearable.watchface.SharedMemoryImage$Companion r0;
        android.os.Bundle r1;
        java.io.Closeable r2;
        boolean z0, z2, z3, z5, $z6;
        android.os.SharedMemory r3, r22, r23;
        int i0, i1, i2, i3, $i4, i5, i6, i7;
        android.graphics.Bitmap$Config[] r4, r5, r25;
        android.graphics.Bitmap$Config r6, r7, r8, $r26;
        android.graphics.Bitmap r9, r27, r28;
        androidx.wear.utility.TraceEvent $r10, r21;
        java.lang.Class $r11;
        java.lang.ClassLoader $r12;
        android.os.Parcelable $r13;
        java.nio.Buffer $r14;
        java.lang.IllegalStateException $r16;
        java.lang.Throwable $r17, $r18, $r19, r20, r29, r30, r31, r32;
        java.nio.ByteBuffer r24;

        r0 := @this: android.support.wearable.watchface.SharedMemoryImage$Companion;

        r1 := @parameter0: android.os.Bundle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bundle");

        $r10 = new androidx.wear.utility.TraceEvent;

        specialinvoke $r10.<androidx.wear.utility.TraceEvent: void <init>(java.lang.String)>("SharedMemoryImage.ashmemReadImageBundle");

        r2 = (java.io.Closeable) $r10;

        z0 = 0;

        z5 = 0;

        r20 = (java.lang.Throwable) null;

     label01:
        r21 = (androidx.wear.utility.TraceEvent) r2;

        $r11 = class "Landroid/os/SharedMemory;";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke r1.<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>($r12);

        $r13 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("KEY_SCREENSHOT");

        r22 = (android.os.SharedMemory) $r13;

        if r22 != null goto label02;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Bundle did not contain KEY_SCREENSHOT");

        throw $r16;

     label02:
        r23 = r22;

        r3 = r23;

        i5 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("KEY_BITMAP_WIDTH_PX");

        i6 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("KEY_BITMAP_HEIGHT_PX");

        i0 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("KEY_BITMAP_CONFIG_ORDINAL");

        r24 = null;

     label03:
        r25 = staticinvoke <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()>();

        i1 = i6;

        i2 = i5;

        z2 = 0;

        r4 = r25;

        z3 = 0;

        r5 = r4;

        i3 = lengthof r5;

        i7 = 0;

     label04:
        if i7 >= i3 goto label08;

        r6 = r5[i7];

        r7 = r6;

        $i4 = virtualinvoke r7.<android.graphics.Bitmap$Config: int ordinal()>();

        if $i4 != i0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        if $z6 == 0 goto label07;

        $r26 = r6;

        goto label09;

     label07:
        i7 = i7 + 1;

        goto label04;

     label08:
        $r26 = null;

     label09:
        r8 = $r26;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r8);

        r27 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i2, i1, r8);

        r24 = virtualinvoke r3.<android.os.SharedMemory: java.nio.ByteBuffer mapReadOnly()>();

        $r14 = (java.nio.Buffer) r24;

        virtualinvoke r27.<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>($r14);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r27, "bitmap");

        r28 = r27;

     label10:
        if r24 == null goto label11;

        staticinvoke <android.os.SharedMemory: void unmap(java.nio.ByteBuffer)>(r24);

     label11:
        r9 = r28;

     label12:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r2, r20);

        return r9;

     label13:
        $r17 := @caughtexception;

        r29 = $r17;

     label14:
        if r24 == null goto label15;

        staticinvoke <android.os.SharedMemory: void unmap(java.nio.ByteBuffer)>(r24);

     label15:
        throw r29;

     label16:
        $r18 := @caughtexception;

        r30 = $r18;

        r31 = r30;

        throw r30;

     label17:
        $r19 := @caughtexception;

        r32 = $r19;

     label18:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r2, r31);

        throw r32;

        catch java.lang.Throwable from label03 to label10 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label01 to label12 with label16;
        catch java.lang.Throwable from label13 to label16 with label16;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        android.support.wearable.watchface.SharedMemoryImage$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: android.support.wearable.watchface.SharedMemoryImage$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<android.support.wearable.watchface.SharedMemoryImage$Companion: void <init>()>();

        return;
    }

