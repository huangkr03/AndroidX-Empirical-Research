android.support.v4.util.AtomicFile
<android.support.v4.util.AtomicFile: java.io.File mBaseName>
<android.support.v4.util.AtomicFile: java.io.File mBackupName>
    public void <init>(java.io.File)
    {
        android.support.v4.util.AtomicFile r0;
        java.io.File r1, $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;

        r0 := @this: android.support.v4.util.AtomicFile;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName> = r1;

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".bak");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r7);

        r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName> = $r2;

        return;
    }

    public java.io.File getBaseFile()
    {
        android.support.v4.util.AtomicFile r0;
        java.io.File $r1;

        r0 := @this: android.support.v4.util.AtomicFile;

        $r1 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        return $r1;
    }

    public void delete()
    {
        android.support.v4.util.AtomicFile r0;
        java.io.File $r1, $r2;

        r0 := @this: android.support.v4.util.AtomicFile;

        $r1 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        $r2 = r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        return;
    }

    public java.io.FileOutputStream startWrite() throws java.io.IOException
    {
        android.support.v4.util.AtomicFile r0;
        java.lang.Throwable r1, r3, $r17, $r24;
        java.io.File r2, $r4, $r5, $r6, $r7, $r8, $r11, $r14, $r21, $r25, $r27, $r31, $r35;
        boolean $z0, $z1, $z3, $z4;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r15, $r19, $r20, $r22, $r29, $r30, $r32;
        java.lang.String $r16, $r23, $r33;
        java.io.IOException $r18, $r28;
        java.io.FileOutputStream $r26, $r34, r36;

        r0 := @this: android.support.v4.util.AtomicFile;

        $r4 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $z1 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        $r8 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $r7 = r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $z3 = virtualinvoke $r8.<java.io.File: boolean renameTo(java.io.File)>($r7);

        if $z3 != 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t rename file ");

        $r11 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to backup file ");

        $r14 = r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AtomicFile", $r16);

        goto label2;

     label1:
        $r6 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r6.<java.io.File: boolean delete()>();

     label2:
        $r34 = new java.io.FileOutputStream;

        $r35 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r34.<java.io.FileOutputStream: void <init>(java.io.File)>($r35);

        r36 = $r34;

     label3:
        goto label8;

     label4:
        $r24 := @caughtexception;

        r1 = $r24;

        $r25 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        r2 = virtualinvoke $r25.<java.io.File: java.io.File getParentFile()>();

        $z4 = virtualinvoke r2.<java.io.File: boolean mkdirs()>();

        if $z4 != 0 goto label5;

        $r28 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create directory ");

        $r31 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r33);

        throw $r28;

     label5:
        $r26 = new java.io.FileOutputStream;

        $r27 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r26.<java.io.FileOutputStream: void <init>(java.io.File)>($r27);

        r36 = $r26;

     label6:
        goto label8;

     label7:
        $r17 := @caughtexception;

        r3 = $r17;

        $r18 = new java.io.IOException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create ");

        $r21 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label8:
        return r36;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
        catch java.io.FileNotFoundException from label5 to label6 with label7;
    }

    public void finishWrite(java.io.FileOutputStream)
    {
        android.support.v4.util.AtomicFile r0;
        java.io.FileOutputStream r1;
        java.lang.Throwable r2, $r4;
        java.io.File $r3;

        r0 := @this: android.support.v4.util.AtomicFile;

        r1 := @parameter0: java.io.FileOutputStream;

        if r1 == null goto label4;

        staticinvoke <android.support.v4.util.AtomicFile: boolean sync(java.io.FileOutputStream)>(r1);

     label1:
        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        $r3 = r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "finishWrite: Got exception:", r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void failWrite(java.io.FileOutputStream)
    {
        android.support.v4.util.AtomicFile r0;
        java.io.FileOutputStream r1;
        java.lang.Throwable r2, $r6;
        java.io.File $r3, $r4, $r5;

        r0 := @this: android.support.v4.util.AtomicFile;

        r1 := @parameter0: java.io.FileOutputStream;

        if r1 == null goto label4;

        staticinvoke <android.support.v4.util.AtomicFile: boolean sync(java.io.FileOutputStream)>(r1);

     label1:
        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        $r3 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        $r5 = r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $r4 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r5.<java.io.File: boolean renameTo(java.io.File)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "failWrite: Got exception:", r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.io.FileInputStream openRead() throws java.io.FileNotFoundException
    {
        android.support.v4.util.AtomicFile r0;
        java.io.File $r1, $r3, $r4, $r5, $r6;
        boolean $z0;
        java.io.FileInputStream $r2;

        r0 := @this: android.support.v4.util.AtomicFile;

        $r1 = r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        $r6 = r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $r5 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r6.<java.io.File: boolean renameTo(java.io.File)>($r5);

     label1:
        $r2 = new java.io.FileInputStream;

        $r3 = r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

        return $r2;
    }

    public byte[] readFully() throws java.io.IOException
    {
        android.support.v4.util.AtomicFile r0;
        java.io.FileInputStream r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.Throwable r2, $r3;
        byte[] r4, r5, r6;

        r0 := @this: android.support.v4.util.AtomicFile;

        r1 = virtualinvoke r0.<android.support.v4.util.AtomicFile: java.io.FileInputStream openRead()>();

     label1:
        i6 = 0;

        i7 = virtualinvoke r1.<java.io.FileInputStream: int available()>();

        r4 = newarray (byte)[i7];

     label2:
        $i1 = lengthof r4;

        $i2 = $i1 - i6;

        i0 = virtualinvoke r1.<java.io.FileInputStream: int read(byte[],int,int)>(r4, i6, $i2);

        if i0 > 0 goto label4;

        r5 = r4;

     label3:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

        return r5;

     label4:
        i6 = i6 + i0;

        i8 = virtualinvoke r1.<java.io.FileInputStream: int available()>();

        $i3 = lengthof r4;

        $i4 = $i3 - i6;

        if i8 <= $i4 goto label5;

        $i5 = i6 + i8;

        r6 = newarray (byte)[$i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r6, 0, i6);

        r4 = r6;

     label5:
        goto label2;

     label6:
        $r3 := @caughtexception;

        r2 = $r3;

     label7:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

        throw r2;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label7 with label6;
    }

    private static boolean sync(java.io.FileOutputStream)
    {
        java.io.FileOutputStream r0;
        java.lang.Throwable r1, $r3;
        java.io.FileDescriptor $r2;

        r0 := @parameter0: java.io.FileOutputStream;

     label1:
        $r2 = virtualinvoke r0.<java.io.FileOutputStream: java.io.FileDescriptor getFD()>();

        virtualinvoke $r2.<java.io.FileDescriptor: void sync()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

