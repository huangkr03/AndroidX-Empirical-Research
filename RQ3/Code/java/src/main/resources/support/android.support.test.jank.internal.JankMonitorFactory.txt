android.support.test.jank.internal.JankMonitorFactory
<android.support.test.jank.internal.JankMonitorFactory: java.lang.String TAG>
<android.support.test.jank.internal.JankMonitorFactory: int API_LEVEL_ACTUAL>
<android.support.test.jank.internal.JankMonitorFactory: android.app.UiAutomation mUiAutomation>
    public void <init>(android.app.UiAutomation)
    {
        android.support.test.jank.internal.JankMonitorFactory r0;
        android.app.UiAutomation r1;

        r0 := @this: android.support.test.jank.internal.JankMonitorFactory;

        r1 := @parameter0: android.app.UiAutomation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.jank.internal.JankMonitorFactory: android.app.UiAutomation mUiAutomation> = r1;

        return;
    }

    public java.util.List getJankMonitors(java.lang.reflect.Method, android.support.test.jank.JankTestBase)
    {
        android.support.test.jank.internal.JankMonitorFactory r0;
        java.lang.reflect.Method r1, r33;
        android.support.test.jank.JankTestBase r2;
        java.util.ArrayList r3, $r5;
        java.lang.Throwable r4, $r22, $r25, r34;
        java.lang.'annotation'.Annotation $r6, $r7, $r12, $r43;
        android.support.test.jank.internal.WindowAnimationFrameStatsMonitorImpl $r8;
        android.app.UiAutomation $r9, $r11, $r42;
        android.support.test.jank.internal.WindowContentFrameStatsMonitorImpl $r10;
        int $i0, $i1;
        android.support.test.jank.GfxMonitor $r13;
        boolean $z2, $z4, $z5;
        java.lang.Class $r14, $r27;
        java.lang.Class[] $r15;
        java.lang.Object[] $r16, $r17, $r19, $r23, $r26;
        java.lang.String $r18, $r20, $r21, $r24, $r28, $r29, $r30, r31, r32, $r36, $r40;
        java.lang.Object r35;
        java.lang.StringBuilder $r37, $r38, $r39;
        android.support.test.jank.internal.GfxMonitorImpl $r41;

        r0 := @this: android.support.test.jank.internal.JankMonitorFactory;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: android.support.test.jank.JankTestBase;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r3 = $r5;

        $r6 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/support/test/jank/GfxMonitor;");

        if $r6 == null goto label14;

        $i0 = <android.support.test.jank.internal.JankMonitorFactory: int API_LEVEL_ACTUAL>;

        if $i0 > 22 goto label01;

        $r21 = <android.support.test.jank.internal.JankMonitorFactory: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r21, "Skipping GfxMonitor. Not supported by current platform.");

        goto label14;

     label01:
        $r12 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/support/test/jank/GfxMonitor;");

        $r13 = (android.support.test.jank.GfxMonitor) $r12;

        r31 = interfaceinvoke $r13.<android.support.test.jank.GfxMonitor: java.lang.String processName()>();

        $z2 = virtualinvoke r31.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z2 == 0 goto label13;

        r32 = virtualinvoke r31.<java.lang.String: java.lang.String substring(int)>(1);

        r33 = null;

     label02:
        $r14 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r15 = (java.lang.Class[]) null;

        r33 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r32, $r15);

     label03:
        goto label05;

     label04:
        $r22 := @caughtexception;

        r34 = $r22;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r32;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Method \"%s\" not found", $r23);

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r24);

     label05:
        $i1 = virtualinvoke r33.<java.lang.reflect.Method: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z4 != 0 goto label06;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r32;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Method \"%s\" should be public", $r19);

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r20);

     label06:
        r35 = null;

     label07:
        $r16 = (java.lang.Object[]) null;

        r35 = virtualinvoke r33.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r16);

     label08:
        goto label10;

     label09:
        $r25 := @caughtexception;

        r4 = $r25;

        $r26 = newarray (java.lang.Object)[3];

        $r27 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        $r26[0] = $r28;

        $r29 = virtualinvoke r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r26[1] = $r29;

        $r26[2] = r32;

        $r30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Exception %s(%s) while invoking \"%s\" for monitored process name", $r26);

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r30);

     label10:
        if r35 == null goto label11;

        $z5 = r35 instanceof java.lang.String;

        if $z5 != 0 goto label12;

     label11:
        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r32;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Method \"%s\" should return String", $r17);

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r18);

     label12:
        r31 = (java.lang.String) r35;

        $r36 = <android.support.test.jank.internal.JankMonitorFactory: java.lang.String TAG>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using process name from annotated method: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r36, $r40);

     label13:
        $r41 = new android.support.test.jank.internal.GfxMonitorImpl;

        $r42 = r0.<android.support.test.jank.internal.JankMonitorFactory: android.app.UiAutomation mUiAutomation>;

        specialinvoke $r41.<android.support.test.jank.internal.GfxMonitorImpl: void <init>(android.app.UiAutomation,java.lang.String)>($r42, r31);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r41);

     label14:
        $r43 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/support/test/jank/WindowContentFrameStatsMonitor;");

        if $r43 == null goto label15;

        $r10 = new android.support.test.jank.internal.WindowContentFrameStatsMonitorImpl;

        $r11 = r0.<android.support.test.jank.internal.JankMonitorFactory: android.app.UiAutomation mUiAutomation>;

        specialinvoke $r10.<android.support.test.jank.internal.WindowContentFrameStatsMonitorImpl: void <init>(android.app.UiAutomation)>($r11);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r10);

     label15:
        $r7 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/support/test/jank/WindowAnimationFrameStatsMonitor;");

        if $r7 == null goto label16;

        $r8 = new android.support.test.jank.internal.WindowAnimationFrameStatsMonitorImpl;

        $r9 = r0.<android.support.test.jank.internal.JankMonitorFactory: android.app.UiAutomation mUiAutomation>;

        specialinvoke $r8.<android.support.test.jank.internal.WindowAnimationFrameStatsMonitorImpl: void <init>(android.app.UiAutomation)>($r9);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label16:
        return r3;

        catch java.lang.NoSuchMethodException from label02 to label03 with label04;
        catch java.lang.IllegalAccessException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label09;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        int $i0, $i1;
        boolean $z0;
        byte $b2;

        <android.support.test.jank.internal.JankMonitorFactory: java.lang.String TAG> = "JankTestHelper";

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        $r1 = "REL";

        $r0 = <android.os.Build$VERSION: java.lang.String CODENAME>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $b2 = 0;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        $i1 = $i0 + $b2;

        <android.support.test.jank.internal.JankMonitorFactory: int API_LEVEL_ACTUAL> = $i1;

        return;
    }

