android.support.test.espresso.contrib.AccessibilityChecks
<android.support.test.espresso.contrib.AccessibilityChecks: com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator CHECK_EXECUTOR>
<android.support.test.espresso.contrib.AccessibilityChecks: android.support.test.espresso.ViewAssertion ACCESSIBILITY_CHECK_ASSERTION>
<android.support.test.espresso.contrib.AccessibilityChecks: boolean checksEnabled>
<android.support.test.espresso.contrib.AccessibilityChecks: java.lang.String TAG>
    private void <init>()
    {
        android.support.test.espresso.contrib.AccessibilityChecks r0;

        r0 := @this: android.support.test.espresso.contrib.AccessibilityChecks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator enable()
    {
        boolean $z0, $z1;
        java.lang.Object[] $r0;
        android.support.test.espresso.ViewAssertion $r1;
        com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator $r2;

        $z0 = <android.support.test.espresso.contrib.AccessibilityChecks: boolean checksEnabled>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[0];

        staticinvoke <android.support.test.espresso.contrib.Checks: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "Accessibility checks already enabled!", $r0);

        <android.support.test.espresso.contrib.AccessibilityChecks: boolean checksEnabled> = 1;

        $r1 = <android.support.test.espresso.contrib.AccessibilityChecks: android.support.test.espresso.ViewAssertion ACCESSIBILITY_CHECK_ASSERTION>;

        staticinvoke <android.support.test.espresso.action.ViewActions: void addGlobalAssertion(java.lang.String,android.support.test.espresso.ViewAssertion)>("Accessibility Checks", $r1);

        $r2 = <android.support.test.espresso.contrib.AccessibilityChecks: com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator CHECK_EXECUTOR>;

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion accessibilityAssertion()
    {
        android.support.test.espresso.ViewAssertion $r0;

        $r0 = <android.support.test.espresso.contrib.AccessibilityChecks: android.support.test.espresso.ViewAssertion ACCESSIBILITY_CHECK_ASSERTION>;

        return $r0;
    }

    static com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator access$000()
    {
        com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator $r0;

        $r0 = <android.support.test.espresso.contrib.AccessibilityChecks: com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator CHECK_EXECUTOR>;

        return $r0;
    }

    static void <clinit>()
    {
        com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator $r0, $r2;
        android.support.test.espresso.contrib.AccessibilityChecks$1 $r1;
        android.support.test.espresso.contrib.AccessibilityChecks$2 $r3;

        $r0 = new com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator;

        specialinvoke $r0.<com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator: void <init>()>();

        $r1 = new android.support.test.espresso.contrib.AccessibilityChecks$1;

        specialinvoke $r1.<android.support.test.espresso.contrib.AccessibilityChecks$1: void <init>()>();

        $r2 = virtualinvoke $r0.<com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator: com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator setResultDescriptor(com.google.android.apps.common.testing.accessibility.framework.AccessibilityCheckResult$AccessibilityCheckResultDescriptor)>($r1);

        <android.support.test.espresso.contrib.AccessibilityChecks: com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator CHECK_EXECUTOR> = $r2;

        $r3 = new android.support.test.espresso.contrib.AccessibilityChecks$2;

        specialinvoke $r3.<android.support.test.espresso.contrib.AccessibilityChecks$2: void <init>()>();

        <android.support.test.espresso.contrib.AccessibilityChecks: android.support.test.espresso.ViewAssertion ACCESSIBILITY_CHECK_ASSERTION> = $r3;

        <android.support.test.espresso.contrib.AccessibilityChecks: boolean checksEnabled> = 0;

        return;
    }

android.support.test.espresso.contrib.AccessibilityChecks$1
    void <init>()
    {
        android.support.test.espresso.contrib.AccessibilityChecks$1 r0;

        r0 := @this: android.support.test.espresso.contrib.AccessibilityChecks$1;

        specialinvoke r0.<com.google.android.apps.common.testing.accessibility.framework.AccessibilityCheckResult$AccessibilityCheckResultDescriptor: void <init>()>();

        return;
    }

    public java.lang.String describeView(android.view.View)
    {
        android.support.test.espresso.contrib.AccessibilityChecks$1 r0;
        android.view.View r1;
        java.lang.String $r2;

        r0 := @this: android.support.test.espresso.contrib.AccessibilityChecks$1;

        r1 := @parameter0: android.view.View;

        $r2 = staticinvoke <android.support.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>(r1);

        return $r2;
    }

android.support.test.espresso.contrib.AccessibilityChecks$2
    void <init>()
    {
        android.support.test.espresso.contrib.AccessibilityChecks$2 r0;

        r0 := @this: android.support.test.espresso.contrib.AccessibilityChecks$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void check(android.view.View, android.support.test.espresso.NoMatchingViewException)
    {
        android.support.test.espresso.contrib.AccessibilityChecks$2 r0;
        android.view.View r1;
        android.support.test.espresso.NoMatchingViewException r2;
        com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator $r3;
        java.lang.NullPointerException $r5;
        java.lang.Object[] $r6;
        java.lang.String $r7, $r8;

        r0 := @this: android.support.test.espresso.contrib.AccessibilityChecks$2;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.support.test.espresso.NoMatchingViewException;

        if r2 == null goto label1;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r2.<android.support.test.espresso.NoMatchingViewException: java.lang.String getViewMatcherDescription()>();

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'accessibility checks could not be performed because view \'%s\' was notfound.\n", $r6);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccessibilityChecks", $r8);

        throw r2;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label2:
        $r3 = staticinvoke <android.support.test.espresso.contrib.AccessibilityChecks: com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator access$000()>();

        virtualinvoke $r3.<com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator: java.util.List checkAndReturnResults(android.view.View)>(r1);

        return;
    }

