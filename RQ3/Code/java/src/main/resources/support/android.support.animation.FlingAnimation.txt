android.support.animation.FlingAnimation
<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce>
    public void <init>(android.support.animation.FloatValueHolder)
    {
        android.support.animation.FlingAnimation r0;
        android.support.animation.FloatValueHolder r1;
        android.support.animation.FlingAnimation$DragForce $r2, $r3;
        float $f0;

        r0 := @this: android.support.animation.FlingAnimation;

        r1 := @parameter0: android.support.animation.FloatValueHolder;

        specialinvoke r0.<android.support.animation.DynamicAnimation: void <init>(android.support.animation.FloatValueHolder)>(r1);

        $r2 = new android.support.animation.FlingAnimation$DragForce;

        specialinvoke $r2.<android.support.animation.FlingAnimation$DragForce: void <init>()>();

        r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce> = $r2;

        $r3 = r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce>;

        $f0 = virtualinvoke r0.<android.support.animation.FlingAnimation: float getValueThreshold()>();

        virtualinvoke $r3.<android.support.animation.FlingAnimation$DragForce: void setValueThreshold(float)>($f0);

        return;
    }

    public void <init>(java.lang.Object, android.support.animation.FloatPropertyCompat)
    {
        android.support.animation.FlingAnimation r0;
        java.lang.Object r1;
        android.support.animation.FloatPropertyCompat r2;
        android.support.animation.FlingAnimation$DragForce $r3, $r4;
        float $f0;

        r0 := @this: android.support.animation.FlingAnimation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: android.support.animation.FloatPropertyCompat;

        specialinvoke r0.<android.support.animation.DynamicAnimation: void <init>(java.lang.Object,android.support.animation.FloatPropertyCompat)>(r1, r2);

        $r3 = new android.support.animation.FlingAnimation$DragForce;

        specialinvoke $r3.<android.support.animation.FlingAnimation$DragForce: void <init>()>();

        r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce> = $r3;

        $r4 = r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce>;

        $f0 = virtualinvoke r0.<android.support.animation.FlingAnimation: float getValueThreshold()>();

        virtualinvoke $r4.<android.support.animation.FlingAnimation$DragForce: void setValueThreshold(float)>($f0);

        return;
    }

    public android.support.animation.FlingAnimation setFriction(float)
    {
        android.support.animation.FlingAnimation r0;
        float f0;
        byte $b0;
        android.support.animation.FlingAnimation$DragForce $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Friction must be positive");

        throw $r2;

     label1:
        $r1 = r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce>;

        virtualinvoke $r1.<android.support.animation.FlingAnimation$DragForce: void setFrictionScalar(float)>(f0);

        return r0;
    }

    public float getFriction()
    {
        android.support.animation.FlingAnimation r0;
        android.support.animation.FlingAnimation$DragForce $r1;
        float $f0;

        r0 := @this: android.support.animation.FlingAnimation;

        $r1 = r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce>;

        $f0 = virtualinvoke $r1.<android.support.animation.FlingAnimation$DragForce: float getFrictionScalar()>();

        return $f0;
    }

    public android.support.animation.FlingAnimation setMinValue(float)
    {
        android.support.animation.FlingAnimation r0;
        float f0;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        specialinvoke r0.<android.support.animation.DynamicAnimation: android.support.animation.DynamicAnimation setMinValue(float)>(f0);

        return r0;
    }

    public android.support.animation.FlingAnimation setMaxValue(float)
    {
        android.support.animation.FlingAnimation r0;
        float f0;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        specialinvoke r0.<android.support.animation.DynamicAnimation: android.support.animation.DynamicAnimation setMaxValue(float)>(f0);

        return r0;
    }

    public android.support.animation.FlingAnimation setStartVelocity(float)
    {
        android.support.animation.FlingAnimation r0;
        float f0;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        specialinvoke r0.<android.support.animation.DynamicAnimation: android.support.animation.DynamicAnimation setStartVelocity(float)>(f0);

        return r0;
    }

    boolean updateValueAndVelocity(long)
    {
        android.support.animation.FlingAnimation r0;
        long l0;
        android.support.animation.DynamicAnimation$MassState r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        android.support.animation.FlingAnimation$DragForce $r2;
        byte $b1, $b2;
        boolean $z0;

        r0 := @this: android.support.animation.FlingAnimation;

        l0 := @parameter0: long;

        $r2 = r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce>;

        $f1 = r0.<android.support.animation.FlingAnimation: float mValue>;

        $f0 = r0.<android.support.animation.FlingAnimation: float mVelocity>;

        r1 = virtualinvoke $r2.<android.support.animation.FlingAnimation$DragForce: android.support.animation.DynamicAnimation$MassState updateValueAndVelocity(float,float,long)>($f1, $f0, l0);

        $f2 = r1.<android.support.animation.DynamicAnimation$MassState: float mValue>;

        r0.<android.support.animation.FlingAnimation: float mValue> = $f2;

        $f3 = r1.<android.support.animation.DynamicAnimation$MassState: float mVelocity>;

        r0.<android.support.animation.FlingAnimation: float mVelocity> = $f3;

        $f5 = r0.<android.support.animation.FlingAnimation: float mValue>;

        $f4 = r0.<android.support.animation.FlingAnimation: float mMinValue>;

        $b1 = $f5 cmpg $f4;

        if $b1 >= 0 goto label1;

        $f11 = r0.<android.support.animation.FlingAnimation: float mMinValue>;

        r0.<android.support.animation.FlingAnimation: float mValue> = $f11;

        return 1;

     label1:
        $f7 = r0.<android.support.animation.FlingAnimation: float mValue>;

        $f6 = r0.<android.support.animation.FlingAnimation: float mMaxValue>;

        $b2 = $f7 cmpl $f6;

        if $b2 <= 0 goto label2;

        $f10 = r0.<android.support.animation.FlingAnimation: float mMaxValue>;

        r0.<android.support.animation.FlingAnimation: float mValue> = $f10;

        return 1;

     label2:
        $f9 = r0.<android.support.animation.FlingAnimation: float mValue>;

        $f8 = r0.<android.support.animation.FlingAnimation: float mVelocity>;

        $z0 = virtualinvoke r0.<android.support.animation.FlingAnimation: boolean isAtEquilibrium(float,float)>($f9, $f8);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    float getAcceleration(float, float)
    {
        android.support.animation.FlingAnimation r0;
        float f0, f1, $f2;
        android.support.animation.FlingAnimation$DragForce $r1;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce>;

        $f2 = virtualinvoke $r1.<android.support.animation.FlingAnimation$DragForce: float getAcceleration(float,float)>(f0, f1);

        return $f2;
    }

    boolean isAtEquilibrium(float, float)
    {
        android.support.animation.FlingAnimation r0;
        float f0, f1, $f2, $f3;
        byte $b0, $b1;
        android.support.animation.FlingAnimation$DragForce $r1;
        boolean $z0, $z1;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = r0.<android.support.animation.FlingAnimation: float mMaxValue>;

        $b0 = f0 cmpl $f2;

        if $b0 >= 0 goto label1;

        $f3 = r0.<android.support.animation.FlingAnimation: float mMinValue>;

        $b1 = f0 cmpg $f3;

        if $b1 <= 0 goto label1;

        $r1 = r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce>;

        $z0 = virtualinvoke $r1.<android.support.animation.FlingAnimation$DragForce: boolean isAtEquilibrium(float,float)>(f0, f1);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    void setValueThreshold(float)
    {
        android.support.animation.FlingAnimation r0;
        float f0;
        android.support.animation.FlingAnimation$DragForce $r1;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        $r1 = r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation$DragForce mFlingForce>;

        virtualinvoke $r1.<android.support.animation.FlingAnimation$DragForce: void setValueThreshold(float)>(f0);

        return;
    }

    public volatile android.support.animation.DynamicAnimation setMinValue(float)
    {
        android.support.animation.FlingAnimation r0, $r1;
        float f0;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation setMinValue(float)>(f0);

        return $r1;
    }

    public volatile android.support.animation.DynamicAnimation setMaxValue(float)
    {
        android.support.animation.FlingAnimation r0, $r1;
        float f0;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation setMaxValue(float)>(f0);

        return $r1;
    }

    public volatile android.support.animation.DynamicAnimation setStartVelocity(float)
    {
        android.support.animation.FlingAnimation r0, $r1;
        float f0;

        r0 := @this: android.support.animation.FlingAnimation;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<android.support.animation.FlingAnimation: android.support.animation.FlingAnimation setStartVelocity(float)>(f0);

        return $r1;
    }

android.support.animation.FlingAnimation$DragForce
<android.support.animation.FlingAnimation$DragForce: float DEFAULT_FRICTION>
<android.support.animation.FlingAnimation$DragForce: float VELOCITY_THRESHOLD_MULTIPLIER>
<android.support.animation.FlingAnimation$DragForce: float mFriction>
<android.support.animation.FlingAnimation$DragForce: float mVelocityThreshold>
<android.support.animation.FlingAnimation$DragForce: android.support.animation.DynamicAnimation$MassState mMassState>
    void <init>()
    {
        android.support.animation.FlingAnimation$DragForce r0;
        android.support.animation.DynamicAnimation$MassState $r1;

        r0 := @this: android.support.animation.FlingAnimation$DragForce;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.animation.FlingAnimation$DragForce: float mFriction> = -4.2F;

        $r1 = new android.support.animation.DynamicAnimation$MassState;

        specialinvoke $r1.<android.support.animation.DynamicAnimation$MassState: void <init>()>();

        r0.<android.support.animation.FlingAnimation$DragForce: android.support.animation.DynamicAnimation$MassState mMassState> = $r1;

        return;
    }

    void setFrictionScalar(float)
    {
        android.support.animation.FlingAnimation$DragForce r0;
        float f0, $f1;

        r0 := @this: android.support.animation.FlingAnimation$DragForce;

        f0 := @parameter0: float;

        $f1 = f0 * -4.2F;

        r0.<android.support.animation.FlingAnimation$DragForce: float mFriction> = $f1;

        return;
    }

    float getFrictionScalar()
    {
        android.support.animation.FlingAnimation$DragForce r0;
        float $f0, $f1;

        r0 := @this: android.support.animation.FlingAnimation$DragForce;

        $f0 = r0.<android.support.animation.FlingAnimation$DragForce: float mFriction>;

        $f1 = $f0 / -4.2F;

        return $f1;
    }

    android.support.animation.DynamicAnimation$MassState updateValueAndVelocity(float, float, long)
    {
        android.support.animation.FlingAnimation$DragForce r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        long l0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        android.support.animation.DynamicAnimation$MassState $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: android.support.animation.FlingAnimation$DragForce;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        l0 := @parameter2: long;

        $r1 = r0.<android.support.animation.FlingAnimation$DragForce: android.support.animation.DynamicAnimation$MassState mMassState>;

        $d1 = (double) f1;

        $f2 = (float) l0;

        $f4 = $f2 / 1000.0F;

        $f3 = r0.<android.support.animation.FlingAnimation$DragForce: float mFriction>;

        $f5 = $f4 * $f3;

        $d0 = (double) $f5;

        $d2 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $d3 = $d1 * $d2;

        $f6 = (float) $d3;

        $r1.<android.support.animation.DynamicAnimation$MassState: float mVelocity> = $f6;

        $r2 = r0.<android.support.animation.FlingAnimation$DragForce: android.support.animation.DynamicAnimation$MassState mMassState>;

        $f7 = r0.<android.support.animation.FlingAnimation$DragForce: float mFriction>;

        $f8 = f1 / $f7;

        $f9 = f0 - $f8;

        $d5 = (double) $f9;

        $f10 = r0.<android.support.animation.FlingAnimation$DragForce: float mFriction>;

        $f11 = f1 / $f10;

        $d6 = (double) $f11;

        $f13 = r0.<android.support.animation.FlingAnimation$DragForce: float mFriction>;

        $f12 = (float) l0;

        $f14 = $f13 * $f12;

        $f15 = $f14 / 1000.0F;

        $d4 = (double) $f15;

        $d7 = staticinvoke <java.lang.Math: double exp(double)>($d4);

        $d8 = $d6 * $d7;

        $d9 = $d5 + $d8;

        $f16 = (float) $d9;

        $r2.<android.support.animation.DynamicAnimation$MassState: float mValue> = $f16;

        $r3 = r0.<android.support.animation.FlingAnimation$DragForce: android.support.animation.DynamicAnimation$MassState mMassState>;

        $f18 = $r3.<android.support.animation.DynamicAnimation$MassState: float mValue>;

        $r4 = r0.<android.support.animation.FlingAnimation$DragForce: android.support.animation.DynamicAnimation$MassState mMassState>;

        $f17 = $r4.<android.support.animation.DynamicAnimation$MassState: float mVelocity>;

        $z0 = virtualinvoke r0.<android.support.animation.FlingAnimation$DragForce: boolean isAtEquilibrium(float,float)>($f18, $f17);

        if $z0 == 0 goto label1;

        $r6 = r0.<android.support.animation.FlingAnimation$DragForce: android.support.animation.DynamicAnimation$MassState mMassState>;

        $r6.<android.support.animation.DynamicAnimation$MassState: float mVelocity> = 0.0F;

     label1:
        $r5 = r0.<android.support.animation.FlingAnimation$DragForce: android.support.animation.DynamicAnimation$MassState mMassState>;

        return $r5;
    }

    public float getAcceleration(float, float)
    {
        android.support.animation.FlingAnimation$DragForce r0;
        float f0, f1, $f2, $f3;

        r0 := @this: android.support.animation.FlingAnimation$DragForce;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = r0.<android.support.animation.FlingAnimation$DragForce: float mFriction>;

        $f3 = f1 * $f2;

        return $f3;
    }

    public boolean isAtEquilibrium(float, float)
    {
        android.support.animation.FlingAnimation$DragForce r0;
        float f0, f1, $f2, $f3;
        byte $b0;
        boolean $z0;

        r0 := @this: android.support.animation.FlingAnimation$DragForce;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        $f3 = r0.<android.support.animation.FlingAnimation$DragForce: float mVelocityThreshold>;

        $b0 = $f2 cmpg $f3;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void setValueThreshold(float)
    {
        android.support.animation.FlingAnimation$DragForce r0;
        float f0, $f1;

        r0 := @this: android.support.animation.FlingAnimation$DragForce;

        f0 := @parameter0: float;

        $f1 = f0 * 62.5F;

        r0.<android.support.animation.FlingAnimation$DragForce: float mVelocityThreshold> = $f1;

        return;
    }

