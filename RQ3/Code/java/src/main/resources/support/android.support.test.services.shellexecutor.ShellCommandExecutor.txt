android.support.test.services.shellexecutor.ShellCommandExecutor
<android.support.test.services.shellexecutor.ShellCommandExecutor: java.lang.String TAG>
<android.support.test.services.shellexecutor.ShellCommandExecutor: java.util.concurrent.ExecutorService executor>
    void <init>(java.util.concurrent.ExecutorService)
    {
        android.support.test.services.shellexecutor.ShellCommandExecutor $r0;
        java.util.concurrent.ExecutorService $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutor;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must provide an ExecutorService");

        throw $r2;

     label1:
        $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor: java.util.concurrent.ExecutorService executor> = $r1;

        return;
    }

    static void access$000(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <android.support.test.services.shellexecutor.ShellCommandExecutor: void debug(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }

    private static transient void debug(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("shell_cmd_exec", 3);

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r0, $r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("shell_cmd_exec", $r0);

     label1:
        return;
    }

    public void execute(android.support.test.services.shellexecutor.ShellCommand, java.io.OutputStream) throws java.io.IOException
    {
        android.support.test.services.shellexecutor.ShellCommandExecutor $r0;
        android.support.test.services.shellexecutor.ShellCommand $r1;
        java.io.OutputStream $r2, $r14;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.String $r4, $r12;
        java.lang.Object[] $r5;
        java.util.List $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        java.lang.ProcessBuilder $r9;
        java.util.Map $r10;
        java.util.Set $r11;
        java.lang.Process $r13;
        java.io.InputStream $r15;
        java.util.concurrent.ExecutorService $r16;
        android.support.test.services.shellexecutor.ShellCommandExecutor$1 $r17;
        android.support.test.services.shellexecutor.ShellCommandExecutor$2 $r18;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutor;

        $r1 := @parameter0: android.support.test.services.shellexecutor.ShellCommand;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $z0 = virtualinvoke $r1.<android.support.test.services.shellexecutor.ShellCommand: boolean executeThroughShell()>();

        if $z0 == 0 goto label1;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("sh");

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("-c");

     label1:
        $r4 = virtualinvoke $r1.<android.support.test.services.shellexecutor.ShellCommand: java.lang.String getCommand()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r5 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke $r1.<android.support.test.services.shellexecutor.ShellCommand: java.lang.String getCommand()>();

        $r5[0] = $r4;

        staticinvoke <android.support.test.services.shellexecutor.ShellCommandExecutor: void debug(java.lang.String,java.lang.Object[])>("Command to execute: %s", $r5);

        $r6 = virtualinvoke $r1.<android.support.test.services.shellexecutor.ShellCommand: java.util.List getParameters()>();

        if $r6 == null goto label3;

        $r6 = virtualinvoke $r1.<android.support.test.services.shellexecutor.ShellCommand: java.util.List getParameters()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r8;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r4;

        staticinvoke <android.support.test.services.shellexecutor.ShellCommandExecutor: void debug(java.lang.String,java.lang.Object[])>("Added param: %s", $r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label2;

     label3:
        $r9 = new java.lang.ProcessBuilder;

        specialinvoke $r9.<java.lang.ProcessBuilder: void <init>(java.util.List)>($r3);

        $r10 = virtualinvoke $r1.<android.support.test.services.shellexecutor.ShellCommand: java.util.Map getShellEnv()>();

        if $r10 == null goto label5;

        $r10 = virtualinvoke $r1.<android.support.test.services.shellexecutor.ShellCommand: java.util.Map getShellEnv()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        if $r11 == null goto label5;

        $r10 = virtualinvoke $r1.<android.support.test.services.shellexecutor.ShellCommand: java.util.Map getShellEnv()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r8;

        $r10 = virtualinvoke $r1.<android.support.test.services.shellexecutor.ShellCommand: java.util.Map getShellEnv()>();

        $r8 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r12 = (java.lang.String) $r8;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r4;

        $r5[1] = $r12;

        staticinvoke <android.support.test.services.shellexecutor.ShellCommandExecutor: void debug(java.lang.String,java.lang.Object[])>("Set envVar %s:%s", $r5);

        $r10 = virtualinvoke $r9.<java.lang.ProcessBuilder: java.util.Map environment()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r12);

        goto label4;

     label5:
        virtualinvoke $r9.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectErrorStream(boolean)>(1);

        $r13 = virtualinvoke $r9.<java.lang.ProcessBuilder: java.lang.Process start()>();

        $r14 = virtualinvoke $r13.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        virtualinvoke $r14.<java.io.OutputStream: void close()>();

        $r15 = virtualinvoke $r13.<java.lang.Process: java.io.InputStream getErrorStream()>();

        virtualinvoke $r15.<java.io.InputStream: void close()>();

        $r16 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor: java.util.concurrent.ExecutorService executor>;

        $r17 = new android.support.test.services.shellexecutor.ShellCommandExecutor$1;

        specialinvoke $r17.<android.support.test.services.shellexecutor.ShellCommandExecutor$1: void <init>(android.support.test.services.shellexecutor.ShellCommandExecutor,java.lang.Process)>($r0, $r13);

        interfaceinvoke $r16.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r17);

        $r16 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor: java.util.concurrent.ExecutorService executor>;

        $r18 = new android.support.test.services.shellexecutor.ShellCommandExecutor$2;

        specialinvoke $r18.<android.support.test.services.shellexecutor.ShellCommandExecutor$2: void <init>(android.support.test.services.shellexecutor.ShellCommandExecutor,java.lang.Process,java.io.OutputStream)>($r0, $r13, $r2);

        interfaceinvoke $r16.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r18);

        return;
    }

android.support.test.services.shellexecutor.ShellCommandExecutor$1
<android.support.test.services.shellexecutor.ShellCommandExecutor$1: java.lang.Process val$p>
    void <init>(android.support.test.services.shellexecutor.ShellCommandExecutor, java.lang.Process)
    {
        android.support.test.services.shellexecutor.ShellCommandExecutor$1 $r0;
        android.support.test.services.shellexecutor.ShellCommandExecutor $r1;
        java.lang.Process $r2;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutor$1;

        $r1 := @parameter0: android.support.test.services.shellexecutor.ShellCommandExecutor;

        $r2 := @parameter1: java.lang.Process;

        $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor$1: java.lang.Process val$p> = $r2;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.services.shellexecutor.ShellCommandExecutor$1 $r0;
        java.lang.Process $r1;
        int $i0;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutor$1;

     label1:
        $r1 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor$1: java.lang.Process val$p>;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.Process: int waitFor()>();

     label3:
        $r2 = newarray (java.lang.Object)[1];

     label4:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label5:
        $r2[0] = $r3;

     label6:
        staticinvoke <android.support.test.services.shellexecutor.ShellCommandExecutor: void access$000(java.lang.String,java.lang.Object[])>("Process ended with return code %d", $r2);

     label7:
        return;

     label8:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("shell_cmd_exec", "Process interrupted", $r4);

        goto label1;

        catch java.lang.InterruptedException from label2 to label3 with label8;
        catch java.lang.InterruptedException from label4 to label5 with label8;
        catch java.lang.InterruptedException from label6 to label7 with label8;
    }

android.support.test.services.shellexecutor.ShellCommandExecutor$2
<android.support.test.services.shellexecutor.ShellCommandExecutor$2: java.lang.Process val$p>
<android.support.test.services.shellexecutor.ShellCommandExecutor$2: java.io.OutputStream val$writeStdoutTo>
    void <init>(android.support.test.services.shellexecutor.ShellCommandExecutor, java.lang.Process, java.io.OutputStream)
    {
        android.support.test.services.shellexecutor.ShellCommandExecutor$2 $r0;
        android.support.test.services.shellexecutor.ShellCommandExecutor $r1;
        java.lang.Process $r2;
        java.io.OutputStream $r3;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutor$2;

        $r1 := @parameter0: android.support.test.services.shellexecutor.ShellCommandExecutor;

        $r2 := @parameter1: java.lang.Process;

        $r3 := @parameter2: java.io.OutputStream;

        $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor$2: java.lang.Process val$p> = $r2;

        $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor$2: java.io.OutputStream val$writeStdoutTo> = $r3;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.services.shellexecutor.ShellCommandExecutor$2 $r0;
        java.lang.Process $r1;
        java.io.InputStream $r2;
        byte[] $r3;
        int $i0;
        java.io.OutputStream $r4;
        java.lang.Throwable $r5, $r6;

        $r0 := @this: android.support.test.services.shellexecutor.ShellCommandExecutor$2;

        $r1 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor$2: java.lang.Process val$p>;

        $r2 = virtualinvoke $r1.<java.lang.Process: java.io.InputStream getInputStream()>();

        $r3 = newarray (byte)[1024];

     label01:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r3);

     label02:
        if $i0 != -1 goto label06;

     label03:
        $r4 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor$2: java.io.OutputStream val$writeStdoutTo>;

     label04:
        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label05:
        return;

     label06:
        $r4 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor$2: java.io.OutputStream val$writeStdoutTo>;

     label07:
        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0);

     label08:
        $r4 = $r0.<android.support.test.services.shellexecutor.ShellCommandExecutor$2: java.io.OutputStream val$writeStdoutTo>;

     label09:
        virtualinvoke $r4.<java.io.OutputStream: void flush()>();

     label10:
        goto label01;

     label11:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("shell_cmd_exec", "Writer disconnected, terminating");

        goto label03;

     label12:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("shell_cmd_exec", "Close threw an exception", $r6);

        return;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
    }

