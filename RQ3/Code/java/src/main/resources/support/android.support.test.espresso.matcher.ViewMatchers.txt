android.support.test.espresso.matcher.ViewMatchers
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.hamcrest.Matcher isAssignableFrom(java.lang.Class)
    {
        java.lang.Class r0;
        android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r2;
        org.hamcrest.Matcher r3;

        r0 := @parameter0: java.lang.Class;

        r2 = new android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        specialinvoke r2.<android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: void <init>(java.lang.Class,android.support.test.espresso.matcher.ViewMatchers$1)>(r0, null);

        r3 = (org.hamcrest.Matcher) r2;

        return r3;
    }

    public static org.hamcrest.Matcher withClassName(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher isDisplayed()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher isCompletelyDisplayed()
    {
        org.hamcrest.Matcher $r0;

        $r0 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isDisplayingAtLeast(int)>(100);

        return $r0;
    }

    public static org.hamcrest.Matcher isDisplayingAtLeast(int)
    {
        int i0;
        boolean $z0, $z1;
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        if i0 > 100 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean,java.lang.String,int)>($z0, "Cannot have over 100 percent: %s", i0);

        if i0 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: void checkState(boolean,java.lang.String,int)>($z1, "Must have a positive, non-zero value: %s", i0);

        r1 = new android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher isEnabled()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher isFocusable()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher hasFocus()
    {
        android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher isSelected()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher hasSibling(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withContentDescription(int)
    {
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher withContentDescription(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withContentDescription(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withContentDescription(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withId(int)
    {
        int i0;
        java.lang.Integer $r0;
        org.hamcrest.Matcher $r1, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withId(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withId(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withResourceName(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withResourceName(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withResourceName(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withTagKey(int)
    {
        int i0;
        org.hamcrest.Matcher $r0, $r1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher notNullValue()>();

        $r1 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withTagKey(int,org.hamcrest.Matcher)>(i0, $r0);

        return $r1;
    }

    public static org.hamcrest.Matcher withTagKey(int, org.hamcrest.Matcher)
    {
        int i0;
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r4;

        i0 := @parameter0: int;

        r0 := @parameter1: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: void <init>(int,org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, $r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withTagValue(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withText(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withText(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withText(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withText(int)
    {
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r1;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r2;
        org.hamcrest.Matcher r3;

        i0 := @parameter0: int;

        r2 = new android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        $r1 = <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT>;

        specialinvoke r2.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, $r1, null);

        r3 = (org.hamcrest.Matcher) r2;

        return r3;
    }

    public static org.hamcrest.Matcher withSubstring(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>(r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withText(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withHint(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.Object $r1;
        org.hamcrest.Matcher $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r2);

        $r4 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withHint(org.hamcrest.Matcher)>($r3);

        return $r4;
    }

    public static org.hamcrest.Matcher withHint(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withHint(int)
    {
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r1;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r2;
        org.hamcrest.Matcher r3;

        i0 := @parameter0: int;

        r2 = new android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        $r1 = <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT>;

        specialinvoke r2.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, $r1, null);

        r3 = (org.hamcrest.Matcher) r2;

        return r3;
    }

    public static org.hamcrest.Matcher isChecked()
    {
        java.lang.Boolean $r0;
        org.hamcrest.Matcher $r1, $r2;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withCheckBoxState(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher isNotChecked()
    {
        java.lang.Boolean $r0;
        org.hamcrest.Matcher $r1, $r2;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withCheckBoxState(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    private static org.hamcrest.Matcher withCheckBoxState(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, r3;
        android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r2 = new android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        specialinvoke r2.<android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>(r0, null);

        r3 = (org.hamcrest.Matcher) r2;

        return r3;
    }

    public static org.hamcrest.Matcher hasContentDescription()
    {
        android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher hasDescendant(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher isClickable()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher isDescendantOfA(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withEffectiveVisibility(android.support.test.espresso.matcher.ViewMatchers$Visibility)
    {
        android.support.test.espresso.matcher.ViewMatchers$Visibility r0;
        android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r2;
        org.hamcrest.Matcher r3;

        r0 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$Visibility;

        r2 = new android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        specialinvoke r2.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$Visibility,android.support.test.espresso.matcher.ViewMatchers$1)>(r0, null);

        r3 = (org.hamcrest.Matcher) r2;

        return r3;
    }

    public static org.hamcrest.Matcher withAlpha(float)
    {
        float f0;
        android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r1;
        org.hamcrest.Matcher r2;

        f0 := @parameter0: float;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: void <init>(float,android.support.test.espresso.matcher.ViewMatchers$1)>(f0, null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher withParent(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withChild(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher hasChildCount(int)
    {
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher hasMinimumChildCount(int)
    {
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher isRoot()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher supportsInputMethods()
    {
        android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher hasImeAction(int)
    {
        int i0;
        java.lang.Integer $r0;
        org.hamcrest.Matcher $r1, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher hasImeAction(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher hasImeAction(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, r3;
        android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r2 = new android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        specialinvoke r2.<android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>(r0, null);

        r3 = (org.hamcrest.Matcher) r2;

        return r3;
    }

    public static org.hamcrest.Matcher hasLinks()
    {
        android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static void assertThat(java.lang.Object, org.hamcrest.Matcher)
    {
        java.lang.Object r0;
        org.hamcrest.Matcher r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.hamcrest.Matcher;

        staticinvoke <android.support.test.espresso.matcher.ViewMatchers: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("", r0, r1);

        return;
    }

    public static void assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)
    {
        java.lang.String r0, $r12, $r14;
        java.lang.Object r1;
        org.hamcrest.Matcher r2;
        org.hamcrest.StringDescription r3, r16;
        boolean $z0, $z1;
        org.hamcrest.Description $r5, $r6, $r7;
        android.view.View $r13;
        junit.framework.AssertionFailedError r17;
        org.hamcrest.SelfDescribing r18;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.hamcrest.Matcher;

        $z0 = interfaceinvoke r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        r16 = new org.hamcrest.StringDescription;

        specialinvoke r16.<org.hamcrest.StringDescription: void <init>()>();

        r3 = r16;

        $r5 = interfaceinvoke r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(r0);

        $r6 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\nExpected: ");

        r18 = (org.hamcrest.SelfDescribing) r2;

        $r7 = interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r18);

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\n     Got: ");

        $z1 = r1 instanceof android.view.View;

        if $z1 == 0 goto label1;

        $r13 = (android.view.View) r1;

        $r14 = staticinvoke <android.support.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>($r13);

        interfaceinvoke r3.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r14);

        goto label2;

     label1:
        interfaceinvoke r3.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

     label2:
        interfaceinvoke r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\n");

        r17 = new junit.framework.AssertionFailedError;

        $r12 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r17.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>($r12);

        throw r17;

     label3:
        return;
    }

    public static org.hamcrest.Matcher withSpinnerText(int)
    {
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher withSpinnerText(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher withSpinnerText(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withSpinnerText(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher isJavascriptEnabled()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r1;
        org.hamcrest.Matcher r2;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$1)>(null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher hasErrorText(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        java.lang.Object $r2;
        android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r4;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: void <init>(org.hamcrest.Matcher,android.support.test.espresso.matcher.ViewMatchers$1)>($r3, null);

        r5 = (org.hamcrest.Matcher) r4;

        return r5;
    }

    public static org.hamcrest.Matcher hasErrorText(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        $r2 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher hasErrorText(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withInputType(int)
    {
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher withParentIndex(int)
    {
        int i0;
        boolean $z0;
        android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>($z0, "Index %s must be >= 0", i0);

        r1 = new android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$1)>(i0, null);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher hasBackground(int)
    {
        int i0;
        android.support.test.espresso.matcher.HasBackgroundMatcher r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new android.support.test.espresso.matcher.HasBackgroundMatcher;

        specialinvoke r1.<android.support.test.espresso.matcher.HasBackgroundMatcher: void <init>(int)>(i0);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

    public static org.hamcrest.Matcher hasTextColor(int)
    {
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r1.<android.support.test.espresso.matcher.ViewMatchers$1: void <init>(java.lang.Class,int)>(class "Landroid/widget/TextView;", i0);

        r2 = (org.hamcrest.Matcher) r1;

        return r2;
    }

android.support.test.espresso.matcher.ViewMatchers$1
<android.support.test.espresso.matcher.ViewMatchers$1: android.content.Context context>
<android.support.test.espresso.matcher.ViewMatchers$1: int val$colorResId>
    void <init>(java.lang.Class, int)
    {
        android.support.test.espresso.matcher.ViewMatchers$1 r0;
        java.lang.Class r1;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$1;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        r0.<android.support.test.espresso.matcher.ViewMatchers$1: int val$colorResId> = i0;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(r1);

        return;
    }

    protected boolean matchesSafely(android.widget.TextView)
    {
        android.support.test.espresso.matcher.ViewMatchers$1 r0;
        android.widget.TextView r1;
        int i0, $i1, $i2, $i3, i4;
        android.content.Context $r2, $r3, $r4;
        android.content.res.Resources $r5;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$1;

        r1 := @parameter0: android.widget.TextView;

        $r2 = virtualinvoke r1.<android.widget.TextView: android.content.Context getContext()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$1: android.content.Context context> = $r2;

        i0 = virtualinvoke r1.<android.widget.TextView: int getCurrentTextColor()>();

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 > 22 goto label1;

        $r4 = r0.<android.support.test.espresso.matcher.ViewMatchers$1: android.content.Context context>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = r0.<android.support.test.espresso.matcher.ViewMatchers$1: int val$colorResId>;

        i4 = virtualinvoke $r5.<android.content.res.Resources: int getColor(int)>($i3);

        goto label2;

     label1:
        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$1: android.content.Context context>;

        $i2 = r0.<android.support.test.espresso.matcher.ViewMatchers$1: int val$colorResId>;

        i4 = virtualinvoke $r3.<android.content.Context: int getColor(int)>($i2);

     label2:
        if i0 != i4 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$1 r0;
        org.hamcrest.Description r1;
        int $i0, $i1, $i2;
        android.content.Context $r2, $r7;
        java.lang.String $r3, $r4, r9, $r10;
        android.content.res.Resources $r8;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$1;

        r1 := @parameter0: org.hamcrest.Description;

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$1: int val$colorResId>;

        r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$1: android.content.Context context>;

        if $r2 == null goto label1;

        $r7 = r0.<android.support.test.espresso.matcher.ViewMatchers$1: android.content.Context context>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = r0.<android.support.test.espresso.matcher.ViewMatchers$1: int val$colorResId>;

        r9 = virtualinvoke $r8.<android.content.res.Resources: java.lang.String getResourceName(int)>($i2);

     label1:
        $r3 = "has color with ID ";

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r9);

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 == 0 goto label2;

        $r10 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r4);

        goto label3;

     label2:
        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(java.lang.String)>("has color with ID ");

     label3:
        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r10);

        return;
    }

    protected volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$1 r0;
        java.lang.Object r1;
        android.widget.TextView $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$1: boolean matchesSafely(android.widget.TextView)>($r2);

        return $z0;
    }

android.support.test.espresso.matcher.ViewMatchers$2
<android.support.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$android$support$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod>
    static void <clinit>()
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $r0;
        int $i0, $i1, $i2;
        int[] $r1, $r3, $r5;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r2, $r4;
        java.lang.Throwable $r6, $r7, r8, r9;

        $r0 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <android.support.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$android$support$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod> = $r1;

     label1:
        $r3 = <android.support.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$android$support$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod>;

        $r2 = <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT>;

        $i1 = virtualinvoke $r2.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: int ordinal()>();

        $r3[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r8 = $r7;

     label4:
        $r5 = <android.support.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$android$support$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod>;

        $r4 = <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT>;

        $i2 = virtualinvoke $r4.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: int ordinal()>();

        $r5[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        r9 = $r6;

     label7:
        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher
<android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: int childCount>
    private void <init>(int)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/view/ViewGroup;");

        r0.<android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: int childCount> = i0;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0;
        org.hamcrest.Description r1, $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has child count: ");

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: int childCount>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    public boolean matchesSafely(android.view.ViewGroup)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0;
        android.view.ViewGroup r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        r1 := @parameter0: android.view.ViewGroup;

        $i0 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        $i1 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: int childCount>;

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0;
        java.lang.Object r1;
        android.view.ViewGroup $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.ViewGroup) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: boolean matchesSafely(android.view.ViewGroup)>($r2);

        return $z0;
    }

    void <init>(int, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0;
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: void <init>(int)>(i0);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has content description");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;
        android.view.View r1;
        java.lang.CharSequence $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke r1.<android.view.View: java.lang.CharSequence getContentDescription()>();

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1
<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1: android.view.View val$view>
<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher this$0>
    void <init>(android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher, android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1 r0;
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r1;
        android.view.View r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r2 := @parameter1: android.view.View;

        r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher this$0> = r1;

        r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1: android.view.View val$view> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1 r0;
        android.view.View r1, $r2;
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher $r3;
        org.hamcrest.Matcher $r4;
        boolean $z0, $z1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1: android.view.View val$view>;

        if r1 == $r2 goto label1;

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher this$0>;

        $r4 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher access$3900(android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher)>($r3);

        $z0 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public volatile boolean apply(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1 r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1: boolean apply(android.view.View)>($r2);

        return $z0;
    }

android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher
<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher descendantMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher descendantMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has descendant: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher descendantMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        android.view.View r1;
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1 r2, $r4;
        java.util.Iterator r3;
        java.lang.Iterable $r5, $r6;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: android.view.View;

        $r4 = new android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1;

        specialinvoke $r4.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$1: void <init>(android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher,android.view.View)>(r0, r1);

        r2 = $r4;

        $r5 = staticinvoke <android.support.test.espresso.util.TreeIterables: java.lang.Iterable breadthFirstViewTraversal(android.view.View)>(r1);

        $r6 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,android.support.test.espresso.core.internal.deps.guava.base.Predicate)>($r5, r2);

        r3 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    static org.hamcrest.Matcher access$3900(android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        org.hamcrest.Matcher $r1;

        r0 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        $r1 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher descendantMatcher>;

        return $r1;
    }

android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher
<android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/EditText;");

        r0.<android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with error: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: org.hamcrest.Matcher stringMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    protected boolean matchesSafely(android.widget.EditText)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        android.widget.EditText r1;
        org.hamcrest.Matcher $r2;
        java.lang.CharSequence $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: android.widget.EditText;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: org.hamcrest.Matcher stringMatcher>;

        $r3 = virtualinvoke r1.<android.widget.EditText: java.lang.CharSequence getError()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r3);

        return $z0;
    }

    protected volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        java.lang.Object r1;
        android.widget.EditText $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.widget.EditText) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: boolean matchesSafely(android.widget.EditText)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has focus on the screen to the user");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke r1.<android.view.View: boolean hasFocus()>();

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasFocusMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher
<android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: org.hamcrest.Matcher imeActionMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: org.hamcrest.Matcher imeActionMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has ime action: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: org.hamcrest.Matcher imeActionMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        android.view.View r1;
        android.view.inputmethod.EditorInfo r2, $r4;
        android.view.inputmethod.InputConnection r3;
        int i0, $i1, $i2, $i3;
        org.hamcrest.Matcher $r5;
        java.lang.Integer $r6;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 := @parameter0: android.view.View;

        $r4 = new android.view.inputmethod.EditorInfo;

        specialinvoke $r4.<android.view.inputmethod.EditorInfo: void <init>()>();

        r2 = $r4;

        r3 = virtualinvoke r1.<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>(r2);

        if r3 != null goto label1;

        return 0;

     label1:
        $i1 = r2.<android.view.inputmethod.EditorInfo: int actionId>;

        if $i1 == 0 goto label2;

        $i3 = r2.<android.view.inputmethod.EditorInfo: int actionId>;

        goto label3;

     label2:
        $i2 = r2.<android.view.inputmethod.EditorInfo: int imeOptions>;

        $i3 = $i2 & 255;

     label3:
        i0 = $i3;

        $r5 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: org.hamcrest.Matcher imeActionMatcher>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r5.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r6);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has links");

        return;
    }

    public boolean matchesSafely(android.widget.TextView)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0;
        android.widget.TextView r1;
        android.text.style.URLSpan[] $r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        r1 := @parameter0: android.widget.TextView;

        $r2 = virtualinvoke r1.<android.widget.TextView: android.text.style.URLSpan[] getUrls()>();

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0;
        java.lang.Object r1;
        android.widget.TextView $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher: boolean matchesSafely(android.widget.TextView)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasLinksMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher
<android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: int minChildCount>
    private void <init>(int)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/view/ViewGroup;");

        r0.<android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: int minChildCount> = i0;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0;
        org.hamcrest.Description r1, $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has minimum child count: ");

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: int minChildCount>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    public boolean matchesSafely(android.view.ViewGroup)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0;
        android.view.ViewGroup r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        r1 := @parameter0: android.view.ViewGroup;

        $i0 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        $i1 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: int minChildCount>;

        if $i0 < $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0;
        java.lang.Object r1;
        android.view.ViewGroup $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.ViewGroup) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: boolean matchesSafely(android.view.ViewGroup)>($r2);

        return $z0;
    }

    void <init>(int, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0;
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: void <init>(int)>(i0);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher
<android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher siblingMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher siblingMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has sibling: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher siblingMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        android.view.View r1, $r5;
        android.view.ViewParent r2;
        android.view.ViewGroup r3;
        boolean $z0, $z1;
        int $i0, i1;
        org.hamcrest.Matcher $r4;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: android.view.View;

        r2 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = (android.view.ViewGroup) r2;

        i1 = 0;

     label2:
        $i0 = virtualinvoke r3.<android.view.ViewGroup: int getChildCount()>();

        if i1 >= $i0 goto label4;

        $r4 = r0.<android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher siblingMatcher>;

        $r5 = virtualinvoke r3.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher
<android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: java.lang.Class clazz>
    private void <init>(java.lang.Class)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        $r2 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        r0.<android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: java.lang.Class clazz> = $r3;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        org.hamcrest.Description r1;
        java.lang.String r2, $r4, $r8;
        java.lang.Class $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: java.lang.Class clazz>;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = 26 + $i0;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is assignable from class: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r8);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        android.view.View r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: java.lang.Class clazz>;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(java.lang.Class, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        java.lang.Class r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: void <init>(java.lang.Class)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is clickable");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke r1.<android.view.View: boolean isClickable()>();

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsClickableMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher
<android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: org.hamcrest.Matcher ancestorMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: org.hamcrest.Matcher ancestorMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is descendant of a: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: org.hamcrest.Matcher ancestorMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        android.view.View r1;
        android.view.ViewParent $r2;
        org.hamcrest.Matcher $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: org.hamcrest.Matcher ancestorMatcher>;

        $z0 = specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: boolean checkAncestors(android.view.ViewParent,org.hamcrest.Matcher)>($r2, $r3);

        return $z0;
    }

    private boolean checkAncestors(android.view.ViewParent, org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        android.view.ViewParent r1, $r3;
        org.hamcrest.Matcher r2;
        boolean $z0, $z1, $z2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: android.view.ViewParent;

        r2 := @parameter1: org.hamcrest.Matcher;

        $z0 = r1 instanceof android.view.View;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = interfaceinvoke r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r3 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        $z2 = specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: boolean checkAncestors(android.view.ViewParent,org.hamcrest.Matcher)>($r3, r2);

        return $z2;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is displayed on the screen to the user");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0;
        android.view.View r1;
        android.graphics.Rect $r2;
        boolean $z0, $z1, $z2;
        android.support.test.espresso.matcher.ViewMatchers$Visibility $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        $z0 = virtualinvoke r1.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>($r2);

        if $z0 == 0 goto label1;

        $r3 = <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>;

        $r4 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withEffectiveVisibility(android.support.test.espresso.matcher.ViewMatchers$Visibility)>($r3);

        $z1 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher
<android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: int areaPercentage>
    private void <init>(int)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: int areaPercentage> = i0;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        org.hamcrest.Description r1;
        java.lang.Object[] $r2;
        int $i0;
        java.lang.Integer $r3;
        java.lang.String $r4;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = newarray (java.lang.Object)[1];

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: int areaPercentage>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("at least %s percent of the view\'s area is displayed to the user.", $r2);

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r4);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        android.view.View r1;
        android.graphics.Rect r2, r3, $r4;
        boolean z0, $z1, $z2;
        double d0, d1, $d2, $d3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, f10, $f11, f12;
        android.support.test.espresso.matcher.ViewMatchers$Visibility $r5;
        org.hamcrest.Matcher $r6;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        r1 := @parameter0: android.view.View;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r2 = $r4;

        z0 = virtualinvoke r1.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>(r2);

        if z0 != 0 goto label1;

        return 0;

     label1:
        r3 = specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: android.graphics.Rect getScreenWithoutStatusBarActionBar(android.view.View)>(r1);

        $i1 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i2 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        if $i1 <= $i2 goto label2;

        $i17 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $f9 = (float) $i17;

        goto label3;

     label2:
        $i3 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $f9 = (float) $i3;

     label3:
        f10 = $f9;

        $i4 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $i5 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        if $i4 <= $i5 goto label4;

        $i16 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $f11 = (float) $i16;

        goto label5;

     label4:
        $i6 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $f11 = (float) $i6;

     label5:
        f12 = $f11;

        $i7 = <android.os.Build$VERSION: int SDK_INT>;

        if $i7 < 11 goto label6;

        $i12 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $f1 = (float) $i12;

        $f2 = virtualinvoke r1.<android.view.View: float getScaleY()>();

        $f3 = $f1 * $f2;

        $i13 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $f4 = (float) $i13;

        f10 = staticinvoke <java.lang.Math: float min(float,float)>($f3, $f4);

        $i14 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $f5 = (float) $i14;

        $f6 = virtualinvoke r1.<android.view.View: float getScaleX()>();

        $f7 = $f5 * $f6;

        $i15 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $f8 = (float) $i15;

        f12 = staticinvoke <java.lang.Math: float min(float,float)>($f7, $f8);

     label6:
        $f0 = f10 * f12;

        d0 = (double) $f0;

        $i8 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $i9 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $i10 = $i8 * $i9;

        d1 = (double) $i10;

        $d2 = d1 / d0;

        $d3 = $d2 * 100.0;

        i0 = (int) $d3;

        $i11 = r0.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: int areaPercentage>;

        if i0 < $i11 goto label7;

        $r5 = <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>;

        $r6 = staticinvoke <android.support.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withEffectiveVisibility(android.support.test.espresso.matcher.ViewMatchers$Visibility)>($r5);

        $z1 = interfaceinvoke $r6.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z1 == 0 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        return $z2;
    }

    private android.graphics.Rect getScreenWithoutStatusBarActionBar(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        android.view.View r1;
        android.util.DisplayMetrics r2, $r4, $r17;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.util.TypedValue r3, $r11;
        android.content.Context $r5, $r9, $r12, $r15, $r18;
        java.lang.Object $r6;
        android.view.WindowManager $r7;
        android.view.Display $r8;
        android.content.res.Resources $r10, $r16, $r19;
        android.content.res.Resources$Theme $r13;
        boolean $z0;
        android.graphics.Rect $r14;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        r1 := @parameter0: android.view.View;

        $r4 = new android.util.DisplayMetrics;

        specialinvoke $r4.<android.util.DisplayMetrics: void <init>()>();

        r2 = $r4;

        $r5 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r7 = (android.view.WindowManager) $r6;

        $r8 = interfaceinvoke $r7.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke $r8.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r2);

        $r9 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke $r10.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>("status_bar_height", "dimen", "android");

        if i0 <= 0 goto label1;

        $r18 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r19 = virtualinvoke $r18.<android.content.Context: android.content.res.Resources getResources()>();

        $i8 = virtualinvoke $r19.<android.content.res.Resources: int getDimensionPixelSize(int)>(i0);

        goto label2;

     label1:
        $i8 = 0;

     label2:
        i1 = $i8;

        $r11 = new android.util.TypedValue;

        specialinvoke $r11.<android.util.TypedValue: void <init>()>();

        r3 = $r11;

        $r12 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $z0 = virtualinvoke $r13.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843499, r3, 1);

        if $z0 == 0 goto label3;

        $i7 = r3.<android.util.TypedValue: int data>;

        $r15 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r16 = virtualinvoke $r15.<android.content.Context: android.content.res.Resources getResources()>();

        $r17 = virtualinvoke $r16.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i9 = staticinvoke <android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>($i7, $r17);

        goto label4;

     label3:
        $i9 = 0;

     label4:
        i2 = $i9;

        $r14 = new android.graphics.Rect;

        $i6 = r2.<android.util.DisplayMetrics: int widthPixels>;

        $i4 = r2.<android.util.DisplayMetrics: int heightPixels>;

        $i3 = i1 + i2;

        $i5 = $i4 - $i3;

        specialinvoke $r14.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i6, $i5);

        return $r14;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(int, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: void <init>(int)>(i0);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is enabled");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke r1.<android.view.View: boolean isEnabled()>();

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is focusable");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke r1.<android.view.View: boolean isFocusable()>();

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/webkit/WebView;");

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("WebView with JS enabled");

        return;
    }

    public boolean matchesSafely(android.webkit.WebView)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;
        android.webkit.WebView r1;
        android.webkit.WebSettings $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        r1 := @parameter0: android.webkit.WebView;

        $r2 = virtualinvoke r1.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r2.<android.webkit.WebSettings: boolean getJavaScriptEnabled()>();

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;
        java.lang.Object r1;
        android.webkit.WebView $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.webkit.WebView) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher: boolean matchesSafely(android.webkit.WebView)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is a root view.");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher r0;
        android.view.View r1, $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke r1.<android.view.View: android.view.View getRootView()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsRootMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is selected");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke r1.<android.view.View: boolean isSelected()>();

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher
    private void <init>()
    {
        android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("supports input methods");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0;
        android.view.View r1;
        android.view.inputmethod.EditorInfo $r2;
        android.view.inputmethod.InputConnection $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = new android.view.inputmethod.EditorInfo;

        specialinvoke $r2.<android.view.inputmethod.EditorInfo: void <init>()>();

        $r3 = virtualinvoke r1.<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>($r2);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher: void <init>()>();

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$Visibility
<android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>
<android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility INVISIBLE>
<android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility GONE>
<android.support.test.espresso.matcher.ViewMatchers$Visibility: int value>
<android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility[] $VALUES>
    public static android.support.test.espresso.matcher.ViewMatchers$Visibility[] values()
    {
        android.support.test.espresso.matcher.ViewMatchers$Visibility[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (android.support.test.espresso.matcher.ViewMatchers$Visibility[]) $r1;

        return $r2;
    }

    public static android.support.test.espresso.matcher.ViewMatchers$Visibility valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        android.support.test.espresso.matcher.ViewMatchers$Visibility $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/support/test/espresso/matcher/ViewMatchers$Visibility;", r0);

        $r2 = (android.support.test.espresso.matcher.ViewMatchers$Visibility) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int)
    {
        android.support.test.espresso.matcher.ViewMatchers$Visibility r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$Visibility;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<android.support.test.espresso.matcher.ViewMatchers$Visibility: int value> = i1;

        return;
    }

    public int getValue()
    {
        android.support.test.espresso.matcher.ViewMatchers$Visibility r0;
        int $i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$Visibility;

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$Visibility: int value>;

        return $i0;
    }

    static void <clinit>()
    {
        android.support.test.espresso.matcher.ViewMatchers$Visibility $r0, $r1, $r2, $r4, $r5, $r6;
        android.support.test.espresso.matcher.ViewMatchers$Visibility[] $r3;

        $r0 = new android.support.test.espresso.matcher.ViewMatchers$Visibility;

        specialinvoke $r0.<android.support.test.espresso.matcher.ViewMatchers$Visibility: void <init>(java.lang.String,int,int)>("VISIBLE", 0, 0);

        <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility VISIBLE> = $r0;

        $r1 = new android.support.test.espresso.matcher.ViewMatchers$Visibility;

        specialinvoke $r1.<android.support.test.espresso.matcher.ViewMatchers$Visibility: void <init>(java.lang.String,int,int)>("INVISIBLE", 1, 4);

        <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility INVISIBLE> = $r1;

        $r2 = new android.support.test.espresso.matcher.ViewMatchers$Visibility;

        specialinvoke $r2.<android.support.test.espresso.matcher.ViewMatchers$Visibility: void <init>(java.lang.String,int,int)>("GONE", 2, 8);

        <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility GONE> = $r2;

        $r3 = newarray (android.support.test.espresso.matcher.ViewMatchers$Visibility)[3];

        $r4 = <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>;

        $r3[0] = $r4;

        $r5 = <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility INVISIBLE>;

        $r3[1] = $r5;

        $r6 = <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility GONE>;

        $r3[2] = $r6;

        <android.support.test.espresso.matcher.ViewMatchers$Visibility: android.support.test.espresso.matcher.ViewMatchers$Visibility[] $VALUES> = $r3;

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: float alpha>
    private void <init>(float)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        float f0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        f0 := @parameter0: float;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: float alpha> = f0;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        org.hamcrest.Description r1, $r2;
        float $f0;
        java.lang.Float $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has alpha: ");

        $f0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: float alpha>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        android.view.View r1;
        float $f0, $f1;
        byte $b0;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        r1 := @parameter0: android.view.View;

        $f0 = virtualinvoke r1.<android.view.View: float getAlpha()>();

        $f1 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: float alpha>;

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(float, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        float f0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        f0 := @parameter0: float;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: void <init>(float)>(f0);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod
<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT>
<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT>
<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $VALUES>
    public static android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] values()
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[]) $r1;

        return $r2;
    }

    public static android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/support/test/espresso/matcher/ViewMatchers$WithCharSequenceMatcher$TextViewMethod;", r0);

        $r2 = (android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r0, $r1, $r3, $r4;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $r2;

        $r0 = new android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        specialinvoke $r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: void <init>(java.lang.String,int)>("GET_TEXT", 0);

        <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT> = $r0;

        $r1 = new android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        specialinvoke $r1.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: void <init>(java.lang.String,int)>("GET_HINT", 1);

        <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT> = $r1;

        $r2 = newarray (android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod)[2];

        $r3 = <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT>;

        $r2[0] = $r3;

        $r4 = <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT>;

        $r2[1] = $r4;

        <android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $VALUES> = $r2;

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId>
<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod method>
<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String resourceName>
<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>
    private void <init>(int, android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0;
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId> = i0;

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod method> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0;
        org.hamcrest.Description r1, $r2, $r7, $r10, $r12;
        int $i0;
        java.lang.Integer $r3;
        java.lang.String $r5, $r6, $r8, $r11;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with string from resource id: ");

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $r5 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String resourceName>;

        if null == $r5 goto label1;

        $r10 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("[");

        $r11 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String resourceName>;

        $r12 = interfaceinvoke $r10.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r11);

        interfaceinvoke $r12.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("]");

     label1:
        $r6 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        if null == $r6 goto label2;

        $r7 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" value: ");

        $r8 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r8);

     label2:
        return;
    }

    public boolean matchesSafely(android.widget.TextView)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0;
        android.widget.TextView r1;
        java.lang.String $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r12, $r14, $r20;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r6;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r7, $r18;
        int $i0, $i1, $i2, $i3, $i4;
        android.content.res.Resources $r11, $r13;
        java.lang.Throwable $r15, r16;
        int[] $r17;
        java.lang.CharSequence r19;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        r1 := @parameter0: android.widget.TextView;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        if null != $r2 goto label04;

     label01:
        $r11 = virtualinvoke r1.<android.widget.TextView: android.content.res.Resources getResources()>();

        $i1 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId>;

        $r12 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String getString(int)>($i1);

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText> = $r12;

        $r13 = virtualinvoke r1.<android.widget.TextView: android.content.res.Resources getResources()>();

        $i2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId>;

        $r14 = virtualinvoke $r13.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>($i2);

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String resourceName> = $r14;

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        r16 = $r15;

     label04:
        $r17 = <android.support.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$android$support$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod>;

        $r18 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod method>;

        $i3 = virtualinvoke $r18.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: int ordinal()>();

        $i4 = $r17[$i3];

        lookupswitch($i4)
        {
            case 1: goto label05;
            case 2: goto label06;
            default: goto label07;
        };

     label05:
        r19 = virtualinvoke r1.<android.widget.TextView: java.lang.CharSequence getText()>();

        goto label10;

     label06:
        r19 = virtualinvoke r1.<android.widget.TextView: java.lang.CharSequence getHint()>();

        goto label10;

     label07:
        $r6 = new java.lang.IllegalStateException;

        $r8 = "Unexpected TextView method: ";

        $r7 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod method>;

        $r9 = virtualinvoke $r7.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: java.lang.String toString()>();

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i0 == 0 goto label08;

        $r20 = virtualinvoke $r8.<java.lang.String: java.lang.String concat(java.lang.String)>($r10);

        goto label09;

     label08:
        $r20 = new java.lang.String;

        specialinvoke $r20.<java.lang.String: void <init>(java.lang.String)>("Unexpected TextView method: ");

     label09:
        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r6;

     label10:
        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        if null == $r3 goto label11;

        if null == r19 goto label11;

        $r4 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        $r5 = interfaceinvoke r19.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label11;

        $z1 = 1;

        goto label12;

     label11:
        $z1 = 0;

     label12:
        return $z1;

        catch android.content.res.Resources$NotFoundException from label01 to label02 with label03;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0;
        java.lang.Object r1;
        android.widget.TextView $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: boolean matchesSafely(android.widget.TextView)>($r2);

        return $z0;
    }

    void <init>(int, android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0;
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        r2 := @parameter2: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: void <init>(int,android.support.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod)>(i0, r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: org.hamcrest.Matcher checkStateMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        org.hamcrest.Matcher r1;
        java.lang.Class[] $r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r2 = newarray (java.lang.Class)[0];

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class,java.lang.Class,java.lang.Class[])>(class "Landroid/view/View;", class "Landroid/widget/Checkable;", $r2);

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: org.hamcrest.Matcher checkStateMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with checkbox state: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: org.hamcrest.Matcher checkStateMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        android.view.View r1;
        android.widget.Checkable $r2;
        org.hamcrest.Matcher $r3;
        boolean $z0, $z1;
        java.lang.Boolean $r4;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 := @parameter0: android.view.View;

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: org.hamcrest.Matcher checkStateMatcher>;

        $r2 = (android.widget.Checkable) r1;

        $z0 = interfaceinvoke $r2.<android.widget.Checkable: boolean isChecked()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z1 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r4);

        return $z1;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher childMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher childMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has child: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher childMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        android.view.View r1, $r4;
        android.view.ViewGroup r2;
        boolean $z0, $z1;
        int $i0, i1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 := @parameter0: android.view.View;

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (android.view.ViewGroup) r1;

        i1 = 0;

     label2:
        $i0 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        if i1 >= $i0 goto label4;

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher childMatcher>;

        $r4 = virtualinvoke r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithChildMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: org.hamcrest.Matcher classNameMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: org.hamcrest.Matcher classNameMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with class name: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: org.hamcrest.Matcher classNameMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        android.view.View r1;
        org.hamcrest.Matcher $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: org.hamcrest.Matcher classNameMatcher>;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r4);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId>
<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName>
<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>
    private void <init>(int)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName> = null;

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText> = null;

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId> = i0;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        org.hamcrest.Description r1;
        int $i0;
        java.lang.Integer $r3;
        java.lang.String $r5, $r6, $r8, $r11;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with content description from resource id: ");

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $r5 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName>;

        if null == $r5 goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("[");

        $r11 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName>;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r11);

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("]");

     label1:
        $r6 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        if null == $r6 goto label2;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" value: ");

        $r8 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r8);

     label2:
        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        android.view.View r1;
        java.lang.Throwable r2, $r12;
        java.lang.String $r3, $r5, $r7, $r9, $r11, $r13;
        java.lang.CharSequence $r4, $r6;
        boolean $z0;
        android.content.res.Resources $r8, $r10;
        int $i0, $i1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        r1 := @parameter0: android.view.View;

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        if null != $r3 goto label4;

     label1:
        $r8 = virtualinvoke r1.<android.view.View: android.content.res.Resources getResources()>();

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId>;

        $r9 = virtualinvoke $r8.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText> = $r9;

        $r10 = virtualinvoke r1.<android.view.View: android.content.res.Resources getResources()>();

        $i1 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId>;

        $r11 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>($i1);

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName> = $r11;

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r2 = $r12;

     label4:
        $r13 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        if null == $r13 goto label5;

        $r4 = virtualinvoke r1.<android.view.View: java.lang.CharSequence getContentDescription()>();

        if null == $r4 goto label5;

        $r5 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        $r6 = virtualinvoke r1.<android.view.View: java.lang.CharSequence getContentDescription()>();

        $r7 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        return $z0;

     label5:
        return 0;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label3;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(int, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: void <init>(int)>(i0);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: org.hamcrest.Matcher charSequenceMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: org.hamcrest.Matcher charSequenceMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with content description: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: org.hamcrest.Matcher charSequenceMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        android.view.View r1;
        org.hamcrest.Matcher $r2;
        java.lang.CharSequence $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: org.hamcrest.Matcher charSequenceMatcher>;

        $r3 = virtualinvoke r1.<android.view.View: java.lang.CharSequence getContentDescription()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r3);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: android.support.test.espresso.matcher.ViewMatchers$Visibility visibility>
    private void <init>(android.support.test.espresso.matcher.ViewMatchers$Visibility)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$Visibility r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$Visibility;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: android.support.test.espresso.matcher.ViewMatchers$Visibility visibility> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        org.hamcrest.Description r1;
        java.lang.Object[] $r2;
        android.support.test.espresso.matcher.ViewMatchers$Visibility $r3;
        java.lang.String $r4;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: android.support.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("view has effective visibility=%s", $r2);

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r4);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$Visibility $r1, $r2, $r6, $r7, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.view.ViewParent $r3, $r4, $r5, $r8, $r9, $r10;
        boolean $z0, $z1;
        android.view.View r12;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r12 := @parameter0: android.view.View;

        $r1 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: android.support.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i0 = virtualinvoke $r1.<android.support.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i0 != 0 goto label3;

        $i5 = virtualinvoke r12.<android.view.View: int getVisibility()>();

        $r7 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: android.support.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i6 = virtualinvoke $r7.<android.support.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i5 == $i6 goto label1;

        return 0;

     label1:
        $r8 = virtualinvoke r12.<android.view.View: android.view.ViewParent getParent()>();

        if $r8 == null goto label2;

        $r9 = virtualinvoke r12.<android.view.View: android.view.ViewParent getParent()>();

        $z1 = $r9 instanceof android.view.View;

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r12.<android.view.View: android.view.ViewParent getParent()>();

        r12 = (android.view.View) $r10;

        $i7 = virtualinvoke r12.<android.view.View: int getVisibility()>();

        $r11 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: android.support.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i8 = virtualinvoke $r11.<android.support.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i7 == $i8 goto label1;

        return 0;

     label2:
        return 1;

     label3:
        $i1 = virtualinvoke r12.<android.view.View: int getVisibility()>();

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: android.support.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i2 = virtualinvoke $r2.<android.support.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i1 != $i2 goto label4;

        return 1;

     label4:
        $r3 = virtualinvoke r12.<android.view.View: android.view.ViewParent getParent()>();

        if $r3 == null goto label5;

        $r4 = virtualinvoke r12.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = $r4 instanceof android.view.View;

        if $z0 == 0 goto label5;

        $r5 = virtualinvoke r12.<android.view.View: android.view.ViewParent getParent()>();

        r12 = (android.view.View) $r5;

        $i3 = virtualinvoke r12.<android.view.View: int getVisibility()>();

        $r6 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: android.support.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i4 = virtualinvoke $r6.<android.support.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i3 != $i4 goto label4;

        return 1;

     label5:
        return 0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(android.support.test.espresso.matcher.ViewMatchers$Visibility, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        android.support.test.espresso.matcher.ViewMatchers$Visibility r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r1 := @parameter0: android.support.test.espresso.matcher.ViewMatchers$Visibility;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: void <init>(android.support.test.espresso.matcher.ViewMatchers$Visibility)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with hint: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher: org.hamcrest.Matcher stringMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.widget.TextView)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        android.widget.TextView r1;
        org.hamcrest.Matcher $r2;
        java.lang.CharSequence $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 := @parameter0: android.widget.TextView;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher: org.hamcrest.Matcher stringMatcher>;

        $r3 = virtualinvoke r1.<android.widget.TextView: java.lang.CharSequence getHint()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r3);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        java.lang.Object r1;
        android.widget.TextView $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher: boolean matchesSafely(android.widget.TextView)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithHintMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: org.hamcrest.Matcher viewIdMatcher>
<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: android.content.res.Resources resources>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: org.hamcrest.Matcher viewIdMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        org.hamcrest.Description r1;
        int i0, $i1;
        java.lang.Throwable r2, $r10;
        org.hamcrest.Matcher $r3;
        java.lang.String $r4, $r6, r12, $r13, $r14;
        android.content.res.Resources $r5, $r9;
        java.lang.Object[] $r11;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: org.hamcrest.Matcher viewIdMatcher>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        r12 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\D+", "");

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r12);

        $r5 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: android.content.res.Resources resources>;

        if $r5 == null goto label4;

     label1:
        $r9 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: android.content.res.Resources resources>;

        r12 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r12;

        r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s (resource name not found)", $r11);

     label4:
        $r6 = "with id: ";

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r12);

        $i1 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i1 == 0 goto label5;

        $r14 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r13);

        goto label6;

     label5:
        $r14 = new java.lang.String;

        specialinvoke $r14.<java.lang.String: void <init>(java.lang.String)>("with id: ");

     label6:
        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r14);

        return;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label3;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        android.view.View r1;
        android.content.res.Resources $r2;
        org.hamcrest.Matcher $r3;
        int $i0;
        java.lang.Integer $r4;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke r1.<android.view.View: android.content.res.Resources getResources()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: android.content.res.Resources resources> = $r2;

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: org.hamcrest.Matcher viewIdMatcher>;

        $i0 = virtualinvoke r1.<android.view.View: int getId()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r4);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithIdMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: int inputType>
    private void <init>(int)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/EditText;");

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: int inputType> = i0;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0;
        org.hamcrest.Description r1;
        int $i0;
        java.lang.String $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is view input type equal to: ");

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: int inputType>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r3);

        return;
    }

    protected boolean matchesSafely(android.widget.EditText)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0;
        android.widget.EditText r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        r1 := @parameter0: android.widget.EditText;

        $i0 = virtualinvoke r1.<android.widget.EditText: int getInputType()>();

        $i1 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: int inputType>;

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0;
        java.lang.Object r1;
        android.widget.EditText $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.widget.EditText) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: boolean matchesSafely(android.widget.EditText)>($r2);

        return $z0;
    }

    void <init>(int, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0;
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: void <init>(int)>(i0);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index>
    private void <init>(int)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index> = i0;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        org.hamcrest.Description r1;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(30);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with parent index: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r5);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        android.view.View r1, $r5;
        android.view.ViewParent r2;
        boolean $z0, $z1;
        android.view.ViewGroup $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        r1 := @parameter0: android.view.View;

        r2 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r3 = (android.view.ViewGroup) r2;

        $i0 = virtualinvoke $r3.<android.view.ViewGroup: int getChildCount()>();

        $i1 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index>;

        if $i0 <= $i1 goto label1;

        $r4 = (android.view.ViewGroup) r2;

        $i2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index>;

        $r5 = virtualinvoke $r4.<android.view.ViewGroup: android.view.View getChildAt(int)>($i2);

        if $r5 != r1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(int, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: void <init>(int)>(i0);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher: org.hamcrest.Matcher parentMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher: org.hamcrest.Matcher parentMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has parent matching: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher: org.hamcrest.Matcher parentMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        android.view.View r1;
        org.hamcrest.Matcher $r2;
        android.view.ViewParent $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher: org.hamcrest.Matcher parentMatcher>;

        $r3 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r3);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithParentMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with res-name that ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: org.hamcrest.Matcher stringMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        android.view.View r1;
        java.lang.Throwable r2, $r7;
        int $i0, $i1;
        android.content.res.Resources $r3, $r5;
        org.hamcrest.Matcher $r4;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke r1.<android.view.View: int getId()>();

        if $i0 == -1 goto label1;

        $r3 = virtualinvoke r1.<android.view.View: android.content.res.Resources getResources()>();

        if $r3 != null goto label2;

     label1:
        return 0;

     label2:
        $r4 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: org.hamcrest.Matcher stringMatcher>;

        $r5 = virtualinvoke r1.<android.view.View: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke r1.<android.view.View: int getId()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>($i1);

        $z0 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r6);

     label3:
        return $z0;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        return 0;

        catch android.content.res.Resources$NotFoundException from label2 to label3 with label4;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId>
<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName>
<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>
    private void <init>(int)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        int i0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/Spinner;");

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName> = null;

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText> = null;

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId> = i0;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        org.hamcrest.Description r1;
        int $i0;
        java.lang.Integer $r3;
        java.lang.String $r5, $r6, $r8, $r11;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with string from resource id: ");

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $r5 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName>;

        if null == $r5 goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("[");

        $r11 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName>;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r11);

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("]");

     label1:
        $r6 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        if null == $r6 goto label2;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" value: ");

        $r8 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r8);

     label2:
        return;
    }

    public boolean matchesSafely(android.widget.Spinner)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        android.widget.Spinner r1;
        java.lang.Throwable r2, $r11;
        java.lang.String $r3, $r4, $r6, $r8, $r10, $r12;
        java.lang.Object $r5;
        boolean $z0;
        android.content.res.Resources $r7, $r9;
        int $i0, $i1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        r1 := @parameter0: android.widget.Spinner;

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        if null != $r3 goto label4;

     label1:
        $r7 = virtualinvoke r1.<android.widget.Spinner: android.content.res.Resources getResources()>();

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId>;

        $r8 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText> = $r8;

        $r9 = virtualinvoke r1.<android.widget.Spinner: android.content.res.Resources getResources()>();

        $i1 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId>;

        $r10 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>($i1);

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName> = $r10;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r2 = $r11;

     label4:
        $r12 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        if null == $r12 goto label5;

        $r4 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        $r5 = virtualinvoke r1.<android.widget.Spinner: java.lang.Object getSelectedItem()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        return $z0;

     label5:
        return 0;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label3;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        java.lang.Object r1;
        android.widget.Spinner $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.widget.Spinner) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: boolean matchesSafely(android.widget.Spinner)>($r2);

        return $z0;
    }

    void <init>(int, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        int i0;
        android.support.test.espresso.matcher.ViewMatchers$1 r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: void <init>(int)>(i0);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/Spinner;");

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with text: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: org.hamcrest.Matcher stringMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.widget.Spinner)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        android.widget.Spinner r1;
        org.hamcrest.Matcher $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: android.widget.Spinner;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: org.hamcrest.Matcher stringMatcher>;

        $r3 = virtualinvoke r1.<android.widget.Spinner: java.lang.Object getSelectedItem()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r4);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        java.lang.Object r1;
        android.widget.Spinner $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.widget.Spinner) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: boolean matchesSafely(android.widget.Spinner)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: int key>
<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: org.hamcrest.Matcher objectMatcher>
    private void <init>(int, org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        int i0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: int key> = i0;

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: org.hamcrest.Matcher objectMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        org.hamcrest.Description r1;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        org.hamcrest.Matcher $r7;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: int key>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(21);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with key: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r5);

        $r7 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: org.hamcrest.Matcher objectMatcher>;

        interfaceinvoke $r7.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        android.view.View r1;
        int $i0;
        org.hamcrest.Matcher $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: org.hamcrest.Matcher objectMatcher>;

        $i0 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: int key>;

        $r3 = virtualinvoke r1.<android.view.View: java.lang.Object getTag(int)>($i0);

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r3);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(int, org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        int i0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: org.hamcrest.Matcher;

        r2 := @parameter2: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: void <init>(int,org.hamcrest.Matcher)>(i0, r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: org.hamcrest.Matcher tagValueMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: org.hamcrest.Matcher tagValueMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with tag value: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: org.hamcrest.Matcher tagValueMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        android.view.View r1;
        org.hamcrest.Matcher $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: org.hamcrest.Matcher tagValueMatcher>;

        $r3 = virtualinvoke r1.<android.view.View: java.lang.Object getTag()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r3);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher
<android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<android.support.test.espresso.matcher.BoundedMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        r0.<android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with text: ");

        $r3 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    protected boolean matchesSafely(android.widget.TextView)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        android.widget.TextView r1;
        java.lang.String r2, $r9;
        java.lang.CharSequence r3, $r4;
        org.hamcrest.Matcher $r5, $r8;
        boolean $z0, $z1;
        android.text.method.TransformationMethod $r6, $r7;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 := @parameter0: android.widget.TextView;

        $r4 = virtualinvoke r1.<android.widget.TextView: java.lang.CharSequence getText()>();

        r2 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        $r5 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher>;

        $z0 = interfaceinvoke $r5.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r6 = virtualinvoke r1.<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r1.<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>();

        r3 = interfaceinvoke $r7.<android.text.method.TransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>(r2, r1);

        if r3 == null goto label2;

        $r8 = r0.<android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher>;

        $r9 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.String toString()>();

        $z1 = interfaceinvoke $r8.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r9);

        return $z1;

     label2:
        return 0;
    }

    protected volatile boolean matchesSafely(java.lang.Object)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        java.lang.Object r1;
        android.widget.TextView $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher: boolean matchesSafely(android.widget.TextView)>($r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, android.support.test.espresso.matcher.ViewMatchers$1)
    {
        android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        org.hamcrest.Matcher r1;
        android.support.test.espresso.matcher.ViewMatchers$1 r2;

        r0 := @this: android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: android.support.test.espresso.matcher.ViewMatchers$1;

        specialinvoke r0.<android.support.test.espresso.matcher.ViewMatchers$WithTextMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

