android.support.test.espresso.assertion.PositionAssertions
<android.support.test.espresso.assertion.PositionAssertions: java.lang.String TAG>
    private void <init>()
    {
        android.support.test.espresso.assertion.PositionAssertions r0;

        r0 := @this: android.support.test.espresso.assertion.PositionAssertions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.support.test.espresso.ViewAssertion isCompletelyLeftOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isCompletelyRightOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isLeftOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.ViewAssertion $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion isCompletelyLeftOf(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static android.support.test.espresso.ViewAssertion isRightOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.ViewAssertion $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion isCompletelyRightOf(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static android.support.test.espresso.ViewAssertion isPartiallyLeftOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isPartiallyRightOf(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isLeftAlignedWith(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isRightAlignedWith(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isCompletelyAbove(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isCompletelyBelow(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isPartiallyAbove(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isPartiallyBelow(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isAbove(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.ViewAssertion $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion isCompletelyAbove(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static android.support.test.espresso.ViewAssertion isBelow(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.ViewAssertion $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion isCompletelyBelow(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static android.support.test.espresso.ViewAssertion isBottomAlignedWith(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    public static android.support.test.espresso.ViewAssertion isTopAlignedWith(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position $r1;
        android.support.test.espresso.ViewAssertion $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED>;

        $r2 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher,android.support.test.espresso.assertion.PositionAssertions$Position)>(r0, $r1);

        return $r2;
    }

    static android.support.test.espresso.ViewAssertion relativePositionOf(org.hamcrest.Matcher, android.support.test.espresso.assertion.PositionAssertions$Position)
    {
        org.hamcrest.Matcher r0;
        android.support.test.espresso.assertion.PositionAssertions$Position r1;
        android.support.test.espresso.assertion.PositionAssertions$1 $r3;

        r0 := @parameter0: org.hamcrest.Matcher;

        r1 := @parameter1: android.support.test.espresso.assertion.PositionAssertions$Position;

        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = new android.support.test.espresso.assertion.PositionAssertions$1;

        specialinvoke $r3.<android.support.test.espresso.assertion.PositionAssertions$1: void <init>(android.support.test.espresso.assertion.PositionAssertions$Position,org.hamcrest.Matcher)>(r1, r0);

        return $r3;
    }

    static android.view.View findView(org.hamcrest.Matcher, android.view.View)
    {
        org.hamcrest.Matcher r0;
        android.view.View r1, $r19, r25;
        android.support.test.espresso.assertion.PositionAssertions$2 r2, r26;
        java.util.Iterator r3;
        java.lang.Iterable $r7, $r8;
        boolean $z0;
        android.support.test.espresso.NoMatchingViewException$Builder $r10, $r11, r28;
        android.support.test.espresso.NoMatchingViewException $r12;
        java.lang.Object $r13, $r18;
        android.support.test.espresso.AmbiguousViewMatcherException$Builder $r15, $r16, $r17, $r20, $r23, r27;
        java.lang.Object[] $r21;
        android.view.View[] $r22;
        android.support.test.espresso.AmbiguousViewMatcherException $r24;
        java.lang.Throwable r29, r30;

        r0 := @parameter0: org.hamcrest.Matcher;

        r1 := @parameter1: android.view.View;

        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <android.support.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r26 = new android.support.test.espresso.assertion.PositionAssertions$2;

        specialinvoke r26.<android.support.test.espresso.assertion.PositionAssertions$2: void <init>(org.hamcrest.Matcher)>(r0);

        r2 = r26;

        $r7 = staticinvoke <android.support.test.espresso.util.TreeIterables: java.lang.Iterable breadthFirstViewTraversal(android.view.View)>(r1);

        $r8 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,android.support.test.espresso.core.internal.deps.guava.base.Predicate)>($r7, r2);

        r3 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

        r25 = null;

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        if r25 == null goto label2;

        r27 = new android.support.test.espresso.AmbiguousViewMatcherException$Builder;

        specialinvoke r27.<android.support.test.espresso.AmbiguousViewMatcherException$Builder: void <init>()>();

        $r15 = virtualinvoke r27.<android.support.test.espresso.AmbiguousViewMatcherException$Builder: android.support.test.espresso.AmbiguousViewMatcherException$Builder withRootView(android.view.View)>(r1);

        $r16 = virtualinvoke $r15.<android.support.test.espresso.AmbiguousViewMatcherException$Builder: android.support.test.espresso.AmbiguousViewMatcherException$Builder withViewMatcher(org.hamcrest.Matcher)>(r0);

        $r17 = virtualinvoke $r16.<android.support.test.espresso.AmbiguousViewMatcherException$Builder: android.support.test.espresso.AmbiguousViewMatcherException$Builder withView1(android.view.View)>(r25);

        $r18 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (android.view.View) $r18;

        $r20 = virtualinvoke $r17.<android.support.test.espresso.AmbiguousViewMatcherException$Builder: android.support.test.espresso.AmbiguousViewMatcherException$Builder withView2(android.view.View)>($r19);

        $r21 = staticinvoke <android.support.test.espresso.core.internal.deps.guava.collect.Iterators: java.lang.Object[] toArray(java.util.Iterator,java.lang.Class)>(r3, class "Landroid/view/View;");

        $r22 = (android.view.View[]) $r21;

        $r23 = virtualinvoke $r20.<android.support.test.espresso.AmbiguousViewMatcherException$Builder: android.support.test.espresso.AmbiguousViewMatcherException$Builder withOtherAmbiguousViews(android.view.View[])>($r22);

        $r24 = virtualinvoke $r23.<android.support.test.espresso.AmbiguousViewMatcherException$Builder: android.support.test.espresso.AmbiguousViewMatcherException build()>();

        r29 = (java.lang.Throwable) $r24;

        throw r29;

     label2:
        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r25 = (android.view.View) $r13;

        goto label1;

     label3:
        if r25 != null goto label4;

        r28 = new android.support.test.espresso.NoMatchingViewException$Builder;

        specialinvoke r28.<android.support.test.espresso.NoMatchingViewException$Builder: void <init>()>();

        $r10 = virtualinvoke r28.<android.support.test.espresso.NoMatchingViewException$Builder: android.support.test.espresso.NoMatchingViewException$Builder withViewMatcher(org.hamcrest.Matcher)>(r0);

        $r11 = virtualinvoke $r10.<android.support.test.espresso.NoMatchingViewException$Builder: android.support.test.espresso.NoMatchingViewException$Builder withRootView(android.view.View)>(r1);

        $r12 = virtualinvoke $r11.<android.support.test.espresso.NoMatchingViewException$Builder: android.support.test.espresso.NoMatchingViewException build()>();

        r30 = (java.lang.Throwable) $r12;

        throw r30;

     label4:
        return r25;
    }

    private static android.view.ViewGroup getTopViewGroup(android.view.View)
    {
        android.view.View r0;
        boolean $z0;
        android.view.ViewParent r1;
        android.view.ViewGroup r2;

        r0 := @parameter0: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        r2 = null;

     label1:
        if r1 == null goto label3;

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r2 = (android.view.ViewGroup) r1;

     label2:
        r1 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return r2;
    }

    static boolean isRelativePosition(android.view.View, android.view.View, android.support.test.espresso.assertion.PositionAssertions$Position)
    {
        android.view.View r0, r1;
        android.support.test.espresso.assertion.PositionAssertions$Position r2;
        int[] r3, r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.support.test.espresso.assertion.PositionAssertions$Position;

        r3 = newarray (int)[2];

        r4 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r3);

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r4);

        $r5 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $i0 = virtualinvoke r2.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label04;
            case 3: goto label07;
            case 4: goto label10;
            case 5: goto label13;
            case 6: goto label16;
            case 7: goto label19;
            case 8: goto label22;
            case 9: goto label25;
            case 10: goto label28;
            case 11: goto label31;
            case 12: goto label34;
            default: goto label37;
        };

     label01:
        $i54 = r3[0];

        $i55 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i57 = $i54 + $i55;

        $i56 = r4[0];

        if $i57 > $i56 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        return $z0;

     label04:
        $i50 = r4[0];

        $i51 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $i53 = $i50 + $i51;

        $i52 = r3[0];

        if $i53 > $i52 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        return $z1;

     label07:
        $i46 = r3[1];

        $i47 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i49 = $i46 + $i47;

        $i48 = r4[1];

        if $i49 > $i48 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        return $z2;

     label10:
        $i42 = r4[1];

        $i43 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i45 = $i42 + $i43;

        $i44 = r3[1];

        if $i45 > $i44 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        return $z3;

     label13:
        $i37 = r3[0];

        $i36 = r4[0];

        if $i37 >= $i36 goto label14;

        $i38 = r4[0];

        $i39 = r3[0];

        $i40 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i41 = $i39 + $i40;

        if $i38 >= $i41 goto label14;

        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        return $z4;

     label16:
        $i31 = r4[0];

        $i30 = r3[0];

        if $i31 >= $i30 goto label17;

        $i32 = r3[0];

        $i33 = r4[0];

        $i34 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $i35 = $i33 + $i34;

        if $i32 >= $i35 goto label17;

        $z5 = 1;

        goto label18;

     label17:
        $z5 = 0;

     label18:
        return $z5;

     label19:
        $i25 = r3[1];

        $i24 = r4[1];

        if $i25 >= $i24 goto label20;

        $i26 = r4[1];

        $i27 = r3[1];

        $i28 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i29 = $i27 + $i28;

        if $i26 >= $i29 goto label20;

        $z6 = 1;

        goto label21;

     label20:
        $z6 = 0;

     label21:
        return $z6;

     label22:
        $i19 = r4[1];

        $i18 = r3[1];

        if $i19 >= $i18 goto label23;

        $i20 = r3[1];

        $i21 = r4[1];

        $i22 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i23 = $i21 + $i22;

        if $i20 >= $i23 goto label23;

        $z7 = 1;

        goto label24;

     label23:
        $z7 = 0;

     label24:
        return $z7;

     label25:
        $i17 = r3[0];

        $i16 = r4[0];

        if $i17 != $i16 goto label26;

        $z8 = 1;

        goto label27;

     label26:
        $z8 = 0;

     label27:
        return $z8;

     label28:
        $i10 = r3[0];

        $i11 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i12 = $i10 + $i11;

        $i13 = r4[0];

        $i14 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $i15 = $i13 + $i14;

        if $i12 != $i15 goto label29;

        $z9 = 1;

        goto label30;

     label29:
        $z9 = 0;

     label30:
        return $z9;

     label31:
        $i9 = r3[1];

        $i8 = r4[1];

        if $i9 != $i8 goto label32;

        $z10 = 1;

        goto label33;

     label32:
        $z10 = 0;

     label33:
        return $z10;

     label34:
        $i2 = r3[1];

        $i3 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i4 = $i2 + $i3;

        $i5 = r4[1];

        $i6 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i7 = $i5 + $i6;

        if $i4 != $i7 goto label35;

        $z11 = 1;

        goto label36;

     label35:
        $z11 = 0;

     label36:
        return $z11;

     label37:
        return 0;
    }

    static android.view.ViewGroup access$000(android.view.View)
    {
        android.view.View r0;
        android.view.ViewGroup $r1;

        r0 := @parameter0: android.view.View;

        $r1 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.view.ViewGroup getTopViewGroup(android.view.View)>(r0);

        return $r1;
    }

android.support.test.espresso.assertion.PositionAssertions$1
<android.support.test.espresso.assertion.PositionAssertions$1: android.support.test.espresso.assertion.PositionAssertions$Position val$position>
<android.support.test.espresso.assertion.PositionAssertions$1: org.hamcrest.Matcher val$viewMatcher>
    void <init>(android.support.test.espresso.assertion.PositionAssertions$Position, org.hamcrest.Matcher)
    {
        android.support.test.espresso.assertion.PositionAssertions$1 r0;
        android.support.test.espresso.assertion.PositionAssertions$Position r1;
        org.hamcrest.Matcher r2;

        r0 := @this: android.support.test.espresso.assertion.PositionAssertions$1;

        r1 := @parameter0: android.support.test.espresso.assertion.PositionAssertions$Position;

        r2 := @parameter1: org.hamcrest.Matcher;

        r0.<android.support.test.espresso.assertion.PositionAssertions$1: android.support.test.espresso.assertion.PositionAssertions$Position val$position> = r1;

        r0.<android.support.test.espresso.assertion.PositionAssertions$1: org.hamcrest.Matcher val$viewMatcher> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void check(android.view.View, android.support.test.espresso.NoMatchingViewException)
    {
        android.support.test.espresso.assertion.PositionAssertions$1 r0;
        android.view.View r1, $r19;
        android.support.test.espresso.NoMatchingViewException r2;
        org.hamcrest.StringDescription r3, r29;
        org.hamcrest.Description $r5, $r7, $r8, $r11, $r12;
        java.lang.String $r6, $r10, $r14, $r16, $r25, $r26, $r28;
        android.support.test.espresso.assertion.PositionAssertions$Position $r9, $r20;
        org.hamcrest.Matcher $r13, $r17, $r23;
        android.view.ViewGroup $r18;
        boolean $z0;
        java.lang.Boolean $r21, $r22;
        java.lang.Object[] $r24;
        java.lang.Throwable r30;

        r0 := @this: android.support.test.espresso.assertion.PositionAssertions$1;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.support.test.espresso.NoMatchingViewException;

        r29 = new org.hamcrest.StringDescription;

        specialinvoke r29.<org.hamcrest.StringDescription: void <init>()>();

        r3 = r29;

        if r2 == null goto label1;

        $r24 = newarray (java.lang.Object)[1];

        $r25 = virtualinvoke r2.<android.support.test.espresso.NoMatchingViewException: java.lang.String getViewMatcherDescription()>();

        $r24[0] = $r25;

        $r26 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\' check could not be performed because view \'%s\' was not found.\n", $r24);

        virtualinvoke r3.<org.hamcrest.StringDescription: org.hamcrest.Description appendText(java.lang.String)>($r26);

        $r28 = virtualinvoke r3.<org.hamcrest.StringDescription: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PositionAssertions", $r28);

        r30 = (java.lang.Throwable) r2;

        throw r30;

     label1:
        $r5 = virtualinvoke r3.<org.hamcrest.StringDescription: org.hamcrest.Description appendText(java.lang.String)>("View:");

        $r6 = staticinvoke <android.support.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>(r1);

        $r7 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r6);

        $r8 = interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" is not ");

        $r9 = r0.<android.support.test.espresso.assertion.PositionAssertions$1: android.support.test.espresso.assertion.PositionAssertions$Position val$position>;

        $r10 = virtualinvoke $r9.<android.support.test.espresso.assertion.PositionAssertions$Position: java.lang.String toString()>();

        $r11 = interfaceinvoke $r8.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r10);

        $r12 = interfaceinvoke $r11.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" view ");

        $r13 = r0.<android.support.test.espresso.assertion.PositionAssertions$1: org.hamcrest.Matcher val$viewMatcher>;

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r12.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r14);

        $r16 = virtualinvoke r3.<org.hamcrest.StringDescription: java.lang.String toString()>();

        $r17 = r0.<android.support.test.espresso.assertion.PositionAssertions$1: org.hamcrest.Matcher val$viewMatcher>;

        $r18 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.view.ViewGroup access$000(android.view.View)>(r1);

        $r19 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: android.view.View findView(org.hamcrest.Matcher,android.view.View)>($r17, $r18);

        $r20 = r0.<android.support.test.espresso.assertion.PositionAssertions$1: android.support.test.espresso.assertion.PositionAssertions$Position val$position>;

        $z0 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions: boolean isRelativePosition(android.view.View,android.view.View,android.support.test.espresso.assertion.PositionAssertions$Position)>(r1, $r19, $r20);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r23 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r22);

        staticinvoke <android.support.test.espresso.matcher.ViewMatchers: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>($r16, $r21, $r23);

        return;
    }

android.support.test.espresso.assertion.PositionAssertions$2
<android.support.test.espresso.assertion.PositionAssertions$2: org.hamcrest.Matcher val$toView>
    void <init>(org.hamcrest.Matcher)
    {
        android.support.test.espresso.assertion.PositionAssertions$2 r0;
        org.hamcrest.Matcher r1;

        r0 := @this: android.support.test.espresso.assertion.PositionAssertions$2;

        r1 := @parameter0: org.hamcrest.Matcher;

        r0.<android.support.test.espresso.assertion.PositionAssertions$2: org.hamcrest.Matcher val$toView> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(android.view.View)
    {
        android.support.test.espresso.assertion.PositionAssertions$2 r0;
        android.view.View r1;
        org.hamcrest.Matcher $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.assertion.PositionAssertions$2;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.support.test.espresso.assertion.PositionAssertions$2: org.hamcrest.Matcher val$toView>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        android.support.test.espresso.assertion.PositionAssertions$2 r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: android.support.test.espresso.assertion.PositionAssertions$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<android.support.test.espresso.assertion.PositionAssertions$2: boolean apply(android.view.View)>($r2);

        return $z0;
    }

android.support.test.espresso.assertion.PositionAssertions$3
<android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>
    static void <clinit>()
    {
        android.support.test.espresso.assertion.PositionAssertions$Position[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        int[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        android.support.test.espresso.assertion.PositionAssertions$Position $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        java.lang.Throwable $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49;

        $r0 = staticinvoke <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position> = $r1;

     label01:
        $r3 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r2 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF>;

        $i1 = virtualinvoke $r2.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r32 := @caughtexception;

        r38 = $r32;

     label04:
        $r5 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r4 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF>;

        $i2 = virtualinvoke $r4.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r30 := @caughtexception;

        r39 = $r30;

     label07:
        $r7 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r6 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE>;

        $i3 = virtualinvoke $r6.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r35 := @caughtexception;

        r40 = $r35;

     label10:
        $r9 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r8 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW>;

        $i4 = virtualinvoke $r8.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r33 := @caughtexception;

        r41 = $r33;

     label13:
        $r11 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r10 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF>;

        $i5 = virtualinvoke $r10.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r29 := @caughtexception;

        r42 = $r29;

     label16:
        $r13 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r12 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF>;

        $i6 = virtualinvoke $r12.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r13[$i6] = 6;

     label17:
        goto label19;

     label18:
        $r26 := @caughtexception;

        r43 = $r26;

     label19:
        $r15 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r14 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE>;

        $i7 = virtualinvoke $r14.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r15[$i7] = 7;

     label20:
        goto label22;

     label21:
        $r31 := @caughtexception;

        r44 = $r31;

     label22:
        $r17 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r16 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW>;

        $i8 = virtualinvoke $r16.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r17[$i8] = 8;

     label23:
        goto label25;

     label24:
        $r27 := @caughtexception;

        r45 = $r27;

     label25:
        $r19 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r18 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED>;

        $i9 = virtualinvoke $r18.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r19[$i9] = 9;

     label26:
        goto label28;

     label27:
        $r28 := @caughtexception;

        r46 = $r28;

     label28:
        $r21 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r20 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED>;

        $i10 = virtualinvoke $r20.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r21[$i10] = 10;

     label29:
        goto label31;

     label30:
        $r37 := @caughtexception;

        r47 = $r37;

     label31:
        $r23 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r22 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED>;

        $i11 = virtualinvoke $r22.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r23[$i11] = 11;

     label32:
        goto label34;

     label33:
        $r36 := @caughtexception;

        r48 = $r36;

     label34:
        $r25 = <android.support.test.espresso.assertion.PositionAssertions$3: int[] $SwitchMap$android$support$test$espresso$assertion$PositionAssertions$Position>;

        $r24 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED>;

        $i12 = virtualinvoke $r24.<android.support.test.espresso.assertion.PositionAssertions$Position: int ordinal()>();

        $r25[$i12] = 12;

     label35:
        goto label37;

     label36:
        $r34 := @caughtexception;

        r49 = $r34;

     label37:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label16 to label17 with label18;
        catch java.lang.NoSuchFieldError from label19 to label20 with label21;
        catch java.lang.NoSuchFieldError from label22 to label23 with label24;
        catch java.lang.NoSuchFieldError from label25 to label26 with label27;
        catch java.lang.NoSuchFieldError from label28 to label29 with label30;
        catch java.lang.NoSuchFieldError from label31 to label32 with label33;
        catch java.lang.NoSuchFieldError from label34 to label35 with label36;
    }

android.support.test.espresso.assertion.PositionAssertions$Position
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED>
<android.support.test.espresso.assertion.PositionAssertions$Position: java.lang.String positionValue>
<android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position[] $VALUES>
    public static android.support.test.espresso.assertion.PositionAssertions$Position[] values()
    {
        android.support.test.espresso.assertion.PositionAssertions$Position[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (android.support.test.espresso.assertion.PositionAssertions$Position[]) $r1;

        return $r2;
    }

    public static android.support.test.espresso.assertion.PositionAssertions$Position valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        android.support.test.espresso.assertion.PositionAssertions$Position $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/support/test/espresso/assertion/PositionAssertions$Position;", r0);

        $r2 = (android.support.test.espresso.assertion.PositionAssertions$Position) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        android.support.test.espresso.assertion.PositionAssertions$Position r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: android.support.test.espresso.assertion.PositionAssertions$Position;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<android.support.test.espresso.assertion.PositionAssertions$Position: java.lang.String positionValue> = r2;

        return;
    }

    public java.lang.String toString()
    {
        android.support.test.espresso.assertion.PositionAssertions$Position r0;
        java.lang.String $r1;

        r0 := @this: android.support.test.espresso.assertion.PositionAssertions$Position;

        $r1 = r0.<android.support.test.espresso.assertion.PositionAssertions$Position: java.lang.String positionValue>;

        return $r1;
    }

    static void <clinit>()
    {
        android.support.test.espresso.assertion.PositionAssertions$Position $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        android.support.test.espresso.assertion.PositionAssertions$Position[] $r12;

        $r0 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r0.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("COMPLETELY_LEFT_OF", 0, "completely left of");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF> = $r0;

        $r1 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r1.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("COMPLETELY_RIGHT_OF", 1, "completely right of");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF> = $r1;

        $r2 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r2.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("COMPLETELY_ABOVE", 2, "completely above");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE> = $r2;

        $r3 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r3.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("COMPLETELY_BELOW", 3, "completely below");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW> = $r3;

        $r4 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r4.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("PARTIALLY_LEFT_OF", 4, "partially left of");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF> = $r4;

        $r5 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r5.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("PARTIALLY_RIGHT_OF", 5, "partially right of");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF> = $r5;

        $r6 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r6.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("PARTIALLY_ABOVE", 6, "partially above");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE> = $r6;

        $r7 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r7.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("PARTIALLY_BELOW", 7, "partially below");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW> = $r7;

        $r8 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r8.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("LEFT_ALIGNED", 8, "aligned left with");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED> = $r8;

        $r9 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r9.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("RIGHT_ALIGNED", 9, "aligned right with");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED> = $r9;

        $r10 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r10.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("TOP_ALIGNED", 10, "aligned top with");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED> = $r10;

        $r11 = new android.support.test.espresso.assertion.PositionAssertions$Position;

        specialinvoke $r11.<android.support.test.espresso.assertion.PositionAssertions$Position: void <init>(java.lang.String,int,java.lang.String)>("BOTTOM_ALIGNED", 11, "aligned bottom with");

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED> = $r11;

        $r12 = newarray (android.support.test.espresso.assertion.PositionAssertions$Position)[12];

        $r13 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_LEFT_OF>;

        $r12[0] = $r13;

        $r14 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_RIGHT_OF>;

        $r12[1] = $r14;

        $r15 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_ABOVE>;

        $r12[2] = $r15;

        $r16 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position COMPLETELY_BELOW>;

        $r12[3] = $r16;

        $r17 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_LEFT_OF>;

        $r12[4] = $r17;

        $r18 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_RIGHT_OF>;

        $r12[5] = $r18;

        $r19 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_ABOVE>;

        $r12[6] = $r19;

        $r20 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position PARTIALLY_BELOW>;

        $r12[7] = $r20;

        $r21 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position LEFT_ALIGNED>;

        $r12[8] = $r21;

        $r22 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position RIGHT_ALIGNED>;

        $r12[9] = $r22;

        $r23 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position TOP_ALIGNED>;

        $r12[10] = $r23;

        $r24 = <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position BOTTOM_ALIGNED>;

        $r12[11] = $r24;

        <android.support.test.espresso.assertion.PositionAssertions$Position: android.support.test.espresso.assertion.PositionAssertions$Position[] $VALUES> = $r12;

        return;
    }

