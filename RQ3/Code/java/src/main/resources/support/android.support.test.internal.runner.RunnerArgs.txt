android.support.test.internal.runner.RunnerArgs
<android.support.test.internal.runner.RunnerArgs: java.lang.String LOG_TAG>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_TEST_CLASS>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_CLASSPATH_TO_SCAN>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_NOT_TEST_CLASS>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_TEST_SIZE>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_LOG_ONLY>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_ANNOTATION>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_NOT_ANNOTATION>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_NUM_SHARDS>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_SHARD_INDEX>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_DELAY_IN_MILLIS>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_COVERAGE>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_COVERAGE_PATH>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_SUITE_ASSIGNMENT>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_DEBUG>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_LISTENER>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_FILTER>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_RUNNER_BUILDER>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_TEST_PACKAGE>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_NOT_TEST_PACKAGE>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_TIMEOUT>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_TEST_FILE>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_NOT_TEST_FILE>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_DISABLE_ANALYTICS>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_APP_LISTENER>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_CLASS_LOADER>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_REMOTE_INIT_METHOD>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_TARGET_PROCESS>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_SCREENSHOT_PROCESSORS>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_ORCHESTRATOR_SERVICE>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_LIST_TESTS_FOR_ORCHESTRATOR>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_SHELL_EXEC_BINDER_KEY>
<android.support.test.internal.runner.RunnerArgs: java.lang.String ARGUMENT_RUN_LISTENER_NEW_ORDER>
<android.support.test.internal.runner.RunnerArgs: java.lang.String CLASS_SEPARATOR>
<android.support.test.internal.runner.RunnerArgs: java.lang.String CLASSPATH_SEPARATOR>
<android.support.test.internal.runner.RunnerArgs: char METHOD_SEPARATOR>
<android.support.test.internal.runner.RunnerArgs: java.lang.String CLASS_OR_METHOD_REGEX>
<android.support.test.internal.runner.RunnerArgs: java.lang.String VALID_PACKAGE_REGEX>
<android.support.test.internal.runner.RunnerArgs: boolean debug>
<android.support.test.internal.runner.RunnerArgs: boolean suiteAssignment>
<android.support.test.internal.runner.RunnerArgs: boolean codeCoverage>
<android.support.test.internal.runner.RunnerArgs: java.lang.String codeCoveragePath>
<android.support.test.internal.runner.RunnerArgs: int delayInMillis>
<android.support.test.internal.runner.RunnerArgs: boolean logOnly>
<android.support.test.internal.runner.RunnerArgs: java.util.List testPackages>
<android.support.test.internal.runner.RunnerArgs: java.util.List notTestPackages>
<android.support.test.internal.runner.RunnerArgs: java.lang.String testSize>
<android.support.test.internal.runner.RunnerArgs: java.lang.String 'annotation'>
<android.support.test.internal.runner.RunnerArgs: java.util.List notAnnotations>
<android.support.test.internal.runner.RunnerArgs: long testTimeout>
<android.support.test.internal.runner.RunnerArgs: java.util.List listeners>
<android.support.test.internal.runner.RunnerArgs: java.util.List filters>
<android.support.test.internal.runner.RunnerArgs: java.util.List runnerBuilderClasses>
<android.support.test.internal.runner.RunnerArgs: java.util.List tests>
<android.support.test.internal.runner.RunnerArgs: java.util.List notTests>
<android.support.test.internal.runner.RunnerArgs: int numShards>
<android.support.test.internal.runner.RunnerArgs: int shardIndex>
<android.support.test.internal.runner.RunnerArgs: boolean disableAnalytics>
<android.support.test.internal.runner.RunnerArgs: java.util.List appListeners>
<android.support.test.internal.runner.RunnerArgs: java.lang.ClassLoader classLoader>
<android.support.test.internal.runner.RunnerArgs: java.util.Set classpathToScan>
<android.support.test.internal.runner.RunnerArgs: android.support.test.internal.runner.RunnerArgs$TestArg remoteMethod>
<android.support.test.internal.runner.RunnerArgs: java.lang.String targetProcess>
<android.support.test.internal.runner.RunnerArgs: java.util.List screenCaptureProcessors>
<android.support.test.internal.runner.RunnerArgs: java.lang.String orchestratorService>
<android.support.test.internal.runner.RunnerArgs: boolean listTestsForOrchestrator>
<android.support.test.internal.runner.RunnerArgs: java.lang.String shellExecBinderKey>
<android.support.test.internal.runner.RunnerArgs: boolean newRunListenerMode>
    private void <init>(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs r0;
        android.support.test.internal.runner.RunnerArgs$Builder r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r2, $r5, $r6, $r24, $r27, $r28;
        int $i0, $i2, $i3;
        java.util.List $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r25, $r26;
        long $l1;
        java.lang.ClassLoader $r21;
        java.util.Set $r22;
        android.support.test.internal.runner.RunnerArgs$TestArg $r23;

        r0 := @this: android.support.test.internal.runner.RunnerArgs;

        r1 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean access$000(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: boolean debug> = $z0;

        $z1 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean access$100(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: boolean suiteAssignment> = $z1;

        $z2 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean access$200(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: boolean codeCoverage> = $z2;

        $r2 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String access$300(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: java.lang.String codeCoveragePath> = $r2;

        $i0 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: int access$400(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: int delayInMillis> = $i0;

        $z3 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean access$500(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: boolean logOnly> = $z3;

        $r3 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$600(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List testPackages> = $r3;

        $r4 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$700(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List notTestPackages> = $r4;

        $r5 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String access$800(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: java.lang.String testSize> = $r5;

        $r6 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String access$900(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: java.lang.String 'annotation'> = $r6;

        $r7 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$1000(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List notAnnotations> = $r8;

        $l1 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: long access$1100(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: long testTimeout> = $l1;

        $r9 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$1200(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List listeners> = $r10;

        $r11 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$1300(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        $r12 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r11);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List filters> = $r12;

        $r13 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$1400(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        $r14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r13);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List runnerBuilderClasses> = $r14;

        $r15 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$1500(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        $r16 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r15);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List tests> = $r16;

        $r17 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$1600(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        $r18 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r17);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List notTests> = $r18;

        $i2 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: int access$1700(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: int numShards> = $i2;

        $i3 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: int access$1800(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: int shardIndex> = $i3;

        $z4 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean access$1900(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: boolean disableAnalytics> = $z4;

        $r19 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$2000(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        $r20 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r19);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List appListeners> = $r20;

        $r21 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader access$2100(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: java.lang.ClassLoader classLoader> = $r21;

        $r22 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.Set access$2200(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.Set classpathToScan> = $r22;

        $r23 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestArg access$2300(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: android.support.test.internal.runner.RunnerArgs$TestArg remoteMethod> = $r23;

        $r24 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String access$2400(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: java.lang.String orchestratorService> = $r24;

        $z5 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean access$2500(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: boolean listTestsForOrchestrator> = $z5;

        $r25 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List access$2600(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        $r26 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r25);

        r0.<android.support.test.internal.runner.RunnerArgs: java.util.List screenCaptureProcessors> = $r26;

        $r27 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String access$2700(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: java.lang.String targetProcess> = $r27;

        $r28 = r1.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String shellExecBinderKey>;

        r0.<android.support.test.internal.runner.RunnerArgs: java.lang.String shellExecBinderKey> = $r28;

        $z6 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean access$2800(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        r0.<android.support.test.internal.runner.RunnerArgs: boolean newRunListenerMode> = $z6;

        return;
    }

    void <init>(android.support.test.internal.runner.RunnerArgs$Builder, android.support.test.internal.runner.RunnerArgs$1)
    {
        android.support.test.internal.runner.RunnerArgs r0;
        android.support.test.internal.runner.RunnerArgs$Builder r1;
        android.support.test.internal.runner.RunnerArgs$1 r2;

        r0 := @this: android.support.test.internal.runner.RunnerArgs;

        r1 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        r2 := @parameter1: android.support.test.internal.runner.RunnerArgs$1;

        specialinvoke r0.<android.support.test.internal.runner.RunnerArgs: void <init>(android.support.test.internal.runner.RunnerArgs$Builder)>(r1);

        return;
    }

android.support.test.internal.runner.RunnerArgs$1
android.support.test.internal.runner.RunnerArgs$Builder
<android.support.test.internal.runner.RunnerArgs$Builder: boolean debug>
<android.support.test.internal.runner.RunnerArgs$Builder: boolean suiteAssignment>
<android.support.test.internal.runner.RunnerArgs$Builder: boolean codeCoverage>
<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String codeCoveragePath>
<android.support.test.internal.runner.RunnerArgs$Builder: int delayInMillis>
<android.support.test.internal.runner.RunnerArgs$Builder: boolean logOnly>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages>
<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String testSize>
<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String 'annotation'>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notAnnotations>
<android.support.test.internal.runner.RunnerArgs$Builder: long testTimeout>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List listeners>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List filters>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List runnerBuilderClasses>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List tests>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTests>
<android.support.test.internal.runner.RunnerArgs$Builder: int numShards>
<android.support.test.internal.runner.RunnerArgs$Builder: int shardIndex>
<android.support.test.internal.runner.RunnerArgs$Builder: boolean disableAnalytics>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List appListeners>
<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader classLoader>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.Set classpathToScan>
<android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestArg remoteMethod>
<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String orchestratorService>
<android.support.test.internal.runner.RunnerArgs$Builder: boolean listTestsForOrchestrator>
<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String targetProcess>
<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List screenCaptureProcessors>
<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String shellExecBinderKey>
<android.support.test.internal.runner.RunnerArgs$Builder: boolean newRunListenerMode>
    public void <init>()
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.ArrayList $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11;
        java.util.HashSet $r10;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean debug> = 0;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean suiteAssignment> = 0;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean codeCoverage> = 0;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String codeCoveragePath> = null;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: int delayInMillis> = -1;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean logOnly> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages> = $r2;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String testSize> = null;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String 'annotation'> = null;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notAnnotations> = $r3;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: long testTimeout> = -1L;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List listeners> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List filters> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List runnerBuilderClasses> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List tests> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTests> = $r8;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: int numShards> = 0;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: int shardIndex> = 0;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean disableAnalytics> = 0;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List appListeners> = $r9;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader classLoader> = null;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.Set classpathToScan> = $r10;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestArg remoteMethod> = null;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String orchestratorService> = null;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean listTestsForOrchestrator> = 0;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String targetProcess> = null;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List screenCaptureProcessors> = $r11;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean newRunListenerMode> = 0;

        return;
    }

    public android.support.test.internal.runner.RunnerArgs$Builder fromBundle(android.os.Bundle)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        android.os.Bundle r1;
        android.support.test.internal.runner.RunnerArgs$TestFileArgs r2, r3;
        java.lang.String $r4, $r7, $r10, $r13, $r16, $r18, $r23, $r29, $r32, $r35, $r37, $r38, $r40, $r42, $r45, $r46, $r48, $r50, $r51, $r52, $r53, $r56, $r58, $r59, $r60, $r62, $r64, $r65, $r66;
        boolean $z0, $z13, $z14, $z16, $z17, $z18, $z19, $z21;
        java.lang.Object $r5, $r43, $r44, $r54;
        int $i0, $i2, $i3;
        java.util.List $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r30, $r31, $r33, $r34, $r36, $r39, $r41, $r47, $r49, $r61, $r63;
        long $l1;
        java.lang.ClassLoader $r55;
        java.util.Set $r57;
        android.support.test.internal.runner.RunnerArgs$TestArg $r67;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        r1 := @parameter0: android.os.Bundle;

        $r4 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("debug");

        $z0 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r4);

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean debug> = $z0;

        $r5 = virtualinvoke r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>("delay_msec");

        $i0 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: int parseUnsignedInt(java.lang.Object,java.lang.String)>($r5, "delay_msec");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: int delayInMillis> = $i0;

        $r6 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List tests>;

        $r7 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("class");

        $r8 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestClasses(java.lang.String)>($r7);

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        $r9 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTests>;

        $r10 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notClass");

        $r11 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestClasses(java.lang.String)>($r10);

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        $r12 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages>;

        $r13 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("package");

        $r14 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestPackages(java.lang.String)>($r13);

        interfaceinvoke $r12.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        $r15 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages>;

        $r16 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notPackage");

        $r17 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestPackages(java.lang.String)>($r16);

        interfaceinvoke $r15.<java.util.List: boolean addAll(java.util.Collection)>($r17);

        $r18 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("testFile");

        r2 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestFileArgs parseFromFile(java.lang.String)>($r18);

        $r19 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List tests>;

        $r20 = staticinvoke <android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List access$2900(android.support.test.internal.runner.RunnerArgs$TestFileArgs)>(r2);

        interfaceinvoke $r19.<java.util.List: boolean addAll(java.util.Collection)>($r20);

        $r21 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages>;

        $r22 = staticinvoke <android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List access$3000(android.support.test.internal.runner.RunnerArgs$TestFileArgs)>(r2);

        interfaceinvoke $r21.<java.util.List: boolean addAll(java.util.Collection)>($r22);

        $r23 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notTestFile");

        r3 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestFileArgs parseFromFile(java.lang.String)>($r23);

        $r24 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTests>;

        $r25 = staticinvoke <android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List access$2900(android.support.test.internal.runner.RunnerArgs$TestFileArgs)>(r3);

        interfaceinvoke $r24.<java.util.List: boolean addAll(java.util.Collection)>($r25);

        $r26 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages>;

        $r27 = staticinvoke <android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List access$3000(android.support.test.internal.runner.RunnerArgs$TestFileArgs)>(r3);

        interfaceinvoke $r26.<java.util.List: boolean addAll(java.util.Collection)>($r27);

        $r28 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List listeners>;

        $r29 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("listener");

        $r30 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>($r29, class "Lorg/junit/runner/notification/RunListener;", null);

        interfaceinvoke $r28.<java.util.List: boolean addAll(java.util.Collection)>($r30);

        $r31 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List filters>;

        $r32 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("filter");

        $r33 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>($r32, class "Lorg/junit/runner/manipulation/Filter;", r1);

        interfaceinvoke $r31.<java.util.List: boolean addAll(java.util.Collection)>($r33);

        $r34 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List runnerBuilderClasses>;

        $r35 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("runnerBuilder");

        $r36 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseAndLoadClasses(java.lang.String,java.lang.Class)>($r35, class "Lorg/junit/runners/model/RunnerBuilder;");

        interfaceinvoke $r34.<java.util.List: boolean addAll(java.util.Collection)>($r36);

        $r37 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("size");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String testSize> = $r37;

        $r38 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("annotation");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String 'annotation'> = $r38;

        $r39 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notAnnotations>;

        $r40 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notAnnotation");

        $r41 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseStrings(java.lang.String)>($r40);

        interfaceinvoke $r39.<java.util.List: boolean addAll(java.util.Collection)>($r41);

        $r42 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("timeout_msec");

        $l1 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: long parseUnsignedLong(java.lang.Object,java.lang.String)>($r42, "timeout_msec");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: long testTimeout> = $l1;

        $r43 = virtualinvoke r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>("numShards");

        $i2 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: int parseUnsignedInt(java.lang.Object,java.lang.String)>($r43, "numShards");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: int numShards> = $i2;

        $r44 = virtualinvoke r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>("shardIndex");

        $i3 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: int parseUnsignedInt(java.lang.Object,java.lang.String)>($r44, "shardIndex");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: int shardIndex> = $i3;

        $r45 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("log");

        $z13 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r45);

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean logOnly> = $z13;

        $r46 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("disableAnalytics");

        $z14 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r46);

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean disableAnalytics> = $z14;

        $r47 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List appListeners>;

        $r48 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("appListener");

        $r49 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>($r48, class "Landroid/support/test/runner/lifecycle/ApplicationLifecycleCallback;", null);

        interfaceinvoke $r47.<java.util.List: boolean addAll(java.util.Collection)>($r49);

        $r50 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverage");

        $z16 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r50);

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean codeCoverage> = $z16;

        $r51 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFile");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String codeCoveragePath> = $r51;

        $r52 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("suiteAssignment");

        $z17 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r52);

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean suiteAssignment> = $z17;

        $r53 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("classLoader");

        $r54 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.Object parseLoadAndInstantiateClass(java.lang.String,java.lang.Class)>($r53, class "Ljava/lang/ClassLoader;");

        $r55 = (java.lang.ClassLoader) $r54;

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader classLoader> = $r55;

        $r56 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("classpathToScan");

        $r57 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.Set parseClasspath(java.lang.String)>($r56);

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.Set classpathToScan> = $r57;

        $z18 = virtualinvoke r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("remoteMethod");

        if $z18 == 0 goto label1;

        $r66 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("remoteMethod");

        $r67 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestArg parseTestClass(java.lang.String)>($r66);

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestArg remoteMethod> = $r67;

     label1:
        $r58 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("orchestratorService");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String orchestratorService> = $r58;

        $r59 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("listTestsForOrchestrator");

        $z19 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r59);

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean listTestsForOrchestrator> = $z19;

        $r60 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("targetProcess");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String targetProcess> = $r60;

        $r61 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List screenCaptureProcessors>;

        $r62 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("screenCaptureProcessors");

        $r63 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>($r62, class "Landroid/support/test/runner/screenshot/ScreenCaptureProcessor;", null);

        interfaceinvoke $r61.<java.util.List: boolean addAll(java.util.Collection)>($r63);

        $r64 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("shellExecBinderKey");

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String shellExecBinderKey> = $r64;

        $r65 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("newRunListenerMode");

        $z21 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r65);

        r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean newRunListenerMode> = $z21;

        return r0;
    }

    public android.support.test.internal.runner.RunnerArgs$Builder fromManifest(android.app.Instrumentation)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0, $r6;
        android.app.Instrumentation r1;
        android.content.pm.PackageManager r2;
        android.os.Bundle r3;
        android.content.Context $r4;
        android.content.ComponentName $r5, $r9;
        java.lang.Throwable $r7, r12;
        java.lang.Object[] $r8;
        java.lang.String $r10;
        android.content.pm.InstrumentationInfo r11;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        r1 := @parameter0: android.app.Instrumentation;

        $r4 = virtualinvoke r1.<android.app.Instrumentation: android.content.Context getContext()>();

        r2 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        $r5 = virtualinvoke r1.<android.app.Instrumentation: android.content.ComponentName getComponentName()>();

        r11 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>($r5, 128);

        r3 = r11.<android.content.pm.InstrumentationInfo: android.os.Bundle metaData>;

        if r3 != null goto label3;

     label2:
        return r0;

     label3:
        $r6 = virtualinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$Builder fromBundle(android.os.Bundle)>(r3);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        r12 = $r7;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r1.<android.app.Instrumentation: android.content.ComponentName getComponentName()>();

        $r8[0] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not find component %s", $r8);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RunnerArgs", $r10);

        return r0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label5;
    }

    private static java.util.List parseStrings(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;
        java.util.List $r2, $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        return $r2;
    }

    private static boolean parseBoolean(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static int parseUnsignedInt(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r2, $r4, $r5;
        int i0;
        java.lang.NumberFormatException $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        if i0 >= 0 goto label1;

        $r3 = new java.lang.NumberFormatException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>(" can not be negative");

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        return i0;

     label2:
        return -1;
    }

    private static long parseUnsignedLong(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1, $r2, $r4, $r5;
        long l0;
        byte $b1;
        java.lang.NumberFormatException $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r3 = new java.lang.NumberFormatException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>(" can not be negative");

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        return l0;

     label2:
        return -1L;
    }

    private static java.util.List parseTestPackages(java.lang.String)
    {
        java.lang.String r0, r3;
        java.util.ArrayList r1, $r4;
        java.lang.String[] r2;
        int i0, i1;

        r0 := @parameter0: java.lang.String;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        if r0 == null goto label2;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    private java.util.List parseTestClasses(java.lang.String)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String r1, r4;
        java.util.ArrayList r2, $r5;
        java.lang.String[] r3;
        int i0, i1;
        android.support.test.internal.runner.RunnerArgs$TestArg $r6;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        if r1 == null goto label2;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        $r6 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestArg parseTestClass(java.lang.String)>(r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    private static java.util.Set parseClasspath(java.lang.String)
    {
        java.lang.String r0;
        java.util.HashSet $r1, $r2;
        boolean $z0;
        java.lang.String[] $r3;
        java.util.List $r4;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        return $r1;

     label2:
        $r2 = new java.util.HashSet;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(":", -1);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r4);

        return $r2;
    }

    private static android.support.test.internal.runner.RunnerArgs$TestArg parseTestClass(java.lang.String)
    {
        int i0, $i1;
        java.lang.String r0, r3, r4;
        boolean $z0;
        android.support.test.internal.runner.RunnerArgs$TestArg $r1, $r2;

        r3 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label1;

        return null;

     label1:
        i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(35);

        if i0 <= 0 goto label2;

        $i1 = i0 + 1;

        r0 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i1);

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r2 = new android.support.test.internal.runner.RunnerArgs$TestArg;

        specialinvoke $r2.<android.support.test.internal.runner.RunnerArgs$TestArg: void <init>(java.lang.String,java.lang.String)>(r4, r0);

        return $r2;

     label2:
        $r1 = new android.support.test.internal.runner.RunnerArgs$TestArg;

        specialinvoke $r1.<android.support.test.internal.runner.RunnerArgs$TestArg: void <init>(java.lang.String)>(r3);

        return $r1;
    }

    private android.support.test.internal.runner.RunnerArgs$TestFileArgs parseFromFile(java.lang.String)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String r1, r3, $r11, $r18, $r19, $r24, $r25, $r27, $r30, $r32;
        android.support.test.internal.runner.RunnerArgs$TestFileArgs r2, $r6;
        java.lang.Throwable r4, r5, $r15, $r16, $r20, $r21, $r22, r28, r29, r31;
        java.io.BufferedReader $r7, r26;
        java.io.FileReader $r8;
        java.io.File $r9;
        boolean $z0;
        java.util.List $r10, $r12, $r13;
        android.support.test.internal.runner.RunnerArgs$TestArg $r14;
        java.lang.IllegalArgumentException $r17, $r23;
        int $i0, $i1;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        r1 := @parameter0: java.lang.String;

        $r6 = new android.support.test.internal.runner.RunnerArgs$TestFileArgs;

        specialinvoke $r6.<android.support.test.internal.runner.RunnerArgs$TestFileArgs: void <init>(android.support.test.internal.runner.RunnerArgs$1)>(null);

        r2 = $r6;

        if r1 != null goto label01;

        return r2;

     label01:
        r26 = null;

     label02:
        $r7 = new java.io.BufferedReader;

        $r8 = new java.io.FileReader;

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke $r8.<java.io.FileReader: void <init>(java.io.File)>($r9);

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader)>($r8);

        r26 = $r7;

     label03:
        $r27 = virtualinvoke r26.<java.io.BufferedReader: java.lang.String readLine()>();

        r3 = $r27;

        if $r27 == null goto label05;

        $z0 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: boolean isClassOrMethod(java.lang.String)>(r3);

        if $z0 == 0 goto label04;

        $r13 = staticinvoke <android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List access$2900(android.support.test.internal.runner.RunnerArgs$TestFileArgs)>(r2);

        $r14 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestArg parseTestClass(java.lang.String)>(r3);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label03;

     label04:
        $r10 = staticinvoke <android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List access$3000(android.support.test.internal.runner.RunnerArgs$TestFileArgs)>(r2);

        $r11 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String validatePackage(java.lang.String)>(r3);

        $r12 = staticinvoke <android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestPackages(java.lang.String)>($r11);

        interfaceinvoke $r10.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        goto label03;

     label05:
        if r26 == null goto label21;

     label06:
        virtualinvoke r26.<java.io.BufferedReader: void close()>();

     label07:
        goto label21;

     label08:
        $r21 := @caughtexception;

        r28 = $r21;

        goto label21;

     label09:
        $r16 := @caughtexception;

        r29 = $r16;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = "testfile not found: ";

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i0 = virtualinvoke $r19.<java.lang.String: int length()>();

        if $i0 == 0 goto label10;

        $r30 = virtualinvoke $r18.<java.lang.String: java.lang.String concat(java.lang.String)>($r19);

        goto label11;

     label10:
        $r30 = new java.lang.String;

        specialinvoke $r30.<java.lang.String: void <init>(java.lang.String)>("testfile not found: ");

     label11:
        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r30, r29);

        throw $r17;

     label12:
        $r22 := @caughtexception;

        r31 = $r22;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = "Could not read testfile ";

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i1 = virtualinvoke $r25.<java.lang.String: int length()>();

        if $i1 == 0 goto label13;

        $r32 = virtualinvoke $r24.<java.lang.String: java.lang.String concat(java.lang.String)>($r25);

        goto label14;

     label13:
        $r32 = new java.lang.String;

        specialinvoke $r32.<java.lang.String: void <init>(java.lang.String)>("Could not read testfile ");

     label14:
        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r32, r31);

        throw $r23;

     label15:
        $r15 := @caughtexception;

        r4 = $r15;

     label16:
        if r26 == null goto label20;

     label17:
        virtualinvoke r26.<java.io.BufferedReader: void close()>();

     label18:
        goto label20;

     label19:
        $r20 := @caughtexception;

        r5 = $r20;

     label20:
        throw r4;

     label21:
        return r2;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.FileNotFoundException from label02 to label05 with label09;
        catch java.io.IOException from label02 to label05 with label12;
        catch java.lang.Throwable from label02 to label05 with label15;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label09 to label16 with label15;
    }

    static boolean isClassOrMethod(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{Lu}_$][\\p{L}\\p{N}_$]*(#[\\p{L}_$][\\p{L}\\p{N}_$]*)?$");

        return $z0;
    }

    static java.lang.String validatePackage(java.lang.String)
    {
        java.lang.String r0, $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*$");

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\"%s\" not recognized as valid package name", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        return r0;
    }

    private java.util.List parseLoadAndInstantiateClasses(java.lang.String, java.lang.Class, android.os.Bundle)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String r1, r6;
        java.lang.Class r2;
        android.os.Bundle r3;
        java.util.ArrayList r4, $r7;
        java.lang.String[] r5;
        int i0, i1;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: android.os.Bundle;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r4 = $r7;

        if r1 == null goto label2;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r6 = r5[i1];

        specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: void loadClassByNameInstantiateAndAdd(java.util.List,java.lang.String,java.lang.Class,android.os.Bundle)>(r4, r6, r2, r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r4;
    }

    private java.lang.Object parseLoadAndInstantiateClass(java.lang.String, java.lang.Class)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String r1, $r8;
        java.lang.Class r2;
        java.util.List r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 = specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>(r1, r2, null);

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = newarray (java.lang.Object)[1];

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected 1 class loader, %d given", $r6);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label1:
        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        return $r4;

     label2:
        return null;
    }

    private void loadClassByNameInstantiateAndAdd(java.util.List, java.lang.String, java.lang.Class, android.os.Bundle)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List r1;
        java.lang.String r2, $r9, $r10, $r13, $r14, $r17, $r18, $r21, $r22, $r25, $r26, $r31, $r34, $r35, $r47, $r49, r51, $r53, $r55, $r57;
        java.lang.Class r3, r41;
        android.os.Bundle r4;
        java.lang.Throwable r5, $r7, $r11, $r15, $r19, $r23, $r32, $r36, $r38, r44, r46, r48, r50, r52, r54, r56;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Class[] $r6, $r39;
        java.lang.IllegalArgumentException $r8, $r12, $r16, $r20, $r24, $r33;
        java.lang.StringBuilder $r27, $r28, $r29, $r30;
        java.lang.Object[] $r40, r43;
        java.lang.reflect.Constructor r42;
        java.lang.Object r45;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: android.os.Bundle;

        if r2 == null goto label01;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return;

     label02:
        r41 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2);

     label03:
        $r6 = newarray (java.lang.Class)[0];

        r42 = virtualinvoke r41.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

        r43 = newarray (java.lang.Object)[0];

     label04:
        goto label10;

     label05:
        $r38 := @caughtexception;

        r44 = $r38;

        if r4 == null goto label09;

     label06:
        $r39 = newarray (java.lang.Class)[1];

        $r39[0] = class "Landroid/os/Bundle;";

        r42 = virtualinvoke r41.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r39);

        $r40 = newarray (java.lang.Object)[1];

        $r40[0] = r4;

        r43 = $r40;

     label07:
        goto label10;

     label08:
        $r36 := @caughtexception;

        r5 = $r36;

        virtualinvoke r5.<java.lang.NoSuchMethodException: java.lang.Throwable initCause(java.lang.Throwable)>(r44);

        throw r5;

     label09:
        throw r44;

     label10:
        virtualinvoke r42.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        r45 = virtualinvoke r42.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r43);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r45);

     label11:
        goto label28;

     label12:
        $r7 := @caughtexception;

        r46 = $r7;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = "Could not find extra class ";

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i1 == 0 goto label13;

        $r47 = virtualinvoke $r9.<java.lang.String: java.lang.String concat(java.lang.String)>($r10);

        goto label14;

     label13:
        $r47 = new java.lang.String;

        specialinvoke $r47.<java.lang.String: void <init>(java.lang.String)>("Could not find extra class ");

     label14:
        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r47);

        throw $r8;

     label15:
        $r11 := @caughtexception;

        r48 = $r11;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = "Must have no argument constructor for class ";

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i2 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i2 == 0 goto label16;

        $r49 = virtualinvoke $r13.<java.lang.String: java.lang.String concat(java.lang.String)>($r14);

        goto label17;

     label16:
        $r49 = new java.lang.String;

        specialinvoke $r49.<java.lang.String: void <init>(java.lang.String)>("Must have no argument constructor for class ");

     label17:
        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r49);

        throw $r12;

     label18:
        $r23 := @caughtexception;

        r50 = $r23;

        $r24 = new java.lang.IllegalArgumentException;

        r51 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i5 = virtualinvoke $r25.<java.lang.String: int length()>();

        $i6 = 17 + $i5;

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r51);

        $i7 = virtualinvoke $r26.<java.lang.String: int length()>();

        $i8 = $i6 + $i7;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(int)>($i8);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r24;

     label19:
        $r19 := @caughtexception;

        r52 = $r19;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = "Failed to create: ";

        $r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i4 = virtualinvoke $r22.<java.lang.String: int length()>();

        if $i4 == 0 goto label20;

        $r53 = virtualinvoke $r21.<java.lang.String: java.lang.String concat(java.lang.String)>($r22);

        goto label21;

     label20:
        $r53 = new java.lang.String;

        specialinvoke $r53.<java.lang.String: void <init>(java.lang.String)>("Failed to create: ");

     label21:
        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r53, r52);

        throw $r20;

     label22:
        $r15 := @caughtexception;

        r54 = $r15;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = "Failed to create: ";

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i3 = virtualinvoke $r18.<java.lang.String: int length()>();

        if $i3 == 0 goto label23;

        $r55 = virtualinvoke $r17.<java.lang.String: java.lang.String concat(java.lang.String)>($r18);

        goto label24;

     label23:
        $r55 = new java.lang.String;

        specialinvoke $r55.<java.lang.String: void <init>(java.lang.String)>("Failed to create: ");

     label24:
        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r55, r54);

        throw $r16;

     label25:
        $r32 := @caughtexception;

        r56 = $r32;

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = "Failed to create listener: ";

        $r35 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i9 = virtualinvoke $r35.<java.lang.String: int length()>();

        if $i9 == 0 goto label26;

        $r57 = virtualinvoke $r34.<java.lang.String: java.lang.String concat(java.lang.String)>($r35);

        goto label27;

     label26:
        $r57 = new java.lang.String;

        specialinvoke $r57.<java.lang.String: void <init>(java.lang.String)>("Failed to create listener: ");

     label27:
        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r57, r56);

        throw $r33;

     label28:
        return;

        catch java.lang.NoSuchMethodException from label03 to label04 with label05;
        catch java.lang.NoSuchMethodException from label06 to label07 with label08;
        catch java.lang.ClassNotFoundException from label02 to label11 with label12;
        catch java.lang.NoSuchMethodException from label02 to label11 with label15;
        catch java.lang.ClassCastException from label02 to label11 with label18;
        catch java.lang.InstantiationException from label02 to label11 with label19;
        catch java.lang.reflect.InvocationTargetException from label02 to label11 with label22;
        catch java.lang.IllegalAccessException from label02 to label11 with label25;
    }

    private java.util.List parseAndLoadClasses(java.lang.String, java.lang.Class)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String r1, r5;
        java.lang.Class r2;
        java.util.ArrayList r3, $r6;
        java.lang.String[] r4;
        int i0, i1;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        if r1 == null goto label2;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r4[i1];

        specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$Builder: void loadClassByNameAndAdd(java.util.List,java.lang.String,java.lang.Class)>(r3, r5, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private void loadClassByNameAndAdd(java.util.List, java.lang.String, java.lang.Class)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List r1;
        java.lang.String r2, $r5, $r6, $r11, $r14, $r15, $r20, $r23, $r24, r26, $r29, r31;
        java.lang.Class r3, r25, r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;
        java.lang.IllegalArgumentException $r4, $r13, $r22;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r16, $r17, $r18, $r19;
        java.lang.Throwable $r12, $r21, r28, r30;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class;

        if null == r2 goto label1;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        r25 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2);

        $z0 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r25);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        r26 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i2 = 17 + $i1;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r26);

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        r27 = r25;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r27);

     label4:
        goto label9;

     label5:
        $r21 := @caughtexception;

        r28 = $r21;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = "Could not find extra class ";

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i9 = virtualinvoke $r24.<java.lang.String: int length()>();

        if $i9 == 0 goto label6;

        $r29 = virtualinvoke $r23.<java.lang.String: java.lang.String concat(java.lang.String)>($r24);

        goto label7;

     label6:
        $r29 = new java.lang.String;

        specialinvoke $r29.<java.lang.String: void <init>(java.lang.String)>("Could not find extra class ");

     label7:
        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r22;

     label8:
        $r12 := @caughtexception;

        r30 = $r12;

        $r13 = new java.lang.IllegalArgumentException;

        r31 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i5 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i6 = 17 + $i5;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r31);

        $i7 = virtualinvoke $r15.<java.lang.String: int length()>();

        $i8 = $i6 + $i7;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(int)>($i8);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r13;

     label9:
        return;

        catch java.lang.ClassNotFoundException from label2 to label4 with label5;
        catch java.lang.ClassCastException from label2 to label4 with label8;
    }

    public android.support.test.internal.runner.RunnerArgs build()
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        android.support.test.internal.runner.RunnerArgs $r1;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = new android.support.test.internal.runner.RunnerArgs;

        specialinvoke $r1.<android.support.test.internal.runner.RunnerArgs: void <init>(android.support.test.internal.runner.RunnerArgs$Builder,android.support.test.internal.runner.RunnerArgs$1)>(r0, null);

        return $r1;
    }

    static boolean access$000(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        boolean $z0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $z0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean debug>;

        return $z0;
    }

    static boolean access$100(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        boolean $z0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $z0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean suiteAssignment>;

        return $z0;
    }

    static boolean access$200(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        boolean $z0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $z0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean codeCoverage>;

        return $z0;
    }

    static java.lang.String access$300(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String codeCoveragePath>;

        return $r1;
    }

    static int access$400(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        int $i0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $i0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: int delayInMillis>;

        return $i0;
    }

    static boolean access$500(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        boolean $z0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $z0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean logOnly>;

        return $z0;
    }

    static java.util.List access$600(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages>;

        return $r1;
    }

    static java.util.List access$700(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages>;

        return $r1;
    }

    static java.lang.String access$800(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String testSize>;

        return $r1;
    }

    static java.lang.String access$900(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String 'annotation'>;

        return $r1;
    }

    static java.util.List access$1000(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notAnnotations>;

        return $r1;
    }

    static long access$1100(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        long $l0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $l0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: long testTimeout>;

        return $l0;
    }

    static java.util.List access$1200(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List listeners>;

        return $r1;
    }

    static java.util.List access$1300(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List filters>;

        return $r1;
    }

    static java.util.List access$1400(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List runnerBuilderClasses>;

        return $r1;
    }

    static java.util.List access$1500(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List tests>;

        return $r1;
    }

    static java.util.List access$1600(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List notTests>;

        return $r1;
    }

    static int access$1700(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        int $i0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $i0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: int numShards>;

        return $i0;
    }

    static int access$1800(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        int $i0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $i0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: int shardIndex>;

        return $i0;
    }

    static boolean access$1900(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        boolean $z0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $z0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean disableAnalytics>;

        return $z0;
    }

    static java.util.List access$2000(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List appListeners>;

        return $r1;
    }

    static java.lang.ClassLoader access$2100(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader classLoader>;

        return $r1;
    }

    static java.util.Set access$2200(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.Set $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.Set classpathToScan>;

        return $r1;
    }

    static android.support.test.internal.runner.RunnerArgs$TestArg access$2300(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        android.support.test.internal.runner.RunnerArgs$TestArg $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: android.support.test.internal.runner.RunnerArgs$TestArg remoteMethod>;

        return $r1;
    }

    static java.lang.String access$2400(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String orchestratorService>;

        return $r1;
    }

    static boolean access$2500(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        boolean $z0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $z0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean listTestsForOrchestrator>;

        return $z0;
    }

    static java.util.List access$2600(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.util.List screenCaptureProcessors>;

        return $r1;
    }

    static java.lang.String access$2700(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        java.lang.String $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: java.lang.String targetProcess>;

        return $r1;
    }

    static boolean access$2800(android.support.test.internal.runner.RunnerArgs$Builder)
    {
        android.support.test.internal.runner.RunnerArgs$Builder r0;
        boolean $z0;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$Builder;

        $z0 = r0.<android.support.test.internal.runner.RunnerArgs$Builder: boolean newRunListenerMode>;

        return $z0;
    }

android.support.test.internal.runner.RunnerArgs$TestArg
<android.support.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>
<android.support.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>
    void <init>(java.lang.String, java.lang.String)
    {
        android.support.test.internal.runner.RunnerArgs$TestArg r0;
        java.lang.String r1, r2;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$TestArg;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName> = r1;

        r0.<android.support.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName> = r2;

        return;
    }

    void <init>(java.lang.String)
    {
        android.support.test.internal.runner.RunnerArgs$TestArg r0;
        java.lang.String r1;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$TestArg;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$TestArg: void <init>(java.lang.String,java.lang.String)>(r1, null);

        return;
    }

    public java.lang.String toString()
    {
        android.support.test.internal.runner.RunnerArgs$TestArg r0;
        java.lang.String r1, r2, $r3, $r4, $r5, $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$TestArg;

        $r3 = r0.<android.support.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>;

        if $r3 == null goto label1;

        r1 = r0.<android.support.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

        r2 = r0.<android.support.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = 1 + $i0;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i3 = $i1 + $i2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r10 = r0.<android.support.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

     label2:
        return $r10;
    }

android.support.test.internal.runner.RunnerArgs$TestFileArgs
<android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List tests>
<android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List packages>
    private void <init>()
    {
        android.support.test.internal.runner.RunnerArgs$TestFileArgs r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$TestFileArgs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List tests> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List packages> = $r2;

        return;
    }

    static java.util.List access$2900(android.support.test.internal.runner.RunnerArgs$TestFileArgs)
    {
        android.support.test.internal.runner.RunnerArgs$TestFileArgs r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$TestFileArgs;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List tests>;

        return $r1;
    }

    static java.util.List access$3000(android.support.test.internal.runner.RunnerArgs$TestFileArgs)
    {
        android.support.test.internal.runner.RunnerArgs$TestFileArgs r0;
        java.util.List $r1;

        r0 := @parameter0: android.support.test.internal.runner.RunnerArgs$TestFileArgs;

        $r1 = r0.<android.support.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List packages>;

        return $r1;
    }

    void <init>(android.support.test.internal.runner.RunnerArgs$1)
    {
        android.support.test.internal.runner.RunnerArgs$TestFileArgs r0;
        android.support.test.internal.runner.RunnerArgs$1 r1;

        r0 := @this: android.support.test.internal.runner.RunnerArgs$TestFileArgs;

        r1 := @parameter0: android.support.test.internal.runner.RunnerArgs$1;

        specialinvoke r0.<android.support.test.internal.runner.RunnerArgs$TestFileArgs: void <init>()>();

        return;
    }

