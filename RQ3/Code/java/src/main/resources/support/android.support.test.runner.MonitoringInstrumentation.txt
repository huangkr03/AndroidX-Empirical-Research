android.support.test.runner.MonitoringInstrumentation
<android.support.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP>
<android.support.test.runner.MonitoringInstrumentation: long MILLIS_TO_POLL_FOR_ACTIVITY_STOP>
<android.support.test.runner.MonitoringInstrumentation: java.lang.String LOG_TAG>
<android.support.test.runner.MonitoringInstrumentation: int START_ACTIVITY_TIMEOUT_SECONDS>
<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>
<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.ExecutorService mExecutorService>
<android.support.test.runner.MonitoringInstrumentation: android.os.Handler mHandlerForMainLooper>
<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean mAnActivityHasBeenLaunched>
<android.support.test.runner.MonitoringInstrumentation: java.lang.Thread mMainThread>
<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong mLastIdleTime>
<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger mStartedActivityCounter>
<android.support.test.runner.MonitoringInstrumentation: android.os.MessageQueue$IdleHandler mIdleHandler>
<android.support.test.runner.MonitoringInstrumentation: boolean mFinished>
    public void <init>()
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        android.support.test.runner.MonitoringInstrumentation$1 $r5;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        specialinvoke r0.<android.app.Instrumentation: void <init>()>();

        $r1 = new android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl;

        specialinvoke $r1.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void <init>()>();

        r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean mAnActivityHasBeenLaunched> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong mLastIdleTime> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger mStartedActivityCounter> = $r4;

        $r5 = new android.support.test.runner.MonitoringInstrumentation$1;

        specialinvoke $r5.<android.support.test.runner.MonitoringInstrumentation$1: void <init>(android.support.test.runner.MonitoringInstrumentation)>(r0);

        r0.<android.support.test.runner.MonitoringInstrumentation: android.os.MessageQueue$IdleHandler mIdleHandler> = $r5;

        r0.<android.support.test.runner.MonitoringInstrumentation: boolean mFinished> = 0;

        return;
    }

    public void onCreate(android.os.Bundle)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.os.Bundle r1;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r2;
        android.os.Handler $r3;
        android.os.Looper $r4;
        java.lang.Thread $r5;
        java.util.concurrent.ExecutorService $r6;
        android.os.MessageQueue $r7;
        android.os.MessageQueue$IdleHandler $r8;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.os.Bundle;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstrumentation", "Instrumentation Started!");

        specialinvoke r0.<android.support.test.runner.MonitoringInstrumentation: void logUncaughtExceptions()>();

        staticinvoke <android.support.test.InstrumentationRegistry: void registerInstance(android.app.Instrumentation,android.os.Bundle)>(r0, r1);

        $r2 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        staticinvoke <android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorRegistry: void registerInstance(android.support.test.runner.lifecycle.ActivityLifecycleMonitor)>($r2);

        $r3 = new android.os.Handler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r4);

        r0.<android.support.test.runner.MonitoringInstrumentation: android.os.Handler mHandlerForMainLooper> = $r3;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<android.support.test.runner.MonitoringInstrumentation: java.lang.Thread mMainThread> = $r5;

        $r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();

        r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.ExecutorService mExecutorService> = $r6;

        $r7 = staticinvoke <android.os.Looper: android.os.MessageQueue myQueue()>();

        $r8 = r0.<android.support.test.runner.MonitoringInstrumentation: android.os.MessageQueue$IdleHandler mIdleHandler>;

        virtualinvoke $r7.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>($r8);

        specialinvoke r0.<android.app.Instrumentation: void onCreate(android.os.Bundle)>(r1);

        return;
    }

    protected final void specifyDexMakerCacheProperty()
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        java.io.File r1;
        android.content.Context $r2;
        java.util.Properties $r3;
        java.lang.String $r4;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        $r2 = virtualinvoke r0.<android.support.test.runner.MonitoringInstrumentation: android.content.Context getTargetContext()>();

        r1 = virtualinvoke $r2.<android.content.Context: java.io.File getDir(java.lang.String,int)>("dxmaker_cache", 0);

        $r3 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r3.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("dexmaker.dexcache", $r4);

        return;
    }

    private void logUncaughtExceptions()
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        java.lang.Thread$UncaughtExceptionHandler r1;
        java.lang.Thread $r2, $r3;
        android.support.test.runner.MonitoringInstrumentation$2 $r4;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r2.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = new android.support.test.runner.MonitoringInstrumentation$2;

        specialinvoke $r4.<android.support.test.runner.MonitoringInstrumentation$2: void <init>(android.support.test.runner.MonitoringInstrumentation,java.lang.Thread$UncaughtExceptionHandler)>(r0, r1);

        virtualinvoke $r3.<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r4);

        return;
    }

    public void onStart()
    {
        android.support.test.runner.MonitoringInstrumentation r0;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        specialinvoke r0.<android.app.Instrumentation: void onStart()>();

        virtualinvoke r0.<android.support.test.runner.MonitoringInstrumentation: void waitForIdleSync()>();

        return;
    }

    public void finish(int, android.os.Bundle)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        int i0;
        android.os.Bundle r1;
        long l1, l2, $l3;
        boolean $z0;
        android.support.test.runner.MonitoringInstrumentation$ActivityFinisher $r2;
        android.os.Handler $r3;
        java.lang.Object[] $r4;
        java.lang.Long $r5;
        java.lang.String $r6;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $z0 = r0.<android.support.test.runner.MonitoringInstrumentation: boolean mFinished>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MonitoringInstrumentation", "finish called 2x!");

        return;

     label1:
        r0.<android.support.test.runner.MonitoringInstrumentation: boolean mFinished> = 1;

        $r3 = r0.<android.support.test.runner.MonitoringInstrumentation: android.os.Handler mHandlerForMainLooper>;

        $r2 = new android.support.test.runner.MonitoringInstrumentation$ActivityFinisher;

        specialinvoke $r2.<android.support.test.runner.MonitoringInstrumentation$ActivityFinisher: void <init>(android.support.test.runner.MonitoringInstrumentation)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r0.<android.support.test.runner.MonitoringInstrumentation: void waitForActivitiesToComplete()>();

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = newarray (java.lang.Object)[1];

        $l3 = l2 - l1;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("waitForActivitiesToComplete() took: %sms", $r4);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstrumentation", $r6);

        staticinvoke <android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorRegistry: void registerInstance(android.support.test.runner.lifecycle.ActivityLifecycleMonitor)>(null);

        specialinvoke r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>(i0, r1);

        return;
    }

    protected void waitForActivitiesToComplete()
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        long l0, $l1, $l2, $l3, $l5, $l8;
        java.lang.Throwable r1, $r12;
        java.util.concurrent.atomic.AtomicInteger $r2, $r11;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        java.lang.Long $r5;
        java.lang.String $r6, $r10;
        byte $b6;
        java.lang.StringBuilder $r7, $r8, $r9;
        int i10;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = <android.support.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP>;

        l0 = $l1 + $l2;

        $r2 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger mStartedActivityCounter>;

        i10 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label1:
        if i10 <= 0 goto label5;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b6 = $l5 cmp l0;

        if $b6 >= 0 goto label5;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unstopped activity count: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstrumentation", $r10);

        $l8 = <android.support.test.runner.MonitoringInstrumentation: long MILLIS_TO_POLL_FOR_ACTIVITY_STOP>;

        staticinvoke <java.lang.Thread: void sleep(long)>($l8);

        $r11 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger mStartedActivityCounter>;

        i10 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label3:
        goto label1;

     label4:
        $r12 := @caughtexception;

        r1 = $r12;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstrumentation", "Abandoning activity wait due to interruption.", r1);

        goto label5;

     label5:
        if i10 <= 0 goto label6;

        virtualinvoke r0.<android.support.test.runner.MonitoringInstrumentation: void dumpThreadStateToOutputs(java.lang.String)>("ThreadState-unstopped.txt");

        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $r3[0] = $r4;

        $l3 = <android.support.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Still %s activities active after waiting %s ms.", $r3);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MonitoringInstrumentation", $r6);

     label6:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public void onDestroy()
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.os.MessageQueue $r1;
        android.os.MessageQueue$IdleHandler $r2;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstrumentation", "Instrumentation Finished!");

        $r1 = staticinvoke <android.os.Looper: android.os.MessageQueue myQueue()>();

        $r2 = r0.<android.support.test.runner.MonitoringInstrumentation: android.os.MessageQueue$IdleHandler mIdleHandler>;

        virtualinvoke $r1.<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>($r2);

        specialinvoke r0.<android.app.Instrumentation: void onDestroy()>();

        return;
    }

    public android.app.Activity startActivitySync(android.content.Intent)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.content.Intent r1;
        long l0, $l1;
        java.util.concurrent.Future r2;
        java.util.concurrent.atomic.AtomicLong $r3, $r16;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        boolean $z0;
        android.support.test.runner.MonitoringInstrumentation$3 $r5;
        java.util.concurrent.ExecutorService $r6;
        java.util.concurrent.TimeUnit $r7;
        java.lang.Object $r8;
        android.app.Activity $r9;
        java.lang.Throwable $r11, $r19, $r22, $r24, r25, r26, r27;
        java.lang.RuntimeException $r12, $r21, $r23;
        java.lang.Object[] $r13;
        java.lang.Integer $r14;
        java.lang.Long $r15, $r17;
        java.lang.String $r18;
        java.lang.Thread $r20;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.support.test.runner.MonitoringInstrumentation: void validateNotAppThread()>();

        $r3 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong mLastIdleTime>;

        l0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r4 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean mAnActivityHasBeenLaunched>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

     label1:
        $r6 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.ExecutorService mExecutorService>;

        $r5 = new android.support.test.runner.MonitoringInstrumentation$3;

        specialinvoke $r5.<android.support.test.runner.MonitoringInstrumentation$3: void <init>(android.support.test.runner.MonitoringInstrumentation,android.content.Intent)>(r0, r1);

        r2 = interfaceinvoke $r6.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r5);

     label2:
        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r8 = interfaceinvoke r2.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(45L, $r7);

        $r9 = (android.app.Activity) $r8;

     label3:
        return $r9;

     label4:
        $r11 := @caughtexception;

        r25 = $r11;

        interfaceinvoke r2.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        virtualinvoke r0.<android.support.test.runner.MonitoringInstrumentation: void dumpThreadStateToOutputs(java.lang.String)>("ThreadState-startActivityTimeout.txt");

        $r12 = new java.lang.RuntimeException;

        $r13 = newarray (java.lang.Object)[4];

        $r13[0] = r1;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(45);

        $r13[1] = $r14;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r13[2] = $r15;

        $r16 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong mLastIdleTime>;

        $l1 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r13[3] = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not launch intent %s within %s seconds. Perhaps the main thread has not gone idle within a reasonable amount of time? There could be an animation or something constantly repainting the screen. Or the activity is doing network calls on creation? See the threaddump logs. For your reference the last time the event queue was idle before your activity launch request was %s and now the last time the queue went idle was: %s. If these numbers are the same your activity might be hogging the event queue.", $r13);

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label5:
        $r22 := @caughtexception;

        r26 = $r22;

        $r23 = new java.lang.RuntimeException;

        $r24 = virtualinvoke r26.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not launch activity", $r24);

        throw $r23;

     label6:
        $r19 := @caughtexception;

        r27 = $r19;

        $r20 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r20.<java.lang.Thread: void interrupt()>();

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("interrupted", r27);

        throw $r21;

        catch java.util.concurrent.TimeoutException from label2 to label3 with label4;
        catch java.util.concurrent.ExecutionException from label2 to label3 with label5;
        catch java.lang.InterruptedException from label2 to label3 with label6;
    }

    private void validateNotAppThread()
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        java.lang.Thread $r1, $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        $r1 = r0.<android.support.test.runner.MonitoringInstrumentation: java.lang.Thread mMainThread>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("this method cannot be called from the main application thread");

        throw $r3;

     label1:
        return;
    }

    public boolean onException(java.lang.Object, java.lang.Throwable)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        java.lang.String r3;
        java.lang.Object[] $r4;
        boolean $z0;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Exception encountered by: %s. Dumping thread state to outputs and pining for the fjords.", $r4);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstrumentation", r3, r2);

        virtualinvoke r0.<android.support.test.runner.MonitoringInstrumentation: void dumpThreadStateToOutputs(java.lang.String)>("ThreadState-onException.txt");

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MonitoringInstrumentation", "Dying now...");

        $z0 = specialinvoke r0.<android.app.Instrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>(r1, r2);

        return $z0;
    }

    protected final void dumpThreadStateToOutputs(java.lang.String)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        java.lang.String r1, r2;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <android.support.test.runner.MonitoringInstrumentation: java.lang.String getThreadState()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("THREAD_STATE", r2);

        return;
    }

    private static java.lang.String getThreadState()
    {
        java.util.Set r0;
        java.lang.StringBuilder r1, r4, $r8, $r11;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.StackTraceElement[] r5;
        int i0, i1;
        java.lang.StackTraceElement r6;
        java.util.Map $r7;
        boolean $z0;
        java.lang.String $r9, $r16, $r19;
        java.lang.Object $r10, $r12, $r14;

        $r7 = staticinvoke <java.lang.Thread: java.util.Map getAllStackTraces()>();

        r0 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r1 = $r8;

        r2 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("  ");

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (java.lang.StackTraceElement[]) $r14;

        i0 = lengthof r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r6 = r5[i1];

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r19 = virtualinvoke r6.<java.lang.StackTraceElement: java.lang.String toString()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        goto label1;

     label4:
        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public void callActivityOnDestroy(android.app.Activity)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        android.support.test.runner.lifecycle.Stage $r2;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r3;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<android.app.Instrumentation: void callActivityOnDestroy(android.app.Activity)>(r1);

        $r3 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        $r2 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage DESTROYED>;

        virtualinvoke $r3.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(android.support.test.runner.lifecycle.Stage,android.app.Activity)>($r2, r1);

        return;
    }

    public void callActivityOnRestart(android.app.Activity)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        android.support.test.runner.lifecycle.Stage $r2;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r3;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<android.app.Instrumentation: void callActivityOnRestart(android.app.Activity)>(r1);

        $r3 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        $r2 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage RESTARTED>;

        virtualinvoke $r3.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(android.support.test.runner.lifecycle.Stage,android.app.Activity)>($r2, r1);

        return;
    }

    public void callActivityOnCreate(android.app.Activity, android.os.Bundle)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        android.os.Bundle r2;
        android.support.test.runner.lifecycle.Stage $r3, $r5;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r4, $r6;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        r2 := @parameter1: android.os.Bundle;

        $r4 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        $r3 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage PRE_ON_CREATE>;

        virtualinvoke $r4.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(android.support.test.runner.lifecycle.Stage,android.app.Activity)>($r3, r1);

        specialinvoke r0.<android.app.Instrumentation: void callActivityOnCreate(android.app.Activity,android.os.Bundle)>(r1, r2);

        $r6 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        $r5 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage CREATED>;

        virtualinvoke $r6.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(android.support.test.runner.lifecycle.Stage,android.app.Activity)>($r5, r1);

        return;
    }

    public void callActivityOnStart(android.app.Activity)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.atomic.AtomicInteger $r3, $r7;
        android.support.test.runner.lifecycle.Stage $r4;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r5;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        $r3 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger mStartedActivityCounter>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label1:
        specialinvoke r0.<android.app.Instrumentation: void callActivityOnStart(android.app.Activity)>(r1);

        $r5 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        $r4 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage STARTED>;

        virtualinvoke $r5.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(android.support.test.runner.lifecycle.Stage,android.app.Activity)>($r4, r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger mStartedActivityCounter>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        throw r2;

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void callActivityOnStop(android.app.Activity)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        java.lang.Throwable r2, $r6;
        android.support.test.runner.lifecycle.Stage $r3;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r4;
        java.util.concurrent.atomic.AtomicInteger $r5, $r7;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

     label1:
        specialinvoke r0.<android.app.Instrumentation: void callActivityOnStop(android.app.Activity)>(r1);

        $r4 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        $r3 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage STOPPED>;

        virtualinvoke $r4.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(android.support.test.runner.lifecycle.Stage,android.app.Activity)>($r3, r1);

     label2:
        $r5 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger mStartedActivityCounter>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

     label4:
        $r7 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicInteger mStartedActivityCounter>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void callActivityOnResume(android.app.Activity)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        android.support.test.runner.lifecycle.Stage $r2;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r3;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<android.app.Instrumentation: void callActivityOnResume(android.app.Activity)>(r1);

        $r3 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        $r2 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage RESUMED>;

        virtualinvoke $r3.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(android.support.test.runner.lifecycle.Stage,android.app.Activity)>($r2, r1);

        return;
    }

    public void callActivityOnPause(android.app.Activity)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.app.Activity r1;
        android.support.test.runner.lifecycle.Stage $r2;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r3;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<android.app.Instrumentation: void callActivityOnPause(android.app.Activity)>(r1);

        $r3 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        $r2 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage PAUSED>;

        virtualinvoke $r3.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: void signalLifecycleChange(android.support.test.runner.lifecycle.Stage,android.app.Activity)>($r2, r1);

        return;
    }

    static java.util.concurrent.atomic.AtomicLong access$000(android.support.test.runner.MonitoringInstrumentation)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @parameter0: android.support.test.runner.MonitoringInstrumentation;

        $r1 = r0.<android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong mLastIdleTime>;

        return $r1;
    }

    static android.app.Activity access$101(android.support.test.runner.MonitoringInstrumentation, android.content.Intent)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.content.Intent r1;
        android.app.Activity $r2;

        r0 := @parameter0: android.support.test.runner.MonitoringInstrumentation;

        r1 := @parameter1: android.content.Intent;

        $r2 = specialinvoke r0.<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>(r1);

        return $r2;
    }

    static android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl access$200(android.support.test.runner.MonitoringInstrumentation)
    {
        android.support.test.runner.MonitoringInstrumentation r0;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r1;

        r0 := @parameter0: android.support.test.runner.MonitoringInstrumentation;

        $r1 = r0.<android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl mLifecycleMonitor>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        long $l0, $l1, $l2;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(2L);

        <android.support.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP> = $l0;

        $l1 = <android.support.test.runner.MonitoringInstrumentation: long MILLIS_TO_WAIT_FOR_ACTIVITY_TO_STOP>;

        $l2 = $l1 / 40L;

        <android.support.test.runner.MonitoringInstrumentation: long MILLIS_TO_POLL_FOR_ACTIVITY_STOP> = $l2;

        return;
    }

android.support.test.runner.MonitoringInstrumentation$1
<android.support.test.runner.MonitoringInstrumentation$1: android.support.test.runner.MonitoringInstrumentation this$0>
    void <init>(android.support.test.runner.MonitoringInstrumentation)
    {
        android.support.test.runner.MonitoringInstrumentation$1 r0;
        android.support.test.runner.MonitoringInstrumentation r1;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$1;

        r1 := @parameter0: android.support.test.runner.MonitoringInstrumentation;

        r0.<android.support.test.runner.MonitoringInstrumentation$1: android.support.test.runner.MonitoringInstrumentation this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean queueIdle()
    {
        android.support.test.runner.MonitoringInstrumentation$1 r0;
        android.support.test.runner.MonitoringInstrumentation $r1;
        java.util.concurrent.atomic.AtomicLong $r2;
        long $l0;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$1;

        $r1 = r0.<android.support.test.runner.MonitoringInstrumentation$1: android.support.test.runner.MonitoringInstrumentation this$0>;

        $r2 = staticinvoke <android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicLong access$000(android.support.test.runner.MonitoringInstrumentation)>($r1);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0);

        return 1;
    }

android.support.test.runner.MonitoringInstrumentation$2
<android.support.test.runner.MonitoringInstrumentation$2: java.lang.Thread$UncaughtExceptionHandler val$standardHandler>
<android.support.test.runner.MonitoringInstrumentation$2: android.support.test.runner.MonitoringInstrumentation this$0>
    void <init>(android.support.test.runner.MonitoringInstrumentation, java.lang.Thread$UncaughtExceptionHandler)
    {
        android.support.test.runner.MonitoringInstrumentation$2 r0;
        android.support.test.runner.MonitoringInstrumentation r1;
        java.lang.Thread$UncaughtExceptionHandler r2;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$2;

        r1 := @parameter0: android.support.test.runner.MonitoringInstrumentation;

        r2 := @parameter1: java.lang.Thread$UncaughtExceptionHandler;

        r0.<android.support.test.runner.MonitoringInstrumentation$2: android.support.test.runner.MonitoringInstrumentation this$0> = r1;

        r0.<android.support.test.runner.MonitoringInstrumentation$2: java.lang.Thread$UncaughtExceptionHandler val$standardHandler> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        android.support.test.runner.MonitoringInstrumentation$2 r0;
        java.lang.Thread r1;
        java.lang.Throwable r2;
        android.support.test.runner.MonitoringInstrumentation $r3;
        java.lang.Thread$UncaughtExceptionHandler $r4, $r5;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$2;

        r1 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<android.support.test.runner.MonitoringInstrumentation$2: android.support.test.runner.MonitoringInstrumentation this$0>;

        virtualinvoke $r3.<android.support.test.runner.MonitoringInstrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>(r1, r2);

        $r4 = r0.<android.support.test.runner.MonitoringInstrumentation$2: java.lang.Thread$UncaughtExceptionHandler val$standardHandler>;

        if null == $r4 goto label1;

        $r5 = r0.<android.support.test.runner.MonitoringInstrumentation$2: java.lang.Thread$UncaughtExceptionHandler val$standardHandler>;

        interfaceinvoke $r5.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r1, r2);

     label1:
        return;
    }

android.support.test.runner.MonitoringInstrumentation$3
<android.support.test.runner.MonitoringInstrumentation$3: android.content.Intent val$intent>
<android.support.test.runner.MonitoringInstrumentation$3: android.support.test.runner.MonitoringInstrumentation this$0>
    void <init>(android.support.test.runner.MonitoringInstrumentation, android.content.Intent)
    {
        android.support.test.runner.MonitoringInstrumentation$3 r0;
        android.support.test.runner.MonitoringInstrumentation r1;
        android.content.Intent r2;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$3;

        r1 := @parameter0: android.support.test.runner.MonitoringInstrumentation;

        r2 := @parameter1: android.content.Intent;

        r0.<android.support.test.runner.MonitoringInstrumentation$3: android.support.test.runner.MonitoringInstrumentation this$0> = r1;

        r0.<android.support.test.runner.MonitoringInstrumentation$3: android.content.Intent val$intent> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.app.Activity call()
    {
        android.support.test.runner.MonitoringInstrumentation$3 r0;
        android.content.Intent $r1;
        android.support.test.runner.MonitoringInstrumentation $r2;
        android.app.Activity $r3;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$3;

        $r2 = r0.<android.support.test.runner.MonitoringInstrumentation$3: android.support.test.runner.MonitoringInstrumentation this$0>;

        $r1 = r0.<android.support.test.runner.MonitoringInstrumentation$3: android.content.Intent val$intent>;

        $r3 = staticinvoke <android.support.test.runner.MonitoringInstrumentation: android.app.Activity access$101(android.support.test.runner.MonitoringInstrumentation,android.content.Intent)>($r2, $r1);

        return $r3;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        android.support.test.runner.MonitoringInstrumentation$3 r0;
        android.app.Activity $r1;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$3;

        $r1 = virtualinvoke r0.<android.support.test.runner.MonitoringInstrumentation$3: android.app.Activity call()>();

        return $r1;
    }

android.support.test.runner.MonitoringInstrumentation$4
<android.support.test.runner.MonitoringInstrumentation$4: android.content.Intent val$intent>
<android.support.test.runner.MonitoringInstrumentation$4: android.support.test.runner.MonitoringInstrumentation this$0>
    void <init>(android.support.test.runner.MonitoringInstrumentation, android.content.Intent)
    {
        android.support.test.runner.MonitoringInstrumentation$4 r0;
        android.support.test.runner.MonitoringInstrumentation r1;
        android.content.Intent r2;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$4;

        r1 := @parameter0: android.support.test.runner.MonitoringInstrumentation;

        r2 := @parameter1: android.content.Intent;

        r0.<android.support.test.runner.MonitoringInstrumentation$4: android.support.test.runner.MonitoringInstrumentation this$0> = r1;

        r0.<android.support.test.runner.MonitoringInstrumentation$4: android.content.Intent val$intent> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.app.Activity call()
    {
        android.support.test.runner.MonitoringInstrumentation$4 r0;
        android.content.Intent $r1;
        android.support.test.runner.MonitoringInstrumentation $r2;
        android.app.Activity $r3;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$4;

        $r2 = r0.<android.support.test.runner.MonitoringInstrumentation$4: android.support.test.runner.MonitoringInstrumentation this$0>;

        $r1 = r0.<android.support.test.runner.MonitoringInstrumentation$4: android.content.Intent val$intent>;

        $r3 = staticinvoke <android.support.test.runner.MonitoringInstrumentation: android.app.Activity access$101(android.support.test.runner.MonitoringInstrumentation,android.content.Intent)>($r2, $r1);

        return $r3;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        android.support.test.runner.MonitoringInstrumentation$4 r0;
        android.app.Activity $r1;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$4;

        $r1 = virtualinvoke r0.<android.support.test.runner.MonitoringInstrumentation$4: android.app.Activity call()>();

        return $r1;
    }

android.support.test.runner.MonitoringInstrumentation$5
<android.support.test.runner.MonitoringInstrumentation$5: java.lang.String val$className>
<android.support.test.runner.MonitoringInstrumentation$5: android.support.test.runner.MonitoringInstrumentation this$0>
    void <init>(android.support.test.runner.MonitoringInstrumentation, java.lang.String)
    {
        android.support.test.runner.MonitoringInstrumentation$5 r0;
        android.support.test.runner.MonitoringInstrumentation r1;
        java.lang.String r2;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$5;

        r1 := @parameter0: android.support.test.runner.MonitoringInstrumentation;

        r2 := @parameter1: java.lang.String;

        r0.<android.support.test.runner.MonitoringInstrumentation$5: android.support.test.runner.MonitoringInstrumentation this$0> = r1;

        r0.<android.support.test.runner.MonitoringInstrumentation$5: java.lang.String val$className> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.runner.MonitoringInstrumentation$5 r0;
        java.lang.reflect.Method r1;
        java.lang.String $r2;
        java.lang.Class[] $r3;
        java.lang.Object[] $r4;
        android.support.test.runner.MonitoringInstrumentation $r6;
        java.util.concurrent.atomic.AtomicBoolean $r7;
        java.lang.Throwable $r8, $r9, r12, r13;
        java.lang.RuntimeException $r10;
        java.lang.Class r11;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$5;

     label1:
        $r2 = r0.<android.support.test.runner.MonitoringInstrumentation$5: java.lang.String val$className>;

        r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

        $r3 = newarray (java.lang.Class)[0];

        r1 = virtualinvoke r11.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("installBridge", $r3);

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r6 = r0.<android.support.test.runner.MonitoringInstrumentation$5: android.support.test.runner.MonitoringInstrumentation this$0>;

        $r7 = staticinvoke <android.support.test.runner.MonitoringInstrumentation: java.util.concurrent.atomic.AtomicBoolean access$200(android.support.test.runner.MonitoringInstrumentation)>($r6);

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r12 = $r8;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstr", "No JSBridge.");

        goto label5;

     label4:
        $r9 := @caughtexception;

        r13 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("JSbridge is available at runtime, but calling it failed.", r13);

        throw $r10;

     label5:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

android.support.test.runner.MonitoringInstrumentation$ActivityFinisher
<android.support.test.runner.MonitoringInstrumentation$ActivityFinisher: android.support.test.runner.MonitoringInstrumentation this$0>
    public void <init>(android.support.test.runner.MonitoringInstrumentation)
    {
        android.support.test.runner.MonitoringInstrumentation$ActivityFinisher r0;
        android.support.test.runner.MonitoringInstrumentation r1;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$ActivityFinisher;

        r1 := @parameter0: android.support.test.runner.MonitoringInstrumentation;

        r0.<android.support.test.runner.MonitoringInstrumentation$ActivityFinisher: android.support.test.runner.MonitoringInstrumentation this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.support.test.runner.MonitoringInstrumentation$ActivityFinisher r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r20;
        android.support.test.runner.lifecycle.Stage $r4, $r5, r22;
        java.util.EnumSet $r6;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r14;
        int $i0;
        java.lang.String $r10, $r15;
        java.lang.Object $r11, $r16;
        android.support.test.runner.MonitoringInstrumentation $r17;
        android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl $r18;
        java.util.Collection $r19;
        java.util.Iterator r21, r23;
        android.app.Activity r24;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$ActivityFinisher;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        $r5 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage CREATED>;

        $r4 = <android.support.test.runner.lifecycle.Stage: android.support.test.runner.lifecycle.Stage PAUSED>;

        $r6 = staticinvoke <java.util.EnumSet: java.util.EnumSet range(java.lang.Enum,java.lang.Enum)>($r5, $r4);

        r21 = virtualinvoke $r6.<java.util.EnumSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r16 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (android.support.test.runner.lifecycle.Stage) $r16;

        $r17 = r0.<android.support.test.runner.MonitoringInstrumentation$ActivityFinisher: android.support.test.runner.MonitoringInstrumentation this$0>;

        $r18 = staticinvoke <android.support.test.runner.MonitoringInstrumentation: android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl access$200(android.support.test.runner.MonitoringInstrumentation)>($r17);

        $r19 = virtualinvoke $r18.<android.support.test.internal.runner.lifecycle.ActivityLifecycleMonitorImpl: java.util.Collection getActivitiesInStage(android.support.test.runner.lifecycle.Stage)>(r22);

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r19);

        goto label1;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Activities that are still in CREATED to PAUSED: ");

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstrumentation", $r10);

        r23 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r11 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (android.app.Activity) $r11;

        $z2 = virtualinvoke r24.<android.app.Activity: boolean isFinishing()>();

        if $z2 != 0 goto label7;

     label4:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finishing activity: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MonitoringInstrumentation", $r15);

        virtualinvoke r24.<android.app.Activity: void finish()>();

     label5:
        goto label7;

     label6:
        $r20 := @caughtexception;

        r2 = $r20;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MonitoringInstrumentation", "Failed to finish activity.", r2);

     label7:
        goto label3;

     label8:
        return;

        catch java.lang.RuntimeException from label4 to label5 with label6;
    }

android.support.test.runner.MonitoringInstrumentation$StubResultCallable
<android.support.test.runner.MonitoringInstrumentation$StubResultCallable: android.content.Intent mIntent>
    void <init>(android.content.Intent)
    {
        android.support.test.runner.MonitoringInstrumentation$StubResultCallable r0;
        android.content.Intent r1;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$StubResultCallable;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.runner.MonitoringInstrumentation$StubResultCallable: android.content.Intent mIntent> = r1;

        return;
    }

    public android.app.Instrumentation$ActivityResult call()
    {
        android.support.test.runner.MonitoringInstrumentation$StubResultCallable r0;
        android.support.test.runner.intent.IntentStubber $r1;
        android.content.Intent $r2;
        android.app.Instrumentation$ActivityResult $r3;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$StubResultCallable;

        $r1 = staticinvoke <android.support.test.runner.intent.IntentStubberRegistry: android.support.test.runner.intent.IntentStubber getInstance()>();

        $r2 = r0.<android.support.test.runner.MonitoringInstrumentation$StubResultCallable: android.content.Intent mIntent>;

        $r3 = interfaceinvoke $r1.<android.support.test.runner.intent.IntentStubber: android.app.Instrumentation$ActivityResult getActivityResultForIntent(android.content.Intent)>($r2);

        return $r3;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        android.support.test.runner.MonitoringInstrumentation$StubResultCallable r0;
        android.app.Instrumentation$ActivityResult $r1;

        r0 := @this: android.support.test.runner.MonitoringInstrumentation$StubResultCallable;

        $r1 = virtualinvoke r0.<android.support.test.runner.MonitoringInstrumentation$StubResultCallable: android.app.Instrumentation$ActivityResult call()>();

        return $r1;
    }

