android.support.test.runner.screenshot.BasicScreenCaptureProcessor
<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: int sAndroidRuntimeVersion>
<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String sAndroidDeviceName>
<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mTag>
<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter>
<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mDefaultFilenamePrefix>
<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.io.File mDefaultScreenshotPath>
    public void <init>()
    {
        android.support.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        java.io.File $r1, $r3;
        java.lang.String $r2;

        r0 := @this: android.support.test.runner.screenshot.BasicScreenCaptureProcessor;

        $r1 = new java.io.File;

        $r2 = <android.os.Environment: java.lang.String DIRECTORY_PICTURES>;

        $r3 = staticinvoke <android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>($r2);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "screenshots");

        specialinvoke r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: void <init>(java.io.File)>($r1);

        return;
    }

    void <init>(java.io.File)
    {
        android.support.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        java.io.File r1;

        r0 := @this: android.support.test.runner.screenshot.BasicScreenCaptureProcessor;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mTag> = "BasicScreenCaptureProcessor";

        r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter> = "-";

        r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mDefaultFilenamePrefix> = "screenshot";

        r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.io.File mDefaultScreenshotPath> = r1;

        return;
    }

    public java.lang.String process(android.support.test.runner.screenshot.ScreenCapture) throws java.io.IOException
    {
        android.support.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        android.support.test.runner.screenshot.ScreenCapture r1;
        java.lang.Throwable r2, r3, r4, $r23, $r25, $r26;
        java.lang.String $r5, $r6, $r8, $r9, $r10, $r22, $r24, $r27, $r28, r29, r30, r31, r32;
        android.graphics.Bitmap$CompressFormat $r7, $r19;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        boolean $z1, $z3;
        java.io.File $r15, r33, r34;
        java.io.BufferedOutputStream $r16, r35;
        java.io.FileOutputStream $r17;
        android.graphics.Bitmap $r18;
        java.io.IOException $r20;
        java.lang.Object[] $r21;

        r0 := @this: android.support.test.runner.screenshot.BasicScreenCaptureProcessor;

        r1 := @parameter0: android.support.test.runner.screenshot.ScreenCapture;

        $r5 = virtualinvoke r1.<android.support.test.runner.screenshot.ScreenCapture: java.lang.String getName()>();

        if $r5 != null goto label01;

        $r28 = virtualinvoke r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String getDefaultFilename()>();

        goto label02;

     label01:
        $r6 = virtualinvoke r1.<android.support.test.runner.screenshot.ScreenCapture: java.lang.String getName()>();

        $r28 = virtualinvoke r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String getFilename(java.lang.String)>($r6);

     label02:
        r29 = $r28;

        r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r29);

        $r7 = virtualinvoke r1.<android.support.test.runner.screenshot.ScreenCapture: android.graphics.Bitmap$CompressFormat getFormat()>();

        $r8 = virtualinvoke $r7.<android.graphics.Bitmap$CompressFormat: java.lang.String toString()>();

        r31 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30);

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i1 = 1 + $i0;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r31);

        $i2 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i3 = $i1 + $i2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        r32 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r33 = r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.io.File mDefaultScreenshotPath>;

        virtualinvoke r33.<java.io.File: boolean mkdirs()>();

        $z1 = virtualinvoke r33.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label03;

        $z3 = virtualinvoke r33.<java.io.File: boolean canWrite()>();

        if $z3 != 0 goto label03;

        $r20 = new java.io.IOException;

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = r33;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The directory %s does not exist and could not be created or is not writable.", $r21);

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r20;

     label03:
        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>(r33, r32);

        r34 = $r15;

        r35 = null;

     label04:
        $r16 = new java.io.BufferedOutputStream;

        $r17 = new java.io.FileOutputStream;

        specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.io.File)>(r34);

        specialinvoke $r16.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r17);

        r35 = $r16;

        $r18 = virtualinvoke r1.<android.support.test.runner.screenshot.ScreenCapture: android.graphics.Bitmap getBitmap()>();

        $r19 = virtualinvoke r1.<android.support.test.runner.screenshot.ScreenCapture: android.graphics.Bitmap$CompressFormat getFormat()>();

        virtualinvoke $r18.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r19, 100, r35);

        virtualinvoke r35.<java.io.BufferedOutputStream: void flush()>();

     label05:
        if r35 == null goto label06;

        virtualinvoke r35.<java.io.BufferedOutputStream: void close()>();

     label06:
        goto label13;

     label07:
        $r26 := @caughtexception;

        r2 = $r26;

        $r27 = r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r27, "Could not close output steam.", r2);

        goto label13;

     label08:
        $r25 := @caughtexception;

        r3 = $r25;

     label09:
        if r35 == null goto label10;

        virtualinvoke r35.<java.io.BufferedOutputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r23 := @caughtexception;

        r4 = $r23;

        $r24 = r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r24, "Could not close output steam.", r4);

     label12:
        throw r3;

     label13:
        return r32;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    protected java.lang.String getDefaultFilename()
    {
        android.support.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        java.lang.String r1, r2, r3, r4, $r5, $r6, $r7, $r8, $r15, $r16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: android.support.test.runner.screenshot.BasicScreenCaptureProcessor;

        r1 = r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mDefaultFilenamePrefix>;

        r2 = r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter>;

        r3 = <android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String sAndroidDeviceName>;

        r4 = r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter>;

        i0 = <android.support.test.runner.screenshot.BasicScreenCaptureProcessor: int sAndroidRuntimeVersion>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i2 = 11 + $i1;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $i5 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i6 = $i4 + $i5;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        $i7 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i8 = $i6 + $i7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>($i8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String getFilename(java.lang.String)>($r15);

        return $r16;
    }

    protected java.lang.String getFilename(java.lang.String)
    {
        android.support.test.runner.screenshot.BasicScreenCaptureProcessor r0;
        java.lang.String r1, r2, r3, $r5, $r6, $r7, $r12;
        java.util.UUID $r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @this: android.support.test.runner.screenshot.BasicScreenCaptureProcessor;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String mFileNameDelimiter>;

        $r4 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    static void setAndroidDeviceName(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        <android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String sAndroidDeviceName> = r0;

        return;
    }

    static void setAndroidRuntimeVersion(int)
    {
        int i0;

        i0 := @parameter0: int;

        <android.support.test.runner.screenshot.BasicScreenCaptureProcessor: int sAndroidRuntimeVersion> = i0;

        return;
    }

    static void <clinit>()
    {
        int $i0;
        java.lang.String $r0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        <android.support.test.runner.screenshot.BasicScreenCaptureProcessor: int sAndroidRuntimeVersion> = $i0;

        $r0 = <android.os.Build: java.lang.String DEVICE>;

        <android.support.test.runner.screenshot.BasicScreenCaptureProcessor: java.lang.String sAndroidDeviceName> = $r0;

        return;
    }

