androidx.work.multiprocess.RemoteWorkManagerImpl
<androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>
<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>
    void <init>(android.content.Context)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        android.content.Context r1;
        androidx.work.impl.WorkManagerImpl $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.work.multiprocess.IWorkManagerImpl$Stub: void <init>()>();

        $r2 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>(r1);

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager> = $r2;

        return;
    }

    public void enqueueWorkRequests(byte[], androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        java.util.List r3;
        androidx.work.Operation r4;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r5;
        androidx.work.multiprocess.RemoteWorkManagerImpl$1 r6, $r12;
        android.os.Parcelable$Creator $r7;
        java.lang.Object $r8;
        androidx.work.impl.WorkManagerImpl $r9, $r10;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r11;
        com.google.common.util.concurrent.ListenableFuture $r13;
        java.lang.Throwable $r14, r16;
        androidx.work.multiprocess.parcelable.ParcelableWorkRequests r15;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r7 = <androidx.work.multiprocess.parcelable.ParcelableWorkRequests: android.os.Parcelable$Creator CREATOR>;

        $r8 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: java.lang.Object unmarshall(byte[],android.os.Parcelable$Creator)>(r1, $r7);

        r15 = (androidx.work.multiprocess.parcelable.ParcelableWorkRequests) $r8;

        r3 = virtualinvoke r15.<androidx.work.multiprocess.parcelable.ParcelableWorkRequests: java.util.List getRequests()>();

        $r9 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r4 = virtualinvoke $r9.<androidx.work.impl.WorkManagerImpl: androidx.work.Operation enqueue(java.util.List)>(r3);

        $r10 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r11 = virtualinvoke $r10.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r5 = interfaceinvoke $r11.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r12 = new androidx.work.multiprocess.RemoteWorkManagerImpl$1;

        $r13 = interfaceinvoke r4.<androidx.work.Operation: com.google.common.util.concurrent.ListenableFuture getResult()>();

        specialinvoke $r12.<androidx.work.multiprocess.RemoteWorkManagerImpl$1: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r5, r2, $r13);

        r6 = $r12;

        virtualinvoke r6.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r16 = $r14;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r16);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void enqueueContinuation(byte[], androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.impl.WorkContinuationImpl r3;
        androidx.work.Operation r4;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r5;
        androidx.work.multiprocess.RemoteWorkManagerImpl$2 r6, $r12;
        android.os.Parcelable$Creator $r7;
        java.lang.Object $r8;
        androidx.work.impl.WorkManagerImpl $r9, $r10;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r11;
        com.google.common.util.concurrent.ListenableFuture $r13;
        java.lang.Throwable $r14, r16;
        androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl r15;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r7 = <androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: android.os.Parcelable$Creator CREATOR>;

        $r8 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: java.lang.Object unmarshall(byte[],android.os.Parcelable$Creator)>(r1, $r7);

        r15 = (androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl) $r8;

        $r9 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r3 = virtualinvoke r15.<androidx.work.multiprocess.parcelable.ParcelableWorkContinuationImpl: androidx.work.impl.WorkContinuationImpl toWorkContinuationImpl(androidx.work.impl.WorkManagerImpl)>($r9);

        r4 = virtualinvoke r3.<androidx.work.impl.WorkContinuationImpl: androidx.work.Operation enqueue()>();

        $r10 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r11 = virtualinvoke $r10.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r5 = interfaceinvoke $r11.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r12 = new androidx.work.multiprocess.RemoteWorkManagerImpl$2;

        $r13 = interfaceinvoke r4.<androidx.work.Operation: com.google.common.util.concurrent.ListenableFuture getResult()>();

        specialinvoke $r12.<androidx.work.multiprocess.RemoteWorkManagerImpl$2: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r5, r2, $r13);

        r6 = $r12;

        virtualinvoke r6.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r16 = $r14;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r16);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void cancelWorkById(java.lang.String, androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r3;
        androidx.work.multiprocess.RemoteWorkManagerImpl$3 r4, $r9;
        androidx.work.impl.WorkManagerImpl $r5, $r7;
        java.util.UUID $r6;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r8;
        com.google.common.util.concurrent.ListenableFuture $r10;
        java.lang.Throwable $r11, r13;
        androidx.work.Operation r12;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r6 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>(r1);

        r12 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.Operation cancelWorkById(java.util.UUID)>($r6);

        $r7 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r8 = virtualinvoke $r7.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r3 = interfaceinvoke $r8.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r9 = new androidx.work.multiprocess.RemoteWorkManagerImpl$3;

        $r10 = interfaceinvoke r12.<androidx.work.Operation: com.google.common.util.concurrent.ListenableFuture getResult()>();

        specialinvoke $r9.<androidx.work.multiprocess.RemoteWorkManagerImpl$3: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r3, r2, $r10);

        r4 = $r9;

        virtualinvoke r4.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r13 = $r11;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r13);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void cancelAllWorkByTag(java.lang.String, androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r3;
        androidx.work.multiprocess.RemoteWorkManagerImpl$4 r4, $r8;
        androidx.work.impl.WorkManagerImpl $r5, $r6;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r7;
        com.google.common.util.concurrent.ListenableFuture $r9;
        java.lang.Throwable $r10, r12;
        androidx.work.Operation r11;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r11 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.Operation cancelAllWorkByTag(java.lang.String)>(r1);

        $r6 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r7 = virtualinvoke $r6.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r3 = interfaceinvoke $r7.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r8 = new androidx.work.multiprocess.RemoteWorkManagerImpl$4;

        $r9 = interfaceinvoke r11.<androidx.work.Operation: com.google.common.util.concurrent.ListenableFuture getResult()>();

        specialinvoke $r8.<androidx.work.multiprocess.RemoteWorkManagerImpl$4: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r3, r2, $r9);

        r4 = $r8;

        virtualinvoke r4.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r12 = $r10;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r12);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void cancelUniqueWork(java.lang.String, androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        java.lang.String r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r3;
        androidx.work.multiprocess.RemoteWorkManagerImpl$5 r4, $r8;
        androidx.work.impl.WorkManagerImpl $r5, $r6;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r7;
        com.google.common.util.concurrent.ListenableFuture $r9;
        java.lang.Throwable $r10, r12;
        androidx.work.Operation r11;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r11 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.Operation cancelUniqueWork(java.lang.String)>(r1);

        $r6 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r7 = virtualinvoke $r6.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r3 = interfaceinvoke $r7.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r8 = new androidx.work.multiprocess.RemoteWorkManagerImpl$5;

        $r9 = interfaceinvoke r11.<androidx.work.Operation: com.google.common.util.concurrent.ListenableFuture getResult()>();

        specialinvoke $r8.<androidx.work.multiprocess.RemoteWorkManagerImpl$5: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r3, r2, $r9);

        r4 = $r8;

        virtualinvoke r4.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r12 = $r10;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r12);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void cancelAllWork(androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        androidx.work.multiprocess.IWorkManagerImplCallback r1;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r2;
        androidx.work.multiprocess.RemoteWorkManagerImpl$6 r3, $r7;
        androidx.work.impl.WorkManagerImpl $r4, $r5;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r6;
        com.google.common.util.concurrent.ListenableFuture $r8;
        java.lang.Throwable $r9, r11;
        androidx.work.Operation r10;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r4 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r10 = virtualinvoke $r4.<androidx.work.impl.WorkManagerImpl: androidx.work.Operation cancelAllWork()>();

        $r5 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r6 = virtualinvoke $r5.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r2 = interfaceinvoke $r6.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r7 = new androidx.work.multiprocess.RemoteWorkManagerImpl$6;

        $r8 = interfaceinvoke r10.<androidx.work.Operation: com.google.common.util.concurrent.ListenableFuture getResult()>();

        specialinvoke $r7.<androidx.work.multiprocess.RemoteWorkManagerImpl$6: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r2, r1, $r8);

        r3 = $r7;

        virtualinvoke r3.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r11 = $r9;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r1, r11);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void queryWorkInfo(byte[], androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r3;
        com.google.common.util.concurrent.ListenableFuture r4;
        androidx.work.multiprocess.RemoteWorkManagerImpl$7 r5, $r12;
        android.os.Parcelable$Creator $r6;
        java.lang.Object $r7;
        androidx.work.impl.WorkManagerImpl $r8, $r10;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r9;
        androidx.work.WorkQuery $r11;
        java.lang.Throwable $r13, r15;
        androidx.work.multiprocess.parcelable.ParcelableWorkQuery r14;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r6 = <androidx.work.multiprocess.parcelable.ParcelableWorkQuery: android.os.Parcelable$Creator CREATOR>;

        $r7 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: java.lang.Object unmarshall(byte[],android.os.Parcelable$Creator)>(r1, $r6);

        r14 = (androidx.work.multiprocess.parcelable.ParcelableWorkQuery) $r7;

        $r8 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r9 = virtualinvoke $r8.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r3 = interfaceinvoke $r9.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r10 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r11 = virtualinvoke r14.<androidx.work.multiprocess.parcelable.ParcelableWorkQuery: androidx.work.WorkQuery getWorkQuery()>();

        r4 = virtualinvoke $r10.<androidx.work.impl.WorkManagerImpl: com.google.common.util.concurrent.ListenableFuture getWorkInfos(androidx.work.WorkQuery)>($r11);

        $r12 = new androidx.work.multiprocess.RemoteWorkManagerImpl$7;

        specialinvoke $r12.<androidx.work.multiprocess.RemoteWorkManagerImpl$7: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r3, r2, r4);

        r5 = $r12;

        virtualinvoke r5.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        r15 = $r13;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r15);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setProgress(byte[], androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        android.content.Context r3;
        androidx.work.impl.utils.taskexecutor.TaskExecutor r4;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r5;
        androidx.work.impl.WorkDatabase r6;
        androidx.work.impl.utils.WorkProgressUpdater r7, $r15;
        com.google.common.util.concurrent.ListenableFuture r8;
        androidx.work.multiprocess.RemoteWorkManagerImpl$8 r9, $r19;
        android.os.Parcelable$Creator $r10;
        java.lang.Object $r11;
        androidx.work.impl.WorkManagerImpl $r12, $r13, $r14;
        java.lang.String $r16;
        java.util.UUID $r17;
        androidx.work.Data $r18;
        java.lang.Throwable $r20, r22;
        androidx.work.multiprocess.parcelable.ParcelableUpdateRequest r21;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r10 = <androidx.work.multiprocess.parcelable.ParcelableUpdateRequest: android.os.Parcelable$Creator CREATOR>;

        $r11 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: java.lang.Object unmarshall(byte[],android.os.Parcelable$Creator)>(r1, $r10);

        r21 = (androidx.work.multiprocess.parcelable.ParcelableUpdateRequest) $r11;

        $r12 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r3 = virtualinvoke $r12.<androidx.work.impl.WorkManagerImpl: android.content.Context getApplicationContext()>();

        $r13 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r4 = virtualinvoke $r13.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r5 = interfaceinvoke r4.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r14 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r6 = virtualinvoke $r14.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r15 = new androidx.work.impl.utils.WorkProgressUpdater;

        specialinvoke $r15.<androidx.work.impl.utils.WorkProgressUpdater: void <init>(androidx.work.impl.WorkDatabase,androidx.work.impl.utils.taskexecutor.TaskExecutor)>(r6, r4);

        r7 = $r15;

        $r16 = virtualinvoke r21.<androidx.work.multiprocess.parcelable.ParcelableUpdateRequest: java.lang.String getId()>();

        $r17 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>($r16);

        $r18 = virtualinvoke r21.<androidx.work.multiprocess.parcelable.ParcelableUpdateRequest: androidx.work.Data getData()>();

        r8 = virtualinvoke r7.<androidx.work.impl.utils.WorkProgressUpdater: com.google.common.util.concurrent.ListenableFuture updateProgress(android.content.Context,java.util.UUID,androidx.work.Data)>(r3, $r17, $r18);

        $r19 = new androidx.work.multiprocess.RemoteWorkManagerImpl$8;

        specialinvoke $r19.<androidx.work.multiprocess.RemoteWorkManagerImpl$8: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r5, r2, r8);

        r9 = $r19;

        virtualinvoke r9.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        r22 = $r20;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r22);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setForegroundAsync(byte[], androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        byte[] r1;
        androidx.work.multiprocess.IWorkManagerImplCallback r2;
        androidx.work.impl.utils.taskexecutor.TaskExecutor r3;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r4;
        androidx.work.impl.utils.WorkForegroundUpdater r5, $r11;
        com.google.common.util.concurrent.ListenableFuture r6;
        androidx.work.multiprocess.RemoteWorkManagerImpl$9 r7, $r21;
        android.os.Parcelable$Creator $r8;
        java.lang.Object $r9;
        androidx.work.impl.WorkManagerImpl $r10, $r12, $r14, $r16;
        androidx.work.impl.WorkDatabase $r13;
        androidx.work.impl.Processor $r15;
        android.content.Context $r17;
        java.lang.String $r18;
        java.util.UUID $r19;
        androidx.work.ForegroundInfo $r20;
        java.lang.Throwable $r22, r24;
        androidx.work.multiprocess.parcelable.ParcelableForegroundRequestInfo r23;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r8 = <androidx.work.multiprocess.parcelable.ParcelableForegroundRequestInfo: android.os.Parcelable$Creator CREATOR>;

        $r9 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: java.lang.Object unmarshall(byte[],android.os.Parcelable$Creator)>(r1, $r8);

        r23 = (androidx.work.multiprocess.parcelable.ParcelableForegroundRequestInfo) $r9;

        $r10 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r3 = virtualinvoke $r10.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r4 = interfaceinvoke r3.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r11 = new androidx.work.impl.utils.WorkForegroundUpdater;

        $r12 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r13 = virtualinvoke $r12.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkDatabase getWorkDatabase()>();

        $r14 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r15 = virtualinvoke $r14.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.Processor getProcessor()>();

        specialinvoke $r11.<androidx.work.impl.utils.WorkForegroundUpdater: void <init>(androidx.work.impl.WorkDatabase,androidx.work.impl.foreground.ForegroundProcessor,androidx.work.impl.utils.taskexecutor.TaskExecutor)>($r13, $r15, r3);

        r5 = $r11;

        $r16 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r17 = virtualinvoke $r16.<androidx.work.impl.WorkManagerImpl: android.content.Context getApplicationContext()>();

        $r18 = virtualinvoke r23.<androidx.work.multiprocess.parcelable.ParcelableForegroundRequestInfo: java.lang.String getId()>();

        $r19 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>($r18);

        $r20 = virtualinvoke r23.<androidx.work.multiprocess.parcelable.ParcelableForegroundRequestInfo: androidx.work.ForegroundInfo getForegroundInfo()>();

        r6 = virtualinvoke r5.<androidx.work.impl.utils.WorkForegroundUpdater: com.google.common.util.concurrent.ListenableFuture setForegroundAsync(android.content.Context,java.util.UUID,androidx.work.ForegroundInfo)>($r17, $r19, $r20);

        $r21 = new androidx.work.multiprocess.RemoteWorkManagerImpl$9;

        specialinvoke $r21.<androidx.work.multiprocess.RemoteWorkManagerImpl$9: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r4, r2, r6);

        r7 = $r21;

        virtualinvoke r7.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

        r24 = $r22;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r2, r24);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void updateUniquePeriodicWorkRequest(java.lang.String, byte[], androidx.work.multiprocess.IWorkManagerImplCallback)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl r0;
        java.lang.String r1;
        byte[] r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        androidx.work.WorkRequest r4;
        androidx.work.Operation r5;
        androidx.work.impl.utils.taskexecutor.SerialExecutor r6;
        androidx.work.multiprocess.RemoteWorkManagerImpl$10 r7, $r13;
        android.os.Parcelable$Creator $r8;
        java.lang.Object $r9;
        androidx.work.impl.WorkManagerImpl $r10, $r11;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r12;
        com.google.common.util.concurrent.ListenableFuture $r14;
        java.lang.Throwable $r15, r17;
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest r16;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

     label1:
        $r8 = <androidx.work.multiprocess.parcelable.ParcelableWorkRequest: android.os.Parcelable$Creator CREATOR>;

        $r9 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: java.lang.Object unmarshall(byte[],android.os.Parcelable$Creator)>(r2, $r8);

        r16 = (androidx.work.multiprocess.parcelable.ParcelableWorkRequest) $r9;

        r4 = virtualinvoke r16.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: androidx.work.WorkRequest getWorkRequest()>();

        $r10 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        r5 = staticinvoke <androidx.work.impl.WorkerUpdater: androidx.work.Operation enqueueUniquelyNamedPeriodic(androidx.work.impl.WorkManagerImpl,java.lang.String,androidx.work.WorkRequest)>($r10, r1, r4);

        $r11 = r0.<androidx.work.multiprocess.RemoteWorkManagerImpl: androidx.work.impl.WorkManagerImpl mWorkManager>;

        $r12 = virtualinvoke $r11.<androidx.work.impl.WorkManagerImpl: androidx.work.impl.utils.taskexecutor.TaskExecutor getWorkTaskExecutor()>();

        r6 = interfaceinvoke $r12.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r13 = new androidx.work.multiprocess.RemoteWorkManagerImpl$10;

        $r14 = interfaceinvoke r5.<androidx.work.Operation: com.google.common.util.concurrent.ListenableFuture getResult()>();

        specialinvoke $r13.<androidx.work.multiprocess.RemoteWorkManagerImpl$10: void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl,java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r0, r6, r3, $r14);

        r7 = $r13;

        virtualinvoke r7.<androidx.work.multiprocess.ListenableCallback: void dispatchCallbackSafely()>();

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        r17 = $r15;

        staticinvoke <androidx.work.multiprocess.ListenableCallback$ListenableCallbackRunnable: void reportFailure(androidx.work.multiprocess.IWorkManagerImplCallback,java.lang.Throwable)>(r3, r17);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY> = $r0;

        return;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$1
<androidx.work.multiprocess.RemoteWorkManagerImpl$1: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$1 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$1;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$1: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(androidx.work.Operation$State$SUCCESS)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$1 r0;
        androidx.work.Operation$State$SUCCESS r1;
        byte[] $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$1;

        r1 := @parameter0: androidx.work.Operation$State$SUCCESS;

        $r2 = <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>;

        return $r2;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$1 r0;
        java.lang.Object r1;
        androidx.work.Operation$State$SUCCESS $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.work.Operation$State$SUCCESS) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$1: byte[] toByteArray(androidx.work.Operation$State$SUCCESS)>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$10
<androidx.work.multiprocess.RemoteWorkManagerImpl$10: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$10 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$10;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$10: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(androidx.work.Operation$State$SUCCESS)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$10 r0;
        androidx.work.Operation$State$SUCCESS r1;
        byte[] $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$10;

        r1 := @parameter0: androidx.work.Operation$State$SUCCESS;

        $r2 = <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>;

        return $r2;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$10 r0;
        java.lang.Object r1;
        androidx.work.Operation$State$SUCCESS $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$10;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.work.Operation$State$SUCCESS) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$10: byte[] toByteArray(androidx.work.Operation$State$SUCCESS)>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$2
<androidx.work.multiprocess.RemoteWorkManagerImpl$2: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$2 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$2;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$2: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(androidx.work.Operation$State$SUCCESS)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$2 r0;
        androidx.work.Operation$State$SUCCESS r1;
        byte[] $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$2;

        r1 := @parameter0: androidx.work.Operation$State$SUCCESS;

        $r2 = <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>;

        return $r2;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$2 r0;
        java.lang.Object r1;
        androidx.work.Operation$State$SUCCESS $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.work.Operation$State$SUCCESS) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$2: byte[] toByteArray(androidx.work.Operation$State$SUCCESS)>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$3
<androidx.work.multiprocess.RemoteWorkManagerImpl$3: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$3 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$3;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$3: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(androidx.work.Operation$State$SUCCESS)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$3 r0;
        androidx.work.Operation$State$SUCCESS r1;
        byte[] $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$3;

        r1 := @parameter0: androidx.work.Operation$State$SUCCESS;

        $r2 = <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>;

        return $r2;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$3 r0;
        java.lang.Object r1;
        androidx.work.Operation$State$SUCCESS $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.work.Operation$State$SUCCESS) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$3: byte[] toByteArray(androidx.work.Operation$State$SUCCESS)>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$4
<androidx.work.multiprocess.RemoteWorkManagerImpl$4: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$4 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$4;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$4: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(androidx.work.Operation$State$SUCCESS)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$4 r0;
        androidx.work.Operation$State$SUCCESS r1;
        byte[] $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$4;

        r1 := @parameter0: androidx.work.Operation$State$SUCCESS;

        $r2 = <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>;

        return $r2;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$4 r0;
        java.lang.Object r1;
        androidx.work.Operation$State$SUCCESS $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.work.Operation$State$SUCCESS) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$4: byte[] toByteArray(androidx.work.Operation$State$SUCCESS)>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$5
<androidx.work.multiprocess.RemoteWorkManagerImpl$5: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$5 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$5;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$5: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(androidx.work.Operation$State$SUCCESS)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$5 r0;
        androidx.work.Operation$State$SUCCESS r1;
        byte[] $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$5;

        r1 := @parameter0: androidx.work.Operation$State$SUCCESS;

        $r2 = <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>;

        return $r2;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$5 r0;
        java.lang.Object r1;
        androidx.work.Operation$State$SUCCESS $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$5;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.work.Operation$State$SUCCESS) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$5: byte[] toByteArray(androidx.work.Operation$State$SUCCESS)>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$6
<androidx.work.multiprocess.RemoteWorkManagerImpl$6: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$6 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$6;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$6: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(androidx.work.Operation$State$SUCCESS)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$6 r0;
        androidx.work.Operation$State$SUCCESS r1;
        byte[] $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$6;

        r1 := @parameter0: androidx.work.Operation$State$SUCCESS;

        $r2 = <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>;

        return $r2;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$6 r0;
        java.lang.Object r1;
        androidx.work.Operation$State$SUCCESS $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$6;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.work.Operation$State$SUCCESS) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$6: byte[] toByteArray(androidx.work.Operation$State$SUCCESS)>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$7
<androidx.work.multiprocess.RemoteWorkManagerImpl$7: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$7 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$7;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$7: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(java.util.List)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$7 r0;
        java.util.List r1;
        androidx.work.multiprocess.parcelable.ParcelableWorkInfos r2, $r3;
        byte[] $r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$7;

        r1 := @parameter0: java.util.List;

        $r3 = new androidx.work.multiprocess.parcelable.ParcelableWorkInfos;

        specialinvoke $r3.<androidx.work.multiprocess.parcelable.ParcelableWorkInfos: void <init>(java.util.List)>(r1);

        r2 = $r3;

        $r4 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelConverters: byte[] marshall(android.os.Parcelable)>(r2);

        return $r4;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$7 r0;
        java.lang.Object r1;
        java.util.List $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$7;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.List) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$7: byte[] toByteArray(java.util.List)>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$8
<androidx.work.multiprocess.RemoteWorkManagerImpl$8: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$8 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$8;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$8: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(java.lang.Void)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$8 r0;
        java.lang.Void r1;
        byte[] $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$8;

        r1 := @parameter0: java.lang.Void;

        $r2 = <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>;

        return $r2;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$8 r0;
        java.lang.Object r1;
        java.lang.Void $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$8;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$8: byte[] toByteArray(java.lang.Void)>($r2);

        return $r3;
    }

androidx.work.multiprocess.RemoteWorkManagerImpl$9
<androidx.work.multiprocess.RemoteWorkManagerImpl$9: androidx.work.multiprocess.RemoteWorkManagerImpl this$0>
    void <init>(androidx.work.multiprocess.RemoteWorkManagerImpl, java.util.concurrent.Executor, androidx.work.multiprocess.IWorkManagerImplCallback, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$9 r0;
        androidx.work.multiprocess.RemoteWorkManagerImpl r1;
        java.util.concurrent.Executor r2;
        androidx.work.multiprocess.IWorkManagerImplCallback r3;
        com.google.common.util.concurrent.ListenableFuture r4;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$9;

        r1 := @parameter0: androidx.work.multiprocess.RemoteWorkManagerImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.work.multiprocess.IWorkManagerImplCallback;

        r4 := @parameter3: com.google.common.util.concurrent.ListenableFuture;

        r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$9: androidx.work.multiprocess.RemoteWorkManagerImpl this$0> = r1;

        specialinvoke r0.<androidx.work.multiprocess.ListenableCallback: void <init>(java.util.concurrent.Executor,androidx.work.multiprocess.IWorkManagerImplCallback,com.google.common.util.concurrent.ListenableFuture)>(r2, r3, r4);

        return;
    }

    public byte[] toByteArray(java.lang.Void)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$9 r0;
        java.lang.Void r1;
        byte[] $r2;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$9;

        r1 := @parameter0: java.lang.Void;

        $r2 = <androidx.work.multiprocess.RemoteWorkManagerImpl: byte[] sEMPTY>;

        return $r2;
    }

    public volatile byte[] toByteArray(java.lang.Object)
    {
        androidx.work.multiprocess.RemoteWorkManagerImpl$9 r0;
        java.lang.Object r1;
        java.lang.Void $r2;
        byte[] $r3;

        r0 := @this: androidx.work.multiprocess.RemoteWorkManagerImpl$9;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        $r3 = virtualinvoke r0.<androidx.work.multiprocess.RemoteWorkManagerImpl$9: byte[] toByteArray(java.lang.Void)>($r2);

        return $r3;
    }

