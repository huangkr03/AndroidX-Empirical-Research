androidx.camera.view.transform.CoordinateTransform
<androidx.camera.view.transform.CoordinateTransform: java.lang.String TAG>
<androidx.camera.view.transform.CoordinateTransform: java.lang.String MISMATCH_MSG>
<androidx.camera.view.transform.CoordinateTransform: android.graphics.Matrix mMatrix>
    public void <init>(androidx.camera.view.transform.OutputTransform, androidx.camera.view.transform.OutputTransform)
    {
        androidx.camera.view.transform.CoordinateTransform r0;
        androidx.camera.view.transform.OutputTransform r1, r2;
        android.util.Size $r3, $r4, $r11, $r12;
        boolean $z0, $z1;
        android.graphics.Matrix $r5, $r6, $r7, $r8, $r9;
        java.lang.Object[] $r10;
        java.lang.String $r13;

        r0 := @this: androidx.camera.view.transform.CoordinateTransform;

        r1 := @parameter0: androidx.camera.view.transform.OutputTransform;

        r2 := @parameter1: androidx.camera.view.transform.OutputTransform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r1.<androidx.camera.view.transform.OutputTransform: android.util.Size getViewPortSize()>();

        $r4 = virtualinvoke r2.<androidx.camera.view.transform.OutputTransform: android.util.Size getViewPortSize()>();

        $z0 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: boolean isAspectRatioMatchingWithRoundingError(android.util.Size,boolean,android.util.Size,boolean)>($r3, 0, $r4, 0);

        if $z0 != 0 goto label1;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = virtualinvoke r1.<androidx.camera.view.transform.OutputTransform: android.util.Size getViewPortSize()>();

        $r10[0] = $r11;

        $r12 = virtualinvoke r2.<androidx.camera.view.transform.OutputTransform: android.util.Size getViewPortSize()>();

        $r10[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The source viewport (%s) does not match the target viewport (%s). Please make sure they are associated with the same Viewport.", $r10);

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("CoordinateTransform", $r13);

     label1:
        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        r0.<androidx.camera.view.transform.CoordinateTransform: android.graphics.Matrix mMatrix> = $r5;

        $r6 = virtualinvoke r1.<androidx.camera.view.transform.OutputTransform: android.graphics.Matrix getMatrix()>();

        $r7 = r0.<androidx.camera.view.transform.CoordinateTransform: android.graphics.Matrix mMatrix>;

        $z1 = virtualinvoke $r6.<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>($r7);

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "The source transform cannot be inverted");

        $r8 = r0.<androidx.camera.view.transform.CoordinateTransform: android.graphics.Matrix mMatrix>;

        $r9 = virtualinvoke r2.<androidx.camera.view.transform.OutputTransform: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r8.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>($r9);

        return;
    }

    public void transform(android.graphics.Matrix)
    {
        androidx.camera.view.transform.CoordinateTransform r0;
        android.graphics.Matrix r1, $r2;

        r0 := @this: androidx.camera.view.transform.CoordinateTransform;

        r1 := @parameter0: android.graphics.Matrix;

        $r2 = r0.<androidx.camera.view.transform.CoordinateTransform: android.graphics.Matrix mMatrix>;

        virtualinvoke r1.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r2);

        return;
    }

    public void mapPoints(float[])
    {
        androidx.camera.view.transform.CoordinateTransform r0;
        float[] r1;
        android.graphics.Matrix $r2;

        r0 := @this: androidx.camera.view.transform.CoordinateTransform;

        r1 := @parameter0: float[];

        $r2 = r0.<androidx.camera.view.transform.CoordinateTransform: android.graphics.Matrix mMatrix>;

        virtualinvoke $r2.<android.graphics.Matrix: void mapPoints(float[])>(r1);

        return;
    }

    public void mapPoint(android.graphics.PointF)
    {
        androidx.camera.view.transform.CoordinateTransform r0;
        android.graphics.PointF r1;
        float[] r2, $r3;
        float $f0, $f1, $f2, $f3;
        android.graphics.Matrix $r4;

        r0 := @this: androidx.camera.view.transform.CoordinateTransform;

        r1 := @parameter0: android.graphics.PointF;

        $r3 = newarray (float)[2];

        $f0 = r1.<android.graphics.PointF: float x>;

        $r3[0] = $f0;

        $f1 = r1.<android.graphics.PointF: float y>;

        $r3[1] = $f1;

        r2 = $r3;

        $r4 = r0.<androidx.camera.view.transform.CoordinateTransform: android.graphics.Matrix mMatrix>;

        virtualinvoke $r4.<android.graphics.Matrix: void mapPoints(float[])>(r2);

        $f2 = r2[0];

        r1.<android.graphics.PointF: float x> = $f2;

        $f3 = r2[1];

        r1.<android.graphics.PointF: float y> = $f3;

        return;
    }

    public void mapRect(android.graphics.RectF)
    {
        androidx.camera.view.transform.CoordinateTransform r0;
        android.graphics.RectF r1;
        android.graphics.Matrix $r2;

        r0 := @this: androidx.camera.view.transform.CoordinateTransform;

        r1 := @parameter0: android.graphics.RectF;

        $r2 = r0.<androidx.camera.view.transform.CoordinateTransform: android.graphics.Matrix mMatrix>;

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r1);

        return;
    }

