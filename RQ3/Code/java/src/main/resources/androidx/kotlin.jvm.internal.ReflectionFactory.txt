kotlin.jvm.internal.ReflectionFactory
<kotlin.jvm.internal.ReflectionFactory: java.lang.String KOTLIN_JVM_FUNCTIONS>
    public void <init>()
    {
        kotlin.jvm.internal.ReflectionFactory $r0;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public kotlin.reflect.KClass createKotlinClass(java.lang.Class)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        kotlin.jvm.internal.ClassReference $r2;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new kotlin.jvm.internal.ClassReference;

        specialinvoke $r2.<kotlin.jvm.internal.ClassReference: void <init>(java.lang.Class)>($r1);

        return $r2;
    }

    public kotlin.reflect.KClass createKotlinClass(java.lang.Class, java.lang.String)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        kotlin.jvm.internal.ClassReference $r3;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 = new kotlin.jvm.internal.ClassReference;

        specialinvoke $r3.<kotlin.jvm.internal.ClassReference: void <init>(java.lang.Class)>($r1);

        return $r3;
    }

    public kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.FunctionReference $r1;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: kotlin.jvm.internal.FunctionReference;

        return $r1;
    }

    public kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        kotlin.jvm.internal.ClassReference $r2;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 = new kotlin.jvm.internal.ClassReference;

        specialinvoke $r2.<kotlin.jvm.internal.ClassReference: void <init>(java.lang.Class)>($r1);

        return $r2;
    }

    public kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class, java.lang.String)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        kotlin.jvm.internal.ClassReference $r3;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 = new kotlin.jvm.internal.ClassReference;

        specialinvoke $r3.<kotlin.jvm.internal.ClassReference: void <init>(java.lang.Class)>($r1);

        return $r3;
    }

    public kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class, java.lang.String)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        kotlin.jvm.internal.PackageReference $r3;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 = new kotlin.jvm.internal.PackageReference;

        specialinvoke $r3.<kotlin.jvm.internal.PackageReference: void <init>(java.lang.Class,java.lang.String)>($r1, $r2);

        return $r3;
    }

    public kotlin.reflect.KType mutableCollectionType(kotlin.reflect.KType)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.TypeReference $r1, $r3;
        kotlin.reflect.KType $r2;
        kotlin.reflect.KClassifier $r4;
        java.util.List $r5;
        int $i0;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r2 := @parameter0: kotlin.reflect.KType;

        $r3 = (kotlin.jvm.internal.TypeReference) $r2;

        $r1 = new kotlin.jvm.internal.TypeReference;

        $r4 = interfaceinvoke $r2.<kotlin.reflect.KType: kotlin.reflect.KClassifier getClassifier()>();

        $r5 = interfaceinvoke $r2.<kotlin.reflect.KType: java.util.List getArguments()>();

        $r2 = virtualinvoke $r3.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KType getPlatformTypeUpperBound$kotlin_stdlib()>();

        $i0 = virtualinvoke $r3.<kotlin.jvm.internal.TypeReference: int getFlags$kotlin_stdlib()>();

        $i0 = $i0 | 2;

        specialinvoke $r1.<kotlin.jvm.internal.TypeReference: void <init>(kotlin.reflect.KClassifier,java.util.List,kotlin.reflect.KType,int)>($r4, $r5, $r2, $i0);

        return $r1;
    }

    public kotlin.reflect.KMutableProperty0 mutableProperty0(kotlin.jvm.internal.MutablePropertyReference0)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.MutablePropertyReference0 $r1;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: kotlin.jvm.internal.MutablePropertyReference0;

        return $r1;
    }

    public kotlin.reflect.KMutableProperty1 mutableProperty1(kotlin.jvm.internal.MutablePropertyReference1)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.MutablePropertyReference1 $r1;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: kotlin.jvm.internal.MutablePropertyReference1;

        return $r1;
    }

    public kotlin.reflect.KMutableProperty2 mutableProperty2(kotlin.jvm.internal.MutablePropertyReference2)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.MutablePropertyReference2 $r1;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: kotlin.jvm.internal.MutablePropertyReference2;

        return $r1;
    }

    public kotlin.reflect.KType nothingType(kotlin.reflect.KType)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.TypeReference $r1, $r3;
        kotlin.reflect.KType $r2;
        kotlin.reflect.KClassifier $r4;
        java.util.List $r5;
        int $i0;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r2 := @parameter0: kotlin.reflect.KType;

        $r3 = (kotlin.jvm.internal.TypeReference) $r2;

        $r1 = new kotlin.jvm.internal.TypeReference;

        $r4 = interfaceinvoke $r2.<kotlin.reflect.KType: kotlin.reflect.KClassifier getClassifier()>();

        $r5 = interfaceinvoke $r2.<kotlin.reflect.KType: java.util.List getArguments()>();

        $r2 = virtualinvoke $r3.<kotlin.jvm.internal.TypeReference: kotlin.reflect.KType getPlatformTypeUpperBound$kotlin_stdlib()>();

        $i0 = virtualinvoke $r3.<kotlin.jvm.internal.TypeReference: int getFlags$kotlin_stdlib()>();

        $i0 = $i0 | 4;

        specialinvoke $r1.<kotlin.jvm.internal.TypeReference: void <init>(kotlin.reflect.KClassifier,java.util.List,kotlin.reflect.KType,int)>($r4, $r5, $r2, $i0);

        return $r1;
    }

    public kotlin.reflect.KType platformType(kotlin.reflect.KType, kotlin.reflect.KType)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KType $r1, $r3;
        kotlin.jvm.internal.TypeReference $r2, $r6;
        kotlin.reflect.KClassifier $r4;
        java.util.List $r5;
        int $i0;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r3 := @parameter0: kotlin.reflect.KType;

        $r1 := @parameter1: kotlin.reflect.KType;

        $r2 = new kotlin.jvm.internal.TypeReference;

        $r4 = interfaceinvoke $r3.<kotlin.reflect.KType: kotlin.reflect.KClassifier getClassifier()>();

        $r5 = interfaceinvoke $r3.<kotlin.reflect.KType: java.util.List getArguments()>();

        $r6 = (kotlin.jvm.internal.TypeReference) $r3;

        $i0 = virtualinvoke $r6.<kotlin.jvm.internal.TypeReference: int getFlags$kotlin_stdlib()>();

        specialinvoke $r2.<kotlin.jvm.internal.TypeReference: void <init>(kotlin.reflect.KClassifier,java.util.List,kotlin.reflect.KType,int)>($r4, $r5, $r1, $i0);

        return $r2;
    }

    public kotlin.reflect.KProperty0 property0(kotlin.jvm.internal.PropertyReference0)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.PropertyReference0 $r1;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: kotlin.jvm.internal.PropertyReference0;

        return $r1;
    }

    public kotlin.reflect.KProperty1 property1(kotlin.jvm.internal.PropertyReference1)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.PropertyReference1 $r1;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: kotlin.jvm.internal.PropertyReference1;

        return $r1;
    }

    public kotlin.reflect.KProperty2 property2(kotlin.jvm.internal.PropertyReference2)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.PropertyReference2 $r1;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: kotlin.jvm.internal.PropertyReference2;

        return $r1;
    }

    public java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.jvm.internal.FunctionBase $r1;
        java.lang.Class $r2;
        java.lang.reflect.Type[] $r3;
        java.lang.reflect.Type $r4;
        java.lang.String $r5, $r6;
        boolean $z0;
        int $i0;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: kotlin.jvm.internal.FunctionBase;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r6 = "kotlin.jvm.functions.";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("kotlin.jvm.functions.");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        return $r5;
    }

    public java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.String $r1;
        kotlin.jvm.internal.Lambda $r2;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r2 := @parameter0: kotlin.jvm.internal.Lambda;

        $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)>($r2);

        return $r1;
    }

    public void setUpperBounds(kotlin.reflect.KTypeParameter, java.util.List)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.util.List $r1;
        kotlin.reflect.KTypeParameter $r2;
        kotlin.jvm.internal.TypeParameterReference $r3;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r2 := @parameter0: kotlin.reflect.KTypeParameter;

        $r1 := @parameter1: java.util.List;

        $r3 = (kotlin.jvm.internal.TypeParameterReference) $r2;

        virtualinvoke $r3.<kotlin.jvm.internal.TypeParameterReference: void setUpperBounds(java.util.List)>($r1);

        return;
    }

    public kotlin.reflect.KType typeOf(kotlin.reflect.KClassifier, java.util.List, boolean)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        kotlin.reflect.KClassifier $r1;
        java.util.List $r2;
        boolean $z0;
        kotlin.jvm.internal.TypeReference $r3;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: kotlin.reflect.KClassifier;

        $r2 := @parameter1: java.util.List;

        $z0 := @parameter2: boolean;

        $r3 = new kotlin.jvm.internal.TypeReference;

        specialinvoke $r3.<kotlin.jvm.internal.TypeReference: void <init>(kotlin.reflect.KClassifier,java.util.List,boolean)>($r1, $r2, $z0);

        return $r3;
    }

    public kotlin.reflect.KTypeParameter typeParameter(java.lang.Object, java.lang.String, kotlin.reflect.KVariance, boolean)
    {
        kotlin.jvm.internal.ReflectionFactory $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        kotlin.reflect.KVariance $r3;
        boolean $z0;
        kotlin.jvm.internal.TypeParameterReference $r4;

        $r0 := @this: kotlin.jvm.internal.ReflectionFactory;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: kotlin.reflect.KVariance;

        $z0 := @parameter3: boolean;

        $r4 = new kotlin.jvm.internal.TypeParameterReference;

        specialinvoke $r4.<kotlin.jvm.internal.TypeParameterReference: void <init>(java.lang.Object,java.lang.String,kotlin.reflect.KVariance,boolean)>($r1, $r2, $r3, $z0);

        return $r4;
    }

