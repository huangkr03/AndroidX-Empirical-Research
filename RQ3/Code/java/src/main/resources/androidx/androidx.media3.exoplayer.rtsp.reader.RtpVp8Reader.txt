androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: java.lang.String TAG>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int MEDIA_CLOCK_FREQUENCY>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.extractor.TrackOutput trackOutput>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long firstReceivedTimestamp>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int previousSequenceNumber>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long fragmentedSampleTimeUs>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long startTimeOffsetUs>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean gotFirstPacketOfVp8Frame>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean isKeyFrame>
<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean isOutputFormatSet>
    public void <init>(androidx.media3.exoplayer.rtsp.RtpPayloadFormat)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader r0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat r1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader;

        r1 := @parameter0: androidx.media3.exoplayer.rtsp.RtpPayloadFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat> = r1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long firstReceivedTimestamp> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int previousSequenceNumber> = -1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes> = -1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long fragmentedSampleTimeUs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long startTimeOffsetUs> = 0L;

        return;
    }

    public void createTracks(androidx.media3.extractor.ExtractorOutput, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader r0;
        androidx.media3.extractor.ExtractorOutput r1;
        int i0;
        androidx.media3.extractor.TrackOutput $r2, $r5;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r3;
        androidx.media3.common.Format $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(i0, 2);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.extractor.TrackOutput trackOutput> = $r2;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r4 = $r3.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        interfaceinvoke $r5.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r4);

        return;
    }

    public void onReceivingFirstPacket(long, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader r0;
        long l0, $l2;
        int i1;
        byte $b3;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long firstReceivedTimestamp>;

        $b3 = $l2 cmp -9223372036854775807L;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long firstReceivedTimestamp> = l0;

        return;
    }

    public void consume(androidx.media3.common.util.ParsableByteArray, long, int, boolean)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0, $l7, $l8, $l9;
        int i1, i2, i3, $i4, $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, $i19;
        boolean z0, z1, $z2, $z3, $z4;
        androidx.media3.extractor.TrackOutput $r2, $r8, $r16;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r4, $r6, $r13;
        androidx.media3.common.Format $r5, $r7, $r12, $r14;
        androidx.media3.common.Format$Builder $r9, $r10, $r11;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r2);

        z1 = specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean validateVp8Descriptor(androidx.media3.common.util.ParsableByteArray,int)>(r1, i1);

        if z1 == 0 goto label10;

        $i4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes>;

        if $i4 != -1 goto label03;

        $z2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean gotFirstPacketOfVp8Frame>;

        if $z2 == 0 goto label03;

        $i15 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int peekUnsignedByte()>();

        $i16 = $i15 & 1;

        if $i16 != 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean isKeyFrame> = $z3;

     label03:
        $z4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean isOutputFormatSet>;

        if $z4 != 0 goto label06;

        i17 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int getPosition()>();

        $i10 = i17 + 6;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>($i10);

        $i11 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianUnsignedShort()>();

        i2 = $i11 & 16383;

        $i12 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianUnsignedShort()>();

        i3 = $i12 & 16383;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(i17);

        $r4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r5 = $r4.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        $i13 = $r5.<androidx.media3.common.Format: int width>;

        if i2 != $i13 goto label04;

        $r13 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r14 = $r13.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        $i14 = $r14.<androidx.media3.common.Format: int height>;

        if i3 == $i14 goto label05;

     label04:
        $r8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r6 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r7 = $r6.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        $r9 = virtualinvoke $r7.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $r10 = virtualinvoke $r9.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>(i2);

        $r11 = virtualinvoke $r10.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>(i3);

        $r12 = virtualinvoke $r11.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        interfaceinvoke $r8.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r12);

     label05:
        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean isOutputFormatSet> = 1;

     label06:
        i18 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r16 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        interfaceinvoke $r16.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i18);

        $i19 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes>;

        if $i19 != -1 goto label07;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes> = i18;

        goto label08;

     label07:
        $i5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes>;

        $i6 = $i5 + i18;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes> = $i6;

     label08:
        $l8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long startTimeOffsetUs>;

        $l7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long firstReceivedTimestamp>;

        $l9 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpReaderUtils: long toSampleTimeUs(long,long,long,int)>($l8, l0, $l7, 90000);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long fragmentedSampleTimeUs> = $l9;

        if z0 == 0 goto label09;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: void outputSampleMetadataForFragmentedPackets()>();

     label09:
        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int previousSequenceNumber> = i1;

     label10:
        return;
    }

    public void seek(long, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader r0;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long firstReceivedTimestamp> = l0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes> = -1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long startTimeOffsetUs> = l1;

        return;
    }

    private boolean validateVp8Descriptor(androidx.media3.common.util.ParsableByteArray, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14;
        boolean $z0, $z1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4;
        java.lang.String $r5;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        $i3 = i1 & 16;

        if $i3 != 16 goto label2;

        $i10 = i1 & 7;

        if $i10 != 0 goto label2;

        $z1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean gotFirstPacketOfVp8Frame>;

        if $z1 == 0 goto label1;

        $i11 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes>;

        if $i11 <= 0 goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: void outputSampleMetadataForFragmentedPackets()>();

     label1:
        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean gotFirstPacketOfVp8Frame> = 1;

        goto label5;

     label2:
        $z0 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean gotFirstPacketOfVp8Frame>;

        if $z0 == 0 goto label4;

        $i4 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int previousSequenceNumber>;

        i12 = staticinvoke <androidx.media3.exoplayer.rtsp.RtpPacket: int getNextSequenceNumber(int)>($i4);

        if i0 >= i12 goto label3;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("Received RTP packet with unexpected sequence number. Expected: %d; received: %d. Dropping packet.", $r2);

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("RtpVP8Reader", $r5);

        return 0;

     label3:
        goto label5;

     label4:
        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("RtpVP8Reader", "RTP packet is not the start of a new VP8 partition, skipping.");

        return 0;

     label5:
        $i5 = i1 & 128;

        if $i5 == 0 goto label9;

        i13 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        $i6 = i13 & 128;

        if $i6 == 0 goto label6;

        i2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        $i9 = i2 & 128;

        if $i9 == 0 goto label6;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(1);

     label6:
        $i14 = i13 & 64;

        if $i14 == 0 goto label7;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(1);

     label7:
        $i7 = i13 & 32;

        if $i7 != 0 goto label8;

        $i8 = i13 & 16;

        if $i8 == 0 goto label9;

     label8:
        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(1);

     label9:
        return 1;
    }

    private void outputSampleMetadataForFragmentedPackets()
    {
        androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader r0;
        androidx.media3.extractor.TrackOutput $r1, $r3;
        java.lang.Object $r2;
        boolean $z0;
        int $i0;
        long $l1;
        byte $b2;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader;

        $r1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r2 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = (androidx.media3.extractor.TrackOutput) $r2;

        $l1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long fragmentedSampleTimeUs>;

        $z0 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean isKeyFrame>;

        if $z0 == 0 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        $i0 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes>;

        interfaceinvoke $r3.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>($l1, $b2, $i0, 0, null);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: int fragmentedSampleSizeBytes> = -1;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: long fragmentedSampleTimeUs> = -9223372036854775807L;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpVp8Reader: boolean gotFirstPacketOfVp8Frame> = 0;

        return;
    }

