androidx.test.core.view.WindowCapture
    public static final com.google.common.util.concurrent.ListenableFuture captureRegionToBitmap(android.view.Window, android.graphics.Rect)
    {
        android.view.Window $r0;
        android.graphics.Rect r1;
        androidx.concurrent.futures.ResolvableFuture r2, $r4;
        androidx.test.core.internal.os.HandlerExecutor r3, $r5;
        android.os.Handler $r6;
        android.os.Looper $r7;
        boolean $z0;
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$2 $r8;
        java.lang.Runnable $r9, $r13;
        com.google.common.util.concurrent.ListenableFuture $r10;
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$1 $r11;
        java.util.concurrent.Executor $r12;

        $r0 := @parameter0: android.view.Window;

        r1 := @parameter1: android.graphics.Rect;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r4 = staticinvoke <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "create()");

        r2 = $r4;

        $r5 = new androidx.test.core.internal.os.HandlerExecutor;

        $r6 = new android.os.Handler;

        $r7 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r6.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        specialinvoke $r5.<androidx.test.core.internal.os.HandlerExecutor: void <init>(android.os.Handler)>($r6);

        r3 = $r5;

        $z0 = staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: boolean isDrawingEnabled()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: void setDrawingEnabled(boolean)>(1);

        $r11 = <androidx.test.core.view.WindowCapture$captureRegionToBitmap$1: androidx.test.core.view.WindowCapture$captureRegionToBitmap$1 INSTANCE>;

        $r13 = (java.lang.Runnable) $r11;

        $r12 = (java.util.concurrent.Executor) r3;

        virtualinvoke r2.<androidx.concurrent.futures.ResolvableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r13, $r12);

     label1:
        $r8 = new androidx.test.core.view.WindowCapture$captureRegionToBitmap$2;

        specialinvoke $r8.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: void <init>(android.view.Window,androidx.test.core.internal.os.HandlerExecutor,android.graphics.Rect,androidx.concurrent.futures.ResolvableFuture)>($r0, r3, r1, r2);

        $r9 = (java.lang.Runnable) $r8;

        virtualinvoke r3.<androidx.test.core.internal.os.HandlerExecutor: void execute(java.lang.Runnable)>($r9);

        $r10 = (com.google.common.util.concurrent.ListenableFuture) r2;

        return $r10;
    }

    public static com.google.common.util.concurrent.ListenableFuture captureRegionToBitmap$default(android.view.Window, android.graphics.Rect, int, java.lang.Object)
    {
        android.view.Window r0;
        int i0, $i1;
        java.lang.Object r1;
        com.google.common.util.concurrent.ListenableFuture $r2;
        android.graphics.Rect r3;

        r0 := @parameter0: android.view.Window;

        r3 := @parameter1: android.graphics.Rect;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = staticinvoke <androidx.test.core.view.WindowCapture: com.google.common.util.concurrent.ListenableFuture captureRegionToBitmap(android.view.Window,android.graphics.Rect)>(r0, r3);

        return $r2;
    }

    public static final void generateBitmap(android.view.Window, android.graphics.Rect, androidx.concurrent.futures.ResolvableFuture)
    {
        android.view.Window $r0;
        android.graphics.Rect r1;
        androidx.concurrent.futures.ResolvableFuture r2;
        android.graphics.Bitmap r3;
        android.view.View $r4, $r5, $r6;
        int $i0, $i2, $i3, $i4;
        android.graphics.Bitmap$Config $r8;

        $r0 := @parameter0: android.view.Window;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: androidx.concurrent.futures.ResolvableFuture;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "bitmapFuture");

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i2 = $i0;

        goto label2;

     label1:
        $r4 = virtualinvoke $r0.<android.view.Window: android.view.View getDecorView()>();

        $i2 = virtualinvoke $r4.<android.view.View: int getWidth()>();

     label2:
        if r1 == null goto label3;

        $i3 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        goto label4;

     label3:
        $r5 = virtualinvoke $r0.<android.view.Window: android.view.View getDecorView()>();

        $i3 = virtualinvoke $r5.<android.view.View: int getHeight()>();

     label4:
        $r8 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i2, $i3, $r8);

        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 >= 26 goto label5;

        $r6 = virtualinvoke $r0.<android.view.Window: android.view.View getDecorView()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "decorView");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "destBitmap");

        staticinvoke <androidx.test.core.view.ViewCapture: void generateBitmapFromDraw(android.view.View,android.graphics.Bitmap,androidx.concurrent.futures.ResolvableFuture)>($r6, r3, r2);

        goto label6;

     label5:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "destBitmap");

        staticinvoke <androidx.test.core.view.WindowCapture: void generateBitmapFromPixelCopy(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,androidx.concurrent.futures.ResolvableFuture)>($r0, r1, r3, r2);

     label6:
        return;
    }

    public static void generateBitmap$default(android.view.Window, android.graphics.Rect, androidx.concurrent.futures.ResolvableFuture, int, java.lang.Object)
    {
        android.view.Window r0;
        androidx.concurrent.futures.ResolvableFuture r1;
        int i0, $i1;
        java.lang.Object r2;
        android.graphics.Rect r3;

        r0 := @parameter0: android.view.Window;

        r3 := @parameter1: android.graphics.Rect;

        r1 := @parameter2: androidx.concurrent.futures.ResolvableFuture;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        staticinvoke <androidx.test.core.view.WindowCapture: void generateBitmap(android.view.Window,android.graphics.Rect,androidx.concurrent.futures.ResolvableFuture)>(r0, r3, r1);

        return;
    }

    public static final void generateBitmapFromPixelCopy(android.view.Window, android.graphics.Rect, android.graphics.Bitmap, androidx.concurrent.futures.ResolvableFuture)
    {
        android.view.Window $r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap r2;
        androidx.concurrent.futures.ResolvableFuture r3;
        android.view.PixelCopy$OnPixelCopyFinishedListener r4;
        androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1 $r5;
        android.os.Handler $r6;
        android.os.Looper $r7;

        $r0 := @parameter0: android.view.Window;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Bitmap;

        r3 := @parameter3: androidx.concurrent.futures.ResolvableFuture;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "destBitmap");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "bitmapFuture");

        $r5 = new androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1;

        specialinvoke $r5.<androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1: void <init>(androidx.concurrent.futures.ResolvableFuture,android.graphics.Bitmap)>(r3, r2);

        r4 = (android.view.PixelCopy$OnPixelCopyFinishedListener) $r5;

        $r6 = new android.os.Handler;

        $r7 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r6.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        staticinvoke <android.view.PixelCopy: void request(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>($r0, r1, r2, r4, $r6);

        return;
    }

    public static void generateBitmapFromPixelCopy$default(android.view.Window, android.graphics.Rect, android.graphics.Bitmap, androidx.concurrent.futures.ResolvableFuture, int, java.lang.Object)
    {
        android.view.Window r0;
        android.graphics.Bitmap r1;
        androidx.concurrent.futures.ResolvableFuture r2;
        int i0, $i1;
        java.lang.Object r3;
        android.graphics.Rect r4;

        r0 := @parameter0: android.view.Window;

        r4 := @parameter1: android.graphics.Rect;

        r1 := @parameter2: android.graphics.Bitmap;

        r2 := @parameter3: androidx.concurrent.futures.ResolvableFuture;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        staticinvoke <androidx.test.core.view.WindowCapture: void generateBitmapFromPixelCopy(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,androidx.concurrent.futures.ResolvableFuture)>(r0, r4, r1, r2);

        return;
    }

androidx.test.core.view.WindowCapture$captureRegionToBitmap$1
<androidx.test.core.view.WindowCapture$captureRegionToBitmap$1: androidx.test.core.view.WindowCapture$captureRegionToBitmap$1 INSTANCE>
    static void <clinit>()
    {
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$1 $r0;

        $r0 = new androidx.test.core.view.WindowCapture$captureRegionToBitmap$1;

        specialinvoke $r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$1: void <init>()>();

        <androidx.test.core.view.WindowCapture$captureRegionToBitmap$1: androidx.test.core.view.WindowCapture$captureRegionToBitmap$1 INSTANCE> = $r0;

        return;
    }

    void <init>()
    {
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$1 r0;

        r0 := @this: androidx.test.core.view.WindowCapture$captureRegionToBitmap$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$1 r0;

        r0 := @this: androidx.test.core.view.WindowCapture$captureRegionToBitmap$1;

        staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: void setDrawingEnabled(boolean)>(0);

        return;
    }

androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1
<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: android.view.Window $this_captureRegionToBitmap>
<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: android.graphics.Rect $boundsInWindow>
<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>
    void <init>(android.view.Window, android.graphics.Rect, androidx.concurrent.futures.ResolvableFuture)
    {
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1 r0;
        android.view.Window $r1;
        android.graphics.Rect $r2;
        androidx.concurrent.futures.ResolvableFuture $r3;

        r0 := @this: androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1;

        $r1 := @parameter0: android.view.Window;

        $r2 := @parameter1: android.graphics.Rect;

        $r3 := @parameter2: androidx.concurrent.futures.ResolvableFuture;

        r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: android.view.Window $this_captureRegionToBitmap> = $r1;

        r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: android.graphics.Rect $boundsInWindow> = $r2;

        r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1 r0;
        androidx.concurrent.futures.ResolvableFuture $r1;
        android.graphics.Rect $r2;
        android.view.Window $r3;

        r0 := @this: androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1;

        $r3 = r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: android.view.Window $this_captureRegionToBitmap>;

        $r2 = r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: android.graphics.Rect $boundsInWindow>;

        $r1 = r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        staticinvoke <androidx.test.core.view.WindowCapture: void generateBitmap(android.view.Window,android.graphics.Rect,androidx.concurrent.futures.ResolvableFuture)>($r3, $r2, $r1);

        return;
    }

androidx.test.core.view.WindowCapture$captureRegionToBitmap$2
<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: android.view.Window $this_captureRegionToBitmap>
<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: androidx.test.core.internal.os.HandlerExecutor $mainExecutor>
<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: android.graphics.Rect $boundsInWindow>
<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>
    void <init>(android.view.Window, androidx.test.core.internal.os.HandlerExecutor, android.graphics.Rect, androidx.concurrent.futures.ResolvableFuture)
    {
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$2 r0;
        android.view.Window $r1;
        androidx.test.core.internal.os.HandlerExecutor $r2;
        android.graphics.Rect $r3;
        androidx.concurrent.futures.ResolvableFuture $r4;

        r0 := @this: androidx.test.core.view.WindowCapture$captureRegionToBitmap$2;

        $r1 := @parameter0: android.view.Window;

        $r2 := @parameter1: androidx.test.core.internal.os.HandlerExecutor;

        $r3 := @parameter2: android.graphics.Rect;

        $r4 := @parameter3: androidx.concurrent.futures.ResolvableFuture;

        r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: android.view.Window $this_captureRegionToBitmap> = $r1;

        r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: androidx.test.core.internal.os.HandlerExecutor $mainExecutor> = $r2;

        r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: android.graphics.Rect $boundsInWindow> = $r3;

        r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: androidx.concurrent.futures.ResolvableFuture $bitmapFuture> = $r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$2 r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        android.view.Window $r2, $r7;
        android.view.View $r3;
        androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1 $r4;
        androidx.concurrent.futures.ResolvableFuture $r5;
        android.graphics.Rect $r6;
        androidx.test.core.internal.os.HandlerExecutor $r8;
        java.util.concurrent.Executor $r9;
        java.lang.Runnable $r10;

        r0 := @this: androidx.test.core.view.WindowCapture$captureRegionToBitmap$2;

        $r2 = r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: android.view.Window $this_captureRegionToBitmap>;

        $r3 = virtualinvoke $r2.<android.view.Window: android.view.View getDecorView()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "decorView");

        r1 = staticinvoke <androidx.test.core.view.ViewCapture: com.google.common.util.concurrent.ListenableFuture forceRedraw(android.view.View)>($r3);

        $r4 = new androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1;

        $r7 = r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: android.view.Window $this_captureRegionToBitmap>;

        $r6 = r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: android.graphics.Rect $boundsInWindow>;

        $r5 = r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        specialinvoke $r4.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2$1: void <init>(android.view.Window,android.graphics.Rect,androidx.concurrent.futures.ResolvableFuture)>($r7, $r6, $r5);

        $r10 = (java.lang.Runnable) $r4;

        $r8 = r0.<androidx.test.core.view.WindowCapture$captureRegionToBitmap$2: androidx.test.core.internal.os.HandlerExecutor $mainExecutor>;

        $r9 = (java.util.concurrent.Executor) $r8;

        interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r10, $r9);

        return;
    }

androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1
<androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>
<androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1: android.graphics.Bitmap $destBitmap>
    void <init>(androidx.concurrent.futures.ResolvableFuture, android.graphics.Bitmap)
    {
        androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1 r0;
        androidx.concurrent.futures.ResolvableFuture $r1;
        android.graphics.Bitmap $r2;

        r0 := @this: androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1;

        $r1 := @parameter0: androidx.concurrent.futures.ResolvableFuture;

        $r2 := @parameter1: android.graphics.Bitmap;

        r0.<androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture> = $r1;

        r0.<androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1: android.graphics.Bitmap $destBitmap> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void onPixelCopyFinished(int)
    {
        androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1 r0;
        int i0, $i1;
        java.lang.String r1, $r7;
        java.lang.RuntimeException $r2;
        kotlin.jvm.internal.StringCompanionObject $r3;
        androidx.concurrent.futures.ResolvableFuture $r4, $r10;
        java.lang.Integer $r5;
        java.lang.Object[] $r6, r11, r12;
        java.lang.Throwable $r8;
        android.graphics.Bitmap $r9;

        r0 := @this: androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r10 = r0.<androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        $r9 = r0.<androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1: android.graphics.Bitmap $destBitmap>;

        virtualinvoke $r10.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>($r9);

        goto label2;

     label1:
        $r4 = r0.<androidx.test.core.view.WindowCapture$generateBitmapFromPixelCopy$onCopyFinished$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        $r2 = new java.lang.RuntimeException;

        $r3 = <kotlin.jvm.internal.StringCompanionObject: kotlin.jvm.internal.StringCompanionObject INSTANCE>;

        r1 = "PixelCopy failed: %d";

        r11 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r11[0] = $r5;

        r12 = r11;

        $i1 = lengthof r12;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r12, $i1);

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "format(format, *args)");

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        $r8 = (java.lang.Throwable) $r2;

        virtualinvoke $r4.<androidx.concurrent.futures.ResolvableFuture: boolean setException(java.lang.Throwable)>($r8);

     label2:
        return;
    }

