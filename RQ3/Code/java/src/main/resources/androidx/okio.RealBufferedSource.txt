okio.RealBufferedSource
<okio.RealBufferedSource: okio.Buffer bufferField>
<okio.RealBufferedSource: boolean closed>
<okio.RealBufferedSource: okio.Source source>
    public void <init>(okio.Source)
    {
        okio.RealBufferedSource $r0;
        okio.Source $r1;
        okio.Buffer $r2;

        $r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.Source;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<okio.RealBufferedSource: okio.Source source> = $r1;

        $r2 = new okio.Buffer;

        specialinvoke $r2.<okio.Buffer: void <init>()>();

        $r0.<okio.RealBufferedSource: okio.Buffer bufferField> = $r2;

        return;
    }

    public void close()
    {
        okio.RealBufferedSource $r0;
        boolean $z0;
        okio.Source $r1;
        okio.Buffer $r2;

        $r0 := @this: okio.RealBufferedSource;

        $z0 = $r0.<okio.RealBufferedSource: boolean closed>;

        if $z0 != 0 goto label1;

        $r0.<okio.RealBufferedSource: boolean closed> = 1;

        $r1 = $r0.<okio.RealBufferedSource: okio.Source source>;

        interfaceinvoke $r1.<okio.Source: void close()>();

        $r2 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        virtualinvoke $r2.<okio.Buffer: void clear()>();

     label1:
        return;
    }

    public boolean exhausted()
    {
        okio.RealBufferedSource $r0;
        boolean $z0, $z1;
        okio.Buffer $r1;
        okio.Source $r2;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4;

        $r0 := @this: okio.RealBufferedSource;

        $z0 = $r0.<okio.RealBufferedSource: boolean closed>;

        $z1 = 1;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label5;

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $z0 = virtualinvoke $r1.<okio.Buffer: boolean exhausted()>();

        if $z0 == 0 goto label3;

        $r2 = $r0.<okio.RealBufferedSource: okio.Source source>;

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l0 = interfaceinvoke $r2.<okio.Source: long read(okio.Buffer,long)>($r1, 8192L);

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label3;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;

     label5:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "closed";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public okio.Buffer getBuffer()
    {
        okio.RealBufferedSource $r0;
        okio.Buffer r1;

        $r0 := @this: okio.RealBufferedSource;

        r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        return r1;
    }

    public boolean isOpen()
    {
        okio.RealBufferedSource $r0;
        boolean $z0;

        $r0 := @this: okio.RealBufferedSource;

        $z0 = $r0.<okio.RealBufferedSource: boolean closed>;

        $z0 = $z0 ^ 1;

        return $z0;
    }

    public int read(java.nio.ByteBuffer)
    {
        okio.RealBufferedSource $r0;
        okio.Buffer $r1;
        java.nio.ByteBuffer $r2;
        long $l0;
        byte $b1;
        okio.Source $r3;
        int $i2;

        $r0 := @this: okio.RealBufferedSource;

        $r2 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "sink");

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l0 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r3 = $r0.<okio.RealBufferedSource: okio.Source source>;

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l0 = interfaceinvoke $r3.<okio.Source: long read(okio.Buffer,long)>($r1, 8192L);

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        return -1;

     label1:
        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $i2 = virtualinvoke $r1.<okio.Buffer: int read(java.nio.ByteBuffer)>($r2);

        return $i2;
    }

    public long read(okio.Buffer, long)
    {
        okio.RealBufferedSource $r0;
        okio.Buffer $r1, $r2;
        long $l0, $l2, $l3;
        boolean $z0, $z1;
        byte $b1;
        okio.Source $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r7;

        $r0 := @this: okio.RealBufferedSource;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink");

        $z0 = 1;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label8;

        $z1 = $r0.<okio.RealBufferedSource: boolean closed>;

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label7;

        $r2 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l2 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $b1 = $l2 cmp 0L;

        if $b1 != 0 goto label5;

        $r3 = $r0.<okio.RealBufferedSource: okio.Source source>;

        $r2 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l2 = interfaceinvoke $r3.<okio.Source: long read(okio.Buffer,long)>($r2, 8192L);

        $l3 = -1L;

        $b1 = $l2 cmp -1L;

        if $b1 != 0 goto label5;

        goto label6;

     label5:
        $r2 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l2 = virtualinvoke $r2.<okio.Buffer: long size()>();

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l2);

        $r2 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l3 = virtualinvoke $r2.<okio.Buffer: long read(okio.Buffer,long)>($r1, $l0);

     label6:
        return $l3;

     label7:
        $r4 = new java.lang.IllegalStateException;

        $r5 = "closed";

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label8:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r7;
    }

    public byte readByte()
    {
        okio.RealBufferedSource $r0;
        byte $b0;
        okio.Buffer $r1;

        $r0 := @this: okio.RealBufferedSource;

        virtualinvoke $r0.<okio.RealBufferedSource: void require(long)>(1L);

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $b0 = virtualinvoke $r1.<okio.Buffer: byte readByte()>();

        return $b0;
    }

    public byte[] readByteArray(long)
    {
        okio.RealBufferedSource $r0;
        okio.Buffer $r1;
        byte[] $r2;
        long $l0;

        $r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        virtualinvoke $r0.<okio.RealBufferedSource: void require(long)>($l0);

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $r2 = virtualinvoke $r1.<okio.Buffer: byte[] readByteArray(long)>($l0);

        return $r2;
    }

    public okio.ByteString readByteString(long)
    {
        okio.RealBufferedSource $r0;
        okio.Buffer $r1;
        okio.ByteString $r2;
        long $l0;

        $r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        virtualinvoke $r0.<okio.RealBufferedSource: void require(long)>($l0);

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $r2 = virtualinvoke $r1.<okio.Buffer: okio.ByteString readByteString(long)>($l0);

        return $r2;
    }

    public int readInt()
    {
        okio.RealBufferedSource $r0;
        int $i0;
        okio.Buffer $r1;

        $r0 := @this: okio.RealBufferedSource;

        virtualinvoke $r0.<okio.RealBufferedSource: void require(long)>(4L);

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $i0 = virtualinvoke $r1.<okio.Buffer: int readInt()>();

        return $i0;
    }

    public short readShort()
    {
        okio.RealBufferedSource $r0;
        short $s0;
        okio.Buffer $r1;

        $r0 := @this: okio.RealBufferedSource;

        virtualinvoke $r0.<okio.RealBufferedSource: void require(long)>(2L);

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $s0 = virtualinvoke $r1.<okio.Buffer: short readShort()>();

        return $s0;
    }

    public boolean request(long)
    {
        okio.RealBufferedSource $r0;
        byte $b0;
        long $l1, $l2;
        boolean $z0, $z1;
        okio.Buffer $r1;
        okio.Source $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r6;

        $r0 := @this: okio.RealBufferedSource;

        $l1 := @parameter0: long;

        $z0 = 1;

        $b0 = $l1 cmp 0L;

        if $b0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label8;

        $z1 = $r0.<okio.RealBufferedSource: boolean closed>;

        if $z1 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z1 == 0 goto label7;

     label5:
        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l2 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $b0 = $l2 cmp $l1;

        if $b0 >= 0 goto label6;

        $r2 = $r0.<okio.RealBufferedSource: okio.Source source>;

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l2 = interfaceinvoke $r2.<okio.Source: long read(okio.Buffer,long)>($r1, 8192L);

        $b0 = $l2 cmp -1L;

        if $b0 != 0 goto label5;

        $z0 = 0;

        goto label6;

     label6:
        return $z0;

     label7:
        $r3 = new java.lang.IllegalStateException;

        $r4 = "closed";

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label8:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        goto label9;

     label9:
        throw $r6;
    }

    public void require(long)
    {
        okio.RealBufferedSource $r0;
        boolean $z0;
        long $l0;
        java.io.EOFException $r1;

        $r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        $z0 = virtualinvoke $r0.<okio.RealBufferedSource: boolean request(long)>($l0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public void skip(long)
    {
        okio.RealBufferedSource $r0;
        okio.Buffer $r1;
        long $l0, $l2;
        boolean $z0;
        byte $b1;
        okio.Source $r2;
        java.io.EOFException $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5;

        $r0 := @this: okio.RealBufferedSource;

        $l0 := @parameter0: long;

        $z0 = $r0.<okio.RealBufferedSource: boolean closed>;

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label5;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label4;

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l2 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $b1 = $l2 cmp 0L;

        if $b1 != 0 goto label3;

        $r2 = $r0.<okio.RealBufferedSource: okio.Source source>;

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l2 = interfaceinvoke $r2.<okio.Source: long read(okio.Buffer,long)>($r1, 8192L);

        $b1 = $l2 cmp -1L;

        if $b1 == 0 goto label2;

        goto label3;

     label2:
        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>()>();

        throw $r3;

     label3:
        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        $l2 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l2);

        $r1 = $r0.<okio.RealBufferedSource: okio.Buffer bufferField>;

        virtualinvoke $r1.<okio.Buffer: void skip(long)>($l2);

        $l0 = $l0 - $l2;

        goto label1;

     label4:
        return;

     label5:
        $r4 = new java.lang.IllegalStateException;

        $r5 = "closed";

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        goto label6;

     label6:
        throw $r4;
    }

    public java.lang.String toString()
    {
        okio.RealBufferedSource $r0;
        okio.Source $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: okio.RealBufferedSource;

        $r1 = $r0.<okio.RealBufferedSource: okio.Source source>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buffer(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

