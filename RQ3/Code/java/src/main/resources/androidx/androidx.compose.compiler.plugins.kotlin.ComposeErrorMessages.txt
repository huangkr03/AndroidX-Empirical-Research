androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages
<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>
    public org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap getMap()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages r0;
        org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>;

        return $r1;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages r0;
        org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap $r1, $r3, $r5, $r11, $r13, $r15, $r17, $r21, $r23;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 $r2, $r4, $r12, $r14, $r16, $r22;
        org.jetbrains.kotlin.diagnostics.rendering.ContextIndependentParameterRenderer $r6;
        org.jetbrains.kotlin.diagnostics.rendering.SmartDescriptorRenderer $r7;
        org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRenderer $r8, $r9, $r18, $r19;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory2 $r10, $r20;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap;

        specialinvoke $r1.<org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap: void <init>(java.lang.String)>("Compose");

        r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP> = $r1;

        $r3 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>;

        $r2 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_INVOCATION>;

        virtualinvoke $r3.<org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap: void put(org.jetbrains.kotlin.diagnostics.DiagnosticFactory0,java.lang.String)>($r2, "@Composable invocations can only happen from the context of a @Composable function");

        $r5 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>;

        $r4 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_EXPECTED>;

        virtualinvoke $r5.<org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap: void put(org.jetbrains.kotlin.diagnostics.DiagnosticFactory0,java.lang.String)>($r4, "Functions which invoke @Composable functions must be marked with the @Composable annotation");

        $r11 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>;

        $r10 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory2 CAPTURED_COMPOSABLE_INVOCATION>;

        $r6 = <org.jetbrains.kotlin.diagnostics.rendering.Renderers: org.jetbrains.kotlin.diagnostics.rendering.ContextIndependentParameterRenderer NAME>;

        $r9 = (org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRenderer) $r6;

        $r7 = <org.jetbrains.kotlin.diagnostics.rendering.Renderers: org.jetbrains.kotlin.diagnostics.rendering.SmartDescriptorRenderer COMPACT>;

        $r8 = (org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRenderer) $r7;

        virtualinvoke $r11.<org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap: void put(org.jetbrains.kotlin.diagnostics.DiagnosticFactory2,java.lang.String,org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRenderer,org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRenderer)>($r10, "Composable calls are not allowed inside the {0} parameter of {1}", $r9, $r8);

        $r13 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>;

        $r12 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_PROPERTY_BACKING_FIELD>;

        virtualinvoke $r13.<org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap: void put(org.jetbrains.kotlin.diagnostics.DiagnosticFactory0,java.lang.String)>($r12, "Composable properties are not able to have backing fields");

        $r15 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>;

        $r14 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_VAR>;

        virtualinvoke $r15.<org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap: void put(org.jetbrains.kotlin.diagnostics.DiagnosticFactory0,java.lang.String)>($r14, "Composable properties are not able to have backing fields");

        $r17 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>;

        $r16 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_SUSPEND_FUN>;

        virtualinvoke $r17.<org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap: void put(org.jetbrains.kotlin.diagnostics.DiagnosticFactory0,java.lang.String)>($r16, "Composable properties are not able to have backing fields");

        $r21 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>;

        $r20 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory2 ILLEGAL_ASSIGN_TO_UNIONTYPE>;

        $r19 = <org.jetbrains.kotlin.diagnostics.rendering.Renderers: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRenderer RENDER_COLLECTION_OF_TYPES>;

        $r18 = <org.jetbrains.kotlin.diagnostics.rendering.Renderers: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRenderer RENDER_COLLECTION_OF_TYPES>;

        virtualinvoke $r21.<org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap: void put(org.jetbrains.kotlin.diagnostics.DiagnosticFactory2,java.lang.String,org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRenderer,org.jetbrains.kotlin.diagnostics.rendering.DiagnosticParameterRenderer)>($r20, "Value of type {0} can\'t be assigned to union type {1}.", $r19, $r18);

        $r23 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeErrorMessages: org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap MAP>;

        $r22 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 ILLEGAL_TRY_CATCH_AROUND_COMPOSABLE>;

        virtualinvoke $r23.<org.jetbrains.kotlin.diagnostics.rendering.DiagnosticFactoryToRendererMap: void put(org.jetbrains.kotlin.diagnostics.DiagnosticFactory0,java.lang.String)>($r22, "Try catch is not supported around composable function invocations.");

        return;
    }

