androidx.benchmark.gradle.BenchmarkPlugin
<androidx.benchmark.gradle.BenchmarkPlugin: boolean foundAndroidPlugin>
    public void <init>()
    {
        androidx.benchmark.gradle.BenchmarkPlugin r0;

        r0 := @this: androidx.benchmark.gradle.BenchmarkPlugin;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(org.gradle.api.Project)
    {
        androidx.benchmark.gradle.BenchmarkPlugin r0;
        org.gradle.api.Project r1;
        org.gradle.api.plugins.PluginManager $r2, $r4;
        org.gradle.api.Action $r3, $r5, $r6;

        r0 := @this: androidx.benchmark.gradle.BenchmarkPlugin;

        r1 := @parameter0: org.gradle.api.Project;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "project");

        $r2 = interfaceinvoke r1.<org.gradle.api.Project: org.gradle.api.plugins.PluginManager getPluginManager()>();

        $r3 = dynamicinvoke "execute" <org.gradle.api.Action (androidx.benchmark.gradle.BenchmarkPlugin,org.gradle.api.Project)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin: void apply$lambda-0(androidx.benchmark.gradle.BenchmarkPlugin,org.gradle.api.Project,org.gradle.api.plugins.AppliedPlugin)>, methodtype: void __METHODTYPE__(org.gradle.api.plugins.AppliedPlugin));

        interfaceinvoke $r2.<org.gradle.api.plugins.PluginManager: void withPlugin(java.lang.String,org.gradle.api.Action)>("com.android.application", $r3);

        $r4 = interfaceinvoke r1.<org.gradle.api.Project: org.gradle.api.plugins.PluginManager getPluginManager()>();

        $r5 = dynamicinvoke "execute" <org.gradle.api.Action (androidx.benchmark.gradle.BenchmarkPlugin,org.gradle.api.Project)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin: void apply$lambda-1(androidx.benchmark.gradle.BenchmarkPlugin,org.gradle.api.Project,org.gradle.api.plugins.AppliedPlugin)>, methodtype: void __METHODTYPE__(org.gradle.api.plugins.AppliedPlugin));

        interfaceinvoke $r4.<org.gradle.api.plugins.PluginManager: void withPlugin(java.lang.String,org.gradle.api.Action)>("com.android.library", $r5);

        $r6 = dynamicinvoke "execute" <org.gradle.api.Action (androidx.benchmark.gradle.BenchmarkPlugin)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin: void apply$lambda-2(androidx.benchmark.gradle.BenchmarkPlugin,org.gradle.api.Project)>, methodtype: void __METHODTYPE__(org.gradle.api.Project));

        interfaceinvoke r1.<org.gradle.api.Project: void afterEvaluate(org.gradle.api.Action)>($r6);

        return;
    }

    private final void configureWithAndroidPlugin(org.gradle.api.Project)
    {
        androidx.benchmark.gradle.BenchmarkPlugin r0;
        org.gradle.api.Project r1;
        com.android.build.gradle.TestedExtension r2;
        boolean $z0;
        org.gradle.api.plugins.ExtensionContainer $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.benchmark.gradle.BenchmarkPlugin;

        r1 := @parameter0: org.gradle.api.Project;

        $z0 = r0.<androidx.benchmark.gradle.BenchmarkPlugin: boolean foundAndroidPlugin>;

        if $z0 != 0 goto label1;

        r0.<androidx.benchmark.gradle.BenchmarkPlugin: boolean foundAndroidPlugin> = 1;

        $r3 = interfaceinvoke r1.<org.gradle.api.Project: org.gradle.api.plugins.ExtensionContainer getExtensions()>();

        $r4 = interfaceinvoke $r3.<org.gradle.api.plugins.ExtensionContainer: java.lang.Object getByType(java.lang.Class)>(class "Lcom/android/build/gradle/TestedExtension;");

        r2 = (com.android.build.gradle.TestedExtension) $r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "extension");

        specialinvoke r0.<androidx.benchmark.gradle.BenchmarkPlugin: void configureWithAndroidExtension(org.gradle.api.Project,com.android.build.gradle.TestedExtension)>(r1, r2);

     label1:
        return;
    }

    private final void configureWithAndroidExtension(org.gradle.api.Project, com.android.build.gradle.TestedExtension)
    {
        androidx.benchmark.gradle.BenchmarkPlugin r0;
        org.gradle.api.Project r1, $r10, $r11, $r29, $r33, $r40;
        com.android.build.gradle.TestedExtension r2, r43;
        com.android.build.gradle.internal.dsl.DefaultConfig r3;
        java.lang.String r4, $r17, $r20, $r21, $r39;
        java.util.Map r5, $r37;
        org.gradle.api.DomainObjectSet r6, $r44;
        org.gradle.api.NamedDomainObjectContainer $r8;
        org.gradle.api.Action $r9, $r27, $r32, $r36;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.gradle.api.tasks.TaskContainer $r12, $r30, $r34, $r41;
        java.lang.Object $r13, $r38, $r42;
        org.gradle.api.tasks.StopExecutionException $r14;
        java.lang.StringBuilder $r15, $r16, $r18, $r19;
        com.android.build.gradle.LibraryExtension $r22;
        org.gradle.api.internal.DefaultDomainObjectSet $r23;
        kotlin.jvm.internal.Ref$BooleanRef $r24, r45;
        androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4 $r25;
        kotlin.jvm.functions.Function1 $r26;
        com.android.build.gradle.AppExtension $r28;
        org.gradle.api.tasks.TaskProvider $r31, $r35;

        r0 := @this: androidx.benchmark.gradle.BenchmarkPlugin;

        r1 := @parameter0: org.gradle.api.Project;

        r2 := @parameter1: com.android.build.gradle.TestedExtension;

        r3 = virtualinvoke r2.<com.android.build.gradle.TestedExtension: com.android.build.gradle.internal.dsl.DefaultConfig getDefaultConfig()>();

        r4 = "release";

        r5 = virtualinvoke r3.<com.android.build.gradle.internal.dsl.DefaultConfig: java.util.Map getTestInstrumentationRunnerArguments()>();

        virtualinvoke r3.<com.android.build.gradle.internal.dsl.DefaultConfig: com.android.builder.model.ProductFlavor setTestInstrumentationRunner(java.lang.String)>("androidx.benchmark.junit4.AndroidBenchmarkRunner");

        $r8 = virtualinvoke r2.<com.android.build.gradle.TestedExtension: org.gradle.api.NamedDomainObjectContainer getBuildTypes()>();

        $r9 = dynamicinvoke "execute" <org.gradle.api.Action (java.lang.String,com.android.build.gradle.TestedExtension)>(r4, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin: void configureWithAndroidExtension$lambda-3(java.lang.String,com.android.build.gradle.TestedExtension,com.android.build.gradle.internal.dsl.BuildType)>, methodtype: void __METHODTYPE__(com.android.build.gradle.internal.dsl.BuildType));

        interfaceinvoke $r8.<org.gradle.api.NamedDomainObjectContainer: void configureEach(org.gradle.api.Action)>($r9);

        specialinvoke r0.<androidx.benchmark.gradle.BenchmarkPlugin: void configureTestBuildType(com.android.build.gradle.TestedExtension,java.lang.String)>(r2, r4);

        $r10 = interfaceinvoke r1.<org.gradle.api.Project: org.gradle.api.Project getRootProject()>();

        $z0 = interfaceinvoke $r10.<org.gradle.api.Project: boolean hasProperty(java.lang.String)>("android.injected.invoked.from.ide");

        if $z0 != 0 goto label1;

        $z3 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("androidx.benchmark.output.enable");

        if $z3 != 0 goto label1;

        virtualinvoke r3.<com.android.build.gradle.internal.dsl.DefaultConfig: void testInstrumentationRunnerArgument(java.lang.String,java.lang.String)>("androidx.benchmark.output.enable", "true");

        $r37 = interfaceinvoke r1.<org.gradle.api.Project: java.util.Map getProperties()>();

        $r38 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>("android.enableAdditionalTestOutput");

        $r39 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r38);

        $z4 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r39);

        if $z4 != 0 goto label1;

        virtualinvoke r3.<com.android.build.gradle.internal.dsl.DefaultConfig: void testInstrumentationRunnerArgument(java.lang.String,java.lang.String)>("no-isolated-storage", "1");

     label1:
        $r40 = interfaceinvoke r1.<org.gradle.api.Project: org.gradle.api.Project getRootProject()>();

        $r41 = interfaceinvoke $r40.<org.gradle.api.Project: org.gradle.api.tasks.TaskContainer getTasks()>();

        $r42 = interfaceinvoke $r41.<org.gradle.api.tasks.TaskContainer: java.lang.Object findByName(java.lang.String)>("lockClocks");

        if $r42 != null goto label2;

        $r33 = interfaceinvoke r1.<org.gradle.api.Project: org.gradle.api.Project getRootProject()>();

        $r34 = interfaceinvoke $r33.<org.gradle.api.Project: org.gradle.api.tasks.TaskContainer getTasks()>();

        $r35 = interfaceinvoke $r34.<org.gradle.api.tasks.TaskContainer: org.gradle.api.tasks.TaskProvider register(java.lang.String,java.lang.Class)>("lockClocks", class "Landroidx/benchmark/gradle/LockClocksTask;");

        $r36 = dynamicinvoke "execute" <org.gradle.api.Action (com.android.build.gradle.TestedExtension)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin: void configureWithAndroidExtension$lambda-4(com.android.build.gradle.TestedExtension,androidx.benchmark.gradle.LockClocksTask)>, methodtype: void __METHODTYPE__(androidx.benchmark.gradle.LockClocksTask));

        interfaceinvoke $r35.<org.gradle.api.tasks.TaskProvider: void configure(org.gradle.api.Action)>($r36);

     label2:
        $r11 = interfaceinvoke r1.<org.gradle.api.Project: org.gradle.api.Project getRootProject()>();

        $r12 = interfaceinvoke $r11.<org.gradle.api.Project: org.gradle.api.tasks.TaskContainer getTasks()>();

        $r13 = interfaceinvoke $r12.<org.gradle.api.tasks.TaskContainer: java.lang.Object findByName(java.lang.String)>("unlockClocks");

        if $r13 != null goto label3;

        $r29 = interfaceinvoke r1.<org.gradle.api.Project: org.gradle.api.Project getRootProject()>();

        $r30 = interfaceinvoke $r29.<org.gradle.api.Project: org.gradle.api.tasks.TaskContainer getTasks()>();

        $r31 = interfaceinvoke $r30.<org.gradle.api.tasks.TaskContainer: org.gradle.api.tasks.TaskProvider register(java.lang.String,java.lang.Class)>("unlockClocks", class "Landroidx/benchmark/gradle/UnlockClocksTask;");

        $r32 = dynamicinvoke "execute" <org.gradle.api.Action (com.android.build.gradle.TestedExtension)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin: void configureWithAndroidExtension$lambda-5(com.android.build.gradle.TestedExtension,androidx.benchmark.gradle.UnlockClocksTask)>, methodtype: void __METHODTYPE__(androidx.benchmark.gradle.UnlockClocksTask));

        interfaceinvoke $r31.<org.gradle.api.tasks.TaskProvider: void configure(org.gradle.api.Action)>($r32);

     label3:
        r43 = r2;

        $z1 = r43 instanceof com.android.build.gradle.AppExtension;

        if $z1 == 0 goto label4;

        $r28 = (com.android.build.gradle.AppExtension) r2;

        $r44 = virtualinvoke $r28.<com.android.build.gradle.AppExtension: org.gradle.api.DomainObjectSet getApplicationVariants()>();

        goto label6;

     label4:
        $z2 = r43 instanceof com.android.build.gradle.LibraryExtension;

        if $z2 == 0 goto label5;

        $r22 = (com.android.build.gradle.LibraryExtension) r2;

        $r23 = virtualinvoke $r22.<com.android.build.gradle.LibraryExtension: org.gradle.api.internal.DefaultDomainObjectSet getLibraryVariants()>();

        $r44 = (org.gradle.api.DomainObjectSet) $r23;

        goto label6;

     label5:
        $r14 = new org.gradle.api.tasks.StopExecutionException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing required Android extension in project ");

        $r17 = interfaceinvoke r1.<org.gradle.api.Project: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", this typically\n                    means you are missing the required com.android.application or\n                    com.android.library plugins or they could not be found. The\n                    androidx.benchmark plugin currently only supports android application or\n                    library modules. Ensure that the required plugin is applied in the project\n                    build.gradle file.\n                ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r20);

        specialinvoke $r14.<org.gradle.api.tasks.StopExecutionException: void <init>(java.lang.String)>($r21);

        throw $r14;

     label6:
        r6 = $r44;

        $r24 = new kotlin.jvm.internal.Ref$BooleanRef;

        specialinvoke $r24.<kotlin.jvm.internal.Ref$BooleanRef: void <init>()>();

        r45 = $r24;

        $r25 = new androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4;

        specialinvoke $r25.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: void <init>(kotlin.jvm.internal.Ref$BooleanRef,org.gradle.api.Project,com.android.build.gradle.internal.dsl.DefaultConfig,com.android.build.gradle.TestedExtension)>(r45, r1, r3, r2);

        $r26 = (kotlin.jvm.functions.Function1) $r25;

        $r27 = dynamicinvoke "execute" <org.gradle.api.Action (kotlin.jvm.functions.Function1)>($r26) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin: void configureWithAndroidExtension$lambda-6(kotlin.jvm.functions.Function1,java.lang.Object)>, methodtype: void __METHODTYPE__(java.lang.Object));

        interfaceinvoke r6.<org.gradle.api.DomainObjectSet: void all(org.gradle.api.Action)>($r27);

        return;
    }

    private final void configureTestBuildType(com.android.build.gradle.TestedExtension, java.lang.String)
    {
        androidx.benchmark.gradle.BenchmarkPlugin r0;
        com.android.build.gradle.TestedExtension $r1;
        java.lang.String r2, $r6, $r8, r12;
        java.util.List r3;
        int i0, i1;
        java.lang.CharSequence $r4;
        java.lang.Object $r5, $r7;
        org.gradle.api.NamedDomainObjectContainer $r9;
        org.gradle.api.NamedDomainObjectProvider $r10;
        org.gradle.api.Action $r11;
        char[] r13;

        r0 := @this: androidx.benchmark.gradle.BenchmarkPlugin;

        $r1 := @parameter0: com.android.build.gradle.TestedExtension;

        r2 := @parameter1: java.lang.String;

        r12 = <com.android.builder.model.Version: java.lang.String ANDROID_GRADLE_PLUGIN_VERSION>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r12, "ANDROID_GRADLE_PLUGIN_VERSION");

        $r4 = (java.lang.CharSequence) r12;

        r13 = newarray (char)[1];

        r13[0] = 46;

        r3 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,char[],boolean,int,int,java.lang.Object)>($r4, r13, 0, 0, 6, null);

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.String) $r5;

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(1);

        $r8 = (java.lang.String) $r7;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        if i1 > 3 goto label1;

        if i1 != 3 goto label2;

        if i0 < 6 goto label2;

     label1:
        virtualinvoke $r1.<com.android.build.gradle.TestedExtension: void setTestBuildType(java.lang.String)>(r2);

        $r9 = virtualinvoke $r1.<com.android.build.gradle.TestedExtension: org.gradle.api.NamedDomainObjectContainer getBuildTypes()>();

        $r10 = interfaceinvoke $r9.<org.gradle.api.NamedDomainObjectContainer: org.gradle.api.NamedDomainObjectProvider named(java.lang.String)>(r2);

        $r11 = dynamicinvoke "execute" <org.gradle.api.Action ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin: void configureTestBuildType$lambda-7(com.android.build.gradle.internal.dsl.BuildType)>, methodtype: void __METHODTYPE__(com.android.build.gradle.internal.dsl.BuildType));

        interfaceinvoke $r10.<org.gradle.api.NamedDomainObjectProvider: void configure(org.gradle.api.Action)>($r11);

     label2:
        return;
    }

    private static final void apply$lambda-0(androidx.benchmark.gradle.BenchmarkPlugin, org.gradle.api.Project, org.gradle.api.plugins.AppliedPlugin)
    {
        androidx.benchmark.gradle.BenchmarkPlugin r0;
        org.gradle.api.Project $r1;
        org.gradle.api.plugins.AppliedPlugin r2;

        r0 := @parameter0: androidx.benchmark.gradle.BenchmarkPlugin;

        $r1 := @parameter1: org.gradle.api.Project;

        r2 := @parameter2: org.gradle.api.plugins.AppliedPlugin;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$project");

        specialinvoke r0.<androidx.benchmark.gradle.BenchmarkPlugin: void configureWithAndroidPlugin(org.gradle.api.Project)>($r1);

        return;
    }

    private static final void apply$lambda-1(androidx.benchmark.gradle.BenchmarkPlugin, org.gradle.api.Project, org.gradle.api.plugins.AppliedPlugin)
    {
        androidx.benchmark.gradle.BenchmarkPlugin r0;
        org.gradle.api.Project $r1;
        org.gradle.api.plugins.AppliedPlugin r2;

        r0 := @parameter0: androidx.benchmark.gradle.BenchmarkPlugin;

        $r1 := @parameter1: org.gradle.api.Project;

        r2 := @parameter2: org.gradle.api.plugins.AppliedPlugin;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$project");

        specialinvoke r0.<androidx.benchmark.gradle.BenchmarkPlugin: void configureWithAndroidPlugin(org.gradle.api.Project)>($r1);

        return;
    }

    private static final void apply$lambda-2(androidx.benchmark.gradle.BenchmarkPlugin, org.gradle.api.Project)
    {
        androidx.benchmark.gradle.BenchmarkPlugin r0;
        org.gradle.api.Project r1;
        boolean $z0;
        org.gradle.api.tasks.StopExecutionException $r2;

        r0 := @parameter0: androidx.benchmark.gradle.BenchmarkPlugin;

        r1 := @parameter1: org.gradle.api.Project;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $z0 = r0.<androidx.benchmark.gradle.BenchmarkPlugin: boolean foundAndroidPlugin>;

        if $z0 != 0 goto label1;

        $r2 = new org.gradle.api.tasks.StopExecutionException;

        specialinvoke $r2.<org.gradle.api.tasks.StopExecutionException: void <init>(java.lang.String)>("A required plugin, com.android.application or com.android.library was not\n                        found. The androidx.benchmark plugin currently only supports android\n                        application or library modules. Ensure that a required plugin is applied\n                        in the project build.gradle file.");

        throw $r2;

     label1:
        return;
    }

    private static final void configureWithAndroidExtension$lambda-3(java.lang.String, com.android.build.gradle.TestedExtension, com.android.build.gradle.internal.dsl.BuildType)
    {
        java.lang.String $r0, $r3;
        com.android.build.gradle.TestedExtension $r1;
        com.android.build.gradle.internal.dsl.BuildType r2;
        boolean $z0;
        org.gradle.api.NamedDomainObjectContainer $r4;
        java.lang.Object $r5;
        com.android.builder.model.SigningConfig $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: com.android.build.gradle.TestedExtension;

        r2 := @parameter2: com.android.build.gradle.internal.dsl.BuildType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$testBuildType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$extension");

        virtualinvoke r2.<com.android.build.gradle.internal.dsl.BuildType: void setTestCoverageEnabled(boolean)>(0);

        $r3 = virtualinvoke r2.<com.android.build.gradle.internal.dsl.BuildType: java.lang.String getName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r0);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r1.<com.android.build.gradle.TestedExtension: org.gradle.api.NamedDomainObjectContainer getSigningConfigs()>();

        $r5 = interfaceinvoke $r4.<org.gradle.api.NamedDomainObjectContainer: java.lang.Object getByName(java.lang.String)>("debug");

        $r6 = (com.android.builder.model.SigningConfig) $r5;

        virtualinvoke r2.<com.android.build.gradle.internal.dsl.BuildType: com.android.builder.model.BuildType setSigningConfig(com.android.builder.model.SigningConfig)>($r6);

     label1:
        return;
    }

    private static final void configureWithAndroidExtension$lambda-4(com.android.build.gradle.TestedExtension, androidx.benchmark.gradle.LockClocksTask)
    {
        com.android.build.gradle.TestedExtension $r0;
        androidx.benchmark.gradle.LockClocksTask r1;
        org.gradle.api.provider.Property $r2;
        java.io.File $r3;
        java.lang.String $r4;

        $r0 := @parameter0: com.android.build.gradle.TestedExtension;

        r1 := @parameter1: androidx.benchmark.gradle.LockClocksTask;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$extension");

        $r2 = virtualinvoke r1.<androidx.benchmark.gradle.LockClocksTask: org.gradle.api.provider.Property getAdbPath()>();

        $r3 = virtualinvoke $r0.<com.android.build.gradle.TestedExtension: java.io.File getAdbExecutable()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r2.<org.gradle.api.provider.Property: void set(java.lang.Object)>($r4);

        return;
    }

    private static final void configureWithAndroidExtension$lambda-5(com.android.build.gradle.TestedExtension, androidx.benchmark.gradle.UnlockClocksTask)
    {
        com.android.build.gradle.TestedExtension $r0;
        androidx.benchmark.gradle.UnlockClocksTask r1;
        org.gradle.api.provider.Property $r2;
        java.io.File $r3;
        java.lang.String $r4;

        $r0 := @parameter0: com.android.build.gradle.TestedExtension;

        r1 := @parameter1: androidx.benchmark.gradle.UnlockClocksTask;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$extension");

        $r2 = virtualinvoke r1.<androidx.benchmark.gradle.UnlockClocksTask: org.gradle.api.provider.Property getAdbPath()>();

        $r3 = virtualinvoke $r0.<com.android.build.gradle.TestedExtension: java.io.File getAdbExecutable()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r2.<org.gradle.api.provider.Property: void set(java.lang.Object)>($r4);

        return;
    }

    private static final void configureWithAndroidExtension$lambda-6(kotlin.jvm.functions.Function1, java.lang.Object)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$tmp0");

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        return;
    }

    private static final void configureTestBuildType$lambda-7(com.android.build.gradle.internal.dsl.BuildType)
    {
        com.android.build.gradle.internal.dsl.BuildType r0;

        r0 := @parameter0: com.android.build.gradle.internal.dsl.BuildType;

        virtualinvoke r0.<com.android.build.gradle.internal.dsl.BuildType: void setDefault(boolean)>(1);

        return;
    }

    public volatile void apply(java.lang.Object)
    {
        androidx.benchmark.gradle.BenchmarkPlugin r0;
        java.lang.Object r1;
        org.gradle.api.Project $r2;

        r0 := @this: androidx.benchmark.gradle.BenchmarkPlugin;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.gradle.api.Project) r1;

        virtualinvoke r0.<androidx.benchmark.gradle.BenchmarkPlugin: void apply(org.gradle.api.Project)>($r2);

        return;
    }

androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4
<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: kotlin.jvm.internal.Ref$BooleanRef $applied>
<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: org.gradle.api.Project $project>
<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: com.android.build.gradle.internal.dsl.DefaultConfig $defaultConfig>
<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: com.android.build.gradle.TestedExtension $extension>
    void <init>(kotlin.jvm.internal.Ref$BooleanRef, org.gradle.api.Project, com.android.build.gradle.internal.dsl.DefaultConfig, com.android.build.gradle.TestedExtension)
    {
        androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4 r0;
        kotlin.jvm.internal.Ref$BooleanRef $r1;
        org.gradle.api.Project $r2;
        com.android.build.gradle.internal.dsl.DefaultConfig $r3;
        com.android.build.gradle.TestedExtension $r4;

        r0 := @this: androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$BooleanRef;

        $r2 := @parameter1: org.gradle.api.Project;

        $r3 := @parameter2: com.android.build.gradle.internal.dsl.DefaultConfig;

        $r4 := @parameter3: com.android.build.gradle.TestedExtension;

        r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: kotlin.jvm.internal.Ref$BooleanRef $applied> = $r1;

        r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: org.gradle.api.Project $project> = $r2;

        r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: com.android.build.gradle.internal.dsl.DefaultConfig $defaultConfig> = $r3;

        r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: com.android.build.gradle.TestedExtension $extension> = $r4;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Object)
    {
        androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4 r0;
        java.lang.Object r1, $r6;
        kotlin.jvm.internal.Ref$BooleanRef $r2, $r3;
        boolean $z0, $z1, $z2;
        org.gradle.api.Project $r4, $r8, $r10, $r19, $r25, $r28, $r31;
        java.util.Map $r5;
        java.lang.String $r7, $r15, $r20, $r23, $r24, r35, r36;
        java.io.File $r9;
        org.gradle.api.tasks.TaskContainer $r11, $r26, $r32;
        org.gradle.api.tasks.TaskProvider $r12, $r27, $r33;
        org.gradle.api.Action $r13, $r30, $r34;
        com.android.build.gradle.internal.dsl.DefaultConfig $r14;
        org.gradle.api.tasks.StopExecutionException $r16;
        java.lang.StringBuilder $r17, $r18, $r21, $r22;
        com.android.build.gradle.TestedExtension $r29;

        r0 := @this: androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: kotlin.jvm.internal.Ref$BooleanRef $applied>;

        $z0 = $r2.<kotlin.jvm.internal.Ref$BooleanRef: boolean element>;

        if $z0 != 0 goto label3;

        $r3 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: kotlin.jvm.internal.Ref$BooleanRef $applied>;

        $r3.<kotlin.jvm.internal.Ref$BooleanRef: boolean element> = 1;

        $r4 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: org.gradle.api.Project $project>;

        $r5 = interfaceinvoke $r4.<org.gradle.api.Project: java.util.Map getProperties()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("android.enableAdditionalTestOutput");

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r7);

        if $z1 != 0 goto label1;

        $r25 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: org.gradle.api.Project $project>;

        $r26 = interfaceinvoke $r25.<org.gradle.api.Project: org.gradle.api.tasks.TaskContainer getTasks()>();

        $r27 = interfaceinvoke $r26.<org.gradle.api.tasks.TaskContainer: org.gradle.api.tasks.TaskProvider register(java.lang.String,java.lang.Class)>("benchmarkReport", class "Landroidx/benchmark/gradle/BenchmarkReportTask;");

        $r29 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: com.android.build.gradle.TestedExtension $extension>;

        $r28 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: org.gradle.api.Project $project>;

        $r30 = dynamicinvoke "execute" <org.gradle.api.Action (com.android.build.gradle.TestedExtension,org.gradle.api.Project)>($r29, $r28) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: void invoke$lambda-0(com.android.build.gradle.TestedExtension,org.gradle.api.Project,androidx.benchmark.gradle.BenchmarkReportTask)>, methodtype: void __METHODTYPE__(androidx.benchmark.gradle.BenchmarkReportTask));

        interfaceinvoke $r27.<org.gradle.api.tasks.TaskProvider: void configure(org.gradle.api.Action)>($r30);

        $r31 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: org.gradle.api.Project $project>;

        $r32 = interfaceinvoke $r31.<org.gradle.api.Project: org.gradle.api.tasks.TaskContainer getTasks()>();

        $r33 = interfaceinvoke $r32.<org.gradle.api.tasks.TaskContainer: org.gradle.api.tasks.TaskProvider named(java.lang.String)>("connectedAndroidTest");

        $r34 = dynamicinvoke "execute" <org.gradle.api.Action ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: void invoke$lambda-1(org.gradle.api.Task)>, methodtype: void __METHODTYPE__(org.gradle.api.Task));

        interfaceinvoke $r33.<org.gradle.api.tasks.TaskProvider: void configure(org.gradle.api.Action)>($r34);

        goto label2;

     label1:
        $r8 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: org.gradle.api.Project $project>;

        $r9 = interfaceinvoke $r8.<org.gradle.api.Project: java.io.File getBuildDir()>();

        r35 = virtualinvoke $r9.<java.io.File: java.lang.String getPath()>();

        $r10 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: org.gradle.api.Project $project>;

        $r11 = interfaceinvoke $r10.<org.gradle.api.Project: org.gradle.api.tasks.TaskContainer getTasks()>();

        $r12 = interfaceinvoke $r11.<org.gradle.api.tasks.TaskContainer: org.gradle.api.tasks.TaskProvider named(java.lang.String)>("connectedAndroidTest");

        $r13 = dynamicinvoke "execute" <org.gradle.api.Action (java.lang.String)>(r35) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: void invoke$lambda-3(java.lang.String,org.gradle.api.Task)>, methodtype: void __METHODTYPE__(org.gradle.api.Task));

        interfaceinvoke $r12.<org.gradle.api.tasks.TaskProvider: void configure(org.gradle.api.Action)>($r13);

     label2:
        r36 = "androidx.benchmark.AndroidBenchmarkRunner";

        $r14 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: com.android.build.gradle.internal.dsl.DefaultConfig $defaultConfig>;

        $r15 = virtualinvoke $r14.<com.android.build.gradle.internal.dsl.DefaultConfig: java.lang.String getTestInstrumentationRunner()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r15, r36);

        if $z2 == 0 goto label3;

        $r16 = new org.gradle.api.tasks.StopExecutionException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected usage of the testInstrumentationRunner,\n                            androidx.benchmark.AndroidBenchmarkRunner, in project ");

        $r19 = r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: org.gradle.api.Project $project>;

        $r20 = interfaceinvoke $r19.<org.gradle.api.Project: java.lang.String getName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",\n                            which is no longer valid as it has been moved to\n                            androidx.benchmark.junit4.AndroidBenchmarkRunner.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r23);

        specialinvoke $r16.<org.gradle.api.tasks.StopExecutionException: void <init>(java.lang.String)>($r24);

        throw $r16;

     label3:
        return;
    }

    private static final void invoke$lambda-0(com.android.build.gradle.TestedExtension, org.gradle.api.Project, androidx.benchmark.gradle.BenchmarkReportTask)
    {
        com.android.build.gradle.TestedExtension $r0;
        org.gradle.api.Project $r1;
        androidx.benchmark.gradle.BenchmarkReportTask r2;
        java.lang.Object[] r3;
        org.gradle.api.provider.Property $r4;
        java.io.File $r5;
        java.lang.String $r6;
        org.gradle.api.tasks.TaskContainer $r7;
        org.gradle.api.tasks.TaskProvider $r8;

        $r0 := @parameter0: com.android.build.gradle.TestedExtension;

        $r1 := @parameter1: org.gradle.api.Project;

        r2 := @parameter2: androidx.benchmark.gradle.BenchmarkReportTask;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$extension");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$project");

        $r4 = virtualinvoke r2.<androidx.benchmark.gradle.BenchmarkReportTask: org.gradle.api.provider.Property getAdbPath()>();

        $r5 = virtualinvoke $r0.<com.android.build.gradle.TestedExtension: java.io.File getAdbExecutable()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r4.<org.gradle.api.provider.Property: void set(java.lang.Object)>($r6);

        r3 = newarray (java.lang.Object)[1];

        $r7 = interfaceinvoke $r1.<org.gradle.api.Project: org.gradle.api.tasks.TaskContainer getTasks()>();

        $r8 = interfaceinvoke $r7.<org.gradle.api.tasks.TaskContainer: org.gradle.api.tasks.TaskProvider named(java.lang.String)>("connectedAndroidTest");

        r3[0] = $r8;

        virtualinvoke r2.<androidx.benchmark.gradle.BenchmarkReportTask: org.gradle.api.Task dependsOn(java.lang.Object[])>(r3);

        return;
    }

    private static final void invoke$lambda-1(org.gradle.api.Task)
    {
        org.gradle.api.Task r0;
        java.lang.Object[] r1;

        r0 := @parameter0: org.gradle.api.Task;

        r1 = newarray (java.lang.Object)[1];

        r1[0] = "benchmarkReport";

        interfaceinvoke r0.<org.gradle.api.Task: org.gradle.api.Task finalizedBy(java.lang.Object[])>(r1);

        return;
    }

    private static final void invoke$lambda-3$lambda-2(java.lang.String, org.gradle.api.Task)
    {
        java.lang.String $r0, $r7;
        org.gradle.api.Task r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        com.android.ddmlib.Log$LogLevel $r3;

        $r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.gradle.api.Task;

        $r3 = <com.android.ddmlib.Log$LogLevel: com.android.ddmlib.Log$LogLevel INFO>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Benchmark report files generated at ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/outputs/connected_android_test_additional_output");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.ddmlib.Log: void logAndDisplay(com.android.ddmlib.Log$LogLevel,java.lang.String,java.lang.String)>($r3, "Benchmark", $r7);

        return;
    }

    private static final void invoke$lambda-3(java.lang.String, org.gradle.api.Task)
    {
        java.lang.String $r0;
        org.gradle.api.Task r1;
        org.gradle.api.Action $r2;

        $r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.gradle.api.Task;

        $r2 = dynamicinvoke "execute" <org.gradle.api.Action (java.lang.String)>($r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: void invoke$lambda-3$lambda-2(java.lang.String,org.gradle.api.Task)>, methodtype: void __METHODTYPE__(org.gradle.api.Task));

        interfaceinvoke r1.<org.gradle.api.Task: org.gradle.api.Task doLast(org.gradle.api.Action)>($r2);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4 r0;
        java.lang.Object r1;
        kotlin.Unit $r2;

        r0 := @this: androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<androidx.benchmark.gradle.BenchmarkPlugin$configureWithAndroidExtension$4: void invoke(java.lang.Object)>(r1);

        $r2 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r2;
    }

