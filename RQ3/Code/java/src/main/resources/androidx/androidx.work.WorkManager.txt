androidx.work.WorkManager
    public static androidx.work.WorkManager getInstance()
    {
        androidx.work.impl.WorkManagerImpl r0;
        java.lang.IllegalStateException $r1;

        r0 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance()>();

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("WorkManager is not initialized properly.  The most likely cause is that you disabled WorkManagerInitializer in your manifest but forgot to call WorkManager#initialize in your Application#onCreate or a ContentProvider.");

        throw $r1;

     label1:
        return r0;
    }

    public static androidx.work.WorkManager getInstance(android.content.Context)
    {
        android.content.Context r0;
        androidx.work.impl.WorkManagerImpl $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <androidx.work.impl.WorkManagerImpl: androidx.work.impl.WorkManagerImpl getInstance(android.content.Context)>(r0);

        return $r1;
    }

    public static void initialize(android.content.Context, androidx.work.Configuration)
    {
        android.content.Context r0;
        androidx.work.Configuration r1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.work.Configuration;

        staticinvoke <androidx.work.impl.WorkManagerImpl: void initialize(android.content.Context,androidx.work.Configuration)>(r0, r1);

        return;
    }

    public static boolean isInitialized()
    {
        boolean $z0;

        $z0 = staticinvoke <androidx.work.impl.WorkManagerImpl: boolean isInitialized()>();

        return $z0;
    }

<androidx.work.WorkManager: androidx.work.Configuration getConfiguration()>
    public final androidx.work.Operation enqueue(androidx.work.WorkRequest)
    {
        androidx.work.WorkManager r0;
        androidx.work.WorkRequest r1;
        java.util.List $r2;
        androidx.work.Operation $r3;

        r0 := @this: androidx.work.WorkManager;

        r1 := @parameter0: androidx.work.WorkRequest;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        $r3 = virtualinvoke r0.<androidx.work.WorkManager: androidx.work.Operation enqueue(java.util.List)>($r2);

        return $r3;
    }

<androidx.work.WorkManager: androidx.work.Operation enqueue(java.util.List)>
    public final androidx.work.WorkContinuation beginWith(androidx.work.OneTimeWorkRequest)
    {
        androidx.work.WorkManager r0;
        androidx.work.OneTimeWorkRequest r1;
        java.util.List $r2;
        androidx.work.WorkContinuation $r3;

        r0 := @this: androidx.work.WorkManager;

        r1 := @parameter0: androidx.work.OneTimeWorkRequest;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        $r3 = virtualinvoke r0.<androidx.work.WorkManager: androidx.work.WorkContinuation beginWith(java.util.List)>($r2);

        return $r3;
    }

<androidx.work.WorkManager: androidx.work.WorkContinuation beginWith(java.util.List)>
    public final androidx.work.WorkContinuation beginUniqueWork(java.lang.String, androidx.work.ExistingWorkPolicy, androidx.work.OneTimeWorkRequest)
    {
        androidx.work.WorkManager r0;
        java.lang.String r1;
        androidx.work.ExistingWorkPolicy r2;
        androidx.work.OneTimeWorkRequest r3;
        java.util.List $r4;
        androidx.work.WorkContinuation $r5;

        r0 := @this: androidx.work.WorkManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.ExistingWorkPolicy;

        r3 := @parameter2: androidx.work.OneTimeWorkRequest;

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r3);

        $r5 = virtualinvoke r0.<androidx.work.WorkManager: androidx.work.WorkContinuation beginUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>(r1, r2, $r4);

        return $r5;
    }

<androidx.work.WorkManager: androidx.work.WorkContinuation beginUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>
    public androidx.work.Operation enqueueUniqueWork(java.lang.String, androidx.work.ExistingWorkPolicy, androidx.work.OneTimeWorkRequest)
    {
        androidx.work.WorkManager r0;
        java.lang.String r1;
        androidx.work.ExistingWorkPolicy r2;
        androidx.work.OneTimeWorkRequest r3;
        java.util.List $r4;
        androidx.work.Operation $r5;

        r0 := @this: androidx.work.WorkManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.ExistingWorkPolicy;

        r3 := @parameter2: androidx.work.OneTimeWorkRequest;

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r3);

        $r5 = virtualinvoke r0.<androidx.work.WorkManager: androidx.work.Operation enqueueUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>(r1, r2, $r4);

        return $r5;
    }

<androidx.work.WorkManager: androidx.work.Operation enqueueUniqueWork(java.lang.String,androidx.work.ExistingWorkPolicy,java.util.List)>
<androidx.work.WorkManager: androidx.work.Operation enqueueUniquePeriodicWork(java.lang.String,androidx.work.ExistingPeriodicWorkPolicy,androidx.work.PeriodicWorkRequest)>
<androidx.work.WorkManager: androidx.work.Operation cancelWorkById(java.util.UUID)>
<androidx.work.WorkManager: androidx.work.Operation cancelAllWorkByTag(java.lang.String)>
<androidx.work.WorkManager: androidx.work.Operation cancelUniqueWork(java.lang.String)>
<androidx.work.WorkManager: androidx.work.Operation cancelAllWork()>
<androidx.work.WorkManager: android.app.PendingIntent createCancelPendingIntent(java.util.UUID)>
<androidx.work.WorkManager: androidx.work.Operation pruneWork()>
<androidx.work.WorkManager: androidx.lifecycle.LiveData getLastCancelAllTimeMillisLiveData()>
<androidx.work.WorkManager: com.google.common.util.concurrent.ListenableFuture getLastCancelAllTimeMillis()>
<androidx.work.WorkManager: androidx.lifecycle.LiveData getWorkInfoByIdLiveData(java.util.UUID)>
<androidx.work.WorkManager: com.google.common.util.concurrent.ListenableFuture getWorkInfoById(java.util.UUID)>
<androidx.work.WorkManager: androidx.lifecycle.LiveData getWorkInfosByTagLiveData(java.lang.String)>
<androidx.work.WorkManager: com.google.common.util.concurrent.ListenableFuture getWorkInfosByTag(java.lang.String)>
<androidx.work.WorkManager: androidx.lifecycle.LiveData getWorkInfosForUniqueWorkLiveData(java.lang.String)>
<androidx.work.WorkManager: com.google.common.util.concurrent.ListenableFuture getWorkInfosForUniqueWork(java.lang.String)>
<androidx.work.WorkManager: androidx.lifecycle.LiveData getWorkInfosLiveData(androidx.work.WorkQuery)>
<androidx.work.WorkManager: com.google.common.util.concurrent.ListenableFuture getWorkInfos(androidx.work.WorkQuery)>
<androidx.work.WorkManager: com.google.common.util.concurrent.ListenableFuture updateWork(androidx.work.WorkRequest)>
    protected void <init>()
    {
        androidx.work.WorkManager r0;

        r0 := @this: androidx.work.WorkManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.work.WorkManager$UpdateResult
<androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult NOT_APPLIED>
<androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult APPLIED_IMMEDIATELY>
<androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult APPLIED_FOR_NEXT_RUN>
<androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult[] $VALUES>
    public static androidx.work.WorkManager$UpdateResult[] values()
    {
        androidx.work.WorkManager$UpdateResult[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.work.WorkManager$UpdateResult[]) $r1;

        return $r2;
    }

    public static androidx.work.WorkManager$UpdateResult valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.work.WorkManager$UpdateResult $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/work/WorkManager$UpdateResult;", r0);

        $r2 = (androidx.work.WorkManager$UpdateResult) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.work.WorkManager$UpdateResult r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.work.WorkManager$UpdateResult;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private static androidx.work.WorkManager$UpdateResult[] $values()
    {
        androidx.work.WorkManager$UpdateResult[] $r0;
        androidx.work.WorkManager$UpdateResult $r1, $r2, $r3;

        $r0 = newarray (androidx.work.WorkManager$UpdateResult)[3];

        $r1 = <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult NOT_APPLIED>;

        $r0[0] = $r1;

        $r2 = <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult APPLIED_IMMEDIATELY>;

        $r0[1] = $r2;

        $r3 = <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult APPLIED_FOR_NEXT_RUN>;

        $r0[2] = $r3;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.work.WorkManager$UpdateResult $r0, $r1, $r2;
        androidx.work.WorkManager$UpdateResult[] $r3;

        $r0 = new androidx.work.WorkManager$UpdateResult;

        specialinvoke $r0.<androidx.work.WorkManager$UpdateResult: void <init>(java.lang.String,int)>("NOT_APPLIED", 0);

        <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult NOT_APPLIED> = $r0;

        $r1 = new androidx.work.WorkManager$UpdateResult;

        specialinvoke $r1.<androidx.work.WorkManager$UpdateResult: void <init>(java.lang.String,int)>("APPLIED_IMMEDIATELY", 1);

        <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult APPLIED_IMMEDIATELY> = $r1;

        $r2 = new androidx.work.WorkManager$UpdateResult;

        specialinvoke $r2.<androidx.work.WorkManager$UpdateResult: void <init>(java.lang.String,int)>("APPLIED_FOR_NEXT_RUN", 2);

        <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult APPLIED_FOR_NEXT_RUN> = $r2;

        $r3 = staticinvoke <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult[] $values()>();

        <androidx.work.WorkManager$UpdateResult: androidx.work.WorkManager$UpdateResult[] $VALUES> = $r3;

        return;
    }

