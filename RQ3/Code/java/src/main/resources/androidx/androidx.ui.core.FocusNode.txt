androidx.ui.core.FocusNode
<androidx.ui.core.FocusNode: kotlin.jvm.functions.Function0 _recompose>
<androidx.ui.core.FocusNode: androidx.ui.focus.FocusDetailedState focusState>
<androidx.ui.core.FocusNode: androidx.ui.core.LayoutCoordinates layoutCoordinates>
<androidx.ui.core.FocusNode: java.util.Set focusableChildren>
<androidx.ui.core.FocusNode: androidx.ui.core.FocusNode focusedChild>
    public void <init>()
    {
        androidx.ui.core.FocusNode r0, r1;
        boolean z0;
        java.util.Set r2;
        androidx.ui.focus.FocusDetailedState $r3;
        java.util.LinkedHashSet $r4;

        r0 := @this: androidx.ui.core.FocusNode;

        specialinvoke r0.<androidx.ui.core.ComponentNode: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        $r3 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Inactive>;

        r0.<androidx.ui.core.FocusNode: androidx.ui.focus.FocusDetailedState focusState> = $r3;

        r1 = r0;

        z0 = 0;

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        r2 = (java.util.Set) $r4;

        r1.<androidx.ui.core.FocusNode: java.util.Set focusableChildren> = r2;

        return;
    }

    public final androidx.ui.core.Ref getRef()
    {
        androidx.ui.core.FocusNode r0;
        androidx.ui.core.Ref $r1;

        r0 := @this: androidx.ui.core.FocusNode;

        $r1 = (androidx.ui.core.Ref) null;

        return $r1;
    }

    public final void setRef(androidx.ui.core.Ref)
    {
        androidx.ui.core.FocusNode r0;
        androidx.ui.core.Ref r1, r2;

        r0 := @this: androidx.ui.core.FocusNode;

        r1 := @parameter0: androidx.ui.core.Ref;

        r2 = r1;

        if r2 != null goto label1;

        goto label2;

     label1:
        virtualinvoke r2.<androidx.ui.core.Ref: void setValue(java.lang.Object)>(r0);

     label2:
        return;
    }

    public final kotlin.jvm.functions.Function0 getRecompose()
    {
        androidx.ui.core.FocusNode r0;
        kotlin.jvm.internal.Ref$ObjectRef r1, $r2;
        kotlin.jvm.functions.Function0 $r3, $r5, $r7;
        java.lang.Object $r4, $r6;

        r0 := @this: androidx.ui.core.FocusNode;

        $r2 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r2.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r1 = $r2;

        $r3 = r0.<androidx.ui.core.FocusNode: kotlin.jvm.functions.Function0 _recompose>;

        r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r3;

        $r4 = r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r5 = (kotlin.jvm.functions.Function0) $r4;

        if $r5 != null goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("_recompose");

        throw null;

     label1:
        $r6 = r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r7 = (kotlin.jvm.functions.Function0) $r6;

        return $r7;
    }

    public final void setRecompose(kotlin.jvm.functions.Function0)
    {
        androidx.ui.core.FocusNode r0;
        kotlin.jvm.functions.Function0 r1;

        r0 := @this: androidx.ui.core.FocusNode;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        r0.<androidx.ui.core.FocusNode: kotlin.jvm.functions.Function0 _recompose> = r1;

        return;
    }

    public final androidx.ui.focus.FocusDetailedState getFocusState()
    {
        androidx.ui.core.FocusNode r0;
        androidx.ui.focus.FocusDetailedState $r1;

        r0 := @this: androidx.ui.core.FocusNode;

        $r1 = r0.<androidx.ui.core.FocusNode: androidx.ui.focus.FocusDetailedState focusState>;

        return $r1;
    }

    public final void setFocusState$ui_platform_release(androidx.ui.focus.FocusDetailedState)
    {
        androidx.ui.core.FocusNode r0;
        androidx.ui.focus.FocusDetailedState r1;

        r0 := @this: androidx.ui.core.FocusNode;

        r1 := @parameter0: androidx.ui.focus.FocusDetailedState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.ui.core.FocusNode: androidx.ui.focus.FocusDetailedState focusState> = r1;

        return;
    }

    public final androidx.ui.core.LayoutCoordinates getLayoutCoordinates()
    {
        androidx.ui.core.FocusNode r0;
        androidx.ui.core.LayoutCoordinates $r1;

        r0 := @this: androidx.ui.core.FocusNode;

        $r1 = r0.<androidx.ui.core.FocusNode: androidx.ui.core.LayoutCoordinates layoutCoordinates>;

        return $r1;
    }

    public final void setLayoutCoordinates(androidx.ui.core.LayoutCoordinates)
    {
        androidx.ui.core.FocusNode r0;
        androidx.ui.core.LayoutCoordinates r1;

        r0 := @this: androidx.ui.core.FocusNode;

        r1 := @parameter0: androidx.ui.core.LayoutCoordinates;

        r0.<androidx.ui.core.FocusNode: androidx.ui.core.LayoutCoordinates layoutCoordinates> = r1;

        return;
    }

    public static void getLayoutCoordinates$annotations()
    {
        return;
    }

    public void attach(androidx.ui.core.Owner)
    {
        androidx.ui.core.FocusNode r0, r3;
        androidx.ui.core.Owner r1;
        java.util.Set r2, $r5;

        r0 := @this: androidx.ui.core.FocusNode;

        r1 := @parameter0: androidx.ui.core.Owner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "owner");

        r3 = staticinvoke <androidx.ui.core.focus.FocusNodeUtilsKt: androidx.ui.core.FocusNode findParentFocusNode(androidx.ui.core.FocusNode)>(r0);

        if r3 != null goto label1;

        $r5 = (java.util.Set) null;

        goto label2;

     label1:
        $r5 = r3.<androidx.ui.core.FocusNode: java.util.Set focusableChildren>;

     label2:
        r2 = $r5;

        if r2 != null goto label3;

        goto label4;

     label3:
        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label4:
        specialinvoke r0.<androidx.ui.core.ComponentNode: void attach(androidx.ui.core.Owner)>(r1);

        return;
    }

    public void detach()
    {
        androidx.ui.core.FocusNode r0, r2;
        java.util.Set r1, $r4;

        r0 := @this: androidx.ui.core.FocusNode;

        specialinvoke r0.<androidx.ui.core.ComponentNode: void detach()>();

        r2 = staticinvoke <androidx.ui.core.focus.FocusNodeUtilsKt: androidx.ui.core.FocusNode findParentFocusNode(androidx.ui.core.FocusNode)>(r0);

        if r2 != null goto label1;

        $r4 = (java.util.Set) null;

        goto label2;

     label1:
        $r4 = r2.<androidx.ui.core.FocusNode: java.util.Set focusableChildren>;

     label2:
        r1 = $r4;

        if r1 != null goto label3;

        goto label4;

     label3:
        interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>(r0);

     label4:
        return;
    }

    public final void requestFocus(boolean)
    {
        androidx.ui.core.FocusNode r0, r2, r9;
        boolean z0, $z2, $z3;
        androidx.ui.focus.FocusDetailedState r1;
        int i0, $i1;
        int[] $r3;
        kotlin.jvm.functions.Function0 $r4;
        kotlin.NoWhenBranchMatchedException $r6;
        java.lang.Boolean $r7, r8;

        r0 := @this: androidx.ui.core.FocusNode;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<androidx.ui.core.FocusNode: androidx.ui.focus.FocusDetailedState getFocusState()>();

        $r3 = <androidx.ui.core.FocusNode$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r1.<androidx.ui.focus.FocusDetailedState: int ordinal()>();

        i0 = $r3[$i1];

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label01;
            case 3: goto label01;
            case 4: goto label02;
            case 5: goto label07;
            default: goto label10;
        };

     label01:
        return;

     label02:
        if z0 != 0 goto label11;

        r2 = r0.<androidx.ui.core.FocusNode: androidx.ui.core.FocusNode focusedChild>;

        if r2 != null goto label03;

        $r7 = (java.lang.Boolean) null;

        goto label04;

     label03:
        $z2 = specialinvoke r2.<androidx.ui.core.FocusNode: boolean clearFocus()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

     label04:
        r8 = $r7;

        if r8 != null goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = virtualinvoke r8.<java.lang.Boolean: boolean booleanValue()>();

     label06:
        if $z3 == 0 goto label11;

        specialinvoke r0.<androidx.ui.core.FocusNode: void grantFocus(boolean)>(z0);

        goto label11;

     label07:
        r9 = staticinvoke <androidx.ui.core.focus.FocusNodeUtilsKt: androidx.ui.core.FocusNode findParentFocusNode(androidx.ui.core.FocusNode)>(r0);

        if r9 != null goto label08;

        specialinvoke r0.<androidx.ui.core.FocusNode: void grantFocus(boolean)>(z0);

        $r4 = virtualinvoke r0.<androidx.ui.core.FocusNode: kotlin.jvm.functions.Function0 getRecompose()>();

        interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label09;

     label08:
        specialinvoke r9.<androidx.ui.core.FocusNode: boolean requestFocusForChild(androidx.ui.core.FocusNode,boolean)>(r0, z0);

     label09:
        goto label11;

     label10:
        $r6 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r6.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r6;

     label11:
        return;
    }

    public static void requestFocus$default(androidx.ui.core.FocusNode, boolean, int, java.lang.Object)
    {
        androidx.ui.core.FocusNode r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0;

        r0 := @parameter0: androidx.ui.core.FocusNode;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z0 = 1;

     label1:
        virtualinvoke r0.<androidx.ui.core.FocusNode: void requestFocus(boolean)>(z0);

        return;
    }

    public final boolean captureFocus()
    {
        androidx.ui.core.FocusNode r0;
        androidx.ui.focus.FocusDetailedState $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.ui.core.FocusNode;

        $r1 = virtualinvoke r0.<androidx.ui.core.FocusNode: androidx.ui.focus.FocusDetailedState getFocusState()>();

        $r2 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Active>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Captured>;

        virtualinvoke r0.<androidx.ui.core.FocusNode: void setFocusState$ui_platform_release(androidx.ui.focus.FocusDetailedState)>($r3);

        return 1;

     label1:
        return 0;
    }

    public final boolean freeFocus()
    {
        androidx.ui.core.FocusNode r0;
        androidx.ui.focus.FocusDetailedState $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.ui.core.FocusNode;

        $r1 = virtualinvoke r0.<androidx.ui.core.FocusNode: androidx.ui.focus.FocusDetailedState getFocusState()>();

        $r2 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Captured>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $z0 == 0 goto label1;

        $r3 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Active>;

        virtualinvoke r0.<androidx.ui.core.FocusNode: void setFocusState$ui_platform_release(androidx.ui.focus.FocusDetailedState)>($r3);

        return 1;

     label1:
        return 0;
    }

    private final void grantFocus(boolean)
    {
        androidx.ui.core.FocusNode r0, r1;
        boolean z0;
        java.util.Set $r2;
        java.lang.Iterable $r3;
        java.lang.Object $r4;
        androidx.ui.focus.FocusDetailedState $r5, $r6;
        kotlin.jvm.functions.Function0 $r7;

        r0 := @this: androidx.ui.core.FocusNode;

        z0 := @parameter0: boolean;

        $r2 = r0.<androidx.ui.core.FocusNode: java.util.Set focusableChildren>;

        $r3 = (java.lang.Iterable) $r2;

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object firstOrNull(java.lang.Iterable)>($r3);

        r1 = (androidx.ui.core.FocusNode) $r4;

        if r1 == null goto label1;

        if z0 != 0 goto label2;

     label1:
        $r5 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Active>;

        virtualinvoke r0.<androidx.ui.core.FocusNode: void setFocusState$ui_platform_release(androidx.ui.focus.FocusDetailedState)>($r5);

        goto label3;

     label2:
        $r6 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState ActiveParent>;

        virtualinvoke r0.<androidx.ui.core.FocusNode: void setFocusState$ui_platform_release(androidx.ui.focus.FocusDetailedState)>($r6);

        r0.<androidx.ui.core.FocusNode: androidx.ui.core.FocusNode focusedChild> = r1;

        specialinvoke r1.<androidx.ui.core.FocusNode: void grantFocus(boolean)>(z0);

        $r7 = virtualinvoke r1.<androidx.ui.core.FocusNode: kotlin.jvm.functions.Function0 getRecompose()>();

        interfaceinvoke $r7.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label3:
        return;
    }

    private final boolean clearFocus()
    {
        androidx.ui.core.FocusNode r0, r9;
        androidx.ui.focus.FocusDetailedState r1, $r7;
        int i0, $i1;
        java.lang.Boolean r2, $r10;
        boolean z0, $z1, $z2;
        int[] $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5, r11;
        java.lang.Throwable $r6;
        kotlin.NoWhenBranchMatchedException $r8;

        r0 := @this: androidx.ui.core.FocusNode;

        r1 = virtualinvoke r0.<androidx.ui.core.FocusNode: androidx.ui.focus.FocusDetailedState getFocusState()>();

        $r3 = <androidx.ui.core.FocusNode$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r1.<androidx.ui.focus.FocusDetailedState: int ordinal()>();

        i0 = $r3[$i1];

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label6;
            case 3: goto label7;
            case 4: goto label2;
            case 5: goto label7;
            default: goto label8;
        };

     label1:
        $r7 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Inactive>;

        virtualinvoke r0.<androidx.ui.core.FocusNode: void setFocusState$ui_platform_release(androidx.ui.focus.FocusDetailedState)>($r7);

        $z2 = 1;

        goto label9;

     label2:
        r9 = r0.<androidx.ui.core.FocusNode: androidx.ui.core.FocusNode focusedChild>;

        if r9 != null goto label3;

        $r10 = (java.lang.Boolean) null;

        goto label4;

     label3:
        $z1 = specialinvoke r9.<androidx.ui.core.FocusNode: boolean clearFocus()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

     label4:
        r2 = $r10;

        if r2 != null goto label5;

        r11 = "No Focused Child";

        z0 = 0;

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        $r6 = (java.lang.Throwable) $r4;

        throw $r6;

     label5:
        $z2 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        goto label9;

     label6:
        $z2 = 0;

        goto label9;

     label7:
        $z2 = 0;

        goto label9;

     label8:
        $r8 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r8.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r8;

     label9:
        return $z2;
    }

    private final boolean requestFocusForChild(androidx.ui.core.FocusNode, boolean)
    {
        androidx.ui.core.FocusNode r0, r1, r25, r26, r27;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6, $z7, z8;
        java.lang.String r2, $r11, $r14, $r21, r23, r28;
        java.util.Set $r3;
        int[] $r4;
        int $i0, i1;
        androidx.ui.focus.FocusDetailedState $r5, $r16, r24;
        kotlin.jvm.functions.Function0 $r6, $r8, $r17;
        java.lang.IllegalStateException $r10, $r13, $r20;
        java.lang.Throwable $r12, $r15, $r22;
        kotlin.NoWhenBranchMatchedException $r19;

        r0 := @this: androidx.ui.core.FocusNode;

        r1 := @parameter0: androidx.ui.core.FocusNode;

        z0 := @parameter1: boolean;

        $r3 = r0.<androidx.ui.core.FocusNode: java.util.Set focusableChildren>;

        $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z2 != 0 goto label01;

        r23 = "Non child node cannot request focus.";

        z6 = 0;

        $r20 = new java.lang.IllegalStateException;

        $r21 = virtualinvoke r23.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        $r22 = (java.lang.Throwable) $r20;

        throw $r22;

     label01:
        r24 = virtualinvoke r0.<androidx.ui.core.FocusNode: androidx.ui.focus.FocusDetailedState getFocusState()>();

        $r4 = <androidx.ui.core.FocusNode$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r24.<androidx.ui.focus.FocusDetailedState: int ordinal()>();

        i1 = $r4[$i0];

        tableswitch(i1)
        {
            case 1: goto label02;
            case 2: goto label13;
            case 3: goto label14;
            case 4: goto label03;
            case 5: goto label07;
            default: goto label15;
        };

     label02:
        $r16 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState ActiveParent>;

        virtualinvoke r0.<androidx.ui.core.FocusNode: void setFocusState$ui_platform_release(androidx.ui.focus.FocusDetailedState)>($r16);

        r0.<androidx.ui.core.FocusNode: androidx.ui.core.FocusNode focusedChild> = r1;

        specialinvoke r1.<androidx.ui.core.FocusNode: void grantFocus(boolean)>(z0);

        $r17 = virtualinvoke r0.<androidx.ui.core.FocusNode: kotlin.jvm.functions.Function0 getRecompose()>();

        interfaceinvoke $r17.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $z7 = 1;

        goto label16;

     label03:
        r25 = r0.<androidx.ui.core.FocusNode: androidx.ui.core.FocusNode focusedChild>;

        if r25 != null goto label04;

        r2 = "no focusedChild found";

        z1 = 0;

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        $r12 = (java.lang.Throwable) $r10;

        throw $r12;

     label04:
        r26 = r25;

        $z5 = specialinvoke r26.<androidx.ui.core.FocusNode: boolean clearFocus()>();

        if $z5 == 0 goto label05;

        r0.<androidx.ui.core.FocusNode: androidx.ui.core.FocusNode focusedChild> = r1;

        specialinvoke r1.<androidx.ui.core.FocusNode: void grantFocus(boolean)>(z0);

        $r6 = virtualinvoke r26.<androidx.ui.core.FocusNode: kotlin.jvm.functions.Function0 getRecompose()>();

        interfaceinvoke $r6.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r8 = virtualinvoke r1.<androidx.ui.core.FocusNode: kotlin.jvm.functions.Function0 getRecompose()>();

        interfaceinvoke $r8.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        goto label16;

     label07:
        r27 = staticinvoke <androidx.ui.core.focus.FocusNodeUtilsKt: androidx.ui.core.FocusNode findParentFocusNode(androidx.ui.core.FocusNode)>(r0);

        if r27 != null goto label10;

        staticinvoke <androidx.ui.core.focus.FocusNodeUtilsKt: void requestFocusForOwner(androidx.ui.core.FocusNode)>(r0);

        $z4 = staticinvoke <androidx.ui.core.focus.FocusNodeUtilsKt: boolean ownerHasFocus(androidx.ui.core.FocusNode)>(r0);

        if $z4 == 0 goto label08;

        $r5 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Active>;

        virtualinvoke r0.<androidx.ui.core.FocusNode: void setFocusState$ui_platform_release(androidx.ui.focus.FocusDetailedState)>($r5);

        $z7 = specialinvoke r0.<androidx.ui.core.FocusNode: boolean requestFocusForChild(androidx.ui.core.FocusNode,boolean)>(r1, z0);

        goto label09;

     label08:
        $z7 = 0;

     label09:
        goto label12;

     label10:
        $z3 = specialinvoke r27.<androidx.ui.core.FocusNode: boolean requestFocusForChild(androidx.ui.core.FocusNode,boolean)>(r0, 0);

        if $z3 == 0 goto label11;

        $z7 = specialinvoke r0.<androidx.ui.core.FocusNode: boolean requestFocusForChild(androidx.ui.core.FocusNode,boolean)>(r1, z0);

        goto label12;

     label11:
        $z7 = 0;

     label12:
        goto label16;

     label13:
        $z7 = 0;

        goto label16;

     label14:
        r28 = "non root FocusNode needs a focusable parent";

        z8 = 0;

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke r28.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        $r15 = (java.lang.Throwable) $r13;

        throw $r15;

     label15:
        $r19 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r19.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r19;

     label16:
        return $z7;
    }

    public static void getZIndexSortedChildren$annotations()
    {
        return;
    }

androidx.ui.core.FocusNode$WhenMappings
<androidx.ui.core.FocusNode$WhenMappings: int[] $EnumSwitchMapping$0>
    public static final void <clinit>()
    {
        int[] r0;
        androidx.ui.focus.FocusDetailedState[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.ui.focus.FocusDetailedState $r2, $r3, $r4, $r5, $r6;

        $r1 = staticinvoke <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Active>;

        $i1 = virtualinvoke $r2.<androidx.ui.focus.FocusDetailedState: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Captured>;

        $i2 = virtualinvoke $r3.<androidx.ui.focus.FocusDetailedState: int ordinal()>();

        r0[$i2] = 2;

        $r4 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Disabled>;

        $i3 = virtualinvoke $r4.<androidx.ui.focus.FocusDetailedState: int ordinal()>();

        r0[$i3] = 3;

        $r5 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState ActiveParent>;

        $i4 = virtualinvoke $r5.<androidx.ui.focus.FocusDetailedState: int ordinal()>();

        r0[$i4] = 4;

        $r6 = <androidx.ui.focus.FocusDetailedState: androidx.ui.focus.FocusDetailedState Inactive>;

        $i5 = virtualinvoke $r6.<androidx.ui.focus.FocusDetailedState: int ordinal()>();

        r0[$i5] = 5;

        <androidx.ui.core.FocusNode$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

