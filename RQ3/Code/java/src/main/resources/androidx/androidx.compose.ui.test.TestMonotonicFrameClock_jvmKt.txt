androidx.compose.ui.test.TestMonotonicFrameClock_jvmKt
<androidx.compose.ui.test.TestMonotonicFrameClock_jvmKt: long DefaultFrameDelay>
    public static final androidx.compose.ui.test.TestMonotonicFrameClock TestMonotonicFrameClock(kotlinx.coroutines.CoroutineScope, long)
    {
        kotlinx.coroutines.CoroutineScope r0, r1, r3;
        long l0, l1;
        kotlinx.coroutines.test.TestCoroutineScheduler r2;
        kotlin.coroutines.CoroutineContext $r4;
        kotlinx.coroutines.test.TestCoroutineScheduler$Key $r5;
        kotlin.coroutines.CoroutineContext$Key $r6;
        kotlin.coroutines.CoroutineContext$Element $r7;
        androidx.compose.ui.test.TestMonotonicFrameClock $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.String $r10, $r11;

        r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "coroutineScope");

        $r4 = interfaceinvoke r0.<kotlinx.coroutines.CoroutineScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r5 = <kotlinx.coroutines.test.TestCoroutineScheduler: kotlinx.coroutines.test.TestCoroutineScheduler$Key Key>;

        $r6 = (kotlin.coroutines.CoroutineContext$Key) $r5;

        $r7 = interfaceinvoke $r4.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r6);

        if $r7 != null goto label1;

        r1 = r0;

        $r11 = "coroutuineScope should have TestCoroutineScheduler";

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label1:
        l1 = l0;

        r2 = (kotlinx.coroutines.test.TestCoroutineScheduler) $r7;

        r3 = r0;

        $r8 = new androidx.compose.ui.test.TestMonotonicFrameClock;

        specialinvoke $r8.<androidx.compose.ui.test.TestMonotonicFrameClock: void <init>(kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.test.TestCoroutineScheduler,long)>(r3, r2, l1);

        return $r8;
    }

    public static androidx.compose.ui.test.TestMonotonicFrameClock TestMonotonicFrameClock$default(kotlinx.coroutines.CoroutineScope, long, int, java.lang.Object)
    {
        kotlinx.coroutines.CoroutineScope r0;
        int i0, $i1;
        java.lang.Object r1;
        androidx.compose.ui.test.TestMonotonicFrameClock $r2;
        long l2;

        r0 := @parameter0: kotlinx.coroutines.CoroutineScope;

        l2 := @parameter1: long;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        l2 = 16000000L;

     label1:
        $r2 = staticinvoke <androidx.compose.ui.test.TestMonotonicFrameClock_jvmKt: androidx.compose.ui.test.TestMonotonicFrameClock TestMonotonicFrameClock(kotlinx.coroutines.CoroutineScope,long)>(r0, l2);

        return $r2;
    }

    public static final long getFrameDelayMillis(androidx.compose.ui.test.TestMonotonicFrameClock)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock $r0;
        long $l0, $l1, $l2;

        $r0 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $l0 = virtualinvoke $r0.<androidx.compose.ui.test.TestMonotonicFrameClock: long getFrameDelayNanos()>();

        $l1 = (long) 1000000;

        $l2 = $l0 / $l1;

        return $l2;
    }

    public static void getFrameDelayMillis$annotations(androidx.compose.ui.test.TestMonotonicFrameClock)
    {
        androidx.compose.ui.test.TestMonotonicFrameClock r0;

        r0 := @parameter0: androidx.compose.ui.test.TestMonotonicFrameClock;

        return;
    }

