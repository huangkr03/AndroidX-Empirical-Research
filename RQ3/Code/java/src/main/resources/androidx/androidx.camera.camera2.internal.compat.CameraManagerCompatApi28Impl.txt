androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl
    void <init>(android.content.Context)
    {
        androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl r0;
        android.content.Context r1;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.camera.camera2.internal.compat.CameraManagerCompatBaseImpl: void <init>(android.content.Context,java.lang.Object)>(r1, null);

        return;
    }

    static androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl create(android.content.Context)
    {
        android.content.Context r0;
        androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = new androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl;

        specialinvoke $r1.<androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl: void <init>(android.content.Context)>(r0);

        return $r1;
    }

    public void registerAvailabilityCallback(java.util.concurrent.Executor, android.hardware.camera2.CameraManager$AvailabilityCallback)
    {
        androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl r0;
        java.util.concurrent.Executor r1;
        android.hardware.camera2.CameraManager$AvailabilityCallback r2;
        android.hardware.camera2.CameraManager $r3;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.hardware.camera2.CameraManager$AvailabilityCallback;

        $r3 = r0.<androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl: android.hardware.camera2.CameraManager mCameraManager>;

        virtualinvoke $r3.<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$AvailabilityCallback)>(r1, r2);

        return;
    }

    public void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)
    {
        androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl r0;
        android.hardware.camera2.CameraManager$AvailabilityCallback r1;
        android.hardware.camera2.CameraManager $r2;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl;

        r1 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityCallback;

        $r2 = r0.<androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl: android.hardware.camera2.CameraManager mCameraManager>;

        virtualinvoke $r2.<android.hardware.camera2.CameraManager: void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)>(r1);

        return;
    }

    public void openCamera(java.lang.String, java.util.concurrent.Executor, android.hardware.camera2.CameraDevice$StateCallback) throws androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat
    {
        androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl r0;
        java.lang.String r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraDevice$StateCallback r3;
        android.hardware.camera2.CameraManager $r4;
        java.lang.Throwable $r5, $r7, $r8, r9, r10, r11, r12;
        androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat $r6;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraDevice$StateCallback;

     label1:
        $r4 = r0.<androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl: android.hardware.camera2.CameraManager mCameraManager>;

        virtualinvoke $r4.<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)>(r1, r2, r3);

     label2:
        goto label7;

     label3:
        $r5 := @caughtexception;

        r9 = $r5;

        $r6 = staticinvoke <androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat: androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat toCameraAccessExceptionCompat(android.hardware.camera2.CameraAccessException)>(r9);

        r12 = (java.lang.Throwable) $r6;

        throw r12;

     label4:
        $r7 := @caughtexception;

        r10 = $r7;

        throw r10;

     label5:
        $r8 := @caughtexception;

        r11 = $r8;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl: boolean isDndFailCase(java.lang.Throwable)>(r11);

        if $z0 == 0 goto label6;

        specialinvoke r0.<androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl: void throwDndException(java.lang.Throwable)>(r11);

     label6:
        throw r11;

     label7:
        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.SecurityException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label1 to label2 with label5;
    }

    public android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String) throws androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat
    {
        androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl r0;
        java.lang.String r1;
        android.hardware.camera2.CameraCharacteristics r2;
        java.lang.Throwable r3, $r4;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl;

        r1 := @parameter0: java.lang.String;

     label1:
        r2 = specialinvoke r0.<androidx.camera.camera2.internal.compat.CameraManagerCompatBaseImpl: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>(r1);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $z0 = specialinvoke r0.<androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl: boolean isDndFailCase(java.lang.Throwable)>(r3);

        if $z0 == 0 goto label4;

        specialinvoke r0.<androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl: void throwDndException(java.lang.Throwable)>(r3);

     label4:
        throw r3;

     label5:
        return r2;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void throwDndException(java.lang.Throwable) throws androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat
    {
        androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl r0;
        java.lang.Throwable r1, r4;
        androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat r3;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl;

        r1 := @parameter0: java.lang.Throwable;

        r3 = new androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat;

        specialinvoke r3.<androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat: void <init>(int,java.lang.Throwable)>(10001, r1);

        r4 = (java.lang.Throwable) r3;

        throw r4;
    }

    private boolean isDndFailCase(java.lang.Throwable)
    {
        androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl r0;
        java.lang.Throwable r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl;

        r1 := @parameter0: java.lang.Throwable;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 != 28 goto label1;

        $z0 = staticinvoke <androidx.camera.camera2.internal.compat.CameraManagerCompatApi28Impl: boolean isDndRuntimeException(java.lang.Throwable)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean isDndRuntimeException(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.StackTraceElement[] r1, $r3;
        java.lang.Class $r2;
        boolean $z0, $z1;
        int $i0;
        java.lang.StackTraceElement $r4;
        java.lang.String $r5, $r6;

        r0 := @parameter0: java.lang.Throwable;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/RuntimeException;");

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        r1 = $r3;

        if $r3 == null goto label1;

        $i0 = lengthof r1;

        if $i0 >= 0 goto label2;

     label1:
        return 0;

     label2:
        $r5 = "_enableShutterSound";

        $r4 = r1[0];

        $r6 = virtualinvoke $r4.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        return $z1;

     label3:
        return 0;
    }

