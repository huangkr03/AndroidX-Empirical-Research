androidx.work.impl.Processor
<androidx.work.impl.Processor: java.lang.String TAG>
<androidx.work.impl.Processor: java.lang.String FOREGROUND_WAKELOCK_TAG>
<androidx.work.impl.Processor: android.os.PowerManager$WakeLock mForegroundLock>
<androidx.work.impl.Processor: android.content.Context mAppContext>
<androidx.work.impl.Processor: androidx.work.Configuration mConfiguration>
<androidx.work.impl.Processor: androidx.work.impl.utils.taskexecutor.TaskExecutor mWorkTaskExecutor>
<androidx.work.impl.Processor: androidx.work.impl.WorkDatabase mWorkDatabase>
<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>
<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>
<androidx.work.impl.Processor: java.util.Map mWorkRuns>
<androidx.work.impl.Processor: java.util.List mSchedulers>
<androidx.work.impl.Processor: java.util.Set mCancelledIds>
<androidx.work.impl.Processor: java.util.List mOuterListeners>
<androidx.work.impl.Processor: java.lang.Object mLock>
    public void <init>(android.content.Context, androidx.work.Configuration, androidx.work.impl.utils.taskexecutor.TaskExecutor, androidx.work.impl.WorkDatabase, java.util.List)
    {
        androidx.work.impl.Processor r0;
        android.content.Context r1;
        androidx.work.Configuration r2;
        androidx.work.impl.utils.taskexecutor.TaskExecutor r3;
        androidx.work.impl.WorkDatabase r4;
        java.util.List r5;
        java.util.HashMap $r6, $r7, $r11;
        java.util.HashSet $r8;
        java.util.ArrayList $r9;
        java.lang.Object $r10;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.Configuration;

        r3 := @parameter2: androidx.work.impl.utils.taskexecutor.TaskExecutor;

        r4 := @parameter3: androidx.work.impl.WorkDatabase;

        r5 := @parameter4: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.Processor: android.content.Context mAppContext> = r1;

        r0.<androidx.work.impl.Processor: androidx.work.Configuration mConfiguration> = r2;

        r0.<androidx.work.impl.Processor: androidx.work.impl.utils.taskexecutor.TaskExecutor mWorkTaskExecutor> = r3;

        r0.<androidx.work.impl.Processor: androidx.work.impl.WorkDatabase mWorkDatabase> = r4;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap> = $r7;

        r0.<androidx.work.impl.Processor: java.util.List mSchedulers> = r5;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<androidx.work.impl.Processor: java.util.Set mCancelledIds> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<androidx.work.impl.Processor: java.util.List mOuterListeners> = $r9;

        r0.<androidx.work.impl.Processor: android.os.PowerManager$WakeLock mForegroundLock> = null;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.Processor: java.lang.Object mLock> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<androidx.work.impl.Processor: java.util.Map mWorkRuns> = $r11;

        return;
    }

    public boolean startWork(androidx.work.impl.StartStopToken)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.StartStopToken r1;
        boolean $z0;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: androidx.work.impl.StartStopToken;

        $z0 = virtualinvoke r0.<androidx.work.impl.Processor: boolean startWork(androidx.work.impl.StartStopToken,androidx.work.WorkerParameters$RuntimeExtras)>(r1, null);

        return $z0;
    }

    public boolean startWork(androidx.work.impl.StartStopToken, androidx.work.WorkerParameters$RuntimeExtras)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.StartStopToken r1, r63;
        androidx.work.WorkerParameters$RuntimeExtras r2;
        androidx.work.impl.model.WorkGenerationalId r3, $r24, $r47;
        java.lang.String r4, $r36, $r38, $r42, $r50, $r54, $r57, $r60;
        java.util.ArrayList r5, $r10;
        androidx.work.impl.model.WorkSpec r6;
        androidx.work.impl.WorkerWrapper r7;
        java.lang.Object r8, $r13, $r14, $r44, $r46;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r9, $r61;
        androidx.work.impl.WorkDatabase $r11, $r16;
        java.util.concurrent.Callable $r12;
        boolean $z0;
        androidx.work.impl.WorkerWrapper$Builder $r15, $r21, $r22;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r17, $r25, $r32;
        androidx.work.Configuration $r18;
        android.content.Context $r19;
        java.util.List $r20;
        androidx.work.impl.Processor$FutureListener $r23;
        java.util.concurrent.Executor $r26;
        java.util.Map $r27, $r30, $r43;
        java.util.HashSet $r29, r65;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r33;
        androidx.work.Logger $r34, $r48, $r55;
        java.lang.StringBuilder $r35, $r39, $r40, $r41, $r49, $r51, $r52, $r53, $r56, $r58, $r59;
        java.lang.Class $r37;
        java.util.Iterator $r45;
        java.util.Set r62;
        com.google.common.util.concurrent.ListenableFuture r64;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: androidx.work.impl.StartStopToken;

        r2 := @parameter1: androidx.work.WorkerParameters$RuntimeExtras;

        r3 = virtualinvoke r1.<androidx.work.impl.StartStopToken: androidx.work.impl.model.WorkGenerationalId getId()>();

        r4 = virtualinvoke r3.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r5 = $r10;

        $r11 = r0.<androidx.work.impl.Processor: androidx.work.impl.WorkDatabase mWorkDatabase>;

        $r12 = dynamicinvoke "call" <java.util.concurrent.Callable (androidx.work.impl.Processor,java.util.ArrayList,java.lang.String)>(r0, r5, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.work.impl.Processor: androidx.work.impl.model.WorkSpec lambda$startWork$0(java.util.ArrayList,java.lang.String)>, methodtype: androidx.work.impl.model.WorkSpec __METHODTYPE__());

        $r13 = virtualinvoke $r11.<androidx.work.impl.WorkDatabase: java.lang.Object runInTransaction(java.util.concurrent.Callable)>($r12);

        r6 = (androidx.work.impl.model.WorkSpec) $r13;

        if r6 != null goto label01;

        $r55 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r57 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Didn\'t find WorkSpec for id ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r55.<androidx.work.Logger: void warning(java.lang.String,java.lang.String)>($r57, $r60);

        specialinvoke r0.<androidx.work.impl.Processor: void runOnExecuted(androidx.work.impl.model.WorkGenerationalId,boolean)>(r3, 0);

        return 0;

     label01:
        $r14 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r8 = $r14;

        entermonitor $r14;

     label02:
        $z0 = virtualinvoke r0.<androidx.work.impl.Processor: boolean isEnqueued(java.lang.String)>(r4);

        if $z0 == 0 goto label06;

        $r43 = r0.<androidx.work.impl.Processor: java.util.Map mWorkRuns>;

        $r44 = interfaceinvoke $r43.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r62 = (java.util.Set) $r44;

        $r45 = interfaceinvoke r62.<java.util.Set: java.util.Iterator iterator()>();

        $r46 = interfaceinvoke $r45.<java.util.Iterator: java.lang.Object next()>();

        r63 = (androidx.work.impl.StartStopToken) $r46;

        $r47 = virtualinvoke r63.<androidx.work.impl.StartStopToken: androidx.work.impl.model.WorkGenerationalId getId()>();

        i0 = virtualinvoke $r47.<androidx.work.impl.model.WorkGenerationalId: int getGeneration()>();

        $i3 = virtualinvoke r3.<androidx.work.impl.model.WorkGenerationalId: int getGeneration()>();

        if i0 != $i3 goto label03;

        interfaceinvoke r62.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r48 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r50 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Work ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already enqueued for processing");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r48.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r50, $r54);

        goto label04;

     label03:
        specialinvoke r0.<androidx.work.impl.Processor: void runOnExecuted(androidx.work.impl.model.WorkGenerationalId,boolean)>(r3, 0);

     label04:
        exitmonitor r8;

     label05:
        return 0;

     label06:
        $i1 = virtualinvoke r6.<androidx.work.impl.model.WorkSpec: int getGeneration()>();

        $i2 = virtualinvoke r3.<androidx.work.impl.model.WorkGenerationalId: int getGeneration()>();

        if $i1 == $i2 goto label08;

        specialinvoke r0.<androidx.work.impl.Processor: void runOnExecuted(androidx.work.impl.model.WorkGenerationalId,boolean)>(r3, 0);

        exitmonitor r8;

     label07:
        return 0;

     label08:
        $r15 = new androidx.work.impl.WorkerWrapper$Builder;

        $r19 = r0.<androidx.work.impl.Processor: android.content.Context mAppContext>;

        $r18 = r0.<androidx.work.impl.Processor: androidx.work.Configuration mConfiguration>;

        $r17 = r0.<androidx.work.impl.Processor: androidx.work.impl.utils.taskexecutor.TaskExecutor mWorkTaskExecutor>;

        $r16 = r0.<androidx.work.impl.Processor: androidx.work.impl.WorkDatabase mWorkDatabase>;

        specialinvoke $r15.<androidx.work.impl.WorkerWrapper$Builder: void <init>(android.content.Context,androidx.work.Configuration,androidx.work.impl.utils.taskexecutor.TaskExecutor,androidx.work.impl.foreground.ForegroundProcessor,androidx.work.impl.WorkDatabase,androidx.work.impl.model.WorkSpec,java.util.List)>($r19, $r18, $r17, r0, $r16, r6, r5);

        $r20 = r0.<androidx.work.impl.Processor: java.util.List mSchedulers>;

        $r21 = virtualinvoke $r15.<androidx.work.impl.WorkerWrapper$Builder: androidx.work.impl.WorkerWrapper$Builder withSchedulers(java.util.List)>($r20);

        $r22 = virtualinvoke $r21.<androidx.work.impl.WorkerWrapper$Builder: androidx.work.impl.WorkerWrapper$Builder withRuntimeExtras(androidx.work.WorkerParameters$RuntimeExtras)>(r2);

        r7 = virtualinvoke $r22.<androidx.work.impl.WorkerWrapper$Builder: androidx.work.impl.WorkerWrapper build()>();

        r64 = virtualinvoke r7.<androidx.work.impl.WorkerWrapper: com.google.common.util.concurrent.ListenableFuture getFuture()>();

        $r23 = new androidx.work.impl.Processor$FutureListener;

        $r24 = virtualinvoke r1.<androidx.work.impl.StartStopToken: androidx.work.impl.model.WorkGenerationalId getId()>();

        specialinvoke $r23.<androidx.work.impl.Processor$FutureListener: void <init>(androidx.work.impl.ExecutionListener,androidx.work.impl.model.WorkGenerationalId,com.google.common.util.concurrent.ListenableFuture)>(r0, $r24, r64);

        $r25 = r0.<androidx.work.impl.Processor: androidx.work.impl.utils.taskexecutor.TaskExecutor mWorkTaskExecutor>;

        $r26 = interfaceinvoke $r25.<androidx.work.impl.utils.taskexecutor.TaskExecutor: java.util.concurrent.Executor getMainThreadExecutor()>();

        interfaceinvoke r64.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r23, $r26);

        $r27 = r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r7);

        $r29 = new java.util.HashSet;

        specialinvoke $r29.<java.util.HashSet: void <init>()>();

        r65 = $r29;

        virtualinvoke r65.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        $r30 = r0.<androidx.work.impl.Processor: java.util.Map mWorkRuns>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r65);

        exitmonitor r8;

     label09:
        goto label12;

     label10:
        $r61 := @caughtexception;

        r9 = $r61;

        exitmonitor r8;

     label11:
        throw r9;

     label12:
        $r32 = r0.<androidx.work.impl.Processor: androidx.work.impl.utils.taskexecutor.TaskExecutor mWorkTaskExecutor>;

        $r33 = interfaceinvoke $r32.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        interfaceinvoke $r33.<androidx.work.impl.utils.taskexecutor.SerialExecutor: void execute(java.lang.Runnable)>(r7);

        $r34 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r36 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r38 = virtualinvoke $r37.<java.lang.Class: java.lang.String getSimpleName()>();

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": processing ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r36, $r42);

        return 1;

        catch java.lang.Throwable from label02 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void startForeground(java.lang.String, androidx.work.ForegroundInfo)
    {
        androidx.work.impl.Processor r0;
        java.lang.String r1, $r10, $r14;
        androidx.work.ForegroundInfo r2;
        java.lang.Object r3, $r7, $r16;
        androidx.work.impl.WorkerWrapper r4;
        android.content.Intent r5;
        java.lang.Throwable r6, $r26;
        androidx.work.Logger $r8;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;
        java.util.Map $r15, $r18;
        android.os.PowerManager$WakeLock $r17, $r24, $r25;
        android.content.Context $r20, $r22, $r23;
        androidx.work.impl.model.WorkGenerationalId $r21;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.work.ForegroundInfo;

        $r7 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label1:
        $r8 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r10 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Moving WorkSpec (");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to the foreground");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<androidx.work.Logger: void info(java.lang.String,java.lang.String)>($r10, $r14);

        $r15 = r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (androidx.work.impl.WorkerWrapper) $r16;

        if r4 == null goto label3;

        $r17 = r0.<androidx.work.impl.Processor: android.os.PowerManager$WakeLock mForegroundLock>;

        if $r17 != null goto label2;

        $r23 = r0.<androidx.work.impl.Processor: android.content.Context mAppContext>;

        $r24 = staticinvoke <androidx.work.impl.utils.WakeLocks: android.os.PowerManager$WakeLock newWakeLock(android.content.Context,java.lang.String)>($r23, "ProcessorForegroundLck");

        r0.<androidx.work.impl.Processor: android.os.PowerManager$WakeLock mForegroundLock> = $r24;

        $r25 = r0.<androidx.work.impl.Processor: android.os.PowerManager$WakeLock mForegroundLock>;

        virtualinvoke $r25.<android.os.PowerManager$WakeLock: void acquire()>();

     label2:
        $r18 = r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        $r20 = r0.<androidx.work.impl.Processor: android.content.Context mAppContext>;

        $r21 = virtualinvoke r4.<androidx.work.impl.WorkerWrapper: androidx.work.impl.model.WorkGenerationalId getWorkGenerationalId()>();

        r5 = staticinvoke <androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Intent createStartForegroundIntent(android.content.Context,androidx.work.impl.model.WorkGenerationalId,androidx.work.ForegroundInfo)>($r20, $r21, r2);

        $r22 = r0.<androidx.work.impl.Processor: android.content.Context mAppContext>;

        staticinvoke <androidx.core.content.ContextCompat: void startForegroundService(android.content.Context,android.content.Intent)>($r22, r5);

     label3:
        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r26 := @caughtexception;

        r6 = $r26;

        exitmonitor r3;

     label6:
        throw r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean stopForegroundWork(androidx.work.impl.StartStopToken)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.StartStopToken r1;
        java.lang.String r2, $r9, $r12;
        java.lang.Object r3, $r6, $r14;
        java.lang.Throwable r4, $r16;
        androidx.work.impl.model.WorkGenerationalId $r5;
        androidx.work.Logger $r7;
        java.lang.StringBuilder $r8, $r10, $r11;
        java.util.Map $r13, $r15;
        boolean $z0;
        androidx.work.impl.WorkerWrapper r17;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: androidx.work.impl.StartStopToken;

        $r5 = virtualinvoke r1.<androidx.work.impl.StartStopToken: androidx.work.impl.model.WorkGenerationalId getId()>();

        r2 = virtualinvoke $r5.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $r6 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r7 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r9 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processor stopping foreground work ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r9, $r12);

        $r13 = r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        r17 = (androidx.work.impl.WorkerWrapper) $r14;

        if r17 == null goto label2;

        $r15 = r0.<androidx.work.impl.Processor: java.util.Map mWorkRuns>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        $z0 = staticinvoke <androidx.work.impl.Processor: boolean interrupt(java.lang.String,androidx.work.impl.WorkerWrapper)>(r2, r17);

        return $z0;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean stopWork(androidx.work.impl.StartStopToken)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.StartStopToken r1;
        java.lang.String r2, $r14, $r17, $r21, $r24;
        java.lang.Object r3, $r7, $r9, $r11;
        java.util.Set r4;
        java.lang.Throwable r5, $r25;
        androidx.work.impl.model.WorkGenerationalId $r6;
        java.util.Map $r8, $r10, $r18;
        boolean $z0, $z1;
        androidx.work.Logger $r12, $r19;
        java.lang.StringBuilder $r13, $r15, $r16, $r20, $r22, $r23;
        androidx.work.impl.WorkerWrapper r26;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: androidx.work.impl.StartStopToken;

        $r6 = virtualinvoke r1.<androidx.work.impl.StartStopToken: androidx.work.impl.model.WorkGenerationalId getId()>();

        r2 = virtualinvoke $r6.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $r7 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        r26 = (androidx.work.impl.WorkerWrapper) $r9;

        if r26 != null goto label03;

        $r19 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r21 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WorkerWrapper could not be found for ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r21, $r24);

        exitmonitor r3;

     label02:
        return 0;

     label03:
        $r10 = r0.<androidx.work.impl.Processor: java.util.Map mWorkRuns>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (java.util.Set) $r11;

        if r4 == null goto label04;

        $z0 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label06;

     label04:
        exitmonitor r3;

     label05:
        return 0;

     label06:
        $r12 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r14 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processor stopping background work ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r14, $r17);

        $r18 = r0.<androidx.work.impl.Processor: java.util.Map mWorkRuns>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        exitmonitor r3;

     label07:
        goto label10;

     label08:
        $r25 := @caughtexception;

        r5 = $r25;

        exitmonitor r3;

     label09:
        throw r5;

     label10:
        $z1 = staticinvoke <androidx.work.impl.Processor: boolean interrupt(java.lang.String,androidx.work.impl.WorkerWrapper)>(r2, r26);

        return $z1;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public boolean stopAndCancelWork(java.lang.String)
    {
        androidx.work.impl.Processor r0;
        java.lang.String r1, $r6, $r9;
        java.lang.Throwable r2, $r16;
        java.lang.Object $r3, $r12, $r15, r17;
        androidx.work.Logger $r4;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.util.Set $r10;
        java.util.Map $r11, $r13, $r14;
        androidx.work.impl.WorkerWrapper r18;
        boolean $z0, z1, z2;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r17 = $r3;

        entermonitor $r3;

     label01:
        $r4 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r6 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processor cancelling ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r6, $r9);

        $r10 = r0.<androidx.work.impl.Processor: java.util.Set mCancelledIds>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r11 = r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r18 = (androidx.work.impl.WorkerWrapper) $r12;

        if r18 == null goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        z1 = $z0;

        if r18 != null goto label04;

        $r14 = r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r18 = (androidx.work.impl.WorkerWrapper) $r15;

     label04:
        if r18 == null goto label05;

        $r13 = r0.<androidx.work.impl.Processor: java.util.Map mWorkRuns>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label05:
        exitmonitor r17;

     label06:
        goto label09;

     label07:
        $r16 := @caughtexception;

        r2 = $r16;

        exitmonitor r17;

     label08:
        throw r2;

     label09:
        z2 = staticinvoke <androidx.work.impl.Processor: boolean interrupt(java.lang.String,androidx.work.impl.WorkerWrapper)>(r1, r18);

        if z1 == 0 goto label10;

        specialinvoke r0.<androidx.work.impl.Processor: void stopForegroundService()>();

     label10:
        return z2;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public void stopForeground(java.lang.String)
    {
        androidx.work.impl.Processor r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.util.Map $r5;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        specialinvoke r0.<androidx.work.impl.Processor: void stopForegroundService()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isCancelled(java.lang.String)
    {
        androidx.work.impl.Processor r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.Set $r5;
        boolean $z0;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.work.impl.Processor: java.util.Set mCancelledIds>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean hasWork()
    {
        androidx.work.impl.Processor r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.util.Map $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.work.impl.Processor;

        $r3 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        exitmonitor r1;

     label5:
        return $z2;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean isEnqueued(java.lang.String)
    {
        androidx.work.impl.Processor r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.util.Map $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r6 = r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>;

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        exitmonitor r2;

     label5:
        return $z2;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean isEnqueuedInForeground(java.lang.String)
    {
        androidx.work.impl.Processor r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.Map $r5;
        boolean $z0;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addExecutionListener(androidx.work.impl.ExecutionListener)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.ExecutionListener r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.List $r5;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: androidx.work.impl.ExecutionListener;

        $r4 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.work.impl.Processor: java.util.List mOuterListeners>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeExecutionListener(androidx.work.impl.ExecutionListener)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.ExecutionListener r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.List $r5;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: androidx.work.impl.ExecutionListener;

        $r4 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.work.impl.Processor: java.util.List mOuterListeners>;

        interfaceinvoke $r5.<java.util.List: boolean remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onExecuted(androidx.work.impl.model.WorkGenerationalId, boolean)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.model.WorkGenerationalId r1, $r12;
        boolean z0, $z1, $z2;
        java.lang.Object r2, $r7, $r10, $r11;
        androidx.work.impl.WorkerWrapper r3;
        java.util.Iterator r4;
        androidx.work.impl.ExecutionListener r5;
        java.lang.Throwable r6, $r16;
        java.util.Map $r8, $r13;
        java.lang.String $r9, $r14, $r18, $r21, $r24, $r28;
        androidx.work.Logger $r17;
        java.lang.StringBuilder $r19, $r22, $r23, $r25, $r26, $r27;
        java.lang.Class $r20;
        java.util.List $r29;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        z0 := @parameter1: boolean;

        $r7 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>;

        $r9 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r3 = (androidx.work.impl.WorkerWrapper) $r10;

        if r3 == null goto label2;

        $r12 = virtualinvoke r3.<androidx.work.impl.WorkerWrapper: androidx.work.impl.model.WorkGenerationalId getWorkGenerationalId()>();

        $z1 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label2;

        $r13 = r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>;

        $r14 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r14);

     label2:
        $r17 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r18 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getSimpleName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r24 = virtualinvoke r1.<androidx.work.impl.model.WorkGenerationalId: java.lang.String getWorkSpecId()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" executed; reschedule = ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r18, $r28);

        $r29 = r0.<androidx.work.impl.Processor: java.util.List mOuterListeners>;

        r4 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.work.impl.ExecutionListener) $r11;

        interfaceinvoke r5.<androidx.work.impl.ExecutionListener: void onExecuted(androidx.work.impl.model.WorkGenerationalId,boolean)>(r1, z0);

        goto label3;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r16 := @caughtexception;

        r6 = $r16;

        exitmonitor r2;

     label7:
        throw r6;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public androidx.work.impl.model.WorkSpec getRunningWorkSpec(java.lang.String)
    {
        androidx.work.impl.Processor r0;
        java.lang.String r1;
        java.lang.Object r2, $r4, $r6, $r9;
        java.lang.Throwable r3, $r10;
        java.util.Map $r5, $r8;
        androidx.work.impl.model.WorkSpec $r7;
        androidx.work.impl.WorkerWrapper r11;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r11 = (androidx.work.impl.WorkerWrapper) $r6;

        if r11 != null goto label2;

        $r8 = r0.<androidx.work.impl.Processor: java.util.Map mEnqueuedWorkMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r11 = (androidx.work.impl.WorkerWrapper) $r9;

     label2:
        if r11 == null goto label4;

        $r7 = virtualinvoke r11.<androidx.work.impl.WorkerWrapper: androidx.work.impl.model.WorkSpec getWorkSpec()>();

        exitmonitor r2;

     label3:
        return $r7;

     label4:
        exitmonitor r2;

     label5:
        return null;

     label6:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void runOnExecuted(androidx.work.impl.model.WorkGenerationalId, boolean)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        boolean z0;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r2;
        java.util.concurrent.Executor $r3;
        java.lang.Runnable $r4;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        z0 := @parameter1: boolean;

        $r2 = r0.<androidx.work.impl.Processor: androidx.work.impl.utils.taskexecutor.TaskExecutor mWorkTaskExecutor>;

        $r3 = interfaceinvoke $r2.<androidx.work.impl.utils.taskexecutor.TaskExecutor: java.util.concurrent.Executor getMainThreadExecutor()>();

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.impl.Processor,androidx.work.impl.model.WorkGenerationalId,boolean)>(r0, r1, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.work.impl.Processor: void lambda$runOnExecuted$1(androidx.work.impl.model.WorkGenerationalId,boolean)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    private void stopForegroundService()
    {
        androidx.work.impl.Processor r0;
        java.lang.Object r1, $r5;
        boolean z0, $z1, $z2;
        android.content.Intent r2;
        java.lang.Throwable r3, r4, $r12, $r13;
        java.util.Map $r6;
        android.content.Context $r7, $r8;
        android.os.PowerManager$WakeLock $r10, $r11;
        androidx.work.Logger $r14;
        java.lang.String $r15;

        r0 := @this: androidx.work.impl.Processor;

        $r5 = r0.<androidx.work.impl.Processor: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<androidx.work.impl.Processor: java.util.Map mForegroundWorkMap>;

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        z0 = $z2;

        if z0 != 0 goto label08;

        $r7 = r0.<androidx.work.impl.Processor: android.content.Context mAppContext>;

        r2 = staticinvoke <androidx.work.impl.foreground.SystemForegroundDispatcher: android.content.Intent createStopForegroundIntent(android.content.Context)>($r7);

     label04:
        $r8 = r0.<androidx.work.impl.Processor: android.content.Context mAppContext>;

        virtualinvoke $r8.<android.content.Context: android.content.ComponentName startService(android.content.Intent)>(r2);

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

        r3 = $r13;

        $r14 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r15 = <androidx.work.impl.Processor: java.lang.String TAG>;

        virtualinvoke $r14.<androidx.work.Logger: void error(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, "Unable to stop foreground service", r3);

     label07:
        $r10 = r0.<androidx.work.impl.Processor: android.os.PowerManager$WakeLock mForegroundLock>;

        if $r10 == null goto label08;

        $r11 = r0.<androidx.work.impl.Processor: android.os.PowerManager$WakeLock mForegroundLock>;

        virtualinvoke $r11.<android.os.PowerManager$WakeLock: void release()>();

        r0.<androidx.work.impl.Processor: android.os.PowerManager$WakeLock mForegroundLock> = null;

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r1;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private static boolean interrupt(java.lang.String, androidx.work.impl.WorkerWrapper)
    {
        java.lang.String r0, $r4, $r7, $r10, $r13;
        androidx.work.impl.WorkerWrapper r1;
        androidx.work.Logger $r2, $r8;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r11, $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.work.impl.WorkerWrapper;

        if r1 == null goto label1;

        virtualinvoke r1.<androidx.work.impl.WorkerWrapper: void interrupt()>();

        $r8 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r10 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WorkerWrapper interrupted for ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r10, $r13);

        return 1;

     label1:
        $r2 = staticinvoke <androidx.work.Logger: androidx.work.Logger get()>();

        $r4 = <androidx.work.impl.Processor: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WorkerWrapper could not be found for ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<androidx.work.Logger: void debug(java.lang.String,java.lang.String)>($r4, $r7);

        return 0;
    }

    private void lambda$runOnExecuted$1(androidx.work.impl.model.WorkGenerationalId, boolean)
    {
        androidx.work.impl.Processor r0;
        androidx.work.impl.model.WorkGenerationalId r1;
        boolean z0;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: androidx.work.impl.model.WorkGenerationalId;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<androidx.work.impl.Processor: void onExecuted(androidx.work.impl.model.WorkGenerationalId,boolean)>(r1, z0);

        return;
    }

    private androidx.work.impl.model.WorkSpec lambda$startWork$0(java.util.ArrayList, java.lang.String) throws java.lang.Exception
    {
        androidx.work.impl.Processor r0;
        java.util.ArrayList r1;
        java.lang.String r2;
        androidx.work.impl.WorkDatabase $r3, $r6;
        androidx.work.impl.model.WorkTagDao $r4;
        java.util.List $r5;
        androidx.work.impl.model.WorkSpecDao $r7;
        androidx.work.impl.model.WorkSpec $r8;

        r0 := @this: androidx.work.impl.Processor;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<androidx.work.impl.Processor: androidx.work.impl.WorkDatabase mWorkDatabase>;

        $r4 = virtualinvoke $r3.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkTagDao workTagDao()>();

        $r5 = interfaceinvoke $r4.<androidx.work.impl.model.WorkTagDao: java.util.List getTagsForWorkSpecId(java.lang.String)>(r2);

        virtualinvoke r1.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r5);

        $r6 = r0.<androidx.work.impl.Processor: androidx.work.impl.WorkDatabase mWorkDatabase>;

        $r7 = virtualinvoke $r6.<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>();

        $r8 = interfaceinvoke $r7.<androidx.work.impl.model.WorkSpecDao: androidx.work.impl.model.WorkSpec getWorkSpec(java.lang.String)>(r2);

        return $r8;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <androidx.work.Logger: java.lang.String tagWithPrefix(java.lang.String)>("Processor");

        <androidx.work.impl.Processor: java.lang.String TAG> = $r0;

        return;
    }

androidx.work.impl.Processor$FutureListener
<androidx.work.impl.Processor$FutureListener: androidx.work.impl.ExecutionListener mExecutionListener>
<androidx.work.impl.Processor$FutureListener: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>
<androidx.work.impl.Processor$FutureListener: com.google.common.util.concurrent.ListenableFuture mFuture>
    void <init>(androidx.work.impl.ExecutionListener, androidx.work.impl.model.WorkGenerationalId, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.work.impl.Processor$FutureListener r0;
        androidx.work.impl.ExecutionListener r1;
        androidx.work.impl.model.WorkGenerationalId r2;
        com.google.common.util.concurrent.ListenableFuture r3;

        r0 := @this: androidx.work.impl.Processor$FutureListener;

        r1 := @parameter0: androidx.work.impl.ExecutionListener;

        r2 := @parameter1: androidx.work.impl.model.WorkGenerationalId;

        r3 := @parameter2: com.google.common.util.concurrent.ListenableFuture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.Processor$FutureListener: androidx.work.impl.ExecutionListener mExecutionListener> = r1;

        r0.<androidx.work.impl.Processor$FutureListener: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId> = r2;

        r0.<androidx.work.impl.Processor$FutureListener: com.google.common.util.concurrent.ListenableFuture mFuture> = r3;

        return;
    }

    public void run()
    {
        androidx.work.impl.Processor$FutureListener r0;
        java.lang.Throwable r1, $r7;
        com.google.common.util.concurrent.ListenableFuture $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        androidx.work.impl.model.WorkGenerationalId $r5;
        androidx.work.impl.ExecutionListener $r6;
        boolean z0;

        r0 := @this: androidx.work.impl.Processor$FutureListener;

     label1:
        $r2 = r0.<androidx.work.impl.Processor$FutureListener: com.google.common.util.concurrent.ListenableFuture mFuture>;

        $r3 = interfaceinvoke $r2.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        $r4 = (java.lang.Boolean) $r3;

        z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        z0 = 1;

     label4:
        $r6 = r0.<androidx.work.impl.Processor$FutureListener: androidx.work.impl.ExecutionListener mExecutionListener>;

        $r5 = r0.<androidx.work.impl.Processor$FutureListener: androidx.work.impl.model.WorkGenerationalId mWorkGenerationalId>;

        interfaceinvoke $r6.<androidx.work.impl.ExecutionListener: void onExecuted(androidx.work.impl.model.WorkGenerationalId,boolean)>($r5, z0);

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

