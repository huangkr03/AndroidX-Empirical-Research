kotlin.StandardKt__StandardKt
    public void <init>()
    {
        kotlin.StandardKt__StandardKt $r0;

        $r0 := @this: kotlin.StandardKt__StandardKt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static final java.lang.Void TODO()
    {
        kotlin.NotImplementedError $r0;

        $r0 = new kotlin.NotImplementedError;

        specialinvoke $r0.<kotlin.NotImplementedError: void <init>(java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        throw $r0;
    }

    private static final java.lang.Void TODO(java.lang.String)
    {
        java.lang.String $r0;
        kotlin.NotImplementedError $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "reason");

        $r1 = new kotlin.NotImplementedError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An operation is not implemented: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<kotlin.NotImplementedError: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    private static final java.lang.Object also(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function1 $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

        return $r0;
    }

    private static final java.lang.Object apply(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function1 $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

        return $r0;
    }

    private static final java.lang.Object let(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r1;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "block");

        $r1 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        return $r1;
    }

    private static final void repeat(int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Integer $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "action");

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static final java.lang.Object run(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r1;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "block");

        $r1 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        return $r1;
    }

    private static final java.lang.Object run(kotlin.jvm.functions.Function0)
    {
        java.lang.Object $r0;
        kotlin.jvm.functions.Function0 $r1;

        $r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        $r0 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r0;
    }

    private static final java.lang.Object takeIf(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Object $r0, $r2;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Boolean $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        return null;
    }

    private static final java.lang.Object takeUnless(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        java.lang.Object $r0, $r2;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Boolean $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $r2 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        return $r0;

     label1:
        return null;
    }

    private static final java.lang.Object 'with'(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Object $r1;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "block");

        $r1 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        return $r1;
    }

