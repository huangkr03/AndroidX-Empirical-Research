androidx.camera.camera2.internal.MeteringRepeatingSession
<androidx.camera.camera2.internal.MeteringRepeatingSession: java.lang.String TAG>
<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>
<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.SessionConfig mSessionConfig>
<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig mConfigWithDefaults>
<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.camera2.internal.compat.workaround.SupportedRepeatingSurfaceSize mSupportedRepeatingSurfaceSize>
    void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat, androidx.camera.camera2.internal.DisplayInfoManager)
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1;
        androidx.camera.camera2.internal.DisplayInfoManager r2;
        android.graphics.SurfaceTexture r3, $r9;
        android.util.Size r4;
        android.view.Surface r5, $r14;
        androidx.camera.core.impl.SessionConfig$Builder r6;
        androidx.camera.camera2.internal.compat.workaround.SupportedRepeatingSurfaceSize $r7;
        androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig $r8, $r15;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;
        int $i0, $i1;
        androidx.camera.core.impl.ImmediateSurface $r17;
        androidx.camera.core.impl.DeferrableSurface $r18, $r22;
        com.google.common.util.concurrent.ListenableFuture $r19;
        androidx.camera.camera2.internal.MeteringRepeatingSession$1 $r20;
        java.util.concurrent.Executor $r21;
        androidx.camera.core.impl.SessionConfig $r24;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        r2 := @parameter1: androidx.camera.camera2.internal.DisplayInfoManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new androidx.camera.camera2.internal.compat.workaround.SupportedRepeatingSurfaceSize;

        specialinvoke $r7.<androidx.camera.camera2.internal.compat.workaround.SupportedRepeatingSurfaceSize: void <init>()>();

        r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.camera2.internal.compat.workaround.SupportedRepeatingSurfaceSize mSupportedRepeatingSurfaceSize> = $r7;

        $r8 = new androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig;

        specialinvoke $r8.<androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig: void <init>()>();

        r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig mConfigWithDefaults> = $r8;

        $r9 = new android.graphics.SurfaceTexture;

        specialinvoke $r9.<android.graphics.SurfaceTexture: void <init>(int)>(0);

        r3 = $r9;

        r4 = specialinvoke r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: android.util.Size getProperPreviewSize(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,androidx.camera.camera2.internal.DisplayInfoManager)>(r1, r2);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MeteringSession SurfaceTexture size: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("MeteringRepeating", $r13);

        $i0 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        virtualinvoke r3.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>($i0, $i1);

        $r14 = new android.view.Surface;

        specialinvoke $r14.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>(r3);

        r5 = $r14;

        $r15 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig mConfigWithDefaults>;

        r6 = staticinvoke <androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)>($r15);

        virtualinvoke r6.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setTemplateType(int)>(1);

        $r17 = new androidx.camera.core.impl.ImmediateSurface;

        specialinvoke $r17.<androidx.camera.core.impl.ImmediateSurface: void <init>(android.view.Surface)>(r5);

        r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface> = $r17;

        $r18 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        $r19 = virtualinvoke $r18.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r20 = new androidx.camera.camera2.internal.MeteringRepeatingSession$1;

        specialinvoke $r20.<androidx.camera.camera2.internal.MeteringRepeatingSession$1: void <init>(androidx.camera.camera2.internal.MeteringRepeatingSession,android.view.Surface,android.graphics.SurfaceTexture)>(r0, r5, r3);

        $r21 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r19, $r20, $r21);

        $r22 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke r6.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addSurface(androidx.camera.core.impl.DeferrableSurface)>($r22);

        $r24 = virtualinvoke r6.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.SessionConfig mSessionConfig> = $r24;

        return;
    }

    androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession r0;
        androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig $r1;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession;

        $r1 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig mConfigWithDefaults>;

        return $r1;
    }

    androidx.camera.core.impl.SessionConfig getSessionConfig()
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession r0;
        androidx.camera.core.impl.SessionConfig $r1;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession;

        $r1 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        return $r1;
    }

    java.lang.String getName()
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession r0;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession;

        return "MeteringRepeating";
    }

    void clear()
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession r0;
        androidx.camera.core.impl.DeferrableSurface $r1, $r2;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("MeteringRepeating", "MeteringRepeating clear!");

        $r1 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface>;

        virtualinvoke $r2.<androidx.camera.core.impl.DeferrableSurface: void close()>();

     label1:
        r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.DeferrableSurface mDeferrableSurface> = null;

        return;
    }

    private android.util.Size getProperPreviewSize(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat, androidx.camera.camera2.internal.DisplayInfoManager)
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1;
        androidx.camera.camera2.internal.DisplayInfoManager r2;
        android.hardware.camera2.params.StreamConfigurationMap r3;
        java.util.List r4;
        android.util.Size r5, r7, $r13, $r14, $r15, r18;
        long l0, l2, $l5, $l7, $l8, $l10, $l12;
        android.util.Size[] r6, r16, r17;
        int i1, $i3, $i4, $i6, $i9, $i11, i15;
        android.hardware.camera2.CameraCharacteristics$Key $r8;
        java.lang.Object $r9, $r12;
        androidx.camera.camera2.internal.compat.workaround.SupportedRepeatingSurfaceSize $r10;
        java.util.Comparator $r11;
        byte $b13, $b14;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        r2 := @parameter1: androidx.camera.camera2.internal.DisplayInfoManager;

        $r8 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r9 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r8);

        r3 = (android.hardware.camera2.params.StreamConfigurationMap) $r9;

        if r3 != null goto label1;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("MeteringRepeating", "Can not retrieve SCALER_STREAM_CONFIGURATION_MAP.");

        $r15 = new android.util.Size;

        specialinvoke $r15.<android.util.Size: void <init>(int,int)>(0, 0);

        return $r15;

     label1:
        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 >= 23 goto label2;

        r16 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>(class "Landroid/graphics/SurfaceTexture;");

        goto label3;

     label2:
        r16 = virtualinvoke r3.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(34);

     label3:
        if r16 != null goto label4;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("MeteringRepeating", "Can not get output size list.");

        $r14 = new android.util.Size;

        specialinvoke $r14.<android.util.Size: void <init>(int,int)>(0, 0);

        return $r14;

     label4:
        $r10 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.camera2.internal.compat.workaround.SupportedRepeatingSurfaceSize mSupportedRepeatingSurfaceSize>;

        r17 = virtualinvoke $r10.<androidx.camera.camera2.internal.compat.workaround.SupportedRepeatingSurfaceSize: android.util.Size[] getSupportedSizes(android.util.Size[])>(r16);

        r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r17);

        $r11 = dynamicinvoke "compare" <java.util.Comparator ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: int __METHODTYPE__(java.lang.Object,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.MeteringRepeatingSession: int lambda$getProperPreviewSize$0(android.util.Size,android.util.Size)>, methodtype: int __METHODTYPE__(android.util.Size,android.util.Size));

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r4, $r11);

        r5 = virtualinvoke r2.<androidx.camera.camera2.internal.DisplayInfoManager: android.util.Size getPreviewSize()>();

        $i4 = virtualinvoke r5.<android.util.Size: int getWidth()>();

        $l5 = (long) $i4;

        $i6 = virtualinvoke r5.<android.util.Size: int getHeight()>();

        $l7 = (long) $i6;

        $l8 = $l5 * $l7;

        l0 = staticinvoke <java.lang.Math: long min(long,long)>($l8, 307200L);

        r18 = null;

        r6 = r17;

        i1 = lengthof r6;

        i15 = 0;

     label5:
        if i15 >= i1 goto label8;

        r7 = r6[i15];

        $i9 = virtualinvoke r7.<android.util.Size: int getWidth()>();

        $l10 = (long) $i9;

        $i11 = virtualinvoke r7.<android.util.Size: int getHeight()>();

        $l12 = (long) $i11;

        l2 = $l10 * $l12;

        $b13 = l2 cmp l0;

        if $b13 != 0 goto label6;

        return r7;

     label6:
        $b14 = l2 cmp l0;

        if $b14 <= 0 goto label7;

        if r18 == null goto label8;

        return r18;

     label7:
        r18 = r7;

        i15 = i15 + 1;

        goto label5;

     label8:
        $r12 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (android.util.Size) $r12;

        return $r13;
    }

    private static int lambda$getProperPreviewSize$0(android.util.Size, android.util.Size)
    {
        android.util.Size r0, r1;
        int i0, $i1, $i3, $i6, $i8;
        long $l2, $l4, $l5, $l7, $l9, $l10, $l11;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Size;

        $i1 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $l2 = (long) $i1;

        $i3 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $l4 = (long) $i3;

        $l5 = $l2 * $l4;

        $i6 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $l7 = (long) $i6;

        $i8 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $l9 = (long) $i8;

        $l10 = $l7 * $l9;

        $l11 = $l5 - $l10;

        i0 = staticinvoke <java.lang.Long: int signum(long)>($l11);

        return i0;
    }

androidx.camera.camera2.internal.MeteringRepeatingSession$1
<androidx.camera.camera2.internal.MeteringRepeatingSession$1: android.view.Surface val$surface>
<androidx.camera.camera2.internal.MeteringRepeatingSession$1: android.graphics.SurfaceTexture val$surfaceTexture>
<androidx.camera.camera2.internal.MeteringRepeatingSession$1: androidx.camera.camera2.internal.MeteringRepeatingSession this$0>
    void <init>(androidx.camera.camera2.internal.MeteringRepeatingSession, android.view.Surface, android.graphics.SurfaceTexture)
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession$1 r0;
        androidx.camera.camera2.internal.MeteringRepeatingSession r1;
        android.view.Surface r2;
        android.graphics.SurfaceTexture r3;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession$1;

        r1 := @parameter0: androidx.camera.camera2.internal.MeteringRepeatingSession;

        r2 := @parameter1: android.view.Surface;

        r3 := @parameter2: android.graphics.SurfaceTexture;

        r0.<androidx.camera.camera2.internal.MeteringRepeatingSession$1: androidx.camera.camera2.internal.MeteringRepeatingSession this$0> = r1;

        r0.<androidx.camera.camera2.internal.MeteringRepeatingSession$1: android.view.Surface val$surface> = r2;

        r0.<androidx.camera.camera2.internal.MeteringRepeatingSession$1: android.graphics.SurfaceTexture val$surfaceTexture> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession$1 r0;
        java.lang.Void r1;
        android.view.Surface $r2;
        android.graphics.SurfaceTexture $r3;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession$1;

        r1 := @parameter0: java.lang.Void;

        $r2 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession$1: android.view.Surface val$surface>;

        virtualinvoke $r2.<android.view.Surface: void release()>();

        $r3 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession$1: android.graphics.SurfaceTexture val$surfaceTexture>;

        virtualinvoke $r3.<android.graphics.SurfaceTexture: void release()>();

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession$1 r0;
        java.lang.Throwable r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Future should never fail. Did it get completed by GC?", r1);

        throw $r2;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.camera2.internal.MeteringRepeatingSession$1: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig
<androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig: androidx.camera.core.impl.Config mConfig>
    void <init>()
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig r0;
        androidx.camera.core.impl.MutableOptionsBundle r1;
        androidx.camera.camera2.internal.Camera2SessionOptionUnpacker $r2;
        androidx.camera.core.impl.Config$Option $r3;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r1 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

        $r3 = <androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.Config$Option OPTION_SESSION_CONFIG_UNPACKER>;

        $r2 = new androidx.camera.camera2.internal.Camera2SessionOptionUnpacker;

        specialinvoke $r2.<androidx.camera.camera2.internal.Camera2SessionOptionUnpacker: void <init>()>();

        virtualinvoke r1.<androidx.camera.core.impl.MutableOptionsBundle: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r3, $r2);

        r0.<androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig: androidx.camera.core.impl.Config mConfig> = r1;

        return;
    }

    public androidx.camera.core.impl.Config getConfig()
    {
        androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig r0;
        androidx.camera.core.impl.Config $r1;

        r0 := @this: androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig;

        $r1 = r0.<androidx.camera.camera2.internal.MeteringRepeatingSession$MeteringRepeatingConfig: androidx.camera.core.impl.Config mConfig>;

        return $r1;
    }

