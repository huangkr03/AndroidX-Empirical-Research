androidx.media3.extractor.avi.StreamFormatChunk
<androidx.media3.extractor.avi.StreamFormatChunk: java.lang.String TAG>
<androidx.media3.extractor.avi.StreamFormatChunk: androidx.media3.common.Format format>
    public static androidx.media3.extractor.avi.AviChunk parseFrom(int, androidx.media3.common.util.ParsableByteArray)
    {
        int i0;
        androidx.media3.common.util.ParsableByteArray r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;
        androidx.media3.extractor.avi.AviChunk $r6, $r7;

        i0 := @parameter0: int;

        r0 := @parameter1: androidx.media3.common.util.ParsableByteArray;

        if i0 != 2 goto label1;

        $r7 = staticinvoke <androidx.media3.extractor.avi.StreamFormatChunk: androidx.media3.extractor.avi.AviChunk parseBitmapInfoHeader(androidx.media3.common.util.ParsableByteArray)>(r0);

        return $r7;

     label1:
        if i0 != 1 goto label2;

        $r6 = staticinvoke <androidx.media3.extractor.avi.StreamFormatChunk: androidx.media3.extractor.avi.AviChunk parseWaveFormatEx(androidx.media3.common.util.ParsableByteArray)>(r0);

        return $r6;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring strf box for unsupported track type: ");

        $r3 = staticinvoke <androidx.media3.common.util.Util: java.lang.String getTrackTypeString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("StreamFormatChunk", $r5);

        return null;
    }

    public void <init>(androidx.media3.common.Format)
    {
        androidx.media3.extractor.avi.StreamFormatChunk r0;
        androidx.media3.common.Format r1;

        r0 := @this: androidx.media3.extractor.avi.StreamFormatChunk;

        r1 := @parameter0: androidx.media3.common.Format;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.avi.StreamFormatChunk: androidx.media3.common.Format format> = r1;

        return;
    }

    public int getType()
    {
        androidx.media3.extractor.avi.StreamFormatChunk r0;

        r0 := @this: androidx.media3.extractor.avi.StreamFormatChunk;

        return 1718776947;
    }

    private static androidx.media3.extractor.avi.AviChunk parseBitmapInfoHeader(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.common.util.ParsableByteArray r0;
        int i0, i1, i2;
        java.lang.String r1, $r12;
        androidx.media3.common.Format$Builder r2, $r3, $r4, $r5;
        androidx.media3.extractor.avi.StreamFormatChunk $r7;
        androidx.media3.common.Format $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

        i0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianInt()>();

        i1 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianInt()>();

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

        i2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianInt()>();

        r1 = staticinvoke <androidx.media3.extractor.avi.StreamFormatChunk: java.lang.String getMimeTypeFromCompression(int)>(i2);

        if r1 != null goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring track with unsupported compression ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("StreamFormatChunk", $r12);

        return null;

     label1:
        $r3 = new androidx.media3.common.Format$Builder;

        specialinvoke $r3.<androidx.media3.common.Format$Builder: void <init>()>();

        r2 = $r3;

        $r4 = virtualinvoke r2.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>(i0);

        $r5 = virtualinvoke $r4.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>(i1);

        virtualinvoke $r5.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>(r1);

        $r7 = new androidx.media3.extractor.avi.StreamFormatChunk;

        $r8 = virtualinvoke r2.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        specialinvoke $r7.<androidx.media3.extractor.avi.StreamFormatChunk: void <init>(androidx.media3.common.Format)>($r8);

        return $r7;
    }

    private static androidx.media3.extractor.avi.AviChunk parseWaveFormatEx(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.common.util.ParsableByteArray r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7;
        java.lang.String r1, $r8, $r15, $r16;
        byte[] r2;
        androidx.media3.common.Format$Builder r3, $r4, $r5, $r6;
        boolean $z0, $z1;
        com.google.common.collect.ImmutableList $r9;
        java.lang.StringBuilder $r12, $r13, $r14;
        androidx.media3.extractor.avi.StreamFormatChunk $r17;
        androidx.media3.common.Format $r18;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianUnsignedShort()>();

        r1 = staticinvoke <androidx.media3.extractor.avi.StreamFormatChunk: java.lang.String getMimeTypeFromTag(int)>(i0);

        if r1 != null goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring track with unsupported format tag ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("StreamFormatChunk", $r15);

        return null;

     label1:
        i1 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianUnsignedShort()>();

        i2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianInt()>();

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(6);

        i3 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readUnsignedShort()>();

        i4 = staticinvoke <androidx.media3.common.util.Util: int getPcmEncoding(int)>(i3);

        i5 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianUnsignedShort()>();

        r2 = newarray (byte)[i5];

        $i6 = lengthof r2;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>(r2, 0, $i6);

        $r4 = new androidx.media3.common.Format$Builder;

        specialinvoke $r4.<androidx.media3.common.Format$Builder: void <init>()>();

        r3 = $r4;

        $r5 = virtualinvoke r3.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>(i1);

        virtualinvoke $r6.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>(i2);

        $r8 = "audio/raw";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        if i4 == 0 goto label2;

        virtualinvoke r3.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setPcmEncoding(int)>(i4);

     label2:
        $r16 = "audio/mp4a-latm";

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $i7 = lengthof r2;

        if $i7 <= 0 goto label3;

        $r9 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(r2);

        virtualinvoke r3.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setInitializationData(java.util.List)>($r9);

     label3:
        $r17 = new androidx.media3.extractor.avi.StreamFormatChunk;

        $r18 = virtualinvoke r3.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        specialinvoke $r17.<androidx.media3.extractor.avi.StreamFormatChunk: void <init>(androidx.media3.common.Format)>($r18);

        return $r17;
    }

    private static java.lang.String getMimeTypeFromTag(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 85: goto label2;
            case 255: goto label3;
            case 8192: goto label4;
            case 8193: goto label5;
            default: goto label6;
        };

     label1:
        return "audio/raw";

     label2:
        return "audio/mpeg";

     label3:
        return "audio/mp4a-latm";

     label4:
        return "audio/ac3";

     label5:
        return "audio/vnd.dts";

     label6:
        return null;
    }

    private static java.lang.String getMimeTypeFromCompression(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 808802372: goto label4;
            case 826496577: goto label3;
            case 828601953: goto label3;
            case 842289229: goto label1;
            case 859066445: goto label2;
            case 875967048: goto label3;
            case 877677894: goto label4;
            case 1145656883: goto label4;
            case 1145656920: goto label4;
            case 1196444237: goto label5;
            case 1482049860: goto label4;
            case 1684633208: goto label4;
            case 1735420525: goto label5;
            case 2021026148: goto label4;
            default: goto label6;
        };

     label1:
        return "video/mp42";

     label2:
        return "video/mp43";

     label3:
        return "video/avc";

     label4:
        return "video/mp4v-es";

     label5:
        return "video/mjpeg";

     label6:
        return null;
    }

