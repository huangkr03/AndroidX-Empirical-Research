androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor
<androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor: androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion Companion>
    public boolean isSuppressed(org.jetbrains.kotlin.diagnostics.Diagnostic)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor r0;
        org.jetbrains.kotlin.diagnostics.Diagnostic r1;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor;

        r1 := @parameter0: org.jetbrains.kotlin.diagnostics.Diagnostic;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "diagnostic");

        $z0 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor: boolean isSuppressed(org.jetbrains.kotlin.diagnostics.Diagnostic,org.jetbrains.kotlin.resolve.BindingContext)>(r1, null);

        return $z0;
    }

    public boolean isSuppressed(org.jetbrains.kotlin.diagnostics.Diagnostic, org.jetbrains.kotlin.resolve.BindingContext)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor r0;
        org.jetbrains.kotlin.diagnostics.Diagnostic r1;
        org.jetbrains.kotlin.resolve.BindingContext r2;
        java.util.Iterator r3;
        org.jetbrains.kotlin.descriptors.annotations.AnnotationDescriptor r4;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory $r5, $r7;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory1 $r8;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement $r9, $r10, $r11, $r12, $r13, $r18, $r19;
        org.jetbrains.kotlin.psi.KtCallExpression $r14;
        org.jetbrains.kotlin.psi.KtElement $r15;
        org.jetbrains.kotlin.psi.Call $r16;
        java.lang.NullPointerException $r17, $r27;
        org.jetbrains.kotlin.psi.KtAnnotatedExpression $r20;
        java.util.List $r21;
        java.lang.Object $r22, $r26;
        org.jetbrains.kotlin.name.Name $r23;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r24;
        org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice $r25;
        org.jetbrains.kotlin.psi.KtAnnotationEntry r28;
        java.lang.String $r29;
        org.jetbrains.kotlin.resolve.calls.model.ResolvedCall r30;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor;

        r1 := @parameter0: org.jetbrains.kotlin.diagnostics.Diagnostic;

        r2 := @parameter1: org.jetbrains.kotlin.resolve.BindingContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "diagnostic");

        $r5 = interfaceinvoke r1.<org.jetbrains.kotlin.diagnostics.Diagnostic: org.jetbrains.kotlin.diagnostics.DiagnosticFactory getFactory()>();

        $r6 = <org.jetbrains.kotlin.diagnostics.Errors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 NON_SOURCE_ANNOTATION_ON_INLINED_LAMBDA_EXPRESSION>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label7;

        $r18 = interfaceinvoke r1.<org.jetbrains.kotlin.diagnostics.Diagnostic: org.jetbrains.kotlin.com.intellij.psi.PsiElement getPsiElement()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "diagnostic.psiElement");

        $r19 = interfaceinvoke $r18.<org.jetbrains.kotlin.com.intellij.psi.PsiElement: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        if $r19 != null goto label1;

        $r27 = new java.lang.NullPointerException;

        specialinvoke $r27.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.psi.KtAnnotatedExpression");

        throw $r27;

     label1:
        $r20 = (org.jetbrains.kotlin.psi.KtAnnotatedExpression) $r19;

        $r21 = virtualinvoke $r20.<org.jetbrains.kotlin.psi.KtAnnotatedExpression: java.util.List getAnnotationEntries()>();

        r3 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r22 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r28 = (org.jetbrains.kotlin.psi.KtAnnotationEntry) $r22;

        if r2 == null goto label3;

        $r24 = <org.jetbrains.kotlin.resolve.BindingContext: org.jetbrains.kotlin.util.slicedMap.WritableSlice ANNOTATION>;

        $r25 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r24;

        $r26 = interfaceinvoke r2.<org.jetbrains.kotlin.resolve.BindingContext: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r25, r28);

        r4 = (org.jetbrains.kotlin.descriptors.annotations.AnnotationDescriptor) $r26;

        if r4 == null goto label6;

        $z5 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean isComposableAnnotation(org.jetbrains.kotlin.descriptors.annotations.AnnotationDescriptor)>(r4);

        if $z5 == 0 goto label6;

        return 1;

     label3:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r28, "entry");

        $r23 = virtualinvoke r28.<org.jetbrains.kotlin.psi.KtAnnotationEntry: org.jetbrains.kotlin.name.Name getShortName()>();

        if $r23 == null goto label4;

        $r29 = virtualinvoke $r23.<org.jetbrains.kotlin.name.Name: java.lang.String getIdentifier()>();

        goto label5;

     label4:
        $r29 = null;

     label5:
        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r29, "Composable");

        if $z4 == 0 goto label6;

        return 1;

     label6:
        goto label2;

     label7:
        $r7 = interfaceinvoke r1.<org.jetbrains.kotlin.diagnostics.Diagnostic: org.jetbrains.kotlin.diagnostics.DiagnosticFactory getFactory()>();

        $r8 = <org.jetbrains.kotlin.diagnostics.Errors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory1 NAMED_ARGUMENTS_NOT_ALLOWED>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z1 == 0 goto label9;

        if r2 == null goto label9;

        $r9 = interfaceinvoke r1.<org.jetbrains.kotlin.diagnostics.Diagnostic: org.jetbrains.kotlin.com.intellij.psi.PsiElement getPsiElement()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "diagnostic.psiElement");

        $r10 = interfaceinvoke $r9.<org.jetbrains.kotlin.com.intellij.psi.PsiElement: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "diagnostic.psiElement.parent");

        $r11 = interfaceinvoke $r10.<org.jetbrains.kotlin.com.intellij.psi.PsiElement: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "diagnostic.psiElement.parent.parent");

        $r12 = interfaceinvoke $r11.<org.jetbrains.kotlin.com.intellij.psi.PsiElement: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "diagnostic.psiElement.parent.parent.parent");

        $r13 = interfaceinvoke $r12.<org.jetbrains.kotlin.com.intellij.psi.PsiElement: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        if $r13 != null goto label8;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.psi.KtCallExpression");

        throw $r17;

     label8:
        $r14 = (org.jetbrains.kotlin.psi.KtCallExpression) $r13;

        $r15 = (org.jetbrains.kotlin.psi.KtElement) $r14;

        $r16 = staticinvoke <org.jetbrains.kotlin.resolve.calls.callUtil.CallUtilKt: org.jetbrains.kotlin.psi.Call getCall(org.jetbrains.kotlin.psi.KtElement,org.jetbrains.kotlin.resolve.BindingContext)>($r15, r2);

        r30 = staticinvoke <org.jetbrains.kotlin.resolve.calls.callUtil.CallUtilKt: org.jetbrains.kotlin.resolve.calls.model.ResolvedCall getResolvedCall(org.jetbrains.kotlin.psi.Call,org.jetbrains.kotlin.resolve.BindingContext)>($r16, r2);

        if r30 == null goto label9;

        $z2 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isComposableInvocation(org.jetbrains.kotlin.resolve.calls.model.ResolvedCall)>(r30);

        return $z2;

     label9:
        return 0;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion $r0;

        $r0 = new androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion;

        specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor: androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion Companion> = $r0;

        return;
    }

androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion
    public final void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion r0;
        org.jetbrains.kotlin.com.intellij.openapi.project.Project r1;
        org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor r2;
        org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionsArea $r3;
        org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor$Companion $r4;
        org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionPointName $r5;
        org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionPoint $r6;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion;

        r1 := @parameter0: org.jetbrains.kotlin.com.intellij.openapi.project.Project;

        r2 := @parameter1: org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "project");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "extension");

        $r3 = staticinvoke <org.jetbrains.kotlin.com.intellij.openapi.extensions.Extensions: org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionsArea getRootArea()>();

        $r4 = <org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor: org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor$Companion Companion>;

        $r5 = virtualinvoke $r4.<org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor$Companion: org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionPointName getEP_NAME()>();

        $r6 = interfaceinvoke $r3.<org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionsArea: org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionPoint getExtensionPoint(org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionPointName)>($r5);

        interfaceinvoke $r6.<org.jetbrains.kotlin.com.intellij.openapi.extensions.ExtensionPoint: void registerExtension(java.lang.Object)>(r2);

        return;
    }

    private void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion: void <init>()>();

        return;
    }

