androidx.camera.core.impl.CaptureConfig
<androidx.camera.core.impl.CaptureConfig: int TEMPLATE_TYPE_NONE>
<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_ROTATION>
<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_JPEG_QUALITY>
<androidx.camera.core.impl.CaptureConfig: java.util.List mSurfaces>
<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config mImplementationOptions>
<androidx.camera.core.impl.CaptureConfig: int mTemplateType>
<androidx.camera.core.impl.CaptureConfig: java.util.List mCameraCaptureCallbacks>
<androidx.camera.core.impl.CaptureConfig: boolean mUseRepeatingSurface>
<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.TagBundle mTagBundle>
<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.CameraCaptureResult mCameraCaptureResult>
    void <init>(java.util.List, androidx.camera.core.impl.Config, int, java.util.List, boolean, androidx.camera.core.impl.TagBundle, androidx.camera.core.impl.CameraCaptureResult)
    {
        androidx.camera.core.impl.CaptureConfig r0;
        java.util.List r1, r3, $r6;
        androidx.camera.core.impl.Config r2;
        int i0;
        boolean z0;
        androidx.camera.core.impl.TagBundle r4;
        androidx.camera.core.impl.CameraCaptureResult r5;

        r0 := @this: androidx.camera.core.impl.CaptureConfig;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.camera.core.impl.Config;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.List;

        z0 := @parameter4: boolean;

        r4 := @parameter5: androidx.camera.core.impl.TagBundle;

        r5 := @parameter6: androidx.camera.core.impl.CameraCaptureResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.impl.CaptureConfig: java.util.List mSurfaces> = r1;

        r0.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config mImplementationOptions> = r2;

        r0.<androidx.camera.core.impl.CaptureConfig: int mTemplateType> = i0;

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r3);

        r0.<androidx.camera.core.impl.CaptureConfig: java.util.List mCameraCaptureCallbacks> = $r6;

        r0.<androidx.camera.core.impl.CaptureConfig: boolean mUseRepeatingSurface> = z0;

        r0.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.TagBundle mTagBundle> = r4;

        r0.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.CameraCaptureResult mCameraCaptureResult> = r5;

        return;
    }

    public static androidx.camera.core.impl.CaptureConfig defaultEmptyCaptureConfig()
    {
        androidx.camera.core.impl.CaptureConfig$Builder $r0;
        androidx.camera.core.impl.CaptureConfig $r1;

        $r0 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke $r0.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        return $r1;
    }

    public androidx.camera.core.impl.CameraCaptureResult getCameraCaptureResult()
    {
        androidx.camera.core.impl.CaptureConfig r0;
        androidx.camera.core.impl.CameraCaptureResult $r1;

        r0 := @this: androidx.camera.core.impl.CaptureConfig;

        $r1 = r0.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.CameraCaptureResult mCameraCaptureResult>;

        return $r1;
    }

    public java.util.List getSurfaces()
    {
        androidx.camera.core.impl.CaptureConfig r0;
        java.util.List $r1, $r2;

        r0 := @this: androidx.camera.core.impl.CaptureConfig;

        $r1 = r0.<androidx.camera.core.impl.CaptureConfig: java.util.List mSurfaces>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public androidx.camera.core.impl.Config getImplementationOptions()
    {
        androidx.camera.core.impl.CaptureConfig r0;
        androidx.camera.core.impl.Config $r1;

        r0 := @this: androidx.camera.core.impl.CaptureConfig;

        $r1 = r0.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config mImplementationOptions>;

        return $r1;
    }

    public int getTemplateType()
    {
        androidx.camera.core.impl.CaptureConfig r0;
        int $i0;

        r0 := @this: androidx.camera.core.impl.CaptureConfig;

        $i0 = r0.<androidx.camera.core.impl.CaptureConfig: int mTemplateType>;

        return $i0;
    }

    public boolean isUseRepeatingSurface()
    {
        androidx.camera.core.impl.CaptureConfig r0;
        boolean $z0;

        r0 := @this: androidx.camera.core.impl.CaptureConfig;

        $z0 = r0.<androidx.camera.core.impl.CaptureConfig: boolean mUseRepeatingSurface>;

        return $z0;
    }

    public java.util.List getCameraCaptureCallbacks()
    {
        androidx.camera.core.impl.CaptureConfig r0;
        java.util.List $r1;

        r0 := @this: androidx.camera.core.impl.CaptureConfig;

        $r1 = r0.<androidx.camera.core.impl.CaptureConfig: java.util.List mCameraCaptureCallbacks>;

        return $r1;
    }

    public androidx.camera.core.impl.TagBundle getTagBundle()
    {
        androidx.camera.core.impl.CaptureConfig r0;
        androidx.camera.core.impl.TagBundle $r1;

        r0 := @this: androidx.camera.core.impl.CaptureConfig;

        $r1 = r0.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.TagBundle mTagBundle>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        androidx.camera.core.impl.Config$Option $r1, $r2;

        $r0 = <java.lang.Integer: java.lang.Class TYPE>;

        $r1 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.core.captureConfig.rotation", $r0);

        <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_ROTATION> = $r1;

        $r2 = staticinvoke <androidx.camera.core.impl.Config$Option: androidx.camera.core.impl.Config$Option create(java.lang.String,java.lang.Class)>("camerax.core.captureConfig.jpegQuality", class "Ljava/lang/Integer;");

        <androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config$Option OPTION_JPEG_QUALITY> = $r2;

        return;
    }

androidx.camera.core.impl.CaptureConfig$Builder
<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set mSurfaces>
<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions>
<androidx.camera.core.impl.CaptureConfig$Builder: int mTemplateType>
<androidx.camera.core.impl.CaptureConfig$Builder: java.util.List mCameraCaptureCallbacks>
<androidx.camera.core.impl.CaptureConfig$Builder: boolean mUseRepeatingSurface>
<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableTagBundle mMutableTagBundle>
<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CameraCaptureResult mCameraCaptureResult>
    public void <init>()
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        java.util.HashSet $r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;
        java.util.ArrayList $r3;
        androidx.camera.core.impl.MutableTagBundle $r4;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set mSurfaces> = $r1;

        $r2 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions> = $r2;

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: int mTemplateType> = -1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.List mCameraCaptureCallbacks> = $r3;

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: boolean mUseRepeatingSurface> = 0;

        $r4 = staticinvoke <androidx.camera.core.impl.MutableTagBundle: androidx.camera.core.impl.MutableTagBundle create()>();

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableTagBundle mMutableTagBundle> = $r4;

        return;
    }

    private void <init>(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.CaptureConfig r1;
        java.util.HashSet $r2;
        androidx.camera.core.impl.MutableOptionsBundle $r3, $r9;
        java.util.ArrayList $r4;
        androidx.camera.core.impl.MutableTagBundle $r5, $r13;
        java.util.List $r6, $r10, $r11;
        java.util.Set $r7;
        androidx.camera.core.impl.Config $r8;
        int $i0;
        boolean $z2;
        androidx.camera.core.impl.TagBundle $r12;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set mSurfaces> = $r2;

        $r3 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions> = $r3;

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: int mTemplateType> = -1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.List mCameraCaptureCallbacks> = $r4;

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: boolean mUseRepeatingSurface> = 0;

        $r5 = staticinvoke <androidx.camera.core.impl.MutableTagBundle: androidx.camera.core.impl.MutableTagBundle create()>();

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableTagBundle mMutableTagBundle> = $r5;

        $r7 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set mSurfaces>;

        $r6 = r1.<androidx.camera.core.impl.CaptureConfig: java.util.List mSurfaces>;

        interfaceinvoke $r7.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

        $r8 = r1.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config mImplementationOptions>;

        $r9 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>($r8);

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions> = $r9;

        $i0 = r1.<androidx.camera.core.impl.CaptureConfig: int mTemplateType>;

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: int mTemplateType> = $i0;

        $r10 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.List mCameraCaptureCallbacks>;

        $r11 = virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig: java.util.List getCameraCaptureCallbacks()>();

        interfaceinvoke $r10.<java.util.List: boolean addAll(java.util.Collection)>($r11);

        $z2 = virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig: boolean isUseRepeatingSurface()>();

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: boolean mUseRepeatingSurface> = $z2;

        $r12 = virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.TagBundle getTagBundle()>();

        $r13 = staticinvoke <androidx.camera.core.impl.MutableTagBundle: androidx.camera.core.impl.MutableTagBundle 'from'(androidx.camera.core.impl.TagBundle)>($r12);

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableTagBundle mMutableTagBundle> = $r13;

        return;
    }

    public static androidx.camera.core.impl.CaptureConfig$Builder createFrom(androidx.camera.core.impl.UseCaseConfig)
    {
        androidx.camera.core.impl.UseCaseConfig r0;
        androidx.camera.core.impl.CaptureConfig$OptionUnpacker r1;
        androidx.camera.core.impl.CaptureConfig$Builder r2, $r3;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.String $r7, $r8, $r10;

        r0 := @parameter0: androidx.camera.core.impl.UseCaseConfig;

        r1 = interfaceinvoke r0.<androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.CaptureConfig$OptionUnpacker getCaptureOptionUnpacker(androidx.camera.core.impl.CaptureConfig$OptionUnpacker)>(null);

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Implementation is missing option unpacker for ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r8 = interfaceinvoke r0.<androidx.camera.core.impl.UseCaseConfig: java.lang.String getTargetName(java.lang.String)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r3 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke $r3.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>()>();

        r2 = $r3;

        interfaceinvoke r1.<androidx.camera.core.impl.CaptureConfig$OptionUnpacker: void unpack(androidx.camera.core.impl.UseCaseConfig,androidx.camera.core.impl.CaptureConfig$Builder)>(r0, r2);

        return r2;
    }

    public static androidx.camera.core.impl.CaptureConfig$Builder 'from'(androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.core.impl.CaptureConfig r0;
        androidx.camera.core.impl.CaptureConfig$Builder $r1;

        r0 := @parameter0: androidx.camera.core.impl.CaptureConfig;

        $r1 = new androidx.camera.core.impl.CaptureConfig$Builder;

        specialinvoke $r1.<androidx.camera.core.impl.CaptureConfig$Builder: void <init>(androidx.camera.core.impl.CaptureConfig)>(r0);

        return $r1;
    }

    public void setCameraCaptureResult(androidx.camera.core.impl.CameraCaptureResult)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.CameraCaptureResult r1;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureResult;

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CameraCaptureResult mCameraCaptureResult> = r1;

        return;
    }

    public int getTemplateType()
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        int $i0;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        $i0 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: int mTemplateType>;

        return $i0;
    }

    public void setTemplateType(int)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        int i0;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        i0 := @parameter0: int;

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: int mTemplateType> = i0;

        return;
    }

    public void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.CameraCaptureCallback r1;
        java.util.List $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        $r2 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.List mCameraCaptureCallbacks>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.List mCameraCaptureCallbacks>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addAllCameraCaptureCallbacks(java.util.Collection)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.CameraCaptureCallback r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CameraCaptureCallback) $r4;

        virtualinvoke r0.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r3);

        goto label1;

     label2:
        return;
    }

    public boolean removeCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.CameraCaptureCallback r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureCallback;

        $r2 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.List mCameraCaptureCallbacks>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public void addSurface(androidx.camera.core.impl.DeferrableSurface)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.DeferrableSurface r1;
        java.util.Set $r2;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        $r2 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set mSurfaces>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeSurface(androidx.camera.core.impl.DeferrableSurface)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.DeferrableSurface r1;
        java.util.Set $r2;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        $r2 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set mSurfaces>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void clearSurfaces()
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        java.util.Set $r1;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        $r1 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set mSurfaces>;

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        return;
    }

    public java.util.Set getSurfaces()
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        java.util.Set $r1;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        $r1 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set mSurfaces>;

        return $r1;
    }

    public void setImplementationOptions(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.Config r1;
        androidx.camera.core.impl.MutableOptionsBundle $r2;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.Config;

        $r2 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle 'from'(androidx.camera.core.impl.Config)>(r1);

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions> = $r2;

        return;
    }

    public void addImplementationOptions(androidx.camera.core.impl.Config)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.Config r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.Config$Option r3, r4;
        java.lang.Object r5, $r7, r15;
        java.util.Set $r6;
        boolean $z0, $z1, $z2;
        androidx.camera.core.impl.MutableConfig $r8, $r9;
        androidx.camera.core.impl.Config$OptionPriority $r10;
        androidx.camera.core.impl.MultiValueSet $r11, $r12, $r13;
        java.util.List $r14;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.Config;

        $r6 = interfaceinvoke r1.<androidx.camera.core.impl.Config: java.util.Set listOptions()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.Config$Option) $r7;

        r4 = r3;

        $r8 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions>;

        r5 = interfaceinvoke $r8.<androidx.camera.core.impl.MutableConfig: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>(r4, null);

        r15 = interfaceinvoke r1.<androidx.camera.core.impl.Config: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option)>(r4);

        $z1 = r5 instanceof androidx.camera.core.impl.MultiValueSet;

        if $z1 == 0 goto label2;

        $r13 = (androidx.camera.core.impl.MultiValueSet) r5;

        $r12 = (androidx.camera.core.impl.MultiValueSet) r15;

        $r14 = virtualinvoke $r12.<androidx.camera.core.impl.MultiValueSet: java.util.List getAllItems()>();

        virtualinvoke $r13.<androidx.camera.core.impl.MultiValueSet: void addAll(java.util.List)>($r14);

        goto label4;

     label2:
        $z2 = r15 instanceof androidx.camera.core.impl.MultiValueSet;

        if $z2 == 0 goto label3;

        $r11 = (androidx.camera.core.impl.MultiValueSet) r15;

        r15 = virtualinvoke $r11.<androidx.camera.core.impl.MultiValueSet: androidx.camera.core.impl.MultiValueSet clone()>();

     label3:
        $r9 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions>;

        $r10 = interfaceinvoke r1.<androidx.camera.core.impl.Config: androidx.camera.core.impl.Config$OptionPriority getOptionPriority(androidx.camera.core.impl.Config$Option)>(r3);

        interfaceinvoke $r9.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,androidx.camera.core.impl.Config$OptionPriority,java.lang.Object)>(r4, $r10, r15);

     label4:
        goto label1;

     label5:
        return;
    }

    public void addImplementationOption(androidx.camera.core.impl.Config$Option, java.lang.Object)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.Config$Option r1;
        java.lang.Object r2;
        androidx.camera.core.impl.MutableConfig $r3;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.Config$Option;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions>;

        interfaceinvoke $r3.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>(r1, r2);

        return;
    }

    public androidx.camera.core.impl.Config getImplementationOptions()
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.MutableConfig $r1;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        $r1 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions>;

        return $r1;
    }

    public boolean isUseRepeatingSurface()
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        boolean $z0;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        $z0 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: boolean mUseRepeatingSurface>;

        return $z0;
    }

    public void setUseRepeatingSurface(boolean)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        boolean z0;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.camera.core.impl.CaptureConfig$Builder: boolean mUseRepeatingSurface> = z0;

        return;
    }

    public java.lang.Object getTag(java.lang.String)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        java.lang.String r1;
        androidx.camera.core.impl.MutableTagBundle $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableTagBundle mMutableTagBundle>;

        $r3 = virtualinvoke $r2.<androidx.camera.core.impl.MutableTagBundle: java.lang.Object getTag(java.lang.String)>(r1);

        return $r3;
    }

    public void addTag(java.lang.String, java.lang.Object)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        java.lang.String r1;
        java.lang.Object r2;
        androidx.camera.core.impl.MutableTagBundle $r3;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableTagBundle mMutableTagBundle>;

        virtualinvoke $r3.<androidx.camera.core.impl.MutableTagBundle: void putTag(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public void addAllTags(androidx.camera.core.impl.TagBundle)
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.TagBundle r1;
        androidx.camera.core.impl.MutableTagBundle $r2;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        r1 := @parameter0: androidx.camera.core.impl.TagBundle;

        $r2 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableTagBundle mMutableTagBundle>;

        virtualinvoke $r2.<androidx.camera.core.impl.MutableTagBundle: void addTagBundle(androidx.camera.core.impl.TagBundle)>(r1);

        return;
    }

    public androidx.camera.core.impl.CaptureConfig build()
    {
        androidx.camera.core.impl.CaptureConfig$Builder r0;
        androidx.camera.core.impl.CaptureConfig $r1;
        java.util.ArrayList $r2;
        java.util.Set $r3;
        androidx.camera.core.impl.MutableConfig $r4;
        androidx.camera.core.impl.OptionsBundle $r5;
        androidx.camera.core.impl.MutableTagBundle $r6;
        int $i0;
        java.util.List $r7;
        boolean $z0;
        androidx.camera.core.impl.TagBundle $r8;
        androidx.camera.core.impl.CameraCaptureResult $r9;

        r0 := @this: androidx.camera.core.impl.CaptureConfig$Builder;

        $r1 = new androidx.camera.core.impl.CaptureConfig;

        $r2 = new java.util.ArrayList;

        $r3 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set mSurfaces>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableConfig mImplementationOptions>;

        $r5 = staticinvoke <androidx.camera.core.impl.OptionsBundle: androidx.camera.core.impl.OptionsBundle 'from'(androidx.camera.core.impl.Config)>($r4);

        $i0 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: int mTemplateType>;

        $r7 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.List mCameraCaptureCallbacks>;

        $z0 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: boolean mUseRepeatingSurface>;

        $r6 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.MutableTagBundle mMutableTagBundle>;

        $r8 = staticinvoke <androidx.camera.core.impl.TagBundle: androidx.camera.core.impl.TagBundle 'from'(androidx.camera.core.impl.TagBundle)>($r6);

        $r9 = r0.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CameraCaptureResult mCameraCaptureResult>;

        specialinvoke $r1.<androidx.camera.core.impl.CaptureConfig: void <init>(java.util.List,androidx.camera.core.impl.Config,int,java.util.List,boolean,androidx.camera.core.impl.TagBundle,androidx.camera.core.impl.CameraCaptureResult)>($r2, $r5, $i0, $r7, $z0, $r8, $r9);

        return $r1;
    }

androidx.camera.core.impl.CaptureConfig$OptionUnpacker
<androidx.camera.core.impl.CaptureConfig$OptionUnpacker: void unpack(androidx.camera.core.impl.UseCaseConfig,androidx.camera.core.impl.CaptureConfig$Builder)>
