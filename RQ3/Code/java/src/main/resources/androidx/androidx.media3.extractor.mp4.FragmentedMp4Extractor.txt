androidx.media3.extractor.mp4.FragmentedMp4Extractor
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorsFactory FACTORY>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int FLAG_WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int FLAG_WORKAROUND_IGNORE_TFDT_BOX>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int FLAG_ENABLE_EMSG_TRACK>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int FLAG_WORKAROUND_IGNORE_EDIT_LISTS>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.lang.String TAG>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int SAMPLE_GROUP_TYPE_seig>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: byte[] PIFF_SAMPLE_ENCRYPTION_BOX_EXTENDED_TYPE>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.Format EMSG_FORMAT>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int EXTRA_TRACKS_BASE_ID>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int STATE_READING_ATOM_HEADER>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int STATE_READING_ATOM_PAYLOAD>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int STATE_READING_ENCRYPTION_DATA>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int STATE_READING_SAMPLE_START>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int STATE_READING_SAMPLE_CONTINUE>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int flags>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.Track sideloadedTrack>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.List closedCaptionFormats>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalStartCode>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalPrefix>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: byte[] scratchBytes>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.metadata.emsg.EventMessageEncoder eventMessageEncoder>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque pendingMetadataSampleInfos>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput additionalEmsgTrackOutput>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomData>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long endOfMdatPosition>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int pendingMetadataSampleBytes>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long pendingSeekTimeUs>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long durationUs>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long segmentIndexEarliestPresentationTimeUs>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle currentTrackBundle>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean processSeiNalUnitPayload>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] ceaTrackOutputs>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean haveOutputSeekMap>
    public void <init>()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void <init>(int)>(0);

        return;
    }

    public void <init>(int)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        int i0;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void <init>(int,androidx.media3.common.util.TimestampAdjuster)>(i0, null);

        return;
    }

    public void <init>(int, androidx.media3.common.util.TimestampAdjuster)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        int i0;
        androidx.media3.common.util.TimestampAdjuster r1;
        java.util.List $r2;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.util.TimestampAdjuster;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void <init>(int,androidx.media3.common.util.TimestampAdjuster,androidx.media3.extractor.mp4.Track,java.util.List)>(i0, r1, null, $r2);

        return;
    }

    public void <init>(int, androidx.media3.common.util.TimestampAdjuster, androidx.media3.extractor.mp4.Track)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        int i0;
        androidx.media3.common.util.TimestampAdjuster r1;
        androidx.media3.extractor.mp4.Track r2;
        java.util.List $r3;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.util.TimestampAdjuster;

        r2 := @parameter2: androidx.media3.extractor.mp4.Track;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void <init>(int,androidx.media3.common.util.TimestampAdjuster,androidx.media3.extractor.mp4.Track,java.util.List)>(i0, r1, r2, $r3);

        return;
    }

    public void <init>(int, androidx.media3.common.util.TimestampAdjuster, androidx.media3.extractor.mp4.Track, java.util.List)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        int i0;
        androidx.media3.common.util.TimestampAdjuster r1;
        androidx.media3.extractor.mp4.Track r2;
        java.util.List r3;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.util.TimestampAdjuster;

        r2 := @parameter2: androidx.media3.extractor.mp4.Track;

        r3 := @parameter3: java.util.List;

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void <init>(int,androidx.media3.common.util.TimestampAdjuster,androidx.media3.extractor.mp4.Track,java.util.List,androidx.media3.extractor.TrackOutput)>(i0, r1, r2, r3, null);

        return;
    }

    public void <init>(int, androidx.media3.common.util.TimestampAdjuster, androidx.media3.extractor.mp4.Track, java.util.List, androidx.media3.extractor.TrackOutput)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        int i0;
        androidx.media3.common.util.TimestampAdjuster r1;
        androidx.media3.extractor.mp4.Track r2;
        java.util.List r3, $r5;
        androidx.media3.extractor.TrackOutput r4;
        androidx.media3.extractor.metadata.emsg.EventMessageEncoder $r6;
        androidx.media3.common.util.ParsableByteArray $r7, $r8, $r10, $r11, $r13;
        byte[] $r9, $r12, $r14;
        java.util.ArrayDeque $r15, $r16;
        android.util.SparseArray $r17;
        androidx.media3.extractor.ExtractorOutput $r18;
        androidx.media3.extractor.TrackOutput[] $r19, $r20;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.util.TimestampAdjuster;

        r2 := @parameter2: androidx.media3.extractor.mp4.Track;

        r3 := @parameter3: java.util.List;

        r4 := @parameter4: androidx.media3.extractor.TrackOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int flags> = i0;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster> = r1;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.Track sideloadedTrack> = r2;

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r3);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.List closedCaptionFormats> = $r5;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput additionalEmsgTrackOutput> = r4;

        $r6 = new androidx.media3.extractor.metadata.emsg.EventMessageEncoder;

        specialinvoke $r6.<androidx.media3.extractor.metadata.emsg.EventMessageEncoder: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.metadata.emsg.EventMessageEncoder eventMessageEncoder> = $r6;

        $r7 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r7.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(16);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader> = $r7;

        $r8 = new androidx.media3.common.util.ParsableByteArray;

        $r9 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        specialinvoke $r8.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r9);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalStartCode> = $r8;

        $r10 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r10.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(5);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalPrefix> = $r10;

        $r11 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r11.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer> = $r11;

        $r12 = newarray (byte)[16];

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: byte[] scratchBytes> = $r12;

        $r13 = new androidx.media3.common.util.ParsableByteArray;

        $r14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: byte[] scratchBytes>;

        specialinvoke $r13.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r14);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray scratch> = $r13;

        $r15 = new java.util.ArrayDeque;

        specialinvoke $r15.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms> = $r15;

        $r16 = new java.util.ArrayDeque;

        specialinvoke $r16.<java.util.ArrayDeque: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque pendingMetadataSampleInfos> = $r16;

        $r17 = new android.util.SparseArray;

        specialinvoke $r17.<android.util.SparseArray: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles> = $r17;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long durationUs> = -9223372036854775807L;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long pendingSeekTimeUs> = -9223372036854775807L;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long segmentIndexEarliestPresentationTimeUs> = -9223372036854775807L;

        $r18 = <androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.ExtractorOutput PLACEHOLDER>;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput> = $r18;

        $r19 = newarray (androidx.media3.extractor.TrackOutput)[0];

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs> = $r19;

        $r20 = newarray (androidx.media3.extractor.TrackOutput)[0];

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] ceaTrackOutputs> = $r20;

        return;
    }

    public boolean sniff(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $z0 = staticinvoke <androidx.media3.extractor.mp4.Sniffer: boolean sniffFragmented(androidx.media3.extractor.ExtractorInput)>(r1);

        return $z0;
    }

    public void init(androidx.media3.extractor.ExtractorOutput)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.ExtractorOutput r1, $r15;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r2, $r4;
        androidx.media3.extractor.mp4.Track $r3, $r5, $r12;
        int $i0;
        androidx.media3.extractor.TrackOutput $r6;
        androidx.media3.extractor.mp4.TrackSampleTable $r7;
        int[] $r8, $r10;
        long[] $r9, $r11;
        androidx.media3.extractor.mp4.DefaultSampleValues $r13;
        android.util.SparseArray $r14;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput> = r1;

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void enterReadingAtomHeaderState()>();

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void initExtraTracks()>();

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.Track sideloadedTrack>;

        if $r3 == null goto label1;

        $r4 = new androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $r5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.Track sideloadedTrack>;

        $i0 = $r5.<androidx.media3.extractor.mp4.Track: int type>;

        $r6 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(0, $i0);

        $r7 = new androidx.media3.extractor.mp4.TrackSampleTable;

        $r12 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.Track sideloadedTrack>;

        $r11 = newarray (long)[0];

        $r10 = newarray (int)[0];

        $r9 = newarray (long)[0];

        $r8 = newarray (int)[0];

        specialinvoke $r7.<androidx.media3.extractor.mp4.TrackSampleTable: void <init>(androidx.media3.extractor.mp4.Track,long[],int[],int,long[],int[],long)>($r12, $r11, $r10, 0, $r9, $r8, 0L);

        $r13 = new androidx.media3.extractor.mp4.DefaultSampleValues;

        specialinvoke $r13.<androidx.media3.extractor.mp4.DefaultSampleValues: void <init>(int,int,int,int)>(0, 0, 0, 0);

        specialinvoke $r4.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void <init>(androidx.media3.extractor.TrackOutput,androidx.media3.extractor.mp4.TrackSampleTable,androidx.media3.extractor.mp4.DefaultSampleValues)>($r6, $r7, $r13);

        r2 = $r4;

        $r14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(0, r2);

        $r15 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        interfaceinvoke $r15.<androidx.media3.extractor.ExtractorOutput: void endTracks()>();

     label1:
        return;
    }

    public void seek(long, long)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        long l0, l1;
        int i2, i3;
        android.util.SparseArray $r1, $r4;
        java.util.ArrayDeque $r2, $r3;
        java.lang.Object $r5;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle $r6;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        i2 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r4 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r6 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r5;

        virtualinvoke $r6.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void resetFragmentInfo()>();

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque pendingMetadataSampleInfos>;

        virtualinvoke $r2.<java.util.ArrayDeque: void clear()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int pendingMetadataSampleBytes> = 0;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long pendingSeekTimeUs> = l1;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        virtualinvoke $r3.<java.util.ArrayDeque: void clear()>();

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void enterReadingAtomHeaderState()>();

        return;
    }

    public void release()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        return;
    }

    public int read(androidx.media3.extractor.ExtractorInput, androidx.media3.extractor.PositionHolder) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.PositionHolder r2;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.extractor.PositionHolder;

     label1:
        $i0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label2:
        $z0 = specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean readAtomHeader(androidx.media3.extractor.ExtractorInput)>(r1);

        if $z0 != 0 goto label1;

        return -1;

     label3:
        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void readAtomPayload(androidx.media3.extractor.ExtractorInput)>(r1);

        goto label1;

     label4:
        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void readEncryptionData(androidx.media3.extractor.ExtractorInput)>(r1);

        goto label1;

     label5:
        $z1 = specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean readSample(androidx.media3.extractor.ExtractorInput)>(r1);

        if $z1 == 0 goto label1;

        return 0;
    }

    private void enterReadingAtomHeaderState()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState> = 0;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead> = 0;

        return;
    }

    private boolean readAtomHeader(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.mp4.TrackFragment r2;
        int $i0, $i6, $i8, $i9, $i10, $i11, $i14, $i18, $i22, $i23, $i30, $i33, $i37, $i38, $i41, $i46, $i50, i51, i52;
        long $l1, $l3, $l5, $l7, $l12, $l15, $l17, $l19, $l20, $l21, $l24, $l25, $l27, $l28, $l29, $l32, $l34, $l35, $l36, $l39, $l40, l43, $l45, $l47, l49, l53;
        byte $b2, $b4, $b13, $b16, $b26, $b31, b42, $b44, $b48;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.media3.common.ParserException $r3, $r8, $r9, $r18;
        androidx.media3.common.util.ParsableByteArray $r5, $r23, $r25, $r26, $r28, $r29, $r30, r31, r34;
        byte[] $r6, $r7, $r24, $r27;
        java.util.ArrayDeque $r11, $r19, $r20;
        android.util.SparseArray $r12, $r13;
        java.lang.Object $r14, $r21;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle $r15;
        androidx.media3.extractor.ExtractorOutput $r17;
        androidx.media3.extractor.mp4.Atom$ContainerAtom $r22, r33;
        androidx.media3.extractor.SeekMap$Unseekable r32;
        java.lang.Throwable r35, r36, r37, r38;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $i0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead>;

        if $i0 != 0 goto label02;

        $r26 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $r27 = virtualinvoke $r26.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $z4 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: boolean readFully(byte[],int,int,boolean)>($r27, 0, 8, 1);

        if $z4 != 0 goto label01;

        return 0;

     label01:
        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead> = 8;

        $r28 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        virtualinvoke $r28.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r29 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $l40 = virtualinvoke $r29.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize> = $l40;

        $r30 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $i41 = virtualinvoke $r30.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType> = $i41;

     label02:
        $l1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $b2 = $l1 cmp 1L;

        if $b2 != 0 goto label03;

        b42 = 8;

        $r23 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $r24 = virtualinvoke $r23.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r24, 8, b42);

        $i37 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead>;

        $i38 = $i37 + b42;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead> = $i38;

        $r25 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $l39 = virtualinvoke $r25.<androidx.media3.common.util.ParsableByteArray: long readUnsignedLongToLong()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize> = $l39;

        goto label05;

     label03:
        $l3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label05;

        l43 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getLength()>();

        $b31 = l43 cmp -1L;

        if $b31 != 0 goto label04;

        $r19 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        $z3 = virtualinvoke $r19.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z3 != 0 goto label04;

        $r20 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r21 = virtualinvoke $r20.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r22 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r21;

        l43 = $r22.<androidx.media3.extractor.mp4.Atom$ContainerAtom: long endPosition>;

     label04:
        $b44 = l43 cmp -1L;

        if $b44 == 0 goto label05;

        $l32 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $l35 = l43 - $l32;

        $i33 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead>;

        $l34 = (long) $i33;

        $l36 = $l35 + $l34;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize> = $l36;

     label05:
        $l45 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $i46 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead>;

        $l47 = (long) $i46;

        $b48 = $l45 cmp $l47;

        if $b48 >= 0 goto label06;

        $r18 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForUnsupportedContainerFeature(java.lang.String)>("Atom size less than header length (unsupported).");

        r35 = (java.lang.Throwable) $r18;

        throw r35;

     label06:
        $l5 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $i6 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead>;

        $l7 = (long) $i6;

        l49 = $l5 - $l7;

        $i8 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType>;

        if $i8 == 1836019558 goto label07;

        $i30 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType>;

        if $i30 != 1835295092 goto label08;

     label07:
        $z0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean haveOutputSeekMap>;

        if $z0 != 0 goto label08;

        $r17 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        r32 = new androidx.media3.extractor.SeekMap$Unseekable;

        $l29 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long durationUs>;

        specialinvoke r32.<androidx.media3.extractor.SeekMap$Unseekable: void <init>(long,long)>($l29, l49);

        interfaceinvoke $r17.<androidx.media3.extractor.ExtractorOutput: void seekMap(androidx.media3.extractor.SeekMap)>(r32);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean haveOutputSeekMap> = 1;

     label08:
        $i50 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType>;

        if $i50 != 1836019558 goto label10;

        $r12 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        i51 = virtualinvoke $r12.<android.util.SparseArray: int size()>();

        i52 = 0;

     label09:
        if i52 >= i51 goto label10;

        $r13 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object valueAt(int)>(i52);

        $r15 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r14;

        r2 = $r15.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        r2.<androidx.media3.extractor.mp4.TrackFragment: long atomPosition> = l49;

        r2.<androidx.media3.extractor.mp4.TrackFragment: long auxiliaryDataPosition> = l49;

        r2.<androidx.media3.extractor.mp4.TrackFragment: long dataPosition> = l49;

        i52 = i52 + 1;

        goto label09;

     label10:
        $i9 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType>;

        if $i9 != 1835295092 goto label11;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle currentTrackBundle> = null;

        $l27 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $l28 = l49 + $l27;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long endOfMdatPosition> = $l28;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState> = 2;

        return 1;

     label11:
        $i10 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType>;

        $z1 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean shouldParseContainerAtom(int)>($i10);

        if $z1 == 0 goto label14;

        $l19 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $l20 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $l21 = $l19 + $l20;

        l53 = $l21 - 8L;

        $r11 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        r33 = new androidx.media3.extractor.mp4.Atom$ContainerAtom;

        $i22 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType>;

        specialinvoke r33.<androidx.media3.extractor.mp4.Atom$ContainerAtom: void <init>(int,long)>($i22, l53);

        virtualinvoke $r11.<java.util.ArrayDeque: void push(java.lang.Object)>(r33);

        $l25 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $i23 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead>;

        $l24 = (long) $i23;

        $b26 = $l25 cmp $l24;

        if $b26 != 0 goto label12;

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void processAtomEnded(long)>(l53);

        goto label13;

     label12:
        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void enterReadingAtomHeaderState()>();

     label13:
        goto label19;

     label14:
        $i11 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType>;

        $z2 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean shouldParseLeafAtom(int)>($i11);

        if $z2 == 0 goto label17;

        $i14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead>;

        if $i14 == 8 goto label15;

        $r9 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForUnsupportedContainerFeature(java.lang.String)>("Leaf atom defines extended atom size (unsupported).");

        r36 = (java.lang.Throwable) $r9;

        throw r36;

     label15:
        $l15 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $b16 = $l15 cmp 2147483647L;

        if $b16 <= 0 goto label16;

        $r8 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForUnsupportedContainerFeature(java.lang.String)>("Leaf atom with length > 2147483647 (unsupported).");

        r37 = (java.lang.Throwable) $r8;

        throw r37;

     label16:
        r34 = new androidx.media3.common.util.ParsableByteArray;

        $l17 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $i18 = (int) $l17;

        specialinvoke r34.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>($i18);

        r31 = r34;

        $r5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomHeader>;

        $r6 = virtualinvoke $r5.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $r7 = virtualinvoke r31.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r7, 0, 8);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomData> = r31;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState> = 1;

        goto label19;

     label17:
        $l12 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $b13 = $l12 cmp 2147483647L;

        if $b13 <= 0 goto label18;

        $r3 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForUnsupportedContainerFeature(java.lang.String)>("Skipping atom with length > 2147483647 (unsupported).");

        r38 = (java.lang.Throwable) $r3;

        throw r38;

     label18:
        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomData> = null;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState> = 1;

     label19:
        return 1;
    }

    private void readAtomPayload(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        int i0, $i2, $i3, $i5;
        androidx.media3.common.util.ParsableByteArray r2;
        long $l1, $l4, $l6;
        byte[] $r3;
        androidx.media3.extractor.mp4.Atom$LeafAtom $r4;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $l1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long atomSize>;

        $i3 = (int) $l1;

        $i2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomHeaderBytesRead>;

        i0 = $i3 - $i2;

        r2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray atomData>;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r3, 8, i0);

        $r4 = new androidx.media3.extractor.mp4.Atom$LeafAtom;

        $i5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int atomType>;

        specialinvoke $r4.<androidx.media3.extractor.mp4.Atom$LeafAtom: void <init>(int,androidx.media3.common.util.ParsableByteArray)>($i5, r2);

        $l6 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void onLeafAtomRead(androidx.media3.extractor.mp4.Atom$LeafAtom,long)>($r4, $l6);

        goto label2;

     label1:
        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>(i0);

     label2:
        $l4 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void processAtomEnded(long)>($l4);

        return;
    }

    private void processAtomEnded(long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        long l0, $l1;
        java.util.ArrayDeque $r1, $r2, $r5;
        boolean $z0;
        java.lang.Object $r3, $r6;
        androidx.media3.extractor.mp4.Atom$ContainerAtom $r4, $r7;
        byte $b2;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        l0 := @parameter0: long;

     label1:
        $r1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        $z0 = virtualinvoke $r1.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r3 = virtualinvoke $r2.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r4 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r3;

        $l1 = $r4.<androidx.media3.extractor.mp4.Atom$ContainerAtom: long endPosition>;

        $b2 = $l1 cmp l0;

        if $b2 != 0 goto label2;

        $r5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r6 = virtualinvoke $r5.<java.util.ArrayDeque: java.lang.Object pop()>();

        $r7 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r6;

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void onContainerAtomRead(androidx.media3.extractor.mp4.Atom$ContainerAtom)>($r7);

        goto label1;

     label2:
        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void enterReadingAtomHeaderState()>();

        return;
    }

    private void onLeafAtomRead(androidx.media3.extractor.mp4.Atom$LeafAtom, long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.mp4.Atom$LeafAtom r1;
        long l0, $l3;
        android.util.Pair r2;
        java.util.ArrayDeque $r3, $r11;
        boolean $z0;
        int $i1, $i2;
        androidx.media3.common.util.ParsableByteArray $r4, $r5;
        java.lang.Object $r6, $r8, $r12;
        java.lang.Long $r7;
        androidx.media3.extractor.SeekMap $r9;
        androidx.media3.extractor.ExtractorOutput $r10;
        androidx.media3.extractor.mp4.Atom$ContainerAtom $r13;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.mp4.Atom$LeafAtom;

        l0 := @parameter1: long;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        $z0 = virtualinvoke $r3.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r11 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r12 = virtualinvoke $r11.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r13 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r12;

        virtualinvoke $r13.<androidx.media3.extractor.mp4.Atom$ContainerAtom: void add(androidx.media3.extractor.mp4.Atom$LeafAtom)>(r1);

        goto label3;

     label1:
        $i1 = r1.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i1 != 1936286840 goto label2;

        $r5 = r1.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        r2 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.Pair parseSidx(androidx.media3.common.util.ParsableByteArray,long)>($r5, l0);

        $r6 = r2.<android.util.Pair: java.lang.Object first>;

        $r7 = (java.lang.Long) $r6;

        $l3 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long segmentIndexEarliestPresentationTimeUs> = $l3;

        $r10 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        $r8 = r2.<android.util.Pair: java.lang.Object second>;

        $r9 = (androidx.media3.extractor.SeekMap) $r8;

        interfaceinvoke $r10.<androidx.media3.extractor.ExtractorOutput: void seekMap(androidx.media3.extractor.SeekMap)>($r9);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean haveOutputSeekMap> = 1;

        goto label3;

     label2:
        $i2 = r1.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i2 != 1701671783 goto label3;

        $r4 = r1.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void onEmsgLeafAtomRead(androidx.media3.common.util.ParsableByteArray)>($r4);

     label3:
        return;
    }

    private void onContainerAtomRead(androidx.media3.extractor.mp4.Atom$ContainerAtom) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.mp4.Atom$ContainerAtom r1, $r5;
        int $i0, $i1;
        java.util.ArrayDeque $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.mp4.Atom$ContainerAtom;

        $i0 = r1.<androidx.media3.extractor.mp4.Atom$ContainerAtom: int type>;

        if $i0 != 1836019574 goto label1;

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void onMoovContainerAtomRead(androidx.media3.extractor.mp4.Atom$ContainerAtom)>(r1);

        goto label3;

     label1:
        $i1 = r1.<androidx.media3.extractor.mp4.Atom$ContainerAtom: int type>;

        if $i1 != 1836019558 goto label2;

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void onMoofContainerAtomRead(androidx.media3.extractor.mp4.Atom$ContainerAtom)>(r1);

        goto label3;

     label2:
        $r2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        $z0 = virtualinvoke $r2.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque containerAtoms>;

        $r4 = virtualinvoke $r3.<java.util.ArrayDeque: java.lang.Object peek()>();

        $r5 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r4;

        virtualinvoke $r5.<androidx.media3.extractor.mp4.Atom$ContainerAtom: void add(androidx.media3.extractor.mp4.Atom$ContainerAtom)>(r1);

     label3:
        return;
    }

    private void onMoovContainerAtomRead(androidx.media3.extractor.mp4.Atom$ContainerAtom) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.mp4.Atom$ContainerAtom r1, r3, $r8;
        androidx.media3.common.DrmInitData r2;
        android.util.SparseArray r4, $r10, $r14, $r15, $r17, $r27;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i14, $i15, $i16, i18, i19, i20, i21;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r5, $r19, $r23;
        androidx.media3.extractor.mp4.Track $r6, r42, r44;
        java.util.List $r7, $r11, $r30, r40;
        java.lang.Object $r9, $r16, $r18, $r22, $r31, $r34, $r36;
        androidx.media3.extractor.GaplessInfoHolder $r12;
        com.google.common.base.Function $r13;
        androidx.media3.extractor.mp4.DefaultSampleValues $r20, $r26, $r37;
        androidx.media3.extractor.ExtractorOutput $r21, $r24;
        androidx.media3.extractor.TrackOutput $r25;
        long $l10, $l11, $l12, $l13, l17;
        androidx.media3.common.util.ParsableByteArray $r32, $r33;
        java.lang.Integer $r35;
        boolean $z0, $z1, $z2;
        androidx.media3.extractor.mp4.Atom$LeafAtom r38;
        android.util.Pair r39;
        androidx.media3.extractor.mp4.TrackSampleTable r41, r43;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.mp4.Atom$ContainerAtom;

        $r6 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.Track sideloadedTrack>;

        if $r6 != null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z0, "Unexpected moov box.");

        $r7 = r1.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List leafChildren>;

        r2 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.DrmInitData getDrmInitDataFromAtoms(java.util.List)>($r7);

        $r8 = virtualinvoke r1.<androidx.media3.extractor.mp4.Atom$ContainerAtom: androidx.media3.extractor.mp4.Atom$ContainerAtom getContainerAtomOfType(int)>(1836475768);

        $r9 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r8);

        r3 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r9;

        $r10 = new android.util.SparseArray;

        specialinvoke $r10.<android.util.SparseArray: void <init>()>();

        r4 = $r10;

        l17 = -9223372036854775807L;

        $r11 = r3.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List leafChildren>;

        i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        i18 = 0;

     label03:
        if i18 >= i0 goto label06;

        $r30 = r3.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List leafChildren>;

        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(i18);

        r38 = (androidx.media3.extractor.mp4.Atom$LeafAtom) $r31;

        $i14 = r38.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i14 != 1953654136 goto label04;

        $r33 = r38.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        r39 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.Pair parseTrex(androidx.media3.common.util.ParsableByteArray)>($r33);

        $r34 = r39.<android.util.Pair: java.lang.Object first>;

        $r35 = (java.lang.Integer) $r34;

        $i16 = virtualinvoke $r35.<java.lang.Integer: int intValue()>();

        $r36 = r39.<android.util.Pair: java.lang.Object second>;

        $r37 = (androidx.media3.extractor.mp4.DefaultSampleValues) $r36;

        virtualinvoke r4.<android.util.SparseArray: void put(int,java.lang.Object)>($i16, $r37);

        goto label05;

     label04:
        $i15 = r38.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i15 != 1835362404 goto label05;

        $r32 = r38.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        l17 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: long parseMehd(androidx.media3.common.util.ParsableByteArray)>($r32);

     label05:
        i18 = i18 + 1;

        goto label03;

     label06:
        $r12 = new androidx.media3.extractor.GaplessInfoHolder;

        specialinvoke $r12.<androidx.media3.extractor.GaplessInfoHolder: void <init>()>();

        $l13 = l17;

        $i1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int flags>;

        $i2 = $i1 & 16;

        if $i2 == 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        $r13 = dynamicinvoke "apply" <com.google.common.base.Function (androidx.media3.extractor.mp4.FragmentedMp4Extractor)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.Track modifyTrack(androidx.media3.extractor.mp4.Track)>, methodtype: androidx.media3.extractor.mp4.Track __METHODTYPE__(androidx.media3.extractor.mp4.Track));

        r40 = staticinvoke <androidx.media3.extractor.mp4.AtomParsers: java.util.List parseTraks(androidx.media3.extractor.mp4.Atom$ContainerAtom,androidx.media3.extractor.GaplessInfoHolder,long,androidx.media3.common.DrmInitData,boolean,boolean,com.google.common.base.Function)>(r1, $r12, $l13, r2, $z1, 0, $r13);

        i19 = interfaceinvoke r40.<java.util.List: int size()>();

        $r14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $i3 = virtualinvoke $r14.<android.util.SparseArray: int size()>();

        if $i3 != 0 goto label11;

        i20 = 0;

     label09:
        if i20 >= i19 goto label10;

        $r22 = interfaceinvoke r40.<java.util.List: java.lang.Object get(int)>(i20);

        r41 = (androidx.media3.extractor.mp4.TrackSampleTable) $r22;

        r42 = r41.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $r23 = new androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $r24 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        $i7 = r42.<androidx.media3.extractor.mp4.Track: int type>;

        $r25 = interfaceinvoke $r24.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(i20, $i7);

        $i8 = r42.<androidx.media3.extractor.mp4.Track: int id>;

        $r26 = specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.DefaultSampleValues getDefaultSampleValues(android.util.SparseArray,int)>(r4, $i8);

        specialinvoke $r23.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void <init>(androidx.media3.extractor.TrackOutput,androidx.media3.extractor.mp4.TrackSampleTable,androidx.media3.extractor.mp4.DefaultSampleValues)>($r25, r41, $r26);

        r5 = $r23;

        $r27 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $i9 = r42.<androidx.media3.extractor.mp4.Track: int id>;

        virtualinvoke $r27.<android.util.SparseArray: void put(int,java.lang.Object)>($i9, r5);

        $l11 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long durationUs>;

        $l10 = r42.<androidx.media3.extractor.mp4.Track: long durationUs>;

        $l12 = staticinvoke <java.lang.Math: long max(long,long)>($l11, $l10);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long durationUs> = $l12;

        i20 = i20 + 1;

        goto label09;

     label10:
        $r21 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        interfaceinvoke $r21.<androidx.media3.extractor.ExtractorOutput: void endTracks()>();

        goto label15;

     label11:
        $r15 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $i4 = virtualinvoke $r15.<android.util.SparseArray: int size()>();

        if $i4 != i19 goto label12;

        $z2 = 1;

        goto label13;

     label12:
        $z2 = 0;

     label13:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z2);

        i21 = 0;

     label14:
        if i21 >= i19 goto label15;

        $r16 = interfaceinvoke r40.<java.util.List: java.lang.Object get(int)>(i21);

        r43 = (androidx.media3.extractor.mp4.TrackSampleTable) $r16;

        r44 = r43.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $r17 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $i5 = r44.<androidx.media3.extractor.mp4.Track: int id>;

        $r18 = virtualinvoke $r17.<android.util.SparseArray: java.lang.Object get(int)>($i5);

        $r19 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r18;

        $i6 = r44.<androidx.media3.extractor.mp4.Track: int id>;

        $r20 = specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.DefaultSampleValues getDefaultSampleValues(android.util.SparseArray,int)>(r4, $i6);

        virtualinvoke $r19.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void reset(androidx.media3.extractor.mp4.TrackSampleTable,androidx.media3.extractor.mp4.DefaultSampleValues)>(r43, $r20);

        i21 = i21 + 1;

        goto label14;

     label15:
        return;
    }

    protected androidx.media3.extractor.mp4.Track modifyTrack(androidx.media3.extractor.mp4.Track)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.mp4.Track r1;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.mp4.Track;

        return r1;
    }

    private androidx.media3.extractor.mp4.DefaultSampleValues getDefaultSampleValues(android.util.SparseArray, int)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        android.util.SparseArray r1;
        int i0, $i1;
        java.lang.Object $r2, $r4, $r6;
        androidx.media3.extractor.mp4.DefaultSampleValues $r3, $r5, $r7;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: android.util.SparseArray;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<android.util.SparseArray: int size()>();

        if $i1 != 1 goto label1;

        $r6 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object valueAt(int)>(0);

        $r7 = (androidx.media3.extractor.mp4.DefaultSampleValues) $r6;

        return $r7;

     label1:
        $r2 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r3 = (androidx.media3.extractor.mp4.DefaultSampleValues) $r2;

        $r4 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = (androidx.media3.extractor.mp4.DefaultSampleValues) $r4;

        return $r5;
    }

    private void onMoofContainerAtomRead(androidx.media3.extractor.mp4.Atom$ContainerAtom) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.mp4.Atom$ContainerAtom r1;
        androidx.media3.common.DrmInitData r2;
        androidx.media3.extractor.mp4.Track $r3;
        byte[] $r4;
        int $i0, i4, i5, i6, i7;
        android.util.SparseArray $r5, $r7, $r8, $r11, $r12;
        java.util.List $r6;
        long $l1, $l3;
        byte $b2;
        java.lang.Object $r9, $r13;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle $r10, $r14;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.mp4.Atom$ContainerAtom;

        $r5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.Track sideloadedTrack>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int flags>;

        $r4 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: byte[] scratchBytes>;

        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseMoof(androidx.media3.extractor.mp4.Atom$ContainerAtom,android.util.SparseArray,boolean,int,byte[])>(r1, $r5, $z0, $i0, $r4);

        $r6 = r1.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List leafChildren>;

        r2 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.DrmInitData getDrmInitDataFromAtoms(java.util.List)>($r6);

        if r2 == null goto label4;

        $r11 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        i4 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        i5 = 0;

     label3:
        if i5 >= i4 goto label4;

        $r12 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        $r14 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r13;

        virtualinvoke $r14.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void updateDrmInitData(androidx.media3.common.DrmInitData)>(r2);

        i5 = i5 + 1;

        goto label3;

     label4:
        $l1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long pendingSeekTimeUs>;

        $b2 = $l1 cmp -9223372036854775807L;

        if $b2 == 0 goto label7;

        $r7 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        i6 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

        i7 = 0;

     label5:
        if i7 >= i6 goto label6;

        $r8 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object valueAt(int)>(i7);

        $r10 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r9;

        $l3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long pendingSeekTimeUs>;

        virtualinvoke $r10.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void seek(long)>($l3);

        i7 = i7 + 1;

        goto label5;

     label6:
        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long pendingSeekTimeUs> = -9223372036854775807L;

     label7:
        return;
    }

    private void initExtraTracks()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.TrackOutput r1, $r3, $r18, $r19, r22;
        androidx.media3.extractor.TrackOutput[] $r2, $r4, $r6, $r8, $r9, $r14, $r17, $r20, r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12;
        java.lang.Object[] $r5;
        java.util.List $r7, $r11;
        androidx.media3.extractor.ExtractorOutput $r10, $r16;
        java.lang.Object $r12;
        androidx.media3.common.Format $r13, $r15;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        i8 = 100;

        $r2 = newarray (androidx.media3.extractor.TrackOutput)[2];

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs> = $r2;

        i9 = 0;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput additionalEmsgTrackOutput>;

        if $r3 == null goto label1;

        $r20 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs>;

        $i7 = i9;

        i9 = i9 + 1;

        $r19 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput additionalEmsgTrackOutput>;

        $r20[$i7] = $r19;

     label1:
        $i0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int flags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label2;

        $r17 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs>;

        $i5 = i9;

        i9 = i9 + 1;

        $r16 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        $i6 = i8;

        i8 = i8 + 1;

        $r18 = interfaceinvoke $r16.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>($i6, 5);

        $r17[$i5] = $r18;

     label2:
        $r4 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs>;

        $r5 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object[] nullSafeArrayCopy(java.lang.Object[],int)>($r4, i9);

        $r6 = (androidx.media3.extractor.TrackOutput[]) $r5;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs> = $r6;

        r21 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs>;

        i10 = lengthof r21;

        i11 = 0;

     label3:
        if i11 >= i10 goto label4;

        r1 = r21[i11];

        $r15 = <androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.Format EMSG_FORMAT>;

        interfaceinvoke r1.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r15);

        i11 = i11 + 1;

        goto label3;

     label4:
        $r7 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.List closedCaptionFormats>;

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r8 = newarray (androidx.media3.extractor.TrackOutput)[$i2];

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] ceaTrackOutputs> = $r8;

        i12 = 0;

     label5:
        $r9 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] ceaTrackOutputs>;

        $i3 = lengthof $r9;

        if i12 >= $i3 goto label6;

        $r10 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        $i4 = i8;

        i8 = i8 + 1;

        r22 = interfaceinvoke $r10.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>($i4, 3);

        $r11 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.List closedCaptionFormats>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i12);

        $r13 = (androidx.media3.common.Format) $r12;

        interfaceinvoke r22.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r13);

        $r14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] ceaTrackOutputs>;

        $r14[i12] = r22;

        i12 = i12 + 1;

        goto label5;

     label6:
        return;
    }

    private void onEmsgLeafAtomRead(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.common.util.ParsableByteArray r1, r4, $r11;
        int i0, i1, i2, $i3, $i6, $i7, $i9, $i10, $i11, $i12, i24, i25, i26, i27;
        byte[] r2, $r13;
        androidx.media3.extractor.metadata.emsg.EventMessage r3, $r10;
        androidx.media3.extractor.TrackOutput[] $r5, r31, r33;
        long $l4, $l5, $l13, $l14, $l16, $l17, l18, l19, l20, l21, l22, l23;
        java.lang.String $r6, $r8, $r21, $r23, $r28, r29, r30;
        java.lang.Object $r7, $r9, $r22, $r24;
        androidx.media3.extractor.metadata.emsg.EventMessageEncoder $r12;
        byte $b8, $b15;
        java.util.ArrayDeque $r14, $r18, $r20;
        boolean $z0;
        androidx.media3.common.util.TimestampAdjuster $r15, $r16;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo $r17, $r19;
        java.lang.StringBuilder $r25, $r26, $r27;
        androidx.media3.extractor.TrackOutput r32, r34;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        $r5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs>;

        $i3 = lengthof $r5;

        if $i3 != 0 goto label01;

        return;

     label01:
        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        i0 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i1 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomVersion(int)>(i0);

        l18 = -9223372036854775807L;

        l19 = -9223372036854775807L;

        lookupswitch(i1)
        {
            case 0: goto label02;
            case 1: goto label04;
            default: goto label05;
        };

     label02:
        $r21 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: java.lang.String readNullTerminatedString()>();

        $r22 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r21);

        r29 = (java.lang.String) $r22;

        $r23 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: java.lang.String readNullTerminatedString()>();

        $r24 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r23);

        r30 = (java.lang.String) $r24;

        l20 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        $l13 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        l18 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>($l13, 1000000L, l20);

        $l14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long segmentIndexEarliestPresentationTimeUs>;

        $b15 = $l14 cmp -9223372036854775807L;

        if $b15 == 0 goto label03;

        $l17 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long segmentIndexEarliestPresentationTimeUs>;

        l19 = $l17 + l18;

     label03:
        $l16 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        l21 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>($l16, 1000L, l20);

        l22 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        goto label06;

     label04:
        l23 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        $l4 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: long readUnsignedLongToLong()>();

        l19 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>($l4, 1000000L, l23);

        $l5 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        l21 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>($l5, 1000L, l23);

        l22 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        $r6 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: java.lang.String readNullTerminatedString()>();

        $r7 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        r29 = (java.lang.String) $r7;

        $r8 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: java.lang.String readNullTerminatedString()>();

        $r9 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r8);

        r30 = (java.lang.String) $r9;

        goto label06;

     label05:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping unsupported emsg version: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("FragmentedMp4Extractor", $r28);

        return;

     label06:
        $i6 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        r2 = newarray (byte)[$i6];

        $i7 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>(r2, 0, $i7);

        $r10 = new androidx.media3.extractor.metadata.emsg.EventMessage;

        specialinvoke $r10.<androidx.media3.extractor.metadata.emsg.EventMessage: void <init>(java.lang.String,java.lang.String,long,long,byte[])>(r29, r30, l21, l22, r2);

        r3 = $r10;

        $r11 = new androidx.media3.common.util.ParsableByteArray;

        $r12 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.metadata.emsg.EventMessageEncoder eventMessageEncoder>;

        $r13 = virtualinvoke $r12.<androidx.media3.extractor.metadata.emsg.EventMessageEncoder: byte[] encode(androidx.media3.extractor.metadata.emsg.EventMessage)>(r3);

        specialinvoke $r11.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r13);

        r4 = $r11;

        i2 = virtualinvoke r4.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        r31 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs>;

        i24 = lengthof r31;

        i25 = 0;

     label07:
        if i25 >= i24 goto label08;

        r32 = r31[i25];

        virtualinvoke r4.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        interfaceinvoke r32.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r4, i2);

        i25 = i25 + 1;

        goto label07;

     label08:
        $b8 = l19 cmp -9223372036854775807L;

        if $b8 != 0 goto label09;

        $r20 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque pendingMetadataSampleInfos>;

        $r19 = new androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo;

        specialinvoke $r19.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: void <init>(long,boolean,int)>(l18, 1, i2);

        virtualinvoke $r20.<java.util.ArrayDeque: void addLast(java.lang.Object)>($r19);

        $i11 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int pendingMetadataSampleBytes>;

        $i12 = $i11 + i2;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int pendingMetadataSampleBytes> = $i12;

        goto label13;

     label09:
        $r14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque pendingMetadataSampleInfos>;

        $z0 = virtualinvoke $r14.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $r18 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque pendingMetadataSampleInfos>;

        $r17 = new androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo;

        specialinvoke $r17.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: void <init>(long,boolean,int)>(l19, 0, i2);

        virtualinvoke $r18.<java.util.ArrayDeque: void addLast(java.lang.Object)>($r17);

        $i9 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int pendingMetadataSampleBytes>;

        $i10 = $i9 + i2;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int pendingMetadataSampleBytes> = $i10;

        goto label13;

     label10:
        $r15 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster>;

        if $r15 == null goto label11;

        $r16 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster>;

        l19 = virtualinvoke $r16.<androidx.media3.common.util.TimestampAdjuster: long adjustSampleTimestamp(long)>(l19);

     label11:
        r33 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs>;

        i26 = lengthof r33;

        i27 = 0;

     label12:
        if i27 >= i26 goto label13;

        r34 = r33[i27];

        interfaceinvoke r34.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l19, 1, i2, 0, null);

        i27 = i27 + 1;

        goto label12;

     label13:
        return;
    }

    private static android.util.Pair parseTrex(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.common.util.ParsableByteArray r0;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Integer $r1;
        androidx.media3.extractor.mp4.DefaultSampleValues $r2;
        android.util.Pair $r3;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(12);

        i0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        $i5 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i1 = $i5 - 1;

        i2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i3 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i4 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = new androidx.media3.extractor.mp4.DefaultSampleValues;

        specialinvoke $r2.<androidx.media3.extractor.mp4.DefaultSampleValues: void <init>(int,int,int,int)>(i1, i2, i3, i4);

        $r3 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    private static long parseMehd(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.common.util.ParsableByteArray r0;
        int i0, i1;
        long $l2;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        i0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i1 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomVersion(int)>(i0);

        if i1 != 0 goto label1;

        $l2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        goto label2;

     label1:
        $l2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedLongToLong()>();

     label2:
        return $l2;
    }

    private static void parseMoof(androidx.media3.extractor.mp4.Atom$ContainerAtom, android.util.SparseArray, boolean, int, byte[]) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.Atom$ContainerAtom r0, r3;
        android.util.SparseArray r1;
        boolean z0;
        int i0, i1, $i2, i3;
        byte[] r2;
        java.util.List $r4, $r5;
        java.lang.Object $r6;

        r0 := @parameter0: androidx.media3.extractor.mp4.Atom$ContainerAtom;

        r1 := @parameter1: android.util.SparseArray;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        r2 := @parameter4: byte[];

        $r4 = r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List containerChildren>;

        i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        $r5 = r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List containerChildren>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i3);

        r3 = (androidx.media3.extractor.mp4.Atom$ContainerAtom) $r6;

        $i2 = r3.<androidx.media3.extractor.mp4.Atom$ContainerAtom: int type>;

        if $i2 != 1953653094 goto label2;

        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseTraf(androidx.media3.extractor.mp4.Atom$ContainerAtom,android.util.SparseArray,boolean,int,byte[])>(r3, r1, z0, i0, r2);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    private static void parseTraf(androidx.media3.extractor.mp4.Atom$ContainerAtom, android.util.SparseArray, boolean, int, byte[]) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.Atom$ContainerAtom r0;
        android.util.SparseArray r1;
        boolean z0, z1;
        int i0, i2, $i3, $i4, $i6, i7;
        byte[] r2;
        androidx.media3.extractor.mp4.Atom$LeafAtom r3, r6, r8, r9, r10, r11, $r12;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r4;
        androidx.media3.extractor.mp4.TrackFragment r5;
        long l1, $l5;
        androidx.media3.extractor.mp4.TrackEncryptionBox r7, $r24;
        java.lang.Object $r13, $r17, $r22, $r29;
        androidx.media3.common.util.ParsableByteArray $r14, $r18, $r20, $r21, $r23, $r25;
        java.util.List $r15, $r16;
        androidx.media3.extractor.mp4.TrackSampleTable $r26;
        androidx.media3.extractor.mp4.Track $r27;
        androidx.media3.extractor.mp4.DefaultSampleValues $r28, $r30;
        java.lang.String $r31;

        r0 := @parameter0: androidx.media3.extractor.mp4.Atom$ContainerAtom;

        r1 := @parameter1: android.util.SparseArray;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        r2 := @parameter4: byte[];

        $r12 = virtualinvoke r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: androidx.media3.extractor.mp4.Atom$LeafAtom getLeafAtomOfType(int)>(1952868452);

        $r13 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r12);

        r3 = (androidx.media3.extractor.mp4.Atom$LeafAtom) $r13;

        $r14 = r3.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        r4 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle parseTfhd(androidx.media3.common.util.ParsableByteArray,android.util.SparseArray,boolean)>($r14, r1, z0);

        if r4 != null goto label01;

        return;

     label01:
        r5 = r4.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        l1 = r5.<androidx.media3.extractor.mp4.TrackFragment: long nextFragmentDecodeTime>;

        z1 = r5.<androidx.media3.extractor.mp4.TrackFragment: boolean nextFragmentDecodeTimeIncludesMoov>;

        virtualinvoke r4.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void resetFragmentInfo()>();

        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean access$002(androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle,boolean)>(r4, 1);

        r6 = virtualinvoke r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: androidx.media3.extractor.mp4.Atom$LeafAtom getLeafAtomOfType(int)>(1952867444);

        if r6 == null goto label02;

        $i4 = i0 & 2;

        if $i4 != 0 goto label02;

        $r25 = r6.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        $l5 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: long parseTfdt(androidx.media3.common.util.ParsableByteArray)>($r25);

        r5.<androidx.media3.extractor.mp4.TrackFragment: long nextFragmentDecodeTime> = $l5;

        r5.<androidx.media3.extractor.mp4.TrackFragment: boolean nextFragmentDecodeTimeIncludesMoov> = 1;

        goto label03;

     label02:
        r5.<androidx.media3.extractor.mp4.TrackFragment: long nextFragmentDecodeTime> = l1;

        r5.<androidx.media3.extractor.mp4.TrackFragment: boolean nextFragmentDecodeTimeIncludesMoov> = z1;

     label03:
        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseTruns(androidx.media3.extractor.mp4.Atom$ContainerAtom,androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle,int)>(r0, r4, i0);

        $r26 = r4.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r27 = $r26.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $r28 = r5.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.DefaultSampleValues header>;

        $r29 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r28);

        $r30 = (androidx.media3.extractor.mp4.DefaultSampleValues) $r29;

        $i6 = $r30.<androidx.media3.extractor.mp4.DefaultSampleValues: int sampleDescriptionIndex>;

        r7 = virtualinvoke $r27.<androidx.media3.extractor.mp4.Track: androidx.media3.extractor.mp4.TrackEncryptionBox getSampleDescriptionEncryptionBox(int)>($i6);

        r8 = virtualinvoke r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: androidx.media3.extractor.mp4.Atom$LeafAtom getLeafAtomOfType(int)>(1935763834);

        if r8 == null goto label04;

        $r22 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r7);

        $r24 = (androidx.media3.extractor.mp4.TrackEncryptionBox) $r22;

        $r23 = r8.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseSaiz(androidx.media3.extractor.mp4.TrackEncryptionBox,androidx.media3.common.util.ParsableByteArray,androidx.media3.extractor.mp4.TrackFragment)>($r24, $r23, r5);

     label04:
        r9 = virtualinvoke r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: androidx.media3.extractor.mp4.Atom$LeafAtom getLeafAtomOfType(int)>(1935763823);

        if r9 == null goto label05;

        $r21 = r9.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseSaio(androidx.media3.common.util.ParsableByteArray,androidx.media3.extractor.mp4.TrackFragment)>($r21, r5);

     label05:
        r10 = virtualinvoke r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: androidx.media3.extractor.mp4.Atom$LeafAtom getLeafAtomOfType(int)>(1936027235);

        if r10 == null goto label06;

        $r20 = r10.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseSenc(androidx.media3.common.util.ParsableByteArray,androidx.media3.extractor.mp4.TrackFragment)>($r20, r5);

     label06:
        if r7 == null goto label07;

        $r31 = r7.<androidx.media3.extractor.mp4.TrackEncryptionBox: java.lang.String schemeType>;

        goto label08;

     label07:
        $r31 = null;

     label08:
        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseSampleGroups(androidx.media3.extractor.mp4.Atom$ContainerAtom,java.lang.String,androidx.media3.extractor.mp4.TrackFragment)>(r0, $r31, r5);

        $r15 = r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List leafChildren>;

        i2 = interfaceinvoke $r15.<java.util.List: int size()>();

        i7 = 0;

     label09:
        if i7 >= i2 goto label11;

        $r16 = r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List leafChildren>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i7);

        r11 = (androidx.media3.extractor.mp4.Atom$LeafAtom) $r17;

        $i3 = r11.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i3 != 1970628964 goto label10;

        $r18 = r11.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseUuid(androidx.media3.common.util.ParsableByteArray,androidx.media3.extractor.mp4.TrackFragment,byte[])>($r18, r5, r2);

     label10:
        i7 = i7 + 1;

        goto label09;

     label11:
        return;
    }

    private static void parseTruns(androidx.media3.extractor.mp4.Atom$ContainerAtom, androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle, int) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.Atom$ContainerAtom r0;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r1;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11;
        java.util.List r2;
        androidx.media3.extractor.mp4.TrackFragment $r3;
        java.lang.Object $r4, $r6;
        androidx.media3.common.util.ParsableByteArray $r5, r8;
        androidx.media3.extractor.mp4.Atom$LeafAtom r7, r9;

        r0 := @parameter0: androidx.media3.extractor.mp4.Atom$ContainerAtom;

        r1 := @parameter1: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        i0 := @parameter2: int;

        i5 = 0;

        i6 = 0;

        r2 = r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List leafChildren>;

        i1 = interfaceinvoke r2.<java.util.List: int size()>();

        i7 = 0;

     label1:
        if i7 >= i1 goto label3;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i7);

        r7 = (androidx.media3.extractor.mp4.Atom$LeafAtom) $r6;

        $i4 = r7.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i4 != 1953658222 goto label2;

        r8 = r7.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        virtualinvoke r8.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(12);

        i8 = virtualinvoke r8.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        if i8 <= 0 goto label2;

        i6 = i6 + i8;

        i5 = i5 + 1;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentTrackRunIndex> = 0;

        r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleInTrackRun> = 0;

        r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex> = 0;

        $r3 = r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        virtualinvoke $r3.<androidx.media3.extractor.mp4.TrackFragment: void initTables(int,int)>(i5, i6);

        i9 = 0;

        i10 = 0;

        i11 = 0;

     label4:
        if i11 >= i1 goto label6;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i11);

        r9 = (androidx.media3.extractor.mp4.Atom$LeafAtom) $r4;

        $i2 = r9.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i2 != 1953658222 goto label5;

        $i3 = i9;

        i9 = i9 + 1;

        $r5 = r9.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        i10 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parseTrun(androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle,int,int,androidx.media3.common.util.ParsableByteArray,int)>(r1, $i3, i0, $r5, i10);

     label5:
        i11 = i11 + 1;

        goto label4;

     label6:
        return;
    }

    private static void parseSaiz(androidx.media3.extractor.mp4.TrackEncryptionBox, androidx.media3.common.util.ParsableByteArray, androidx.media3.extractor.mp4.TrackFragment) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.TrackEncryptionBox r0;
        androidx.media3.common.util.ParsableByteArray r1;
        androidx.media3.extractor.mp4.TrackFragment r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13;
        boolean[] $r3, r12, $r13;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, r14;
        java.lang.String $r10;
        androidx.media3.common.ParserException $r11;
        boolean $z0, $z1, z2;
        java.lang.Throwable r15;

        r0 := @parameter0: androidx.media3.extractor.mp4.TrackEncryptionBox;

        r1 := @parameter1: androidx.media3.common.util.ParsableByteArray;

        r2 := @parameter2: androidx.media3.extractor.mp4.TrackFragment;

        i0 = r0.<androidx.media3.extractor.mp4.TrackEncryptionBox: int perSampleIvSize>;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        i1 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i2 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomFlags(int)>(i1);

        $i6 = i2 & 1;

        if $i6 != 1 goto label01;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(8);

     label01:
        i3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        i4 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        $i7 = r2.<androidx.media3.extractor.mp4.TrackFragment: int sampleCount>;

        if i4 <= $i7 goto label02;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Saiz sample count ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is greater than fragment sample count");

        $i10 = r2.<androidx.media3.extractor.mp4.TrackFragment: int sampleCount>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r10, null);

        r15 = (java.lang.Throwable) $r11;

        throw r15;

     label02:
        i11 = 0;

        if i3 != 0 goto label07;

        r12 = r2.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleHasSubsampleEncryptionTable>;

        i12 = 0;

     label03:
        if i12 >= i4 goto label06;

        i5 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        i11 = i11 + i5;

        $i9 = i12;

        if i5 <= i0 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        r12[$i9] = $z0;

        i12 = i12 + 1;

        goto label03;

     label06:
        goto label10;

     label07:
        if i3 <= i0 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        z2 = $z1;

        $i8 = i3 * i4;

        i11 = i11 + $i8;

        $r3 = r2.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleHasSubsampleEncryptionTable>;

        staticinvoke <java.util.Arrays: void fill(boolean[],int,int,boolean)>($r3, 0, i4, z2);

     label10:
        $r13 = r2.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleHasSubsampleEncryptionTable>;

        $i13 = r2.<androidx.media3.extractor.mp4.TrackFragment: int sampleCount>;

        staticinvoke <java.util.Arrays: void fill(boolean[],int,int,boolean)>($r13, i4, $i13, 0);

        if i11 <= 0 goto label11;

        virtualinvoke r2.<androidx.media3.extractor.mp4.TrackFragment: void initEncryptionData(int)>(i11);

     label11:
        return;
    }

    private static void parseSaio(androidx.media3.common.util.ParsableByteArray, androidx.media3.extractor.mp4.TrackFragment) throws androidx.media3.common.ParserException
    {
        androidx.media3.common.util.ParsableByteArray r0;
        androidx.media3.extractor.mp4.TrackFragment r1;
        int i0, i1, i2, i3, $i4;
        long $l5, $l6, $l7;
        java.lang.StringBuilder $r4, $r5, r8;
        java.lang.String $r6;
        androidx.media3.common.ParserException $r7;
        java.lang.Throwable r9;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        r1 := @parameter1: androidx.media3.extractor.mp4.TrackFragment;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        i0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i1 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomFlags(int)>(i0);

        $i4 = i1 & 1;

        if $i4 != 1 goto label1;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(8);

     label1:
        i2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        if i2 == 1 goto label2;

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected saio entry count: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r6, null);

        r9 = (java.lang.Throwable) $r7;

        throw r9;

     label2:
        i3 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomVersion(int)>(i0);

        $l5 = r1.<androidx.media3.extractor.mp4.TrackFragment: long auxiliaryDataPosition>;

        if i3 != 0 goto label3;

        $l7 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        goto label4;

     label3:
        $l7 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedLongToLong()>();

     label4:
        $l6 = $l5 + $l7;

        r1.<androidx.media3.extractor.mp4.TrackFragment: long auxiliaryDataPosition> = $l6;

        return;
    }

    private static androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle parseTfhd(androidx.media3.common.util.ParsableByteArray, android.util.SparseArray, boolean)
    {
        androidx.media3.common.util.ParsableByteArray r0;
        android.util.SparseArray r1;
        boolean z0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r2, $r9;
        java.lang.Object $r3, $r8;
        androidx.media3.extractor.mp4.DefaultSampleValues $r4, r10;
        androidx.media3.extractor.mp4.TrackFragment $r5, $r6, $r7;
        long l13;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        r1 := @parameter1: android.util.SparseArray;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        i0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i1 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomFlags(int)>(i0);

        i2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        if z0 == 0 goto label01;

        $r8 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object valueAt(int)>(0);

        $r9 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r8;

        goto label02;

     label01:
        $r3 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        $r9 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r3;

     label02:
        r2 = $r9;

        if r2 != null goto label03;

        return null;

     label03:
        $i7 = i1 & 1;

        if $i7 == 0 goto label04;

        l13 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedLongToLong()>();

        $r6 = r2.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r6.<androidx.media3.extractor.mp4.TrackFragment: long dataPosition> = l13;

        $r7 = r2.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r7.<androidx.media3.extractor.mp4.TrackFragment: long auxiliaryDataPosition> = l13;

     label04:
        r10 = r2.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.DefaultSampleValues defaultSampleValues>;

        $i8 = i1 & 2;

        if $i8 == 0 goto label05;

        $i12 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        $i14 = $i12 - 1;

        goto label06;

     label05:
        $i14 = r10.<androidx.media3.extractor.mp4.DefaultSampleValues: int sampleDescriptionIndex>;

     label06:
        i3 = $i14;

        $i9 = i1 & 8;

        if $i9 == 0 goto label07;

        $i15 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        goto label08;

     label07:
        $i15 = r10.<androidx.media3.extractor.mp4.DefaultSampleValues: int duration>;

     label08:
        i4 = $i15;

        $i10 = i1 & 16;

        if $i10 == 0 goto label09;

        $i16 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        goto label10;

     label09:
        $i16 = r10.<androidx.media3.extractor.mp4.DefaultSampleValues: int size>;

     label10:
        i5 = $i16;

        $i11 = i1 & 32;

        if $i11 == 0 goto label11;

        $i17 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        goto label12;

     label11:
        $i17 = r10.<androidx.media3.extractor.mp4.DefaultSampleValues: int flags>;

     label12:
        i6 = $i17;

        $r5 = r2.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r4 = new androidx.media3.extractor.mp4.DefaultSampleValues;

        specialinvoke $r4.<androidx.media3.extractor.mp4.DefaultSampleValues: void <init>(int,int,int,int)>(i3, i4, i5, i6);

        $r5.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.DefaultSampleValues header> = $r4;

        return r2;
    }

    private static long parseTfdt(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.common.util.ParsableByteArray r0;
        int i0, i1;
        long $l2;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        i0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i1 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomVersion(int)>(i0);

        if i1 != 1 goto label1;

        $l2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedLongToLong()>();

        goto label2;

     label1:
        $l2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

     label2:
        return $l2;
    }

    private static boolean isEdtsListDurationForEntireMediaTimeline(androidx.media3.extractor.mp4.Track)
    {
        androidx.media3.extractor.mp4.Track r0;
        long l0, $l2, $l4, $l5, $l6, $l7, $l8;
        long[] $r1, $r2, $r3, $r4, $r5, $r6;
        int $i1;
        byte $b3, $b9;
        boolean $z0;

        r0 := @parameter0: androidx.media3.extractor.mp4.Track;

        $r1 = r0.<androidx.media3.extractor.mp4.Track: long[] editListDurations>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.extractor.mp4.Track: long[] editListDurations>;

        $i1 = lengthof $r2;

        if $i1 != 1 goto label1;

        $r3 = r0.<androidx.media3.extractor.mp4.Track: long[] editListMediaTimes>;

        if $r3 != null goto label2;

     label1:
        return 0;

     label2:
        $r4 = r0.<androidx.media3.extractor.mp4.Track: long[] editListDurations>;

        $l2 = $r4[0];

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label3;

        return 1;

     label3:
        $r5 = r0.<androidx.media3.extractor.mp4.Track: long[] editListDurations>;

        $l5 = $r5[0];

        $r6 = r0.<androidx.media3.extractor.mp4.Track: long[] editListMediaTimes>;

        $l4 = $r6[0];

        $l7 = $l5 + $l4;

        $l6 = r0.<androidx.media3.extractor.mp4.Track: long movieTimescale>;

        l0 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>($l7, 1000000L, $l6);

        $l8 = r0.<androidx.media3.extractor.mp4.Track: long durationUs>;

        $b9 = l0 cmp $l8;

        if $b9 < 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    private static int parseTrun(androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle, int, int, androidx.media3.common.util.ParsableByteArray, int) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        int i0, i1, i2, i3, i4, i5, i7, i8, i9, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i23, $i24, $i28, $i30, i33, $i35, i37, $i38, $i39, $i40, i41, $i42;
        androidx.media3.common.util.ParsableByteArray r1;
        androidx.media3.extractor.mp4.Track r2;
        androidx.media3.extractor.mp4.TrackFragment r3;
        androidx.media3.extractor.mp4.DefaultSampleValues r4, $r9;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        int[] r5, $r11, $r18;
        long[] r6, $r12, $r14, $r16, $r17;
        boolean[] r7;
        long l6, l10, $l12, $l20, $l21, $l22, $l25, $l26, $l27, $l29, $l31, $l32, l34, l36, $l43;
        androidx.media3.extractor.mp4.TrackSampleTable $r8, $r13;
        java.lang.Object $r10, $r15;

        r0 := @parameter0: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: androidx.media3.common.util.ParsableByteArray;

        i2 := @parameter4: int;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        i3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i4 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomFlags(int)>(i3);

        $r8 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        r2 = $r8.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r9 = r3.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.DefaultSampleValues header>;

        $r10 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r9);

        r4 = (androidx.media3.extractor.mp4.DefaultSampleValues) $r10;

        $r11 = r3.<androidx.media3.extractor.mp4.TrackFragment: int[] trunLength>;

        $i11 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        $r11[i0] = $i11;

        $r12 = r3.<androidx.media3.extractor.mp4.TrackFragment: long[] trunDataPosition>;

        $l12 = r3.<androidx.media3.extractor.mp4.TrackFragment: long dataPosition>;

        $r12[i0] = $l12;

        $i13 = i4 & 1;

        if $i13 == 0 goto label01;

        $r17 = r3.<androidx.media3.extractor.mp4.TrackFragment: long[] trunDataPosition>;

        $l29 = $r17[i0];

        $i30 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        $l31 = (long) $i30;

        $l32 = $l29 + $l31;

        $r17[i0] = $l32;

     label01:
        $i14 = i4 & 4;

        if $i14 == 0 goto label02;

        $z8 = 1;

        goto label03;

     label02:
        $z8 = 0;

     label03:
        z0 = $z8;

        i33 = r4.<androidx.media3.extractor.mp4.DefaultSampleValues: int flags>;

        if z0 == 0 goto label04;

        i33 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

     label04:
        $i15 = i4 & 256;

        if $i15 == 0 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        z1 = $z9;

        $i16 = i4 & 512;

        if $i16 == 0 goto label07;

        $z10 = 1;

        goto label08;

     label07:
        $z10 = 0;

     label08:
        z2 = $z10;

        $i17 = i4 & 1024;

        if $i17 == 0 goto label09;

        $z11 = 1;

        goto label10;

     label09:
        $z11 = 0;

     label10:
        z3 = $z11;

        $i18 = i4 & 2048;

        if $i18 == 0 goto label11;

        $z12 = 1;

        goto label12;

     label11:
        $z12 = 0;

     label12:
        z4 = $z12;

        l34 = 0L;

        $z6 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean isEdtsListDurationForEntireMediaTimeline(androidx.media3.extractor.mp4.Track)>(r2);

        if $z6 == 0 goto label13;

        $r14 = r2.<androidx.media3.extractor.mp4.Track: long[] editListMediaTimes>;

        $r15 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r14);

        $r16 = (long[]) $r15;

        l34 = $r16[0];

     label13:
        r5 = r3.<androidx.media3.extractor.mp4.TrackFragment: int[] sampleSizeTable>;

        r6 = r3.<androidx.media3.extractor.mp4.TrackFragment: long[] samplePresentationTimesUs>;

        r7 = r3.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleIsSyncFrameTable>;

        $i19 = r2.<androidx.media3.extractor.mp4.Track: int type>;

        if $i19 != 2 goto label14;

        $i28 = i1 & 1;

        if $i28 == 0 goto label14;

        $z13 = 1;

        goto label15;

     label14:
        $z13 = 0;

     label15:
        z5 = $z13;

        $r18 = r3.<androidx.media3.extractor.mp4.TrackFragment: int[] trunLength>;

        $i35 = $r18[i0];

        i5 = i2 + $i35;

        l6 = r2.<androidx.media3.extractor.mp4.Track: long timescale>;

        l36 = r3.<androidx.media3.extractor.mp4.TrackFragment: long nextFragmentDecodeTime>;

        i37 = i2;

     label16:
        if i37 >= i5 goto label29;

        if z1 == 0 goto label17;

        $i38 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        goto label18;

     label17:
        $i38 = r4.<androidx.media3.extractor.mp4.DefaultSampleValues: int duration>;

     label18:
        i7 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: int checkNonNegative(int)>($i38);

        if z2 == 0 goto label19;

        $i39 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        goto label20;

     label19:
        $i39 = r4.<androidx.media3.extractor.mp4.DefaultSampleValues: int size>;

     label20:
        i8 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: int checkNonNegative(int)>($i39);

        if z3 == 0 goto label21;

        $i40 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        goto label23;

     label21:
        if i37 != 0 goto label22;

        if z0 == 0 goto label22;

        $i40 = i33;

        goto label23;

     label22:
        $i40 = r4.<androidx.media3.extractor.mp4.DefaultSampleValues: int flags>;

     label23:
        i9 = $i40;

        i41 = 0;

        if z4 == 0 goto label24;

        i41 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

     label24:
        $l20 = (long) i41;

        $l21 = l36 + $l20;

        l10 = $l21 - l34;

        $l22 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>(l10, 1000000L, l6);

        r6[i37] = $l22;

        $z7 = r3.<androidx.media3.extractor.mp4.TrackFragment: boolean nextFragmentDecodeTimeIncludesMoov>;

        if $z7 != 0 goto label25;

        $l26 = r6[i37];

        $r13 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $l25 = $r13.<androidx.media3.extractor.mp4.TrackSampleTable: long durationUs>;

        $l27 = $l26 + $l25;

        r6[i37] = $l27;

     label25:
        r5[i37] = i8;

        $i42 = i37;

        $i23 = i9 >> 16;

        $i24 = $i23 & 1;

        if $i24 != 0 goto label27;

        if z5 == 0 goto label26;

        if i37 != 0 goto label27;

     label26:
        $z14 = 1;

        goto label28;

     label27:
        $z14 = 0;

     label28:
        r7[$i42] = $z14;

        $l43 = (long) i7;

        l36 = l36 + $l43;

        i37 = i37 + 1;

        goto label16;

     label29:
        r3.<androidx.media3.extractor.mp4.TrackFragment: long nextFragmentDecodeTime> = l36;

        return i5;
    }

    private static int checkNonNegative(int) throws androidx.media3.common.ParserException
    {
        int i0;
        java.lang.StringBuilder $r1, $r2, r5;
        java.lang.String $r3;
        androidx.media3.common.ParserException $r4;
        java.lang.Throwable r6;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected negative value: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r3, null);

        r6 = (java.lang.Throwable) $r4;

        throw r6;

     label1:
        return i0;
    }

    private static void parseUuid(androidx.media3.common.util.ParsableByteArray, androidx.media3.extractor.mp4.TrackFragment, byte[]) throws androidx.media3.common.ParserException
    {
        androidx.media3.common.util.ParsableByteArray r0;
        androidx.media3.extractor.mp4.TrackFragment r1;
        byte[] r2, $r3;
        boolean $z0;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        r1 := @parameter1: androidx.media3.extractor.mp4.TrackFragment;

        r2 := @parameter2: byte[];

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>(r2, 0, 16);

        $r3 = <androidx.media3.extractor.mp4.FragmentedMp4Extractor: byte[] PIFF_SAMPLE_ENCRYPTION_BOX_EXTENDED_TYPE>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, $r3);

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseSenc(androidx.media3.common.util.ParsableByteArray,int,androidx.media3.extractor.mp4.TrackFragment)>(r0, 16, r1);

        return;
    }

    private static void parseSenc(androidx.media3.common.util.ParsableByteArray, androidx.media3.extractor.mp4.TrackFragment) throws androidx.media3.common.ParserException
    {
        androidx.media3.common.util.ParsableByteArray r0;
        androidx.media3.extractor.mp4.TrackFragment r1;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        r1 := @parameter1: androidx.media3.extractor.mp4.TrackFragment;

        staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: void parseSenc(androidx.media3.common.util.ParsableByteArray,int,androidx.media3.extractor.mp4.TrackFragment)>(r0, 0, r1);

        return;
    }

    private static void parseSenc(androidx.media3.common.util.ParsableByteArray, int, androidx.media3.extractor.mp4.TrackFragment) throws androidx.media3.common.ParserException
    {
        androidx.media3.common.util.ParsableByteArray r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        androidx.media3.extractor.mp4.TrackFragment r1;
        boolean z0, $z1;
        boolean[] $r2, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, r12;
        java.lang.String $r8;
        androidx.media3.common.ParserException $r9, $r11;
        java.lang.Throwable r13, r14;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 := @parameter1: int;

        r1 := @parameter2: androidx.media3.extractor.mp4.TrackFragment;

        $i4 = 8 + i0;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>($i4);

        i1 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i2 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomFlags(int)>(i1);

        $i5 = i2 & 1;

        if $i5 == 0 goto label1;

        $r11 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForUnsupportedContainerFeature(java.lang.String)>("Overriding TrackEncryptionBox parameters is unsupported.");

        r13 = (java.lang.Throwable) $r11;

        throw r13;

     label1:
        $i6 = i2 & 2;

        if $i6 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        i3 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        if i3 != 0 goto label4;

        $r10 = r1.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleHasSubsampleEncryptionTable>;

        $i10 = r1.<androidx.media3.extractor.mp4.TrackFragment: int sampleCount>;

        staticinvoke <java.util.Arrays: void fill(boolean[],int,int,boolean)>($r10, 0, $i10, 0);

        return;

     label4:
        $i7 = r1.<androidx.media3.extractor.mp4.TrackFragment: int sampleCount>;

        if i3 == $i7 goto label5;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Senc sample count ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is different from fragment sample count");

        $i9 = r1.<androidx.media3.extractor.mp4.TrackFragment: int sampleCount>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r8, null);

        r14 = (java.lang.Throwable) $r9;

        throw r14;

     label5:
        $r2 = r1.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleHasSubsampleEncryptionTable>;

        staticinvoke <java.util.Arrays: void fill(boolean[],int,int,boolean)>($r2, 0, i3, z0);

        $i8 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        virtualinvoke r1.<androidx.media3.extractor.mp4.TrackFragment: void initEncryptionData(int)>($i8);

        virtualinvoke r1.<androidx.media3.extractor.mp4.TrackFragment: void fillEncryptionData(androidx.media3.common.util.ParsableByteArray)>(r0);

        return;
    }

    private static void parseSampleGroups(androidx.media3.extractor.mp4.Atom$ContainerAtom, java.lang.String, androidx.media3.extractor.mp4.TrackFragment) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mp4.Atom$ContainerAtom r0;
        java.lang.String r1;
        androidx.media3.extractor.mp4.TrackFragment r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, i17, i18, i19, i22;
        boolean z0, $z1;
        byte[] r3, r15;
        java.util.List $r4, $r9;
        androidx.media3.common.ParserException $r6, $r7, $r8;
        long $l11, $l20;
        byte $b12, $b21;
        java.lang.Object $r10;
        androidx.media3.common.util.ParsableByteArray r11, r12, r14;
        androidx.media3.extractor.mp4.Atom$LeafAtom r13;
        androidx.media3.extractor.mp4.TrackEncryptionBox r16;
        java.lang.Throwable r17, r18, r19;

        r0 := @parameter0: androidx.media3.extractor.mp4.Atom$ContainerAtom;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.media3.extractor.mp4.TrackFragment;

        r11 = null;

        r12 = null;

        i17 = 0;

     label01:
        $r4 = r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List leafChildren>;

        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i17 >= $i4 goto label04;

        $r9 = r0.<androidx.media3.extractor.mp4.Atom$ContainerAtom: java.util.List leafChildren>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i17);

        r13 = (androidx.media3.extractor.mp4.Atom$LeafAtom) $r10;

        r14 = r13.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        $i13 = r13.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i13 != 1935828848 goto label02;

        virtualinvoke r14.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(12);

        $i16 = virtualinvoke r14.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        if $i16 != 1936025959 goto label03;

        r11 = r14;

        goto label03;

     label02:
        $i14 = r13.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i14 != 1936158820 goto label03;

        virtualinvoke r14.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(12);

        $i15 = virtualinvoke r14.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        if $i15 != 1936025959 goto label03;

        r12 = r14;

     label03:
        i17 = i17 + 1;

        goto label01;

     label04:
        if r11 == null goto label05;

        if r12 != null goto label06;

     label05:
        return;

     label06:
        virtualinvoke r11.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        $i5 = virtualinvoke r11.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i18 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomVersion(int)>($i5);

        virtualinvoke r11.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

        if i18 != 1 goto label07;

        virtualinvoke r11.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

     label07:
        $i6 = virtualinvoke r11.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        if $i6 == 1 goto label08;

        $r8 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForUnsupportedContainerFeature(java.lang.String)>("Entry count in sbgp != 1 (unsupported).");

        r17 = (java.lang.Throwable) $r8;

        throw r17;

     label08:
        virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        $i7 = virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i19 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomVersion(int)>($i7);

        virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

        if i19 != 1 goto label09;

        $l11 = virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        $b12 = $l11 cmp 0L;

        if $b12 != 0 goto label10;

        $r7 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForUnsupportedContainerFeature(java.lang.String)>("Variable length description in sgpd found (unsupported)");

        r18 = (java.lang.Throwable) $r7;

        throw r18;

     label09:
        if i19 < 2 goto label10;

        virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

     label10:
        $l20 = virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        $b21 = $l20 cmp 1L;

        if $b21 == 0 goto label11;

        $r6 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForUnsupportedContainerFeature(java.lang.String)>("Entry count in sgpd != 1 (unsupported).");

        r19 = (java.lang.Throwable) $r6;

        throw r19;

     label11:
        virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(1);

        i22 = virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        $i8 = i22 & 240;

        i0 = $i8 >> 4;

        i1 = i22 & 15;

        $i9 = virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        if $i9 != 1 goto label12;

        $z1 = 1;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        z0 = $z1;

        if z0 != 0 goto label14;

        return;

     label14:
        i2 = virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        r3 = newarray (byte)[16];

        $i10 = lengthof r3;

        virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>(r3, 0, $i10);

        r15 = null;

        if i2 != 0 goto label15;

        i3 = virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        r15 = newarray (byte)[i3];

        virtualinvoke r12.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>(r15, 0, i3);

     label15:
        r2.<androidx.media3.extractor.mp4.TrackFragment: boolean definesEncryptionData> = 1;

        r16 = new androidx.media3.extractor.mp4.TrackEncryptionBox;

        specialinvoke r16.<androidx.media3.extractor.mp4.TrackEncryptionBox: void <init>(boolean,java.lang.String,int,byte[],int,int,byte[])>(z0, r1, i2, r3, i0, i1, r15);

        r2.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.TrackEncryptionBox trackEncryptionBox> = r16;

        return;
    }

    private static android.util.Pair parseSidx(androidx.media3.common.util.ParsableByteArray, long) throws androidx.media3.common.ParserException
    {
        androidx.media3.common.util.ParsableByteArray r0;
        long l0, l3, l4, l8, $l9, $l11, $l12, $l14, $l15, l16, l17, l18, l19, l20;
        int i1, i2, i5, i6, i7, $i10, $i13, i21;
        int[] r1;
        long[] r2, r3, r4;
        java.lang.Long $r5;
        android.util.Pair $r7;
        androidx.media3.common.ParserException $r8;
        androidx.media3.extractor.ChunkIndex r9;
        java.lang.Throwable r10;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(8);

        i1 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i2 = staticinvoke <androidx.media3.extractor.mp4.Atom: int parseFullAtomVersion(int)>(i1);

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

        l3 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        l16 = l0;

        if i2 != 0 goto label1;

        l17 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        $l15 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        l18 = l16 + $l15;

        goto label2;

     label1:
        l17 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedLongToLong()>();

        $l9 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedLongToLong()>();

        l18 = l16 + $l9;

     label2:
        l4 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>(l17, 1000000L, l3);

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(2);

        i5 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readUnsignedShort()>();

        r1 = newarray (int)[i5];

        r2 = newarray (long)[i5];

        r3 = newarray (long)[i5];

        r4 = newarray (long)[i5];

        l19 = l17;

        l20 = l4;

        i21 = 0;

     label3:
        if i21 >= i5 goto label5;

        i6 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        i7 = -2147483648 & i6;

        if i7 == 0 goto label4;

        $r8 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Unhandled indirect reference", null);

        r10 = (java.lang.Throwable) $r8;

        throw r10;

     label4:
        l8 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        $i10 = 2147483647 & i6;

        r1[i21] = $i10;

        r2[i21] = l18;

        r4[i21] = l20;

        l19 = l19 + l8;

        l20 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>(l19, 1000000L, l3);

        $l11 = r4[i21];

        $l12 = l20 - $l11;

        r3[i21] = $l12;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

        $i13 = r1[i21];

        $l14 = (long) $i13;

        l18 = l18 + $l14;

        i21 = i21 + 1;

        goto label3;

     label5:
        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        r9 = new androidx.media3.extractor.ChunkIndex;

        specialinvoke r9.<androidx.media3.extractor.ChunkIndex: void <init>(int[],long[],long[],long[])>(r1, r2, r3, r4);

        $r7 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r5, r9);

        return $r7;
    }

    private void readEncryptionData(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        int i0, i6, i7;
        androidx.media3.extractor.mp4.TrackFragment r2, $r4;
        android.util.SparseArray $r3, $r6, $r9;
        long $l1, $l2, $l3, l5;
        androidx.media3.common.ParserException $r5;
        java.lang.Object $r7, $r10;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle $r8, r11;
        boolean $z0;
        byte $b4;
        java.lang.Throwable r12;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r11 = null;

        l5 = 9223372036854775807L;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i6 = 0;

     label1:
        if i6 >= i0 goto label3;

        $r6 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i6);

        $r8 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r7;

        r2 = $r8.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $z0 = r2.<androidx.media3.extractor.mp4.TrackFragment: boolean sampleEncryptionDataNeedsFill>;

        if $z0 == 0 goto label2;

        $l3 = r2.<androidx.media3.extractor.mp4.TrackFragment: long auxiliaryDataPosition>;

        $b4 = $l3 cmp l5;

        if $b4 >= 0 goto label2;

        l5 = r2.<androidx.media3.extractor.mp4.TrackFragment: long auxiliaryDataPosition>;

        $r9 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object valueAt(int)>(i6);

        r11 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r10;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        if r11 != null goto label4;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState> = 3;

        return;

     label4:
        $l1 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $l2 = l5 - $l1;

        i7 = (int) $l2;

        if i7 >= 0 goto label5;

        $r5 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Offset to encryption data was negative.", null);

        r12 = (java.lang.Throwable) $r5;

        throw r12;

     label5:
        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>(i7);

        $r4 = r11.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        virtualinvoke $r4.<androidx.media3.extractor.mp4.TrackFragment: void fillEncryptionData(androidx.media3.extractor.ExtractorInput)>(r1);

        return;
    }

    private boolean readSample(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.TrackOutput r2, $r39;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i47, i49, $i50, i52, i53, $i54, $i55, i56, $i57, $i58, $i59, $i60, i61, i63, i64;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        androidx.media3.common.util.ParsableByteArray $r3, $r4, $r5, $r7, $r8, $r10, $r14, $r15, $r17, $r20, $r21, $r22, $r23, $r24, $r37, $r38;
        byte[] $r6, $r9, r47;
        androidx.media3.common.Format $r11, $r26, $r34;
        java.lang.String $r12, $r13, $r27, $r35, $r36;
        androidx.media3.extractor.TrackOutput[] $r16, $r25;
        byte $b24, $b62;
        androidx.media3.common.ParserException $r28, $r42;
        androidx.media3.common.util.TimestampAdjuster $r29, $r46;
        androidx.media3.extractor.mp4.TrackSampleTable $r30, $r32, $r44;
        androidx.media3.extractor.mp4.Track $r31, $r33, r45;
        android.util.SparseArray $r41;
        long $l42, $l43, $l44, $l45, $l46, l48, l51;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r43;
        androidx.media3.extractor.TrackOutput$CryptoData r51;
        androidx.media3.extractor.mp4.TrackEncryptionBox r52;
        java.lang.Throwable r53, r54;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r43 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle currentTrackBundle>;

        if r43 != null goto label04;

        $r41 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: android.util.SparseArray trackBundles>;

        r43 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle getNextTrackBundle(android.util.SparseArray)>($r41);

        if r43 != null goto label02;

        $l44 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: long endOfMdatPosition>;

        $l45 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $l46 = $l44 - $l45;

        i47 = (int) $l46;

        if i47 >= 0 goto label01;

        $r42 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Offset to end of mdat was negative.", null);

        r53 = (java.lang.Throwable) $r42;

        throw r53;

     label01:
        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>(i47);

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void enterReadingAtomHeaderState()>();

        return 0;

     label02:
        l48 = virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: long getCurrentSampleOffset()>();

        $l42 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $l43 = l48 - $l42;

        i49 = (int) $l43;

        if i49 >= 0 goto label03;

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("FragmentedMp4Extractor", "Ignoring negative offset to sample data.");

        i49 = 0;

     label03:
        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>(i49);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle currentTrackBundle> = r43;

     label04:
        $i50 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState>;

        if $i50 != 3 goto label10;

        $i25 = virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int getCurrentSampleSize()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize> = $i25;

        $i27 = r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $i26 = r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int firstSampleToOutputIndex>;

        if $i27 >= $i26 goto label06;

        $i41 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>($i41);

        virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void skipSampleEncryptionData()>();

        $z5 = virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean next()>();

        if $z5 != 0 goto label05;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle currentTrackBundle> = null;

     label05:
        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState> = 3;

        return 1;

     label06:
        $r30 = r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r31 = $r30.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $i28 = $r31.<androidx.media3.extractor.mp4.Track: int sampleTransformation>;

        if $i28 != 1 goto label07;

        $i39 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        $i40 = $i39 - 8;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize> = $i40;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>(8);

     label07:
        $r36 = "audio/ac4";

        $r32 = r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r33 = $r32.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $r34 = $r33.<androidx.media3.extractor.mp4.Track: androidx.media3.common.Format format>;

        $r35 = $r34.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z4 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z4 == 0 goto label08;

        $i34 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        $i35 = virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int outputSampleEncryptionData(int,int)>($i34, 7);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten> = $i35;

        $i36 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        $r37 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>;

        staticinvoke <androidx.media3.extractor.Ac4Util: void getAc4SampleHeader(int,androidx.media3.common.util.ParsableByteArray)>($i36, $r37);

        $r39 = r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output>;

        $r38 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray scratch>;

        interfaceinvoke $r39.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r38, 7);

        $i37 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten>;

        $i38 = $i37 + 7;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten> = $i38;

        goto label09;

     label08:
        $i29 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        $i30 = virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int outputSampleEncryptionData(int,int)>($i29, 0);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten> = $i30;

     label09:
        $i32 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        $i31 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten>;

        $i33 = $i32 + $i31;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize> = $i33;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState> = 4;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining> = 0;

     label10:
        $r44 = r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        r45 = $r44.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        r2 = r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output>;

        l51 = virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: long getCurrentSamplePresentationTimeUs()>();

        $r46 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster>;

        if $r46 == null goto label11;

        $r29 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster>;

        l51 = virtualinvoke $r29.<androidx.media3.common.util.TimestampAdjuster: long adjustSampleTimestamp(long)>(l51);

     label11:
        $i1 = r45.<androidx.media3.extractor.mp4.Track: int nalUnitLengthFieldLength>;

        if $i1 == 0 goto label22;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalPrefix>;

        r47 = virtualinvoke $r3.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r47[0] = 0;

        r47[1] = 0;

        r47[2] = 0;

        $i10 = r45.<androidx.media3.extractor.mp4.Track: int nalUnitLengthFieldLength>;

        i52 = $i10 + 1;

        $i11 = r45.<androidx.media3.extractor.mp4.Track: int nalUnitLengthFieldLength>;

        i53 = 4 - $i11;

     label12:
        $i54 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten>;

        $i55 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        if $i54 >= $i55 goto label21;

        $i12 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining>;

        if $i12 != 0 goto label16;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>(r47, i53, i52);

        $r20 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalPrefix>;

        virtualinvoke $r20.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r21 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalPrefix>;

        i56 = virtualinvoke $r21.<androidx.media3.common.util.ParsableByteArray: int readInt()>();

        if i56 >= 1 goto label13;

        $r28 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Invalid NAL length", null);

        r54 = (java.lang.Throwable) $r28;

        throw r54;

     label13:
        $i22 = i56 - 1;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining> = $i22;

        $r22 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalStartCode>;

        virtualinvoke $r22.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r23 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalStartCode>;

        interfaceinvoke r2.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r23, 4);

        $r24 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalPrefix>;

        interfaceinvoke r2.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r24, 1);

        $r25 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] ceaTrackOutputs>;

        $i23 = lengthof $r25;

        if $i23 <= 0 goto label14;

        $r26 = r45.<androidx.media3.extractor.mp4.Track: androidx.media3.common.Format format>;

        $r27 = $r26.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $b24 = r47[4];

        $z3 = staticinvoke <androidx.media3.extractor.NalUnitUtil: boolean isNalUnitSei(java.lang.String,byte)>($r27, $b24);

        if $z3 == 0 goto label14;

        $z6 = 1;

        goto label15;

     label14:
        $z6 = 0;

     label15:
        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean processSeiNalUnitPayload> = $z6;

        $i57 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten>;

        $i58 = $i57 + 5;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten> = $i58;

        $i59 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        $i60 = $i59 + i53;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize> = $i60;

        goto label12;

     label16:
        $z1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: boolean processSeiNalUnitPayload>;

        if $z1 == 0 goto label19;

        $r4 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer>;

        $i18 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining>;

        virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: void reset(int)>($i18);

        $r5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer>;

        $r6 = virtualinvoke $r5.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i19 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining>;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r6, 0, $i19);

        $r7 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer>;

        $i20 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining>;

        interfaceinvoke r2.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r7, $i20);

        i61 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining>;

        $r8 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer>;

        $r9 = virtualinvoke $r8.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $r10 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer>;

        $i21 = virtualinvoke $r10.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        i0 = staticinvoke <androidx.media3.extractor.NalUnitUtil: int unescapeStream(byte[],int)>($r9, $i21);

        $r14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer>;

        $r13 = "video/hevc";

        $r11 = r45.<androidx.media3.extractor.mp4.Track: androidx.media3.common.Format format>;

        $r12 = $r11.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label17;

        $b62 = 1;

        goto label18;

     label17:
        $b62 = 0;

     label18:
        virtualinvoke $r14.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>($b62);

        $r15 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer>;

        virtualinvoke $r15.<androidx.media3.common.util.ParsableByteArray: void setLimit(int)>(i0);

        $r17 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.ParsableByteArray nalBuffer>;

        $r16 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] ceaTrackOutputs>;

        staticinvoke <androidx.media3.extractor.CeaUtil: void consume(long,androidx.media3.common.util.ParsableByteArray,androidx.media3.extractor.TrackOutput[])>(l51, $r17, $r16);

        goto label20;

     label19:
        $i13 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining>;

        i61 = interfaceinvoke r2.<androidx.media3.extractor.TrackOutput: int sampleData(androidx.media3.common.DataReader,int,boolean)>(r1, $i13, 0);

     label20:
        $i14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten>;

        $i15 = $i14 + i61;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten> = $i15;

        $i16 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining>;

        $i17 = $i16 - i61;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleCurrentNalBytesRemaining> = $i17;

        goto label12;

     label21:
        goto label23;

     label22:
        $i3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten>;

        $i2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        if $i3 >= $i2 goto label23;

        $i6 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        $i5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten>;

        $i7 = $i6 - $i5;

        i63 = interfaceinvoke r2.<androidx.media3.extractor.TrackOutput: int sampleData(androidx.media3.common.DataReader,int,boolean)>(r1, $i7, 0);

        $i8 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten>;

        $i9 = $i8 + i63;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleBytesWritten> = $i9;

        goto label22;

     label23:
        i64 = virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int getCurrentSampleFlags()>();

        r51 = null;

        r52 = virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackEncryptionBox getEncryptionBoxIfEncrypted()>();

        if r52 == null goto label24;

        r51 = r52.<androidx.media3.extractor.mp4.TrackEncryptionBox: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>;

     label24:
        $i4 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int sampleSize>;

        interfaceinvoke r2.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l51, i64, $i4, 0, r51);

        specialinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void outputPendingMetadataSamples(long)>(l51);

        $z0 = virtualinvoke r43.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean next()>();

        if $z0 != 0 goto label25;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle currentTrackBundle> = null;

     label25:
        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int parserState> = 3;

        return 1;
    }

    private void outputPendingMetadataSamples(long)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor r0;
        long l0, l7;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo r1;
        androidx.media3.extractor.TrackOutput[] r2;
        int i1, $i2, $i3, $i4, $i5, $i6, i8;
        androidx.media3.extractor.TrackOutput r3;
        java.util.ArrayDeque $r4, $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        androidx.media3.common.util.TimestampAdjuster $r7, $r8;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        l0 := @parameter0: long;

     label1:
        $r4 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque pendingMetadataSampleInfos>;

        $z0 = virtualinvoke $r4.<java.util.ArrayDeque: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: java.util.ArrayDeque pendingMetadataSampleInfos>;

        $r6 = virtualinvoke $r5.<java.util.ArrayDeque: java.lang.Object removeFirst()>();

        r1 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo) $r6;

        $i3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int pendingMetadataSampleBytes>;

        $i2 = r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: int size>;

        $i4 = $i3 - $i2;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int pendingMetadataSampleBytes> = $i4;

        l7 = r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: long sampleTimeUs>;

        $z1 = r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: boolean sampleTimeIsRelative>;

        if $z1 == 0 goto label2;

        l7 = l7 + l0;

     label2:
        $r7 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster>;

        if $r7 == null goto label3;

        $r8 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster>;

        l7 = virtualinvoke $r8.<androidx.media3.common.util.TimestampAdjuster: long adjustSampleTimestamp(long)>(l7);

     label3:
        r2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.TrackOutput[] emsgTrackOutputs>;

        i1 = lengthof r2;

        i8 = 0;

     label4:
        if i8 >= i1 goto label5;

        r3 = r2[i8];

        $i6 = r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: int size>;

        $i5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: int pendingMetadataSampleBytes>;

        interfaceinvoke r3.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l7, 1, $i6, $i5, null);

        i8 = i8 + 1;

        goto label4;

     label5:
        goto label1;

     label6:
        return;
    }

    private static androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle getNextTrackBundle(android.util.SparseArray)
    {
        android.util.SparseArray r0;
        int i0, $i3, $i4, $i5, $i6, i8;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r1, r5;
        long l1, l7;
        java.lang.Object $r2;
        boolean $z0, $z1;
        byte $b2;
        androidx.media3.extractor.mp4.TrackFragment $r3;
        androidx.media3.extractor.mp4.TrackSampleTable $r4;

        r0 := @parameter0: android.util.SparseArray;

        r5 = null;

        l7 = 9223372036854775807L;

        i0 = virtualinvoke r0.<android.util.SparseArray: int size()>();

        i8 = 0;

     label1:
        if i8 >= i0 goto label5;

        $r2 = virtualinvoke r0.<android.util.SparseArray: java.lang.Object valueAt(int)>(i8);

        r1 = (androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle) $r2;

        $z0 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean access$000(androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle)>(r1);

        if $z0 != 0 goto label2;

        $i6 = r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $r4 = r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $i5 = $r4.<androidx.media3.extractor.mp4.TrackSampleTable: int sampleCount>;

        if $i6 == $i5 goto label4;

     label2:
        $z1 = staticinvoke <androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean access$000(androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle)>(r1);

        if $z1 == 0 goto label3;

        $i4 = r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentTrackRunIndex>;

        $r3 = r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $i3 = $r3.<androidx.media3.extractor.mp4.TrackFragment: int trunCount>;

        if $i4 != $i3 goto label3;

        goto label4;

     label3:
        l1 = virtualinvoke r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: long getCurrentSampleOffset()>();

        $b2 = l1 cmp l7;

        if $b2 >= 0 goto label4;

        r5 = r1;

        l7 = l1;

     label4:
        i8 = i8 + 1;

        goto label1;

     label5:
        return r5;
    }

    private static androidx.media3.common.DrmInitData getDrmInitDataFromAtoms(java.util.List)
    {
        java.util.List r0;
        int i0, $i1, i2;
        androidx.media3.extractor.mp4.Atom$LeafAtom r1;
        byte[] r2;
        java.util.UUID r3;
        java.lang.Object $r4;
        androidx.media3.common.util.ParsableByteArray $r5;
        androidx.media3.common.DrmInitData$SchemeData $r6;
        java.util.ArrayList $r7, r8;
        androidx.media3.common.DrmInitData $r9;

        r0 := @parameter0: java.util.List;

        r8 = null;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        r1 = (androidx.media3.extractor.mp4.Atom$LeafAtom) $r4;

        $i1 = r1.<androidx.media3.extractor.mp4.Atom$LeafAtom: int type>;

        if $i1 != 1886614376 goto label4;

        if r8 != null goto label2;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r8 = $r7;

     label2:
        $r5 = r1.<androidx.media3.extractor.mp4.Atom$LeafAtom: androidx.media3.common.util.ParsableByteArray data>;

        r2 = virtualinvoke $r5.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r3 = staticinvoke <androidx.media3.extractor.mp4.PsshAtomUtil: java.util.UUID parseUuid(byte[])>(r2);

        if r3 != null goto label3;

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("FragmentedMp4Extractor", "Skipped pssh atom (failed to extract uuid)");

        goto label4;

     label3:
        $r6 = new androidx.media3.common.DrmInitData$SchemeData;

        specialinvoke $r6.<androidx.media3.common.DrmInitData$SchemeData: void <init>(java.util.UUID,java.lang.String,byte[])>(r3, "video/mp4", r2);

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        if r8 != null goto label6;

        $r9 = null;

        goto label7;

     label6:
        $r9 = new androidx.media3.common.DrmInitData;

        specialinvoke $r9.<androidx.media3.common.DrmInitData: void <init>(java.util.List)>(r8);

     label7:
        return $r9;
    }

    private static boolean shouldParseLeafAtom(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 1751411826 goto label1;

        if i0 == 1835296868 goto label1;

        if i0 == 1836476516 goto label1;

        if i0 == 1936286840 goto label1;

        if i0 == 1937011556 goto label1;

        if i0 == 1937011827 goto label1;

        if i0 == 1668576371 goto label1;

        if i0 == 1937011555 goto label1;

        if i0 == 1937011578 goto label1;

        if i0 == 1937013298 goto label1;

        if i0 == 1937007471 goto label1;

        if i0 == 1668232756 goto label1;

        if i0 == 1937011571 goto label1;

        if i0 == 1952867444 goto label1;

        if i0 == 1952868452 goto label1;

        if i0 == 1953196132 goto label1;

        if i0 == 1953654136 goto label1;

        if i0 == 1953658222 goto label1;

        if i0 == 1886614376 goto label1;

        if i0 == 1935763834 goto label1;

        if i0 == 1935763823 goto label1;

        if i0 == 1936027235 goto label1;

        if i0 == 1970628964 goto label1;

        if i0 == 1935828848 goto label1;

        if i0 == 1936158820 goto label1;

        if i0 == 1701606260 goto label1;

        if i0 == 1835362404 goto label1;

        if i0 != 1701671783 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean shouldParseContainerAtom(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 1836019574 goto label1;

        if i0 == 1953653099 goto label1;

        if i0 == 1835297121 goto label1;

        if i0 == 1835626086 goto label1;

        if i0 == 1937007212 goto label1;

        if i0 == 1836019558 goto label1;

        if i0 == 1953653094 goto label1;

        if i0 == 1836475768 goto label1;

        if i0 != 1701082227 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static androidx.media3.extractor.Extractor[] lambda$static$0()
    {
        androidx.media3.extractor.Extractor[] $r0;
        androidx.media3.extractor.mp4.FragmentedMp4Extractor $r1;

        $r0 = newarray (androidx.media3.extractor.Extractor)[1];

        $r1 = new androidx.media3.extractor.mp4.FragmentedMp4Extractor;

        specialinvoke $r1.<androidx.media3.extractor.mp4.FragmentedMp4Extractor: void <init>()>();

        $r0[0] = $r1;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.media3.extractor.ExtractorsFactory $r0;
        byte[] $r1;
        androidx.media3.common.Format$Builder $r2, $r3;
        androidx.media3.common.Format $r4;

        $r0 = dynamicinvoke "createExtractors" <androidx.media3.extractor.ExtractorsFactory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.extractor.Extractor[] __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.Extractor[] lambda$static$0()>, methodtype: androidx.media3.extractor.Extractor[] __METHODTYPE__());

        <androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.extractor.ExtractorsFactory FACTORY> = $r0;

        $r1 = newarray (byte)[16];

        $r1[0] = -94;

        $r1[1] = 57;

        $r1[2] = 79;

        $r1[3] = 82;

        $r1[4] = 90;

        $r1[5] = -101;

        $r1[6] = 79;

        $r1[7] = 20;

        $r1[8] = -94;

        $r1[9] = 68;

        $r1[10] = 108;

        $r1[11] = 66;

        $r1[12] = 124;

        $r1[13] = 100;

        $r1[14] = -115;

        $r1[15] = -12;

        <androidx.media3.extractor.mp4.FragmentedMp4Extractor: byte[] PIFF_SAMPLE_ENCRYPTION_BOX_EXTENDED_TYPE> = $r1;

        $r2 = new androidx.media3.common.Format$Builder;

        specialinvoke $r2.<androidx.media3.common.Format$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>("application/x-emsg");

        $r4 = virtualinvoke $r3.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        <androidx.media3.extractor.mp4.FragmentedMp4Extractor: androidx.media3.common.Format EMSG_FORMAT> = $r4;

        return;
    }

androidx.media3.extractor.mp4.FragmentedMp4Extractor$Flags
androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: long sampleTimeUs>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: boolean sampleTimeIsRelative>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: int size>
    public void <init>(long, boolean, int)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo r0;
        long l0;
        boolean z0;
        int i1;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: long sampleTimeUs> = l0;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: boolean sampleTimeIsRelative> = z0;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$MetadataSampleInfo: int size> = i1;

        return;
    }

androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int SINGLE_SUBSAMPLE_ENCRYPTION_DATA_LENGTH>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray scratch>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.DefaultSampleValues defaultSampleValues>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleInTrackRun>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentTrackRunIndex>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int firstSampleToOutputIndex>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray encryptionSignalByte>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray defaultInitializationVector>
<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment>
    public void <init>(androidx.media3.extractor.TrackOutput, androidx.media3.extractor.mp4.TrackSampleTable, androidx.media3.extractor.mp4.DefaultSampleValues)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        androidx.media3.extractor.TrackOutput r1;
        androidx.media3.extractor.mp4.TrackSampleTable r2;
        androidx.media3.extractor.mp4.DefaultSampleValues r3;
        androidx.media3.extractor.mp4.TrackFragment $r4;
        androidx.media3.common.util.ParsableByteArray $r5, $r6, $r7;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        r1 := @parameter0: androidx.media3.extractor.TrackOutput;

        r2 := @parameter1: androidx.media3.extractor.mp4.TrackSampleTable;

        r3 := @parameter2: androidx.media3.extractor.mp4.DefaultSampleValues;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output> = r1;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable> = r2;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.DefaultSampleValues defaultSampleValues> = r3;

        $r4 = new androidx.media3.extractor.mp4.TrackFragment;

        specialinvoke $r4.<androidx.media3.extractor.mp4.TrackFragment: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment> = $r4;

        $r5 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r5.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray scratch> = $r5;

        $r6 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r6.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(1);

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray encryptionSignalByte> = $r6;

        $r7 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r7.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray defaultInitializationVector> = $r7;

        virtualinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void reset(androidx.media3.extractor.mp4.TrackSampleTable,androidx.media3.extractor.mp4.DefaultSampleValues)>(r2, r3);

        return;
    }

    public void reset(androidx.media3.extractor.mp4.TrackSampleTable, androidx.media3.extractor.mp4.DefaultSampleValues)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        androidx.media3.extractor.mp4.TrackSampleTable r1;
        androidx.media3.extractor.mp4.DefaultSampleValues r2;
        androidx.media3.extractor.mp4.Track $r3;
        androidx.media3.common.Format $r4;
        androidx.media3.extractor.TrackOutput $r5;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        r1 := @parameter0: androidx.media3.extractor.mp4.TrackSampleTable;

        r2 := @parameter1: androidx.media3.extractor.mp4.DefaultSampleValues;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable> = r1;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.DefaultSampleValues defaultSampleValues> = r2;

        $r5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output>;

        $r3 = r1.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $r4 = $r3.<androidx.media3.extractor.mp4.Track: androidx.media3.common.Format format>;

        interfaceinvoke $r5.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r4);

        virtualinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: void resetFragmentInfo()>();

        return;
    }

    public void updateDrmInitData(androidx.media3.common.DrmInitData)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        androidx.media3.common.DrmInitData r1, r4;
        androidx.media3.extractor.mp4.TrackEncryptionBox r2;
        java.lang.String r3, $r18;
        androidx.media3.common.Format r5, $r14;
        androidx.media3.extractor.mp4.TrackSampleTable $r6, $r12;
        androidx.media3.extractor.mp4.TrackFragment $r7;
        androidx.media3.extractor.mp4.DefaultSampleValues $r8, $r11;
        androidx.media3.extractor.mp4.Track $r9, $r13;
        java.lang.Object $r10;
        int $i0;
        androidx.media3.common.Format$Builder $r15, $r16;
        androidx.media3.extractor.TrackOutput $r17;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        r1 := @parameter0: androidx.media3.common.DrmInitData;

        $r6 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r9 = $r6.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $r7 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r8 = $r7.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.DefaultSampleValues header>;

        $r10 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r8);

        $r11 = (androidx.media3.extractor.mp4.DefaultSampleValues) $r10;

        $i0 = $r11.<androidx.media3.extractor.mp4.DefaultSampleValues: int sampleDescriptionIndex>;

        r2 = virtualinvoke $r9.<androidx.media3.extractor.mp4.Track: androidx.media3.extractor.mp4.TrackEncryptionBox getSampleDescriptionEncryptionBox(int)>($i0);

        if r2 == null goto label1;

        $r18 = r2.<androidx.media3.extractor.mp4.TrackEncryptionBox: java.lang.String schemeType>;

        goto label2;

     label1:
        $r18 = null;

     label2:
        r3 = $r18;

        r4 = virtualinvoke r1.<androidx.media3.common.DrmInitData: androidx.media3.common.DrmInitData copyWithSchemeType(java.lang.String)>(r3);

        $r12 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r13 = $r12.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $r14 = $r13.<androidx.media3.extractor.mp4.Track: androidx.media3.common.Format format>;

        $r15 = virtualinvoke $r14.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $r16 = virtualinvoke $r15.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setDrmInitData(androidx.media3.common.DrmInitData)>(r4);

        r5 = virtualinvoke $r16.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $r17 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r17.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>(r5);

        return;
    }

    public void resetFragmentInfo()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        androidx.media3.extractor.mp4.TrackFragment $r1;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $r1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        virtualinvoke $r1.<androidx.media3.extractor.mp4.TrackFragment: void reset()>();

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex> = 0;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentTrackRunIndex> = 0;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleInTrackRun> = 0;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int firstSampleToOutputIndex> = 0;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment> = 0;

        return;
    }

    public void seek(long)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        long l0, $l2;
        androidx.media3.extractor.mp4.TrackFragment $r1, $r2, $r3;
        int $i1, i4;
        byte $b3;
        boolean[] $r4;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        l0 := @parameter0: long;

        i4 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

     label1:
        $r1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $i1 = $r1.<androidx.media3.extractor.mp4.TrackFragment: int sampleCount>;

        if i4 >= $i1 goto label3;

        $r2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $l2 = virtualinvoke $r2.<androidx.media3.extractor.mp4.TrackFragment: long getSamplePresentationTimeUs(int)>(i4);

        $b3 = $l2 cmp l0;

        if $b3 > 0 goto label3;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r4 = $r3.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleIsSyncFrameTable>;

        $z0 = $r4[i4];

        if $z0 == 0 goto label2;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int firstSampleToOutputIndex> = i4;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    public long getCurrentSamplePresentationTimeUs()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        boolean $z0;
        int $i0, $i1;
        androidx.media3.extractor.mp4.TrackFragment $r1;
        androidx.media3.extractor.mp4.TrackSampleTable $r2;
        long[] $r3;
        long $l2;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $z0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment>;

        if $z0 != 0 goto label1;

        $r2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r3 = $r2.<androidx.media3.extractor.mp4.TrackSampleTable: long[] timestampsUs>;

        $i1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $l2 = $r3[$i1];

        goto label2;

     label1:
        $r1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $i0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $l2 = virtualinvoke $r1.<androidx.media3.extractor.mp4.TrackFragment: long getSamplePresentationTimeUs(int)>($i0);

     label2:
        return $l2;
    }

    public long getCurrentSampleOffset()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        boolean $z0;
        androidx.media3.extractor.mp4.TrackFragment $r1;
        int $i0, $i1;
        long[] $r2, $r4;
        androidx.media3.extractor.mp4.TrackSampleTable $r3;
        long $l2;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $z0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment>;

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r4 = $r3.<androidx.media3.extractor.mp4.TrackSampleTable: long[] offsets>;

        $i1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $l2 = $r4[$i1];

        goto label2;

     label1:
        $r1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r2 = $r1.<androidx.media3.extractor.mp4.TrackFragment: long[] trunDataPosition>;

        $i0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentTrackRunIndex>;

        $l2 = $r2[$i0];

     label2:
        return $l2;
    }

    public int getCurrentSampleSize()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        boolean $z0;
        androidx.media3.extractor.mp4.TrackFragment $r1;
        int $i0, $i1, $i2;
        int[] $r2, $r4;
        androidx.media3.extractor.mp4.TrackSampleTable $r3;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $z0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment>;

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r4 = $r3.<androidx.media3.extractor.mp4.TrackSampleTable: int[] sizes>;

        $i1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $i2 = $r4[$i1];

        goto label2;

     label1:
        $r1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r2 = $r1.<androidx.media3.extractor.mp4.TrackFragment: int[] sampleSizeTable>;

        $i0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $i2 = $r2[$i0];

     label2:
        return $i2;
    }

    public int getCurrentSampleFlags()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        boolean $z0, $z1;
        androidx.media3.extractor.mp4.TrackFragment $r1;
        int $i0, $i1, $i2, i3;
        boolean[] $r2;
        androidx.media3.extractor.mp4.TrackSampleTable $r3;
        int[] $r4;
        androidx.media3.extractor.mp4.TrackEncryptionBox $r5;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $z0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment>;

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r4 = $r3.<androidx.media3.extractor.mp4.TrackSampleTable: int[] flags>;

        $i1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $i2 = $r4[$i1];

        goto label3;

     label1:
        $r1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r2 = $r1.<androidx.media3.extractor.mp4.TrackFragment: boolean[] sampleIsSyncFrameTable>;

        $i0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $z1 = $r2[$i0];

        if $z1 == 0 goto label2;

        $i2 = 1;

        goto label3;

     label2:
        $i2 = 0;

     label3:
        i3 = $i2;

        $r5 = virtualinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackEncryptionBox getEncryptionBoxIfEncrypted()>();

        if $r5 == null goto label4;

        i3 = i3 | 1073741824;

     label4:
        return i3;
    }

    public boolean next()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        androidx.media3.extractor.mp4.TrackFragment $r1;
        int[] $r2;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $i0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $i1 = $i0 + 1;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex> = $i1;

        $z0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleInTrackRun>;

        $i3 = $i2 + 1;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleInTrackRun> = $i3;

        $i6 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleInTrackRun>;

        $r1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r2 = $r1.<androidx.media3.extractor.mp4.TrackFragment: int[] trunLength>;

        $i4 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentTrackRunIndex>;

        $i5 = $r2[$i4];

        if $i6 != $i5 goto label2;

        $i7 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentTrackRunIndex>;

        $i8 = $i7 + 1;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentTrackRunIndex> = $i8;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleInTrackRun> = 0;

        return 0;

     label2:
        return 1;
    }

    public int outputSampleEncryptionData(int, int)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i18, $i19, $i20, $i22, $i24, $i25, $i27, $i29, $i30, $i32, $i33, $i35, $i36, $i38, $i40, $i41, $i42, $i43, i45;
        androidx.media3.extractor.mp4.TrackEncryptionBox r1;
        boolean z0, z1, $z2;
        byte[] r2, $r3, $r8, r23, r24;
        java.lang.Object $r4;
        androidx.media3.common.util.ParsableByteArray $r5, $r7, $r9, $r10, $r15, $r16, $r17, $r18, $r19, r22, r25;
        androidx.media3.extractor.mp4.TrackFragment $r6, $r13, $r21;
        byte $b10, $b14, $b16, $b21, $b23, $b26, $b28, $b31, $b34, $b37, $b39;
        androidx.media3.extractor.TrackOutput $r11, $r12, $r14, $r20;
        short $s15, $s17, $s46;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackEncryptionBox getEncryptionBoxIfEncrypted()>();

        if r1 != null goto label01;

        return 0;

     label01:
        $i6 = r1.<androidx.media3.extractor.mp4.TrackEncryptionBox: int perSampleIvSize>;

        if $i6 == 0 goto label02;

        $r21 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        r22 = $r21.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        i45 = r1.<androidx.media3.extractor.mp4.TrackEncryptionBox: int perSampleIvSize>;

        goto label03;

     label02:
        $r3 = r1.<androidx.media3.extractor.mp4.TrackEncryptionBox: byte[] defaultInitializationVector>;

        $r4 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r3);

        r23 = (byte[]) $r4;

        $r5 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray defaultInitializationVector>;

        $i7 = lengthof r23;

        virtualinvoke $r5.<androidx.media3.common.util.ParsableByteArray: void reset(byte[],int)>(r23, $i7);

        r22 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray defaultInitializationVector>;

        i45 = lengthof r23;

     label03:
        $r6 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $i8 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        z1 = virtualinvoke $r6.<androidx.media3.extractor.mp4.TrackFragment: boolean sampleHasSubsampleEncryptionTable(int)>($i8);

        if z1 != 0 goto label04;

        if i1 == 0 goto label05;

     label04:
        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        z0 = $z2;

        $r7 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray encryptionSignalByte>;

        $r8 = virtualinvoke $r7.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i43 = i45;

        if z0 == 0 goto label07;

        $s46 = 128;

        goto label08;

     label07:
        $s46 = 0;

     label08:
        $i9 = $i43 | $s46;

        $b10 = (byte) $i9;

        $r8[0] = $b10;

        $r9 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray encryptionSignalByte>;

        virtualinvoke $r9.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r11 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output>;

        $r10 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray encryptionSignalByte>;

        interfaceinvoke $r11.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int,int)>($r10, 1, 1);

        $r12 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r12.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int,int)>(r22, i45, 1);

        if z0 != 0 goto label09;

        $i42 = 1 + i45;

        return $i42;

     label09:
        if z1 != 0 goto label10;

        $r17 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray scratch>;

        virtualinvoke $r17.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(8);

        $r18 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray scratch>;

        r24 = virtualinvoke $r18.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r24[0] = 0;

        r24[1] = 1;

        $i24 = i1 >> 8;

        $i25 = $i24 & 255;

        $b26 = (byte) $i25;

        r24[2] = $b26;

        $i27 = i1 & 255;

        $b28 = (byte) $i27;

        r24[3] = $b28;

        $i29 = i0 >> 24;

        $i30 = $i29 & 255;

        $b31 = (byte) $i30;

        r24[4] = $b31;

        $i32 = i0 >> 16;

        $i33 = $i32 & 255;

        $b34 = (byte) $i33;

        r24[5] = $b34;

        $i35 = i0 >> 8;

        $i36 = $i35 & 255;

        $b37 = (byte) $i36;

        r24[6] = $b37;

        $i38 = i0 & 255;

        $b39 = (byte) $i38;

        r24[7] = $b39;

        $r20 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output>;

        $r19 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray scratch>;

        interfaceinvoke $r20.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int,int)>($r19, 8, 1);

        $i40 = 1 + i45;

        $i41 = $i40 + 8;

        return $i41;

     label10:
        $r13 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        r25 = $r13.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        i2 = virtualinvoke r25.<androidx.media3.common.util.ParsableByteArray: int readUnsignedShort()>();

        virtualinvoke r25.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(-2);

        $i11 = 6 * i2;

        i3 = 2 + $i11;

        if i1 == 0 goto label11;

        $r15 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray scratch>;

        virtualinvoke $r15.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(i3);

        $r16 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray scratch>;

        r2 = virtualinvoke $r16.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        virtualinvoke r25.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>(r2, 0, i3);

        $b14 = r2[2];

        $s15 = $b14 & 255;

        $i18 = $s15 << 8;

        $b16 = r2[3];

        $s17 = $b16 & 255;

        i4 = $i18 | $s17;

        i5 = i4 + i1;

        $i19 = i5 >> 8;

        $i20 = $i19 & 255;

        $b21 = (byte) $i20;

        r2[2] = $b21;

        $i22 = i5 & 255;

        $b23 = (byte) $i22;

        r2[3] = $b23;

        r25 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.common.util.ParsableByteArray scratch>;

     label11:
        $r14 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r14.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int,int)>(r25, i3, 1);

        $i12 = 1 + i45;

        $i13 = $i12 + i3;

        return $i13;
    }

    public void skipSampleEncryptionData()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        androidx.media3.extractor.mp4.TrackEncryptionBox r1;
        androidx.media3.common.util.ParsableByteArray r2;
        androidx.media3.extractor.mp4.TrackFragment $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        r1 = virtualinvoke r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackEncryptionBox getEncryptionBoxIfEncrypted()>();

        if r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        r2 = $r3.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.common.util.ParsableByteArray sampleEncryptionData>;

        $i0 = r1.<androidx.media3.extractor.mp4.TrackEncryptionBox: int perSampleIvSize>;

        if $i0 == 0 goto label2;

        $i4 = r1.<androidx.media3.extractor.mp4.TrackEncryptionBox: int perSampleIvSize>;

        virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>($i4);

     label2:
        $r4 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $i1 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: int currentSampleIndex>;

        $z0 = virtualinvoke $r4.<androidx.media3.extractor.mp4.TrackFragment: boolean sampleHasSubsampleEncryptionTable(int)>($i1);

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: int readUnsignedShort()>();

        $i3 = 6 * $i2;

        virtualinvoke r2.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>($i3);

     label3:
        return;
    }

    public androidx.media3.extractor.mp4.TrackEncryptionBox getEncryptionBoxIfEncrypted()
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        int i0;
        androidx.media3.extractor.mp4.TrackEncryptionBox r1, $r7, $r11, $r12;
        boolean $z0, $z1;
        androidx.media3.extractor.mp4.TrackFragment $r2, $r6, $r10;
        androidx.media3.extractor.mp4.DefaultSampleValues $r3, $r5;
        java.lang.Object $r4;
        androidx.media3.extractor.mp4.TrackSampleTable $r8;
        androidx.media3.extractor.mp4.Track $r9;

        r0 := @this: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $z0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r3 = $r2.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.DefaultSampleValues header>;

        $r4 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r3);

        $r5 = (androidx.media3.extractor.mp4.DefaultSampleValues) $r4;

        i0 = $r5.<androidx.media3.extractor.mp4.DefaultSampleValues: int sampleDescriptionIndex>;

        $r6 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r7 = $r6.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.TrackEncryptionBox trackEncryptionBox>;

        if $r7 == null goto label2;

        $r10 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackFragment fragment>;

        $r11 = $r10.<androidx.media3.extractor.mp4.TrackFragment: androidx.media3.extractor.mp4.TrackEncryptionBox trackEncryptionBox>;

        goto label3;

     label2:
        $r8 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: androidx.media3.extractor.mp4.TrackSampleTable moovSampleTable>;

        $r9 = $r8.<androidx.media3.extractor.mp4.TrackSampleTable: androidx.media3.extractor.mp4.Track track>;

        $r11 = virtualinvoke $r9.<androidx.media3.extractor.mp4.Track: androidx.media3.extractor.mp4.TrackEncryptionBox getSampleDescriptionEncryptionBox(int)>(i0);

     label3:
        r1 = $r11;

        if r1 == null goto label4;

        $z1 = r1.<androidx.media3.extractor.mp4.TrackEncryptionBox: boolean isEncrypted>;

        if $z1 == 0 goto label4;

        $r12 = r1;

        goto label5;

     label4:
        $r12 = null;

     label5:
        return $r12;
    }

    static boolean access$002(androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle, boolean)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        boolean z0;

        r0 := @parameter0: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        z0 := @parameter1: boolean;

        r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment> = z0;

        return z0;
    }

    static boolean access$000(androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle)
    {
        androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle r0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle;

        $z0 = r0.<androidx.media3.extractor.mp4.FragmentedMp4Extractor$TrackBundle: boolean currentlyInFragment>;

        return $z0;
    }

