kotlinx.coroutines.channels.AbstractChannel
    public void <init>(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlin.jvm.functions.Function1 $r1;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        specialinvoke $r0.<kotlinx.coroutines.channels.AbstractSendChannel: void <init>(kotlin.jvm.functions.Function1)>($r1);

        return;
    }

    public static final boolean access$enqueueReceive(kotlinx.coroutines.channels.AbstractChannel, kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.Receive $r0;
        boolean $z0;
        kotlinx.coroutines.channels.AbstractChannel $r1;

        $r1 := @parameter0: kotlinx.coroutines.channels.AbstractChannel;

        $r0 := @parameter1: kotlinx.coroutines.channels.Receive;

        $z0 = specialinvoke $r1.<kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceive(kotlinx.coroutines.channels.Receive)>($r0);

        return $z0;
    }

    public static final void access$removeReceiveOnCancel(kotlinx.coroutines.channels.AbstractChannel, kotlinx.coroutines.CancellableContinuation, kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlinx.coroutines.CancellableContinuation $r1;
        kotlinx.coroutines.channels.Receive $r2;

        $r0 := @parameter0: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        $r2 := @parameter2: kotlinx.coroutines.channels.Receive;

        specialinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: void removeReceiveOnCancel(kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.channels.Receive)>($r1, $r2);

        return;
    }

    private final boolean enqueueReceive(kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        boolean $z0;
        kotlinx.coroutines.channels.Receive $r1;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.Receive;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: void onReceiveEnqueued()>();

     label1:
        return $z0;
    }

    private final void removeReceiveOnCancel(kotlinx.coroutines.CancellableContinuation, kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlinx.coroutines.CancellableContinuation $r1;
        kotlinx.coroutines.channels.Receive $r2;
        kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel $r3;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlinx.coroutines.CancellableContinuation;

        $r2 := @parameter1: kotlinx.coroutines.channels.Receive;

        $r3 = new kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel;

        specialinvoke $r3.<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: void <init>(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.channels.Receive)>($r0, $r2);

        interfaceinvoke $r1.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r3);

        return;
    }

    public final void cancel(java.util.concurrent.CancellationException)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        java.util.concurrent.CancellationException $r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: java.util.concurrent.CancellationException;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isClosedForReceive()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        if $r1 != null goto label2;

        $r1 = new java.util.concurrent.CancellationException;

        $r2 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)>($r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was cancelled");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>($r2);

     label2:
        virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: boolean cancelInternal$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Throwable)>($r1);

        return;
    }

    public final boolean cancelInternal$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: boolean close(java.lang.Throwable)>($r1);

        virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: void onCancelIdempotent(boolean)>($z0);

        return $z0;
    }

    protected boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlinx.coroutines.channels.Receive $r1;
        boolean $z0, $z1;
        kotlinx.coroutines.internal.LockFreeLinkedListHead $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r3;
        kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1 $r4;
        int $i0;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 := @parameter0: kotlinx.coroutines.channels.Receive;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "receive");

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isBufferAlwaysEmpty()>();

        $z1 = 1;

        if $z0 == 0 goto label05;

        $r2 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.internal.LockFreeLinkedListHead getQueue()>();

     label01:
        $r3 = virtualinvoke $r2.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()>();

        $z0 = $r3 instanceof kotlinx.coroutines.channels.Send;

        if $z0 != 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        if $z0 != 0 goto label04;

        goto label09;

     label04:
        $z0 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean addNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r1, $r2);

        if $z0 == 0 goto label01;

        goto label13;

     label05:
        $r2 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.internal.LockFreeLinkedListHead getQueue()>();

        $r4 = new kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1;

        specialinvoke $r4.<kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.channels.AbstractChannel)>($r1, $r0);

     label06:
        $r3 = virtualinvoke $r2.<kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()>();

        $z0 = $r3 instanceof kotlinx.coroutines.channels.Send;

        if $z0 != 0 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z0 != 0 goto label10;

     label09:
        $z1 = 0;

        goto label13;

     label10:
        $i0 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: int tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)>($r1, $r2, $r4);

        lookupswitch($i0)
        {
            case 1: goto label13;
            case 2: goto label12;
            default: goto label11;
        };

     label11:
        goto label06;

     label12:
        $z1 = 0;

        goto label13;

     label13:
        return $z1;
    }

<kotlinx.coroutines.channels.AbstractChannel: boolean isBufferAlwaysEmpty()>
<kotlinx.coroutines.channels.AbstractChannel: boolean isBufferEmpty()>
    public boolean isClosedForReceive()
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlinx.coroutines.channels.Closed $r1;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.channels.Closed getClosedForReceive()>();

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: boolean isBufferEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final kotlinx.coroutines.channels.ChannelIterator iterator()
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r1;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = new kotlinx.coroutines.channels.AbstractChannel$Itr;

        specialinvoke $r1.<kotlinx.coroutines.channels.AbstractChannel$Itr: void <init>(kotlinx.coroutines.channels.AbstractChannel)>($r0);

        return $r1;
    }

    protected void onCancelIdempotent(boolean)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        boolean $z0;
        kotlinx.coroutines.channels.Closed $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r3;
        java.lang.AssertionError $r4;
        kotlinx.coroutines.channels.Send $r5;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $z0 := @parameter0: boolean;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.channels.Closed getClosedForSend()>();

        if $r1 == null goto label6;

        $r2 = staticinvoke <kotlinx.coroutines.internal.InlineList: java.lang.Object constructor-impl$default(java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

     label1:
        $r3 = virtualinvoke $r1.<kotlinx.coroutines.channels.Closed: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()>();

        $z0 = $r3 instanceof kotlinx.coroutines.internal.LockFreeLinkedListHead;

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: void onCancelIdempotentList-w-w6eGU(java.lang.Object,kotlinx.coroutines.channels.Closed)>($r2, $r1);

        return;

     label2:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $z0 = $r3 instanceof kotlinx.coroutines.channels.Send;

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        $z0 = virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean remove()>();

        if $z0 != 0 goto label5;

        virtualinvoke $r3.<kotlinx.coroutines.internal.LockFreeLinkedListNode: void helpRemove()>();

        goto label1;

     label5:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type kotlinx.coroutines.channels.Send");

        $r5 = (kotlinx.coroutines.channels.Send) $r3;

        $r2 = staticinvoke <kotlinx.coroutines.internal.InlineList: java.lang.Object plus-FjFbRPM(java.lang.Object,java.lang.Object)>($r2, $r5);

        goto label1;

     label6:
        $r6 = new java.lang.IllegalStateException;

        $r7 = "Cannot happen";

        $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        goto label7;

     label7:
        throw $r6;
    }

    protected void onCancelIdempotentList-w-w6eGU(java.lang.Object, kotlinx.coroutines.channels.Closed)
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlinx.coroutines.channels.Closed $r1;
        java.lang.Object $r2;
        boolean $z0;
        kotlinx.coroutines.channels.Send $r3;
        java.util.ArrayList $r4;
        int $i0;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlinx.coroutines.channels.Closed;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "closed");

        if $r2 == null goto label3;

        $z0 = $r2 instanceof java.util.ArrayList;

        if $z0 != 0 goto label1;

        $r3 = (kotlinx.coroutines.channels.Send) $r2;

        virtualinvoke $r3.<kotlinx.coroutines.channels.Send: void resumeSendClosed(kotlinx.coroutines.channels.Closed)>($r1);

        return;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type java.util.ArrayList<E of kotlinx.coroutines.internal.InlineList>{ kotlin.collections.TypeAliasesKt.ArrayList<E of kotlinx.coroutines.internal.InlineList> }");

        $r4 = (java.util.ArrayList) $r2;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $i0 = $i0 + -1;

     label2:
        if $i0 < 0 goto label3;

        $r2 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (kotlinx.coroutines.channels.Send) $r2;

        virtualinvoke $r3.<kotlinx.coroutines.channels.Send: void resumeSendClosed(kotlinx.coroutines.channels.Closed)>($r1);

        $i0 = $i0 + -1;

        goto label2;

     label3:
        return;
    }

    protected void onReceiveDequeued()
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        return;
    }

    protected void onReceiveEnqueued()
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        return;
    }

    protected java.lang.Object pollInternal()
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        kotlinx.coroutines.channels.Send $r1;
        kotlinx.coroutines.internal.Symbol $r2, $r3;
        boolean $z0;
        java.lang.AssertionError $r4;
        java.lang.Object $r5;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

     label1:
        $r1 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.channels.Send takeFirstSendOrPeekClosed()>();

        if $r1 != null goto label2;

        $r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        return $r2;

     label2:
        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.Send: kotlinx.coroutines.internal.Symbol tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)>(null);

        if $r2 == null goto label7;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label6;

        $r3 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r2 != $r3 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        goto label6;

     label5:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label6:
        virtualinvoke $r1.<kotlinx.coroutines.channels.Send: void completeResumeSend()>();

        $r5 = virtualinvoke $r1.<kotlinx.coroutines.channels.Send: java.lang.Object getPollResult()>();

        return $r5;

     label7:
        virtualinvoke $r1.<kotlinx.coroutines.channels.Send: void undeliveredElement()>();

        goto label1;
    }

    protected kotlinx.coroutines.channels.ReceiveOrClosed takeFirstReceiveOrPeekClosed()
    {
        kotlinx.coroutines.channels.AbstractChannel $r0;
        boolean $z0;
        kotlinx.coroutines.channels.ReceiveOrClosed $r1;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.channels.AbstractSendChannel: kotlinx.coroutines.channels.ReceiveOrClosed takeFirstReceiveOrPeekClosed()>();

        if $r1 == null goto label1;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel: void onReceiveDequeued()>();

     label1:
        return $r1;
    }

kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1
<kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: kotlinx.coroutines.channels.AbstractChannel this$0>
    public void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.channels.AbstractChannel)
    {
        kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1 $r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;
        kotlinx.coroutines.channels.AbstractChannel $r2;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        $r2 := @parameter1: kotlinx.coroutines.channels.AbstractChannel;

        $r0.<kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: kotlinx.coroutines.channels.AbstractChannel this$0> = $r2;

        specialinvoke $r0.<kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: void <init>(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r1);

        return;
    }

    public volatile java.lang.Object prepare(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1 $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r2;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) $r1;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: java.lang.Object prepare(kotlinx.coroutines.internal.LockFreeLinkedListNode)>($r2);

        return $r1;
    }

    public java.lang.Object prepare(kotlinx.coroutines.internal.LockFreeLinkedListNode)
    {
        kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1 $r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode $r1;
        kotlinx.coroutines.channels.AbstractChannel $r2;
        boolean $z0;
        java.lang.Object $r3;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "affected");

        $r2 = $r0.<kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: kotlinx.coroutines.channels.AbstractChannel this$0>;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.channels.AbstractChannel: boolean isBufferEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <kotlinx.coroutines.internal.LockFreeLinkedListKt: java.lang.Object getCONDITION_FALSE()>();

        return $r3;
    }

kotlinx.coroutines.channels.AbstractChannel$Itr
<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>
<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result>
    public void <init>(kotlinx.coroutines.channels.AbstractChannel)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr $r0;
        kotlinx.coroutines.channels.AbstractChannel $r1;
        kotlinx.coroutines.internal.Symbol $r2;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: kotlinx.coroutines.channels.AbstractChannel;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "channel");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel> = $r1;

        $r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result> = $r2;

        return;
    }

    private final boolean hasNextResult(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr $r0;
        java.lang.Object $r1;
        boolean $z0;
        kotlinx.coroutines.channels.Closed $r2;
        java.lang.Throwable $r3;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label2;

        $r2 = (kotlinx.coroutines.channels.Closed) $r1;

        $r3 = $r2.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        if $r3 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke $r2.<kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()>();

        $r3 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverStackTrace(java.lang.Throwable)>($r3);

        throw $r3;

     label2:
        return 1;
    }

    private final java.lang.Object hasNextSuspend(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr $r0;
        kotlin.coroutines.Continuation $r1, $r2;
        kotlinx.coroutines.CancellableContinuationImpl $r3;
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext $r4;
        kotlinx.coroutines.channels.AbstractChannel $r5;
        boolean $z0;
        java.lang.Object $r6, $r14;
        kotlinx.coroutines.channels.Closed $r7;
        java.lang.Throwable $r8;
        kotlin.Result$Companion $r9;
        java.lang.Boolean $r10;
        kotlinx.coroutines.internal.Symbol $r11;
        kotlin.jvm.functions.Function1 $r12;
        kotlin.coroutines.CoroutineContext $r13;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>($r1);

        $r3 = staticinvoke <kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)>($r2);

        $r4 = new kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        specialinvoke $r4.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: void <init>(kotlinx.coroutines.channels.AbstractChannel$Itr,kotlinx.coroutines.CancellableContinuation)>($r0, $r3);

     label1:
        $r5 = $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $z0 = staticinvoke <kotlinx.coroutines.channels.AbstractChannel: boolean access$enqueueReceive(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.channels.Receive)>($r5, $r4);

        if $z0 == 0 goto label2;

        $r5 = $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        staticinvoke <kotlinx.coroutines.channels.AbstractChannel: void access$removeReceiveOnCancel(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.channels.Receive)>($r5, $r3, $r4);

        goto label7;

     label2:
        $r5 = $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $r6 = virtualinvoke $r5.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollInternal()>();

        virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: void setResult(java.lang.Object)>($r6);

        $z0 = $r6 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 == 0 goto label4;

        $r7 = (kotlinx.coroutines.channels.Closed) $r6;

        $r8 = $r7.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        if $r8 != null goto label3;

        $r9 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r10 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(0);

        $r6 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r10);

        interfaceinvoke $r3.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r6);

        goto label7;

     label3:
        $r9 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r8 = virtualinvoke $r7.<kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()>();

        $r6 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r8);

        $r6 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r6);

        interfaceinvoke $r3.<kotlin.coroutines.Continuation: void resumeWith(java.lang.Object)>($r6);

        goto label7;

     label4:
        $r11 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r6 == $r11 goto label1;

        $r10 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>(1);

        $r5 = $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $r12 = $r5.<kotlinx.coroutines.channels.AbstractChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r12 == null goto label5;

        $r13 = interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r12 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r12, $r6, $r13);

        goto label6;

     label5:
        $r12 = null;

     label6:
        interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: void resume(java.lang.Object,kotlin.jvm.functions.Function1)>($r10, $r12);

     label7:
        $r6 = virtualinvoke $r3.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r14 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r14 goto label8;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r1);

     label8:
        return $r6;
    }

    public java.lang.Object hasNext(kotlin.coroutines.Continuation)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;
        boolean $z0;
        java.lang.Boolean $r4;
        kotlinx.coroutines.channels.AbstractChannel $r5;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result>;

        $r3 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r2 == $r3 goto label1;

        $r2 = $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result>;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: boolean hasNextResult(java.lang.Object)>($r2);

        $r4 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z0);

        return $r4;

     label1:
        $r5 = $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $r2 = virtualinvoke $r5.<kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollInternal()>();

        $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result> = $r2;

        $r3 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r2 == $r3 goto label2;

        $r2 = $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result>;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: boolean hasNextResult(java.lang.Object)>($r2);

        $r4 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)>($z0);

        return $r4;

     label2:
        $r2 = specialinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object hasNextSuspend(kotlin.coroutines.Continuation)>($r1);

        return $r2;
    }

    public java.lang.Object next()
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr $r0;
        java.lang.Object $r1;
        boolean $z0;
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.IllegalStateException $r3;
        kotlinx.coroutines.channels.Closed $r4;
        java.lang.Throwable $r5;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 = $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result>;

        $z0 = $r1 instanceof kotlinx.coroutines.channels.Closed;

        if $z0 != 0 goto label2;

        $r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        if $r1 == $r2 goto label1;

        $r2 = <kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED>;

        $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result> = $r2;

        return $r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("\'hasNext\' should be called prior to \'next\' invocation");

        throw $r3;

     label2:
        $r4 = (kotlinx.coroutines.channels.Closed) $r1;

        $r5 = virtualinvoke $r4.<kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()>();

        $r5 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverStackTrace(java.lang.Throwable)>($r5);

        throw $r5;
    }

    public final void setResult(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$Itr $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r1 := @parameter0: java.lang.Object;

        $r0.<kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result> = $r1;

        return;
    }

kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext
<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>
<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator>
    public void <init>(kotlinx.coroutines.channels.AbstractChannel$Itr, kotlinx.coroutines.CancellableContinuation)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext $r0;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r1;
        kotlinx.coroutines.CancellableContinuation $r2;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 := @parameter0: kotlinx.coroutines.channels.AbstractChannel$Itr;

        $r2 := @parameter1: kotlinx.coroutines.CancellableContinuation;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "iterator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "cont");

        specialinvoke $r0.<kotlinx.coroutines.channels.Receive: void <init>()>();

        $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator> = $r1;

        $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont> = $r2;

        return;
    }

    public void completeResumeReceive(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r2;
        kotlinx.coroutines.CancellableContinuation $r3;
        kotlinx.coroutines.internal.Symbol $r4;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 := @parameter0: java.lang.Object;

        $r2 = $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator>;

        virtualinvoke $r2.<kotlinx.coroutines.channels.AbstractChannel$Itr: void setResult(java.lang.Object)>($r1);

        $r3 = $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $r4 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: void completeResume(java.lang.Object)>($r4);

        return;
    }

    public kotlin.jvm.functions.Function1 resumeOnCancellationFun(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r2;
        kotlinx.coroutines.channels.AbstractChannel $r3;
        kotlin.jvm.functions.Function1 $r4;
        kotlinx.coroutines.CancellableContinuation $r5;
        kotlin.coroutines.CoroutineContext $r6;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 := @parameter0: java.lang.Object;

        $r2 = $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator>;

        $r3 = $r2.<kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel>;

        $r4 = $r3.<kotlinx.coroutines.channels.AbstractChannel: kotlin.jvm.functions.Function1 onUndeliveredElement>;

        if $r4 == null goto label1;

        $r5 = $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $r6 = interfaceinvoke $r5.<kotlinx.coroutines.CancellableContinuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r4 = staticinvoke <kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)>($r4, $r1, $r6);

        return $r4;

     label1:
        return null;
    }

    public void resumeReceiveClosed(kotlinx.coroutines.channels.Closed)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext $r0;
        kotlinx.coroutines.channels.Closed $r1;
        java.lang.Throwable $r2;
        kotlinx.coroutines.CancellableContinuation $r3;
        java.lang.Boolean $r4;
        java.lang.Object $r5;
        kotlinx.coroutines.channels.AbstractChannel$Itr $r6;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 := @parameter0: kotlinx.coroutines.channels.Closed;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "closed");

        $r2 = $r1.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        if $r2 != null goto label1;

        $r3 = $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r5 = staticinvoke <kotlinx.coroutines.CancellableContinuation$DefaultImpls: java.lang.Object tryResume$default(kotlinx.coroutines.CancellableContinuation,java.lang.Object,java.lang.Object,int,java.lang.Object)>($r3, $r4, null, 2, null);

        goto label2;

     label1:
        $r3 = $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $r2 = virtualinvoke $r1.<kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()>();

        $r5 = interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: java.lang.Object tryResumeWithException(java.lang.Throwable)>($r2);

     label2:
        if $r5 == null goto label3;

        $r6 = $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator>;

        virtualinvoke $r6.<kotlinx.coroutines.channels.AbstractChannel$Itr: void setResult(java.lang.Object)>($r1);

        $r3 = $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: void completeResume(java.lang.Object)>($r5);

     label3:
        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext $r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r1 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ReceiveHasNext@");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public kotlinx.coroutines.internal.Symbol tryResumeReceive(java.lang.Object, kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext $r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.CancellableContinuation $r3;
        boolean $z0, $z1;
        java.lang.Boolean $r4;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc $r5;
        kotlin.jvm.functions.Function1 $r6;
        kotlinx.coroutines.internal.Symbol $r7;
        java.lang.AssertionError $r8;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r3 = $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont>;

        $z0 = 1;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        if $r1 == null goto label1;

        $r5 = $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc desc>;

        goto label2;

     label1:
        $r5 = null;

     label2:
        $r6 = virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlin.jvm.functions.Function1 resumeOnCancellationFun(java.lang.Object)>($r2);

        $r2 = interfaceinvoke $r3.<kotlinx.coroutines.CancellableContinuation: java.lang.Object tryResume(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r4, $r5, $r6);

        if $r2 != null goto label3;

        return null;

     label3:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label7;

        $r7 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r2 != $r7 goto label4;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        if $z0 == 0 goto label6;

        goto label7;

     label6:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label7:
        if $r1 == null goto label8;

        virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: void finishPrepare()>();

     label8:
        $r7 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        return $r7;
    }

kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel
<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: kotlinx.coroutines.channels.Receive receive>
<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: kotlinx.coroutines.channels.AbstractChannel this$0>
    public void <init>(kotlinx.coroutines.channels.AbstractChannel, kotlinx.coroutines.channels.Receive)
    {
        kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel $r0;
        kotlinx.coroutines.channels.AbstractChannel $r1;
        kotlinx.coroutines.channels.Receive $r2;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel;

        $r1 := @parameter0: kotlinx.coroutines.channels.AbstractChannel;

        $r2 := @parameter1: kotlinx.coroutines.channels.Receive;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "receive");

        $r0.<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: kotlinx.coroutines.channels.AbstractChannel this$0> = $r1;

        specialinvoke $r0.<kotlinx.coroutines.BeforeResumeCancelHandler: void <init>()>();

        $r0.<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: kotlinx.coroutines.channels.Receive receive> = $r2;

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        kotlin.Unit r3;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Throwable) $r1;

        virtualinvoke $r0.<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: void invoke(java.lang.Throwable)>($r2);

        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r3;
    }

    public void invoke(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel $r0;
        boolean $z0;
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.Receive $r2;
        kotlinx.coroutines.channels.AbstractChannel $r3;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = $r0.<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: kotlinx.coroutines.channels.Receive receive>;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.channels.Receive: boolean remove()>();

        if $z0 == 0 goto label1;

        $r3 = $r0.<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: kotlinx.coroutines.channels.AbstractChannel this$0>;

        virtualinvoke $r3.<kotlinx.coroutines.channels.AbstractChannel: void onReceiveDequeued()>();

     label1:
        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel $r0;
        kotlinx.coroutines.channels.Receive $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel;

        $r1 = $r0.<kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: kotlinx.coroutines.channels.Receive receive>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoveReceiveOnCancel[");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

