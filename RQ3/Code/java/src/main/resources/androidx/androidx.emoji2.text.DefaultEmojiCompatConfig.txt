androidx.emoji2.text.DefaultEmojiCompatConfig
    private void <init>()
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig r0;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static androidx.emoji2.text.FontRequestEmojiCompatConfig create(android.content.Context)
    {
        android.content.Context r0;
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory $r1;
        androidx.emoji2.text.EmojiCompat$Config $r2;
        androidx.emoji2.text.FontRequestEmojiCompatConfig $r3;

        r0 := @parameter0: android.content.Context;

        $r1 = new androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        specialinvoke $r1.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: void <init>(androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper)>(null);

        $r2 = virtualinvoke $r1.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.emoji2.text.EmojiCompat$Config create(android.content.Context)>(r0);

        $r3 = (androidx.emoji2.text.FontRequestEmojiCompatConfig) $r2;

        return $r3;
    }

androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory
<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: java.lang.String TAG>
<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: java.lang.String INTENT_LOAD_EMOJI_FONT>
<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: java.lang.String DEFAULT_EMOJI_QUERY>
<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper mHelper>
    public void <init>(androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory r0;
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper r1, $r3;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        r1 := @parameter0: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = staticinvoke <androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper getHelperForApi()>();

     label2:
        r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper mHelper> = $r3;

        return;
    }

    public androidx.emoji2.text.EmojiCompat$Config create(android.content.Context)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory r0;
        android.content.Context r1;
        androidx.core.provider.FontRequest $r2;
        androidx.emoji2.text.EmojiCompat$Config $r3;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.core.provider.FontRequest queryForDefaultFontRequest(android.content.Context)>(r1);

        $r3 = specialinvoke r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.emoji2.text.EmojiCompat$Config configOrNull(android.content.Context,androidx.core.provider.FontRequest)>(r1, $r2);

        return $r3;
    }

    private androidx.emoji2.text.EmojiCompat$Config configOrNull(android.content.Context, androidx.core.provider.FontRequest)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory r0;
        android.content.Context r1;
        androidx.core.provider.FontRequest r2;
        androidx.emoji2.text.FontRequestEmojiCompatConfig $r3;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.core.provider.FontRequest;

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = new androidx.emoji2.text.FontRequestEmojiCompatConfig;

        specialinvoke $r3.<androidx.emoji2.text.FontRequestEmojiCompatConfig: void <init>(android.content.Context,androidx.core.provider.FontRequest)>(r1, r2);

        return $r3;
    }

    androidx.core.provider.FontRequest queryForDefaultFontRequest(android.content.Context)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory r0;
        android.content.Context r1;
        android.content.pm.PackageManager r2;
        android.content.pm.ProviderInfo r3;
        java.lang.Throwable r4, $r7;
        androidx.core.provider.FontRequest $r6;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        r1 := @parameter0: android.content.Context;

        r2 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "Package manager required to locate emoji font provider");

        r3 = specialinvoke r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: android.content.pm.ProviderInfo queryDefaultInstalledContentProvider(android.content.pm.PackageManager)>(r2);

        if r3 != null goto label1;

        return null;

     label1:
        $r6 = specialinvoke r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.core.provider.FontRequest generateFontRequestFrom(android.content.pm.ProviderInfo,android.content.pm.PackageManager)>(r3, r2);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("emoji2.text.DefaultEmojiConfig", r4);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private android.content.pm.ProviderInfo queryDefaultInstalledContentProvider(android.content.pm.PackageManager)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory r0;
        android.content.pm.PackageManager r1;
        java.util.List r2;
        java.util.Iterator r3;
        android.content.pm.ResolveInfo r4;
        android.content.pm.ProviderInfo r5;
        android.content.Intent $r6;
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper $r7, $r9;
        boolean $z0, $z1;
        java.lang.Object $r8;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        r1 := @parameter0: android.content.pm.PackageManager;

        $r7 = r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper mHelper>;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("androidx.content.action.LOAD_EMOJI_FONT");

        r2 = virtualinvoke $r7.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper: java.util.List queryIntentContentProviders(android.content.pm.PackageManager,android.content.Intent,int)>(r1, $r6, 0);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.ResolveInfo) $r8;

        $r9 = r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper mHelper>;

        r5 = virtualinvoke $r9.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper: android.content.pm.ProviderInfo getProviderInfo(android.content.pm.ResolveInfo)>(r4);

        $z1 = specialinvoke r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: boolean hasFlagSystem(android.content.pm.ProviderInfo)>(r5);

        if $z1 == 0 goto label2;

        return r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    private boolean hasFlagSystem(android.content.pm.ProviderInfo)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory r0;
        android.content.pm.ProviderInfo r1;
        android.content.pm.ApplicationInfo $r2, $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        r1 := @parameter0: android.content.pm.ProviderInfo;

        if r1 == null goto label1;

        $r2 = r1.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r2 == null goto label1;

        $r3 = r1.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r3.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 1;

        if $i1 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private androidx.core.provider.FontRequest generateFontRequestFrom(android.content.pm.ProviderInfo, android.content.pm.PackageManager) throws android.content.pm.PackageManager$NameNotFoundException
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory r0;
        android.content.pm.ProviderInfo r1;
        android.content.pm.PackageManager r2;
        java.lang.String r3, r4;
        android.content.pm.Signature[] r5;
        java.util.List r6;
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper $r7;
        androidx.core.provider.FontRequest $r8;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        r1 := @parameter0: android.content.pm.ProviderInfo;

        r2 := @parameter1: android.content.pm.PackageManager;

        r3 = r1.<android.content.pm.ProviderInfo: java.lang.String authority>;

        r4 = r1.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r7 = r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper mHelper>;

        r5 = virtualinvoke $r7.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper: android.content.pm.Signature[] getSigningSignatures(android.content.pm.PackageManager,java.lang.String)>(r2, r4);

        r6 = specialinvoke r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory: java.util.List convertToByteArray(android.content.pm.Signature[])>(r5);

        $r8 = new androidx.core.provider.FontRequest;

        specialinvoke $r8.<androidx.core.provider.FontRequest: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.List)>(r3, r4, "emojicompat-emoji-font", r6);

        return $r8;
    }

    private java.util.List convertToByteArray(android.content.pm.Signature[])
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory r0;
        android.content.pm.Signature[] r1, r3;
        java.util.ArrayList r2, $r5;
        int i0, i1;
        android.content.pm.Signature r4;
        java.util.List $r6;
        byte[] $r7;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;

        r1 := @parameter0: android.content.pm.Signature[];

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        $r7 = virtualinvoke r4.<android.content.pm.Signature: byte[] toByteArray()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r2);

        return $r6;
    }

    private static androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper getHelperForApi()
    {
        int $i0, $i1;
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper $r0;
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19 $r1;
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API28 $r2;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 28 goto label1;

        $r2 = new androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API28;

        specialinvoke $r2.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API28: void <init>()>();

        return $r2;

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 19 goto label2;

        $r1 = new androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19;

        specialinvoke $r1.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19: void <init>()>();

        return $r1;

     label2:
        $r0 = new androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper;

        specialinvoke $r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper: void <init>()>();

        return $r0;
    }

androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper
    public void <init>()
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper r0;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.content.pm.Signature[] getSigningSignatures(android.content.pm.PackageManager, java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper r0;
        android.content.pm.PackageManager r1;
        java.lang.String r2;
        android.content.pm.PackageInfo r3;
        android.content.pm.Signature[] $r4;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper;

        r1 := @parameter0: android.content.pm.PackageManager;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r2, 64);

        $r4 = r3.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        return $r4;
    }

    public java.util.List queryIntentContentProviders(android.content.pm.PackageManager, android.content.Intent, int)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper r0;
        android.content.pm.PackageManager r1;
        android.content.Intent r2;
        int i0;
        java.util.List $r3;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper;

        r1 := @parameter0: android.content.pm.PackageManager;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;
    }

    public android.content.pm.ProviderInfo getProviderInfo(android.content.pm.ResolveInfo)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper r0;
        android.content.pm.ResolveInfo r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper;

        r1 := @parameter0: android.content.pm.ResolveInfo;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to get provider info prior to API 19");

        throw $r2;
    }

androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19
    public void <init>()
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19 r0;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19;

        specialinvoke r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper: void <init>()>();

        return;
    }

    public java.util.List queryIntentContentProviders(android.content.pm.PackageManager, android.content.Intent, int)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19 r0;
        android.content.pm.PackageManager r1;
        android.content.Intent r2;
        int i0;
        java.util.List $r3;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19;

        r1 := @parameter0: android.content.pm.PackageManager;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r1.<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>(r2, i0);

        return $r3;
    }

    public android.content.pm.ProviderInfo getProviderInfo(android.content.pm.ResolveInfo)
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19 r0;
        android.content.pm.ResolveInfo r1;
        android.content.pm.ProviderInfo $r2;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19;

        r1 := @parameter0: android.content.pm.ResolveInfo;

        $r2 = r1.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        return $r2;
    }

androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API28
    public void <init>()
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API28 r0;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API28;

        specialinvoke r0.<androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API19: void <init>()>();

        return;
    }

    public android.content.pm.Signature[] getSigningSignatures(android.content.pm.PackageManager, java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API28 r0;
        android.content.pm.PackageManager r1;
        java.lang.String r2;
        android.content.pm.PackageInfo r3;
        android.content.pm.Signature[] $r4;

        r0 := @this: androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper_API28;

        r1 := @parameter0: android.content.pm.PackageManager;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r2, 64);

        $r4 = r3.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        return $r4;
    }

