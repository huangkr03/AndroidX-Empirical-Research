androidx.compose.SlotWriter
<androidx.compose.SlotWriter: androidx.compose.SlotTable table>
<androidx.compose.SlotWriter: int current>
<androidx.compose.SlotWriter: int currentEnd>
<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>
<androidx.compose.SlotWriter: androidx.compose.IntStack nodeCountStack>
<androidx.compose.SlotWriter: androidx.compose.IntStack endStack>
<androidx.compose.SlotWriter: int nodeCount>
<androidx.compose.SlotWriter: int insertCount>
<androidx.compose.SlotWriter: boolean pendingClear>
<androidx.compose.SlotWriter: boolean closed>
    public void <init>(androidx.compose.SlotTable)
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.SlotTable r1, $r2;
        java.lang.Object[] $r3;
        int $i0;
        androidx.compose.IntStack $r4, $r5, $r6;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: androidx.compose.SlotTable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable table> = r1;

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r3 = virtualinvoke $r2.<androidx.compose.SlotTable: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i0 = lengthof $r3;

        r0.<androidx.compose.SlotWriter: int currentEnd> = $i0;

        $r4 = new androidx.compose.IntStack;

        specialinvoke $r4.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack> = $r4;

        $r5 = new androidx.compose.IntStack;

        specialinvoke $r5.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.SlotWriter: androidx.compose.IntStack nodeCountStack> = $r5;

        $r6 = new androidx.compose.IntStack;

        specialinvoke $r6.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.SlotWriter: androidx.compose.IntStack endStack> = $r6;

        return;
    }

    public final androidx.compose.SlotTable getTable()
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.SlotTable $r1;

        r0 := @this: androidx.compose.SlotWriter;

        $r1 = r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable table>;

        return $r1;
    }

    public final int getCurrent()
    {
        androidx.compose.SlotWriter r0;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = r0.<androidx.compose.SlotWriter: int current>;

        return $i0;
    }

    public final void setCurrent(int)
    {
        androidx.compose.SlotWriter r0;
        int i0;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        r0.<androidx.compose.SlotWriter: int current> = i0;

        return;
    }

    public final java.lang.Object[] getSlots$compose_runtime_release()
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.SlotTable $r1;
        java.lang.Object[] $r2;

        r0 := @this: androidx.compose.SlotWriter;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r2 = virtualinvoke $r1.<androidx.compose.SlotTable: java.lang.Object[] getSlots$compose_runtime_release()>();

        return $r2;
    }

    public final int effectiveIndex$compose_runtime_release(int)
    {
        androidx.compose.SlotWriter r0;
        int i0, $i1;
        androidx.compose.SlotTable $r1;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i1 = virtualinvoke $r1.<androidx.compose.SlotTable: int effectiveIndex$compose_runtime_release(int)>(i0);

        return $i1;
    }

    public final int getCurrentEnd$compose_runtime_release()
    {
        androidx.compose.SlotWriter r0;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = r0.<androidx.compose.SlotWriter: int currentEnd>;

        return $i0;
    }

    public final void setCurrentEnd$compose_runtime_release(int)
    {
        androidx.compose.SlotWriter r0;
        int i0;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        r0.<androidx.compose.SlotWriter: int currentEnd> = i0;

        return;
    }

    public final boolean isGroup()
    {
        androidx.compose.SlotWriter r0;
        int $i0, $i1, $i2;
        java.lang.Object $r1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        if $i0 >= $i1 goto label1;

        $i2 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>($i2);

        $z0 = $r1 instanceof androidx.compose.Group;

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final boolean isGroup(int)
    {
        androidx.compose.SlotWriter r0;
        int i0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>(i0);

        $z0 = $r1 instanceof androidx.compose.Group;

        return $z0;
    }

    public final androidx.compose.Group group$compose_runtime_release(int)
    {
        androidx.compose.SlotWriter r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        androidx.compose.Group $r3;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotWriter: int effectiveIndex$compose_runtime_release(int)>(i0);

        $r2 = $r1[$i1];

        $r3 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r2);

        return $r3;
    }

    public final androidx.compose.Group getParentGroup$compose_runtime_release()
    {
        androidx.compose.SlotWriter r0;
        int $i0;
        androidx.compose.Group $r1;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int getParentLocation()>();

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.Group group$compose_runtime_release(int)>($i0);

        return $r1;
    }

    public final boolean isNode()
    {
        androidx.compose.SlotWriter r0;
        java.lang.Boolean r1, $r5;
        androidx.compose.Group r2, $r4;
        java.lang.Object r3;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        if $i0 >= $i1 goto label7;

        $i2 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        r3 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>($i2);

        $z0 = r3 instanceof androidx.compose.Group;

        if $z0 == 0 goto label1;

        $r4 = (androidx.compose.Group) r3;

        goto label2;

     label1:
        $r4 = null;

     label2:
        r2 = $r4;

        if r2 != null goto label3;

        $r5 = (java.lang.Boolean) null;

        goto label4;

     label3:
        $z1 = virtualinvoke r2.<androidx.compose.Group: boolean isNode()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

     label4:
        r1 = $r5;

        if r1 != null goto label5;

        $z2 = 0;

        goto label6;

     label5:
        $z2 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

     label6:
        if $z2 == 0 goto label7;

        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        return $z3;
    }

    public final int getGroupSize()
    {
        androidx.compose.SlotWriter r0;
        int $i0, $i1;
        java.lang.Object $r1;
        androidx.compose.Group $r2;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>($i0);

        $r2 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r1);

        $i1 = virtualinvoke $r2.<androidx.compose.Group: int getSlots()>();

        return $i1;
    }

    public final int groupSize(int)
    {
        androidx.compose.SlotWriter r0;
        int i0, $i1;
        java.lang.Object $r1;
        androidx.compose.Group $r2;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>(i0);

        $r2 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r1);

        $i1 = virtualinvoke $r2.<androidx.compose.Group: int getSlots()>();

        return $i1;
    }

    public final int getNodeIndex()
    {
        androidx.compose.SlotWriter r0;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = r0.<androidx.compose.SlotWriter: int nodeCount>;

        return $i0;
    }

    public final int getParentNodes()
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.IntStack $r1, $r3;
        boolean $z0;
        java.lang.Object[] $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        androidx.compose.Group $r5;

        r0 := @this: androidx.compose.SlotWriter;

        $r1 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        $z0 = virtualinvoke $r1.<androidx.compose.IntStack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r3 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        $i0 = virtualinvoke $r3.<androidx.compose.IntStack: int peek()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotWriter: int effectiveIndex$compose_runtime_release(int)>($i0);

        $r4 = $r2[$i1];

        $r5 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r4);

        $i2 = virtualinvoke $r5.<androidx.compose.Group: int getNodes()>();

     label2:
        return $i2;
    }

    public final int getParentLocation()
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.IntStack $r1;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        $r1 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        $i0 = virtualinvoke $r1.<androidx.compose.IntStack: int peekOr(int)>(-1);

        return $i0;
    }

    public final boolean getClosed()
    {
        androidx.compose.SlotWriter r0;
        boolean $z0;

        r0 := @this: androidx.compose.SlotWriter;

        $z0 = r0.<androidx.compose.SlotWriter: boolean closed>;

        return $z0;
    }

    public final int parentIndex(androidx.compose.Anchor)
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.Anchor r1;
        androidx.compose.Group r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, i8, i9, i10, i11;
        java.lang.Object $r4, $r6;
        androidx.compose.SlotTable $r5;
        boolean z1, z2, z3;
        java.lang.Integer $r7;
        java.lang.String r8, $r10;
        java.lang.IllegalStateException $r9;
        java.lang.Throwable $r11;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: androidx.compose.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $r4 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(androidx.compose.Anchor)>(r1);

        r2 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r4);

        $r5 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        i0 = virtualinvoke $r5.<androidx.compose.SlotTable: int anchorLocation$compose_runtime_release(androidx.compose.Anchor)>(r1);

        r3 = virtualinvoke r2.<androidx.compose.Group: androidx.compose.Group getParent()>();

        if r3 == null goto label5;

        $i2 = virtualinvoke r3.<androidx.compose.Group: int getSlots()>();

        $i3 = virtualinvoke r2.<androidx.compose.Group: int getSlots()>();

        $i4 = $i2 - $i3;

        $i5 = i0 - $i4;

        i6 = $i5 - 1;

        z1 = 0;

        z2 = 0;

        i1 = i6;

        if i1 >= 0 goto label1;

        $i7 = 0;

        goto label2;

     label1:
        $i7 = i1;

     label2:
        i8 = $i7;

        i9 = i8;

        i10 = i0 + -1;

        if i0 == -2147483648 goto label5;

        if i9 > i10 goto label5;

     label3:
        i11 = i9;

        i9 = i9 + 1;

        $r6 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>(i11);

        if $r6 != r3 goto label4;

        return i11;

     label4:
        if i9 <= i10 goto label3;

     label5:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r8 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Could not find parent of group at ", $r7);

        z3 = 0;

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        $r11 = (java.lang.Throwable) $r9;

        throw $r11;
    }

    public final java.lang.Object get(androidx.compose.Anchor)
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.Anchor r1;
        int $i0, $i1;
        androidx.compose.SlotTable$Companion $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: androidx.compose.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $i0 = virtualinvoke r1.<androidx.compose.Anchor: int getLoc$compose_runtime_release()>();

        if $i0 < 0 goto label1;

        $r3 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i1 = virtualinvoke r1.<androidx.compose.Anchor: int getLoc$compose_runtime_release()>();

        $r4 = $r3[$i1];

        goto label2;

     label1:
        $r2 = <androidx.compose.SlotTable: androidx.compose.SlotTable$Companion Companion>;

        $r4 = virtualinvoke $r2.<androidx.compose.SlotTable$Companion: java.lang.Object getEMPTY()>();

     label2:
        return $r4;
    }

    public final java.lang.Object get(int)
    {
        androidx.compose.SlotWriter r0;
        int i0, i1, i2, $i3;
        boolean z0, z1;
        java.lang.Object[] $r1, $r3;
        androidx.compose.SlotTable$Companion $r2;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<androidx.compose.SlotWriter: int effectiveIndex$compose_runtime_release(int)>(i0);

        z0 = 0;

        z1 = 0;

        i2 = i1;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i3 = lengthof $r1;

        if i2 >= $i3 goto label1;

        $r3 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r4 = $r3[i2];

        goto label2;

     label1:
        $r2 = <androidx.compose.SlotTable: androidx.compose.SlotTable$Companion Companion>;

        $r4 = virtualinvoke $r2.<androidx.compose.SlotTable$Companion: java.lang.Object getEMPTY()>();

     label2:
        return $r4;
    }

    public final void close()
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.SlotTable $r1, $r2;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        r0.<androidx.compose.SlotWriter: boolean closed> = 1;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r1.<androidx.compose.SlotTable: void close$compose_runtime_release(androidx.compose.SlotWriter)>(r0);

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i0 = virtualinvoke $r2.<androidx.compose.SlotTable: int getSize()>();

        specialinvoke r0.<androidx.compose.SlotWriter: void moveGapTo(int)>($i0);

        return;
    }

    public final java.lang.Object update(java.lang.Object)
    {
        androidx.compose.SlotWriter r0;
        java.lang.Object r1, r2;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object skip()>();

        virtualinvoke r0.<androidx.compose.SlotWriter: void set(java.lang.Object)>(r1);

        return r2;
    }

    public final void updateData(java.lang.Object)
    {
        androidx.compose.SlotWriter r0;
        java.lang.Object r1, r6;
        androidx.compose.DataGroup r2, $r7;
        boolean z0, $z1;
        int $i0;
        java.lang.IllegalStateException $r3;
        java.lang.String $r4, r8;
        java.lang.Throwable $r5;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        r6 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>($i0);

        $z1 = r6 instanceof androidx.compose.DataGroup;

        if $z1 == 0 goto label1;

        $r7 = (androidx.compose.DataGroup) r6;

        goto label2;

     label1:
        $r7 = null;

     label2:
        r2 = $r7;

        if r2 != null goto label3;

        r8 = "Expected a data group";

        z0 = 0;

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        $r5 = (java.lang.Throwable) $r3;

        throw $r5;

     label3:
        virtualinvoke r2.<androidx.compose.DataGroup: void setData(java.lang.Object)>(r1);

        return;
    }

    public final void set(java.lang.Object)
    {
        androidx.compose.SlotWriter r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i1 = $i0 - 1;

        $i2 = virtualinvoke r0.<androidx.compose.SlotWriter: int effectiveIndex$compose_runtime_release(int)>($i1);

        $r2[$i2] = r1;

        return;
    }

    public final java.lang.Object skip()
    {
        androidx.compose.SlotWriter r0, r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object[] $r2;
        androidx.compose.SlotTable $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.SlotWriter;

        $i2 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i2 <= 0 goto label1;

        specialinvoke r0.<androidx.compose.SlotWriter: void insert(int)>(1);

     label1:
        r1 = r0;

        i1 = virtualinvoke r1.<androidx.compose.SlotWriter: int getCurrent()>();

        $i3 = i1 + 1;

        virtualinvoke r1.<androidx.compose.SlotWriter: void setCurrent(int)>($i3);

        i0 = i1;

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r3 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i4 = virtualinvoke $r3.<androidx.compose.SlotTable: int effectiveIndex$compose_runtime_release(int)>(i0);

        $r4 = $r2[$i4];

        return $r4;
    }

    public final void skip(int)
    {
        androidx.compose.SlotWriter r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z0, z1, $z3, z4;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, r8;
        java.lang.Throwable $r7;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        $i2 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i2 <= 0 goto label1;

        specialinvoke r0.<androidx.compose.SlotWriter: void insert(int)>(i0);

        goto label5;

     label1:
        $i3 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        i1 = $i3 + i0;

        $i4 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        if i1 > $i4 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot skip outside the current group (");

        $i5 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        $r7 = (java.lang.Throwable) $r5;

        throw $r7;

     label4:
        virtualinvoke r0.<androidx.compose.SlotWriter: void setCurrent(int)>(i1);

     label5:
        return;
    }

    public final void skipToGroupEnd()
    {
        androidx.compose.SlotWriter r0;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        virtualinvoke r0.<androidx.compose.SlotWriter: void setCurrent(int)>($i0);

        return;
    }

    public final void ensureStarted(int)
    {
        androidx.compose.SlotWriter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10;
        boolean z0, $z2, $z3, $z4, z5, z6, z7, z9, z10, z11, z13;
        kotlin.ranges.IntRange $r1;
        androidx.compose.IntStack $r2;
        java.lang.Object $r3, $r4, $r5, $r10;
        java.lang.Integer $r6;
        java.lang.IllegalArgumentException $r7, $r15, $r18;
        java.lang.String $r8, $r16, $r19, r21, r22, r26;
        java.lang.Throwable $r9, $r17, $r20;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        androidx.compose.Group $r23, r24, r25;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i1 > 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z5 = $z4;

        z6 = 0;

        z7 = 0;

        if z5 != 0 goto label3;

        r21 = "Cannot call ensureStarted() while inserting";

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        $r20 = (java.lang.Throwable) $r18;

        throw $r20;

     label3:
        $i2 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $r1 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i2);

        z9 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean contains(int)>(i0);

        z10 = 0;

        z11 = 0;

        if z9 != 0 goto label4;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of range 0..");

        $i7 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i8 = $i7 - 1;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        r22 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke r22.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        $r17 = (java.lang.Throwable) $r15;

        throw $r17;

     label4:
        i9 = virtualinvoke r0.<androidx.compose.SlotWriter: int getParentLocation()>();

        if i9 == i0 goto label9;

        $r2 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        $z2 = virtualinvoke $r2.<androidx.compose.IntStack: boolean isEmpty()>();

        if $z2 == 0 goto label5;

        if i0 <= 0 goto label5;

        virtualinvoke r0.<androidx.compose.SlotWriter: void ensureStarted(int)>(0);

     label5:
        if i9 < 0 goto label6;

        $i6 = virtualinvoke r0.<androidx.compose.SlotWriter: int getParentLocation()>();

        $r10 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>($i6);

        $r23 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r10);

        goto label7;

     label6:
        $r23 = (androidx.compose.Group) null;

     label7:
        r24 = $r23;

        $r3 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>(i0);

        r25 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r3);

        z0 = 0;

        z13 = 0;

        $z3 = staticinvoke <androidx.compose.SlotTableKt: boolean access$isDecendentOf(androidx.compose.Group,androidx.compose.Group)>(r25, r24);

        if $z3 != 0 goto label8;

        $i5 = virtualinvoke r0.<androidx.compose.SlotWriter: int getParentLocation()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        r26 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Started group must be a subgroup of the group at ", $r6);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke r26.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        $r9 = (java.lang.Throwable) $r7;

        throw $r9;

     label8:
        $i10 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        virtualinvoke r0.<androidx.compose.SlotWriter: void setCurrent(int)>(i0);

        $i3 = virtualinvoke r25.<androidx.compose.Group: int getKey()>();

        $r4 = virtualinvoke r25.<androidx.compose.Group: java.lang.Object getDataKey()>();

        $i4 = virtualinvoke r25.<androidx.compose.Group: int getKind()>();

        $r5 = virtualinvoke r25.<androidx.compose.Group: java.lang.Object getData()>();

        specialinvoke r0.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object,int,java.lang.Object)>($i3, $r4, $i4, $r5);

        virtualinvoke r0.<androidx.compose.SlotWriter: void setCurrent(int)>($i10);

     label9:
        return;
    }

    public final void ensureStarted(androidx.compose.Anchor)
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.Anchor r1;
        androidx.compose.SlotTable $r2;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: androidx.compose.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i0 = virtualinvoke r1.<androidx.compose.Anchor: int location(androidx.compose.SlotTable)>($r2);

        virtualinvoke r0.<androidx.compose.SlotWriter: void ensureStarted(int)>($i0);

        return;
    }

    public final void beginInsert()
    {
        androidx.compose.SlotWriter r0, r1;
        int i0, $i1;

        r0 := @this: androidx.compose.SlotWriter;

        r1 = r0;

        i0 = r1.<androidx.compose.SlotWriter: int insertCount>;

        $i1 = i0 + 1;

        r1.<androidx.compose.SlotWriter: int insertCount> = $i1;

        return;
    }

    public final void endInsert()
    {
        androidx.compose.SlotWriter r0, r5;
        int $i0, $i1, i2;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, r4;
        java.lang.Throwable $r3;
        boolean $z1, z2, z3, z4;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z2 = $z1;

        z3 = 0;

        z4 = 0;

        if z2 != 0 goto label3;

        r4 = "Unbalenced begin/end insert";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r3 = (java.lang.Throwable) $r1;

        throw $r3;

     label3:
        r5 = r0;

        i2 = r5.<androidx.compose.SlotWriter: int insertCount>;

        $i1 = i2 + -1;

        r5.<androidx.compose.SlotWriter: int insertCount> = $i1;

        return;
    }

    public final void startGroup()
    {
        androidx.compose.SlotWriter r0;
        boolean z0, z1, $z3, z4;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label3;

        r4 = "Key must be supplied when inserting";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r3 = (java.lang.Throwable) $r1;

        throw $r3;

     label3:
        specialinvoke r0.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object,int,java.lang.Object)>(0, null, 0, null);

        return;
    }

    public final void startGroup(int)
    {
        androidx.compose.SlotWriter r0;
        int i0;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object,int,java.lang.Object)>(i0, null, 0, null);

        return;
    }

    public final void startGroup(int, java.lang.Object)
    {
        androidx.compose.SlotWriter r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object,int,java.lang.Object)>(i0, r1, 0, null);

        return;
    }

    private final void startGroup(int, java.lang.Object, int, java.lang.Object)
    {
        androidx.compose.SlotWriter r0, $r36, r37, r39, r41, r47, r52;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.Object r1, r2, $r7, $r13, $r23;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9, $z11, z12, z13, z14, $z16, z17, z18, z19, z21, z22;
        androidx.compose.Group r3, r4, $r33, $r35, r43, r48;
        androidx.compose.IntStack $r5, $r6, $r8, $r9, $r10;
        java.lang.Object[] $r11;
        androidx.compose.SlotTable $r12;
        java.lang.IllegalStateException $r14, $r17;
        java.lang.String $r15, $r18, $r21, $r26, $r30, r38, r40, r42, r46, r51;
        java.lang.Throwable $r16, $r19, $r22, $r27, $r31;
        java.lang.IllegalArgumentException $r20, $r25, $r29;
        androidx.compose.DataGroup $r44, r45;
        androidx.compose.NodeGroup $r49, r50;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        $i2 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i2 <= 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z0 = $z5;

        $r5 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        $z1 = virtualinvoke $r5.<androidx.compose.IntStack: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        $r35 = (androidx.compose.Group) null;

        goto label04;

     label03:
        $r6 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        $i3 = virtualinvoke $r6.<androidx.compose.IntStack: int peek()>();

        $r7 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>($i3);

        $r35 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r7);

     label04:
        r3 = $r35;

        $r8 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        $i4 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        virtualinvoke $r8.<androidx.compose.IntStack: void push(int)>($i4);

        $r9 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack nodeCountStack>;

        $i5 = r0.<androidx.compose.SlotWriter: int nodeCount>;

        virtualinvoke $r9.<androidx.compose.IntStack: void push(int)>($i5);

        $r10 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack endStack>;

        $r11 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i6 = lengthof $r11;

        $r12 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i7 = virtualinvoke $r12.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i8 = $i6 - $i7;

        $i9 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        $i10 = $i8 - $i9;

        virtualinvoke $r10.<androidx.compose.IntStack: void push(int)>($i10);

        $r36 = r0;

        if z0 == 0 goto label05;

        $r33 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group Group(int,int,java.lang.Object,androidx.compose.Group,java.lang.Object)>(i1, i0, r1, r3, r2);

        virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object update(java.lang.Object)>($r33);

        r0.<androidx.compose.SlotWriter: int nodeCount> = 0;

        $i13 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        goto label25;

     label05:
        $r13 = specialinvoke r0.<androidx.compose.SlotWriter: java.lang.Object advance()>();

        r4 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r13);

        $i11 = virtualinvoke r4.<androidx.compose.Group: int getKind()>();

        if $i11 != i1 goto label06;

        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        z7 = $z6;

        r37 = r0;

        z8 = 0;

        z9 = 0;

        if z7 != 0 goto label08;

        r38 = "Group kind changed";

        $r29 = new java.lang.IllegalArgumentException;

        $r30 = virtualinvoke r38.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        $r31 = (java.lang.Throwable) $r29;

        throw $r31;

     label08:
        if i0 == 0 goto label09;

        $i12 = virtualinvoke r4.<androidx.compose.Group: int getKey()>();

        if $i12 != i0 goto label10;

     label09:
        $z11 = 1;

        goto label11;

     label10:
        $z11 = 0;

     label11:
        z12 = $z11;

        r39 = r37;

        z13 = 0;

        z14 = 0;

        if z12 != 0 goto label12;

        r40 = "Group key changed";

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = virtualinvoke r40.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        $r27 = (java.lang.Throwable) $r25;

        throw $r27;

     label12:
        if i0 == 0 goto label13;

        $r23 = virtualinvoke r4.<androidx.compose.Group: java.lang.Object getDataKey()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r23, r1);

        if $z4 == 0 goto label14;

     label13:
        $z16 = 1;

        goto label15;

     label14:
        $z16 = 0;

     label15:
        z17 = $z16;

        r41 = r39;

        z18 = 0;

        z19 = 0;

        if z17 != 0 goto label16;

        r42 = "Group dataKey changed";

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = virtualinvoke r42.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        $r22 = (java.lang.Throwable) $r20;

        throw $r22;

     label16:
        $r36 = r41;

        if i1 != 2 goto label20;

        r43 = r4;

        $z3 = r43 instanceof androidx.compose.DataGroup;

        if $z3 == 0 goto label17;

        $r44 = (androidx.compose.DataGroup) r43;

        goto label18;

     label17:
        $r44 = null;

     label18:
        r45 = $r44;

        if r45 != null goto label19;

        r46 = "Expected a data group";

        r47 = r41;

        z21 = 0;

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke r46.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        $r19 = (java.lang.Throwable) $r17;

        throw $r19;

     label19:
        virtualinvoke r45.<androidx.compose.DataGroup: void setData(java.lang.Object)>(r2);

        goto label24;

     label20:
        if i1 != 1 goto label24;

        if r2 == null goto label24;

        r48 = r4;

        $z2 = r48 instanceof androidx.compose.NodeGroup;

        if $z2 == 0 goto label21;

        $r49 = (androidx.compose.NodeGroup) r48;

        goto label22;

     label21:
        $r49 = null;

     label22:
        r50 = $r49;

        if r50 != null goto label23;

        r51 = "Expected a node group";

        r52 = r41;

        z22 = 0;

        $r14 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke r51.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        $r16 = (java.lang.Throwable) $r14;

        throw $r16;

     label23:
        virtualinvoke r50.<androidx.compose.NodeGroup: void setNode(java.lang.Object)>(r2);

     label24:
        $i14 = virtualinvoke r4.<androidx.compose.Group: int getNodes()>();

        r0.<androidx.compose.SlotWriter: int nodeCount> = $i14;

        $i15 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i16 = virtualinvoke r4.<androidx.compose.Group: int getSlots()>();

        $i13 = $i15 + $i16;

     label25:
        virtualinvoke $r36.<androidx.compose.SlotWriter: void setCurrentEnd$compose_runtime_release(int)>($i13);

        return;
    }

    public final int skipGroup()
    {
        androidx.compose.SlotWriter r0;
        boolean z0, z1, $z3, z4;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label3;

        r4 = "Cannot skip while inserting";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r3 = (java.lang.Throwable) $r1;

        throw $r3;

     label3:
        $i1 = specialinvoke r0.<androidx.compose.SlotWriter: int advanceToNextGroup()>();

        return $i1;
    }

    public final int endGroup()
    {
        androidx.compose.SlotWriter r0, r24, r29;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i19, $i20, $i21, $i22, $i23, i24, $i25, i26, $i27, $i28;
        androidx.compose.Group r1, $r13, r23, r26, r27, r28;
        androidx.compose.IntStack $r2, $r3, $r7, $r8, $r9, $r10, $r11;
        java.lang.Object $r4, $r12;
        java.lang.Object[] $r5;
        androidx.compose.SlotTable $r6, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10, $z12, z13, $z14, z15, z16;
        java.lang.IllegalArgumentException $r15, $r18;
        java.lang.String $r16, $r19, r21, $r22;
        java.lang.Throwable $r17, $r20;

        r0 := @this: androidx.compose.SlotWriter;

        $r2 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        z8 = virtualinvoke $r2.<androidx.compose.IntStack: boolean isNotEmpty()>();

        z9 = 0;

        z10 = 0;

        if z8 != 0 goto label01;

        r21 = "Invalid state. Unbalanced calls to startGroup() and endGroup()";

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke r21.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        $r20 = (java.lang.Throwable) $r18;

        throw $r20;

     label01:
        $i3 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i3 <= 0 goto label02;

        $z12 = 1;

        goto label03;

     label02:
        $z12 = 0;

     label03:
        z13 = $z12;

        if z13 != 0 goto label04;

        $i16 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i17 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        if $i16 != $i17 goto label05;

     label04:
        $z14 = 1;

        goto label06;

     label05:
        $z14 = 0;

     label06:
        z15 = $z14;

        z16 = 0;

        if z15 != 0 goto label07;

        $r22 = "Expected to be at the end of a group";

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r22.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        $r17 = (java.lang.Throwable) $r15;

        throw $r17;

     label07:
        $r3 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        i18 = virtualinvoke $r3.<androidx.compose.IntStack: int pop()>();

        $r4 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>(i18);

        r23 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r4);

        $i19 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i20 = virtualinvoke r23.<androidx.compose.Group: int getSlots()>();

        i0 = virtualinvoke r23.<androidx.compose.Group: int getNodes()>();

        $i4 = $i19 - i18;

        i1 = $i4 - 1;

        i2 = r0.<androidx.compose.SlotWriter: int nodeCount>;

        virtualinvoke r23.<androidx.compose.Group: void setSlots(int)>(i1);

        virtualinvoke r23.<androidx.compose.Group: void setNodes(int)>(i2);

        $r5 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i5 = lengthof $r5;

        $r6 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i6 = virtualinvoke $r6.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i7 = $i5 - $i6;

        $r7 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack endStack>;

        $i8 = virtualinvoke $r7.<androidx.compose.IntStack: int pop()>();

        $i9 = $i7 - $i8;

        virtualinvoke r0.<androidx.compose.SlotWriter: void setCurrentEnd$compose_runtime_release(int)>($i9);

        $r8 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack nodeCountStack>;

        $z0 = virtualinvoke $r8.<androidx.compose.IntStack: boolean isEmpty()>();

        if $z0 == 0 goto label08;

        $r14 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r14.<androidx.compose.SlotTable: void clearGap$compose_runtime_release()>();

        goto label21;

     label08:
        $r9 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        $z1 = virtualinvoke $r9.<androidx.compose.IntStack: boolean isNotEmpty()>();

        if $z1 == 0 goto label21;

        $r10 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack nodeCountStack>;

        $i10 = virtualinvoke $r10.<androidx.compose.IntStack: int pop()>();

        r0.<androidx.compose.SlotWriter: int nodeCount> = $i10;

        $r11 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        $i11 = virtualinvoke $r11.<androidx.compose.IntStack: int peek()>();

        $r12 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object get(int)>($i11);

        r1 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r12);

        $r13 = virtualinvoke r23.<androidx.compose.Group: androidx.compose.Group getParent()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r13, r1);

        if $z2 == 0 goto label13;

        r24 = r0;

        $i21 = r24.<androidx.compose.SlotWriter: int nodeCount>;

        if z13 == 0 goto label10;

        $z7 = virtualinvoke r23.<androidx.compose.Group: boolean isNode()>();

        if $z7 == 0 goto label09;

        $i22 = 1;

        goto label12;

     label09:
        $i22 = i2;

        goto label12;

     label10:
        $z6 = virtualinvoke r23.<androidx.compose.Group: boolean isNode()>();

        if $z6 == 0 goto label11;

        $i22 = 0;

        goto label12;

     label11:
        $i22 = i2 - i0;

     label12:
        $i23 = $i21 + $i22;

        r24.<androidx.compose.SlotWriter: int nodeCount> = $i23;

        goto label21;

     label13:
        i24 = i1 - $i20;

        $z3 = virtualinvoke r23.<androidx.compose.Group: boolean isNode()>();

        if $z3 == 0 goto label14;

        $i25 = 0;

        goto label15;

     label14:
        $i25 = i2 - i0;

     label15:
        i26 = $i25;

        if i24 != 0 goto label16;

        if i26 == 0 goto label20;

     label16:
        r26 = virtualinvoke r23.<androidx.compose.Group: androidx.compose.Group getParent()>();

     label17:
        if r26 == null goto label20;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r26, r1);

        if $z4 != 0 goto label20;

        if i26 != 0 goto label18;

        if i24 == 0 goto label20;

     label18:
        r27 = r26;

        $i12 = virtualinvoke r27.<androidx.compose.Group: int getSlots()>();

        $i13 = $i12 + i24;

        virtualinvoke r27.<androidx.compose.Group: void setSlots(int)>($i13);

        r28 = r26;

        $i14 = virtualinvoke r28.<androidx.compose.Group: int getNodes()>();

        $i15 = $i14 + i26;

        virtualinvoke r28.<androidx.compose.Group: void setNodes(int)>($i15);

        $z5 = virtualinvoke r26.<androidx.compose.Group: boolean isNode()>();

        if $z5 == 0 goto label19;

        i26 = 0;

     label19:
        r26 = virtualinvoke r26.<androidx.compose.Group: androidx.compose.Group getParent()>();

        goto label17;

     label20:
        r29 = r0;

        $i27 = r29.<androidx.compose.SlotWriter: int nodeCount>;

        $i28 = $i27 + i26;

        r29.<androidx.compose.SlotWriter: int nodeCount> = $i28;

     label21:
        return i2;
    }

    public final void moveGroup(int)
    {
        androidx.compose.SlotWriter r0;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i14, i15, i16, $i17;
        boolean z0, z1, z2, $z4, z5, z6, z7, $z9, z10;
        java.lang.Object[] $r1, $r2;
        androidx.compose.SlotTable $r4;
        java.lang.IllegalArgumentException $r5, $r8;
        java.lang.String $r6, $r9, r11, r12;
        java.lang.Throwable $r7, $r10;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        $i3 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z5 = $z4;

        z6 = 0;

        z7 = 0;

        if z5 != 0 goto label3;

        r11 = "Cannot move a group while inserting";

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        $r10 = (java.lang.Throwable) $r8;

        throw $r10;

     label3:
        i14 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        i15 = r0.<androidx.compose.SlotWriter: int nodeCount>;

        i16 = i0;

     label4:
        if i16 <= 0 goto label5;

        specialinvoke r0.<androidx.compose.SlotWriter: int advanceToNextGroup()>();

        i16 = i16 + -1;

        goto label4;

     label5:
        $i17 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        specialinvoke r0.<androidx.compose.SlotWriter: int advanceToNextGroup()>();

        $i5 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        i1 = $i5 - $i17;

        virtualinvoke r0.<androidx.compose.SlotWriter: void setCurrent(int)>(i14);

        specialinvoke r0.<androidx.compose.SlotWriter: void insert(int)>(i1);

        i2 = $i17 + i1;

        virtualinvoke r0.<androidx.compose.SlotWriter: void setCurrent(int)>(i14);

        r0.<androidx.compose.SlotWriter: int nodeCount> = i15;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i6 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i7 = virtualinvoke r0.<androidx.compose.SlotWriter: int effectiveIndex$compose_runtime_release(int)>($i6);

        $i8 = virtualinvoke r0.<androidx.compose.SlotWriter: int effectiveIndex$compose_runtime_release(int)>(i2);

        $i9 = virtualinvoke r0.<androidx.compose.SlotWriter: int effectiveIndex$compose_runtime_release(int)>(i2);

        $i10 = $i9 + i1;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r1, $r2, $i7, $i8, $i10);

        $r4 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i11 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        virtualinvoke $r4.<androidx.compose.SlotTable: void moveAnchors$compose_runtime_release(int,int,int)>(i2, $i11, i1);

        $i12 = $i17 + i1;

        z0 = virtualinvoke r0.<androidx.compose.SlotWriter: boolean remove$compose_runtime_release(int,int)>($i12, i1);

        if z0 != 0 goto label6;

        $z9 = 1;

        goto label7;

     label6:
        $z9 = 0;

     label7:
        z1 = $z9;

        z2 = 0;

        z10 = 0;

        if z1 != 0 goto label8;

        r12 = "Unexpectedly removed anchors";

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        $r7 = (java.lang.Throwable) $r5;

        throw $r7;

     label8:
        return;
    }

    public final boolean removeGroup()
    {
        androidx.compose.SlotWriter r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, r4;
        java.lang.Throwable $r3;
        boolean $z0, z1, z2, z3, z5;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        z1 = $z0;

        z2 = 0;

        z3 = 0;

        if z1 != 0 goto label3;

        r4 = "Cannot remove group while inserting";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r3 = (java.lang.Throwable) $r1;

        throw $r3;

     label3:
        i5 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        i6 = specialinvoke r0.<androidx.compose.SlotWriter: int advanceToNextGroup()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i2 = $i1 - i5;

        z5 = virtualinvoke r0.<androidx.compose.SlotWriter: boolean remove$compose_runtime_release(int,int)>(i5, $i2);

        virtualinvoke r0.<androidx.compose.SlotWriter: void setCurrent(int)>(i5);

        $i3 = r0.<androidx.compose.SlotWriter: int nodeCount>;

        $i4 = $i3 - i6;

        r0.<androidx.compose.SlotWriter: int nodeCount> = $i4;

        return z5;
    }

    public final java.util.Iterator groupSlots()
    {
        androidx.compose.SlotWriter r0;
        int i0, i1, i2;
        androidx.compose.SlotWriter$groupSlots$1 $r1;
        java.util.Iterator $r2;

        r0 := @this: androidx.compose.SlotWriter;

        i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        i1 = r0.<androidx.compose.SlotWriter: int nodeCount>;

        specialinvoke r0.<androidx.compose.SlotWriter: int advanceToNextGroup()>();

        i2 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        virtualinvoke r0.<androidx.compose.SlotWriter: void setCurrent(int)>(i0);

        r0.<androidx.compose.SlotWriter: int nodeCount> = i1;

        $r1 = new androidx.compose.SlotWriter$groupSlots$1;

        specialinvoke $r1.<androidx.compose.SlotWriter$groupSlots$1: void <init>(int,int,androidx.compose.SlotWriter)>(i0, i2, r0);

        $r2 = (java.util.Iterator) $r1;

        return $r2;
    }

    public final void startNode()
    {
        androidx.compose.SlotWriter r0;
        boolean z0, z1, $z3, z4;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label3;

        r4 = "Key must be supplied when inserting";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r3 = (java.lang.Throwable) $r1;

        throw $r3;

     label3:
        specialinvoke r0.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object,int,java.lang.Object)>(0, null, 1, null);

        return;
    }

    public final void startNode(java.lang.Object)
    {
        androidx.compose.SlotWriter r0;
        java.lang.Object r1;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object,int,java.lang.Object)>(125, r1, 1, null);

        return;
    }

    public final void startNode(java.lang.Object, java.lang.Object)
    {
        androidx.compose.SlotWriter r0;
        java.lang.Object r1, r2;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object,int,java.lang.Object)>(125, r1, 1, r2);

        return;
    }

    public final int endNode()
    {
        androidx.compose.SlotWriter r0;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int endGroup()>();

        return $i0;
    }

    public final void startData(int, java.lang.Object, java.lang.Object)
    {
        androidx.compose.SlotWriter r0;
        int i0;
        java.lang.Object r1, r2;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<androidx.compose.SlotWriter: void startGroup(int,java.lang.Object,int,java.lang.Object)>(i0, r1, 2, r2);

        return;
    }

    public final int endData()
    {
        androidx.compose.SlotWriter r0;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int endGroup()>();

        return $i0;
    }

    public final int skipNode()
    {
        androidx.compose.SlotWriter r0;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter: int skipGroup()>();

        return $i0;
    }

    public final java.util.List moveFrom(androidx.compose.SlotTable, int)
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.SlotTable r1, $r2, $r6;
        int i0, $i1, $i2, $i3;
        boolean z0, z1, z2, $z3, z4, z5, z6;
        androidx.compose.SlotWriter$moveFrom$1 $r3;
        kotlin.jvm.functions.Function1 $r4, $r14;
        java.util.ArrayList $r7;
        java.util.List $r8, $r16;
        java.lang.IllegalArgumentException $r9;
        java.lang.String $r10, r12;
        java.lang.Throwable $r11;
        androidx.compose.SlotWriter$moveFrom$2 $r13;
        java.lang.Object $r15;

        r0 := @this: androidx.compose.SlotWriter;

        r1 := @parameter0: androidx.compose.SlotTable;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        $i1 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i1 <= 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        z5 = 0;

        z6 = 0;

        if z0 != 0 goto label3;

        z2 = 0;

        r12 = "Failed requirement.";

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        $r11 = (java.lang.Throwable) $r9;

        throw $r11;

     label3:
        if i0 != 0 goto label4;

        $i2 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        if $i2 != 0 goto label4;

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i3 = virtualinvoke $r2.<androidx.compose.SlotTable: int getSize()>();

        if $i3 != 0 goto label4;

        $r3 = new androidx.compose.SlotWriter$moveFrom$1;

        specialinvoke $r3.<androidx.compose.SlotWriter$moveFrom$1: void <init>(androidx.compose.SlotTable,androidx.compose.SlotWriter)>(r1, r0);

        $r4 = (kotlin.jvm.functions.Function1) $r3;

        virtualinvoke r1.<androidx.compose.SlotTable: java.lang.Object write(kotlin.jvm.functions.Function1)>($r4);

        $r6 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r7 = virtualinvoke $r6.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        $r8 = (java.util.List) $r7;

        return $r8;

     label4:
        $r13 = new androidx.compose.SlotWriter$moveFrom$2;

        specialinvoke $r13.<androidx.compose.SlotWriter$moveFrom$2: void <init>(int,androidx.compose.SlotWriter,androidx.compose.SlotTable)>(i0, r0, r1);

        $r14 = (kotlin.jvm.functions.Function1) $r13;

        $r15 = virtualinvoke r1.<androidx.compose.SlotTable: java.lang.Object write(kotlin.jvm.functions.Function1)>($r14);

        $r16 = (java.util.List) $r15;

        return $r16;
    }

    public final androidx.compose.Anchor anchor(int)
    {
        androidx.compose.SlotWriter r0;
        int i0;
        androidx.compose.SlotTable $r1;
        androidx.compose.Anchor $r2;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r2 = virtualinvoke $r1.<androidx.compose.SlotTable: androidx.compose.Anchor anchor$compose_runtime_release(int)>(i0);

        return $r2;
    }

    public static androidx.compose.Anchor anchor$default(androidx.compose.SlotWriter, int, int, java.lang.Object)
    {
        androidx.compose.SlotWriter r0;
        int i0, $i1, i2;
        java.lang.Object r1;
        androidx.compose.Anchor $r2;

        r0 := @parameter0: androidx.compose.SlotWriter;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        i2 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

     label1:
        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.Anchor anchor(int)>(i2);

        return $r2;
    }

    private final java.lang.Object advance()
    {
        androidx.compose.SlotWriter r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r2;
        java.lang.Object $r3, $r5;
        androidx.compose.SlotTable$Companion $r4;

        r0 := @this: androidx.compose.SlotWriter;

        $i2 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i3 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        if $i2 < $i3 goto label1;

        $r4 = <androidx.compose.SlotTable: androidx.compose.SlotTable$Companion Companion>;

        $r5 = virtualinvoke $r4.<androidx.compose.SlotTable$Companion: java.lang.Object getEMPTY()>();

        return $r5;

     label1:
        r1 = r0;

        i1 = virtualinvoke r1.<androidx.compose.SlotWriter: int getCurrent()>();

        $i4 = i1 + 1;

        virtualinvoke r1.<androidx.compose.SlotWriter: void setCurrent(int)>($i4);

        i0 = i1;

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i5 = virtualinvoke r0.<androidx.compose.SlotWriter: int effectiveIndex$compose_runtime_release(int)>(i0);

        $r3 = $r2[$i5];

        return $r3;
    }

    private final int advanceToNextGroup()
    {
        androidx.compose.SlotWriter r0, r2;
        androidx.compose.Group r1;
        java.lang.Object $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: androidx.compose.SlotWriter;

        $r3 = specialinvoke r0.<androidx.compose.SlotWriter: java.lang.Object advance()>();

        r1 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r3);

        r2 = r0;

        $i0 = virtualinvoke r2.<androidx.compose.SlotWriter: int getCurrent()>();

        $i1 = virtualinvoke r1.<androidx.compose.Group: int getSlots()>();

        $i2 = $i0 + $i1;

        virtualinvoke r2.<androidx.compose.SlotWriter: void setCurrent(int)>($i2);

        $z0 = virtualinvoke r1.<androidx.compose.Group: boolean isNode()>();

        if $z0 == 0 goto label1;

        $i3 = 1;

        goto label2;

     label1:
        $i3 = virtualinvoke r1.<androidx.compose.Group: int getNodes()>();

     label2:
        return $i3;
    }

    private final void moveGapTo(int)
    {
        androidx.compose.SlotWriter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String r1;
        java.util.Collection r2;
        boolean z2, $z3, $z4;
        androidx.compose.SlotTable $r3, $r4, $r5, $r7, $r9, $r12, $r13, $r14, $r15, $r17, $r21, $r22, $r24;
        androidx.compose.Trace $r6, $r18, $r26;
        java.util.ArrayList $r8;
        java.lang.Object[] $r10, $r11, $r19, $r20;
        java.lang.Throwable $r25, r28;
        kotlin.Unit r27;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        $r3 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i1 = virtualinvoke $r3.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        if $i1 <= 0 goto label10;

        $r5 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i2 = virtualinvoke $r5.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        if $i2 == i0 goto label10;

        r1 = "SlotTable:moveGap";

        $r6 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r6.<androidx.compose.Trace: void beginSection(java.lang.String)>(r1);

     label01:
        r0.<androidx.compose.SlotWriter: boolean pendingClear> = 0;

        $r7 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r8 = virtualinvoke $r7.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        r2 = (java.util.Collection) $r8;

        z2 = 0;

        $z3 = interfaceinvoke r2.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        if $z4 == 0 goto label04;

        $r24 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r24.<androidx.compose.SlotTable: void updateAnchors$compose_runtime_release(int)>(i0);

     label04:
        $r9 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i3 = virtualinvoke $r9.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        if i0 >= $i3 goto label05;

        $r19 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r20 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r21 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i10 = virtualinvoke $r21.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i11 = i0 + $i10;

        $r22 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i12 = virtualinvoke $r22.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r19, $r20, $i11, i0, $i12);

        goto label06;

     label05:
        $r10 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r11 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r12 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i4 = virtualinvoke $r12.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        $r13 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i5 = virtualinvoke $r13.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        $r14 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i6 = virtualinvoke $r14.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i7 = $i5 + $i6;

        $r15 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i8 = virtualinvoke $r15.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i9 = i0 + $i8;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r10, $r11, $i4, $i7, $i9);

     label06:
        $r17 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r17.<androidx.compose.SlotTable: void setGapStart$compose_runtime_release(int)>(i0);

        r0.<androidx.compose.SlotWriter: boolean pendingClear> = 1;

        r27 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        $r18 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r18.<androidx.compose.Trace: void endSection()>();

        goto label11;

     label08:
        $r25 := @caughtexception;

        r28 = $r25;

     label09:
        $r26 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r26.<androidx.compose.Trace: void endSection()>();

        throw r28;

     label10:
        $r4 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r4.<androidx.compose.SlotTable: void setGapStart$compose_runtime_release(int)>(i0);

     label11:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private final void insert(int)
    {
        androidx.compose.SlotWriter r0, r32;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i27, i29, i30, $i31, i33;
        java.util.Collection r1;
        boolean z0, $z1, z4, z5, $z6, z7, z9;
        androidx.compose.SlotTable $r2, $r3, $r10, $r11, $r12, $r13, $r15, $r19, $r21, $r22, $r24, $r25, r33, r34;
        java.lang.Object[] $r4, $r8, $r9, $r14, $r17, r29;
        androidx.compose.SlotTable$Companion $r5;
        java.lang.Object $r6;
        androidx.compose.Trace $r7, $r23, $r27;
        java.util.ArrayList $r20;
        java.lang.Throwable $r26, r31;
        java.lang.String r28;
        short s28;
        kotlin.Unit r30;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        if i0 <= 0 goto label12;

        $i3 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        specialinvoke r0.<androidx.compose.SlotWriter: void moveGapTo(int)>($i3);

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i4 = virtualinvoke $r2.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        if $i4 >= i0 goto label08;

        r28 = "SlotTable:grow";

        $r7 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r7.<androidx.compose.Trace: void beginSection(java.lang.String)>(r28);

     label01:
        $r8 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        i23 = lengthof $r8;

        $r9 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i15 = lengthof $r9;

        $r10 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i16 = virtualinvoke $r10.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        i24 = $i15 - $i16;

        i25 = i23 * 2;

        i26 = i24 + i0;

        z4 = 0;

        i27 = staticinvoke <java.lang.Math: int max(int,int)>(i25, i26);

        s28 = 128;

        z5 = 0;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i27, s28);

        r29 = newarray (java.lang.Object)[i1];

        i29 = i1 - i24;

        $r11 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i17 = virtualinvoke $r11.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        $r12 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i18 = virtualinvoke $r12.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        i30 = $i17 + $i18;

        $r13 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i19 = virtualinvoke $r13.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        i2 = $i19 + i29;

        $r14 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r15 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i20 = virtualinvoke $r15.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r14, r29, 0, 0, $i20);

        $r17 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r17, r29, i2, i30, i23);

        $r19 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r20 = virtualinvoke $r19.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        r1 = (java.util.Collection) $r20;

        z0 = 0;

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label02;

        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        if $z6 == 0 goto label04;

        $r24 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r25 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i21 = virtualinvoke $r25.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i22 = i29 - $i21;

        virtualinvoke $r24.<androidx.compose.SlotTable: void anchorGapResize$compose_runtime_release(int)>($i22);

     label04:
        $r21 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r21.<androidx.compose.SlotTable: void setSlots$compose_runtime_release(java.lang.Object[])>(r29);

        $r22 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r22.<androidx.compose.SlotTable: void setGapLen$compose_runtime_release(int)>(i29);

        r30 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label05:
        $r23 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r23.<androidx.compose.Trace: void endSection()>();

        goto label08;

     label06:
        $r26 := @caughtexception;

        r31 = $r26;

     label07:
        $r27 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r27.<androidx.compose.Trace: void endSection()>();

        throw r31;

     label08:
        $i5 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        $r3 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i6 = virtualinvoke $r3.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        if $i5 < $i6 goto label09;

        r32 = r0;

        $i13 = virtualinvoke r32.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        $i14 = $i13 + i0;

        virtualinvoke r32.<androidx.compose.SlotWriter: void setCurrentEnd$compose_runtime_release(int)>($i14);

     label09:
        r33 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i7 = virtualinvoke r33.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        $i8 = $i7 + i0;

        virtualinvoke r33.<androidx.compose.SlotTable: void setGapStart$compose_runtime_release(int)>($i8);

        r34 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i9 = virtualinvoke r34.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i10 = $i9 - i0;

        virtualinvoke r34.<androidx.compose.SlotTable: void setGapLen$compose_runtime_release(int)>($i10);

        z7 = 0;

        $i31 = 0;

     label10:
        if $i31 >= i0 goto label11;

        i33 = $i31;

        z9 = 0;

        $r4 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i11 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $i12 = $i11 + i33;

        $r5 = <androidx.compose.SlotTable: androidx.compose.SlotTable$Companion Companion>;

        $r6 = virtualinvoke $r5.<androidx.compose.SlotTable$Companion: java.lang.Object getEMPTY()>();

        $r4[$i12] = $r6;

        $i31 = $i31 + 1;

        goto label10;

     label11:
        r0.<androidx.compose.SlotWriter: boolean pendingClear> = 1;

     label12:
        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public final boolean remove$compose_runtime_release(int, int)
    {
        androidx.compose.SlotWriter r0, r15;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9;
        boolean z0, $z1, $z2, z3, z4, $z5, $z6, $z7;
        androidx.compose.SlotTable $r1, $r2, $r4, $r5, $r6, $r7, $r9, $r10, r13, $r14;
        java.util.ArrayList $r3, $r8;
        java.util.Collection r11, r12;

        r0 := @this: androidx.compose.SlotWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= 0 goto label10;

        r0.<androidx.compose.SlotWriter: boolean pendingClear> = 0;

        z3 = 0;

        $r1 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i2 = virtualinvoke $r1.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        if $i2 != 0 goto label04;

        $r6 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r6.<androidx.compose.SlotTable: void setGapStart$compose_runtime_release(int)>(i0);

        $r7 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r8 = virtualinvoke $r7.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        r11 = (java.util.Collection) $r8;

        z4 = 0;

        $z2 = interfaceinvoke r11.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        if $z5 == 0 goto label03;

        $r10 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        z3 = virtualinvoke $r10.<androidx.compose.SlotTable: boolean removeAnchors$compose_runtime_release(int,int)>(i0, i1);

     label03:
        $r9 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r9.<androidx.compose.SlotTable: void setGapLen$compose_runtime_release(int)>(i1);

        goto label08;

     label04:
        i7 = i0 + i1;

        specialinvoke r0.<androidx.compose.SlotWriter: void moveGapTo(int)>(i7);

        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r3 = virtualinvoke $r2.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        r12 = (java.util.Collection) $r3;

        z0 = 0;

        $z1 = interfaceinvoke r12.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        if $z6 == 0 goto label07;

        $r5 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        z3 = virtualinvoke $r5.<androidx.compose.SlotTable: boolean removeAnchors$compose_runtime_release(int,int)>(i0, i1);

     label07:
        $r4 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r4.<androidx.compose.SlotTable: void setGapStart$compose_runtime_release(int)>(i0);

        r13 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i3 = virtualinvoke r13.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i4 = $i3 + i1;

        virtualinvoke r13.<androidx.compose.SlotTable: void setGapLen$compose_runtime_release(int)>($i4);

     label08:
        $i8 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        $r14 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i9 = virtualinvoke $r14.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        if $i8 < $i9 goto label09;

        r15 = r0;

        $i5 = virtualinvoke r15.<androidx.compose.SlotWriter: int getCurrentEnd$compose_runtime_release()>();

        $i6 = $i5 - i1;

        virtualinvoke r15.<androidx.compose.SlotWriter: void setCurrentEnd$compose_runtime_release(int)>($i6);

     label09:
        r0.<androidx.compose.SlotWriter: boolean pendingClear> = 1;

        $z7 = z3;

        goto label11;

     label10:
        $z7 = 0;

     label11:
        return $z7;
    }

    public java.lang.String toString()
    {
        androidx.compose.SlotWriter r0;
        java.lang.String r1, $r14, $r23, $r24;
        boolean $z0;
        androidx.compose.SlotTable $r2, $r8, $r16, $r19, $r20, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13, $r15, $r17, $r18, $r21;
        java.lang.Object[] $r7;

        r0 := @this: androidx.compose.SlotWriter;

        $z0 = r0.<androidx.compose.SlotWriter: boolean pendingClear>;

        if $z0 == 0 goto label1;

        r0.<androidx.compose.SlotWriter: boolean pendingClear> = 0;

        $r22 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r22.<androidx.compose.SlotTable: void clearGap$compose_runtime_release()>();

     label1:
        $r2 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i0 = virtualinvoke $r2.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        if $i0 <= 0 goto label2;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i6 = virtualinvoke $r16.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r19 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i7 = virtualinvoke $r19.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        $r20 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i8 = virtualinvoke $r20.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i9 = $i7 + $i8;

        $i10 = $i9 - 1;

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r23 = "none";

     label3:
        r1 = $r23;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SlotWriter(current=");

        $i1 = virtualinvoke r0.<androidx.compose.SlotWriter: int getCurrent()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size=");

        $r7 = virtualinvoke r0.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $i2 = lengthof $r7;

        $r8 = virtualinvoke r0.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $i3 = virtualinvoke $r8.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $i4 = $i2 - $i3;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", gap=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $i5 = r0.<androidx.compose.SlotWriter: int insertCount>;

        if $i5 <= 0 goto label4;

        $r24 = ", inserting";

        goto label5;

     label4:
        $r24 = "";

     label5:
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public static final void access$insert(androidx.compose.SlotWriter, int)
    {
        androidx.compose.SlotWriter $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.SlotWriter;

        i0 := @parameter1: int;

        specialinvoke $r0.<androidx.compose.SlotWriter: void insert(int)>(i0);

        return;
    }

    public static final void access$moveGapTo(androidx.compose.SlotWriter, int)
    {
        androidx.compose.SlotWriter $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.SlotWriter;

        i0 := @parameter1: int;

        specialinvoke $r0.<androidx.compose.SlotWriter: void moveGapTo(int)>(i0);

        return;
    }

    public static final androidx.compose.IntStack access$getStartStack$p(androidx.compose.SlotWriter)
    {
        androidx.compose.SlotWriter r0;
        androidx.compose.IntStack $r1;

        r0 := @parameter0: androidx.compose.SlotWriter;

        $r1 = r0.<androidx.compose.SlotWriter: androidx.compose.IntStack startStack>;

        return $r1;
    }

    public static final void access$setNodeCount$p(androidx.compose.SlotWriter, int)
    {
        androidx.compose.SlotWriter r0;
        int i0;

        r0 := @parameter0: androidx.compose.SlotWriter;

        i0 := @parameter1: int;

        r0.<androidx.compose.SlotWriter: int nodeCount> = i0;

        return;
    }

    public static final int access$getNodeCount$p(androidx.compose.SlotWriter)
    {
        androidx.compose.SlotWriter r0;
        int $i0;

        r0 := @parameter0: androidx.compose.SlotWriter;

        $i0 = r0.<androidx.compose.SlotWriter: int nodeCount>;

        return $i0;
    }

androidx.compose.SlotWriter$groupSlots$1
<androidx.compose.SlotWriter$groupSlots$1: int current>
<androidx.compose.SlotWriter$groupSlots$1: int $start>
<androidx.compose.SlotWriter$groupSlots$1: int $end>
<androidx.compose.SlotWriter$groupSlots$1: androidx.compose.SlotWriter $this>
    void <init>(int, int, androidx.compose.SlotWriter)
    {
        androidx.compose.SlotWriter$groupSlots$1 r0;
        int $i0, $i1, $i2, $i3;
        androidx.compose.SlotWriter $r1;

        r0 := @this: androidx.compose.SlotWriter$groupSlots$1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: androidx.compose.SlotWriter;

        r0.<androidx.compose.SlotWriter$groupSlots$1: int $start> = $i0;

        r0.<androidx.compose.SlotWriter$groupSlots$1: int $end> = $i1;

        r0.<androidx.compose.SlotWriter$groupSlots$1: androidx.compose.SlotWriter $this> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = r0.<androidx.compose.SlotWriter$groupSlots$1: int $start>;

        $i3 = $i2 + 1;

        r0.<androidx.compose.SlotWriter$groupSlots$1: int current> = $i3;

        return;
    }

    public final int getCurrent()
    {
        androidx.compose.SlotWriter$groupSlots$1 r0;
        int $i0;

        r0 := @this: androidx.compose.SlotWriter$groupSlots$1;

        $i0 = r0.<androidx.compose.SlotWriter$groupSlots$1: int current>;

        return $i0;
    }

    public final void setCurrent(int)
    {
        androidx.compose.SlotWriter$groupSlots$1 r0;
        int i0;

        r0 := @this: androidx.compose.SlotWriter$groupSlots$1;

        i0 := @parameter0: int;

        r0.<androidx.compose.SlotWriter$groupSlots$1: int current> = i0;

        return;
    }

    public boolean hasNext()
    {
        androidx.compose.SlotWriter$groupSlots$1 r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.compose.SlotWriter$groupSlots$1;

        $i0 = virtualinvoke r0.<androidx.compose.SlotWriter$groupSlots$1: int getCurrent()>();

        $i1 = r0.<androidx.compose.SlotWriter$groupSlots$1: int $end>;

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        androidx.compose.SlotWriter$groupSlots$1 r0, r1;
        int i0, $i1, $i2;
        androidx.compose.SlotWriter $r2, $r4;
        java.lang.Object[] $r3;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.SlotWriter$groupSlots$1;

        $r2 = r0.<androidx.compose.SlotWriter$groupSlots$1: androidx.compose.SlotWriter $this>;

        $r3 = virtualinvoke $r2.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r4 = r0.<androidx.compose.SlotWriter$groupSlots$1: androidx.compose.SlotWriter $this>;

        r1 = r0;

        i0 = virtualinvoke r1.<androidx.compose.SlotWriter$groupSlots$1: int getCurrent()>();

        $i1 = i0 + 1;

        virtualinvoke r1.<androidx.compose.SlotWriter$groupSlots$1: void setCurrent(int)>($i1);

        $i2 = virtualinvoke $r4.<androidx.compose.SlotWriter: int effectiveIndex$compose_runtime_release(int)>(i0);

        $r5 = $r3[$i2];

        return $r5;
    }

    public void remove()
    {
        androidx.compose.SlotWriter$groupSlots$1 r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.compose.SlotWriter$groupSlots$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

androidx.compose.SlotWriter$moveFrom$1
<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table>
<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotWriter $this>
    void <init>(androidx.compose.SlotTable, androidx.compose.SlotWriter)
    {
        androidx.compose.SlotWriter$moveFrom$1 r0;
        androidx.compose.SlotTable $r1;
        androidx.compose.SlotWriter $r2;

        r0 := @this: androidx.compose.SlotWriter$moveFrom$1;

        $r1 := @parameter0: androidx.compose.SlotTable;

        $r2 := @parameter1: androidx.compose.SlotWriter;

        r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table> = $r1;

        r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotWriter $this> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.SlotWriter)
    {
        androidx.compose.SlotWriter$moveFrom$1 r0;
        androidx.compose.SlotWriter r1, $r11;
        java.lang.Object[] r2, r5;
        java.util.ArrayList r3, r6;
        int i0, i1;
        androidx.compose.SlotTable r4, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15;

        r0 := @this: androidx.compose.SlotWriter$moveFrom$1;

        r1 := @parameter0: androidx.compose.SlotWriter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r7 = r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table>;

        r2 = virtualinvoke $r7.<androidx.compose.SlotTable: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r8 = r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table>;

        r3 = virtualinvoke $r8.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        $r9 = r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table>;

        i0 = virtualinvoke $r9.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        $r10 = r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table>;

        i1 = virtualinvoke $r10.<androidx.compose.SlotTable: int getGapLen$compose_runtime_release()>();

        $r11 = r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotWriter $this>;

        r4 = virtualinvoke $r11.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        r5 = virtualinvoke r4.<androidx.compose.SlotTable: java.lang.Object[] getSlots$compose_runtime_release()>();

        r6 = virtualinvoke r4.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        virtualinvoke r4.<androidx.compose.SlotTable: void setSlots$compose_runtime_release(java.lang.Object[])>(r2);

        virtualinvoke r4.<androidx.compose.SlotTable: void setAnchors$compose_runtime_release(java.util.ArrayList)>(r3);

        virtualinvoke r4.<androidx.compose.SlotTable: void setGapStart$compose_runtime_release(int)>(i0);

        virtualinvoke r4.<androidx.compose.SlotTable: void setGapLen$compose_runtime_release(int)>(i1);

        $r12 = r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table>;

        virtualinvoke $r12.<androidx.compose.SlotTable: void setSlots$compose_runtime_release(java.lang.Object[])>(r5);

        $r13 = r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table>;

        virtualinvoke $r13.<androidx.compose.SlotTable: void setAnchors$compose_runtime_release(java.util.ArrayList)>(r6);

        $r14 = r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table>;

        virtualinvoke $r14.<androidx.compose.SlotTable: void setGapStart$compose_runtime_release(int)>(0);

        $r15 = r0.<androidx.compose.SlotWriter$moveFrom$1: androidx.compose.SlotTable $table>;

        virtualinvoke $r15.<androidx.compose.SlotTable: void setGapLen$compose_runtime_release(int)>(0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.SlotWriter$moveFrom$1 r0;
        java.lang.Object r1;
        androidx.compose.SlotWriter $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.SlotWriter$moveFrom$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.SlotWriter) r1;

        virtualinvoke r0.<androidx.compose.SlotWriter$moveFrom$1: void invoke(androidx.compose.SlotWriter)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.SlotWriter$moveFrom$2
<androidx.compose.SlotWriter$moveFrom$2: int $location>
<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>
<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotTable $table>
    void <init>(int, androidx.compose.SlotWriter, androidx.compose.SlotTable)
    {
        androidx.compose.SlotWriter$moveFrom$2 r0;
        int $i0;
        androidx.compose.SlotWriter $r1;
        androidx.compose.SlotTable $r2;

        r0 := @this: androidx.compose.SlotWriter$moveFrom$2;

        $i0 := @parameter0: int;

        $r1 := @parameter1: androidx.compose.SlotWriter;

        $r2 := @parameter2: androidx.compose.SlotTable;

        r0.<androidx.compose.SlotWriter$moveFrom$2: int $location> = $i0;

        r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this> = $r1;

        r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotTable $table> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.util.List invoke(androidx.compose.SlotWriter)
    {
        androidx.compose.SlotWriter$moveFrom$2 r0;
        androidx.compose.SlotWriter r1, $r8, $r10, $r11, $r12, $r14, $r16, $r17, $r36, $r39, $r40, r47, r48;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27, i28, $i29, i30;
        java.lang.Object[] r2, r3;
        androidx.compose.Group r4, $r20, r31, r32, r33;
        java.util.List r5, $r44, $r45;
        androidx.compose.Anchor r6, r7;
        androidx.compose.SlotTable $r9, $r21, $r23, $r28, $r37, $r41;
        java.lang.Object $r15, $r19, $r30;
        boolean $z0, $z3, z4, $z5, z6, z7, z8, z9;
        androidx.compose.IntStack $r18;
        java.util.ArrayList $r22, $r24, $r29, r34, r35, $r38, $r42;
        java.lang.IllegalArgumentException $r25;
        java.lang.String $r26, r46;
        java.lang.Throwable $r27;
        java.util.Collection $r43;

        r0 := @this: androidx.compose.SlotWriter$moveFrom$2;

        r1 := @parameter0: androidx.compose.SlotWriter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "tableWriter");

        i0 = r0.<androidx.compose.SlotWriter$moveFrom$2: int $location>;

        $i6 = virtualinvoke r1.<androidx.compose.SlotWriter: int groupSize(int)>(i0);

        i1 = $i6 + 1;

        $r8 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        staticinvoke <androidx.compose.SlotWriter: void access$insert(androidx.compose.SlotWriter,int)>($r8, i1);

        $r9 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotTable $table>;

        r2 = virtualinvoke $r9.<androidx.compose.SlotTable: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r10 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        r3 = virtualinvoke $r10.<androidx.compose.SlotWriter: java.lang.Object[] getSlots$compose_runtime_release()>();

        $r11 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        i2 = virtualinvoke $r11.<androidx.compose.SlotWriter: int getCurrent()>();

        i3 = i0 + i1;

        staticinvoke <androidx.compose.SlotWriter: void access$moveGapTo(androidx.compose.SlotWriter,int)>(r1, i3);

        $r12 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        $i7 = virtualinvoke $r12.<androidx.compose.SlotWriter: int getCurrent()>();

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>(r2, r3, $i7, i0, i3);

        $r14 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        $r15 = virtualinvoke $r14.<androidx.compose.SlotWriter: java.lang.Object get(int)>(i2);

        r4 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r15);

        r31 = virtualinvoke r4.<androidx.compose.Group: androidx.compose.Group getParent()>();

        $i8 = virtualinvoke r4.<androidx.compose.Group: int getSlots()>();

        i4 = $i8 + 1;

        $z0 = virtualinvoke r4.<androidx.compose.Group: boolean isNode()>();

        if $z0 == 0 goto label01;

        $i23 = 1;

        goto label02;

     label01:
        $i23 = virtualinvoke r4.<androidx.compose.Group: int getNodes()>();

     label02:
        i24 = $i23;

     label03:
        if r31 == null goto label05;

        r32 = r31;

        $i19 = virtualinvoke r32.<androidx.compose.Group: int getSlots()>();

        $i20 = $i19 - i4;

        virtualinvoke r32.<androidx.compose.Group: void setSlots(int)>($i20);

        r33 = r31;

        $i21 = virtualinvoke r33.<androidx.compose.Group: int getNodes()>();

        $i22 = $i21 - i24;

        virtualinvoke r33.<androidx.compose.Group: void setNodes(int)>($i22);

        $z3 = virtualinvoke r31.<androidx.compose.Group: boolean isNode()>();

        if $z3 == 0 goto label04;

        i24 = 0;

     label04:
        r31 = virtualinvoke r31.<androidx.compose.Group: androidx.compose.Group getParent()>();

        goto label03;

     label05:
        $r17 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        $r16 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        $r18 = staticinvoke <androidx.compose.SlotWriter: androidx.compose.IntStack access$getStartStack$p(androidx.compose.SlotWriter)>($r16);

        $i9 = virtualinvoke $r18.<androidx.compose.IntStack: int peek()>();

        $r19 = virtualinvoke $r17.<androidx.compose.SlotWriter: java.lang.Object get(int)>($i9);

        $r20 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r19);

        virtualinvoke r4.<androidx.compose.Group: void setParent(androidx.compose.Group)>($r20);

        $r21 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotTable $table>;

        $r22 = virtualinvoke $r21.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        i25 = staticinvoke <androidx.compose.SlotTableKt: int access$locationOf(java.util.ArrayList,int)>($r22, i0);

        $r23 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotTable $table>;

        $r24 = virtualinvoke $r23.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        i5 = staticinvoke <androidx.compose.SlotTableKt: int access$locationOf(java.util.ArrayList,int)>($r24, i3);

        if i25 >= i5 goto label08;

        $r28 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotTable $table>;

        r34 = virtualinvoke $r28.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        $r29 = new java.util.ArrayList;

        $i15 = i5 - i25;

        specialinvoke $r29.<java.util.ArrayList: void <init>(int)>($i15);

        r35 = $r29;

        i26 = i25;

        i27 = i5 + -1;

        if i5 == -2147483648 goto label07;

        if i26 > i27 goto label07;

     label06:
        i28 = i26;

        i26 = i26 + 1;

        $r30 = virtualinvoke r34.<java.util.ArrayList: java.lang.Object get(int)>(i28);

        r7 = (androidx.compose.Anchor) $r30;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r7, "sourceAnchors[index]");

        r6 = r7;

        $i16 = virtualinvoke r6.<androidx.compose.Anchor: int getLoc$compose_runtime_release()>();

        $i17 = $i16 - i0;

        $i18 = $i17 + i2;

        virtualinvoke r6.<androidx.compose.Anchor: void setLoc$compose_runtime_release(int)>($i18);

        virtualinvoke r35.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        if i26 <= i27 goto label06;

     label07:
        $r36 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        $r37 = virtualinvoke $r36.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r38 = virtualinvoke $r37.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        $r39 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        $i29 = virtualinvoke $r39.<androidx.compose.SlotWriter: int getCurrent()>();

        i30 = staticinvoke <androidx.compose.SlotTableKt: int access$locationOf(java.util.ArrayList,int)>($r38, $i29);

        $r40 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        $r41 = virtualinvoke $r40.<androidx.compose.SlotWriter: androidx.compose.SlotTable getTable()>();

        $r42 = virtualinvoke $r41.<androidx.compose.SlotTable: java.util.ArrayList getAnchors$compose_runtime_release()>();

        $r43 = (java.util.Collection) r35;

        virtualinvoke $r42.<java.util.ArrayList: boolean addAll(int,java.util.Collection)>(i30, $r43);

        $r44 = virtualinvoke r34.<java.util.ArrayList: java.util.List subList(int,int)>(i25, i5);

        interfaceinvoke $r44.<java.util.List: void clear()>();

        $r45 = (java.util.List) r35;

        goto label09;

     label08:
        $r45 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label09:
        r5 = $r45;

        z4 = virtualinvoke r1.<androidx.compose.SlotWriter: boolean remove$compose_runtime_release(int,int)>(i0, i1);

        if z4 != 0 goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        z6 = $z5;

        z7 = 0;

        z8 = 0;

        if z6 != 0 goto label12;

        z9 = 0;

        r46 = "Removing anchors that should have been moved";

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = virtualinvoke r46.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        $r27 = (java.lang.Throwable) $r25;

        throw $r27;

     label12:
        r47 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        $i10 = staticinvoke <androidx.compose.SlotWriter: int access$getNodeCount$p(androidx.compose.SlotWriter)>(r47);

        $i11 = virtualinvoke r4.<androidx.compose.Group: int getNodes()>();

        $i12 = $i10 + $i11;

        staticinvoke <androidx.compose.SlotWriter: void access$setNodeCount$p(androidx.compose.SlotWriter,int)>(r47, $i12);

        r48 = r0.<androidx.compose.SlotWriter$moveFrom$2: androidx.compose.SlotWriter $this>;

        $i13 = virtualinvoke r48.<androidx.compose.SlotWriter: int getCurrent()>();

        $i14 = $i13 + i1;

        virtualinvoke r48.<androidx.compose.SlotWriter: void setCurrent(int)>($i14);

        return r5;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.SlotWriter$moveFrom$2 r0;
        java.lang.Object r1;
        androidx.compose.SlotWriter $r2;
        java.util.List $r3;

        r0 := @this: androidx.compose.SlotWriter$moveFrom$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.SlotWriter) r1;

        $r3 = virtualinvoke r0.<androidx.compose.SlotWriter$moveFrom$2: java.util.List invoke(androidx.compose.SlotWriter)>($r2);

        return $r3;
    }

