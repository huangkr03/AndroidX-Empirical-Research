androidx.media3.exoplayer.DefaultLoadControl
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_MIN_BUFFER_MS>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_MAX_BUFFER_MS>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_BUFFER_FOR_PLAYBACK_MS>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_TARGET_BUFFER_BYTES>
<androidx.media3.exoplayer.DefaultLoadControl: boolean DEFAULT_PRIORITIZE_TIME_OVER_SIZE_THRESHOLDS>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_BACK_BUFFER_DURATION_MS>
<androidx.media3.exoplayer.DefaultLoadControl: boolean DEFAULT_RETAIN_BACK_BUFFER_FROM_KEYFRAME>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_VIDEO_BUFFER_SIZE>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_AUDIO_BUFFER_SIZE>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_TEXT_BUFFER_SIZE>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_METADATA_BUFFER_SIZE>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_CAMERA_MOTION_BUFFER_SIZE>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_IMAGE_BUFFER_SIZE>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_MUXED_BUFFER_SIZE>
<androidx.media3.exoplayer.DefaultLoadControl: int DEFAULT_MIN_BUFFER_SIZE>
<androidx.media3.exoplayer.DefaultLoadControl: androidx.media3.exoplayer.upstream.DefaultAllocator allocator>
<androidx.media3.exoplayer.DefaultLoadControl: long minBufferUs>
<androidx.media3.exoplayer.DefaultLoadControl: long maxBufferUs>
<androidx.media3.exoplayer.DefaultLoadControl: long bufferForPlaybackUs>
<androidx.media3.exoplayer.DefaultLoadControl: long bufferForPlaybackAfterRebufferUs>
<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytesOverwrite>
<androidx.media3.exoplayer.DefaultLoadControl: boolean prioritizeTimeOverSizeThresholds>
<androidx.media3.exoplayer.DefaultLoadControl: long backBufferDurationUs>
<androidx.media3.exoplayer.DefaultLoadControl: boolean retainBackBufferFromKeyframe>
<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytes>
<androidx.media3.exoplayer.DefaultLoadControl: boolean isLoading>
    public void <init>()
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        androidx.media3.exoplayer.upstream.DefaultAllocator $r1;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        $r1 = new androidx.media3.exoplayer.upstream.DefaultAllocator;

        specialinvoke $r1.<androidx.media3.exoplayer.upstream.DefaultAllocator: void <init>(boolean,int)>(1, 65536);

        specialinvoke r0.<androidx.media3.exoplayer.DefaultLoadControl: void <init>(androidx.media3.exoplayer.upstream.DefaultAllocator,int,int,int,int,int,boolean,int,boolean)>($r1, 50000, 50000, 2500, 5000, -1, 0, 0, 0);

        return;
    }

    protected void <init>(androidx.media3.exoplayer.upstream.DefaultAllocator, int, int, int, int, int, boolean, int, boolean)
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        androidx.media3.exoplayer.upstream.DefaultAllocator r1;
        int i0, i1, i2, i3, i4, i5, $i14, $i17;
        boolean z0, z1;
        long $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l15, $l16;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.DefaultAllocator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        z0 := @parameter6: boolean;

        i5 := @parameter7: int;

        z1 := @parameter8: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void assertGreaterOrEqual(int,int,java.lang.String,java.lang.String)>(i2, 0, "bufferForPlaybackMs", "0");

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void assertGreaterOrEqual(int,int,java.lang.String,java.lang.String)>(i3, 0, "bufferForPlaybackAfterRebufferMs", "0");

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void assertGreaterOrEqual(int,int,java.lang.String,java.lang.String)>(i0, i2, "minBufferMs", "bufferForPlaybackMs");

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void assertGreaterOrEqual(int,int,java.lang.String,java.lang.String)>(i0, i3, "minBufferMs", "bufferForPlaybackAfterRebufferMs");

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void assertGreaterOrEqual(int,int,java.lang.String,java.lang.String)>(i1, i0, "maxBufferMs", "minBufferMs");

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void assertGreaterOrEqual(int,int,java.lang.String,java.lang.String)>(i5, 0, "backBufferDurationMs", "0");

        r0.<androidx.media3.exoplayer.DefaultLoadControl: androidx.media3.exoplayer.upstream.DefaultAllocator allocator> = r1;

        $l6 = (long) i0;

        $l7 = staticinvoke <androidx.media3.common.util.Util: long msToUs(long)>($l6);

        r0.<androidx.media3.exoplayer.DefaultLoadControl: long minBufferUs> = $l7;

        $l8 = (long) i1;

        $l9 = staticinvoke <androidx.media3.common.util.Util: long msToUs(long)>($l8);

        r0.<androidx.media3.exoplayer.DefaultLoadControl: long maxBufferUs> = $l9;

        $l10 = (long) i2;

        $l11 = staticinvoke <androidx.media3.common.util.Util: long msToUs(long)>($l10);

        r0.<androidx.media3.exoplayer.DefaultLoadControl: long bufferForPlaybackUs> = $l11;

        $l12 = (long) i3;

        $l13 = staticinvoke <androidx.media3.common.util.Util: long msToUs(long)>($l12);

        r0.<androidx.media3.exoplayer.DefaultLoadControl: long bufferForPlaybackAfterRebufferUs> = $l13;

        r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytesOverwrite> = i4;

        $i14 = r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytesOverwrite>;

        if $i14 == -1 goto label1;

        $i17 = r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytesOverwrite>;

        goto label2;

     label1:
        $i17 = 13107200;

     label2:
        r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytes> = $i17;

        r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean prioritizeTimeOverSizeThresholds> = z0;

        $l15 = (long) i5;

        $l16 = staticinvoke <androidx.media3.common.util.Util: long msToUs(long)>($l15);

        r0.<androidx.media3.exoplayer.DefaultLoadControl: long backBufferDurationUs> = $l16;

        r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean retainBackBufferFromKeyframe> = z1;

        return;
    }

    public void onPrepared()
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        specialinvoke r0.<androidx.media3.exoplayer.DefaultLoadControl: void reset(boolean)>(0);

        return;
    }

    public void onTracksSelected(androidx.media3.exoplayer.Renderer[], androidx.media3.exoplayer.source.TrackGroupArray, androidx.media3.exoplayer.trackselection.ExoTrackSelection[])
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        androidx.media3.exoplayer.Renderer[] r1;
        androidx.media3.exoplayer.source.TrackGroupArray r2;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection[] r3;
        int $i0, $i1, $i2;
        androidx.media3.exoplayer.upstream.DefaultAllocator $r4;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        r1 := @parameter0: androidx.media3.exoplayer.Renderer[];

        r2 := @parameter1: androidx.media3.exoplayer.source.TrackGroupArray;

        r3 := @parameter2: androidx.media3.exoplayer.trackselection.ExoTrackSelection[];

        $i0 = r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytesOverwrite>;

        if $i0 != -1 goto label1;

        $i2 = virtualinvoke r0.<androidx.media3.exoplayer.DefaultLoadControl: int calculateTargetBufferBytes(androidx.media3.exoplayer.Renderer[],androidx.media3.exoplayer.trackselection.ExoTrackSelection[])>(r1, r3);

        goto label2;

     label1:
        $i2 = r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytesOverwrite>;

     label2:
        r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytes> = $i2;

        $r4 = r0.<androidx.media3.exoplayer.DefaultLoadControl: androidx.media3.exoplayer.upstream.DefaultAllocator allocator>;

        $i1 = r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytes>;

        virtualinvoke $r4.<androidx.media3.exoplayer.upstream.DefaultAllocator: void setTargetBufferSize(int)>($i1);

        return;
    }

    public void onStopped()
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        specialinvoke r0.<androidx.media3.exoplayer.DefaultLoadControl: void reset(boolean)>(1);

        return;
    }

    public void onReleased()
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        specialinvoke r0.<androidx.media3.exoplayer.DefaultLoadControl: void reset(boolean)>(1);

        return;
    }

    public androidx.media3.exoplayer.upstream.Allocator getAllocator()
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        androidx.media3.exoplayer.upstream.DefaultAllocator $r1;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        $r1 = r0.<androidx.media3.exoplayer.DefaultLoadControl: androidx.media3.exoplayer.upstream.DefaultAllocator allocator>;

        return $r1;
    }

    public long getBackBufferDurationUs()
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        $l0 = r0.<androidx.media3.exoplayer.DefaultLoadControl: long backBufferDurationUs>;

        return $l0;
    }

    public boolean retainBackBufferFromKeyframe()
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        $z0 = r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean retainBackBufferFromKeyframe>;

        return $z0;
    }

    public boolean shouldContinueLoading(long, long, float)
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        long l0, l1, l2, $l7, $l10, l11, l12;
        float f0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        androidx.media3.exoplayer.upstream.DefaultAllocator $r1;
        int $i3, $i4;
        byte $b5, $b6, $b8, $b9;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        $r1 = r0.<androidx.media3.exoplayer.DefaultLoadControl: androidx.media3.exoplayer.upstream.DefaultAllocator allocator>;

        $i3 = virtualinvoke $r1.<androidx.media3.exoplayer.upstream.DefaultAllocator: int getTotalBytesAllocated()>();

        $i4 = r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytes>;

        if $i3 < $i4 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        l11 = r0.<androidx.media3.exoplayer.DefaultLoadControl: long minBufferUs>;

        $b5 = f0 cmpl 1.0F;

        if $b5 <= 0 goto label3;

        l2 = staticinvoke <androidx.media3.common.util.Util: long getMediaDurationForPlayoutDuration(long,float)>(l11, f0);

        $l10 = r0.<androidx.media3.exoplayer.DefaultLoadControl: long maxBufferUs>;

        l11 = staticinvoke <java.lang.Math: long min(long,long)>(l2, $l10);

     label3:
        l12 = staticinvoke <java.lang.Math: long max(long,long)>(l11, 500000L);

        $b6 = l1 cmp l12;

        if $b6 >= 0 goto label7;

        $z1 = r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean prioritizeTimeOverSizeThresholds>;

        if $z1 != 0 goto label4;

        if z0 != 0 goto label5;

     label4:
        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean isLoading> = $z4;

        $z2 = r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean isLoading>;

        if $z2 != 0 goto label9;

        $b9 = l1 cmp 500000L;

        if $b9 >= 0 goto label9;

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("DefaultLoadControl", "Target buffer size reached with less than 500ms of buffered media data.");

        goto label9;

     label7:
        $l7 = r0.<androidx.media3.exoplayer.DefaultLoadControl: long maxBufferUs>;

        $b8 = l1 cmp $l7;

        if $b8 >= 0 goto label8;

        if z0 == 0 goto label9;

     label8:
        r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean isLoading> = 0;

     label9:
        $z5 = r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean isLoading>;

        return $z5;
    }

    public boolean shouldStartPlayback(long, float, boolean, long)
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        float f0;
        boolean z0, $z1, $z2;
        long l0, $l6, l7, l8, $l9, l10;
        byte $b1, $b2, $b3;
        androidx.media3.exoplayer.upstream.DefaultAllocator $r1;
        int $i4, $i5;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        l7 := @parameter0: long;

        f0 := @parameter1: float;

        z0 := @parameter2: boolean;

        l0 := @parameter3: long;

        l8 = staticinvoke <androidx.media3.common.util.Util: long getPlayoutDurationForMediaDuration(long,float)>(l7, f0);

        if z0 == 0 goto label1;

        $l9 = r0.<androidx.media3.exoplayer.DefaultLoadControl: long bufferForPlaybackAfterRebufferUs>;

        goto label2;

     label1:
        $l9 = r0.<androidx.media3.exoplayer.DefaultLoadControl: long bufferForPlaybackUs>;

     label2:
        l10 = $l9;

        $b1 = l0 cmp -9223372036854775807L;

        if $b1 == 0 goto label3;

        $l6 = l0 / 2L;

        l10 = staticinvoke <java.lang.Math: long min(long,long)>($l6, l10);

     label3:
        $b2 = l10 cmp 0L;

        if $b2 <= 0 goto label4;

        $b3 = l8 cmp l10;

        if $b3 >= 0 goto label4;

        $z1 = r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean prioritizeTimeOverSizeThresholds>;

        if $z1 != 0 goto label5;

        $r1 = r0.<androidx.media3.exoplayer.DefaultLoadControl: androidx.media3.exoplayer.upstream.DefaultAllocator allocator>;

        $i4 = virtualinvoke $r1.<androidx.media3.exoplayer.upstream.DefaultAllocator: int getTotalBytesAllocated()>();

        $i5 = r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytes>;

        if $i4 < $i5 goto label5;

     label4:
        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    protected int calculateTargetBufferBytes(androidx.media3.exoplayer.Renderer[], androidx.media3.exoplayer.trackselection.ExoTrackSelection[])
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        androidx.media3.exoplayer.Renderer[] r1;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection[] r2;
        int $i0, $i1, $i2, $i3, i4, i5;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection $r3;
        androidx.media3.exoplayer.Renderer $r4;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        r1 := @parameter0: androidx.media3.exoplayer.Renderer[];

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.ExoTrackSelection[];

        i4 = 0;

        i5 = 0;

     label1:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label3;

        $r3 = r2[i5];

        if $r3 == null goto label2;

        $r4 = r1[i5];

        $i2 = interfaceinvoke $r4.<androidx.media3.exoplayer.Renderer: int getTrackType()>();

        $i3 = staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: int getDefaultBufferSize(int)>($i2);

        i4 = i4 + $i3;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(13107200, i4);

        return $i1;
    }

    private void reset(boolean)
    {
        androidx.media3.exoplayer.DefaultLoadControl r0;
        boolean z0;
        int $i0, $i1;
        androidx.media3.exoplayer.upstream.DefaultAllocator $r1;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl;

        z0 := @parameter0: boolean;

        $i0 = r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytesOverwrite>;

        if $i0 != -1 goto label1;

        $i1 = 13107200;

        goto label2;

     label1:
        $i1 = r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytesOverwrite>;

     label2:
        r0.<androidx.media3.exoplayer.DefaultLoadControl: int targetBufferBytes> = $i1;

        r0.<androidx.media3.exoplayer.DefaultLoadControl: boolean isLoading> = 0;

        if z0 == 0 goto label3;

        $r1 = r0.<androidx.media3.exoplayer.DefaultLoadControl: androidx.media3.exoplayer.upstream.DefaultAllocator allocator>;

        virtualinvoke $r1.<androidx.media3.exoplayer.upstream.DefaultAllocator: void reset()>();

     label3:
        return;
    }

    private static int getDefaultBufferSize(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -2: goto label8;
            case -1: goto label9;
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label7;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label9;
        };

     label1:
        return 144310272;

     label2:
        return 13107200;

     label3:
        return 131072000;

     label4:
        return 131072;

     label5:
        return 131072;

     label6:
        return 131072;

     label7:
        return 131072;

     label8:
        return 0;

     label9:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    private static void assertGreaterOrEqual(int, int, java.lang.String, java.lang.String)
    {
        int i0, i1;
        java.lang.String r0, r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        if i0 < i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be less than ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        return;
    }

    static void access$000(int, int, java.lang.String, java.lang.String)
    {
        int i0, i1;
        java.lang.String r0, r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void assertGreaterOrEqual(int,int,java.lang.String,java.lang.String)>(i0, i1, r0, r1);

        return;
    }

androidx.media3.exoplayer.DefaultLoadControl$Builder
<androidx.media3.exoplayer.DefaultLoadControl$Builder: androidx.media3.exoplayer.upstream.DefaultAllocator allocator>
<androidx.media3.exoplayer.DefaultLoadControl$Builder: int minBufferMs>
<androidx.media3.exoplayer.DefaultLoadControl$Builder: int maxBufferMs>
<androidx.media3.exoplayer.DefaultLoadControl$Builder: int bufferForPlaybackMs>
<androidx.media3.exoplayer.DefaultLoadControl$Builder: int bufferForPlaybackAfterRebufferMs>
<androidx.media3.exoplayer.DefaultLoadControl$Builder: int targetBufferBytes>
<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean prioritizeTimeOverSizeThresholds>
<androidx.media3.exoplayer.DefaultLoadControl$Builder: int backBufferDurationMs>
<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean retainBackBufferFromKeyframe>
<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean buildCalled>
    public void <init>()
    {
        androidx.media3.exoplayer.DefaultLoadControl$Builder r0;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int minBufferMs> = 50000;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int maxBufferMs> = 50000;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int bufferForPlaybackMs> = 2500;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int bufferForPlaybackAfterRebufferMs> = 5000;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int targetBufferBytes> = -1;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean prioritizeTimeOverSizeThresholds> = 0;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int backBufferDurationMs> = 0;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean retainBackBufferFromKeyframe> = 0;

        return;
    }

    public androidx.media3.exoplayer.DefaultLoadControl$Builder setAllocator(androidx.media3.exoplayer.upstream.DefaultAllocator)
    {
        androidx.media3.exoplayer.DefaultLoadControl$Builder r0;
        androidx.media3.exoplayer.upstream.DefaultAllocator r1;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.DefaultAllocator;

        $z0 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean buildCalled>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: androidx.media3.exoplayer.upstream.DefaultAllocator allocator> = r1;

        return r0;
    }

    public androidx.media3.exoplayer.DefaultLoadControl$Builder setBufferDurationsMs(int, int, int, int)
    {
        androidx.media3.exoplayer.DefaultLoadControl$Builder r0;
        int i0, i1, i2, i3;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $z0 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean buildCalled>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void access$000(int,int,java.lang.String,java.lang.String)>(i2, 0, "bufferForPlaybackMs", "0");

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void access$000(int,int,java.lang.String,java.lang.String)>(i3, 0, "bufferForPlaybackAfterRebufferMs", "0");

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void access$000(int,int,java.lang.String,java.lang.String)>(i0, i2, "minBufferMs", "bufferForPlaybackMs");

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void access$000(int,int,java.lang.String,java.lang.String)>(i0, i3, "minBufferMs", "bufferForPlaybackAfterRebufferMs");

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void access$000(int,int,java.lang.String,java.lang.String)>(i1, i0, "maxBufferMs", "minBufferMs");

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int minBufferMs> = i0;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int maxBufferMs> = i1;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int bufferForPlaybackMs> = i2;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int bufferForPlaybackAfterRebufferMs> = i3;

        return r0;
    }

    public androidx.media3.exoplayer.DefaultLoadControl$Builder setTargetBufferBytes(int)
    {
        androidx.media3.exoplayer.DefaultLoadControl$Builder r0;
        int i0;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl$Builder;

        i0 := @parameter0: int;

        $z0 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean buildCalled>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int targetBufferBytes> = i0;

        return r0;
    }

    public androidx.media3.exoplayer.DefaultLoadControl$Builder setPrioritizeTimeOverSizeThresholds(boolean)
    {
        androidx.media3.exoplayer.DefaultLoadControl$Builder r0;
        boolean z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl$Builder;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean buildCalled>;

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z2);

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean prioritizeTimeOverSizeThresholds> = z0;

        return r0;
    }

    public androidx.media3.exoplayer.DefaultLoadControl$Builder setBackBuffer(int, boolean)
    {
        androidx.media3.exoplayer.DefaultLoadControl$Builder r0;
        int i0;
        boolean z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl$Builder;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean buildCalled>;

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z2);

        staticinvoke <androidx.media3.exoplayer.DefaultLoadControl: void access$000(int,int,java.lang.String,java.lang.String)>(i0, 0, "backBufferDurationMs", "0");

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int backBufferDurationMs> = i0;

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean retainBackBufferFromKeyframe> = z0;

        return r0;
    }

    public androidx.media3.exoplayer.DefaultLoadControl createDefaultLoadControl()
    {
        androidx.media3.exoplayer.DefaultLoadControl$Builder r0;
        androidx.media3.exoplayer.DefaultLoadControl $r1;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl$Builder;

        $r1 = virtualinvoke r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: androidx.media3.exoplayer.DefaultLoadControl build()>();

        return $r1;
    }

    public androidx.media3.exoplayer.DefaultLoadControl build()
    {
        androidx.media3.exoplayer.DefaultLoadControl$Builder r0;
        boolean $z0, $z1, $z2, $z3;
        androidx.media3.exoplayer.upstream.DefaultAllocator $r1, $r3, $r4;
        androidx.media3.exoplayer.DefaultLoadControl $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: androidx.media3.exoplayer.DefaultLoadControl$Builder;

        $z0 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean buildCalled>;

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z3);

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean buildCalled> = 1;

        $r1 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: androidx.media3.exoplayer.upstream.DefaultAllocator allocator>;

        if $r1 != null goto label3;

        $r4 = new androidx.media3.exoplayer.upstream.DefaultAllocator;

        specialinvoke $r4.<androidx.media3.exoplayer.upstream.DefaultAllocator: void <init>(boolean,int)>(1, 65536);

        r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: androidx.media3.exoplayer.upstream.DefaultAllocator allocator> = $r4;

     label3:
        $r2 = new androidx.media3.exoplayer.DefaultLoadControl;

        $r3 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: androidx.media3.exoplayer.upstream.DefaultAllocator allocator>;

        $i5 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int minBufferMs>;

        $i4 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int maxBufferMs>;

        $i3 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int bufferForPlaybackMs>;

        $i2 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int bufferForPlaybackAfterRebufferMs>;

        $i1 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int targetBufferBytes>;

        $z2 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean prioritizeTimeOverSizeThresholds>;

        $i0 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: int backBufferDurationMs>;

        $z1 = r0.<androidx.media3.exoplayer.DefaultLoadControl$Builder: boolean retainBackBufferFromKeyframe>;

        specialinvoke $r2.<androidx.media3.exoplayer.DefaultLoadControl: void <init>(androidx.media3.exoplayer.upstream.DefaultAllocator,int,int,int,int,int,boolean,int,boolean)>($r3, $i5, $i4, $i3, $i2, $i1, $z2, $i0, $z1);

        return $r2;
    }

