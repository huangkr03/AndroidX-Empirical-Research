androidx.benchmark.macro.StartupTimingMetric
    public void <init>()
    {
        androidx.benchmark.macro.StartupTimingMetric r0;

        r0 := @this: androidx.benchmark.macro.StartupTimingMetric;

        specialinvoke r0.<androidx.benchmark.macro.Metric: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        return;
    }

    public void configure$benchmark_macro_release(java.lang.String)
    {
        androidx.benchmark.macro.StartupTimingMetric r0;
        java.lang.String r1;

        r0 := @this: androidx.benchmark.macro.StartupTimingMetric;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        return;
    }

    public void start$benchmark_macro_release()
    {
        androidx.benchmark.macro.StartupTimingMetric r0;

        r0 := @this: androidx.benchmark.macro.StartupTimingMetric;

        return;
    }

    public void stop$benchmark_macro_release()
    {
        androidx.benchmark.macro.StartupTimingMetric r0;

        r0 := @this: androidx.benchmark.macro.StartupTimingMetric;

        return;
    }

    public androidx.benchmark.macro.IterationResult getMetrics$benchmark_macro_release(androidx.benchmark.macro.Metric$CaptureInfo, java.lang.String)
    {
        androidx.benchmark.macro.StartupTimingMetric r0;
        androidx.benchmark.macro.Metric$CaptureInfo r1;
        java.lang.String r2, $r14, $r15;
        androidx.benchmark.macro.IterationResult r3, $r33, $r37;
        androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics r4;
        java.util.LinkedHashMap r6, $r21;
        java.util.Iterator r7;
        java.util.Map$Entry r8;
        java.lang.Double r9, $r16, $r35;
        kotlin.ranges.LongRange r10;
        java.util.Map r11, r12, $r23, $r36;
        androidx.benchmark.macro.perfetto.StartupTimingQuery $r13;
        int $i0;
        long $l1, $l3;
        double $d0, $d1;
        kotlin.Pair $r17, $r20;
        java.lang.Long $r19;
        java.util.Set $r22;
        androidx.benchmark.macro.IterationResult$Companion $r24;
        java.lang.Object $r25, $r26, $r27, $r28;
        androidx.benchmark.macro.StartupMode $r32;
        kotlin.Pair[] $r34;
        boolean $z3, $z4;

        r0 := @this: androidx.benchmark.macro.StartupTimingMetric;

        r1 := @parameter0: androidx.benchmark.macro.Metric$CaptureInfo;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "captureInfo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "tracePath");

        $r13 = <androidx.benchmark.macro.perfetto.StartupTimingQuery: androidx.benchmark.macro.perfetto.StartupTimingQuery INSTANCE>;

        $i0 = virtualinvoke r1.<androidx.benchmark.macro.Metric$CaptureInfo: int getApiLevel()>();

        $r14 = virtualinvoke r1.<androidx.benchmark.macro.Metric$CaptureInfo: java.lang.String getTargetPackageName()>();

        $r15 = virtualinvoke r1.<androidx.benchmark.macro.Metric$CaptureInfo: java.lang.String getTestPackageName()>();

        $r32 = virtualinvoke r1.<androidx.benchmark.macro.Metric$CaptureInfo: androidx.benchmark.macro.StartupMode getStartupMode()>();

        if $r32 != null goto label01;

        $r32 = <androidx.benchmark.macro.StartupMode: androidx.benchmark.macro.StartupMode COLD>;

     label01:
        r4 = virtualinvoke $r13.<androidx.benchmark.macro.perfetto.StartupTimingQuery: androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics getFrameSubMetrics(java.lang.String,int,java.lang.String,java.lang.String,androidx.benchmark.macro.StartupMode)>(r2, $i0, $r14, $r15, $r32);

        if r4 != null goto label02;

        $r33 = null;

        goto label09;

     label02:
        $r34 = newarray (kotlin.Pair)[2];

        $l1 = virtualinvoke r4.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: long getTimeToInitialDisplayNs()>();

        $d0 = staticinvoke <androidx.benchmark.macro.MetricKt: double access$nsToDoubleMs(long)>($l1);

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r17 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("timeToInitialDisplayMs", $r16);

        $r34[0] = $r17;

        $r19 = virtualinvoke r4.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: java.lang.Long getTimeToFullDisplayNs()>();

        if $r19 != null goto label03;

        $r35 = null;

        goto label04;

     label03:
        $l3 = virtualinvoke $r19.<java.lang.Long: long longValue()>();

        $d1 = staticinvoke <androidx.benchmark.macro.MetricKt: double access$nsToDoubleMs(long)>($l3);

        $r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

     label04:
        $r20 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("timeToFullDisplayMs", $r35);

        $r34[1] = $r20;

        $r36 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair[])>($r34);

        $r21 = new java.util.LinkedHashMap;

        specialinvoke $r21.<java.util.LinkedHashMap: void <init>()>();

        r6 = $r21;

        $r22 = interfaceinvoke $r36.<java.util.Map: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r25 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r25;

        $r26 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.Double) $r26;

        if r9 == null goto label06;

        $z4 = 1;

        goto label07;

     label06:
        $z4 = 0;

     label07:
        if $z4 == 0 goto label05;

        $r27 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r28 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r28);

        goto label05;

     label08:
        $r23 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        r10 = virtualinvoke r4.<androidx.benchmark.macro.perfetto.StartupTimingQuery$SubMetrics: kotlin.ranges.LongRange getTimelineRangeNs()>();

        r11 = $r23;

        r12 = (java.util.Map) r6;

        $r33 = new androidx.benchmark.macro.IterationResult;

        specialinvoke $r33.<androidx.benchmark.macro.IterationResult: void <init>(java.util.Map,java.util.Map,kotlin.ranges.LongRange)>(r12, r11, r10);

     label09:
        r3 = $r33;

        if r3 != null goto label10;

        $r24 = <androidx.benchmark.macro.IterationResult: androidx.benchmark.macro.IterationResult$Companion Companion>;

        $r37 = virtualinvoke $r24.<androidx.benchmark.macro.IterationResult$Companion: androidx.benchmark.macro.IterationResult getEMPTY()>();

        goto label11;

     label10:
        $r37 = r3;

     label11:
        return $r37;
    }

