androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.String TAG>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: android.os.Handler mCompatHandler>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mOpenCaptureSessionFuture>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mStartingSurface>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.List mHeldDeferrableSurfaces>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mClosed>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mOpenerDisabled>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mSessionFinished>
    void <init>(androidx.camera.camera2.internal.CaptureSessionRepository, java.util.concurrent.Executor, java.util.concurrent.ScheduledExecutorService, android.os.Handler)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.CaptureSessionRepository r1;
        java.util.concurrent.Executor r2;
        java.util.concurrent.ScheduledExecutorService r3;
        android.os.Handler r4;
        java.lang.Object $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSessionRepository;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: java.util.concurrent.ScheduledExecutorService;

        r4 := @parameter3: android.os.Handler;

        specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock> = $r5;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.List mHeldDeferrableSurfaces> = null;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mClosed> = 0;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mOpenerDisabled> = 0;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mSessionFinished> = 0;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository> = r1;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: android.os.Handler mCompatHandler> = r4;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor mExecutor> = r2;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService> = r3;

        return;
    }

    public androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback getStateCallback()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        return r0;
    }

    public com.google.common.util.concurrent.ListenableFuture getOpeningBlocker()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r1 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        return $r1;
    }

    public com.google.common.util.concurrent.ListenableFuture openCaptureSession(android.hardware.camera2.CameraDevice, androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat, java.util.List)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        android.hardware.camera2.CameraDevice r1;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat r2;
        java.util.List r3;
        java.lang.Object r4, $r7;
        androidx.camera.camera2.internal.compat.CameraDeviceCompat r5;
        java.lang.Throwable r6, $r19;
        boolean $z0;
        androidx.camera.camera2.internal.CaptureSessionRepository $r8;
        android.os.Handler $r9;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r10;
        com.google.common.util.concurrent.ListenableFuture $r11, $r13, $r15, $r16, $r18;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1 $r12;
        java.util.concurrent.Executor $r14;
        java.util.concurrent.CancellationException $r17;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        r2 := @parameter1: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat;

        r3 := @parameter2: java.util.List;

        $r7 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r4 = $r7;

        entermonitor $r7;

     label1:
        $z0 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mOpenerDisabled>;

        if $z0 == 0 goto label3;

        $r17 = new java.util.concurrent.CancellationException;

        specialinvoke $r17.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Opener is disabled");

        $r18 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r17);

        exitmonitor r4;

     label2:
        return $r18;

     label3:
        $r8 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        virtualinvoke $r8.<androidx.camera.camera2.internal.CaptureSessionRepository: void onCreateCaptureSession(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r0);

        $r9 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: android.os.Handler mCompatHandler>;

        r5 = staticinvoke <androidx.camera.camera2.internal.compat.CameraDeviceCompat: androidx.camera.camera2.internal.compat.CameraDeviceCompat toCameraDeviceCompat(android.hardware.camera2.CameraDevice,android.os.Handler)>(r1, $r9);

        $r10 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl,java.util.List,androidx.camera.camera2.internal.compat.CameraDeviceCompat,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat)>(r0, r3, r5, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object lambda$openCaptureSession$0(java.util.List,androidx.camera.camera2.internal.compat.CameraDeviceCompat,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r11 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r10);

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mOpenCaptureSessionFuture> = $r11;

        $r13 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mOpenCaptureSessionFuture>;

        $r12 = new androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1;

        specialinvoke $r12.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1: void <init>(androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl)>(r0);

        $r14 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>($r13, $r12, $r14);

        $r15 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mOpenCaptureSessionFuture>;

        $r16 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r15);

        exitmonitor r4;

     label4:
        return $r16;

     label5:
        $r19 := @caughtexception;

        r6 = $r19;

        exitmonitor r4;

     label6:
        throw r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    boolean isCameraCaptureSessionOpen()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.lang.Object r1, $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mOpenCaptureSessionFuture>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        exitmonitor r1;

        return $z0;
    }

    public androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat createSessionConfigurationCompat(int, java.util.List, androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        int i0;
        java.util.List r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r2;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat $r3;
        java.util.concurrent.Executor $r4;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2 $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback> = r2;

        $r3 = new androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat;

        $r4 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor getExecutor()>();

        $r5 = new androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2;

        specialinvoke $r5.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: void <init>(androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl)>(r0);

        specialinvoke $r3.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: void <init>(int,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$StateCallback)>(i0, r1, $r4, $r5);

        return $r3;
    }

    public java.util.concurrent.Executor getExecutor()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor mExecutor>;

        return $r1;
    }

    void createCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        android.hardware.camera2.CameraCaptureSession r1;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r2, $r4;
        android.os.Handler $r3;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        if $r2 != null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: android.os.Handler mCompatHandler>;

        $r4 = staticinvoke <androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat toCameraCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession,android.os.Handler)>(r1, $r3);

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat> = $r4;

     label1:
        return;
    }

    public com.google.common.util.concurrent.ListenableFuture startWithDeferrableSurface(java.util.List, long)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.util.List r1;
        long l0;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r16;
        boolean $z0;
        java.util.concurrent.Executor $r5, $r10;
        java.util.concurrent.ScheduledExecutorService $r6;
        com.google.common.util.concurrent.ListenableFuture $r7, $r12, $r13, $r15;
        androidx.camera.core.impl.utils.futures.FutureChain $r8, $r11;
        androidx.camera.core.impl.utils.futures.AsyncFunction $r9;
        java.util.concurrent.CancellationException $r14;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: java.util.List;

        l0 := @parameter1: long;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mOpenerDisabled>;

        if $z0 == 0 goto label3;

        $r14 = new java.util.concurrent.CancellationException;

        specialinvoke $r14.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Opener is disabled");

        $r15 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r14);

        exitmonitor r2;

     label2:
        return $r15;

     label3:
        $r5 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor getExecutor()>();

        $r6 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r7 = staticinvoke <androidx.camera.core.impl.DeferrableSurfaces: com.google.common.util.concurrent.ListenableFuture surfaceListWithTimeout(java.util.Collection,boolean,long,java.util.concurrent.Executor,java.util.concurrent.ScheduledExecutorService)>(r1, 0, l0, $r5, $r6);

        $r8 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>($r7);

        $r9 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl,java.util.List)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture lambda$startWithDeferrableSurface$1(java.util.List,java.util.List)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.util.List));

        $r10 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor getExecutor()>();

        $r11 = virtualinvoke $r8.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r9, $r10);

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mStartingSurface> = $r11;

        $r12 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mStartingSurface>;

        $r13 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r12);

        exitmonitor r2;

     label4:
        return $r13;

     label5:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean stop()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.lang.Object r1, $r4;
        boolean z0, $z1, $z4, $z5;
        java.lang.Throwable r2, r3, $r6, $r7;
        com.google.common.util.concurrent.ListenableFuture $r5, r8;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r8 = null;

     label01:
        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label02:
        $z1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mOpenerDisabled>;

        if $z1 != 0 goto label04;

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mStartingSurface>;

        if $r5 == null goto label03;

        r8 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mStartingSurface>;

     label03:
        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mOpenerDisabled> = 1;

     label04:
        $z4 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean isCameraCaptureSessionOpen()>();

        if $z4 != 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        z0 = $z5;

        exitmonitor r1;

     label07:
        if r8 == null goto label08;

        interfaceinvoke r8.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

     label08:
        return z0;

     label09:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label10:
        throw r2;

     label11:
        $r6 := @caughtexception;

        r3 = $r6;

     label12:
        if r8 == null goto label13;

        interfaceinvoke r8.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

     label13:
        throw r3;

        catch java.lang.Throwable from label02 to label07 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label07 with label11;
        catch java.lang.Throwable from label09 to label12 with label11;
    }

    public androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat toCameraCaptureSessionCompat()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r1, $r3;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        return $r3;
    }

    public android.hardware.camera2.CameraDevice getDevice()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r1, $r3;
        android.hardware.camera2.CameraCaptureSession $r4;
        android.hardware.camera2.CameraDevice $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: android.hardware.camera2.CameraCaptureSession toCameraCaptureSession()>();

        $r5 = virtualinvoke $r4.<android.hardware.camera2.CameraCaptureSession: android.hardware.camera2.CameraDevice getDevice()>();

        return $r5;
    }

    public android.view.Surface getInputSurface()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r1, $r3;
        int $i0;
        android.hardware.camera2.CameraCaptureSession $r4;
        android.view.Surface $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: android.hardware.camera2.CameraCaptureSession toCameraCaptureSession()>();

        $r5 = staticinvoke <androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$Api23Impl: android.view.Surface getInputSurface(android.hardware.camera2.CameraCaptureSession)>($r4);

        return $r5;

     label1:
        return null;
    }

    public int captureSingleRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r3, $r5;
        java.util.concurrent.Executor $r6;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "Need to call openCaptureSession before using this API.");

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $r6 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor getExecutor()>();

        $i0 = virtualinvoke $r5.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: int captureSingleRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, $r6, r2);

        return $i0;
    }

    public int captureBurstRequests(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r3, $r5;
        java.util.concurrent.Executor $r6;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "Need to call openCaptureSession before using this API.");

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $r6 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor getExecutor()>();

        $i0 = virtualinvoke $r5.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, $r6, r2);

        return $i0;
    }

    public int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r3, $r5;
        java.util.concurrent.Executor $r6;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "Need to call openCaptureSession before using this API.");

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $r6 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor getExecutor()>();

        $i0 = virtualinvoke $r5.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, $r6, r2);

        return $i0;
    }

    public int setRepeatingBurstRequests(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r3, $r5;
        java.util.concurrent.Executor $r6;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "Need to call openCaptureSession before using this API.");

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $r6 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor getExecutor()>();

        $i0 = virtualinvoke $r5.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: int setRepeatingBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, $r6, r2);

        return $i0;
    }

    public int captureSingleRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r4, $r6;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "Need to call openCaptureSession before using this API.");

        $r6 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $i0 = virtualinvoke $r6.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: int captureSingleRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;
    }

    public int captureBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r4, $r6;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "Need to call openCaptureSession before using this API.");

        $r6 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $i0 = virtualinvoke $r6.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;
    }

    public int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r4, $r6;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "Need to call openCaptureSession before using this API.");

        $r6 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $i0 = virtualinvoke $r6.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;
    }

    public int setRepeatingBurstRequests(java.util.List, java.util.concurrent.Executor, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r3;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r4, $r6;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "Need to call openCaptureSession before using this API.");

        $r6 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $i0 = virtualinvoke $r6.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: int setRepeatingBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2, r3);

        return $i0;
    }

    public void stopRepeating() throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r1, $r3;
        android.hardware.camera2.CameraCaptureSession $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "Need to call openCaptureSession before using this API.");

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: android.hardware.camera2.CameraCaptureSession toCameraCaptureSession()>();

        virtualinvoke $r4.<android.hardware.camera2.CameraCaptureSession: void stopRepeating()>();

        return;
    }

    public void abortCaptures() throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r1, $r3;
        android.hardware.camera2.CameraCaptureSession $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "Need to call openCaptureSession before using this API.");

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: android.hardware.camera2.CameraCaptureSession toCameraCaptureSession()>();

        virtualinvoke $r4.<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>();

        return;
    }

    public void close()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat $r1, $r4;
        androidx.camera.camera2.internal.CaptureSessionRepository $r3;
        android.hardware.camera2.CameraCaptureSession $r5;
        java.util.concurrent.Executor $r6;
        java.lang.Runnable $r7;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "Need to call openCaptureSession before using this API.");

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        virtualinvoke $r3.<androidx.camera.camera2.internal.CaptureSessionRepository: void onCaptureSessionClosing(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r0);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat mCameraCaptureSessionCompat>;

        $r5 = virtualinvoke $r4.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat: android.hardware.camera2.CameraCaptureSession toCameraCaptureSession()>();

        virtualinvoke $r5.<android.hardware.camera2.CameraCaptureSession: void close()>();

        $r6 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.concurrent.Executor getExecutor()>();

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void lambda$close$2()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        return;
    }

    public void onReady(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r2, $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onReady(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        return;
    }

    public void onActive(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r2, $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onActive(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        return;
    }

    public void onCaptureQueueEmpty(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r2, $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onCaptureQueueEmpty(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        return;
    }

    public void onSurfacePrepared(androidx.camera.camera2.internal.SynchronizedCaptureSession, android.view.Surface)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        android.view.Surface r2;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r3, $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        r2 := @parameter1: android.view.Surface;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onSurfacePrepared(androidx.camera.camera2.internal.SynchronizedCaptureSession,android.view.Surface)>(r1, r2);

        return;
    }

    public void onConfigured(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r2, $r5;
        androidx.camera.camera2.internal.CaptureSessionRepository $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.CaptureSessionRepository: void onCaptureSessionCreated(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r0);

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onConfigured(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        return;
    }

    public void onConfigureFailed(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r2, $r5;
        androidx.camera.camera2.internal.CaptureSessionRepository $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void finishClose()>();

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.CaptureSessionRepository: void onCaptureSessionConfigureFail(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r0);

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onConfigureFailed(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        return;
    }

    public void onClosed(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        boolean $z0;
        java.lang.Runnable $r5;
        java.util.concurrent.Executor $r6;
        com.google.common.util.concurrent.ListenableFuture $r7, r10;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        r10 = null;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mClosed>;

        if $z0 != 0 goto label2;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mClosed> = 1;

        $r7 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mOpenCaptureSessionFuture>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r7, "Need to call openCaptureSession before using this API.");

        r10 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mOpenCaptureSessionFuture>;

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void finishClose()>();

        if r10 == null goto label7;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl,androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void lambda$onClosed$3(androidx.camera.camera2.internal.SynchronizedCaptureSession)>, methodtype: void __METHODTYPE__());

        $r6 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke r10.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r5, $r6);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void onSessionFinished(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        boolean $z0;
        java.lang.Runnable $r5;
        java.util.concurrent.Executor $r6;
        com.google.common.util.concurrent.ListenableFuture $r7, r10;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        r10 = null;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mSessionFinished>;

        if $z0 != 0 goto label2;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean mSessionFinished> = 1;

        $r7 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mOpenCaptureSessionFuture>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r7, "Need to call openCaptureSession before using this API.");

        r10 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture mOpenCaptureSessionFuture>;

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        if r10 == null goto label7;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl,androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void lambda$onSessionFinished$4(androidx.camera.camera2.internal.SynchronizedCaptureSession)>, methodtype: void __METHODTYPE__());

        $r6 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke r10.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r5, $r6);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void holdDeferrableSurfaces(java.util.List) throws androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.util.List r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: java.util.List;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void releaseDeferrableSurfaces()>();

        staticinvoke <androidx.camera.core.impl.DeferrableSurfaces: void incrementAll(java.util.List)>(r1);

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.List mHeldDeferrableSurfaces> = r1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void releaseDeferrableSurfaces()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.util.List $r4, $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.List mHeldDeferrableSurfaces>;

        if $r4 == null goto label2;

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.List mHeldDeferrableSurfaces>;

        staticinvoke <androidx.camera.core.impl.DeferrableSurfaces: void decrementAll(java.util.List)>($r5);

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.util.List mHeldDeferrableSurfaces> = null;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void finishClose()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void releaseDeferrableSurfaces()>();

        return;
    }

    private void lambda$onSessionFinished$4(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r2, $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onSessionFinished(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        return;
    }

    private void lambda$onClosed$3(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        androidx.camera.camera2.internal.CaptureSessionRepository $r2;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback $r3, $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.CaptureSessionRepository: void onCaptureSessionClosed(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r0);

        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onSessionFinished(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3);

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback mCaptureSessionStateCallback>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void onClosed(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        return;
    }

    private void lambda$close$2()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onSessionFinished(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r0);

        return;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$startWithDeferrableSurface$1(java.util.List, java.util.List) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.util.List r1, r2;
        androidx.camera.core.impl.DeferrableSurface r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0, $z1;
        com.google.common.util.concurrent.ListenableFuture $r9, $r11, $r14;
        java.lang.IllegalArgumentException $r10;
        int $i0;
        java.lang.Object $r12;
        androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException $r13;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] getSurface...done");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("SyncCaptureSessionBase", $r8);

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(null);

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke r2.<java.util.List: int indexOf(java.lang.Object)>(null);

        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (androidx.camera.core.impl.DeferrableSurface) $r12;

        $r13 = new androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException;

        specialinvoke $r13.<androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException: void <init>(java.lang.String,androidx.camera.core.impl.DeferrableSurface)>("Surface closed", r3);

        $r14 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r13);

        return $r14;

     label1:
        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to open capture session without surfaces");

        $r11 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r10);

        return $r11;

     label2:
        $r9 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(r2);

        return $r9;
    }

    private java.lang.Object lambda$openCaptureSession$0(java.util.List, androidx.camera.camera2.internal.compat.CameraDeviceCompat, androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r0;
        java.util.List r1;
        androidx.camera.camera2.internal.compat.CameraDeviceCompat r2;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r4, $r8;
        java.lang.Object r5, $r7;
        java.lang.Throwable r6, $r14;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        java.lang.String $r13;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.camera.camera2.internal.compat.CameraDeviceCompat;

        r3 := @parameter2: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat;

        r4 := @parameter3: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r7 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r5 = $r7;

        entermonitor $r7;

     label1:
        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void holdDeferrableSurfaces(java.util.List)>(r1);

        $r8 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>;

        if $r8 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "The openCaptureSessionCompleter can only set once!");

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter> = r4;

        virtualinvoke r2.<androidx.camera.camera2.internal.compat.CameraDeviceCompat: void createCaptureSession(androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat)>(r3);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("openCaptureSession[session=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r5;

     label4:
        return $r13;

     label5:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r5;

     label6:
        throw r6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>
    void <init>(androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1 r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1 r0;
        java.lang.Void r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1;

        r1 := @parameter0: java.lang.Void;

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1 r0;
        java.lang.Throwable r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl $r2, $r3, $r4;
        androidx.camera.camera2.internal.CaptureSessionRepository $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void finishClose()>();

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r5 = $r3.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.CaptureSessionRepository: void onCaptureSessionConfigureFail(androidx.camera.camera2.internal.SynchronizedCaptureSession)>($r4);

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$1: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2
<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>
    void <init>(androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2 r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl;

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0> = r1;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession$StateCallback: void <init>()>();

        return;
    }

    public void onReady(android.hardware.camera2.CameraCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl $r2, $r3, $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void createCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession)>(r1);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onReady(androidx.camera.camera2.internal.SynchronizedCaptureSession)>($r3);

        return;
    }

    public void onActive(android.hardware.camera2.CameraCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl $r2, $r3, $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void createCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession)>(r1);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onActive(androidx.camera.camera2.internal.SynchronizedCaptureSession)>($r3);

        return;
    }

    public void onCaptureQueueEmpty(android.hardware.camera2.CameraCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl $r2, $r3, $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void createCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession)>(r1);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onCaptureQueueEmpty(androidx.camera.camera2.internal.SynchronizedCaptureSession)>($r3);

        return;
    }

    public void onSurfacePrepared(android.hardware.camera2.CameraCaptureSession, android.view.Surface)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.view.Surface r2;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl $r3, $r4, $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.view.Surface;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r3.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void createCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession)>(r1);

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onSurfacePrepared(androidx.camera.camera2.internal.SynchronizedCaptureSession,android.view.Surface)>($r4, r2);

        return;
    }

    public void onConfigured(android.hardware.camera2.CameraCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2, r6, $r15, $r24;
        java.lang.Object r3, r7, $r13, $r22;
        java.lang.Throwable r4, r5, r8, $r19, $r20, $r28;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl $r9, $r10, $r11, $r12, $r14, $r17, $r18, $r21, $r23, $r26, $r27;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

     label01:
        $r9 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r9.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void createCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession)>(r1);

        $r11 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r10 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r11.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onConfigured(androidx.camera.camera2.internal.SynchronizedCaptureSession)>($r10);

     label02:
        $r12 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r13 = $r12.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r3 = $r13;

        entermonitor $r13;

     label03:
        $r14 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r15 = $r14.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r15, "OpenCaptureSession completer should not null");

        $r17 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        r2 = $r17.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>;

        $r18 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r18.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter> = null;

        exitmonitor r3;

     label04:
        goto label07;

     label05:
        $r28 := @caughtexception;

        r4 = $r28;

        exitmonitor r3;

     label06:
        throw r4;

     label07:
        virtualinvoke r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        goto label15;

     label08:
        $r20 := @caughtexception;

        r5 = $r20;

     label09:
        $r21 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r22 = $r21.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r7 = $r22;

        entermonitor $r22;

     label10:
        $r23 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r24 = $r23.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r24, "OpenCaptureSession completer should not null");

        $r26 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        r6 = $r26.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>;

        $r27 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r27.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter> = null;

        exitmonitor r7;

     label11:
        goto label14;

     label12:
        $r19 := @caughtexception;

        r8 = $r19;

        exitmonitor r7;

     label13:
        throw r8;

     label14:
        virtualinvoke r6.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        throw r5;

     label15:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2, r6, $r15, $r24;
        java.lang.Object r3, r7, $r13, $r22;
        java.lang.Throwable r4, r5, r8, $r20, $r29, $r30;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl $r9, $r10, $r11, $r12, $r14, $r17, $r18, $r21, $r23, $r26, $r27;
        java.lang.IllegalStateException $r19, $r28;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

     label01:
        $r9 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r9.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void createCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession)>(r1);

        $r11 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r10 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r11.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onConfigureFailed(androidx.camera.camera2.internal.SynchronizedCaptureSession)>($r10);

     label02:
        $r12 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r13 = $r12.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r3 = $r13;

        entermonitor $r13;

     label03:
        $r14 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r15 = $r14.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r15, "OpenCaptureSession completer should not null");

        $r17 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        r2 = $r17.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>;

        $r18 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r18.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter> = null;

        exitmonitor r3;

     label04:
        goto label07;

     label05:
        $r29 := @caughtexception;

        r4 = $r29;

        exitmonitor r3;

     label06:
        throw r4;

     label07:
        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("onConfigureFailed");

        virtualinvoke r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r19);

        goto label15;

     label08:
        $r20 := @caughtexception;

        r5 = $r20;

     label09:
        $r21 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r22 = $r21.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: java.lang.Object mLock>;

        r7 = $r22;

        entermonitor $r22;

     label10:
        $r23 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r24 = $r23.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r24, "OpenCaptureSession completer should not null");

        $r26 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        r6 = $r26.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter>;

        $r27 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r27.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mOpenCaptureSessionCompleter> = null;

        exitmonitor r7;

     label11:
        goto label14;

     label12:
        $r30 := @caughtexception;

        r8 = $r30;

        exitmonitor r7;

     label13:
        throw r8;

     label14:
        $r28 = new java.lang.IllegalStateException;

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>("onConfigureFailed");

        virtualinvoke r6.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r28);

        throw r5;

     label15:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void onClosed(android.hardware.camera2.CameraCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl $r2, $r3, $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void createCaptureSessionCompat(android.hardware.camera2.CameraCaptureSession)>(r1);

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$2: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl this$0>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onClosed(androidx.camera.camera2.internal.SynchronizedCaptureSession)>($r3);

        return;
    }

androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$Api23Impl
    private void <init>()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$Api23Impl r0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl$Api23Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.view.Surface getInputSurface(android.hardware.camera2.CameraCaptureSession)
    {
        android.hardware.camera2.CameraCaptureSession r0;
        android.view.Surface $r1;

        r0 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        $r1 = virtualinvoke r0.<android.hardware.camera2.CameraCaptureSession: android.view.Surface getInputSurface()>();

        return $r1;
    }

