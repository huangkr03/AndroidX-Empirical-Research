androidx.media3.exoplayer.trackselection.ExoTrackSelection
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: void enable()>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: void disable()>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.Format getSelectedFormat()>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getSelectedIndexInTrackGroup()>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getSelectedIndex()>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getSelectionReason()>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: java.lang.Object getSelectionData()>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: void onPlaybackSpeed(float)>
    public void onDiscontinuity()
    {
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r0;

        r0 := @this: androidx.media3.exoplayer.trackselection.ExoTrackSelection;

        return;
    }

    public void onRebuffer()
    {
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r0;

        r0 := @this: androidx.media3.exoplayer.trackselection.ExoTrackSelection;

        return;
    }

    public void onPlayWhenReadyChanged(boolean)
    {
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r0;
        boolean z0;

        r0 := @this: androidx.media3.exoplayer.trackselection.ExoTrackSelection;

        z0 := @parameter0: boolean;

        return;
    }

<androidx.media3.exoplayer.trackselection.ExoTrackSelection: void updateSelectedTrack(long,long,long,java.util.List,androidx.media3.exoplayer.source.chunk.MediaChunkIterator[])>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int evaluateQueueSize(long,java.util.List)>
    public boolean shouldCancelChunkLoad(long, androidx.media3.exoplayer.source.chunk.Chunk, java.util.List)
    {
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r0;
        long l0;
        androidx.media3.exoplayer.source.chunk.Chunk r1;
        java.util.List r2;

        r0 := @this: androidx.media3.exoplayer.trackselection.ExoTrackSelection;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.media3.exoplayer.source.chunk.Chunk;

        r2 := @parameter2: java.util.List;

        return 0;
    }

<androidx.media3.exoplayer.trackselection.ExoTrackSelection: boolean blacklist(int,long)>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection: boolean isBlacklisted(int,long)>
androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition
<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: androidx.media3.common.TrackGroup group>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int type>
<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: java.lang.String TAG>
    public transient void <init>(androidx.media3.common.TrackGroup, int[])
    {
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition r0;
        androidx.media3.common.TrackGroup r1;
        int[] r2;

        r0 := @this: androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition;

        r1 := @parameter0: androidx.media3.common.TrackGroup;

        r2 := @parameter1: int[];

        specialinvoke r0.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: void <init>(androidx.media3.common.TrackGroup,int[],int)>(r1, r2, 0);

        return;
    }

    public void <init>(androidx.media3.common.TrackGroup, int[], int)
    {
        androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition r0;
        androidx.media3.common.TrackGroup r1;
        int[] r2;
        int i0, $i1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition;

        r1 := @parameter0: androidx.media3.common.TrackGroup;

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof r2;

        if $i1 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        staticinvoke <androidx.media3.common.util.Log: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("ETSDefinition", "Empty tracks are not allowed", $r3);

     label1:
        r0.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: androidx.media3.common.TrackGroup group> = r1;

        r0.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int[] tracks> = r2;

        r0.<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition: int type> = i0;

        return;
    }

androidx.media3.exoplayer.trackselection.ExoTrackSelection$Factory
<androidx.media3.exoplayer.trackselection.ExoTrackSelection$Factory: androidx.media3.exoplayer.trackselection.ExoTrackSelection[] createTrackSelections(androidx.media3.exoplayer.trackselection.ExoTrackSelection$Definition[],androidx.media3.exoplayer.upstream.BandwidthMeter,androidx.media3.exoplayer.source.MediaSource$MediaPeriodId,androidx.media3.common.Timeline)>
