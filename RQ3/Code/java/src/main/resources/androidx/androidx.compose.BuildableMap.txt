androidx.compose.BuildableMap
<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap map>
<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate>
    public void <init>(kotlinx.collections.immutable.PersistentMap)
    {
        androidx.compose.BuildableMap r0;
        kotlinx.collections.immutable.PersistentMap r1;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: kotlinx.collections.immutable.PersistentMap;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "map");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap map> = r1;

        r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate> = r1;

        return;
    }

    public final kotlinx.collections.immutable.PersistentMap getMap()
    {
        androidx.compose.BuildableMap r0;
        kotlinx.collections.immutable.PersistentMap $r1;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap map>;

        return $r1;
    }

    public boolean containsKey(java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1;
        kotlinx.collections.immutable.PersistentMap $r2;
        boolean $z0;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate>;

        $z0 = interfaceinvoke $r2.<kotlinx.collections.immutable.PersistentMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1;
        kotlinx.collections.immutable.PersistentMap $r2;
        boolean $z0;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate>;

        $z0 = interfaceinvoke $r2.<kotlinx.collections.immutable.PersistentMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1, $r3;
        kotlinx.collections.immutable.PersistentMap $r2;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate>;

        $r3 = interfaceinvoke $r2.<kotlinx.collections.immutable.PersistentMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean isEmpty()
    {
        androidx.compose.BuildableMap r0;
        kotlinx.collections.immutable.PersistentMap $r1;
        boolean $z0;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate>;

        $z0 = interfaceinvoke $r1.<kotlinx.collections.immutable.PersistentMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set getEntries()
    {
        androidx.compose.BuildableMap r0;
        kotlinx.collections.immutable.PersistentMap $r1;
        java.util.Set $r2, $r4;
        kotlinx.collections.immutable.ImmutableSet $r3;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate>;

        $r2 = interfaceinvoke $r1.<kotlinx.collections.immutable.PersistentMap: java.util.Set entrySet()>();

        $r3 = (kotlinx.collections.immutable.ImmutableSet) $r2;

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    public java.util.Set getKeys()
    {
        androidx.compose.BuildableMap r0;
        kotlinx.collections.immutable.PersistentMap $r1;
        java.util.Set $r2, $r4;
        kotlinx.collections.immutable.ImmutableSet $r3;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate>;

        $r2 = interfaceinvoke $r1.<kotlinx.collections.immutable.PersistentMap: java.util.Set keySet()>();

        $r3 = (kotlinx.collections.immutable.ImmutableSet) $r2;

        $r4 = (java.util.Set) $r3;

        return $r4;
    }

    public int getSize()
    {
        androidx.compose.BuildableMap r0;
        kotlinx.collections.immutable.PersistentMap $r1;
        int $i0;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate>;

        $i0 = interfaceinvoke $r1.<kotlinx.collections.immutable.PersistentMap: int size()>();

        return $i0;
    }

    public java.util.Collection getValues()
    {
        androidx.compose.BuildableMap r0;
        kotlinx.collections.immutable.PersistentMap $r1;
        java.util.Collection $r2, $r4;
        kotlinx.collections.immutable.ImmutableCollection $r3;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap BuildableMap$Map$delegate>;

        $r2 = interfaceinvoke $r1.<kotlinx.collections.immutable.PersistentMap: java.util.Collection values()>();

        $r3 = (kotlinx.collections.immutable.ImmutableCollection) $r2;

        $r4 = (java.util.Collection) $r3;

        return $r4;
    }

    public final androidx.compose.BuildableMapBuilder builder$compose_runtime_release()
    {
        androidx.compose.BuildableMap r0;
        androidx.compose.BuildableMapBuilder $r1;
        kotlinx.collections.immutable.PersistentMap $r2;
        kotlinx.collections.immutable.PersistentMap$Builder $r3;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = new androidx.compose.BuildableMapBuilder;

        $r2 = virtualinvoke r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap getMap()>();

        $r3 = interfaceinvoke $r2.<kotlinx.collections.immutable.PersistentMap: kotlinx.collections.immutable.PersistentMap$Builder builder()>();

        specialinvoke $r1.<androidx.compose.BuildableMapBuilder: void <init>(kotlinx.collections.immutable.PersistentMap$Builder)>($r3);

        return $r1;
    }

    public final kotlinx.collections.immutable.PersistentMap component1()
    {
        androidx.compose.BuildableMap r0;
        kotlinx.collections.immutable.PersistentMap $r1;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap map>;

        return $r1;
    }

    public final androidx.compose.BuildableMap copy(kotlinx.collections.immutable.PersistentMap)
    {
        androidx.compose.BuildableMap r0, $r2;
        kotlinx.collections.immutable.PersistentMap r1;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: kotlinx.collections.immutable.PersistentMap;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "map");

        $r2 = new androidx.compose.BuildableMap;

        specialinvoke $r2.<androidx.compose.BuildableMap: void <init>(kotlinx.collections.immutable.PersistentMap)>(r1);

        return $r2;
    }

    public static androidx.compose.BuildableMap copy$default(androidx.compose.BuildableMap, kotlinx.collections.immutable.PersistentMap, int, java.lang.Object)
    {
        androidx.compose.BuildableMap r0, $r2;
        int i0, $i1;
        java.lang.Object r1;
        kotlinx.collections.immutable.PersistentMap r3;

        r0 := @parameter0: androidx.compose.BuildableMap;

        r3 := @parameter1: kotlinx.collections.immutable.PersistentMap;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap map>;

     label1:
        $r2 = virtualinvoke r0.<androidx.compose.BuildableMap: androidx.compose.BuildableMap copy(kotlinx.collections.immutable.PersistentMap)>(r3);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.compose.BuildableMap r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        kotlinx.collections.immutable.PersistentMap $r3;
        java.lang.String $r6;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BuildableMap(map=");

        $r3 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap map>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public int hashCode()
    {
        androidx.compose.BuildableMap r0;
        kotlinx.collections.immutable.PersistentMap $r1;
        int $i0;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap map>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.compose.BuildableMap r0, r2;
        java.lang.Object r1, r3;
        boolean $z0, $z1;
        kotlinx.collections.immutable.PersistentMap $r4, $r5;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.compose.BuildableMap;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r3 = r1;

        r2 = (androidx.compose.BuildableMap) r3;

        $r5 = r0.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap map>;

        $r4 = r2.<androidx.compose.BuildableMap: kotlinx.collections.immutable.PersistentMap map>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1;
        java.util.function.BiFunction r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.function.BiFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "p1");

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r3;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r3;
    }

    public void putAll(java.util.Map)
    {
        androidx.compose.BuildableMap r0;
        java.util.Map r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "from");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public java.lang.Object compute(java.lang.Object, java.util.function.BiFunction)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1;
        java.util.function.BiFunction r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.function.BiFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "p1");

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r3;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r3;
    }

    public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1;
        java.util.function.Function r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.function.Function;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "p1");

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r3;
    }

    public java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1, r2;
        java.util.function.BiFunction r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.function.BiFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "p2");

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r4;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r3;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r3;
    }

    public void replaceAll(java.util.function.BiFunction)
    {
        androidx.compose.BuildableMap r0;
        java.util.function.BiFunction r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.util.function.BiFunction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1, r2, r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r4;
    }

    public void clear()
    {
        androidx.compose.BuildableMap r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final volatile java.util.Set entrySet()
    {
        androidx.compose.BuildableMap r0;
        java.util.Set $r1;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = virtualinvoke r0.<androidx.compose.BuildableMap: java.util.Set getEntries()>();

        return $r1;
    }

    public final volatile java.util.Set keySet()
    {
        androidx.compose.BuildableMap r0;
        java.util.Set $r1;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = virtualinvoke r0.<androidx.compose.BuildableMap: java.util.Set getKeys()>();

        return $r1;
    }

    public final volatile int size()
    {
        androidx.compose.BuildableMap r0;
        int $i0;

        r0 := @this: androidx.compose.BuildableMap;

        $i0 = virtualinvoke r0.<androidx.compose.BuildableMap: int getSize()>();

        return $i0;
    }

    public final volatile java.util.Collection values()
    {
        androidx.compose.BuildableMap r0;
        java.util.Collection $r1;

        r0 := @this: androidx.compose.BuildableMap;

        $r1 = virtualinvoke r0.<androidx.compose.BuildableMap: java.util.Collection getValues()>();

        return $r1;
    }

    public final volatile java.lang.Object getOrDefault(java.lang.Object, java.lang.Object)
    {
        androidx.compose.BuildableMap r0;
        java.lang.Object r1, r2, r3, $r4;

        r0 := @this: androidx.compose.BuildableMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = r1;

        if r3 != null goto label1;

     label1:
        $r4 = virtualinvoke r0.<androidx.compose.BuildableMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

