androidx.tv.foundation.PivotOffsets
<androidx.tv.foundation.PivotOffsets: float parentFraction>
<androidx.tv.foundation.PivotOffsets: float childFraction>
<androidx.tv.foundation.PivotOffsets: int $stable>
    public void <init>(float, float)
    {
        androidx.tv.foundation.PivotOffsets r0;
        float f0, f1, $f2, $f4;

        r0 := @this: androidx.tv.foundation.PivotOffsets;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.tv.foundation.PivotOffsets: float parentFraction> = f0;

        r0.<androidx.tv.foundation.PivotOffsets: float childFraction> = f1;

        $f2 = r0.<androidx.tv.foundation.PivotOffsets: float parentFraction>;

        specialinvoke r0.<androidx.tv.foundation.PivotOffsets: float validateFraction(float)>($f2);

        $f4 = r0.<androidx.tv.foundation.PivotOffsets: float childFraction>;

        specialinvoke r0.<androidx.tv.foundation.PivotOffsets: float validateFraction(float)>($f4);

        return;
    }

    public void <init>(float, float, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.tv.foundation.PivotOffsets r0;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        float f0, f1;

        r0 := @this: androidx.tv.foundation.PivotOffsets;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = 0.3F;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        f1 = 0.0F;

     label2:
        specialinvoke r0.<androidx.tv.foundation.PivotOffsets: void <init>(float,float)>(f0, f1);

        return;
    }

    public final float getParentFraction()
    {
        androidx.tv.foundation.PivotOffsets r0;
        float $f0;

        r0 := @this: androidx.tv.foundation.PivotOffsets;

        $f0 = r0.<androidx.tv.foundation.PivotOffsets: float parentFraction>;

        return $f0;
    }

    public final float getChildFraction()
    {
        androidx.tv.foundation.PivotOffsets r0;
        float $f0;

        r0 := @this: androidx.tv.foundation.PivotOffsets;

        $f0 = r0.<androidx.tv.foundation.PivotOffsets: float childFraction>;

        return $f0;
    }

    private final float validateFraction(float)
    {
        androidx.tv.foundation.PivotOffsets r0;
        float f0;
        double d0;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: androidx.tv.foundation.PivotOffsets;

        f0 := @parameter0: float;

        d0 = (double) f0;

        $b0 = 0.0 cmpg d0;

        if $b0 > 0 goto label2;

        $b1 = d0 cmpg 1.0;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        return f0;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OffsetFractions should be between 0 and 1. ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not between 0 and 1.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.tv.foundation.PivotOffsets r0, $r2, $r3;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        float $f0, $f1, $f2, $f3;
        byte $b0, $b1;

        r0 := @this: androidx.tv.foundation.PivotOffsets;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.tv.foundation.PivotOffsets;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $f1 = r0.<androidx.tv.foundation.PivotOffsets: float parentFraction>;

        $r2 = (androidx.tv.foundation.PivotOffsets) r1;

        $f0 = $r2.<androidx.tv.foundation.PivotOffsets: float parentFraction>;

        $b0 = $f1 cmpg $f0;

        if $b0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z1 != 0 goto label5;

        return 0;

     label5:
        $f3 = r0.<androidx.tv.foundation.PivotOffsets: float childFraction>;

        $r3 = (androidx.tv.foundation.PivotOffsets) r1;

        $f2 = $r3.<androidx.tv.foundation.PivotOffsets: float childFraction>;

        $b1 = $f3 cmpg $f2;

        if $b1 != 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        if $z2 != 0 goto label8;

        return 0;

     label8:
        return 1;
    }

    public int hashCode()
    {
        androidx.tv.foundation.PivotOffsets r0;
        float $f0, $f1;
        int $i0, $i1, i2, i3;

        r0 := @this: androidx.tv.foundation.PivotOffsets;

        $f0 = r0.<androidx.tv.foundation.PivotOffsets: float parentFraction>;

        i2 = staticinvoke <java.lang.Float: int hashCode(float)>($f0);

        $i0 = 31 * i2;

        $f1 = r0.<androidx.tv.foundation.PivotOffsets: float childFraction>;

        $i1 = staticinvoke <java.lang.Float: int hashCode(float)>($f1);

        i3 = $i0 + $i1;

        return i3;
    }

    public void <init>()
    {
        androidx.tv.foundation.PivotOffsets r0;

        r0 := @this: androidx.tv.foundation.PivotOffsets;

        specialinvoke r0.<androidx.tv.foundation.PivotOffsets: void <init>(float,float,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0.0F, 0.0F, 3, null);

        return;
    }

    static void <clinit>()
    {
        return;
    }

