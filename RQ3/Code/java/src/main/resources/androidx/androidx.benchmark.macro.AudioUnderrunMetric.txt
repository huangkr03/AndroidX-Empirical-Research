androidx.benchmark.macro.AudioUnderrunMetric
    public void <init>()
    {
        androidx.benchmark.macro.AudioUnderrunMetric r0;

        r0 := @this: androidx.benchmark.macro.AudioUnderrunMetric;

        specialinvoke r0.<androidx.benchmark.macro.Metric: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        return;
    }

    public void configure$benchmark_macro_release(java.lang.String)
    {
        androidx.benchmark.macro.AudioUnderrunMetric r0;
        java.lang.String r1;

        r0 := @this: androidx.benchmark.macro.AudioUnderrunMetric;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        return;
    }

    public void start$benchmark_macro_release()
    {
        androidx.benchmark.macro.AudioUnderrunMetric r0;

        r0 := @this: androidx.benchmark.macro.AudioUnderrunMetric;

        return;
    }

    public void stop$benchmark_macro_release()
    {
        androidx.benchmark.macro.AudioUnderrunMetric r0;

        r0 := @this: androidx.benchmark.macro.AudioUnderrunMetric;

        return;
    }

    public androidx.benchmark.macro.IterationResult getMetrics$benchmark_macro_release(androidx.benchmark.macro.Metric$CaptureInfo, java.lang.String)
    {
        androidx.benchmark.macro.AudioUnderrunMetric r0;
        androidx.benchmark.macro.Metric$CaptureInfo r1;
        java.lang.String r2;
        androidx.benchmark.macro.perfetto.AudioUnderrunQuery$SubMetrics r3;
        kotlin.Pair[] r4;
        androidx.benchmark.macro.perfetto.AudioUnderrunQuery $r5;
        androidx.benchmark.macro.IterationResult $r6;
        int $i0, $i1;
        double $d0, $d1;
        java.lang.Double $r7, $r9;
        kotlin.Pair $r8, $r10;
        java.util.Map $r11, $r12;

        r0 := @this: androidx.benchmark.macro.AudioUnderrunMetric;

        r1 := @parameter0: androidx.benchmark.macro.Metric$CaptureInfo;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "captureInfo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "tracePath");

        $r5 = <androidx.benchmark.macro.perfetto.AudioUnderrunQuery: androidx.benchmark.macro.perfetto.AudioUnderrunQuery INSTANCE>;

        r3 = virtualinvoke $r5.<androidx.benchmark.macro.perfetto.AudioUnderrunQuery: androidx.benchmark.macro.perfetto.AudioUnderrunQuery$SubMetrics getSubMetrics(java.lang.String)>(r2);

        $r6 = new androidx.benchmark.macro.IterationResult;

        r4 = newarray (kotlin.Pair)[2];

        $i0 = virtualinvoke r3.<androidx.benchmark.macro.perfetto.AudioUnderrunQuery$SubMetrics: int getTotalMs()>();

        $d0 = (double) $i0;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r8 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("audioTotalMs", $r7);

        r4[0] = $r8;

        $i1 = virtualinvoke r3.<androidx.benchmark.macro.perfetto.AudioUnderrunQuery$SubMetrics: int getZeroMs()>();

        $d1 = (double) $i1;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r10 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("audioUnderrunMs", $r9);

        r4[1] = $r10;

        $r11 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair[])>(r4);

        $r12 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        specialinvoke $r6.<androidx.benchmark.macro.IterationResult: void <init>(java.util.Map,java.util.Map,kotlin.ranges.LongRange)>($r11, $r12, null);

        return $r6;
    }

