androidx.camera.camera2.internal.AndroidRZoomImpl
<androidx.camera.camera2.internal.AndroidRZoomImpl: float DEFAULT_ZOOM_RATIO>
<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>
<androidx.camera.camera2.internal.AndroidRZoomImpl: android.util.Range mZoomRatioRange>
<androidx.camera.camera2.internal.AndroidRZoomImpl: float mCurrentZoomRatio>
<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>
<androidx.camera.camera2.internal.AndroidRZoomImpl: float mPendingZoomRatio>
    void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat)
    {
        androidx.camera.camera2.internal.AndroidRZoomImpl r0;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r1, $r3;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        java.lang.Object $r4;
        android.util.Range $r5;

        r0 := @this: androidx.camera.camera2.internal.AndroidRZoomImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: float mCurrentZoomRatio> = 1.0F;

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: float mPendingZoomRatio> = 1.0F;

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics> = r1;

        $r3 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key CONTROL_ZOOM_RATIO_RANGE>;

        $r4 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        $r5 = (android.util.Range) $r4;

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: android.util.Range mZoomRatioRange> = $r5;

        return;
    }

    public float getMinZoom()
    {
        androidx.camera.camera2.internal.AndroidRZoomImpl r0;
        android.util.Range $r1;
        java.lang.Comparable $r2;
        java.lang.Float $r3;
        float $f0;

        r0 := @this: androidx.camera.camera2.internal.AndroidRZoomImpl;

        $r1 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: android.util.Range mZoomRatioRange>;

        $r2 = virtualinvoke $r1.<android.util.Range: java.lang.Comparable getLower()>();

        $r3 = (java.lang.Float) $r2;

        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public float getMaxZoom()
    {
        androidx.camera.camera2.internal.AndroidRZoomImpl r0;
        android.util.Range $r1;
        java.lang.Comparable $r2;
        java.lang.Float $r3;
        float $f0;

        r0 := @this: androidx.camera.camera2.internal.AndroidRZoomImpl;

        $r1 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: android.util.Range mZoomRatioRange>;

        $r2 = virtualinvoke $r1.<android.util.Range: java.lang.Comparable getUpper()>();

        $r3 = (java.lang.Float) $r2;

        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public void addRequestOption(androidx.camera.camera2.impl.Camera2ImplConfig$Builder)
    {
        androidx.camera.camera2.internal.AndroidRZoomImpl r0;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r1;
        float $f0;
        android.hardware.camera2.CaptureRequest$Key $r2;
        java.lang.Float $r3;

        r0 := @this: androidx.camera.camera2.internal.AndroidRZoomImpl;

        r1 := @parameter0: androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        $r2 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO>;

        $f0 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: float mCurrentZoomRatio>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke r1.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r2, $r3);

        return;
    }

    public void resetZoom()
    {
        androidx.camera.camera2.internal.AndroidRZoomImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1, $r3;
        androidx.camera.core.CameraControl$OperationCanceledException $r2;

        r0 := @this: androidx.camera.camera2.internal.AndroidRZoomImpl;

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: float mCurrentZoomRatio> = 1.0F;

        $r1 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        $r2 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r2.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera is not active.");

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r2);

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter> = null;

     label1:
        return;
    }

    public void setZoomRatio(float, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.AndroidRZoomImpl r0;
        float f0, $f1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1, $r2, $r4;
        androidx.camera.core.CameraControl$OperationCanceledException $r3;

        r0 := @this: androidx.camera.camera2.internal.AndroidRZoomImpl;

        f0 := @parameter0: float;

        r1 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: float mCurrentZoomRatio> = f0;

        $r2 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        if $r2 == null goto label1;

        $r4 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        $r3 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r3.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("There is a new zoomRatio being set");

        virtualinvoke $r4.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r3);

     label1:
        $f1 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: float mCurrentZoomRatio>;

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: float mPendingZoomRatio> = $f1;

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter> = r1;

        return;
    }

    public void onCaptureResult(android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.AndroidRZoomImpl r0;
        android.hardware.camera2.TotalCaptureResult r1;
        android.hardware.camera2.CaptureRequest r2;
        java.lang.Float r3, $r8;
        float f0, $f1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r4, $r7;
        android.hardware.camera2.CaptureRequest$Key $r5;
        java.lang.Object $r6;
        byte $b0;

        r0 := @this: androidx.camera.camera2.internal.AndroidRZoomImpl;

        r1 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $r4 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        if $r4 == null goto label4;

        r2 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: android.hardware.camera2.CaptureRequest getRequest()>();

        if r2 != null goto label1;

        $r8 = null;

        goto label2;

     label1:
        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_ZOOM_RATIO>;

        $r6 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>($r5);

        $r8 = (java.lang.Float) $r6;

     label2:
        r3 = $r8;

        if r3 != null goto label3;

        return;

     label3:
        f0 = virtualinvoke r3.<java.lang.Float: float floatValue()>();

        $f1 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: float mPendingZoomRatio>;

        $b0 = $f1 cmpl f0;

        if $b0 != 0 goto label4;

        $r7 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter>;

        virtualinvoke $r7.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mPendingZoomRatioCompleter> = null;

     label4:
        return;
    }

    public android.graphics.Rect getCropSensorRegion()
    {
        androidx.camera.camera2.internal.AndroidRZoomImpl r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r2;
        java.lang.Object $r3, $r5;
        android.graphics.Rect $r4, $r6;

        r0 := @this: androidx.camera.camera2.internal.AndroidRZoomImpl;

        $r2 = r0.<androidx.camera.camera2.internal.AndroidRZoomImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat mCameraCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r3 = virtualinvoke $r2.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (android.graphics.Rect) $r3;

        $r5 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r6 = (android.graphics.Rect) $r5;

        return $r6;
    }

