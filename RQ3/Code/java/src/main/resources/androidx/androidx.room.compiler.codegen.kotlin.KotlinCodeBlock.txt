androidx.room.compiler.codegen.kotlin.KotlinCodeBlock
<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion Companion>
<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: com.squareup.kotlinpoet.CodeBlock actual>
<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: kotlin.text.Regex JAVA_POET_PLACEHOLDER_REGEX>
    public void <init>(com.squareup.kotlinpoet.CodeBlock)
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock r0;
        com.squareup.kotlinpoet.CodeBlock r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock;

        r1 := @parameter0: com.squareup.kotlinpoet.CodeBlock;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "actual");

        specialinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinLang: void <init>()>();

        r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: com.squareup.kotlinpoet.CodeBlock actual> = r1;

        return;
    }

    public final com.squareup.kotlinpoet.CodeBlock getActual$room_compiler_processing()
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock r0;
        com.squareup.kotlinpoet.CodeBlock $r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock;

        $r1 = r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: com.squareup.kotlinpoet.CodeBlock actual>;

        return $r1;
    }

    public static final kotlin.text.Regex access$getJAVA_POET_PLACEHOLDER_REGEX$cp()
    {
        kotlin.text.Regex $r0;

        $r0 = <androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: kotlin.text.Regex JAVA_POET_PLACEHOLDER_REGEX>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion $r0;
        kotlin.text.Regex $r1;

        $r0 = new androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion;

        specialinvoke $r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion Companion> = $r0;

        $r1 = new kotlin.text.Regex;

        specialinvoke $r1.<kotlin.text.Regex: void <init>(java.lang.String)>("(\\$L)|(\\$T)|(\\$N)|(\\$S)|(\\$W)");

        <androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: kotlin.text.Regex JAVA_POET_PLACEHOLDER_REGEX> = $r1;

        return;
    }

androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder
<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>
    public void <init>()
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0;
        com.squareup.kotlinpoet.CodeBlock$Builder $r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        specialinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinLang: void <init>()>();

        $r1 = new com.squareup.kotlinpoet.CodeBlock$Builder;

        specialinvoke $r1.<com.squareup.kotlinpoet.CodeBlock$Builder: void <init>()>();

        r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual> = $r1;

        return;
    }

    public final com.squareup.kotlinpoet.CodeBlock$Builder getActual$room_compiler_processing()
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0;
        com.squareup.kotlinpoet.CodeBlock$Builder $r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        $r1 = r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        return $r1;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder add(androidx.room.compiler.codegen.XCodeBlock)
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, r2, $r3, $r9;
        androidx.room.compiler.codegen.XCodeBlock r1;
        java.lang.String r4, $r11;
        boolean $z1;
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock $r5;
        com.squareup.kotlinpoet.CodeBlock$Builder $r6;
        com.squareup.kotlinpoet.CodeBlock $r7;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XCodeBlock;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "code");

        r2 = r0;

        $r3 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r2;

        $z1 = r1 instanceof androidx.room.compiler.codegen.kotlin.KotlinCodeBlock;

        if $z1 != 0 goto label1;

        r4 = "Failed requirement.";

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label1:
        $r6 = $r3.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        $r5 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock) r1;

        $r7 = virtualinvoke $r5.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: com.squareup.kotlinpoet.CodeBlock getActual$room_compiler_processing()>();

        virtualinvoke $r6.<com.squareup.kotlinpoet.CodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder add(com.squareup.kotlinpoet.CodeBlock)>($r7);

        $r9 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r2;

        return $r9;
    }

    public transient androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder add(java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, r3, $r4, $r10;
        java.lang.String r1, r5;
        java.lang.Object[] r2, r6, $r8;
        int $i0;
        com.squareup.kotlinpoet.CodeBlock$Builder $r7;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "format");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "args");

        r3 = r0;

        $r4 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r3;

        r5 = specialinvoke $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: java.lang.String processFormatString(java.lang.String)>(r1);

        r6 = specialinvoke $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: java.lang.Object[] processArgs(java.lang.Object[])>(r2);

        $r7 = $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        $i0 = lengthof r6;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r6, $i0);

        virtualinvoke $r7.<com.squareup.kotlinpoet.CodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder add(java.lang.String,java.lang.Object[])>(r5, $r8);

        $r10 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r3;

        return $r10;
    }

    public transient androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder addStatement(java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, r3, $r4, $r10;
        java.lang.String r1, r5;
        java.lang.Object[] r2, r6, $r8;
        int $i0;
        com.squareup.kotlinpoet.CodeBlock$Builder $r7;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "format");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "args");

        r3 = r0;

        $r4 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r3;

        r5 = specialinvoke $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: java.lang.String processFormatString(java.lang.String)>(r1);

        r6 = specialinvoke $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: java.lang.Object[] processArgs(java.lang.Object[])>(r2);

        $r7 = $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        $i0 = lengthof r6;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r6, $i0);

        virtualinvoke $r7.<com.squareup.kotlinpoet.CodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder addStatement(java.lang.String,java.lang.Object[])>(r5, $r8);

        $r10 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r3;

        return $r10;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder addLocalVariable(java.lang.String, androidx.room.compiler.codegen.XTypeName, boolean, androidx.room.compiler.codegen.XCodeBlock)
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, r4, $r5, $r15;
        java.lang.String r1, r6, r7, $r12, $r20, $r26, $r27;
        androidx.room.compiler.codegen.XTypeName r2;
        boolean z0, $z2;
        androidx.room.compiler.codegen.XCodeBlock r3;
        java.lang.StringBuilder $r8, $r10, $r11, $r16, $r18, $r19;
        com.squareup.kotlinpoet.CodeBlock$Builder $r9, $r17;
        com.squareup.kotlinpoet.TypeName $r13, $r21;
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock $r22;
        com.squareup.kotlinpoet.CodeBlock $r23;
        java.lang.IllegalArgumentException $r25;
        java.lang.Object[] r28, r29;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.room.compiler.codegen.XTypeName;

        z0 := @parameter2: boolean;

        r3 := @parameter3: androidx.room.compiler.codegen.XCodeBlock;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "typeName");

        r4 = r0;

        $r5 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r4;

        if z0 == 0 goto label1;

        $r27 = "var";

        goto label2;

     label1:
        $r27 = "val";

     label2:
        r6 = $r27;

        if r3 == null goto label4;

        $z2 = r3 instanceof androidx.room.compiler.codegen.kotlin.KotlinCodeBlock;

        if $z2 != 0 goto label3;

        r7 = "Failed requirement.";

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label3:
        $r17 = $r5.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %L: %T = %L");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        r28 = newarray (java.lang.Object)[3];

        r28[0] = r1;

        $r21 = virtualinvoke r2.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        r28[1] = $r21;

        $r22 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock) r3;

        $r23 = virtualinvoke $r22.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: com.squareup.kotlinpoet.CodeBlock getActual$room_compiler_processing()>();

        r28[2] = $r23;

        virtualinvoke $r17.<com.squareup.kotlinpoet.CodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder addStatement(java.lang.String,java.lang.Object[])>($r20, r28);

        goto label5;

     label4:
        $r9 = $r5.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %L: %T");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r29 = newarray (java.lang.Object)[2];

        r29[0] = r1;

        $r13 = virtualinvoke r2.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        r29[1] = $r13;

        virtualinvoke $r9.<com.squareup.kotlinpoet.CodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder addStatement(java.lang.String,java.lang.Object[])>($r12, r29);

     label5:
        $r15 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r4;

        return $r15;
    }

    public transient androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder beginControlFlow(java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, r3, $r4, $r10;
        java.lang.String r1, r5;
        java.lang.Object[] r2, r6, $r8;
        int $i0;
        com.squareup.kotlinpoet.CodeBlock$Builder $r7;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "controlFlow");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "args");

        r3 = r0;

        $r4 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r3;

        r5 = specialinvoke $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: java.lang.String processFormatString(java.lang.String)>(r1);

        r6 = specialinvoke $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: java.lang.Object[] processArgs(java.lang.Object[])>(r2);

        $r7 = $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        $i0 = lengthof r6;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r6, $i0);

        virtualinvoke $r7.<com.squareup.kotlinpoet.CodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder beginControlFlow(java.lang.String,java.lang.Object[])>(r5, $r8);

        $r10 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r3;

        return $r10;
    }

    public transient androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder nextControlFlow(java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, r3, $r4, $r10;
        java.lang.String r1, r5;
        java.lang.Object[] r2, r6, $r8;
        int $i0;
        com.squareup.kotlinpoet.CodeBlock$Builder $r7;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "controlFlow");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "args");

        r3 = r0;

        $r4 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r3;

        r5 = specialinvoke $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: java.lang.String processFormatString(java.lang.String)>(r1);

        r6 = specialinvoke $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: java.lang.Object[] processArgs(java.lang.Object[])>(r2);

        $r7 = $r4.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        $i0 = lengthof r6;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r6, $i0);

        virtualinvoke $r7.<com.squareup.kotlinpoet.CodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder nextControlFlow(java.lang.String,java.lang.Object[])>(r5, $r8);

        $r10 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r3;

        return $r10;
    }

    public androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder endControlFlow()
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, r1, $r2, $r5;
        com.squareup.kotlinpoet.CodeBlock$Builder $r3;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 = r0;

        $r2 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r1;

        $r3 = $r2.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        virtualinvoke $r3.<com.squareup.kotlinpoet.CodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder endControlFlow()>();

        $r5 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r1;

        return $r5;
    }

    public androidx.room.compiler.codegen.XCodeBlock build()
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0;
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock $r1;
        com.squareup.kotlinpoet.CodeBlock$Builder $r2;
        com.squareup.kotlinpoet.CodeBlock $r3;
        androidx.room.compiler.codegen.XCodeBlock $r4;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        $r1 = new androidx.room.compiler.codegen.kotlin.KotlinCodeBlock;

        $r2 = r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder actual>;

        $r3 = virtualinvoke $r2.<com.squareup.kotlinpoet.CodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock build()>();

        specialinvoke $r1.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: void <init>(com.squareup.kotlinpoet.CodeBlock)>($r3);

        $r4 = (androidx.room.compiler.codegen.XCodeBlock) $r1;

        return $r4;
    }

    private final java.lang.String processFormatString(java.lang.String)
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0;
        java.lang.String r1, $r14, $r15;
        kotlin.text.MatchResult r2, $r5;
        kotlin.text.Regex $r3;
        java.lang.CharSequence $r4;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12, $r13;
        kotlin.ranges.IntRange $r9;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: kotlin.text.Regex access$getJAVA_POET_PLACEHOLDER_REGEX$cp()>();

        $r4 = (java.lang.CharSequence) r1;

        $r5 = staticinvoke <kotlin.text.Regex: kotlin.text.MatchResult find$default(kotlin.text.Regex,java.lang.CharSequence,int,int,java.lang.Object)>($r3, $r4, 0, 2, null);

        if $r5 == null goto label1;

        r2 = $r5;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad JavaPoet placeholder in XPoet at range ");

        $r9 = interfaceinvoke r2.<kotlin.text.MatchResult: kotlin.ranges.IntRange getRange()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of input: \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r6;

     label1:
        return r1;
    }

    private final java.lang.Object[] processArgs(java.lang.Object[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0;
        java.lang.Object[] r1, r2, r5;
        int i0, i1, i2, i3;
        java.lang.Object r3, r4, $r20;
        java.lang.String r6, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock $r7;
        androidx.room.compiler.codegen.kotlin.KotlinFunSpec $r8;
        androidx.room.compiler.codegen.kotlin.KotlinTypeSpec $r9;
        androidx.room.compiler.codegen.XTypeName $r10;
        androidx.room.compiler.codegen.TargetLanguage $r11;
        androidx.room.compiler.codegen.CodeLanguage $r12, $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.IllegalStateException $r17;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.Object[];

        i3 = 0;

        i0 = lengthof r1;

        r2 = newarray (java.lang.Object)[i0];

     label01:
        if i3 >= i0 goto label10;

        i1 = i3;

        r3 = r1[i1];

        $z0 = r3 instanceof androidx.room.compiler.codegen.TargetLanguage;

        if $z0 == 0 goto label04;

        $r11 = (androidx.room.compiler.codegen.TargetLanguage) r3;

        $r12 = interfaceinvoke $r11.<androidx.room.compiler.codegen.TargetLanguage: androidx.room.compiler.codegen.CodeLanguage getLanguage()>();

        $r13 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage KOTLIN>;

        if $r12 != $r13 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        if $z5 != 0 goto label04;

        i2 = i1;

        r5 = r2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not KotlinCode");

        r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label04:
        r4 = r3;

        $z1 = r4 instanceof androidx.room.compiler.codegen.XTypeName;

        if $z1 == 0 goto label05;

        $r10 = (androidx.room.compiler.codegen.XTypeName) r3;

        $r20 = virtualinvoke $r10.<androidx.room.compiler.codegen.XTypeName: com.squareup.kotlinpoet.TypeName getKotlin$room_compiler_processing()>();

        goto label09;

     label05:
        $z2 = r4 instanceof androidx.room.compiler.codegen.XTypeSpec;

        if $z2 == 0 goto label06;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r3, "null cannot be cast to non-null type androidx.room.compiler.codegen.kotlin.KotlinTypeSpec");

        $r9 = (androidx.room.compiler.codegen.kotlin.KotlinTypeSpec) r3;

        $r20 = virtualinvoke $r9.<androidx.room.compiler.codegen.kotlin.KotlinTypeSpec: com.squareup.kotlinpoet.TypeSpec getActual$room_compiler_processing()>();

        goto label09;

     label06:
        $z3 = r4 instanceof androidx.room.compiler.codegen.XFunSpec;

        if $z3 == 0 goto label07;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r3, "null cannot be cast to non-null type androidx.room.compiler.codegen.kotlin.KotlinFunSpec");

        $r8 = (androidx.room.compiler.codegen.kotlin.KotlinFunSpec) r3;

        $r20 = virtualinvoke $r8.<androidx.room.compiler.codegen.kotlin.KotlinFunSpec: com.squareup.kotlinpoet.FunSpec getActual$room_compiler_processing()>();

        goto label09;

     label07:
        $z4 = r4 instanceof androidx.room.compiler.codegen.XCodeBlock;

        if $z4 == 0 goto label08;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r3, "null cannot be cast to non-null type androidx.room.compiler.codegen.kotlin.KotlinCodeBlock");

        $r7 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock) r3;

        $r20 = virtualinvoke $r7.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock: com.squareup.kotlinpoet.CodeBlock getActual$room_compiler_processing()>();

        goto label09;

     label08:
        $r20 = r3;

     label09:
        r2[i1] = $r20;

        i3 = i3 + 1;

        goto label01;

     label10:
        return r2;
    }

    public volatile androidx.room.compiler.codegen.XCodeBlock$Builder add(androidx.room.compiler.codegen.XCodeBlock)
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, $r2;
        androidx.room.compiler.codegen.XCodeBlock r1;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r3;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: androidx.room.compiler.codegen.XCodeBlock;

        $r2 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder add(androidx.room.compiler.codegen.XCodeBlock)>(r1);

        $r3 = (androidx.room.compiler.codegen.XCodeBlock$Builder) $r2;

        return $r3;
    }

    public volatile androidx.room.compiler.codegen.XCodeBlock$Builder add(java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, $r3;
        java.lang.String r1;
        java.lang.Object[] r2;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r4;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder add(java.lang.String,java.lang.Object[])>(r1, r2);

        $r4 = (androidx.room.compiler.codegen.XCodeBlock$Builder) $r3;

        return $r4;
    }

    public volatile androidx.room.compiler.codegen.XCodeBlock$Builder addStatement(java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, $r3;
        java.lang.String r1;
        java.lang.Object[] r2;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r4;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder addStatement(java.lang.String,java.lang.Object[])>(r1, r2);

        $r4 = (androidx.room.compiler.codegen.XCodeBlock$Builder) $r3;

        return $r4;
    }

    public volatile androidx.room.compiler.codegen.XCodeBlock$Builder addLocalVariable(java.lang.String, androidx.room.compiler.codegen.XTypeName, boolean, androidx.room.compiler.codegen.XCodeBlock)
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, $r4;
        java.lang.String r1;
        androidx.room.compiler.codegen.XTypeName r2;
        boolean z0;
        androidx.room.compiler.codegen.XCodeBlock r3;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r5;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.room.compiler.codegen.XTypeName;

        z0 := @parameter2: boolean;

        r3 := @parameter3: androidx.room.compiler.codegen.XCodeBlock;

        $r4 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder addLocalVariable(java.lang.String,androidx.room.compiler.codegen.XTypeName,boolean,androidx.room.compiler.codegen.XCodeBlock)>(r1, r2, z0, r3);

        $r5 = (androidx.room.compiler.codegen.XCodeBlock$Builder) $r4;

        return $r5;
    }

    public volatile androidx.room.compiler.codegen.XCodeBlock$Builder beginControlFlow(java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, $r3;
        java.lang.String r1;
        java.lang.Object[] r2;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r4;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder beginControlFlow(java.lang.String,java.lang.Object[])>(r1, r2);

        $r4 = (androidx.room.compiler.codegen.XCodeBlock$Builder) $r3;

        return $r4;
    }

    public volatile androidx.room.compiler.codegen.XCodeBlock$Builder nextControlFlow(java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, $r3;
        java.lang.String r1;
        java.lang.Object[] r2;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r4;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder nextControlFlow(java.lang.String,java.lang.Object[])>(r1, r2);

        $r4 = (androidx.room.compiler.codegen.XCodeBlock$Builder) $r3;

        return $r4;
    }

    public volatile androidx.room.compiler.codegen.XCodeBlock$Builder endControlFlow()
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder r0, $r1;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r2;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        $r1 = virtualinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder endControlFlow()>();

        $r2 = (androidx.room.compiler.codegen.XCodeBlock$Builder) $r1;

        return $r2;
    }

androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion
    private void <init>()
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion r0;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Companion: void <init>()>();

        return;
    }

