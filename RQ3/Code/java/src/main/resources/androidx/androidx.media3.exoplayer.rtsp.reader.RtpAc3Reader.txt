androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int AC3_FRAME_TYPE_COMPLETE_FRAME>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int AC3_FRAME_TYPE_INITIAL_FRAGMENT_A>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int AC3_FRAME_TYPE_INITIAL_FRAGMENT_B>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int AC3_FRAME_TYPE_NON_INITIAL_FRAGMENT>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int AC3_PAYLOAD_HEADER_SIZE>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.common.util.ParsableBitArray scratchBitBuffer>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.extractor.TrackOutput trackOutput>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int numBytesPendingMetadataOutput>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long firstReceivedTimestamp>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long sampleTimeUsOfFramePendingMetadataOutput>
<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long startTimeOffsetUs>
    public void <init>(androidx.media3.exoplayer.rtsp.RtpPayloadFormat)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat r1;
        androidx.media3.common.util.ParsableBitArray $r2;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        r1 := @parameter0: androidx.media3.exoplayer.rtsp.RtpPayloadFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat> = r1;

        $r2 = new androidx.media3.common.util.ParsableBitArray;

        specialinvoke $r2.<androidx.media3.common.util.ParsableBitArray: void <init>()>();

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.common.util.ParsableBitArray scratchBitBuffer> = $r2;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long firstReceivedTimestamp> = -9223372036854775807L;

        return;
    }

    public void createTracks(androidx.media3.extractor.ExtractorOutput, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        androidx.media3.extractor.ExtractorOutput r1;
        int i0;
        androidx.media3.extractor.TrackOutput $r2, $r5;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r3;
        androidx.media3.common.Format $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(i0, 1);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.extractor.TrackOutput trackOutput> = $r2;

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r4 = $r3.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: androidx.media3.common.Format format>;

        interfaceinvoke $r5.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r4);

        return;
    }

    public void onReceivingFirstPacket(long, int)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        long l0, $l2;
        int i1;
        byte $b3;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long firstReceivedTimestamp>;

        $b3 = $l2 cmp -9223372036854775807L;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long firstReceivedTimestamp> = l0;

        return;
    }

    public void consume(androidx.media3.common.util.ParsableByteArray, long, int, boolean)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0, l4, $l8, $l9;
        int i1, i2, i3, $i5, $i6, $i7;
        boolean z0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $i5 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        i2 = $i5 & 3;

        $i6 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        i3 = $i6 & 255;

        $l9 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long startTimeOffsetUs>;

        $l8 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long firstReceivedTimestamp>;

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $i7 = $r2.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: int clockRate>;

        l4 = staticinvoke <androidx.media3.exoplayer.rtsp.reader.RtpReaderUtils: long toSampleTimeUs(long,long,long,int)>($l9, l0, $l8, $i7);

        tableswitch(i2)
        {
            case 0: goto label1;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: void maybeOutputSampleMetadata()>();

        if i3 != 1 goto label2;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: void processSingleFramePacket(androidx.media3.common.util.ParsableByteArray,long)>(r1, l4);

        goto label6;

     label2:
        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: void processMultiFramePacket(androidx.media3.common.util.ParsableByteArray,int,long)>(r1, i3, l4);

        goto label6;

     label3:
        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: void maybeOutputSampleMetadata()>();

     label4:
        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: void processFragmentedPacket(androidx.media3.common.util.ParsableByteArray,boolean,int,long)>(r1, z0, i2, l4);

        goto label6;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label6:
        return;
    }

    public void seek(long, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        long l0, l1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long firstReceivedTimestamp> = l0;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long startTimeOffsetUs> = l1;

        return;
    }

    private void processSingleFramePacket(androidx.media3.common.util.ParsableByteArray, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0;
        int i1;
        androidx.media3.extractor.TrackOutput $r2, $r4, $r5, $r7;
        java.lang.Object $r3, $r6;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        i1 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (androidx.media3.extractor.TrackOutput) $r3;

        interfaceinvoke $r4.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i1);

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r6 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r5);

        $r7 = (androidx.media3.extractor.TrackOutput) $r6;

        interfaceinvoke $r7.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l0, 1, i1, 0, null);

        return;
    }

    private void processMultiFramePacket(androidx.media3.common.util.ParsableByteArray, int, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, i10;
        androidx.media3.extractor.Ac3Util$SyncFrameInfo r2;
        androidx.media3.common.util.ParsableBitArray $r3, $r5, $r6, $r13;
        byte[] $r4;
        androidx.media3.extractor.TrackOutput $r7, $r9, $r10, $r12;
        java.lang.Object $r8, $r11;
        long $l6, $l7, l9;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 := @parameter1: int;

        l9 := @parameter2: long;

        $r3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.common.util.ParsableBitArray scratchBitBuffer>;

        $r4 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        virtualinvoke $r3.<androidx.media3.common.util.ParsableBitArray: void reset(byte[])>($r4);

        $r5 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.common.util.ParsableBitArray scratchBitBuffer>;

        virtualinvoke $r5.<androidx.media3.common.util.ParsableBitArray: void skipBytes(int)>(2);

        i10 = 0;

     label1:
        if i10 >= i0 goto label2;

        $r6 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.common.util.ParsableBitArray scratchBitBuffer>;

        r2 = staticinvoke <androidx.media3.extractor.Ac3Util: androidx.media3.extractor.Ac3Util$SyncFrameInfo parseAc3SyncframeInfo(androidx.media3.common.util.ParsableBitArray)>($r6);

        $r7 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        $r9 = (androidx.media3.extractor.TrackOutput) $r8;

        $i1 = r2.<androidx.media3.extractor.Ac3Util$SyncFrameInfo: int frameSize>;

        interfaceinvoke $r9.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, $i1);

        $r10 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r11 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r10);

        $r12 = (androidx.media3.extractor.TrackOutput) $r11;

        $i2 = r2.<androidx.media3.extractor.Ac3Util$SyncFrameInfo: int frameSize>;

        interfaceinvoke $r12.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l9, 1, $i2, 0, null);

        $i4 = r2.<androidx.media3.extractor.Ac3Util$SyncFrameInfo: int sampleCount>;

        $i3 = r2.<androidx.media3.extractor.Ac3Util$SyncFrameInfo: int sampleRate>;

        $i5 = $i4 / $i3;

        $l6 = (long) $i5;

        $l7 = $l6 * 1000000L;

        l9 = l9 + $l7;

        $r13 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.common.util.ParsableBitArray scratchBitBuffer>;

        $i8 = r2.<androidx.media3.extractor.Ac3Util$SyncFrameInfo: int frameSize>;

        virtualinvoke $r13.<androidx.media3.common.util.ParsableBitArray: void skipBytes(int)>($i8);

        i10 = i10 + 1;

        goto label1;

     label2:
        return;
    }

    private void processFragmentedPacket(androidx.media3.common.util.ParsableByteArray, boolean, int, long)
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        boolean z0;
        int i0, i2, $i3, $i4;
        long l1;
        androidx.media3.extractor.TrackOutput $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        i2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r2 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (androidx.media3.extractor.TrackOutput) $r3;

        interfaceinvoke $r4.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i2);

        $i3 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int numBytesPendingMetadataOutput>;

        $i4 = $i3 + i2;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int numBytesPendingMetadataOutput> = $i4;

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long sampleTimeUsOfFramePendingMetadataOutput> = l1;

        if z0 == 0 goto label1;

        if i0 != 3 goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: void outputSampleMetadataForFragmentedPackets()>();

     label1:
        return;
    }

    private void maybeOutputSampleMetadata()
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        $i0 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int numBytesPendingMetadataOutput>;

        if $i0 <= 0 goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: void outputSampleMetadataForFragmentedPackets()>();

     label1:
        return;
    }

    private void outputSampleMetadataForFragmentedPackets()
    {
        androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader r0;
        androidx.media3.extractor.TrackOutput $r1, $r3;
        java.lang.Object $r2;
        int $i0;
        long $l1;

        r0 := @this: androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader;

        $r1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: androidx.media3.extractor.TrackOutput trackOutput>;

        $r2 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r1);

        $r3 = (androidx.media3.extractor.TrackOutput) $r2;

        $l1 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: long sampleTimeUsOfFramePendingMetadataOutput>;

        $i0 = r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int numBytesPendingMetadataOutput>;

        interfaceinvoke $r3.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>($l1, 1, $i0, 0, null);

        r0.<androidx.media3.exoplayer.rtsp.reader.RtpAc3Reader: int numBytesPendingMetadataOutput> = 0;

        return;
    }

