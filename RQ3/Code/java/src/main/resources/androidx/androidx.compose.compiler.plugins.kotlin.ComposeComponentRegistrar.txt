androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar
<androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar: androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion Companion>
    public void registerProjectComponents(org.jetbrains.kotlin.com.intellij.mock.MockProject, org.jetbrains.kotlin.config.CompilerConfiguration)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar r0;
        org.jetbrains.kotlin.com.intellij.mock.MockProject r1;
        org.jetbrains.kotlin.config.CompilerConfiguration r2;
        org.jetbrains.kotlin.com.intellij.openapi.project.Project $r3;
        androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion $r4;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar;

        r1 := @parameter0: org.jetbrains.kotlin.com.intellij.mock.MockProject;

        r2 := @parameter1: org.jetbrains.kotlin.config.CompilerConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "project");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "configuration");

        $r4 = <androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar: androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion Companion>;

        $r3 = (org.jetbrains.kotlin.com.intellij.openapi.project.Project) r1;

        virtualinvoke $r4.<androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion: void registerProjectExtensions(org.jetbrains.kotlin.com.intellij.openapi.project.Project,org.jetbrains.kotlin.config.CompilerConfiguration)>($r3, r2);

        return;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion $r0;

        $r0 = new androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion;

        specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar: androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion Companion> = $r0;

        return;
    }

androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion
    public final void registerProjectExtensions(org.jetbrains.kotlin.com.intellij.openapi.project.Project, org.jetbrains.kotlin.config.CompilerConfiguration)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion r0;
        org.jetbrains.kotlin.com.intellij.openapi.project.Project r1;
        org.jetbrains.kotlin.config.CompilerConfiguration r2;
        boolean z0, z1;
        androidx.compose.compiler.plugins.kotlin.ComposeConfiguration $r3, $r8;
        org.jetbrains.kotlin.config.CompilerConfigurationKey $r4, $r9;
        java.lang.Boolean $r5, $r7, $r10, $r12;
        java.lang.Object $r6, $r11;
        androidx.compose.compiler.plugins.kotlin.ComposableCallChecker $r13;
        org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion $r14, $r16, $r18, $r20;
        androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker $r15;
        androidx.compose.compiler.plugins.kotlin.UnionAnnotationCheckerProvider $r17;
        androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker $r19;
        androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor $r21;
        androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion $r22;
        org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor $r23;
        androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension $r24;
        org.jetbrains.kotlin.extensions.internal.TypeResolutionInterceptor$Companion $r25;
        androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtension $r26;
        org.jetbrains.kotlin.backend.common.extensions.IrGenerationExtension$Companion $r27;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion;

        r1 := @parameter0: org.jetbrains.kotlin.com.intellij.openapi.project.Project;

        r2 := @parameter1: org.jetbrains.kotlin.config.CompilerConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "project");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "configuration");

        $r3 = <androidx.compose.compiler.plugins.kotlin.ComposeConfiguration: androidx.compose.compiler.plugins.kotlin.ComposeConfiguration INSTANCE>;

        $r4 = virtualinvoke $r3.<androidx.compose.compiler.plugins.kotlin.ComposeConfiguration: org.jetbrains.kotlin.config.CompilerConfigurationKey getLIVE_LITERALS_ENABLED_KEY()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r6 = virtualinvoke r2.<org.jetbrains.kotlin.config.CompilerConfiguration: java.lang.Object get(org.jetbrains.kotlin.config.CompilerConfigurationKey,java.lang.Object)>($r4, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "configuration.get(\n     \u2026      false\n            )");

        $r7 = (java.lang.Boolean) $r6;

        z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        $r8 = <androidx.compose.compiler.plugins.kotlin.ComposeConfiguration: androidx.compose.compiler.plugins.kotlin.ComposeConfiguration INSTANCE>;

        $r9 = virtualinvoke $r8.<androidx.compose.compiler.plugins.kotlin.ComposeConfiguration: org.jetbrains.kotlin.config.CompilerConfigurationKey getSOURCE_INFORMATION_ENABLED_KEY()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r11 = virtualinvoke r2.<org.jetbrains.kotlin.config.CompilerConfiguration: java.lang.Object get(org.jetbrains.kotlin.config.CompilerConfigurationKey,java.lang.Object)>($r9, $r10);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "configuration.get(\n     \u2026      false\n            )");

        $r12 = (java.lang.Boolean) $r11;

        z1 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        $r14 = <org.jetbrains.kotlin.extensions.StorageComponentContainerContributor: org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion Companion>;

        $r13 = new androidx.compose.compiler.plugins.kotlin.ComposableCallChecker;

        specialinvoke $r13.<androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void <init>()>();

        virtualinvoke $r14.<org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,java.lang.Object)>(r1, $r13);

        $r16 = <org.jetbrains.kotlin.extensions.StorageComponentContainerContributor: org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion Companion>;

        $r15 = new androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker;

        specialinvoke $r15.<androidx.compose.compiler.plugins.kotlin.ComposableDeclarationChecker: void <init>()>();

        virtualinvoke $r16.<org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,java.lang.Object)>(r1, $r15);

        $r18 = <org.jetbrains.kotlin.extensions.StorageComponentContainerContributor: org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion Companion>;

        $r17 = new androidx.compose.compiler.plugins.kotlin.UnionAnnotationCheckerProvider;

        specialinvoke $r17.<androidx.compose.compiler.plugins.kotlin.UnionAnnotationCheckerProvider: void <init>()>();

        virtualinvoke $r18.<org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,java.lang.Object)>(r1, $r17);

        $r20 = <org.jetbrains.kotlin.extensions.StorageComponentContainerContributor: org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion Companion>;

        $r19 = new androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker;

        specialinvoke $r19.<androidx.compose.compiler.plugins.kotlin.TryCatchComposableChecker: void <init>()>();

        virtualinvoke $r20.<org.jetbrains.kotlin.extensions.StorageComponentContainerContributor$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,java.lang.Object)>(r1, $r19);

        $r22 = <androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor: androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion Companion>;

        $r21 = new androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor;

        specialinvoke $r21.<androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor: void <init>()>();

        $r23 = (org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor) $r21;

        virtualinvoke $r22.<androidx.compose.compiler.plugins.kotlin.ComposeDiagnosticSuppressor$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,org.jetbrains.kotlin.resolve.diagnostics.DiagnosticSuppressor)>(r1, $r23);

        $r25 = <org.jetbrains.kotlin.extensions.internal.TypeResolutionInterceptor: org.jetbrains.kotlin.extensions.internal.TypeResolutionInterceptor$Companion Companion>;

        $r24 = new androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension;

        specialinvoke $r24.<androidx.compose.compiler.plugins.kotlin.ComposeTypeResolutionInterceptorExtension: void <init>()>();

        virtualinvoke $r25.<org.jetbrains.kotlin.extensions.internal.TypeResolutionInterceptor$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,java.lang.Object)>(r1, $r24);

        $r27 = <org.jetbrains.kotlin.backend.common.extensions.IrGenerationExtension: org.jetbrains.kotlin.backend.common.extensions.IrGenerationExtension$Companion Companion>;

        $r26 = new androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtension;

        specialinvoke $r26.<androidx.compose.compiler.plugins.kotlin.ComposeIrGenerationExtension: void <init>(boolean,boolean)>(z0, z1);

        virtualinvoke $r27.<org.jetbrains.kotlin.backend.common.extensions.IrGenerationExtension$Companion: void registerExtension(org.jetbrains.kotlin.com.intellij.openapi.project.Project,java.lang.Object)>(r1, $r26);

        return;
    }

    private void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposeComponentRegistrar$Companion: void <init>()>();

        return;
    }

