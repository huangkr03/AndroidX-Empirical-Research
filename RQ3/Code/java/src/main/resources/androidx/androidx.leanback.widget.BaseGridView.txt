androidx.leanback.widget.BaseGridView
<androidx.leanback.widget.BaseGridView: int FOCUS_SCROLL_ALIGNED>
<androidx.leanback.widget.BaseGridView: int FOCUS_SCROLL_ITEM>
<androidx.leanback.widget.BaseGridView: int FOCUS_SCROLL_PAGE>
<androidx.leanback.widget.BaseGridView: int WINDOW_ALIGN_LOW_EDGE>
<androidx.leanback.widget.BaseGridView: int WINDOW_ALIGN_HIGH_EDGE>
<androidx.leanback.widget.BaseGridView: int WINDOW_ALIGN_BOTH_EDGE>
<androidx.leanback.widget.BaseGridView: int WINDOW_ALIGN_NO_EDGE>
<androidx.leanback.widget.BaseGridView: float WINDOW_ALIGN_OFFSET_PERCENT_DISABLED>
<androidx.leanback.widget.BaseGridView: float ITEM_ALIGN_OFFSET_PERCENT_DISABLED>
<androidx.leanback.widget.BaseGridView: int SAVE_NO_CHILD>
<androidx.leanback.widget.BaseGridView: int SAVE_ON_SCREEN_CHILD>
<androidx.leanback.widget.BaseGridView: int SAVE_LIMITED_CHILD>
<androidx.leanback.widget.BaseGridView: int SAVE_ALL_CHILD>
<androidx.leanback.widget.BaseGridView: int PFLAG_RETAIN_FOCUS_FOR_CHILD>
<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>
<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior mSmoothScrollByBehavior>
<androidx.leanback.widget.BaseGridView: boolean mAnimateChildLayout>
<androidx.leanback.widget.BaseGridView: boolean mHasOverlappingRendering>
<androidx.leanback.widget.BaseGridView: androidx.recyclerview.widget.RecyclerView$ItemAnimator mSavedItemAnimator>
<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnTouchInterceptListener mOnTouchInterceptListener>
<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnMotionInterceptListener mOnMotionInterceptListener>
<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnKeyInterceptListener mOnKeyInterceptListener>
<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener mOnUnhandledKeyListener>
<androidx.leanback.widget.BaseGridView: int mInitialPrefetchItemCount>
<androidx.leanback.widget.BaseGridView: int mPrivateFlag>
    void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        androidx.leanback.widget.BaseGridView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r3, $r4;
        androidx.recyclerview.widget.RecyclerView$ItemAnimator $r5;
        androidx.recyclerview.widget.SimpleItemAnimator $r6;
        androidx.leanback.widget.BaseGridView$1 $r7;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        r0.<androidx.leanback.widget.BaseGridView: boolean mAnimateChildLayout> = 1;

        r0.<androidx.leanback.widget.BaseGridView: boolean mHasOverlappingRendering> = 1;

        r0.<androidx.leanback.widget.BaseGridView: int mInitialPrefetchItemCount> = 4;

        $r3 = new androidx.leanback.widget.GridLayoutManager;

        specialinvoke $r3.<androidx.leanback.widget.GridLayoutManager: void <init>(androidx.leanback.widget.BaseGridView)>(r0);

        r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager> = $r3;

        $r4 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager)>($r4);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setPreserveFocusAfterLayout(boolean)>(0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setDescendantFocusability(int)>(262144);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setHasFixedSize(boolean)>(1);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setChildrenDrawingOrderEnabled(boolean)>(1);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setWillNotDraw(boolean)>(1);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setOverScrollMode(int)>(2);

        $r5 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: androidx.recyclerview.widget.RecyclerView$ItemAnimator getItemAnimator()>();

        $r6 = (androidx.recyclerview.widget.SimpleItemAnimator) $r5;

        virtualinvoke $r6.<androidx.recyclerview.widget.SimpleItemAnimator: void setSupportsChangeAnimations(boolean)>(0);

        $r7 = new androidx.leanback.widget.BaseGridView$1;

        specialinvoke $r7.<androidx.leanback.widget.BaseGridView$1: void <init>(androidx.leanback.widget.BaseGridView)>(r0);

        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void addRecyclerListener(androidx.recyclerview.widget.RecyclerView$RecyclerListener)>($r7);

        return;
    }

    void initBaseGridViewAttributes(android.content.Context, android.util.AttributeSet)
    {
        androidx.leanback.widget.BaseGridView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        android.content.res.TypedArray r3;
        boolean z0, z1, z2, z3, $z4;
        int[] $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        androidx.leanback.widget.GridLayoutManager $r5, $r6, $r7, $r8;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        $r4 = <androidx.leanback.widget.R$styleable: int[] lbBaseGridView>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>(r2, $r4);

        $i0 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_focusOutFront>;

        z0 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, 0);

        $i1 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_focusOutEnd>;

        z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i1, 0);

        $r5 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r5.<androidx.leanback.widget.GridLayoutManager: void setFocusOutAllowed(boolean,boolean)>(z0, z1);

        $i2 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_focusOutSideStart>;

        z2 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i2, 1);

        $i3 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_focusOutSideEnd>;

        z3 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i3, 1);

        $r6 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r6.<androidx.leanback.widget.GridLayoutManager: void setFocusOutSideAllowed(boolean,boolean)>(z2, z3);

        $r7 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i5 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_android_verticalSpacing>;

        $i4 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_verticalMargin>;

        $i6 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i4, 0);

        $i7 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i5, $i6);

        virtualinvoke $r7.<androidx.leanback.widget.GridLayoutManager: void setVerticalSpacing(int)>($i7);

        $r8 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i9 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_android_horizontalSpacing>;

        $i8 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_horizontalMargin>;

        $i10 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i8, 0);

        $i11 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i9, $i10);

        virtualinvoke $r8.<androidx.leanback.widget.GridLayoutManager: void setHorizontalSpacing(int)>($i11);

        $i12 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_android_gravity>;

        $z4 = virtualinvoke r3.<android.content.res.TypedArray: boolean hasValue(int)>($i12);

        if $z4 == 0 goto label1;

        $i13 = <androidx.leanback.widget.R$styleable: int lbBaseGridView_android_gravity>;

        $i14 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>($i13, 0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setGravity(int)>($i14);

     label1:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    public void setFocusScrollStrategy(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        androidx.leanback.widget.GridLayoutManager $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid scrollStrategy");

        throw $r1;

     label1:
        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void setFocusScrollStrategy(int)>(i0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public int getFocusScrollStrategy()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getFocusScrollStrategy()>();

        return $i0;
    }

    public void setWindowAlignment(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setWindowAlignment(int)>(i0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public int getWindowAlignment()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getWindowAlignment()>();

        return $i0;
    }

    public void setWindowAlignmentPreferKeyLineOverLowEdge(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;
        androidx.leanback.widget.GridLayoutManager $r1;
        androidx.leanback.widget.WindowAlignment $r2;
        androidx.leanback.widget.WindowAlignment$Axis $r3;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r2 = $r1.<androidx.leanback.widget.GridLayoutManager: androidx.leanback.widget.WindowAlignment mWindowAlignment>;

        $r3 = virtualinvoke $r2.<androidx.leanback.widget.WindowAlignment: androidx.leanback.widget.WindowAlignment$Axis mainAxis()>();

        virtualinvoke $r3.<androidx.leanback.widget.WindowAlignment$Axis: void setPreferKeylineOverLowEdge(boolean)>(z0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public void setWindowAlignmentPreferKeyLineOverHighEdge(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;
        androidx.leanback.widget.GridLayoutManager $r1;
        androidx.leanback.widget.WindowAlignment $r2;
        androidx.leanback.widget.WindowAlignment$Axis $r3;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r2 = $r1.<androidx.leanback.widget.GridLayoutManager: androidx.leanback.widget.WindowAlignment mWindowAlignment>;

        $r3 = virtualinvoke $r2.<androidx.leanback.widget.WindowAlignment: androidx.leanback.widget.WindowAlignment$Axis mainAxis()>();

        virtualinvoke $r3.<androidx.leanback.widget.WindowAlignment$Axis: void setPreferKeylineOverHighEdge(boolean)>(z0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public boolean isWindowAlignmentPreferKeyLineOverLowEdge()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        androidx.leanback.widget.WindowAlignment $r2;
        androidx.leanback.widget.WindowAlignment$Axis $r3;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r2 = $r1.<androidx.leanback.widget.GridLayoutManager: androidx.leanback.widget.WindowAlignment mWindowAlignment>;

        $r3 = virtualinvoke $r2.<androidx.leanback.widget.WindowAlignment: androidx.leanback.widget.WindowAlignment$Axis mainAxis()>();

        $z0 = virtualinvoke $r3.<androidx.leanback.widget.WindowAlignment$Axis: boolean isPreferKeylineOverLowEdge()>();

        return $z0;
    }

    public boolean isWindowAlignmentPreferKeyLineOverHighEdge()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        androidx.leanback.widget.WindowAlignment $r2;
        androidx.leanback.widget.WindowAlignment$Axis $r3;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r2 = $r1.<androidx.leanback.widget.GridLayoutManager: androidx.leanback.widget.WindowAlignment mWindowAlignment>;

        $r3 = virtualinvoke $r2.<androidx.leanback.widget.WindowAlignment: androidx.leanback.widget.WindowAlignment$Axis mainAxis()>();

        $z0 = virtualinvoke $r3.<androidx.leanback.widget.WindowAlignment$Axis: boolean isPreferKeylineOverHighEdge()>();

        return $z0;
    }

    public void setWindowAlignmentOffset(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setWindowAlignmentOffset(int)>(i0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public int getWindowAlignmentOffset()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getWindowAlignmentOffset()>();

        return $i0;
    }

    public void setWindowAlignmentOffsetPercent(float)
    {
        androidx.leanback.widget.BaseGridView r0;
        float f0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setWindowAlignmentOffsetPercent(float)>(f0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public float getWindowAlignmentOffsetPercent()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        float $f0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $f0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: float getWindowAlignmentOffsetPercent()>();

        return $f0;
    }

    public void setItemAlignmentOffset(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setItemAlignmentOffset(int)>(i0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public int getItemAlignmentOffset()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getItemAlignmentOffset()>();

        return $i0;
    }

    public void setItemAlignmentOffsetWithPadding(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setItemAlignmentOffsetWithPadding(boolean)>(z0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public boolean isItemAlignmentOffsetWithPadding()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $z0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: boolean isItemAlignmentOffsetWithPadding()>();

        return $z0;
    }

    public void setItemAlignmentOffsetPercent(float)
    {
        androidx.leanback.widget.BaseGridView r0;
        float f0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setItemAlignmentOffsetPercent(float)>(f0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public float getItemAlignmentOffsetPercent()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        float $f0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $f0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: float getItemAlignmentOffsetPercent()>();

        return $f0;
    }

    public void setItemAlignmentViewId(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setItemAlignmentViewId(int)>(i0);

        return;
    }

    public int getItemAlignmentViewId()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getItemAlignmentViewId()>();

        return $i0;
    }

    public void setItemMargin(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setItemSpacing(int)>(i0);

        return;
    }

    public void setItemSpacing(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setItemSpacing(int)>(i0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public void setVerticalMargin(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setVerticalSpacing(int)>(i0);

        return;
    }

    public int getVerticalMargin()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getVerticalSpacing()>();

        return $i0;
    }

    public void setHorizontalMargin(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setHorizontalSpacing(int)>(i0);

        return;
    }

    public int getHorizontalMargin()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getHorizontalSpacing()>();

        return $i0;
    }

    public void setVerticalSpacing(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setVerticalSpacing(int)>(i0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public int getVerticalSpacing()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getVerticalSpacing()>();

        return $i0;
    }

    public void setHorizontalSpacing(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setHorizontalSpacing(int)>(i0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public int getHorizontalSpacing()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getHorizontalSpacing()>();

        return $i0;
    }

    public void setOnChildLaidOutListener(androidx.leanback.widget.OnChildLaidOutListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.OnChildLaidOutListener r1;
        androidx.leanback.widget.GridLayoutManager $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.OnChildLaidOutListener;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void setOnChildLaidOutListener(androidx.leanback.widget.OnChildLaidOutListener)>(r1);

        return;
    }

    public void setOnChildSelectedListener(androidx.leanback.widget.OnChildSelectedListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.OnChildSelectedListener r1;
        androidx.leanback.widget.GridLayoutManager $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.OnChildSelectedListener;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void setOnChildSelectedListener(androidx.leanback.widget.OnChildSelectedListener)>(r1);

        return;
    }

    public final void addOnLayoutCompletedListener(androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener r1;
        androidx.leanback.widget.GridLayoutManager $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void addOnLayoutCompletedListener(androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener)>(r1);

        return;
    }

    public final void removeOnLayoutCompletedListener(androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener r1;
        androidx.leanback.widget.GridLayoutManager $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void removeOnLayoutCompletedListener(androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener)>(r1);

        return;
    }

    public void setOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.OnChildViewHolderSelectedListener r1;
        androidx.leanback.widget.GridLayoutManager $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.OnChildViewHolderSelectedListener;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void setOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)>(r1);

        return;
    }

    public void addOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.OnChildViewHolderSelectedListener r1;
        androidx.leanback.widget.GridLayoutManager $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.OnChildViewHolderSelectedListener;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void addOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)>(r1);

        return;
    }

    public void removeOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.OnChildViewHolderSelectedListener r1;
        androidx.leanback.widget.GridLayoutManager $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.OnChildViewHolderSelectedListener;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void removeOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)>(r1);

        return;
    }

    public void setSelectedPosition(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setSelection(int,int)>(i0, 0);

        return;
    }

    public void setSelectedPositionWithSub(int, int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, i1;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setSelectionWithSub(int,int,int)>(i0, i1, 0);

        return;
    }

    public void setSelectedPosition(int, int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, i1;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setSelection(int,int)>(i0, i1);

        return;
    }

    public void setSelectedPositionWithSub(int, int, int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, i1, i2;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setSelectionWithSub(int,int,int)>(i0, i1, i2);

        return;
    }

    public void setSelectedPositionSmooth(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setSelectionSmooth(int)>(i0);

        return;
    }

    public void setSelectedPositionSmoothWithSub(int, int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, i1;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setSelectionSmoothWithSub(int,int)>(i0, i1);

        return;
    }

    public void setSelectedPositionSmooth(int, androidx.leanback.widget.ViewHolderTask)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.ViewHolderTask r1;
        androidx.recyclerview.widget.RecyclerView$ViewHolder r2;
        androidx.leanback.widget.BaseGridView$2 $r3;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.leanback.widget.ViewHolderTask;

        if r1 == null goto label3;

        r2 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: androidx.recyclerview.widget.RecyclerView$ViewHolder findViewHolderForPosition(int)>(i0);

        if r2 == null goto label1;

        $z0 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: boolean hasPendingAdapterUpdates()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = new androidx.leanback.widget.BaseGridView$2;

        specialinvoke $r3.<androidx.leanback.widget.BaseGridView$2: void <init>(androidx.leanback.widget.BaseGridView,int,androidx.leanback.widget.ViewHolderTask)>(r0, i0, r1);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void addOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)>($r3);

        goto label3;

     label2:
        interfaceinvoke r1.<androidx.leanback.widget.ViewHolderTask: void run(androidx.recyclerview.widget.RecyclerView$ViewHolder)>(r2);

     label3:
        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setSelectedPositionSmooth(int)>(i0);

        return;
    }

    public void setSelectedPosition(int, androidx.leanback.widget.ViewHolderTask)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.ViewHolderTask r1;
        androidx.recyclerview.widget.RecyclerView$ViewHolder r2;
        androidx.leanback.widget.BaseGridView$3 $r3;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.leanback.widget.ViewHolderTask;

        if r1 == null goto label3;

        r2 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: androidx.recyclerview.widget.RecyclerView$ViewHolder findViewHolderForPosition(int)>(i0);

        if r2 == null goto label1;

        $z0 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: boolean hasPendingAdapterUpdates()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = new androidx.leanback.widget.BaseGridView$3;

        specialinvoke $r3.<androidx.leanback.widget.BaseGridView$3: void <init>(androidx.leanback.widget.BaseGridView,int,androidx.leanback.widget.ViewHolderTask)>(r0, i0, r1);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void addOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)>($r3);

        goto label3;

     label2:
        interfaceinvoke r1.<androidx.leanback.widget.ViewHolderTask: void run(androidx.recyclerview.widget.RecyclerView$ViewHolder)>(r2);

     label3:
        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setSelectedPosition(int)>(i0);

        return;
    }

    public int getSelectedPosition()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getSelection()>();

        return $i0;
    }

    public int getSelectedSubPosition()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getSubSelection()>();

        return $i0;
    }

    public void setAnimateChildLayout(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0, $z1, $z2;
        androidx.recyclerview.widget.RecyclerView$ItemAnimator $r1, $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.leanback.widget.BaseGridView: boolean mAnimateChildLayout>;

        if $z1 == z0 goto label2;

        r0.<androidx.leanback.widget.BaseGridView: boolean mAnimateChildLayout> = z0;

        $z2 = r0.<androidx.leanback.widget.BaseGridView: boolean mAnimateChildLayout>;

        if $z2 != 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: androidx.recyclerview.widget.RecyclerView$ItemAnimator getItemAnimator()>();

        r0.<androidx.leanback.widget.BaseGridView: androidx.recyclerview.widget.RecyclerView$ItemAnimator mSavedItemAnimator> = $r2;

        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void setItemAnimator(androidx.recyclerview.widget.RecyclerView$ItemAnimator)>(null);

        goto label2;

     label1:
        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.recyclerview.widget.RecyclerView$ItemAnimator mSavedItemAnimator>;

        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void setItemAnimator(androidx.recyclerview.widget.RecyclerView$ItemAnimator)>($r1);

     label2:
        return;
    }

    public boolean isChildLayoutAnimated()
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $z0 = r0.<androidx.leanback.widget.BaseGridView: boolean mAnimateChildLayout>;

        return $z0;
    }

    public void setGravity(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setGravity(int)>(i0);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void requestLayout()>();

        return;
    }

    public void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.recyclerview.widget.RecyclerView$LayoutManager r1;
        androidx.leanback.widget.GridLayoutManager $r2, $r3, $r4, $r5;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.recyclerview.widget.RecyclerView$LayoutManager;

        if r1 != null goto label2;

        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager)>(null);

        $r4 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        if $r4 == null goto label1;

        $r5 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r5.<androidx.leanback.widget.GridLayoutManager: void setGridView(androidx.leanback.widget.BaseGridView)>(null);

     label1:
        r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager> = null;

        return;

     label2:
        $r2 = (androidx.leanback.widget.GridLayoutManager) r1;

        r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager> = $r2;

        $r3 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r3.<androidx.leanback.widget.GridLayoutManager: void setGridView(androidx.leanback.widget.BaseGridView)>(r0);

        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager)>(r1);

        return;
    }

    public boolean onRequestFocusInDescendants(int, android.graphics.Rect)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, $i1, $i2;
        android.graphics.Rect r1;
        androidx.leanback.widget.GridLayoutManager $r2;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $i1 = r0.<androidx.leanback.widget.BaseGridView: int mPrivateFlag>;

        $i2 = $i1 & 1;

        if $i2 != 1 goto label1;

        return 0;

     label1:
        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $z0 = virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: boolean gridOnRequestFocusInDescendants(androidx.recyclerview.widget.RecyclerView,int,android.graphics.Rect)>(r0, i0, r1);

        return $z0;
    }

    public void getViewSelectedOffsets(android.view.View, int[])
    {
        androidx.leanback.widget.BaseGridView r0;
        android.view.View r1;
        int[] r2;
        androidx.leanback.widget.GridLayoutManager $r3;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: int[];

        $r3 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r3.<androidx.leanback.widget.GridLayoutManager: void getViewSelectedOffsets(android.view.View,int[])>(r1, r2);

        return;
    }

    public int getChildDrawingOrder(int, int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, i1, $i2;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i2 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getChildDrawingOrder(androidx.recyclerview.widget.RecyclerView,int,int)>(r0, i0, i1);

        return $i2;
    }

    final boolean isChildrenDrawingOrderEnabledInternal()
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $z0 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: boolean isChildrenDrawingOrderEnabled()>();

        return $z0;
    }

    public android.view.View focusSearch(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, $i1;
        android.view.View r1, $r2, $r5;
        boolean $z0;
        androidx.leanback.widget.GridLayoutManager $r3, $r4;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: boolean isFocused()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r3 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i1 = virtualinvoke $r3.<androidx.leanback.widget.GridLayoutManager: int getSelection()>();

        r1 = virtualinvoke $r4.<androidx.leanback.widget.GridLayoutManager: android.view.View findViewByPosition(int)>($i1);

        if r1 == null goto label1;

        $r5 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: android.view.View focusSearch(android.view.View,int)>(r1, i0);

        return $r5;

     label1:
        $r2 = specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: android.view.View focusSearch(int)>(i0);

        return $r2;
    }

    protected void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;
        int i0;
        android.graphics.Rect r1;
        androidx.leanback.widget.GridLayoutManager $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void onFocusChanged(boolean,int,android.graphics.Rect)>(z0, i0, r1);

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void onFocusChanged(boolean,int,android.graphics.Rect)>(z0, i0, r1);

        return;
    }

    public final void setFocusSearchDisabled(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 393216;

        goto label2;

     label1:
        $i0 = 262144;

     label2:
        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void setDescendantFocusability(int)>($i0);

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setFocusSearchDisabled(boolean)>(z0);

        return;
    }

    public final boolean isFocusSearchDisabled()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $z0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: boolean isFocusSearchDisabled()>();

        return $z0;
    }

    public void setLayoutEnabled(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setLayoutEnabled(boolean)>(z0);

        return;
    }

    public void setChildrenVisibility(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setChildrenVisibility(int)>(i0);

        return;
    }

    public void setPruneChild(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setPruneChild(boolean)>(z0);

        return;
    }

    public void setScrollEnabled(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setScrollEnabled(boolean)>(z0);

        return;
    }

    public boolean isScrollEnabled()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $z0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: boolean isScrollEnabled()>();

        return $z0;
    }

    public boolean hasPreviousViewInSameRow(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $z0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: boolean hasPreviousViewInSameRow(int)>(i0);

        return $z0;
    }

    public void setFocusDrawingOrderEnabled(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void setChildrenDrawingOrderEnabled(boolean)>(z0);

        return;
    }

    public boolean isFocusDrawingOrderEnabled()
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $z0 = specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: boolean isChildrenDrawingOrderEnabled()>();

        return $z0;
    }

    public void setOnTouchInterceptListener(androidx.leanback.widget.BaseGridView$OnTouchInterceptListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.BaseGridView$OnTouchInterceptListener r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView$OnTouchInterceptListener;

        r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnTouchInterceptListener mOnTouchInterceptListener> = r1;

        return;
    }

    public void setOnMotionInterceptListener(androidx.leanback.widget.BaseGridView$OnMotionInterceptListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.BaseGridView$OnMotionInterceptListener r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView$OnMotionInterceptListener;

        r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnMotionInterceptListener mOnMotionInterceptListener> = r1;

        return;
    }

    public void setOnKeyInterceptListener(androidx.leanback.widget.BaseGridView$OnKeyInterceptListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.BaseGridView$OnKeyInterceptListener r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView$OnKeyInterceptListener;

        r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnKeyInterceptListener mOnKeyInterceptListener> = r1;

        return;
    }

    public void setOnUnhandledKeyListener(androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener;

        r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener mOnUnhandledKeyListener> = r1;

        return;
    }

    public androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener getOnUnhandledKeyListener()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener mOnUnhandledKeyListener>;

        return $r1;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        androidx.leanback.widget.BaseGridView r0;
        android.view.KeyEvent r1;
        androidx.leanback.widget.BaseGridView$OnKeyInterceptListener $r2, $r5;
        boolean $z0, $z1, $z2, $z3;
        androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener $r3, $r4;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnKeyInterceptListener mOnKeyInterceptListener>;

        if $r2 == null goto label1;

        $r5 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnKeyInterceptListener mOnKeyInterceptListener>;

        $z2 = interfaceinvoke $r5.<androidx.leanback.widget.BaseGridView$OnKeyInterceptListener: boolean onInterceptKeyEvent(android.view.KeyEvent)>(r1);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener mOnUnhandledKeyListener>;

        if $r3 == null goto label3;

        $r4 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener mOnUnhandledKeyListener>;

        $z1 = interfaceinvoke $r4.<androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener: boolean onUnhandledKey(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        androidx.leanback.widget.BaseGridView r0;
        android.view.MotionEvent r1;
        androidx.leanback.widget.BaseGridView$OnTouchInterceptListener $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnTouchInterceptListener mOnTouchInterceptListener>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnTouchInterceptListener mOnTouchInterceptListener>;

        $z1 = interfaceinvoke $r3.<androidx.leanback.widget.BaseGridView$OnTouchInterceptListener: boolean onInterceptTouchEvent(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    protected boolean dispatchGenericFocusedEvent(android.view.MotionEvent)
    {
        androidx.leanback.widget.BaseGridView r0;
        android.view.MotionEvent r1;
        androidx.leanback.widget.BaseGridView$OnMotionInterceptListener $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnMotionInterceptListener mOnMotionInterceptListener>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$OnMotionInterceptListener mOnMotionInterceptListener>;

        $z1 = interfaceinvoke $r3.<androidx.leanback.widget.BaseGridView$OnMotionInterceptListener: boolean onInterceptMotionEvent(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public final int getSaveChildrenPolicy()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        androidx.leanback.widget.ViewsStateBundle $r2;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r2 = $r1.<androidx.leanback.widget.GridLayoutManager: androidx.leanback.widget.ViewsStateBundle mChildrenStates>;

        $i0 = virtualinvoke $r2.<androidx.leanback.widget.ViewsStateBundle: int getSavePolicy()>();

        return $i0;
    }

    public final int getSaveChildrenLimitNumber()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        androidx.leanback.widget.ViewsStateBundle $r2;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r2 = $r1.<androidx.leanback.widget.GridLayoutManager: androidx.leanback.widget.ViewsStateBundle mChildrenStates>;

        $i0 = virtualinvoke $r2.<androidx.leanback.widget.ViewsStateBundle: int getLimitNumber()>();

        return $i0;
    }

    public final void setSaveChildrenPolicy(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;
        androidx.leanback.widget.ViewsStateBundle $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r2 = $r1.<androidx.leanback.widget.GridLayoutManager: androidx.leanback.widget.ViewsStateBundle mChildrenStates>;

        virtualinvoke $r2.<androidx.leanback.widget.ViewsStateBundle: void setSavePolicy(int)>(i0);

        return;
    }

    public final void setSaveChildrenLimitNumber(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;
        androidx.leanback.widget.ViewsStateBundle $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r2 = $r1.<androidx.leanback.widget.GridLayoutManager: androidx.leanback.widget.ViewsStateBundle mChildrenStates>;

        virtualinvoke $r2.<androidx.leanback.widget.ViewsStateBundle: void setLimitNumber(int)>(i0);

        return;
    }

    public boolean hasOverlappingRendering()
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $z0 = r0.<androidx.leanback.widget.BaseGridView: boolean mHasOverlappingRendering>;

        return $z0;
    }

    public void setHasOverlappingRendering(boolean)
    {
        androidx.leanback.widget.BaseGridView r0;
        boolean z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        z0 := @parameter0: boolean;

        r0.<androidx.leanback.widget.BaseGridView: boolean mHasOverlappingRendering> = z0;

        return;
    }

    public void onRtlPropertiesChanged(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1, $r2;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void onRtlPropertiesChanged(int)>(i0);

     label1:
        return;
    }

    public void setExtraLayoutSpace(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void setExtraLayoutSpace(int)>(i0);

        return;
    }

    public int getExtraLayoutSpace()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: int getExtraLayoutSpace()>();

        return $i0;
    }

    public void animateOut()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void slideOut()>();

        return;
    }

    public void animateIn()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: void slideIn()>();

        return;
    }

    public void scrollToPosition(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $z0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: boolean isSlidingChildViews()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void setSelectionWithSub(int,int,int)>(i0, 0, 0);

        return;

     label1:
        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void scrollToPosition(int)>(i0);

        return;
    }

    public void smoothScrollToPosition(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $z0 = virtualinvoke $r1.<androidx.leanback.widget.GridLayoutManager: boolean isSlidingChildViews()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r2.<androidx.leanback.widget.GridLayoutManager: void setSelectionWithSub(int,int,int)>(i0, 0, 0);

        return;

     label1:
        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void smoothScrollToPosition(int)>(i0);

        return;
    }

    public final void setSmoothScrollByBehavior(androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior)
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior;

        r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior mSmoothScrollByBehavior> = r1;

        return;
    }

    public androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior getSmoothScrollByBehavior()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior mSmoothScrollByBehavior>;

        return $r1;
    }

    public void smoothScrollBy(int, int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, i1, $i2;
        androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior $r1, $r2, $r4;
        android.view.animation.Interpolator $r3;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior mSmoothScrollByBehavior>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior mSmoothScrollByBehavior>;

        $r3 = interfaceinvoke $r2.<androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior: android.view.animation.Interpolator configSmoothScrollByInterpolator(int,int)>(i0, i1);

        $r4 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior mSmoothScrollByBehavior>;

        $i2 = interfaceinvoke $r4.<androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior: int configSmoothScrollByDuration(int,int)>(i0, i1);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void smoothScrollBy(int,int,android.view.animation.Interpolator,int)>(i0, i1, $r3, $i2);

        goto label2;

     label1:
        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void smoothScrollBy(int,int,android.view.animation.Interpolator,int)>(i0, i1, null, -2147483648);

     label2:
        return;
    }

    public void smoothScrollBy(int, int, android.view.animation.Interpolator)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, i1, $i2;
        android.view.animation.Interpolator r1;
        androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior $r2, $r3;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.animation.Interpolator;

        $r2 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior mSmoothScrollByBehavior>;

        if $r2 == null goto label1;

        $r3 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior mSmoothScrollByBehavior>;

        $i2 = interfaceinvoke $r3.<androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior: int configSmoothScrollByDuration(int,int)>(i0, i1);

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void smoothScrollBy(int,int,android.view.animation.Interpolator,int)>(i0, i1, r1, $i2);

        goto label2;

     label1:
        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: void smoothScrollBy(int,int,android.view.animation.Interpolator,int)>(i0, i1, r1, -2147483648);

     label2:
        return;
    }

    public final void setSmoothScrollSpeedFactor(float)
    {
        androidx.leanback.widget.BaseGridView r0;
        float f0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r1.<androidx.leanback.widget.GridLayoutManager: float mSmoothScrollSpeedFactor> = f0;

        return;
    }

    public final float getSmoothScrollSpeedFactor()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        float $f0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $f0 = $r1.<androidx.leanback.widget.GridLayoutManager: float mSmoothScrollSpeedFactor>;

        return $f0;
    }

    public final void setSmoothScrollMaxPendingMoves(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;
        androidx.leanback.widget.GridLayoutManager $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $r1.<androidx.leanback.widget.GridLayoutManager: int mMaxPendingMoves> = i0;

        return;
    }

    public final int getSmoothScrollMaxPendingMoves()
    {
        androidx.leanback.widget.BaseGridView r0;
        androidx.leanback.widget.GridLayoutManager $r1;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $r1 = r0.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        $i0 = $r1.<androidx.leanback.widget.GridLayoutManager: int mMaxPendingMoves>;

        return $i0;
    }

    public void setInitialPrefetchItemCount(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        r0.<androidx.leanback.widget.BaseGridView: int mInitialPrefetchItemCount> = i0;

        return;
    }

    public int getInitialPrefetchItemCount()
    {
        androidx.leanback.widget.BaseGridView r0;
        int $i0;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        $i0 = r0.<androidx.leanback.widget.BaseGridView: int mInitialPrefetchItemCount>;

        return $i0;
    }

    public void removeView(android.view.View)
    {
        androidx.leanback.widget.BaseGridView r0;
        android.view.View r1;
        boolean z0, $z1, $z3, $z4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        r1 := @parameter0: android.view.View;

        $z1 = virtualinvoke r1.<android.view.View: boolean hasFocus()>();

        if $z1 == 0 goto label1;

        $z3 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: boolean isFocusable()>();

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        if z0 == 0 goto label3;

        $i2 = r0.<androidx.leanback.widget.BaseGridView: int mPrivateFlag>;

        $i3 = $i2 | 1;

        r0.<androidx.leanback.widget.BaseGridView: int mPrivateFlag> = $i3;

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: boolean requestFocus()>();

     label3:
        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void removeView(android.view.View)>(r1);

        if z0 == 0 goto label4;

        $i0 = r0.<androidx.leanback.widget.BaseGridView: int mPrivateFlag>;

        $i1 = $i0 ^ -2;

        r0.<androidx.leanback.widget.BaseGridView: int mPrivateFlag> = $i1;

     label4:
        return;
    }

    public void removeViewAt(int)
    {
        androidx.leanback.widget.BaseGridView r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;
        android.view.View $r1;

        r0 := @this: androidx.leanback.widget.BaseGridView;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.leanback.widget.BaseGridView: android.view.View getChildAt(int)>(i0);

        z0 = virtualinvoke $r1.<android.view.View: boolean hasFocus()>();

        if z0 == 0 goto label1;

        $i3 = r0.<androidx.leanback.widget.BaseGridView: int mPrivateFlag>;

        $i4 = $i3 | 1;

        r0.<androidx.leanback.widget.BaseGridView: int mPrivateFlag> = $i4;

        virtualinvoke r0.<androidx.leanback.widget.BaseGridView: boolean requestFocus()>();

     label1:
        specialinvoke r0.<androidx.recyclerview.widget.RecyclerView: void removeViewAt(int)>(i0);

        if z0 == 0 goto label2;

        $i1 = r0.<androidx.leanback.widget.BaseGridView: int mPrivateFlag>;

        $i2 = $i1 ^ -2;

        r0.<androidx.leanback.widget.BaseGridView: int mPrivateFlag> = $i2;

     label2:
        return;
    }

androidx.leanback.widget.BaseGridView$1
<androidx.leanback.widget.BaseGridView$1: androidx.leanback.widget.BaseGridView this$0>
    void <init>(androidx.leanback.widget.BaseGridView)
    {
        androidx.leanback.widget.BaseGridView$1 r0;
        androidx.leanback.widget.BaseGridView r1;

        r0 := @this: androidx.leanback.widget.BaseGridView$1;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView;

        r0.<androidx.leanback.widget.BaseGridView$1: androidx.leanback.widget.BaseGridView this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onViewRecycled(androidx.recyclerview.widget.RecyclerView$ViewHolder)
    {
        androidx.leanback.widget.BaseGridView$1 r0;
        androidx.recyclerview.widget.RecyclerView$ViewHolder r1;
        androidx.leanback.widget.BaseGridView $r2;
        androidx.leanback.widget.GridLayoutManager $r3;

        r0 := @this: androidx.leanback.widget.BaseGridView$1;

        r1 := @parameter0: androidx.recyclerview.widget.RecyclerView$ViewHolder;

        $r2 = r0.<androidx.leanback.widget.BaseGridView$1: androidx.leanback.widget.BaseGridView this$0>;

        $r3 = $r2.<androidx.leanback.widget.BaseGridView: androidx.leanback.widget.GridLayoutManager mLayoutManager>;

        virtualinvoke $r3.<androidx.leanback.widget.GridLayoutManager: void onChildRecycled(androidx.recyclerview.widget.RecyclerView$ViewHolder)>(r1);

        return;
    }

androidx.leanback.widget.BaseGridView$2
<androidx.leanback.widget.BaseGridView$2: int val$position>
<androidx.leanback.widget.BaseGridView$2: androidx.leanback.widget.ViewHolderTask val$task>
<androidx.leanback.widget.BaseGridView$2: androidx.leanback.widget.BaseGridView this$0>
    void <init>(androidx.leanback.widget.BaseGridView, int, androidx.leanback.widget.ViewHolderTask)
    {
        androidx.leanback.widget.BaseGridView$2 r0;
        androidx.leanback.widget.BaseGridView r1;
        int i0;
        androidx.leanback.widget.ViewHolderTask r2;

        r0 := @this: androidx.leanback.widget.BaseGridView$2;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.leanback.widget.ViewHolderTask;

        r0.<androidx.leanback.widget.BaseGridView$2: androidx.leanback.widget.BaseGridView this$0> = r1;

        r0.<androidx.leanback.widget.BaseGridView$2: int val$position> = i0;

        r0.<androidx.leanback.widget.BaseGridView$2: androidx.leanback.widget.ViewHolderTask val$task> = r2;

        specialinvoke r0.<androidx.leanback.widget.OnChildViewHolderSelectedListener: void <init>()>();

        return;
    }

    public void onChildViewHolderSelected(androidx.recyclerview.widget.RecyclerView, androidx.recyclerview.widget.RecyclerView$ViewHolder, int, int)
    {
        androidx.leanback.widget.BaseGridView$2 r0;
        androidx.recyclerview.widget.RecyclerView r1;
        androidx.recyclerview.widget.RecyclerView$ViewHolder r2;
        int i0, i1, $i2;
        androidx.leanback.widget.BaseGridView $r3;
        androidx.leanback.widget.ViewHolderTask $r4;

        r0 := @this: androidx.leanback.widget.BaseGridView$2;

        r1 := @parameter0: androidx.recyclerview.widget.RecyclerView;

        r2 := @parameter1: androidx.recyclerview.widget.RecyclerView$ViewHolder;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = r0.<androidx.leanback.widget.BaseGridView$2: int val$position>;

        if i0 != $i2 goto label1;

        $r3 = r0.<androidx.leanback.widget.BaseGridView$2: androidx.leanback.widget.BaseGridView this$0>;

        virtualinvoke $r3.<androidx.leanback.widget.BaseGridView: void removeOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)>(r0);

        $r4 = r0.<androidx.leanback.widget.BaseGridView$2: androidx.leanback.widget.ViewHolderTask val$task>;

        interfaceinvoke $r4.<androidx.leanback.widget.ViewHolderTask: void run(androidx.recyclerview.widget.RecyclerView$ViewHolder)>(r2);

     label1:
        return;
    }

androidx.leanback.widget.BaseGridView$3
<androidx.leanback.widget.BaseGridView$3: int val$position>
<androidx.leanback.widget.BaseGridView$3: androidx.leanback.widget.ViewHolderTask val$task>
<androidx.leanback.widget.BaseGridView$3: androidx.leanback.widget.BaseGridView this$0>
    void <init>(androidx.leanback.widget.BaseGridView, int, androidx.leanback.widget.ViewHolderTask)
    {
        androidx.leanback.widget.BaseGridView$3 r0;
        androidx.leanback.widget.BaseGridView r1;
        int i0;
        androidx.leanback.widget.ViewHolderTask r2;

        r0 := @this: androidx.leanback.widget.BaseGridView$3;

        r1 := @parameter0: androidx.leanback.widget.BaseGridView;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.leanback.widget.ViewHolderTask;

        r0.<androidx.leanback.widget.BaseGridView$3: androidx.leanback.widget.BaseGridView this$0> = r1;

        r0.<androidx.leanback.widget.BaseGridView$3: int val$position> = i0;

        r0.<androidx.leanback.widget.BaseGridView$3: androidx.leanback.widget.ViewHolderTask val$task> = r2;

        specialinvoke r0.<androidx.leanback.widget.OnChildViewHolderSelectedListener: void <init>()>();

        return;
    }

    public void onChildViewHolderSelectedAndPositioned(androidx.recyclerview.widget.RecyclerView, androidx.recyclerview.widget.RecyclerView$ViewHolder, int, int)
    {
        androidx.leanback.widget.BaseGridView$3 r0;
        androidx.recyclerview.widget.RecyclerView r1;
        androidx.recyclerview.widget.RecyclerView$ViewHolder r2;
        int i0, i1, $i2;
        androidx.leanback.widget.BaseGridView $r3;
        androidx.leanback.widget.ViewHolderTask $r4;

        r0 := @this: androidx.leanback.widget.BaseGridView$3;

        r1 := @parameter0: androidx.recyclerview.widget.RecyclerView;

        r2 := @parameter1: androidx.recyclerview.widget.RecyclerView$ViewHolder;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = r0.<androidx.leanback.widget.BaseGridView$3: int val$position>;

        if i0 != $i2 goto label1;

        $r3 = r0.<androidx.leanback.widget.BaseGridView$3: androidx.leanback.widget.BaseGridView this$0>;

        virtualinvoke $r3.<androidx.leanback.widget.BaseGridView: void removeOnChildViewHolderSelectedListener(androidx.leanback.widget.OnChildViewHolderSelectedListener)>(r0);

        $r4 = r0.<androidx.leanback.widget.BaseGridView$3: androidx.leanback.widget.ViewHolderTask val$task>;

        interfaceinvoke $r4.<androidx.leanback.widget.ViewHolderTask: void run(androidx.recyclerview.widget.RecyclerView$ViewHolder)>(r2);

     label1:
        return;
    }

androidx.leanback.widget.BaseGridView$OnKeyInterceptListener
<androidx.leanback.widget.BaseGridView$OnKeyInterceptListener: boolean onInterceptKeyEvent(android.view.KeyEvent)>
androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener
<androidx.leanback.widget.BaseGridView$OnLayoutCompletedListener: void onLayoutCompleted(androidx.recyclerview.widget.RecyclerView$State)>
androidx.leanback.widget.BaseGridView$OnMotionInterceptListener
<androidx.leanback.widget.BaseGridView$OnMotionInterceptListener: boolean onInterceptMotionEvent(android.view.MotionEvent)>
androidx.leanback.widget.BaseGridView$OnTouchInterceptListener
<androidx.leanback.widget.BaseGridView$OnTouchInterceptListener: boolean onInterceptTouchEvent(android.view.MotionEvent)>
androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener
<androidx.leanback.widget.BaseGridView$OnUnhandledKeyListener: boolean onUnhandledKey(android.view.KeyEvent)>
androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior
<androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior: int configSmoothScrollByDuration(int,int)>
<androidx.leanback.widget.BaseGridView$SmoothScrollByBehavior: android.view.animation.Interpolator configSmoothScrollByInterpolator(int,int)>
