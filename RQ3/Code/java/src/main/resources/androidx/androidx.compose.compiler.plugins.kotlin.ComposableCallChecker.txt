androidx.compose.compiler.plugins.kotlin.ComposableCallChecker
    public void registerModuleComponents(org.jetbrains.kotlin.container.StorageComponentContainer, org.jetbrains.kotlin.platform.TargetPlatform, org.jetbrains.kotlin.descriptors.ModuleDescriptor)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableCallChecker r0;
        org.jetbrains.kotlin.container.StorageComponentContainer r1;
        org.jetbrains.kotlin.platform.TargetPlatform r2;
        org.jetbrains.kotlin.descriptors.ModuleDescriptor r3;
        boolean $z0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableCallChecker;

        r1 := @parameter0: org.jetbrains.kotlin.container.StorageComponentContainer;

        r2 := @parameter1: org.jetbrains.kotlin.platform.TargetPlatform;

        r3 := @parameter2: org.jetbrains.kotlin.descriptors.ModuleDescriptor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "container");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "platform");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "moduleDescriptor");

        $z0 = staticinvoke <org.jetbrains.kotlin.platform.jvm.JvmPlatformKt: boolean isJvm(org.jetbrains.kotlin.platform.TargetPlatform)>(r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <org.jetbrains.kotlin.container.DslKt: void useInstance(org.jetbrains.kotlin.container.StorageComponentContainer,java.lang.Object)>(r1, r0);

        return;
    }

    public void check(org.jetbrains.kotlin.resolve.calls.model.ResolvedCall, org.jetbrains.kotlin.com.intellij.psi.PsiElement, org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableCallChecker r0;
        org.jetbrains.kotlin.resolve.calls.model.ResolvedCall r1;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement r2, r5, $r43, r58, $r63, $r66, $r67;
        org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext r3;
        org.jetbrains.kotlin.resolve.BindingContext r4, $r8;
        org.jetbrains.kotlin.descriptors.ValueParameterDescriptor r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, z15, $z16, $z17, z18, $z19;
        org.jetbrains.kotlin.resolve.BindingTrace $r7, $r37, $r47, $r51;
        org.jetbrains.kotlin.psi.KtElement $r9;
        org.jetbrains.kotlin.psi.KtPropertyAccessor $r10;
        org.jetbrains.kotlin.psi.KtProperty $r11, $r18, r65;
        java.util.List $r12, $r19;
        org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice $r16, $r21, $r30;
        java.lang.Object $r17, $r22, $r32;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r20, $r28, $r39, $r49;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r23, $r33, $r44, $r53;
        org.jetbrains.kotlin.psi.KtFunction $r24, $r36;
        org.jetbrains.kotlin.psi.KtLambdaExpression $r29, $r34, $r41;
        org.jetbrains.kotlin.psi.KtFunctionLiteral $r31, $r35, $r42;
        androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices $r38, $r48;
        java.lang.Boolean $r40, $r50, $r60, $r61;
        org.jetbrains.kotlin.descriptors.DeclarationDescriptor $r45, r64;
        org.jetbrains.kotlin.descriptors.ParameterDescriptor $r46;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory2 $r52;
        org.jetbrains.kotlin.diagnostics.ParametrizedDiagnostic $r54;
        org.jetbrains.kotlin.diagnostics.Diagnostic $r55;
        org.jetbrains.kotlin.types.KotlinType $r56;
        org.jetbrains.kotlin.descriptors.annotations.Annotated $r57;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor r59, r62;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableCallChecker;

        r1 := @parameter0: org.jetbrains.kotlin.resolve.calls.model.ResolvedCall;

        r2 := @parameter1: org.jetbrains.kotlin.com.intellij.psi.PsiElement;

        r3 := @parameter2: org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "resolvedCall");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "reportOn");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "context");

        $z1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isComposableInvocation(org.jetbrains.kotlin.resolve.calls.model.ResolvedCall)>(r1);

        if $z1 != 0 goto label01;

        return;

     label01:
        $r7 = virtualinvoke r3.<org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r8 = interfaceinvoke $r7.<org.jetbrains.kotlin.resolve.BindingTrace: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "context.trace.bindingContext");

        r4 = $r8;

        r58 = r2;

     label02:
        if r58 == null goto label26;

        r5 = r58;

        $z2 = r5 instanceof org.jetbrains.kotlin.psi.KtFunctionLiteral;

        if $z2 == 0 goto label03;

        goto label24;

     label03:
        $z3 = r5 instanceof org.jetbrains.kotlin.psi.KtLambdaExpression;

        if $z3 == 0 goto label12;

        $r28 = <org.jetbrains.kotlin.resolve.BindingContext: org.jetbrains.kotlin.util.slicedMap.WritableSlice FUNCTION>;

        $r30 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r28;

        $r29 = (org.jetbrains.kotlin.psi.KtLambdaExpression) r58;

        $r31 = virtualinvoke $r29.<org.jetbrains.kotlin.psi.KtLambdaExpression: org.jetbrains.kotlin.psi.KtFunctionLiteral getFunctionLiteral()>();

        $r32 = interfaceinvoke r4.<org.jetbrains.kotlin.resolve.BindingContext: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r30, $r31);

        r59 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) $r32;

        if r59 != null goto label04;

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void illegalCall$default(androidx.compose.compiler.plugins.kotlin.ComposableCallChecker,org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext,org.jetbrains.kotlin.com.intellij.psi.PsiElement,org.jetbrains.kotlin.com.intellij.psi.PsiElement,int,java.lang.Object)>(r0, r3, r2, null, 4, null);

        return;

     label04:
        $r33 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) r59;

        z15 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isComposableCallable(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.resolve.BindingContext)>($r33, r4);

        if z15 == 0 goto label05;

        return;

     label05:
        $r34 = (org.jetbrains.kotlin.psi.KtLambdaExpression) r58;

        $r35 = virtualinvoke $r34.<org.jetbrains.kotlin.psi.KtLambdaExpression: org.jetbrains.kotlin.psi.KtFunctionLiteral getFunctionLiteral()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r35, "node.functionLiteral");

        $r36 = (org.jetbrains.kotlin.psi.KtFunction) $r35;

        r6 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: org.jetbrains.kotlin.descriptors.ValueParameterDescriptor access$getArgumentDescriptor(org.jetbrains.kotlin.psi.KtFunction,org.jetbrains.kotlin.resolve.BindingContext)>($r36, r4);

        if r6 == null goto label06;

        $r56 = interfaceinvoke r6.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.types.KotlinType getType()>();

        if $r56 == null goto label06;

        $r57 = (org.jetbrains.kotlin.descriptors.annotations.Annotated) $r56;

        $r60 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: java.lang.Boolean composablePreventCaptureContract(org.jetbrains.kotlin.descriptors.annotations.Annotated)>($r57);

        goto label07;

     label06:
        $r60 = null;

     label07:
        $r61 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z16 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r60, $r61);

        if $z16 == 0 goto label08;

        $r47 = virtualinvoke r3.<org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r48 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r49 = virtualinvoke $r48.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getLAMBDA_CAPABLE_OF_COMPOSER_CAPTURE()>();

        $r50 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r47.<org.jetbrains.kotlin.resolve.BindingTrace: void record(org.jetbrains.kotlin.util.slicedMap.WritableSlice,java.lang.Object,java.lang.Object)>($r49, r59, $r50);

        $r51 = virtualinvoke r3.<org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r52 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory2 CAPTURED_COMPOSABLE_INVOCATION>;

        $r53 = interfaceinvoke r6.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.descriptors.CallableDescriptor getContainingDeclaration()>();

        $r54 = virtualinvoke $r52.<org.jetbrains.kotlin.diagnostics.DiagnosticFactory2: org.jetbrains.kotlin.diagnostics.ParametrizedDiagnostic on(org.jetbrains.kotlin.com.intellij.psi.PsiElement,java.lang.Object,java.lang.Object)>(r2, r6, $r53);

        $r55 = (org.jetbrains.kotlin.diagnostics.Diagnostic) $r54;

        interfaceinvoke $r51.<org.jetbrains.kotlin.resolve.BindingTrace: void report(org.jetbrains.kotlin.diagnostics.Diagnostic)>($r55);

        return;

     label08:
        if r6 == null goto label09;

        $r41 = (org.jetbrains.kotlin.psi.KtLambdaExpression) r58;

        $r42 = virtualinvoke $r41.<org.jetbrains.kotlin.psi.KtLambdaExpression: org.jetbrains.kotlin.psi.KtFunctionLiteral getFunctionLiteral()>();

        $r43 = (org.jetbrains.kotlin.com.intellij.psi.PsiElement) $r42;

        $z12 = staticinvoke <org.jetbrains.kotlin.resolve.inline.InlineUtil: boolean canBeInlineArgument(org.jetbrains.kotlin.com.intellij.psi.PsiElement)>($r43);

        if $z12 == 0 goto label09;

        $r44 = interfaceinvoke r6.<org.jetbrains.kotlin.descriptors.ValueParameterDescriptor: org.jetbrains.kotlin.descriptors.CallableDescriptor getContainingDeclaration()>();

        $r45 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r44;

        $z13 = staticinvoke <org.jetbrains.kotlin.resolve.inline.InlineUtil: boolean isInline(org.jetbrains.kotlin.descriptors.DeclarationDescriptor)>($r45);

        if $z13 == 0 goto label09;

        $r46 = (org.jetbrains.kotlin.descriptors.ParameterDescriptor) r6;

        $z14 = staticinvoke <org.jetbrains.kotlin.resolve.inline.InlineUtil: boolean isInlineParameter(org.jetbrains.kotlin.descriptors.ParameterDescriptor)>($r46);

        if $z14 == 0 goto label09;

        $z17 = 1;

        goto label10;

     label09:
        $z17 = 0;

     label10:
        z0 = $z17;

        if z0 != 0 goto label11;

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void illegalCall$default(androidx.compose.compiler.plugins.kotlin.ComposableCallChecker,org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext,org.jetbrains.kotlin.com.intellij.psi.PsiElement,org.jetbrains.kotlin.com.intellij.psi.PsiElement,int,java.lang.Object)>(r0, r3, r2, null, 4, null);

        return;

     label11:
        $r37 = virtualinvoke r3.<org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r38 = <androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices INSTANCE>;

        $r39 = virtualinvoke $r38.<androidx.compose.compiler.plugins.kotlin.analysis.ComposeWritableSlices: org.jetbrains.kotlin.util.slicedMap.WritableSlice getLAMBDA_CAPABLE_OF_COMPOSER_CAPTURE()>();

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r37.<org.jetbrains.kotlin.resolve.BindingTrace: void record(org.jetbrains.kotlin.util.slicedMap.WritableSlice,java.lang.Object,java.lang.Object)>($r39, r59, $r40);

        goto label24;

     label12:
        $z4 = r5 instanceof org.jetbrains.kotlin.psi.KtFunction;

        if $z4 == 0 goto label17;

        $r20 = <org.jetbrains.kotlin.resolve.BindingContext: org.jetbrains.kotlin.util.slicedMap.WritableSlice FUNCTION>;

        $r21 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r20;

        $r22 = interfaceinvoke r4.<org.jetbrains.kotlin.resolve.BindingContext: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r21, r58);

        r62 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) $r22;

        if r62 != null goto label13;

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void illegalCall$default(androidx.compose.compiler.plugins.kotlin.ComposableCallChecker,org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext,org.jetbrains.kotlin.com.intellij.psi.PsiElement,org.jetbrains.kotlin.com.intellij.psi.PsiElement,int,java.lang.Object)>(r0, r3, r2, null, 4, null);

        return;

     label13:
        $r23 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) r62;

        z18 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isComposableCallable(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.resolve.BindingContext)>($r23, r4);

        if z18 != 0 goto label16;

        $r24 = (org.jetbrains.kotlin.psi.KtFunction) r58;

        $r63 = interfaceinvoke $r24.<org.jetbrains.kotlin.psi.KtFunction: org.jetbrains.kotlin.com.intellij.psi.PsiElement getNameIdentifier()>();

        if $r63 == null goto label14;

        goto label15;

     label14:
        $r63 = r58;

     label15:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void illegalCall(org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext,org.jetbrains.kotlin.com.intellij.psi.PsiElement,org.jetbrains.kotlin.com.intellij.psi.PsiElement)>(r3, r2, $r63);

     label16:
        return;

     label17:
        $z5 = r5 instanceof org.jetbrains.kotlin.psi.KtProperty;

        if $z5 == 0 goto label18;

        $r16 = <org.jetbrains.kotlin.resolve.BindingContext: org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice DECLARATION_TO_DESCRIPTOR>;

        $r17 = interfaceinvoke r4.<org.jetbrains.kotlin.resolve.BindingContext: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r16, r58);

        r64 = (org.jetbrains.kotlin.descriptors.DeclarationDescriptor) $r17;

        $z10 = r64 instanceof org.jetbrains.kotlin.descriptors.impl.LocalVariableDescriptor;

        if $z10 != 0 goto label24;

        $r18 = (org.jetbrains.kotlin.psi.KtProperty) r58;

        $r19 = virtualinvoke $r18.<org.jetbrains.kotlin.psi.KtProperty: java.util.List getAnnotationEntries()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r19, "node.annotationEntries");

        $z11 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean hasComposableAnnotation(java.util.List,org.jetbrains.kotlin.resolve.BindingContext)>($r19, r4);

        if $z11 == 0 goto label24;

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void illegalCall$default(androidx.compose.compiler.plugins.kotlin.ComposableCallChecker,org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext,org.jetbrains.kotlin.com.intellij.psi.PsiElement,org.jetbrains.kotlin.com.intellij.psi.PsiElement,int,java.lang.Object)>(r0, r3, r2, null, 4, null);

        return;

     label18:
        $z6 = r5 instanceof org.jetbrains.kotlin.psi.KtPropertyAccessor;

        if $z6 == 0 goto label22;

        $r10 = (org.jetbrains.kotlin.psi.KtPropertyAccessor) r58;

        $r11 = virtualinvoke $r10.<org.jetbrains.kotlin.psi.KtPropertyAccessor: org.jetbrains.kotlin.psi.KtProperty getProperty()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "node.property");

        r65 = $r11;

        $r12 = virtualinvoke r65.<org.jetbrains.kotlin.psi.KtProperty: java.util.List getAnnotationEntries()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "property.annotationEntries");

        $z9 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean hasComposableAnnotation(java.util.List,org.jetbrains.kotlin.resolve.BindingContext)>($r12, r4);

        if $z9 != 0 goto label21;

        $r66 = virtualinvoke r65.<org.jetbrains.kotlin.psi.KtProperty: org.jetbrains.kotlin.com.intellij.psi.PsiElement getNameIdentifier()>();

        if $r66 == null goto label19;

        goto label20;

     label19:
        $r66 = (org.jetbrains.kotlin.com.intellij.psi.PsiElement) r65;

     label20:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void illegalCall(org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext,org.jetbrains.kotlin.com.intellij.psi.PsiElement,org.jetbrains.kotlin.com.intellij.psi.PsiElement)>(r3, r2, $r66);

     label21:
        return;

     label22:
        $z7 = r5 instanceof org.jetbrains.kotlin.psi.KtFile;

        if $z7 == 0 goto label23;

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void illegalCall$default(androidx.compose.compiler.plugins.kotlin.ComposableCallChecker,org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext,org.jetbrains.kotlin.com.intellij.psi.PsiElement,org.jetbrains.kotlin.com.intellij.psi.PsiElement,int,java.lang.Object)>(r0, r3, r2, null, 4, null);

        return;

     label23:
        $z8 = r5 instanceof org.jetbrains.kotlin.psi.KtClass;

        if $z8 == 0 goto label24;

        staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void illegalCall$default(androidx.compose.compiler.plugins.kotlin.ComposableCallChecker,org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext,org.jetbrains.kotlin.com.intellij.psi.PsiElement,org.jetbrains.kotlin.com.intellij.psi.PsiElement,int,java.lang.Object)>(r0, r3, r2, null, 4, null);

        return;

     label24:
        $r67 = interfaceinvoke r58.<org.jetbrains.kotlin.com.intellij.psi.PsiElement: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        $z19 = $r67 instanceof org.jetbrains.kotlin.psi.KtElement;

        if $z19 != 0 goto label25;

        $r67 = null;

     label25:
        $r9 = (org.jetbrains.kotlin.psi.KtElement) $r67;

        r58 = (org.jetbrains.kotlin.com.intellij.psi.PsiElement) $r9;

        goto label02;

     label26:
        return;
    }

    private final void illegalCall(org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext, org.jetbrains.kotlin.com.intellij.psi.PsiElement, org.jetbrains.kotlin.com.intellij.psi.PsiElement)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableCallChecker r0;
        org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext r1;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement r2, r3;
        org.jetbrains.kotlin.resolve.BindingTrace $r4, $r8;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 $r5, $r9;
        org.jetbrains.kotlin.diagnostics.SimpleDiagnostic $r6, $r10;
        org.jetbrains.kotlin.diagnostics.Diagnostic $r7, $r11;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableCallChecker;

        r1 := @parameter0: org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext;

        r2 := @parameter1: org.jetbrains.kotlin.com.intellij.psi.PsiElement;

        r3 := @parameter2: org.jetbrains.kotlin.com.intellij.psi.PsiElement;

        $r4 = virtualinvoke r1.<org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r5 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_INVOCATION>;

        $r6 = virtualinvoke $r5.<org.jetbrains.kotlin.diagnostics.DiagnosticFactory0: org.jetbrains.kotlin.diagnostics.SimpleDiagnostic on(org.jetbrains.kotlin.com.intellij.psi.PsiElement)>(r2);

        $r7 = (org.jetbrains.kotlin.diagnostics.Diagnostic) $r6;

        interfaceinvoke $r4.<org.jetbrains.kotlin.resolve.BindingTrace: void report(org.jetbrains.kotlin.diagnostics.Diagnostic)>($r7);

        if r3 == null goto label1;

        $r8 = virtualinvoke r1.<org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext: org.jetbrains.kotlin.resolve.BindingTrace getTrace()>();

        $r9 = <androidx.compose.compiler.plugins.kotlin.ComposeErrors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory0 COMPOSABLE_EXPECTED>;

        $r10 = virtualinvoke $r9.<org.jetbrains.kotlin.diagnostics.DiagnosticFactory0: org.jetbrains.kotlin.diagnostics.SimpleDiagnostic on(org.jetbrains.kotlin.com.intellij.psi.PsiElement)>(r3);

        $r11 = (org.jetbrains.kotlin.diagnostics.Diagnostic) $r10;

        interfaceinvoke $r8.<org.jetbrains.kotlin.resolve.BindingTrace: void report(org.jetbrains.kotlin.diagnostics.Diagnostic)>($r11);

     label1:
        return;
    }

    static void illegalCall$default(androidx.compose.compiler.plugins.kotlin.ComposableCallChecker, org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext, org.jetbrains.kotlin.com.intellij.psi.PsiElement, org.jetbrains.kotlin.com.intellij.psi.PsiElement, int, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableCallChecker r0;
        org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext r1;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement r2, r5;
        int i0, $i1;
        java.lang.Object r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @parameter0: androidx.compose.compiler.plugins.kotlin.ComposableCallChecker;

        r1 := @parameter1: org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext;

        r2 := @parameter2: org.jetbrains.kotlin.com.intellij.psi.PsiElement;

        r5 := @parameter3: org.jetbrains.kotlin.com.intellij.psi.PsiElement;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

        if r3 == null goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: illegalCall");

        throw $r4;

     label1:
        $i1 = i0 & 4;

        if $i1 == 0 goto label2;

        r5 = (org.jetbrains.kotlin.com.intellij.psi.PsiElement) null;

     label2:
        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposableCallChecker: void illegalCall(org.jetbrains.kotlin.resolve.calls.checkers.CallCheckerContext,org.jetbrains.kotlin.com.intellij.psi.PsiElement,org.jetbrains.kotlin.com.intellij.psi.PsiElement)>(r1, r2, r5);

        return;
    }

    public void checkType(org.jetbrains.kotlin.psi.KtExpression, org.jetbrains.kotlin.types.KotlinType, org.jetbrains.kotlin.types.KotlinType, org.jetbrains.kotlin.resolve.calls.context.ResolutionContext)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableCallChecker r0;
        org.jetbrains.kotlin.psi.KtExpression r1, r7, $r52, r53, $r57;
        org.jetbrains.kotlin.types.KotlinType r2, r3, r6, $r10;
        org.jetbrains.kotlin.resolve.calls.context.ResolutionContext r4;
        org.jetbrains.kotlin.resolve.BindingContext r5, $r9, $r40;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        org.jetbrains.kotlin.resolve.BindingTrace $r8, $r23, $r38, $r45;
        org.jetbrains.kotlin.types.SimpleType $r11, $r12, $r14, $r16, $r17, $r19, $r28, r54, r55, r56;
        org.jetbrains.kotlin.builtins.KotlinBuiltIns $r13, $r15, $r18;
        org.jetbrains.kotlin.com.intellij.psi.PsiElement $r20, $r21, $r26, $r42, $r43, $r49;
        org.jetbrains.kotlin.diagnostics.DiagnosticFactory2 $r22, $r44;
        org.jetbrains.kotlin.diagnostics.ParametrizedDiagnostic $r24, $r46;
        org.jetbrains.kotlin.diagnostics.Diagnostic $r25, $r47;
        java.lang.NullPointerException $r27, $r50;
        org.jetbrains.kotlin.util.slicedMap.WritableSlice $r29;
        org.jetbrains.kotlin.psi.KtLambdaExpression $r30, $r36, $r41, $r48;
        org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice $r31;
        org.jetbrains.kotlin.psi.KtFunctionLiteral $r32, $r37;
        java.lang.Object $r33;
        org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor $r34, r51;
        org.jetbrains.kotlin.descriptors.CallableDescriptor $r35;
        org.jetbrains.kotlin.psi.KtFunction $r39;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableCallChecker;

        r1 := @parameter0: org.jetbrains.kotlin.psi.KtExpression;

        r2 := @parameter1: org.jetbrains.kotlin.types.KotlinType;

        r3 := @parameter2: org.jetbrains.kotlin.types.KotlinType;

        r4 := @parameter3: org.jetbrains.kotlin.resolve.calls.context.ResolutionContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "expression");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "expressionType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "expressionTypeWithSmartCast");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "c");

        $r8 = r4.<org.jetbrains.kotlin.resolve.calls.context.ResolutionContext: org.jetbrains.kotlin.resolve.BindingTrace trace>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "c.trace");

        $r9 = interfaceinvoke $r8.<org.jetbrains.kotlin.resolve.BindingTrace: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "c.trace.bindingContext");

        r5 = $r9;

        $r10 = r4.<org.jetbrains.kotlin.resolve.calls.context.ResolutionContext: org.jetbrains.kotlin.types.KotlinType expectedType>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "c.expectedType");

        r6 = $r10;

        $r11 = <org.jetbrains.kotlin.types.TypeUtils: org.jetbrains.kotlin.types.SimpleType NO_EXPECTED_TYPE>;

        if r6 != $r11 goto label01;

        return;

     label01:
        $r12 = <org.jetbrains.kotlin.types.TypeUtils: org.jetbrains.kotlin.types.SimpleType UNIT_EXPECTED_TYPE>;

        if r6 != $r12 goto label02;

        return;

     label02:
        z0 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>(r6);

        $z1 = r1 instanceof org.jetbrains.kotlin.psi.KtLambdaExpression;

        if $z1 == 0 goto label10;

        $r29 = <org.jetbrains.kotlin.resolve.BindingContext: org.jetbrains.kotlin.util.slicedMap.WritableSlice FUNCTION>;

        $r31 = (org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice) $r29;

        $r30 = (org.jetbrains.kotlin.psi.KtLambdaExpression) r1;

        $r32 = virtualinvoke $r30.<org.jetbrains.kotlin.psi.KtLambdaExpression: org.jetbrains.kotlin.psi.KtFunctionLiteral getFunctionLiteral()>();

        $r33 = interfaceinvoke r5.<org.jetbrains.kotlin.resolve.BindingContext: java.lang.Object get(org.jetbrains.kotlin.util.slicedMap.ReadOnlySlice,java.lang.Object)>($r31, $r32);

        $r34 = (org.jetbrains.kotlin.descriptors.SimpleFunctionDescriptor) $r33;

        if $r34 == null goto label03;

        goto label04;

     label03:
        return;

     label04:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r34, "bindingContext[BindingCo\u2026                ?: return");

        r51 = $r34;

        $r35 = (org.jetbrains.kotlin.descriptors.CallableDescriptor) r51;

        z8 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposableCallCheckerKt: boolean isComposableCallable(org.jetbrains.kotlin.descriptors.CallableDescriptor,org.jetbrains.kotlin.resolve.BindingContext)>($r35, r5);

        if z0 == z8 goto label09;

        $r36 = (org.jetbrains.kotlin.psi.KtLambdaExpression) r1;

        $r37 = virtualinvoke $r36.<org.jetbrains.kotlin.psi.KtLambdaExpression: org.jetbrains.kotlin.psi.KtFunctionLiteral getFunctionLiteral()>();

        $r39 = (org.jetbrains.kotlin.psi.KtFunction) $r37;

        $r38 = r4.<org.jetbrains.kotlin.resolve.calls.context.ResolutionContext: org.jetbrains.kotlin.resolve.BindingTrace trace>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r38, "c.trace");

        $r40 = interfaceinvoke $r38.<org.jetbrains.kotlin.resolve.BindingTrace: org.jetbrains.kotlin.resolve.BindingContext getBindingContext()>();

        z9 = staticinvoke <org.jetbrains.kotlin.resolve.inline.InlineUtil: boolean isInlinedArgument(org.jetbrains.kotlin.psi.KtFunction,org.jetbrains.kotlin.resolve.BindingContext,boolean)>($r39, $r40, 1);

        if z9 == 0 goto label05;

        return;

     label05:
        $r41 = (org.jetbrains.kotlin.psi.KtLambdaExpression) r1;

        $r42 = virtualinvoke $r41.<org.jetbrains.kotlin.psi.KtLambdaExpression: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        $z7 = $r42 instanceof org.jetbrains.kotlin.psi.KtAnnotatedExpression;

        if $z7 == 0 goto label07;

        $r48 = (org.jetbrains.kotlin.psi.KtLambdaExpression) r1;

        $r49 = virtualinvoke $r48.<org.jetbrains.kotlin.psi.KtLambdaExpression: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        if $r49 != null goto label06;

        $r50 = new java.lang.NullPointerException;

        specialinvoke $r50.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.psi.KtExpression");

        throw $r50;

     label06:
        $r52 = (org.jetbrains.kotlin.psi.KtExpression) $r49;

        goto label08;

     label07:
        $r52 = r1;

     label08:
        r53 = $r52;

        $r45 = r4.<org.jetbrains.kotlin.resolve.calls.context.ResolutionContext: org.jetbrains.kotlin.resolve.BindingTrace trace>;

        $r44 = <org.jetbrains.kotlin.diagnostics.Errors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory2 TYPE_MISMATCH>;

        $r43 = (org.jetbrains.kotlin.com.intellij.psi.PsiElement) r53;

        $r46 = virtualinvoke $r44.<org.jetbrains.kotlin.diagnostics.DiagnosticFactory2: org.jetbrains.kotlin.diagnostics.ParametrizedDiagnostic on(org.jetbrains.kotlin.com.intellij.psi.PsiElement,java.lang.Object,java.lang.Object)>($r43, r6, r3);

        $r47 = (org.jetbrains.kotlin.diagnostics.Diagnostic) $r46;

        interfaceinvoke $r45.<org.jetbrains.kotlin.resolve.BindingTrace: void report(org.jetbrains.kotlin.diagnostics.Diagnostic)>($r47);

     label09:
        return;

     label10:
        $r13 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns(org.jetbrains.kotlin.types.KotlinType)>(r6);

        $r14 = virtualinvoke $r13.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.types.SimpleType getNullableAnyType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "expectedType.builtIns.nullableAnyType");

        r54 = $r14;

        $r15 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns(org.jetbrains.kotlin.types.KotlinType)>(r6);

        $r16 = virtualinvoke $r15.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.types.SimpleType getAnyType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "expectedType.builtIns.anyType");

        r55 = $r16;

        $r17 = staticinvoke <org.jetbrains.kotlin.types.FlexibleTypesKt: org.jetbrains.kotlin.types.SimpleType lowerIfFlexible(org.jetbrains.kotlin.types.KotlinType)>(r6);

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r55, $r17);

        if $z2 == 0 goto label11;

        $r28 = staticinvoke <org.jetbrains.kotlin.types.FlexibleTypesKt: org.jetbrains.kotlin.types.SimpleType upperIfFlexible(org.jetbrains.kotlin.types.KotlinType)>(r6);

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r54, $r28);

        if $z6 == 0 goto label11;

        return;

     label11:
        $r18 = staticinvoke <org.jetbrains.kotlin.types.typeUtil.TypeUtilsKt: org.jetbrains.kotlin.builtins.KotlinBuiltIns getBuiltIns(org.jetbrains.kotlin.types.KotlinType)>(r6);

        $r19 = virtualinvoke $r18.<org.jetbrains.kotlin.builtins.KotlinBuiltIns: org.jetbrains.kotlin.types.SimpleType getNullableNothingType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r19, "expectedType.builtIns.nullableNothingType");

        r56 = $r19;

        $z3 = virtualinvoke r6.<org.jetbrains.kotlin.types.KotlinType: boolean isMarkedNullable()>();

        if $z3 == 0 goto label12;

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r3, r56);

        if $z5 == 0 goto label12;

        return;

     label12:
        z10 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeFqNamesKt: boolean hasComposableAnnotation(org.jetbrains.kotlin.types.KotlinType)>(r2);

        if z0 == z10 goto label16;

        $r20 = interfaceinvoke r1.<org.jetbrains.kotlin.psi.KtExpression: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        $z4 = $r20 instanceof org.jetbrains.kotlin.psi.KtAnnotatedExpression;

        if $z4 == 0 goto label14;

        $r26 = interfaceinvoke r1.<org.jetbrains.kotlin.psi.KtExpression: org.jetbrains.kotlin.com.intellij.psi.PsiElement getParent()>();

        if $r26 != null goto label13;

        $r27 = new java.lang.NullPointerException;

        specialinvoke $r27.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type org.jetbrains.kotlin.psi.KtExpression");

        throw $r27;

     label13:
        $r57 = (org.jetbrains.kotlin.psi.KtExpression) $r26;

        goto label15;

     label14:
        $r57 = r1;

     label15:
        r7 = $r57;

        $r23 = r4.<org.jetbrains.kotlin.resolve.calls.context.ResolutionContext: org.jetbrains.kotlin.resolve.BindingTrace trace>;

        $r22 = <org.jetbrains.kotlin.diagnostics.Errors: org.jetbrains.kotlin.diagnostics.DiagnosticFactory2 TYPE_MISMATCH>;

        $r21 = (org.jetbrains.kotlin.com.intellij.psi.PsiElement) r7;

        $r24 = virtualinvoke $r22.<org.jetbrains.kotlin.diagnostics.DiagnosticFactory2: org.jetbrains.kotlin.diagnostics.ParametrizedDiagnostic on(org.jetbrains.kotlin.com.intellij.psi.PsiElement,java.lang.Object,java.lang.Object)>($r21, r6, r3);

        $r25 = (org.jetbrains.kotlin.diagnostics.Diagnostic) $r24;

        interfaceinvoke $r23.<org.jetbrains.kotlin.resolve.BindingTrace: void report(org.jetbrains.kotlin.diagnostics.Diagnostic)>($r25);

     label16:
        return;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposableCallChecker r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableCallChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void checkReceiver(org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor, org.jetbrains.kotlin.resolve.scopes.receivers.ReceiverValue, boolean, org.jetbrains.kotlin.resolve.calls.context.CallResolutionContext)
    {
        androidx.compose.compiler.plugins.kotlin.ComposableCallChecker r0;
        org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor r1;
        org.jetbrains.kotlin.resolve.scopes.receivers.ReceiverValue r2;
        boolean z0;
        org.jetbrains.kotlin.resolve.calls.context.CallResolutionContext r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposableCallChecker;

        r1 := @parameter0: org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor;

        r2 := @parameter1: org.jetbrains.kotlin.resolve.scopes.receivers.ReceiverValue;

        z0 := @parameter2: boolean;

        r3 := @parameter3: org.jetbrains.kotlin.resolve.calls.context.CallResolutionContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "receiverParameter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "receiverArgument");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "c");

        staticinvoke <org.jetbrains.kotlin.resolve.calls.checkers.AdditionalTypeChecker$DefaultImpls: void checkReceiver(org.jetbrains.kotlin.resolve.calls.checkers.AdditionalTypeChecker,org.jetbrains.kotlin.descriptors.ReceiverParameterDescriptor,org.jetbrains.kotlin.resolve.scopes.receivers.ReceiverValue,boolean,org.jetbrains.kotlin.resolve.calls.context.CallResolutionContext)>(r0, r1, r2, z0, r3);

        return;
    }

