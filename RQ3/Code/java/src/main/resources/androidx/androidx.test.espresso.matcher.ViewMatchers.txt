androidx.test.espresso.matcher.ViewMatchers
<androidx.test.espresso.matcher.ViewMatchers: java.util.regex.Pattern RESOURCE_ID_PATTERN>
    static volatile java.lang.String '-$$Nest$smsafeGetResourceEntryName'(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: java.lang.String safeGetResourceEntryName(android.content.res.Resources,int)>(r0, i0);

        return $r1;
    }

    static volatile java.lang.String '-$$Nest$smsafeGetResourceName'(android.content.res.Resources, int)
    {
        android.content.res.Resources r0;
        int i0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: java.lang.String safeGetResourceName(android.content.res.Resources,int)>(r0, i0);

        return $r1;
    }

    private static java.lang.String getMismatchDescriptionString(java.lang.Object, org.hamcrest.Matcher)
    {
        java.lang.Object r0;
        org.hamcrest.StringDescription r1;
        java.lang.String $r2, $r3, r5;
        boolean $z0;
        org.hamcrest.Matcher r4;

        r0 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.hamcrest.Matcher;

        r1 = new org.hamcrest.StringDescription;

        specialinvoke r1.<org.hamcrest.StringDescription: void <init>()>();

        interfaceinvoke r4.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r0, r1);

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: java.lang.String toString()>();

        r5 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r3;

     label1:
        return r5;
    }

    private static java.lang.String safeGetResourceEntryName(android.content.res.Resources, int)
    {
        int i0;
        boolean z0;
        java.lang.Throwable $r0;
        android.content.res.Resources r1;
        java.lang.String r2;

        r1 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

     label1:
        z0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: boolean isViewIdGenerated(int)>(i0);

     label2:
        if z0 == 0 goto label4;

        r2 = null;

     label3:
        return r2;

     label4:
        r2 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>(i0);

        goto label3;

     label5:
        $r0 := @caughtexception;

        return null;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label5;
        catch android.content.res.Resources$NotFoundException from label4 to label5 with label5;
    }

    private static java.lang.String safeGetResourceName(android.content.res.Resources, int)
    {
        int i0;
        boolean z0;
        java.lang.Throwable $r0;
        android.content.res.Resources r1;
        java.lang.String r2;

        r1 := @parameter0: android.content.res.Resources;

        i0 := @parameter1: int;

     label1:
        z0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: boolean isViewIdGenerated(int)>(i0);

     label2:
        if z0 == 0 goto label4;

        r2 = null;

     label3:
        return r2;

     label4:
        r2 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getResourceName(int)>(i0);

        goto label3;

     label5:
        $r0 := @caughtexception;

        return null;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label5;
        catch android.content.res.Resources$NotFoundException from label4 to label5 with label5;
    }

    static volatile java.util.regex.Pattern '-$$Nest$sfgetRESOURCE_ID_PATTERN'()
    {
        java.util.regex.Pattern $r0;

        $r0 = <androidx.test.espresso.matcher.ViewMatchers: java.util.regex.Pattern RESOURCE_ID_PATTERN>;

        return $r0;
    }

    public static org.hamcrest.Matcher doesNotHaveFocus()
    {
        androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher-IA)>(0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher hasBackground(int)
    {
        int i0;
        androidx.test.espresso.matcher.HasBackgroundMatcher r0, r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new androidx.test.espresso.matcher.HasBackgroundMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.HasBackgroundMatcher: void <init>(int)>(i0);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher hasChildCount(int)
    {
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0, r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher-IA)>(i0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher hasContentDescription()
    {
        androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher: void <init>(androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher-IA)>(null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher hasDescendant(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher hasErrorText(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher hasErrorText(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher hasErrorText(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher hasFocus()
    {
        androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher-IA)>(1, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher hasImeAction(int)
    {
        int i0;
        java.lang.Integer $r0;
        org.hamcrest.Matcher $r1, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher hasImeAction(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher hasImeAction(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, r3;
        androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r1, r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r2 = new androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 = r2;

        specialinvoke r2.<androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher-IA)>(r0, null);

        r3 = (org.hamcrest.Matcher) r1;

        return r3;
    }

    public static org.hamcrest.Matcher hasLinks()
    {
        androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher: void <init>(androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher-IA)>(null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher hasMinimumChildCount(int)
    {
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0, r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher-IA)>(i0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher hasSibling(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher hasTextColor(int)
    {
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$1 r0, r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$1;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$1: void <init>(java.lang.Class,int)>(class "Landroid/widget/TextView;", i0);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isAssignableFrom(java.lang.Class)
    {
        java.lang.Class r0;
        androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r1, r2;
        org.hamcrest.Matcher r3;

        r0 := @parameter0: java.lang.Class;

        r2 = new androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 = r2;

        specialinvoke r2.<androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: void <init>(java.lang.Class,androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher-IA)>(r0, null);

        r3 = (org.hamcrest.Matcher) r1;

        return r3;
    }

    public static org.hamcrest.Matcher isChecked()
    {
        java.lang.Boolean $r0;
        org.hamcrest.Matcher $r1, $r2;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withCheckBoxState(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher isClickable()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher-IA)>(1, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isCompletelyDisplayed()
    {
        org.hamcrest.Matcher $r0;

        $r0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isDisplayingAtLeast(int)>(100);

        return $r0;
    }

    public static org.hamcrest.Matcher isDescendantOfA(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher isDisplayed()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: void <init>(androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher-IA)>(null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isDisplayingAtLeast(int)
    {
        int i0;
        boolean z0, z1;
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0, r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        if i0 > 100 goto label4;

        z0 = 1;

     label1:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>(z0, "Cannot have over 100 percent: %s", i0);

        if i0 <= 0 goto label3;

        z1 = 1;

     label2:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>(z1, "Must have a positive, non-zero value: %s", i0);

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher-IA)>(i0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;

     label3:
        z1 = 0;

        goto label2;

     label4:
        z0 = 0;

        goto label1;
    }

    public static org.hamcrest.Matcher isEnabled()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher-IA)>(1, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isFocusable()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher-IA)>(1, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isFocused()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher-IA)>(1, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isJavascriptEnabled()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher: void <init>(androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher-IA)>(null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isNotChecked()
    {
        java.lang.Boolean $r0;
        org.hamcrest.Matcher $r1, $r2;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withCheckBoxState(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher isNotClickable()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher-IA)>(0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isNotEnabled()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher-IA)>(0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isNotFocusable()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher-IA)>(0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isNotFocused()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher-IA)>(0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isNotSelected()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher-IA)>(0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isRoot()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher: void <init>(androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher-IA)>(null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isSelected()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: void <init>(boolean,androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher-IA)>(1, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher supportsInputMethods()
    {
        androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher: void <init>(androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher-IA)>(null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher withAlpha(float)
    {
        float f0;
        androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0, r1;
        org.hamcrest.Matcher r2;

        f0 := @parameter0: float;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: void <init>(float,androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher-IA)>(f0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    private static org.hamcrest.Matcher withCheckBoxState(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, r3;
        androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r1, r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r2 = new androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 = r2;

        specialinvoke r2.<androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher-IA)>(r0, null);

        r3 = (org.hamcrest.Matcher) r1;

        return r3;
    }

    public static org.hamcrest.Matcher withChild(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withClassName(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withContentDescription(int)
    {
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0, r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher-IA)>(i0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher withContentDescription(java.lang.String)
    {
        java.lang.String r0;
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher r1, r3;
        org.hamcrest.Matcher $r2, r4;

        r0 := @parameter0: java.lang.String;

        r3 = new androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher;

        r1 = r3;

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        specialinvoke r3.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher-IA)>($r2, null);

        r4 = (org.hamcrest.Matcher) r1;

        return r4;
    }

    public static org.hamcrest.Matcher withContentDescription(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withEffectiveVisibility(androidx.test.espresso.matcher.ViewMatchers$Visibility)
    {
        androidx.test.espresso.matcher.ViewMatchers$Visibility r0;
        androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r1, r2;
        org.hamcrest.Matcher r3;

        r0 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$Visibility;

        r2 = new androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r1 = r2;

        specialinvoke r2.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: void <init>(androidx.test.espresso.matcher.ViewMatchers$Visibility,androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher-IA)>(r0, null);

        r3 = (org.hamcrest.Matcher) r1;

        return r3;
    }

    public static org.hamcrest.Matcher withHint(int)
    {
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0, r2;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r1;
        org.hamcrest.Matcher r3;

        i0 := @parameter0: int;

        r2 = new androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        r0 = r2;

        $r1 = <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT>;

        specialinvoke r2.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod,androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher-IA)>(i0, $r1, null);

        r3 = (org.hamcrest.Matcher) r0;

        return r3;
    }

    public static org.hamcrest.Matcher withHint(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.Object $r1;
        org.hamcrest.Matcher $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r2);

        $r4 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withHint(org.hamcrest.Matcher)>($r3);

        return $r4;
    }

    public static org.hamcrest.Matcher withHint(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withId(int)
    {
        int i0;
        java.lang.Integer $r0;
        org.hamcrest.Matcher $r1, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withId(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withId(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withInputType(int)
    {
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0, r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher-IA)>(i0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher withParent(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withParentIndex(int)
    {
        int i0;
        boolean z0;
        androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0, r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        if i0 < 0 goto label2;

        z0 = 1;

     label1:
        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,int)>(z0, "Index %s must be >= 0", i0);

        r1 = new androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher-IA)>(i0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;

     label2:
        z0 = 0;

        goto label1;
    }

    public static org.hamcrest.Matcher withResourceName(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withResourceName(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withResourceName(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withSpinnerText(int)
    {
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0, r1;
        org.hamcrest.Matcher r2;

        i0 := @parameter0: int;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher-IA)>(i0, null);

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher withSpinnerText(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withSpinnerText(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withSpinnerText(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withSubstring(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsString(java.lang.String)>(r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withText(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withTagKey(int)
    {
        int i0;
        org.hamcrest.Matcher $r0, $r1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher notNullValue()>();

        $r1 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withTagKey(int,org.hamcrest.Matcher)>(i0, $r0);

        return $r1;
    }

    public static org.hamcrest.Matcher withTagKey(int, org.hamcrest.Matcher)
    {
        int i0;
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r1, r4;
        java.lang.Object $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: void <init>(int,org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher-IA)>(i0, $r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withTagValue(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    public static org.hamcrest.Matcher withText(int)
    {
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0, r2;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r1;
        org.hamcrest.Matcher r3;

        i0 := @parameter0: int;

        r2 = new androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        r0 = r2;

        $r1 = <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT>;

        specialinvoke r2.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod,androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher-IA)>(i0, $r1, null);

        r3 = (org.hamcrest.Matcher) r0;

        return r3;
    }

    public static org.hamcrest.Matcher withText(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r0);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withText(org.hamcrest.Matcher)>($r1);

        return $r2;
    }

    public static org.hamcrest.Matcher withText(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, $r3, r5;
        androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher r1, r4;
        java.lang.Object $r2;

        r0 := @parameter0: org.hamcrest.Matcher;

        r4 = new androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 = r4;

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (org.hamcrest.Matcher) $r2;

        specialinvoke r4.<androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher: void <init>(org.hamcrest.Matcher,androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher-IA)>($r3, null);

        r5 = (org.hamcrest.Matcher) r1;

        return r5;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\d+");

        <androidx.test.espresso.matcher.ViewMatchers: java.util.regex.Pattern RESOURCE_ID_PATTERN> = $r0;

        return;
    }

    private void <init>()
    {
        androidx.test.espresso.matcher.ViewMatchers r0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertThat(java.lang.Object, org.hamcrest.Matcher)
    {
        java.lang.Object r0;
        org.hamcrest.Matcher r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.hamcrest.Matcher;

        staticinvoke <androidx.test.espresso.matcher.ViewMatchers: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("", r0, r1);

        return;
    }

    public static void assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)
    {
        java.lang.Object r0;
        org.hamcrest.Matcher r1;
        org.hamcrest.StringDescription r2, r17;
        java.lang.String r3, $r10, $r13, r15;
        boolean $z0, $z1;
        org.hamcrest.Description $r4, $r5, $r6, $r7, $r11;
        android.view.View $r12;
        junit.framework.AssertionFailedError r16, r18;
        org.hamcrest.SelfDescribing r19;

        r15 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: org.hamcrest.Matcher;

        $z0 = interfaceinvoke r1.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r0);

        if $z0 != 0 goto label2;

        r17 = new org.hamcrest.StringDescription;

        r2 = r17;

        specialinvoke r17.<org.hamcrest.StringDescription: void <init>()>();

        r3 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: java.lang.String getMismatchDescriptionString(java.lang.Object,org.hamcrest.Matcher)>(r0, r1);

        $r4 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(r15);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\nExpected: ");

        r19 = (org.hamcrest.SelfDescribing) r1;

        $r6 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r19);

        $r7 = interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\n     Got: ");

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(r3);

        $z1 = r0 instanceof android.view.View;

        if $z1 == 0 goto label1;

        $r11 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\nView Details: ");

        $r12 = (android.view.View) r0;

        $r13 = staticinvoke <androidx.test.espresso.util.HumanReadables: java.lang.String describe(android.view.View)>($r12);

        interfaceinvoke $r11.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r13);

     label1:
        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\n");

        r18 = new junit.framework.AssertionFailedError;

        r16 = r18;

        $r10 = interfaceinvoke r2.<org.hamcrest.Description: java.lang.String toString()>();

        specialinvoke r18.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>($r10);

        throw r16;

     label2:
        return;
    }

    static volatile boolean '-$$Nest$smisViewIdGenerated'(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: boolean isViewIdGenerated(int)>(i0);

        return $z0;
    }

    private static boolean isViewIdGenerated(int)
    {
        int $i0, $i1, i2;
        boolean z0;

        i2 := @parameter0: int;

        $i0 = i2 & -16777216;

        if $i0 != 0 goto label2;

        $i1 = i2 & 16777215;

        if $i1 == 0 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

androidx.test.espresso.matcher.ViewMatchers$1
<androidx.test.espresso.matcher.ViewMatchers$1: android.content.Context context>
<androidx.test.espresso.matcher.ViewMatchers$1: int val$colorResId>
    private java.lang.String getColorHex(int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.Object[] r0;
        java.lang.Integer $r1, $r2;
        java.lang.String $r3;
        androidx.test.espresso.matcher.ViewMatchers$1 r4;
        java.util.Locale r5;

        r4 := @this: androidx.test.espresso.matcher.ViewMatchers$1;

        i0 := @parameter0: int;

        r5 = <java.util.Locale: java.util.Locale ROOT>;

        r0 = newarray (java.lang.Object)[2];

        $i1 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        $i2 = $i1 & 255;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        r0[0] = $r1;

        $i3 = i0 & 16777215;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        r0[1] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r5, "#%02X%06X", r0);

        return $r3;
    }

    void <init>(java.lang.Class, int)
    {
        androidx.test.espresso.matcher.ViewMatchers$1 r0;
        java.lang.Class r1;
        int i0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$1;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        r0.<androidx.test.espresso.matcher.ViewMatchers$1: int val$colorResId> = i0;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(r1);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        org.hamcrest.Description r0, $r10;
        android.content.Context $r2, $r3, $r8;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.StringBuilder $r4, $r5, r15;
        java.lang.String $r6, r14;
        android.content.res.Resources $r9;
        java.lang.Integer $r11;
        androidx.test.espresso.matcher.ViewMatchers$1 r13;

        r13 := @this: androidx.test.espresso.matcher.ViewMatchers$1;

        r0 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("textView.getCurrentTextColor() is color with ");

        $r2 = r13.<androidx.test.espresso.matcher.ViewMatchers$1: android.content.Context context>;

        if $r2 != null goto label1;

        $r10 = interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("ID ");

        $i3 = r13.<androidx.test.espresso.matcher.ViewMatchers$1: int val$colorResId>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r10.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r11);

        return;

     label1:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 > 22 goto label3;

        $r8 = r13.<androidx.test.espresso.matcher.ViewMatchers$1: android.content.Context context>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = r13.<androidx.test.espresso.matcher.ViewMatchers$1: int val$colorResId>;

        i4 = virtualinvoke $r9.<android.content.res.Resources: int getColor(int)>($i2);

     label2:
        r14 = specialinvoke r13.<androidx.test.espresso.matcher.ViewMatchers$1: java.lang.String getColorHex(int)>(i4);

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r6);

        return;

     label3:
        $r3 = r13.<androidx.test.espresso.matcher.ViewMatchers$1: android.content.Context context>;

        $i1 = r13.<androidx.test.espresso.matcher.ViewMatchers$1: int val$colorResId>;

        i4 = virtualinvoke $r3.<android.content.Context: int getColor(int)>($i1);

        goto label2;
    }

    protected boolean matchesSafely(android.widget.TextView, org.hamcrest.Description)
    {
        org.hamcrest.Description r0, $r3;
        int i0, $i1, $i2, $i3, i4;
        android.content.Context $r1, $r2, $r6;
        java.lang.String $r4;
        android.content.res.Resources $r7;
        androidx.test.espresso.matcher.ViewMatchers$1 r8;
        android.widget.TextView r9;
        boolean z0;

        r8 := @this: androidx.test.espresso.matcher.ViewMatchers$1;

        r9 := @parameter0: android.widget.TextView;

        r0 := @parameter1: org.hamcrest.Description;

        $r1 = virtualinvoke r9.<android.widget.TextView: android.content.Context getContext()>();

        r8.<androidx.test.espresso.matcher.ViewMatchers$1: android.content.Context context> = $r1;

        i0 = virtualinvoke r9.<android.widget.TextView: int getCurrentTextColor()>();

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 > 22 goto label4;

        $r6 = r8.<androidx.test.espresso.matcher.ViewMatchers$1: android.content.Context context>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = r8.<androidx.test.espresso.matcher.ViewMatchers$1: int val$colorResId>;

        i4 = virtualinvoke $r7.<android.content.res.Resources: int getColor(int)>($i3);

     label1:
        $r3 = interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("textView.getCurrentTextColor() was ");

        $r4 = specialinvoke r8.<androidx.test.espresso.matcher.ViewMatchers$1: java.lang.String getColorHex(int)>(i0);

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r4);

        if i0 != i4 goto label3;

        z0 = 1;

     label2:
        return z0;

     label3:
        z0 = 0;

        goto label2;

     label4:
        $r2 = r8.<androidx.test.espresso.matcher.ViewMatchers$1: android.content.Context context>;

        $i2 = r8.<androidx.test.espresso.matcher.ViewMatchers$1: int val$colorResId>;

        i4 = virtualinvoke $r2.<android.content.Context: int getColor(int)>($i2);

        goto label1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$1 r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.widget.TextView $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$1: boolean matchesSafely(android.widget.TextView,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$2
<androidx.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$androidx$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod>
    static void <clinit>()
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $r0;
        int $i0, $i1, $i2;
        int[] $r1, $r3, $r5;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r2, $r4;
        java.lang.Throwable $r6, $r7;

        $r0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$androidx$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod> = $r1;

     label1:
        $r3 = <androidx.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$androidx$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod>;

        $r2 = <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT>;

        $i1 = virtualinvoke $r2.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: int ordinal()>();

        $r3[$i1] = 1;

     label2:
        $r5 = <androidx.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$androidx$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod>;

        $r4 = <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT>;

        $i2 = virtualinvoke $r4.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: int ordinal()>();

        $r5[$i2] = 2;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        goto label2;

     label5:
        $r6 := @caughtexception;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label4;
        catch java.lang.NoSuchFieldError from label2 to label3 with label5;
    }

androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher
<androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: int childCount>
    private void <init>(int)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0;
        int i0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/view/ViewGroup;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: int childCount> = i0;

        return;
    }

    void <init>(int, androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: void <init>(int)>(i0);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0;
        org.hamcrest.Description r1, $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("viewGroup.getChildCount() to be ");

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: int childCount>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.ViewGroup, org.hamcrest.Description)
    {
        android.view.ViewGroup r0;
        org.hamcrest.Description r1, $r2;
        int $i0, $i1, $i2;
        java.lang.Integer $r3;
        androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r5;
        boolean z0;

        r5 := @this: androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("viewGroup.getChildCount() was ");

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        $i2 = r5.<androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: int childCount>;

        if $i1 != $i2 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.ViewGroup $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.ViewGroup) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasChildCountMatcher: boolean matchesSafely(android.view.ViewGroup,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher
    private void <init>()
    {
        androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        return;
    }

    void <init>(androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;
        androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        r1 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getContentDescription() is not null");

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;
        android.view.View r1;
        org.hamcrest.Description r2;
        java.lang.CharSequence $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = virtualinvoke r1.<android.view.View: java.lang.CharSequence getContentDescription()>();

        if $r3 != null goto label1;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getContentDescription() was null");

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasContentDescriptionMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0
<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher f$0>
<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0: android.view.View f$1>
    public void <init>(androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher, android.view.View)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0 r0;
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r1;
        android.view.View r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0;

        r1 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r2 := @parameter1: android.view.View;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher f$0> = r1;

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0: android.view.View f$1> = r2;

        return;
    }

    public final boolean apply(java.lang.Object)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0 r0;
        java.lang.Object r1;
        android.view.View $r2, $r3;
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher $r4;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher f$0>;

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0: android.view.View f$1>;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke $r4.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: boolean lambda$matchesSafely$0$androidx-test-espresso-matcher-ViewMatchers$HasDescendantMatcher(android.view.View,android.view.View)>($r3, $r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher
<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher descendantMatcher>
<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher isViewGroupMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        org.hamcrest.Matcher r1, $r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher isA(java.lang.Class)>(class "Landroid/view/ViewGroup;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher isViewGroupMatcher> = $r2;

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher descendantMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        org.hamcrest.Description r1, $r2, $r4, $r5, $r7;
        org.hamcrest.Matcher $r3, $r6;
        org.hamcrest.SelfDescribing r9, r10;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("(view ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher isViewGroupMatcher>;

        r9 = (org.hamcrest.SelfDescribing) $r3;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r9);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" and has descendant matching ");

        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher descendantMatcher>;

        r10 = (org.hamcrest.SelfDescribing) $r6;

        $r7 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r10);

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(")");

        return;
    }

    boolean lambda$matchesSafely$0$androidx-test-espresso-matcher-ViewMatchers$HasDescendantMatcher(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        org.hamcrest.Matcher $r2;
        boolean $z0, z1;
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r3;

        r3 := @this: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        if r1 == r0 goto label2;

        $r2 = r3.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher descendantMatcher>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        z1 = 1;

     label1:
        return z1;

     label2:
        z1 = 0;

        goto label1;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        android.view.View r1;
        org.hamcrest.Description r2, $r8, $r10;
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0 r3, r14;
        org.hamcrest.Matcher $r4, $r9, $r13;
        boolean $z0, $z1;
        java.lang.Iterable $r5, $r6;
        java.util.Iterator $r7;
        org.hamcrest.SelfDescribing r15;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: org.hamcrest.Description;

        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher isViewGroupMatcher>;

        $z0 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view ");

        $r13 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher isViewGroupMatcher>;

        interfaceinvoke $r13.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        return 0;

     label1:
        r14 = new androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0;

        r3 = r14;

        specialinvoke r14.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher$$ExternalSyntheticLambda0: void <init>(androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher,android.view.View)>(r0, r1);

        $r5 = staticinvoke <androidx.test.espresso.util.TreeIterables: java.lang.Iterable breadthFirstViewTraversal(android.view.View)>(r1);

        $r6 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,androidx.test.espresso.core.internal.deps.guava.base.Predicate)>($r5, r3);

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $r8 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("no descendant matching ");

        $r9 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: org.hamcrest.Matcher descendantMatcher>;

        r15 = (org.hamcrest.SelfDescribing) $r9;

        $r10 = interfaceinvoke $r8.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r15);

        interfaceinvoke $r10.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" was found");

        return 0;

     label2:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasDescendantMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher
<androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/EditText;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("editText.getError() to match ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: org.hamcrest.Matcher stringMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    protected boolean matchesSafely(android.widget.EditText, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        android.widget.EditText r1;
        org.hamcrest.Description r2, $r3;
        java.lang.CharSequence $r4, $r7;
        org.hamcrest.Matcher $r6;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: android.widget.EditText;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("editText.getError() was ");

        $r4 = virtualinvoke r1.<android.widget.EditText: java.lang.CharSequence getError()>();

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r4);

        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: org.hamcrest.Matcher stringMatcher>;

        $r7 = virtualinvoke r1.<android.widget.EditText: java.lang.CharSequence getError()>();

        $z0 = interfaceinvoke $r6.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r7);

        return $z0;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.widget.EditText $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.widget.EditText) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasErrorTextMatcher: boolean matchesSafely(android.widget.EditText,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher
<androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher: boolean hasFocus>
    private void <init>(boolean)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;
        boolean z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher: boolean hasFocus> = z0;

        return;
    }

    void <init>(boolean, androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;
        boolean z0;
        androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher: void <init>(boolean)>(z0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.hasFocus() is ");

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher: boolean hasFocus>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0, z1;
        java.lang.Boolean $r3;
        android.view.View r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        z1 = virtualinvoke r5.<android.view.View: boolean hasFocus()>();

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher: boolean hasFocus>;

        if z1 == $z0 goto label1;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.hasFocus() is ");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasFocusMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher
<androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: org.hamcrest.Matcher imeActionMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: org.hamcrest.Matcher imeActionMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        org.hamcrest.Description r1, $r2, $r4;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r6;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("(view.onCreateInputConnection() is not null and editorInfo.actionId ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: org.hamcrest.Matcher imeActionMatcher>;

        r6 = (org.hamcrest.SelfDescribing) $r3;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r6);

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(")");

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        org.hamcrest.Description r1;
        android.view.inputmethod.EditorInfo r2;
        android.view.inputmethod.InputConnection $r3;
        int $i0, $i1, i2;
        org.hamcrest.Matcher $r4, $r7;
        java.lang.Integer $r5, $r8;
        boolean $z0;
        android.view.View r10;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r10 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        r2 = new android.view.inputmethod.EditorInfo;

        specialinvoke r2.<android.view.inputmethod.EditorInfo: void <init>()>();

        $r3 = virtualinvoke r10.<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>(r2);

        if $r3 != null goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.onCreateInputConnection() was null");

        return 0;

     label1:
        $i0 = r2.<android.view.inputmethod.EditorInfo: int actionId>;

        if $i0 == 0 goto label4;

        i2 = r2.<android.view.inputmethod.EditorInfo: int actionId>;

     label2:
        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: org.hamcrest.Matcher imeActionMatcher>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z0 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("editorInfo.actionId ");

        $r7 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: org.hamcrest.Matcher imeActionMatcher>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke $r7.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>($r8, r1);

        return 0;

     label3:
        return 1;

     label4:
        $i1 = r2.<android.view.inputmethod.EditorInfo: int imeOptions>;

        i2 = $i1 & 255;

        goto label2;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasImeActionMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher
    private void <init>()
    {
        androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        return;
    }

    void <init>(androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0;
        androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        r1 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher: void <init>()>();

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("textView.getUrls().length > 0");

        return;
    }

    protected boolean matchesSafely(android.widget.TextView, org.hamcrest.Description)
    {
        android.widget.TextView r0;
        org.hamcrest.Description r1, $r2;
        android.text.style.URLSpan[] $r3, $r6;
        int $i0, $i1;
        java.lang.Integer $r4;
        androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher r7;
        boolean z0;

        r7 := @this: androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        r0 := @parameter0: android.widget.TextView;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("textView.getUrls().length was ");

        $r3 = virtualinvoke r0.<android.widget.TextView: android.text.style.URLSpan[] getUrls()>();

        $i0 = lengthof $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r4);

        $r6 = virtualinvoke r0.<android.widget.TextView: android.text.style.URLSpan[] getUrls()>();

        $i1 = lengthof $r6;

        if $i1 <= 0 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.widget.TextView $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasLinksMatcher: boolean matchesSafely(android.widget.TextView,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher
<androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: int minChildCount>
    private void <init>(int)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0;
        int i0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/view/ViewGroup;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: int minChildCount> = i0;

        return;
    }

    void <init>(int, androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: void <init>(int)>(i0);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0;
        org.hamcrest.Description r1, $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("viewGroup.getChildCount() to be at least ");

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: int minChildCount>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.ViewGroup, org.hamcrest.Description)
    {
        android.view.ViewGroup r0;
        org.hamcrest.Description r1, $r2;
        int $i0, $i1, $i2;
        java.lang.Integer $r3;
        androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r5;
        boolean z0;

        r5 := @this: androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("viewGroup.getChildCount() was ");

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        $i2 = r5.<androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: int minChildCount>;

        if $i1 < $i2 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.ViewGroup $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.ViewGroup) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasMinimumChildCountMatcher: boolean matchesSafely(android.view.ViewGroup,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher
<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher siblingMatcher>
<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher parentMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        org.hamcrest.Matcher r1, $r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher isA(java.lang.Class)>(class "Landroid/view/ViewGroup;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher parentMatcher> = $r2;

        r0.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher siblingMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        org.hamcrest.Description r1, $r2, $r4, $r5, $r7;
        org.hamcrest.Matcher $r3, $r6;
        org.hamcrest.SelfDescribing r9, r10;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("(view.getParent() ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher parentMatcher>;

        r9 = (org.hamcrest.SelfDescribing) $r3;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r9);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" and has a sibling matching ");

        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher siblingMatcher>;

        r10 = (org.hamcrest.SelfDescribing) $r6;

        $r7 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r10);

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(")");

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        android.view.View r1, r4;
        org.hamcrest.Description r2, $r6, $r8;
        android.view.ViewGroup r3;
        org.hamcrest.Matcher $r5, $r10, $r13;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Integer $r7;
        android.view.ViewParent r14;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: org.hamcrest.Description;

        r14 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        $r5 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher parentMatcher>;

        $z0 = interfaceinvoke $r5.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r14);

        if $z0 != 0 goto label1;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getParent() ");

        $r13 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher parentMatcher>;

        interfaceinvoke $r13.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r14, r2);

        return 0;

     label1:
        r3 = (android.view.ViewGroup) r14;

        $i0 = virtualinvoke r3.<android.view.ViewGroup: int getChildCount()>();

        if $i0 != 1 goto label2;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("no siblings found");

        return 0;

     label2:
        i4 = 0;

     label3:
        $i1 = virtualinvoke r3.<android.view.ViewGroup: int getChildCount()>();

        if i4 >= $i1 goto label5;

        r4 = virtualinvoke r3.<android.view.ViewGroup: android.view.View getChildAt(int)>(i4);

        if r1 == r4 goto label4;

        $r10 = r0.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: org.hamcrest.Matcher siblingMatcher>;

        $z1 = interfaceinvoke $r10.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r4);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        $r6 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("none of the ");

        $i2 = virtualinvoke r3.<android.view.ViewGroup: int getChildCount()>();

        $i3 = $i2 + -1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8 = interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r7);

        interfaceinvoke $r8.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" siblings match");

        return 0;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$HasSiblingMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher
<androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: java.lang.Class clazz>
    private void <init>(java.lang.Class)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: java.lang.Class clazz> = $r3;

        return;
    }

    void <init>(java.lang.Class, androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        java.lang.Class r1;
        androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: void <init>(java.lang.Class)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        org.hamcrest.Description r1, $r2;
        java.lang.Class $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is assignable from class ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: java.lang.Class clazz>;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        android.view.View r1;
        org.hamcrest.Description r2, $r5;
        java.lang.Class $r3, $r4, $r6;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: java.lang.Class clazz>;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 != 0 goto label1;

        $r5 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getClass() was ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsAssignableFromMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher
<androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher: boolean isClickable>
    private void <init>(boolean)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;
        boolean z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher: boolean isClickable> = z0;

        return;
    }

    void <init>(boolean, androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;
        boolean z0;
        androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher: void <init>(boolean)>(z0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isClickable() is ");

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher: boolean isClickable>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0, z1;
        java.lang.Boolean $r3;
        android.view.View r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        z1 = virtualinvoke r5.<android.view.View: boolean isClickable()>();

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher: boolean isClickable>;

        if z1 == $z0 goto label1;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isClickable() was ");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsClickableMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher
<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: org.hamcrest.Matcher ancestorMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: org.hamcrest.Matcher ancestorMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is descendant of a view matching ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: org.hamcrest.Matcher ancestorMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    private boolean checkAncestors(android.view.ViewParent)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        android.view.ViewParent r1, $r3;
        boolean $z0, $z1, $z2;
        org.hamcrest.Matcher $r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: android.view.ViewParent;

        $z0 = r1 instanceof android.view.View;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: org.hamcrest.Matcher ancestorMatcher>;

        $z1 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r3 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        $z2 = specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: boolean checkAncestors(android.view.ViewParent)>($r3);

        return $z2;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        org.hamcrest.Description r1, $r3;
        android.view.ViewParent $r2;
        org.hamcrest.Matcher $r4;
        android.view.View r6;
        boolean z0;
        org.hamcrest.SelfDescribing r7;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r6 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = virtualinvoke r6.<android.view.View: android.view.ViewParent getParent()>();

        z0 = specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: boolean checkAncestors(android.view.ViewParent)>($r2);

        if z0 != 0 goto label1;

        $r3 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("none of the ancestors match ");

        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: org.hamcrest.Matcher ancestorMatcher>;

        r7 = (org.hamcrest.SelfDescribing) $r4;

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r7);

     label1:
        return z0;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsDescendantOfAMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher
<androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: org.hamcrest.Matcher visibilityMatcher>
    private void <init>()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0;
        androidx.test.espresso.matcher.ViewMatchers$Visibility $r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        $r1 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>;

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withEffectiveVisibility(androidx.test.espresso.matcher.ViewMatchers$Visibility)>($r1);

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: org.hamcrest.Matcher visibilityMatcher> = $r2;

        return;
    }

    void <init>(androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0;
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        r1 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0;
        org.hamcrest.Description r1, $r2, $r4;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r6;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("(");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: org.hamcrest.Matcher visibilityMatcher>;

        r6 = (org.hamcrest.SelfDescribing) $r3;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r6);

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" and view.getGlobalVisibleRect() to return non-empty rectangle)");

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        android.view.View r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r2, $r4;
        boolean $z0, $z1;
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r5;
        android.graphics.Rect r6;

        r5 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = r5.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: org.hamcrest.Matcher visibilityMatcher>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r4 = r5.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: org.hamcrest.Matcher visibilityMatcher>;

        interfaceinvoke $r4.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r0, r1);

        return 0;

     label1:
        r6 = new android.graphics.Rect;

        specialinvoke r6.<android.graphics.Rect: void <init>()>();

        $z1 = virtualinvoke r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>(r6);

        if $z1 != 0 goto label2;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getGlobalVisibleRect() returned empty rectangle");

        return 0;

     label2:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayedMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher
<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: int areaPercentage>
<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: org.hamcrest.Matcher visibilityMatchers>
    private android.graphics.Rect getScreenWithoutStatusBarActionBar(android.view.View)
    {
        android.util.DisplayMetrics r0, $r11;
        android.content.Context $r1, $r5, $r7, $r9, $r12;
        java.lang.Object $r2;
        android.view.WindowManager $r3;
        android.view.Display $r4;
        android.content.res.Resources $r6, $r10, $r13;
        android.content.res.Resources$Theme $r8;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r14;
        android.view.View r15;
        android.util.TypedValue r16;
        android.graphics.Rect r17;

        r14 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        r15 := @parameter0: android.view.View;

        r0 = new android.util.DisplayMetrics;

        specialinvoke r0.<android.util.DisplayMetrics: void <init>()>();

        $r1 = virtualinvoke r15.<android.view.View: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r3 = (android.view.WindowManager) $r2;

        $r4 = interfaceinvoke $r3.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke $r4.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r0);

        $r5 = virtualinvoke r15.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        i5 = virtualinvoke $r6.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>("status_bar_height", "dimen", "android");

        if i5 <= 0 goto label4;

        $r12 = virtualinvoke r15.<android.view.View: android.content.Context getContext()>();

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        i6 = virtualinvoke $r13.<android.content.res.Resources: int getDimensionPixelSize(int)>(i5);

     label1:
        r16 = new android.util.TypedValue;

        specialinvoke r16.<android.util.TypedValue: void <init>()>();

        $r7 = virtualinvoke r15.<android.view.View: android.content.Context getContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $z0 = virtualinvoke $r8.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843499, r16, 1);

        if $z0 == 0 goto label3;

        $i4 = r16.<android.util.TypedValue: int data>;

        $r9 = virtualinvoke r15.<android.view.View: android.content.Context getContext()>();

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        $r11 = virtualinvoke $r10.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i7 = staticinvoke <android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>($i4, $r11);

     label2:
        r17 = new android.graphics.Rect;

        $i3 = r0.<android.util.DisplayMetrics: int widthPixels>;

        $i1 = r0.<android.util.DisplayMetrics: int heightPixels>;

        $i0 = i6 + i7;

        $i2 = $i1 - $i0;

        specialinvoke r17.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i3, $i2);

        return r17;

     label3:
        i7 = 0;

        goto label2;

     label4:
        i6 = 0;

        goto label1;
    }

    private void <init>(int)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$Visibility $r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        $r1 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>;

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withEffectiveVisibility(androidx.test.espresso.matcher.ViewMatchers$Visibility)>($r1);

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: org.hamcrest.Matcher visibilityMatchers> = $r2;

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: int areaPercentage> = i0;

        return;
    }

    void <init>(int, androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: void <init>(int)>(i0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        org.hamcrest.Description r1, $r2, $r4, $r5, $r7;
        org.hamcrest.Matcher $r3;
        int $i0;
        java.lang.Integer $r6;
        org.hamcrest.SelfDescribing r9;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("(");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: org.hamcrest.Matcher visibilityMatchers>;

        r9 = (org.hamcrest.SelfDescribing) $r3;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r9);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" and view.getGlobalVisibleRect() covers at least ");

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: int areaPercentage>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" percent of the view\'s area)");

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        org.hamcrest.Description r1, $r5, $r7, $r9, $r11;
        android.graphics.Rect r2, r3;
        org.hamcrest.Matcher $r4, $r13;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, f11, f12, f13, f14, f15, f16;
        double $d0, $d1, $d2, $d3;
        java.lang.Integer $r6, $r10;
        android.view.View r14;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        r14 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: org.hamcrest.Matcher visibilityMatchers>;

        $z0 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r14);

        if $z0 != 0 goto label1;

        $r13 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: org.hamcrest.Matcher visibilityMatchers>;

        interfaceinvoke $r13.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r14, r1);

        return 0;

     label1:
        r2 = new android.graphics.Rect;

        specialinvoke r2.<android.graphics.Rect: void <init>()>();

        $z1 = virtualinvoke r14.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>(r2);

        if $z1 != 0 goto label2;

        $r9 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view was ");

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r11 = interfaceinvoke $r9.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r10);

        interfaceinvoke $r11.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" percent visible to the user");

        return 0;

     label2:
        r3 = specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: android.graphics.Rect getScreenWithoutStatusBarActionBar(android.view.View)>(r14);

        $i0 = virtualinvoke r14.<android.view.View: int getHeight()>();

        $i1 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        if $i0 <= $i1 goto label9;

        $i16 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        f11 = (float) $i16;

     label3:
        $i3 = virtualinvoke r14.<android.view.View: int getWidth()>();

        $i4 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        if $i3 <= $i4 goto label8;

        $i15 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        f12 = (float) $i15;

     label4:
        $i6 = <android.os.Build$VERSION: int SDK_INT>;

        if $i6 < 11 goto label7;

        $i11 = virtualinvoke r14.<android.view.View: int getHeight()>();

        $f1 = (float) $i11;

        $f2 = virtualinvoke r14.<android.view.View: float getScaleY()>();

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $f4 = $f1 * $f3;

        $i12 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $f5 = (float) $i12;

        f13 = staticinvoke <java.lang.Math: float min(float,float)>($f4, $f5);

        $i13 = virtualinvoke r14.<android.view.View: int getWidth()>();

        $f6 = (float) $i13;

        $f7 = virtualinvoke r14.<android.view.View: float getScaleX()>();

        $f8 = staticinvoke <java.lang.Math: float abs(float)>($f7);

        $f9 = $f6 * $f8;

        $i14 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $f10 = (float) $i14;

        f14 = staticinvoke <java.lang.Math: float min(float,float)>($f9, $f10);

        f15 = f13;

        f16 = f14;

     label5:
        $i7 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $i8 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $i9 = $i7 * $i8;

        $d1 = (double) $i9;

        $f0 = f15 * f16;

        $d0 = (double) $f0;

        $d2 = $d1 / $d0;

        $d3 = $d2 * 100.0;

        i17 = (int) $d3;

        $i10 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: int areaPercentage>;

        if i17 >= $i10 goto label6;

        $r5 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view was ");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        $r7 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" percent visible to the user");

        return 0;

     label6:
        return 1;

     label7:
        f15 = f11;

        f16 = f12;

        goto label5;

     label8:
        $i5 = virtualinvoke r14.<android.view.View: int getWidth()>();

        f12 = (float) $i5;

        goto label4;

     label9:
        $i2 = virtualinvoke r14.<android.view.View: int getHeight()>();

        f11 = (float) $i2;

        goto label3;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsDisplayingAtLeastMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher
<androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: boolean isEnabled>
    private void <init>(boolean)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;
        boolean z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: boolean isEnabled> = z0;

        return;
    }

    void <init>(boolean, androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;
        boolean z0;
        androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: void <init>(boolean)>(z0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isEnabled() is ");

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: boolean isEnabled>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0, z1;
        java.lang.Boolean $r3;
        android.view.View r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        z1 = virtualinvoke r5.<android.view.View: boolean isEnabled()>();

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: boolean isEnabled>;

        if z1 == $z0 goto label1;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isEnabled() was ");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsEnabledMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher
<androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: boolean isFocusable>
    private void <init>(boolean)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;
        boolean z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: boolean isFocusable> = z0;

        return;
    }

    void <init>(boolean, androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;
        boolean z0;
        androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: void <init>(boolean)>(z0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isFocusable() is ");

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: boolean isFocusable>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0, z1;
        java.lang.Boolean $r3;
        android.view.View r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        z1 = virtualinvoke r5.<android.view.View: boolean isFocusable()>();

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: boolean isFocusable>;

        if z1 == $z0 goto label1;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isFocusable() was ");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusableMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher
<androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher: boolean isFocused>
    private void <init>(boolean)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher r0;
        boolean z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher: boolean isFocused> = z0;

        return;
    }

    void <init>(boolean, androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher r0;
        boolean z0;
        androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher: void <init>(boolean)>(z0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isFocused() is ");

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher: boolean isFocused>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0, z1;
        java.lang.Boolean $r3;
        android.view.View r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        z1 = virtualinvoke r5.<android.view.View: boolean isFocused()>();

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher: boolean isFocused>;

        if z1 == $z0 goto label1;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isFocused() was ");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsFocusedMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher
    private void <init>()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/webkit/WebView;");

        return;
    }

    void <init>(androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;
        androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        r1 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher: void <init>()>();

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;
        org.hamcrest.Description r1, $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("webView.getSettings().getJavaScriptEnabled() is ");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.webkit.WebView, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;
        android.webkit.WebView r1;
        org.hamcrest.Description r2, $r3;
        android.webkit.WebSettings $r4, $r7;
        boolean $z0, $z1;
        java.lang.Boolean $r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        r1 := @parameter0: android.webkit.WebView;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("webView.getSettings().getJavaScriptEnabled() was ");

        $r4 = virtualinvoke r1.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r4.<android.webkit.WebSettings: boolean getJavaScriptEnabled()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r5);

        $r7 = virtualinvoke r1.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z1 = virtualinvoke $r7.<android.webkit.WebSettings: boolean getJavaScriptEnabled()>();

        return $z1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.webkit.WebView $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.webkit.WebView) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsJavascriptEnabledMatcher: boolean matchesSafely(android.webkit.WebView,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher
    private void <init>()
    {
        androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher r0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        return;
    }

    void <init>(androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher r0;
        androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        r1 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getRootView() to equal view");

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        android.view.View r0, r5;
        org.hamcrest.Description r1, $r2;
        androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher r4;

        r4 := @this: androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        r5 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        if r5 == r0 goto label1;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getRootView() was ");

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r5);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsRootMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher
<androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: boolean isSelected>
    private void <init>(boolean)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;
        boolean z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: boolean isSelected> = z0;

        return;
    }

    void <init>(boolean, androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;
        boolean z0;
        androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: void <init>(boolean)>(z0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isSelected() is ");

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: boolean isSelected>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;
        org.hamcrest.Description r1, $r2;
        boolean $z0, z1;
        java.lang.Boolean $r3;
        android.view.View r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        z1 = virtualinvoke r5.<android.view.View: boolean isSelected()>();

        $z0 = r0.<androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: boolean isSelected>;

        if z1 == $z0 goto label1;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isSelected() was ");

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$IsSelectedMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher
    private void <init>()
    {
        androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        return;
    }

    void <init>(androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0;
        androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        r1 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.onCreateInputConnection() is not null");

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        android.view.View r0;
        org.hamcrest.Description r1;
        android.view.inputmethod.InputConnection $r2;
        androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r4;
        android.view.inputmethod.EditorInfo r5;

        r4 := @this: androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        r5 = new android.view.inputmethod.EditorInfo;

        specialinvoke r5.<android.view.inputmethod.EditorInfo: void <init>()>();

        $r2 = virtualinvoke r0.<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>(r5);

        if $r2 != null goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.onCreateInputConnection() was null");

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$SupportsInputMethodsMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$Visibility
<androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>
<androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility INVISIBLE>
<androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility GONE>
<androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility[] $VALUES>
<androidx.test.espresso.matcher.ViewMatchers$Visibility: int value>
    public int getValue()
    {
        androidx.test.espresso.matcher.ViewMatchers$Visibility r0;
        int $i0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$Visibility;

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$Visibility: int value>;

        return $i0;
    }

    public static androidx.test.espresso.matcher.ViewMatchers$Visibility forViewVisibility(int)
    {
        int i0;
        java.lang.IllegalArgumentException r0;
        java.lang.StringBuilder r1, $r5, $r6, $r7;
        androidx.test.espresso.matcher.ViewMatchers$Visibility $r2, $r3, $r4;
        java.lang.String $r8;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 0: goto label4;
            case 4: goto label3;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        r0 = new java.lang.IllegalArgumentException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid visibility value <");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw r0;

     label2:
        $r2 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility GONE>;

        return $r2;

     label3:
        $r3 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility INVISIBLE>;

        return $r3;

     label4:
        $r4 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>;

        return $r4;
    }

    public static androidx.test.espresso.matcher.ViewMatchers$Visibility forViewVisibility(android.view.View)
    {
        android.view.View r0;
        int $i0;
        androidx.test.espresso.matcher.ViewMatchers$Visibility $r1;

        r0 := @parameter0: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        $r1 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility forViewVisibility(int)>($i0);

        return $r1;
    }

    public static androidx.test.espresso.matcher.ViewMatchers$Visibility valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.test.espresso.matcher.ViewMatchers$Visibility $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/test/espresso/matcher/ViewMatchers$Visibility;", r0);

        $r2 = (androidx.test.espresso.matcher.ViewMatchers$Visibility) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        androidx.test.espresso.matcher.ViewMatchers$Visibility[] $r0;
        androidx.test.espresso.matcher.ViewMatchers$Visibility r1, r2, r3;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$Visibility;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$Visibility: void <init>(java.lang.String,int,int)>("VISIBLE", 0, 0);

        <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility VISIBLE> = r1;

        r2 = new androidx.test.espresso.matcher.ViewMatchers$Visibility;

        specialinvoke r2.<androidx.test.espresso.matcher.ViewMatchers$Visibility: void <init>(java.lang.String,int,int)>("INVISIBLE", 1, 4);

        <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility INVISIBLE> = r2;

        r3 = new androidx.test.espresso.matcher.ViewMatchers$Visibility;

        specialinvoke r3.<androidx.test.espresso.matcher.ViewMatchers$Visibility: void <init>(java.lang.String,int,int)>("GONE", 2, 8);

        <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility GONE> = r3;

        $r0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility[] $values()>();

        <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int, int)
    {
        androidx.test.espresso.matcher.ViewMatchers$Visibility r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$Visibility;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<androidx.test.espresso.matcher.ViewMatchers$Visibility: int value> = i1;

        return;
    }

    private static androidx.test.espresso.matcher.ViewMatchers$Visibility[] $values()
    {
        androidx.test.espresso.matcher.ViewMatchers$Visibility[] r0;
        androidx.test.espresso.matcher.ViewMatchers$Visibility $r1, $r2, $r3;

        r0 = newarray (androidx.test.espresso.matcher.ViewMatchers$Visibility)[3];

        $r1 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility VISIBLE>;

        r0[0] = $r1;

        $r2 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility INVISIBLE>;

        r0[1] = $r2;

        $r3 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility GONE>;

        r0[2] = $r3;

        return r0;
    }

    public static androidx.test.espresso.matcher.ViewMatchers$Visibility[] values()
    {
        androidx.test.espresso.matcher.ViewMatchers$Visibility[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.test.espresso.matcher.ViewMatchers$Visibility[]) $r1;

        return $r2;
    }

androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: float alpha>
    private void <init>(float)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        float f0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        f0 := @parameter0: float;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: float alpha> = f0;

        return;
    }

    void <init>(float, androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        float f0;
        androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        f0 := @parameter0: float;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: void <init>(float)>(f0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        org.hamcrest.Description r1, $r2;
        float $f0;
        java.lang.Float $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getAlpha() is ");

        $f0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: float alpha>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        org.hamcrest.Description r1, $r2;
        float $f0, f1;
        byte $b0;
        java.lang.Float $r3;
        android.view.View r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        f1 = virtualinvoke r5.<android.view.View: float getAlpha()>();

        $f0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: float alpha>;

        $b0 = f1 cmpl $f0;

        if $b0 == 0 goto label1;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getAlpha() was ");

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithAlphaMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod
<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT>
<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT>
<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $VALUES>
    public static androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/test/espresso/matcher/ViewMatchers$WithCharSequenceMatcher$TextViewMethod;", r0);

        $r2 = (androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $r0;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod r1, r2;

        r1 = new androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        specialinvoke r1.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: void <init>(java.lang.String,int)>("GET_TEXT", 0);

        <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT> = r1;

        r2 = new androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        specialinvoke r2.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: void <init>(java.lang.String,int)>("GET_HINT", 1);

        <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT> = r2;

        $r0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $values()>();

        <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $VALUES> = $r0;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private static androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $values()
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] r0;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r1, $r2;

        r0 = newarray (androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod)[2];

        $r1 = <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_TEXT>;

        r0[0] = $r1;

        $r2 = <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod GET_HINT>;

        r0[1] = $r2;

        return r0;
    }

    public static androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] values()
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod[]) $r1;

        return $r2;
    }

androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId>
<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod method>
<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String resourceName>
<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>
    private void <init>(int, androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId> = i0;

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod method> = r1;

        return;
    }

    void <init>(int, androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod, androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod r1;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod;

        r2 := @parameter2: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: void <init>(int,androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod)>(i0, r1);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0;
        org.hamcrest.Description r1, $r7, $r10, $r12, $r15;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r2;
        int[] $r3;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r8, $r11, $r17;
        java.lang.Integer $r16;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r3 = <androidx.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$androidx$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod>;

        $r2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod method>;

        $i0 = virtualinvoke $r2.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label5;
            case 2: goto label4;
            default: goto label1;
        };

     label1:
        $r15 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" equals string from resource id: ");

        $i2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r15.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r16);

        $r17 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String resourceName>;

        if $r17 == null goto label2;

        $r10 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" [");

        $r11 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String resourceName>;

        $r12 = interfaceinvoke $r10.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r11);

        interfaceinvoke $r12.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("]");

     label2:
        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        if $r6 == null goto label3;

        $r7 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" value: ");

        $r8 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r8);

        return;

     label3:
        return;

     label4:
        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getHint()");

        goto label1;

     label5:
        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getText()");

        goto label1;
    }

    protected boolean matchesSafely(android.widget.TextView, org.hamcrest.Description)
    {
        java.lang.String $r0, $r3, $r4, $r8, $r10, $r12, r22;
        boolean $z0, z1;
        java.lang.StringBuilder $r6, $r7, r23;
        android.content.res.Resources $r9, $r11;
        int $i0, $i1, $i2, $i3;
        java.lang.Throwable $r13;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r14;
        android.widget.TextView r15;
        org.hamcrest.Description r16;
        int[] $r17;
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod $r18, r21;
        java.lang.CharSequence r19;
        java.lang.IllegalStateException r20;

        r14 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        r15 := @parameter0: android.widget.TextView;

        r16 := @parameter1: org.hamcrest.Description;

        $r0 = r14.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        if $r0 != null goto label03;

     label01:
        $r9 = virtualinvoke r15.<android.widget.TextView: android.content.res.Resources getResources()>();

        $i0 = r14.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId>;

        $r10 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int)>($i0);

        r14.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText> = $r10;

     label02:
        $r11 = virtualinvoke r15.<android.widget.TextView: android.content.res.Resources getResources()>();

        $i1 = r14.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: int resourceId>;

        $r12 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: java.lang.String '-$$Nest$smsafeGetResourceEntryName'(android.content.res.Resources,int)>($r11, $i1);

        r14.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String resourceName> = $r12;

     label03:
        $r17 = <androidx.test.espresso.matcher.ViewMatchers$2: int[] $SwitchMap$androidx$test$espresso$matcher$ViewMatchers$WithCharSequenceMatcher$TextViewMethod>;

        $r18 = r14.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod method>;

        $i2 = virtualinvoke $r18.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod: int ordinal()>();

        $i3 = $r17[$i2];

        tableswitch($i3)
        {
            case 1: goto label08;
            case 2: goto label04;
            default: goto label09;
        };

     label04:
        r19 = virtualinvoke r15.<android.widget.TextView: java.lang.CharSequence getHint()>();

        interfaceinvoke r16.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getHint() was ");

     label05:
        interfaceinvoke r16.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r19);

        $r3 = r14.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        if $r3 == null goto label07;

        if r19 == null goto label07;

        $r4 = r14.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: java.lang.String expectedText>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contentEquals(java.lang.CharSequence)>(r19);

        if $z0 == 0 goto label07;

        z1 = 1;

     label06:
        return z1;

     label07:
        z1 = 0;

        goto label06;

     label08:
        r19 = virtualinvoke r15.<android.widget.TextView: java.lang.CharSequence getText()>();

        interfaceinvoke r16.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getText() was ");

        goto label05;

     label09:
        r20 = new java.lang.IllegalStateException;

        r21 = r14.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher$TextViewMethod method>;

        r22 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r21);

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected TextView method: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw r20;

     label10:
        $r13 := @caughtexception;

        goto label02;

        catch android.content.res.Resources$NotFoundException from label01 to label02 with label10;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.widget.TextView $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithCharSequenceMatcher: boolean matchesSafely(android.widget.TextView,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: org.hamcrest.Matcher checkStateMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        org.hamcrest.Matcher r1;
        java.lang.Class[] $r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        $r2 = newarray (java.lang.Class)[0];

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class,java.lang.Class,java.lang.Class[])>(class "Landroid/view/View;", class "Landroid/widget/Checkable;", $r2);

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: org.hamcrest.Matcher checkStateMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isChecked() matching: ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: org.hamcrest.Matcher checkStateMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        org.hamcrest.Description r1, $r3;
        android.widget.Checkable $r2;
        java.lang.Boolean $r4, $r7;
        org.hamcrest.Matcher $r6;
        boolean $z0, z1;
        android.view.View r8;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r8 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = (android.widget.Checkable) r8;

        z1 = interfaceinvoke $r2.<android.widget.Checkable: boolean isChecked()>();

        $r3 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.isChecked() was ");

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r4);

        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: org.hamcrest.Matcher checkStateMatcher>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $z0 = interfaceinvoke $r6.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r7);

        return $z0;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithCheckBoxStateMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher childMatcher>
<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher viewGroupMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        org.hamcrest.Matcher r1, $r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher isA(java.lang.Class)>(class "Landroid/view/ViewGroup;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher viewGroupMatcher> = $r2;

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher childMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        org.hamcrest.Description r1, $r2, $r4, $r5, $r7;
        org.hamcrest.Matcher $r3, $r6;
        org.hamcrest.SelfDescribing r9, r10;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("(view ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher viewGroupMatcher>;

        r9 = (org.hamcrest.SelfDescribing) $r3;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r9);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" and has child matching: ");

        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher childMatcher>;

        r10 = (org.hamcrest.SelfDescribing) $r6;

        $r7 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r10);

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(")");

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        org.hamcrest.Description r1, $r4, $r6;
        android.view.ViewGroup r2;
        org.hamcrest.Matcher $r3, $r8, $r11;
        boolean $z0, $z1;
        int $i0, $i1, i2;
        java.lang.Integer $r5;
        android.view.View $r9, r12;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r12 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher viewGroupMatcher>;

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r12);

        if $z0 != 0 goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view ");

        $r11 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher viewGroupMatcher>;

        interfaceinvoke $r11.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r12, r1);

        return 0;

     label1:
        r2 = (android.view.ViewGroup) r12;

        i2 = 0;

     label2:
        $i0 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        if i2 >= $i0 goto label4;

        $r8 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: org.hamcrest.Matcher childMatcher>;

        $r9 = virtualinvoke r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        $z1 = interfaceinvoke $r8.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $r4 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("All ");

        $i1 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r5);

        interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" children did not match");

        return 0;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithChildMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: org.hamcrest.Matcher classNameMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: org.hamcrest.Matcher classNameMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getClass().getName() matches: ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: org.hamcrest.Matcher classNameMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        org.hamcrest.Description r1;
        java.lang.Class $r2;
        org.hamcrest.Matcher $r3, $r5;
        boolean $z0;
        android.view.View r6;
        java.lang.String r7;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r6 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        r7 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: org.hamcrest.Matcher classNameMatcher>;

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r7);

        if $z0 != 0 goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getClass().getName() ");

        $r5 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: org.hamcrest.Matcher classNameMatcher>;

        interfaceinvoke $r5.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r7, r1);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithClassNameMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId>
<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName>
<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>
    private void <init>(int)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        int i0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName> = null;

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText> = null;

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId> = i0;

        return;
    }

    void <init>(int, androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: void <init>(int)>(i0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        org.hamcrest.Description r1, $r2, $r7, $r10, $r12;
        int $i0;
        java.lang.Integer $r3;
        java.lang.String $r5, $r6, $r8, $r11;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getContentDescription() to match resource id ");

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $r5 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName>;

        if $r5 == null goto label1;

        $r10 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("[");

        $r11 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName>;

        $r12 = interfaceinvoke $r10.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r11);

        interfaceinvoke $r12.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("]");

     label1:
        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        if $r6 == null goto label2;

        $r7 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" with value ");

        $r8 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r8);

        return;

     label2:
        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        org.hamcrest.Description r1, $r3, $r6;
        java.lang.String $r2, $r5, $r10, $r12, $r15;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Integer $r7;
        android.content.res.Resources $r9, $r11;
        java.lang.Throwable $r13;
        android.view.View r14;
        java.lang.CharSequence r16;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        r14 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        if $r2 != null goto label3;

     label1:
        $r9 = virtualinvoke r14.<android.view.View: android.content.res.Resources getResources()>();

        $i1 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId>;

        $r10 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int)>($i1);

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText> = $r10;

     label2:
        $r11 = virtualinvoke r14.<android.view.View: android.content.res.Resources getResources()>();

        $i2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId>;

        $r12 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: java.lang.String '-$$Nest$smsafeGetResourceEntryName'(android.content.res.Resources,int)>($r11, $i2);

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String resourceName> = $r12;

     label3:
        $r15 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        if $r15 != null goto label4;

        $r6 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("Failed to resolve resource id ");

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: int resourceId>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r7);

        return 0;

     label4:
        r16 = virtualinvoke r14.<android.view.View: java.lang.CharSequence getContentDescription()>();

        if r16 == null goto label5;

        $r5 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: java.lang.String expectedText>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean contentEquals(java.lang.CharSequence)>(r16);

        if $z0 != 0 goto label6;

     label5:
        $r3 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getContentDescription() was ");

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r16);

        return 0;

     label6:
        return 1;

     label7:
        $r13 := @caughtexception;

        goto label2;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label7;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionFromIdMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: org.hamcrest.Matcher charSequenceMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: org.hamcrest.Matcher charSequenceMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getContentDescription() ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: org.hamcrest.Matcher charSequenceMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r2, $r4;
        boolean $z0;
        android.view.View r5;
        java.lang.CharSequence r6;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        r6 = virtualinvoke r5.<android.view.View: java.lang.CharSequence getContentDescription()>();

        $r2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: org.hamcrest.Matcher charSequenceMatcher>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r6);

        if $z0 != 0 goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getContentDescription() ");

        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: org.hamcrest.Matcher charSequenceMatcher>;

        interfaceinvoke $r4.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r6, r1);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher: org.hamcrest.Matcher textMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher: org.hamcrest.Matcher textMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getContentDescription() ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher: org.hamcrest.Matcher textMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher r0;
        org.hamcrest.Description r1;
        java.lang.CharSequence $r2, $r6;
        org.hamcrest.Matcher $r3, $r5;
        boolean $z0;
        android.view.View r7;
        java.lang.String r8;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher;

        r7 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = virtualinvoke r7.<android.view.View: java.lang.CharSequence getContentDescription()>();

        if $r2 == null goto label3;

        $r6 = virtualinvoke r7.<android.view.View: java.lang.CharSequence getContentDescription()>();

        r8 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>();

     label1:
        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher: org.hamcrest.Matcher textMatcher>;

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r8);

        if $z0 != 0 goto label2;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getContentDescription() ");

        $r5 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher: org.hamcrest.Matcher textMatcher>;

        interfaceinvoke $r5.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r8, r1);

        return 0;

     label2:
        return 1;

     label3:
        r8 = null;

        goto label1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithContentDescriptionTextMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: androidx.test.espresso.matcher.ViewMatchers$Visibility visibility>
    private void <init>(androidx.test.espresso.matcher.ViewMatchers$Visibility)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        androidx.test.espresso.matcher.ViewMatchers$Visibility r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r1 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$Visibility;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: androidx.test.espresso.matcher.ViewMatchers$Visibility visibility> = r1;

        return;
    }

    void <init>(androidx.test.espresso.matcher.ViewMatchers$Visibility, androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        androidx.test.espresso.matcher.ViewMatchers$Visibility r1;
        androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r1 := @parameter0: androidx.test.espresso.matcher.ViewMatchers$Visibility;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: void <init>(androidx.test.espresso.matcher.ViewMatchers$Visibility)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        org.hamcrest.Description r1, $r2;
        androidx.test.espresso.matcher.ViewMatchers$Visibility $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view has effective visibility ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: androidx.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        org.hamcrest.Description r1, $r5, $r11, $r17, $r18, $r19;
        androidx.test.espresso.matcher.ViewMatchers$Visibility $r2, $r3, $r6, $r9, $r10, $r12, $r16, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.view.ViewParent $r4, $r8, $r14, $r15;
        boolean $z0, $z1;
        android.view.View r22;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r22 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: androidx.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i0 = virtualinvoke $r2.<androidx.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i0 != 0 goto label4;

        $i5 = virtualinvoke r22.<android.view.View: int getVisibility()>();

        $r10 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: androidx.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i6 = virtualinvoke $r10.<androidx.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i5 != $i6 goto label3;

     label1:
        $r14 = virtualinvoke r22.<android.view.View: android.view.ViewParent getParent()>();

        $z1 = $r14 instanceof android.view.View;

        if $z1 == 0 goto label2;

        $r15 = virtualinvoke r22.<android.view.View: android.view.ViewParent getParent()>();

        r22 = (android.view.View) $r15;

        $i7 = virtualinvoke r22.<android.view.View: int getVisibility()>();

        $r16 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: androidx.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i8 = virtualinvoke $r16.<androidx.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i7 == $i8 goto label1;

        $r17 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("ancestor ");

        $r18 = interfaceinvoke $r17.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r22);

        $r19 = interfaceinvoke $r18.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\'s getVisibility() was ");

        $r20 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility forViewVisibility(android.view.View)>(r22);

        interfaceinvoke $r19.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r20);

        return 0;

     label2:
        return 1;

     label3:
        $r11 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getVisibility() was ");

        $r12 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers$Visibility: androidx.test.espresso.matcher.ViewMatchers$Visibility forViewVisibility(android.view.View)>(r22);

        interfaceinvoke $r11.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r12);

        return 0;

     label4:
        $i1 = virtualinvoke r22.<android.view.View: int getVisibility()>();

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: androidx.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i2 = virtualinvoke $r3.<androidx.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i1 == $i2 goto label7;

     label5:
        $r4 = virtualinvoke r22.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = $r4 instanceof android.view.View;

        if $z0 == 0 goto label6;

        $r8 = virtualinvoke r22.<android.view.View: android.view.ViewParent getParent()>();

        r22 = (android.view.View) $r8;

        $i3 = virtualinvoke r22.<android.view.View: int getVisibility()>();

        $r9 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: androidx.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        $i4 = virtualinvoke $r9.<androidx.test.espresso.matcher.ViewMatchers$Visibility: int getValue()>();

        if $i3 != $i4 goto label5;

        return 1;

     label6:
        $r5 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("neither view nor its ancestors have getVisibility() set to ");

        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: androidx.test.espresso.matcher.ViewMatchers$Visibility visibility>;

        interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        return 0;

     label7:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithEffectiveVisibilityMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getHint() matching: ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher: org.hamcrest.Matcher stringMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    protected boolean matchesSafely(android.widget.TextView, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r4;
        boolean $z0;
        android.widget.TextView r5;
        java.lang.CharSequence r6;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r5 := @parameter0: android.widget.TextView;

        r1 := @parameter1: org.hamcrest.Description;

        r6 = virtualinvoke r5.<android.widget.TextView: java.lang.CharSequence getHint()>();

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getHint() was ");

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r6);

        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher: org.hamcrest.Matcher stringMatcher>;

        $z0 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r6);

        return $z0;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.widget.TextView $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithHintMatcher: boolean matchesSafely(android.widget.TextView,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: org.hamcrest.Matcher viewIdMatcher>
<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: android.content.res.Resources resources>
    private java.lang.String getViewIdString(java.lang.String)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        java.util.regex.Matcher r1;
        java.lang.StringBuffer r2;
        java.util.regex.Pattern $r3;
        int $i0, i1;
        java.lang.String $r5, $r8, $r13, r15, r16, r17;
        android.content.res.Resources $r6, $r7;
        java.lang.StringBuilder $r10, $r11, $r12, r18;
        boolean $z0;
        java.util.Locale r19;
        java.lang.Object[] r20;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r15 := @parameter0: java.lang.String;

        $r3 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: java.util.regex.Pattern '-$$Nest$sfgetRESOURCE_ID_PATTERN'()>();

        r1 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r15);

        r2 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r15.<java.lang.String: int length()>();

        specialinvoke r2.<java.lang.StringBuffer: void <init>(int)>($i0);

     label1:
        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: android.content.res.Resources resources>;

        if $r6 == null goto label1;

        r16 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r16);

        $r7 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: android.content.res.Resources resources>;

        r17 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: java.lang.String '-$$Nest$smsafeGetResourceName'(android.content.res.Resources,int)>($r7, i1);

        if r17 == null goto label2;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r2, $r13);

        goto label1;

     label2:
        r19 = <java.util.Locale: java.util.Locale ROOT>;

        r20 = newarray (java.lang.Object)[1];

        r20[0] = r16;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r19, "%s (resource name not found)", r20);

        virtualinvoke r1.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r2, $r8);

        goto label1;

     label3:
        virtualinvoke r1.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(r2);

        $r5 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: org.hamcrest.Matcher viewIdMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.Description r0, $r1;
        androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher r3;
        org.hamcrest.Matcher r4;
        java.lang.String r5, r6;

        r3 := @this: androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r0 := @parameter0: org.hamcrest.Description;

        r4 = r3.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: org.hamcrest.Matcher viewIdMatcher>;

        r5 = interfaceinvoke r4.<org.hamcrest.Matcher: java.lang.String toString()>();

        r6 = specialinvoke r3.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: java.lang.String getViewIdString(java.lang.String)>(r5);

        $r1 = interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getId() ");

        interfaceinvoke $r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(r6);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        boolean z0, $z1;
        java.lang.StringBuilder r1, $r5, $r6, $r7;
        android.content.res.Resources $r2;
        org.hamcrest.Matcher $r3;
        int $i0, i1;
        java.lang.Integer $r4;
        java.lang.String $r8, $r9;
        android.view.View r11;
        org.hamcrest.Description r12, r13;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r11 := @parameter0: android.view.View;

        r12 := @parameter1: org.hamcrest.Description;

        $r2 = virtualinvoke r11.<android.view.View: android.content.res.Resources getResources()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: android.content.res.Resources resources> = $r2;

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: org.hamcrest.Matcher viewIdMatcher>;

        $i0 = virtualinvoke r11.<android.view.View: int getId()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r4);

        if z0 != 0 goto label1;

        $z1 = r12 instanceof org.hamcrest.Description$NullDescription;

        if $z1 != 0 goto label1;

        r13 = interfaceinvoke r12.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getId() was ");

        i1 = virtualinvoke r11.<android.view.View: int getId()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: java.lang.String getViewIdString(java.lang.String)>($r8);

        interfaceinvoke r13.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r9);

     label1:
        return z0;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithIdMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: int inputType>
    private void <init>(int)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0;
        int i0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/EditText;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: int inputType> = i0;

        return;
    }

    void <init>(int, androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: void <init>(int)>(i0);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0;
        org.hamcrest.Description r1, $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("editText.getInputType() is ");

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: int inputType>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected boolean matchesSafely(android.widget.EditText, org.hamcrest.Description)
    {
        android.widget.EditText r0;
        org.hamcrest.Description r1, $r2;
        int $i0, $i1, $i2;
        java.lang.Integer $r3;
        androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r5;
        boolean z0;

        r5 := @this: androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        r0 := @parameter0: android.widget.EditText;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("editText.getInputType() was ");

        $i0 = virtualinvoke r0.<android.widget.EditText: int getInputType()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $i1 = virtualinvoke r0.<android.widget.EditText: int getInputType()>();

        $i2 = r5.<androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: int inputType>;

        if $i1 != $i2 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.widget.EditText $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.widget.EditText) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithInputTypeMatcher: boolean matchesSafely(android.widget.EditText,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index>
<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: org.hamcrest.Matcher parentViewGroupMatcher>
    private void <init>(int)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        int i0;
        org.hamcrest.Matcher $r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher isA(java.lang.Class)>(class "Landroid/view/ViewGroup;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: org.hamcrest.Matcher parentViewGroupMatcher> = $r1;

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index> = i0;

        return;
    }

    void <init>(int, androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: void <init>(int)>(i0);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        org.hamcrest.Description r1, $r2, $r4, $r5, $r7;
        org.hamcrest.Matcher $r3;
        int $i0;
        java.lang.Integer $r6;
        org.hamcrest.SelfDescribing r9;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("(view.getParent() ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: org.hamcrest.Matcher parentViewGroupMatcher>;

        r9 = (org.hamcrest.SelfDescribing) $r3;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r9);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" and is at child index ");

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(")");

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        android.view.View r1, r19;
        org.hamcrest.Description r2, $r6, $r8, $r9, $r11, $r14;
        org.hamcrest.Matcher $r3, $r17;
        boolean $z0;
        android.view.ViewGroup $r4, $r5, $r12;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Integer $r7, $r13;
        android.view.ViewParent r18;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: org.hamcrest.Description;

        r18 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: org.hamcrest.Matcher parentViewGroupMatcher>;

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r18);

        if $z0 != 0 goto label1;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getParent() ");

        $r17 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: org.hamcrest.Matcher parentViewGroupMatcher>;

        interfaceinvoke $r17.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r18, r2);

        return 0;

     label1:
        $r4 = (android.view.ViewGroup) r18;

        $i0 = virtualinvoke $r4.<android.view.ViewGroup: int getChildCount()>();

        $i1 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index>;

        if $i0 > $i1 goto label2;

        $r11 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("parent only has ");

        $r12 = (android.view.ViewGroup) r18;

        $i4 = virtualinvoke $r12.<android.view.ViewGroup: int getChildCount()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r14 = interfaceinvoke $r11.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r13);

        interfaceinvoke $r14.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" children");

        return 0;

     label2:
        $r5 = (android.view.ViewGroup) r18;

        $i2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index>;

        r19 = virtualinvoke $r5.<android.view.ViewGroup: android.view.View getChildAt(int)>($i2);

        if r19 == r1 goto label3;

        $r6 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("child view at index ");

        $i3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: int index>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8 = interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r7);

        $r9 = interfaceinvoke $r8.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" was ");

        interfaceinvoke $r9.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r19);

        return 0;

     label3:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentIndexMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher: org.hamcrest.Matcher parentMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher: org.hamcrest.Matcher parentMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getParent() ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher: org.hamcrest.Matcher parentMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r2, $r4;
        boolean $z0;
        android.view.View r5;
        android.view.ViewParent r6;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        r6 = virtualinvoke r5.<android.view.View: android.view.ViewParent getParent()>();

        $r2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher: org.hamcrest.Matcher parentMatcher>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r6);

        if $z0 != 0 goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getParent() ");

        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher: org.hamcrest.Matcher parentMatcher>;

        interfaceinvoke $r4.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r6, r1);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithParentMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getId()\'s resource name should match ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: org.hamcrest.Matcher stringMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        org.hamcrest.Description r1, $r5, $r6, $r8, $r10;
        int i0, $i1;
        android.content.res.Resources $r2, $r3;
        boolean $z0, $z1;
        org.hamcrest.Matcher $r4;
        java.lang.Integer $r9;
        android.view.View r15;
        java.lang.String r16;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r15 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        i0 = virtualinvoke r15.<android.view.View: int getId()>();

        if i0 != -1 goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getId() was View.NO_ID");

        return 0;

     label1:
        $r2 = virtualinvoke r15.<android.view.View: android.content.res.Resources getResources()>();

        if $r2 != null goto label2;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getResources() was null, can\'t resolve resource name");

        return 0;

     label2:
        $z0 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: boolean '-$$Nest$smisViewIdGenerated'(int)>(i0);

        if $z0 == 0 goto label3;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getId() was generated by a call to View.generateViewId()");

        return 0;

     label3:
        $r3 = virtualinvoke r15.<android.view.View: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke r15.<android.view.View: int getId()>();

        r16 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: java.lang.String '-$$Nest$smsafeGetResourceEntryName'(android.content.res.Resources,int)>($r3, $i1);

        if r16 != null goto label4;

        $r8 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getId() was ");

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = interfaceinvoke $r8.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r9);

        interfaceinvoke $r10.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" which fails to resolve resource name");

        return 0;

     label4:
        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: org.hamcrest.Matcher stringMatcher>;

        $z1 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r16);

        if $z1 != 0 goto label5;

        $r5 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getId() was <");

        $r6 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(r16);

        interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(">");

        return 0;

     label5:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithResourceNameMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId>
<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName>
<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>
    private void <init>(int)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        int i0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/Spinner;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName> = null;

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText> = null;

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId> = i0;

        return;
    }

    void <init>(int, androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        int i0;
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher-IA r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: void <init>(int)>(i0);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        org.hamcrest.Description r1, $r2, $r7, $r10, $r12;
        int $i0;
        java.lang.Integer $r3;
        java.lang.String $r5, $r6, $r8, $r11;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("spinner.getSelectedItem().toString() to match string from resource id: ");

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $r5 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName>;

        if $r5 == null goto label1;

        $r10 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" [");

        $r11 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName>;

        $r12 = interfaceinvoke $r10.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r11);

        interfaceinvoke $r12.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("]");

     label1:
        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        if $r6 == null goto label2;

        $r7 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" value: ");

        $r8 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r8);

        return;

     label2:
        return;
    }

    protected boolean matchesSafely(android.widget.Spinner, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        org.hamcrest.Description r1, $r3, $r9;
        java.lang.String $r2, $r4, $r6, $r7, $r13, $r15, $r18;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Integer $r10;
        android.content.res.Resources $r12, $r14;
        java.lang.Throwable $r16;
        android.widget.Spinner r17;
        java.lang.Object r19;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        r17 := @parameter0: android.widget.Spinner;

        r1 := @parameter1: org.hamcrest.Description;

        $r2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        if $r2 != null goto label3;

     label1:
        $r12 = virtualinvoke r17.<android.widget.Spinner: android.content.res.Resources getResources()>();

        $i1 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId>;

        $r13 = virtualinvoke $r12.<android.content.res.Resources: java.lang.String getString(int)>($i1);

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText> = $r13;

     label2:
        $r14 = virtualinvoke r17.<android.widget.Spinner: android.content.res.Resources getResources()>();

        $i2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId>;

        $r15 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: java.lang.String '-$$Nest$smsafeGetResourceEntryName'(android.content.res.Resources,int)>($r14, $i2);

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String resourceName> = $r15;

     label3:
        $r18 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        if $r18 != null goto label4;

        $r9 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("failure to resolve resourceId ");

        $i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: int resourceId>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r9.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r10);

        return 0;

     label4:
        r19 = virtualinvoke r17.<android.widget.Spinner: java.lang.Object getSelectedItem()>();

        if r19 != null goto label5;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("spinner.getSelectedItem() was null");

        return 0;

     label5:
        $r3 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("spinner.getSelectedItem().toString() was ");

        $r4 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r4);

        $r6 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: java.lang.String expectedText>;

        $r7 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        return $z0;

     label6:
        $r16 := @caughtexception;

        goto label2;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label6;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.widget.Spinner $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.widget.Spinner) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextIdMatcher: boolean matchesSafely(android.widget.Spinner,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/Spinner;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("spinner.getSelectedItem().toString() to match ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: org.hamcrest.Matcher stringMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    protected boolean matchesSafely(android.widget.Spinner, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        android.widget.Spinner r1;
        org.hamcrest.Description r2, $r4;
        java.lang.Object r3, $r8;
        java.lang.String $r5, $r9;
        org.hamcrest.Matcher $r7;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: android.widget.Spinner;

        r2 := @parameter1: org.hamcrest.Description;

        r3 = virtualinvoke r1.<android.widget.Spinner: java.lang.Object getSelectedItem()>();

        if r3 != null goto label1;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("spinner.getSelectedItem() was null");

        return 0;

     label1:
        $r4 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("spinner.getSelectedItem().toString() was ");

        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r5);

        $r7 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: org.hamcrest.Matcher stringMatcher>;

        $r8 = virtualinvoke r1.<android.widget.Spinner: java.lang.Object getSelectedItem()>();

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        $z0 = interfaceinvoke $r7.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r9);

        return $z0;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.widget.Spinner $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.widget.Spinner) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithSpinnerTextMatcher: boolean matchesSafely(android.widget.Spinner,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: int key>
<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: org.hamcrest.Matcher objectMatcher>
    private void <init>(int, org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        int i0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: int key> = i0;

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: org.hamcrest.Matcher objectMatcher> = r1;

        return;
    }

    void <init>(int, org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        int i0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: org.hamcrest.Matcher;

        r2 := @parameter2: androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: void <init>(int,org.hamcrest.Matcher)>(i0, r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        org.hamcrest.Description r1, $r7;
        int i0;
        java.lang.StringBuilder r2, $r3, $r4, $r5, r10;
        java.lang.String $r6;
        org.hamcrest.Matcher $r8;
        org.hamcrest.SelfDescribing r11;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: int key>;

        r10 = new java.lang.StringBuilder;

        r2 = r10;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view.getTag(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r6);

        $r8 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: org.hamcrest.Matcher objectMatcher>;

        r11 = (org.hamcrest.SelfDescribing) $r8;

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r11);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        org.hamcrest.Description r1;
        int i0, $i1;
        java.lang.StringBuilder r2, $r4, $r5, $r6;
        org.hamcrest.Matcher $r3, $r9;
        boolean $z0;
        java.lang.String $r7;
        android.view.View r10;
        java.lang.Object r11;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        r10 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        $i1 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: int key>;

        r11 = virtualinvoke r10.<android.view.View: java.lang.Object getTag(int)>($i1);

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: org.hamcrest.Matcher objectMatcher>;

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r11);

        if $z0 != 0 goto label1;

        i0 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: int key>;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view.getTag(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r7);

        $r9 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: org.hamcrest.Matcher objectMatcher>;

        interfaceinvoke $r9.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r11, r1);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagKeyMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: org.hamcrest.Matcher tagValueMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: org.hamcrest.Matcher tagValueMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;
        org.hamcrest.SelfDescribing r5;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getTag() ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: org.hamcrest.Matcher tagValueMatcher>;

        r5 = (org.hamcrest.SelfDescribing) $r3;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r5);

        return;
    }

    protected boolean matchesSafely(android.view.View, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r2, $r4;
        boolean $z0;
        android.view.View r5;
        java.lang.Object r6;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: org.hamcrest.Description;

        r6 = virtualinvoke r5.<android.view.View: java.lang.Object getTag()>();

        $r2 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: org.hamcrest.Matcher tagValueMatcher>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r6);

        if $z0 != 0 goto label1;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getTag() ");

        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: org.hamcrest.Matcher tagValueMatcher>;

        interfaceinvoke $r4.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r6, r1);

        return 0;

     label1:
        return 1;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithTagValueMatcher: boolean matchesSafely(android.view.View,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher-IA
androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher
<androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher>
    private void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void <init>(java.lang.Class)>(class "Landroid/widget/TextView;");

        r0.<androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher> = r1;

        return;
    }

    void <init>(org.hamcrest.Matcher, androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher-IA)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        org.hamcrest.Matcher r1;
        androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher-IA r2;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher-IA;

        specialinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }

    protected void describeMoreTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getText() with or without transformation to match: ");

        $r3 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    protected boolean matchesSafely(android.widget.TextView, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        org.hamcrest.Description r1, $r5, $r9;
        java.lang.String r2, $r12;
        java.lang.CharSequence $r3, r14;
        org.hamcrest.Matcher $r4, $r11;
        boolean $z0, $z1;
        android.text.method.TransformationMethod $r7, $r8;
        android.widget.TextView r13;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r13 := @parameter0: android.widget.TextView;

        r1 := @parameter1: org.hamcrest.Description;

        $r3 = virtualinvoke r13.<android.widget.TextView: java.lang.CharSequence getText()>();

        r2 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>();

        $r4 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher>;

        $z0 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r5 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("view.getText() was ");

        interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r2);

        $r7 = virtualinvoke r13.<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>();

        if $r7 == null goto label2;

        $r8 = virtualinvoke r13.<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>();

        r14 = interfaceinvoke $r8.<android.text.method.TransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>(r2, r13);

        $r9 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" transformed text was ");

        interfaceinvoke $r9.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r14);

        if r14 == null goto label2;

        $r11 = r0.<androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher: org.hamcrest.Matcher stringMatcher>;

        $r12 = interfaceinvoke r14.<java.lang.CharSequence: java.lang.String toString()>();

        $z1 = interfaceinvoke $r11.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r12);

        return $z1;

     label2:
        return 0;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        android.widget.TextView $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (android.widget.TextView) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.ViewMatchers$WithTextMatcher: boolean matchesSafely(android.widget.TextView,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

