androidx.compose.ui.node.NodeChain
<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.LayoutNode layoutNode>
<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.InnerNodeCoordinator innerCoordinator>
<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeCoordinator outerCoordinator>
<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>
<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>
<androidx.compose.ui.node.NodeChain: androidx.compose.runtime.collection.MutableVector current>
<androidx.compose.ui.node.NodeChain: androidx.compose.runtime.collection.MutableVector buffer>
<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Differ cachedDiffer>
<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger logger>
    public void <init>(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.node.LayoutNode r1, $r3;
        androidx.compose.ui.node.InnerNodeCoordinator $r2, $r4, $r6;
        androidx.compose.ui.node.NodeCoordinator $r5;
        androidx.compose.ui.Modifier$Node $r7, $r8;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "layoutNode");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.LayoutNode layoutNode> = r1;

        $r2 = new androidx.compose.ui.node.InnerNodeCoordinator;

        $r3 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.LayoutNode layoutNode>;

        specialinvoke $r2.<androidx.compose.ui.node.InnerNodeCoordinator: void <init>(androidx.compose.ui.node.LayoutNode)>($r3);

        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.InnerNodeCoordinator innerCoordinator> = $r2;

        $r4 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.InnerNodeCoordinator innerCoordinator>;

        $r5 = (androidx.compose.ui.node.NodeCoordinator) $r4;

        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeCoordinator outerCoordinator> = $r5;

        $r6 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.InnerNodeCoordinator innerCoordinator>;

        $r7 = virtualinvoke $r6.<androidx.compose.ui.node.InnerNodeCoordinator: androidx.compose.ui.Modifier$Node getTail()>();

        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail> = $r7;

        $r8 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>;

        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head> = $r8;

        return;
    }

    public final androidx.compose.ui.node.LayoutNode getLayoutNode()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.LayoutNode layoutNode>;

        return $r1;
    }

    public final androidx.compose.ui.node.InnerNodeCoordinator getInnerCoordinator$ui_release()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.node.InnerNodeCoordinator $r1;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.InnerNodeCoordinator innerCoordinator>;

        return $r1;
    }

    public final androidx.compose.ui.node.NodeCoordinator getOuterCoordinator$ui_release()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.node.NodeCoordinator $r1;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeCoordinator outerCoordinator>;

        return $r1;
    }

    public final androidx.compose.ui.Modifier$Node getTail$ui_release()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node $r1;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>;

        return $r1;
    }

    public final androidx.compose.ui.Modifier$Node getHead$ui_release()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node $r1;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>;

        return $r1;
    }

    private final boolean isUpdating()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node $r1;
        androidx.compose.ui.node.NodeChainKt$SentinelHead$1 $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>;

        $r2 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.node.NodeChainKt$SentinelHead$1 access$getSentinelHead$p()>();

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private final int getAggregateChildKindSet()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>;

        $i0 = virtualinvoke $r1.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        return $i0;
    }

    public final void useLogger$ui_release(androidx.compose.ui.node.NodeChain$Logger)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.node.NodeChain$Logger r1;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.node.NodeChain$Logger;

        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger logger> = r1;

        return;
    }

    private final void padChain()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node r1, $r3, $r6, $r9;
        java.lang.String r2, $r11;
        androidx.compose.ui.node.NodeChainKt$SentinelHead$1 $r4, $r5, $r7, $r8;
        java.lang.IllegalStateException $r10;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r3 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>;

        $r4 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.node.NodeChainKt$SentinelHead$1 access$getSentinelHead$p()>();

        if $r3 == $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        r2 = "Check failed.";

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label3:
        r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>;

        $r5 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.node.NodeChainKt$SentinelHead$1 access$getSentinelHead$p()>();

        $r6 = (androidx.compose.ui.Modifier$Node) $r5;

        virtualinvoke r1.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>($r6);

        $r7 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.node.NodeChainKt$SentinelHead$1 access$getSentinelHead$p()>();

        virtualinvoke $r7.<androidx.compose.ui.node.NodeChainKt$SentinelHead$1: void setChild$ui_release(androidx.compose.ui.Modifier$Node)>(r1);

        $r8 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.node.NodeChainKt$SentinelHead$1 access$getSentinelHead$p()>();

        $r9 = (androidx.compose.ui.Modifier$Node) $r8;

        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head> = $r9;

        return;
    }

    private final void trimChain()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node $r1, $r4, $r6, $r14;
        androidx.compose.ui.node.NodeChainKt$SentinelHead$1 $r2, $r3, $r5, $r7;
        java.lang.IllegalStateException $r8, $r11;
        java.lang.String $r9, $r12, r13, r15;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>;

        $r2 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.node.NodeChainKt$SentinelHead$1 access$getSentinelHead$p()>();

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        r13 = "Check failed.";

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label3:
        $r3 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.node.NodeChainKt$SentinelHead$1 access$getSentinelHead$p()>();

        $r14 = virtualinvoke $r3.<androidx.compose.ui.node.NodeChainKt$SentinelHead$1: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        if $r14 != null goto label4;

        $r14 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>;

     label4:
        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head> = $r14;

        $r4 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>;

        virtualinvoke $r4.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>(null);

        $r5 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.node.NodeChainKt$SentinelHead$1 access$getSentinelHead$p()>();

        virtualinvoke $r5.<androidx.compose.ui.node.NodeChainKt$SentinelHead$1: void setChild$ui_release(androidx.compose.ui.Modifier$Node)>(null);

        $r6 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>;

        $r7 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.node.NodeChainKt$SentinelHead$1 access$getSentinelHead$p()>();

        if $r6 == $r7 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        if $z1 != 0 goto label7;

        r15 = "Check failed.";

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label7:
        return;
    }

    public final void updateFrom$ui_release(androidx.compose.ui.Modifier)
    {
        androidx.compose.ui.node.NodeChain r0, r4;
        androidx.compose.ui.Modifier r1;
        androidx.compose.runtime.collection.MutableVector r2, r3, $r23, $r24, r26, r32, r36;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, i14;
        androidx.compose.ui.Modifier$Node $r5, $r10, r25, $r29, $r31, r34;
        androidx.compose.ui.node.LayoutNode $r6;
        boolean $z0, z1, z2, z5, $z9, $z10, z11;
        java.lang.Object[] $r7, $r13, $r15;
        java.lang.Object $r8, $r14, $r16;
        androidx.compose.ui.node.NodeChain$Logger $r9, $r17, $r18, $r19;
        java.lang.IllegalStateException $r11;
        java.lang.String $r12, r30;
        androidx.compose.ui.Modifier$Element[] $r20, $r22;
        byte b8;
        androidx.compose.ui.Modifier$Element r27, r28, $r33;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.Modifier;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "m");

        z1 = 0;

        z2 = 0;

        specialinvoke r0.<androidx.compose.ui.node.NodeChain: void padChain()>();

        $r23 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.runtime.collection.MutableVector current>;

        if $r23 != null goto label01;

        b8 = 16;

        $r23 = new androidx.compose.runtime.collection.MutableVector;

        $r22 = newarray (androidx.compose.ui.Modifier$Element)[b8];

        specialinvoke $r23.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r22, 0);

     label01:
        r2 = $r23;

        $r24 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.runtime.collection.MutableVector buffer>;

        if $r24 != null goto label02;

        z5 = 0;

        $r24 = new androidx.compose.runtime.collection.MutableVector;

        $r20 = newarray (androidx.compose.ui.Modifier$Element)[16];

        specialinvoke $r24.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r20, 0);

     label02:
        r3 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.runtime.collection.MutableVector access$fillVector(androidx.compose.ui.Modifier,androidx.compose.runtime.collection.MutableVector)>(r1, $r24);

        $i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        $i1 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if $i0 != $i1 goto label17;

        $i9 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        $r10 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>;

        r25 = virtualinvoke $r10.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        $i10 = $i9 - 1;

        $i11 = 0;

     label03:
        if r25 == null goto label13;

        if $i10 < 0 goto label13;

        r26 = r2;

        $r13 = virtualinvoke r26.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r14 = $r13[$i10];

        r27 = (androidx.compose.ui.Modifier$Element) $r14;

        $r15 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r16 = $r15[$i10];

        r28 = (androidx.compose.ui.Modifier$Element) $r16;

        $i7 = staticinvoke <androidx.compose.ui.node.NodeChainKt: int reuseActionForModifiers(androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element)>(r27, r28);

        tableswitch($i7)
        {
            case 0: goto label04;
            case 1: goto label06;
            case 2: goto label11;
            default: goto label12;
        };

     label04:
        $r19 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger logger>;

        if $r19 == null goto label05;

        interfaceinvoke $r19.<androidx.compose.ui.node.NodeChain$Logger: void linearDiffAborted(int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>($i10, r27, r28, r25);

        goto label05;

     label05:
        $i10 = $i10 + 1;

        r25 = virtualinvoke r25.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label13;

     label06:
        $r29 = r25;

        r25 = specialinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node updateNodeAndReplaceIfNeeded(androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>(r27, r28, r25);

        if z1 != 0 goto label07;

        if $r29 == r25 goto label08;

     label07:
        $z9 = 1;

        goto label09;

     label08:
        $z9 = 0;

     label09:
        z1 = $z9;

        $r18 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger logger>;

        if $r18 == null goto label10;

        interfaceinvoke $r18.<androidx.compose.ui.node.NodeChain$Logger: void nodeUpdated(int,int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node,androidx.compose.ui.Modifier$Node)>($i10, $i10, r27, r28, $r29, r25);

        goto label12;

     label10:
        goto label12;

     label11:
        $r17 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger logger>;

        if $r17 == null goto label12;

        interfaceinvoke $r17.<androidx.compose.ui.node.NodeChain$Logger: void nodeReused(int,int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>($i10, $i10, r27, r28, r25);

        goto label12;

     label12:
        $i10 = $i10 + -1;

        $i12 = virtualinvoke r25.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i11 = $i11 | $i12;

        virtualinvoke r25.<androidx.compose.ui.Modifier$Node: void setAggregateChildKindSet$ui_release(int)>($i11);

        r25 = virtualinvoke r25.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label03;

     label13:
        if $i10 <= 0 goto label21;

        if r25 == null goto label14;

        $z10 = 1;

        goto label15;

     label14:
        $z10 = 0;

     label15:
        if $z10 != 0 goto label16;

        r30 = "Check failed.";

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke r30.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label16:
        z1 = 1;

        z2 = 1;

        specialinvoke r0.<androidx.compose.ui.node.NodeChain: void structuralUpdate(androidx.compose.runtime.collection.MutableVector,int,androidx.compose.runtime.collection.MutableVector,int,androidx.compose.ui.Modifier$Node)>(r2, $i10, r3, $i10, r25);

        goto label21;

     label17:
        $i2 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if $i2 != 0 goto label20;

        z1 = 1;

        z2 = 1;

        $i5 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        $i13 = $i5 - 1;

        i14 = 0;

        $r31 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>;

     label18:
        if $i13 < 0 goto label21;

        r32 = r3;

        z11 = 0;

        $r7 = virtualinvoke r32.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r8 = $r7[$i13];

        $r33 = (androidx.compose.ui.Modifier$Element) $r8;

        r34 = $r31;

        $r31 = specialinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node createAndInsertNodeAsParent(androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>($r33, r34);

        $r9 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger logger>;

        if $r9 == null goto label19;

        interfaceinvoke $r9.<androidx.compose.ui.node.NodeChain$Logger: void nodeInserted(int,int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node,androidx.compose.ui.Modifier$Node)>(0, $i13, $r33, r34, $r31);

        goto label19;

     label19:
        $i6 = virtualinvoke $r31.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        i14 = i14 | $i6;

        virtualinvoke $r31.<androidx.compose.ui.Modifier$Node: void setAggregateChildKindSet$ui_release(int)>(i14);

        $i13 = $i13 + -1;

        goto label18;

     label20:
        z1 = 1;

        z2 = 1;

        $i3 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        $i4 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        $r5 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>;

        specialinvoke r0.<androidx.compose.ui.node.NodeChain: void structuralUpdate(androidx.compose.runtime.collection.MutableVector,int,androidx.compose.runtime.collection.MutableVector,int,androidx.compose.ui.Modifier$Node)>(r2, $i3, r3, $i4, $r5);

     label21:
        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.runtime.collection.MutableVector current> = r3;

        r36 = r2;

        r4 = r0;

        virtualinvoke r36.<androidx.compose.runtime.collection.MutableVector: void clear()>();

        r4.<androidx.compose.ui.node.NodeChain: androidx.compose.runtime.collection.MutableVector buffer> = r2;

        specialinvoke r0.<androidx.compose.ui.node.NodeChain: void trimChain()>();

        if z2 == 0 goto label22;

        specialinvoke r0.<androidx.compose.ui.node.NodeChain: void syncCoordinators()>();

     label22:
        if z1 == 0 goto label23;

        $r6 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.LayoutNode layoutNode>;

        $z0 = virtualinvoke $r6.<androidx.compose.ui.node.LayoutNode: boolean isAttached()>();

        if $z0 == 0 goto label23;

        virtualinvoke r0.<androidx.compose.ui.node.NodeChain: void attach()>();

     label23:
        return;
    }

    private final void syncCoordinators()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.node.InnerNodeCoordinator $r1;
        androidx.compose.ui.Modifier$Node $r2, r15, r16;
        androidx.compose.ui.node.LayoutNode $r3, $r4, $r9;
        androidx.compose.ui.node.NodeCoordinator $r5, $r10, $r11, $r12, r14, $r22;
        androidx.compose.ui.node.Nodes $r6;
        int $i0, $i1, i2;
        boolean $z0, $z1, $z3;
        androidx.compose.ui.node.LayoutModifierNodeCoordinator $r7, r17, $r19, r20, r21;
        androidx.compose.ui.node.LayoutModifierNode $r8, $r13, $r18;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r1 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.InnerNodeCoordinator innerCoordinator>;

        r14 = (androidx.compose.ui.node.NodeCoordinator) $r1;

        $r2 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>;

        r15 = virtualinvoke $r2.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

     label01:
        if r15 == null goto label09;

        r16 = r15;

        $r6 = <androidx.compose.ui.node.Nodes: androidx.compose.ui.node.Nodes INSTANCE>;

        i2 = virtualinvoke $r6.<androidx.compose.ui.node.Nodes: int getLayout-OLwlOKw()>();

        $i0 = virtualinvoke r16.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i1 = $i0 & i2;

        if $i1 == 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        if $z3 == 0 goto label07;

        $z0 = r15 instanceof androidx.compose.ui.node.LayoutModifierNode;

        if $z0 == 0 goto label07;

        $z1 = virtualinvoke r15.<androidx.compose.ui.Modifier$Node: boolean isAttached()>();

        if $z1 == 0 goto label05;

        $r12 = virtualinvoke r15.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.node.NodeCoordinator getCoordinator$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r12, "null cannot be cast to non-null type androidx.compose.ui.node.LayoutModifierNodeCoordinator");

        r17 = (androidx.compose.ui.node.LayoutModifierNodeCoordinator) $r12;

        $r18 = virtualinvoke r17.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: androidx.compose.ui.node.LayoutModifierNode getLayoutModifierNode()>();

        $r13 = (androidx.compose.ui.node.LayoutModifierNode) r15;

        virtualinvoke r17.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: void setLayoutModifierNode$ui_release(androidx.compose.ui.node.LayoutModifierNode)>($r13);

        if $r18 == r15 goto label04;

        virtualinvoke r17.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: void onLayoutModifierNodeChanged()>();

     label04:
        $r19 = r17;

        goto label06;

     label05:
        $r7 = new androidx.compose.ui.node.LayoutModifierNodeCoordinator;

        $r9 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r8 = (androidx.compose.ui.node.LayoutModifierNode) r15;

        specialinvoke $r7.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: void <init>(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.node.LayoutModifierNode)>($r9, $r8);

        r20 = $r7;

        $r10 = (androidx.compose.ui.node.NodeCoordinator) r20;

        virtualinvoke r15.<androidx.compose.ui.Modifier$Node: void updateCoordinator$ui_release(androidx.compose.ui.node.NodeCoordinator)>($r10);

        $r19 = r20;

     label06:
        r21 = $r19;

        $r11 = (androidx.compose.ui.node.NodeCoordinator) r21;

        virtualinvoke r14.<androidx.compose.ui.node.NodeCoordinator: void setWrappedBy$ui_release(androidx.compose.ui.node.NodeCoordinator)>($r11);

        virtualinvoke r21.<androidx.compose.ui.node.LayoutModifierNodeCoordinator: void setWrapped$ui_release(androidx.compose.ui.node.NodeCoordinator)>(r14);

        r14 = (androidx.compose.ui.node.NodeCoordinator) r21;

        goto label08;

     label07:
        virtualinvoke r15.<androidx.compose.ui.Modifier$Node: void updateCoordinator$ui_release(androidx.compose.ui.node.NodeCoordinator)>(r14);

     label08:
        r15 = virtualinvoke r15.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label01;

     label09:
        $r5 = r14;

        $r3 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.LayoutNode layoutNode>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode getParent$ui_release()>();

        if $r4 == null goto label10;

        $r22 = virtualinvoke $r4.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        goto label11;

     label10:
        $r22 = null;

     label11:
        virtualinvoke $r5.<androidx.compose.ui.node.NodeCoordinator: void setWrappedBy$ui_release(androidx.compose.ui.node.NodeCoordinator)>($r22);

        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeCoordinator outerCoordinator> = r14;

        return;
    }

    public final void attach()
    {
        androidx.compose.ui.node.NodeChain r0, r1;
        androidx.compose.ui.Modifier$Node r2, r3;
        boolean $z2;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 = r0;

        r3 = virtualinvoke r1.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label1:
        if r3 == null goto label3;

        r2 = r3;

        $z2 = virtualinvoke r2.<androidx.compose.ui.Modifier$Node: boolean isAttached()>();

        if $z2 != 0 goto label2;

        virtualinvoke r2.<androidx.compose.ui.Modifier$Node: void attach$ui_release()>();

     label2:
        r3 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label1;

     label3:
        return;
    }

    public final java.util.List getModifierInfo()
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.runtime.collection.MutableVector r1, r2, r5, $r6, $r7, r24;
        androidx.compose.ui.Modifier$Node r3, $r10, r22;
        androidx.compose.ui.node.NodeCoordinator r4, $r11;
        androidx.compose.ui.layout.ModifierInfo[] $r8;
        java.util.List $r9, $r20;
        androidx.compose.ui.layout.ModifierInfo $r12, r25;
        java.lang.Object[] $r13;
        java.lang.Object $r14;
        androidx.compose.ui.Modifier $r15;
        androidx.compose.ui.layout.LayoutCoordinates $r16;
        androidx.compose.ui.node.OwnedLayer $r17;
        java.lang.IllegalArgumentException $r18;
        java.lang.String $r19, r23;
        int i0, i1, i2, i3;
        boolean z5;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r6 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.runtime.collection.MutableVector current>;

        if $r6 != null goto label1;

        $r20 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r20;

     label1:
        r1 = $r6;

        i0 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        $r7 = new androidx.compose.runtime.collection.MutableVector;

        $r8 = newarray (androidx.compose.ui.layout.ModifierInfo)[i0];

        specialinvoke $r7.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r8, 0);

        r2 = $r7;

        i1 = 0;

        r22 = virtualinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label2:
        if r22 == null goto label4;

        $r10 = virtualinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getTail$ui_release()>();

        if r22 == $r10 goto label4;

        r3 = r22;

        $r11 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.node.NodeCoordinator getCoordinator$ui_release()>();

        if $r11 != null goto label3;

        r23 = "Required value was null.";

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke r23.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label3:
        r4 = $r11;

        r5 = r2;

        $r12 = new androidx.compose.ui.layout.ModifierInfo;

        r24 = r1;

        i2 = i1;

        i1 = i2 + 1;

        i3 = i2;

        $r13 = virtualinvoke r24.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r14 = $r13[i3];

        $r15 = (androidx.compose.ui.Modifier) $r14;

        $r16 = (androidx.compose.ui.layout.LayoutCoordinates) r4;

        $r17 = virtualinvoke r4.<androidx.compose.ui.node.NodeCoordinator: androidx.compose.ui.node.OwnedLayer getLayer()>();

        specialinvoke $r12.<androidx.compose.ui.layout.ModifierInfo: void <init>(androidx.compose.ui.Modifier,androidx.compose.ui.layout.LayoutCoordinates,java.lang.Object)>($r15, $r16, $r17);

        r25 = $r12;

        z5 = 0;

        virtualinvoke r5.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>(r25);

        r22 = virtualinvoke r22.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label2;

     label4:
        $r9 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.util.List asMutableList()>();

        return $r9;
    }

    public final void detach$ui_release()
    {
        androidx.compose.ui.node.NodeChain r0, r1;
        androidx.compose.ui.Modifier$Node r2, r3;
        boolean $z2;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 = r0;

        r3 = virtualinvoke r1.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getTail$ui_release()>();

     label1:
        if r3 == null goto label3;

        r2 = r3;

        $z2 = virtualinvoke r2.<androidx.compose.ui.Modifier$Node: boolean isAttached()>();

        if $z2 == 0 goto label2;

        virtualinvoke r2.<androidx.compose.ui.Modifier$Node: void detach$ui_release()>();

     label2:
        r3 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label1;

     label3:
        return;
    }

    private final androidx.compose.ui.node.NodeChain$Differ getDiffer(androidx.compose.ui.Modifier$Node, androidx.compose.runtime.collection.MutableVector, androidx.compose.runtime.collection.MutableVector)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node r1;
        androidx.compose.runtime.collection.MutableVector r2, r3;
        androidx.compose.ui.node.NodeChain$Differ r4, $r5, r6, r7, $r8, r9, r10;
        int $i0, $i1;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.Modifier$Node;

        r2 := @parameter1: androidx.compose.runtime.collection.MutableVector;

        r3 := @parameter2: androidx.compose.runtime.collection.MutableVector;

        r4 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Differ cachedDiffer>;

        if r4 != null goto label1;

        $r5 = new androidx.compose.ui.node.NodeChain$Differ;

        $i1 = virtualinvoke r1.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        specialinvoke $r5.<androidx.compose.ui.node.NodeChain$Differ: void <init>(androidx.compose.ui.node.NodeChain,androidx.compose.ui.Modifier$Node,int,androidx.compose.runtime.collection.MutableVector,androidx.compose.runtime.collection.MutableVector)>(r0, r1, $i1, r2, r3);

        r6 = $r5;

        r7 = r6;

        r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Differ cachedDiffer> = r7;

        $r8 = r6;

        goto label2;

     label1:
        r9 = r4;

        r10 = r9;

        virtualinvoke r10.<androidx.compose.ui.node.NodeChain$Differ: void setNode(androidx.compose.ui.Modifier$Node)>(r1);

        $i0 = virtualinvoke r1.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        virtualinvoke r10.<androidx.compose.ui.node.NodeChain$Differ: void setAggregateChildKindSet(int)>($i0);

        virtualinvoke r10.<androidx.compose.ui.node.NodeChain$Differ: void setBefore(androidx.compose.runtime.collection.MutableVector)>(r2);

        virtualinvoke r10.<androidx.compose.ui.node.NodeChain$Differ: void setAfter(androidx.compose.runtime.collection.MutableVector)>(r3);

        $r8 = r9;

     label2:
        return $r8;
    }

    private final void structuralUpdate(androidx.compose.runtime.collection.MutableVector, int, androidx.compose.runtime.collection.MutableVector, int, androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.runtime.collection.MutableVector r1, r2;
        int i0, i1;
        androidx.compose.ui.Modifier$Node r3;
        androidx.compose.ui.node.NodeChain$Differ $r4;
        androidx.compose.ui.node.DiffCallback $r5;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.runtime.collection.MutableVector;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.compose.runtime.collection.MutableVector;

        i1 := @parameter3: int;

        r3 := @parameter4: androidx.compose.ui.Modifier$Node;

        $r4 = specialinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Differ getDiffer(androidx.compose.ui.Modifier$Node,androidx.compose.runtime.collection.MutableVector,androidx.compose.runtime.collection.MutableVector)>(r3, r1, r2);

        $r5 = (androidx.compose.ui.node.DiffCallback) $r4;

        staticinvoke <androidx.compose.ui.node.MyersDiffKt: void executeDiff(int,int,androidx.compose.ui.node.DiffCallback)>(i0, i1, $r5);

        return;
    }

    private final androidx.compose.ui.Modifier$Node replaceNode(androidx.compose.ui.Modifier$Node, androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node r1, r2, r3, r4;
        androidx.compose.ui.node.NodeCoordinator $r5;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.Modifier$Node;

        r2 := @parameter1: androidx.compose.ui.Modifier$Node;

        r3 = virtualinvoke r1.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if r3 == null goto label1;

        virtualinvoke r2.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>(r3);

        virtualinvoke r3.<androidx.compose.ui.Modifier$Node: void setChild$ui_release(androidx.compose.ui.Modifier$Node)>(r2);

        virtualinvoke r1.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>(null);

     label1:
        r4 = virtualinvoke r1.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        if r4 == null goto label2;

        virtualinvoke r2.<androidx.compose.ui.Modifier$Node: void setChild$ui_release(androidx.compose.ui.Modifier$Node)>(r4);

        virtualinvoke r4.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>(r2);

        virtualinvoke r1.<androidx.compose.ui.Modifier$Node: void setChild$ui_release(androidx.compose.ui.Modifier$Node)>(null);

     label2:
        $r5 = virtualinvoke r1.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.node.NodeCoordinator getCoordinator$ui_release()>();

        virtualinvoke r2.<androidx.compose.ui.Modifier$Node: void updateCoordinator$ui_release(androidx.compose.ui.node.NodeCoordinator)>($r5);

        return r2;
    }

    private final androidx.compose.ui.Modifier$Node disposeAndRemoveNode(androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node r1, $r2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.Modifier$Node;

        $z0 = virtualinvoke r1.<androidx.compose.ui.Modifier$Node: boolean isAttached()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<androidx.compose.ui.Modifier$Node: void detach$ui_release()>();

     label1:
        $r2 = specialinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node removeNode(androidx.compose.ui.Modifier$Node)>(r1);

        return $r2;
    }

    private final androidx.compose.ui.Modifier$Node removeNode(androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node r1, r2, r3;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.Modifier$Node;

        r2 = virtualinvoke r1.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        r3 = virtualinvoke r1.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if r2 == null goto label1;

        virtualinvoke r2.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>(r3);

        virtualinvoke r1.<androidx.compose.ui.Modifier$Node: void setChild$ui_release(androidx.compose.ui.Modifier$Node)>(null);

     label1:
        if r3 == null goto label2;

        virtualinvoke r3.<androidx.compose.ui.Modifier$Node: void setChild$ui_release(androidx.compose.ui.Modifier$Node)>(r2);

        virtualinvoke r1.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>(null);

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r2);

        return r2;
    }

    private final androidx.compose.ui.Modifier$Node createAndInsertNodeAsParent(androidx.compose.ui.Modifier$Element, androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Element r1;
        androidx.compose.ui.Modifier$Node r2, r3, r4, r5, $r7, $r9;
        boolean $z1;
        androidx.compose.ui.node.BackwardsCompatNode $r6;
        androidx.compose.ui.node.ModifierNodeElement $r8;
        int $i0;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.Modifier$Element;

        r2 := @parameter1: androidx.compose.ui.Modifier$Node;

        $z1 = r1 instanceof androidx.compose.ui.node.ModifierNodeElement;

        if $z1 == 0 goto label1;

        $r8 = (androidx.compose.ui.node.ModifierNodeElement) r1;

        r4 = virtualinvoke $r8.<androidx.compose.ui.node.ModifierNodeElement: androidx.compose.ui.Modifier$Node create()>();

        r5 = r4;

        $i0 = staticinvoke <androidx.compose.ui.node.NodeKindKt: int calculateNodeKindSetFrom(androidx.compose.ui.Modifier$Node)>(r5);

        virtualinvoke r5.<androidx.compose.ui.Modifier$Node: void setKindSet$ui_release(int)>($i0);

        $r9 = r4;

        goto label2;

     label1:
        $r6 = new androidx.compose.ui.node.BackwardsCompatNode;

        specialinvoke $r6.<androidx.compose.ui.node.BackwardsCompatNode: void <init>(androidx.compose.ui.Modifier$Element)>(r1);

        $r9 = (androidx.compose.ui.Modifier$Node) $r6;

     label2:
        r3 = $r9;

        $r7 = specialinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node insertParent(androidx.compose.ui.Modifier$Node,androidx.compose.ui.Modifier$Node)>(r3, r2);

        return $r7;
    }

    private final androidx.compose.ui.Modifier$Node insertParent(androidx.compose.ui.Modifier$Node, androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Node r1, r2, r3;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.Modifier$Node;

        r2 := @parameter1: androidx.compose.ui.Modifier$Node;

        r3 = virtualinvoke r2.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        if r3 == null goto label1;

        virtualinvoke r3.<androidx.compose.ui.Modifier$Node: void setChild$ui_release(androidx.compose.ui.Modifier$Node)>(r1);

        virtualinvoke r1.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>(r3);

     label1:
        virtualinvoke r2.<androidx.compose.ui.Modifier$Node: void setParent$ui_release(androidx.compose.ui.Modifier$Node)>(r1);

        virtualinvoke r1.<androidx.compose.ui.Modifier$Node: void setChild$ui_release(androidx.compose.ui.Modifier$Node)>(r2);

        return r1;
    }

    private final androidx.compose.ui.Modifier$Node updateNodeAndReplaceIfNeeded(androidx.compose.ui.Modifier$Element, androidx.compose.ui.Modifier$Element, androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain r0;
        androidx.compose.ui.Modifier$Element r1, r2;
        androidx.compose.ui.Modifier$Node r3, r4, $r10, r11;
        boolean $z0, $z1, $z2;
        androidx.compose.ui.node.BackwardsCompatNode $r5;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7, r9;
        androidx.compose.ui.node.ModifierNodeElement $r8;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: androidx.compose.ui.Modifier$Element;

        r2 := @parameter1: androidx.compose.ui.Modifier$Element;

        r3 := @parameter2: androidx.compose.ui.Modifier$Node;

        $z0 = r1 instanceof androidx.compose.ui.node.ModifierNodeElement;

        if $z0 == 0 goto label1;

        $z2 = r2 instanceof androidx.compose.ui.node.ModifierNodeElement;

        if $z2 != 0 goto label3;

     label1:
        $z1 = r3 instanceof androidx.compose.ui.node.BackwardsCompatNode;

        if $z1 != 0 goto label2;

        r9 = "Check failed.";

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        $r5 = (androidx.compose.ui.node.BackwardsCompatNode) r3;

        virtualinvoke $r5.<androidx.compose.ui.node.BackwardsCompatNode: void setElement(androidx.compose.ui.Modifier$Element)>(r2);

        return r3;

     label3:
        $r8 = (androidx.compose.ui.node.ModifierNodeElement) r2;

        r4 = staticinvoke <androidx.compose.ui.node.NodeChainKt: androidx.compose.ui.Modifier$Node access$updateUnsafe(androidx.compose.ui.node.ModifierNodeElement,androidx.compose.ui.Modifier$Node)>($r8, r3);

        if r4 == r3 goto label4;

        virtualinvoke r3.<androidx.compose.ui.Modifier$Node: void detach$ui_release()>();

        $r10 = specialinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node replaceNode(androidx.compose.ui.Modifier$Node,androidx.compose.ui.Modifier$Node)>(r3, r4);

        goto label5;

     label4:
        $r10 = r4;

     label5:
        r11 = $r10;

        return r11;
    }

    public final java.lang.Object firstFromHead-aLcG6gQ$ui_release(int, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeChain r0, r2, r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node r5, r6, r7, r10;
        boolean $z7, $z8;
        java.lang.Object $r8;
        java.lang.Boolean $r9;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        i0 := @parameter0: int;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = r0;

        r3 = r2;

        i1 = i0;

        $i2 = staticinvoke <androidx.compose.ui.node.NodeChain: int access$getAggregateChildKindSet(androidx.compose.ui.node.NodeChain)>(r3);

        $i3 = $i2 & i1;

        if $i3 == 0 goto label3;

        r4 = r3;

        r10 = virtualinvoke r4.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label1:
        if r10 == null goto label3;

        r5 = (androidx.compose.ui.Modifier$Node) r10;

        $i4 = virtualinvoke r5.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label2;

        r6 = (androidx.compose.ui.Modifier$Node) r5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(3, "T");

        $z7 = r6 instanceof java.lang.Object;

        if $z7 == 0 goto label2;

        r7 = r6;

        $r8 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r7);

        $r9 = (java.lang.Boolean) $r8;

        $z8 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z8 == 0 goto label2;

        return r7;

     label2:
        $i6 = virtualinvoke r5.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i7 = $i6 & i1;

        if $i7 == 0 goto label3;

        r10 = virtualinvoke r10.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label1;

     label3:
        return null;
    }

    public final void headToTail-aLcG6gQ$ui_release(int, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeChain r0, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node r4, r5, r7;
        boolean $z5;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        i0 := @parameter0: int;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = r0;

        i1 = i0;

        $i2 = staticinvoke <androidx.compose.ui.node.NodeChain: int access$getAggregateChildKindSet(androidx.compose.ui.node.NodeChain)>(r2);

        $i3 = $i2 & i1;

        if $i3 == 0 goto label3;

        r3 = r2;

        r7 = virtualinvoke r3.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label1:
        if r7 == null goto label3;

        r4 = (androidx.compose.ui.Modifier$Node) r7;

        $i4 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label2;

        r5 = (androidx.compose.ui.Modifier$Node) r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(3, "T");

        $z5 = r5 instanceof java.lang.Object;

        if $z5 == 0 goto label2;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r5);

     label2:
        $i6 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i7 = $i6 & i1;

        if $i7 == 0 goto label3;

        r7 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label1;

     label3:
        return;
    }

    public final void headToTail$ui_release(int, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeChain r0, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node r3, r5;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        i0 := @parameter0: int;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $i1 = staticinvoke <androidx.compose.ui.node.NodeChain: int access$getAggregateChildKindSet(androidx.compose.ui.node.NodeChain)>(r0);

        $i2 = $i1 & i0;

        if $i2 != 0 goto label1;

        return;

     label1:
        r2 = r0;

        r5 = virtualinvoke r2.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label2:
        if r5 == null goto label5;

        r3 = r5;

        $i3 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i4 = $i3 & i0;

        if $i4 == 0 goto label3;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

     label3:
        $i5 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i6 = $i5 & i0;

        if $i6 != 0 goto label4;

        return;

     label4:
        r5 = virtualinvoke r5.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label2;

     label5:
        return;
    }

    public final void headToTail$ui_release(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeChain r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node r3;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r3 = virtualinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label1:
        if r3 == null goto label2;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        r3 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label1;

     label2:
        return;
    }

    public final void headToTailExclusive$ui_release(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeChain r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node $r2, r4;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r4 = virtualinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label1:
        if r4 == null goto label2;

        $r2 = virtualinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getTail$ui_release()>();

        if r4 == $r2 goto label2;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r4);

        r4 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label1;

     label2:
        return;
    }

    public final void tailToHead-aLcG6gQ$ui_release(int, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeChain r0, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node r4, r5, r7;
        boolean $z5;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        i0 := @parameter0: int;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = r0;

        i1 = i0;

        $i2 = staticinvoke <androidx.compose.ui.node.NodeChain: int access$getAggregateChildKindSet(androidx.compose.ui.node.NodeChain)>(r2);

        $i3 = $i2 & i1;

        if $i3 == 0 goto label3;

        r3 = r2;

        r7 = virtualinvoke r3.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getTail$ui_release()>();

     label1:
        if r7 == null goto label3;

        r4 = (androidx.compose.ui.Modifier$Node) r7;

        $i4 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label2;

        r5 = (androidx.compose.ui.Modifier$Node) r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(3, "T");

        $z5 = r5 instanceof java.lang.Object;

        if $z5 == 0 goto label2;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r5);

     label2:
        r7 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label1;

     label3:
        return;
    }

    public final void tailToHead$ui_release(int, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeChain r0, r2;
        int i0, $i1, $i2, $i3, $i4;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node r3, r5;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        i0 := @parameter0: int;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $i1 = staticinvoke <androidx.compose.ui.node.NodeChain: int access$getAggregateChildKindSet(androidx.compose.ui.node.NodeChain)>(r0);

        $i2 = $i1 & i0;

        if $i2 != 0 goto label1;

        return;

     label1:
        r2 = r0;

        r5 = virtualinvoke r2.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getTail$ui_release()>();

     label2:
        if r5 == null goto label4;

        r3 = r5;

        $i3 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i4 = $i3 & i0;

        if $i4 == 0 goto label3;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

     label3:
        r5 = virtualinvoke r5.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label2;

     label4:
        return;
    }

    public final void tailToHead$ui_release(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.NodeChain r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.Modifier$Node r3;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r3 = virtualinvoke r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getTail$ui_release()>();

     label1:
        if r3 == null goto label2;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r3);

        r3 = virtualinvoke r3.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label1;

     label2:
        return;
    }

    public final java.lang.Object tail-H91voCI$ui_release(int)
    {
        androidx.compose.ui.node.NodeChain r0, r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        androidx.compose.ui.Modifier$Node r4, r5, r6, r7;
        boolean $z7;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        i0 := @parameter0: int;

        r1 = r0;

        r2 = r1;

        i1 = i0;

        $i2 = staticinvoke <androidx.compose.ui.node.NodeChain: int access$getAggregateChildKindSet(androidx.compose.ui.node.NodeChain)>(r2);

        $i3 = $i2 & i1;

        if $i3 == 0 goto label3;

        r3 = r2;

        r7 = virtualinvoke r3.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getTail$ui_release()>();

     label1:
        if r7 == null goto label3;

        r4 = (androidx.compose.ui.Modifier$Node) r7;

        $i4 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label2;

        r5 = (androidx.compose.ui.Modifier$Node) r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(3, "T");

        $z7 = r5 instanceof java.lang.Object;

        if $z7 == 0 goto label2;

        r6 = r5;

        return r6;

     label2:
        r7 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        goto label1;

     label3:
        return null;
    }

    public final java.lang.Object head-H91voCI$ui_release(int)
    {
        androidx.compose.ui.node.NodeChain r0, r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        androidx.compose.ui.Modifier$Node r4, r5, r6, r7;
        boolean $z7;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        i0 := @parameter0: int;

        r1 = r0;

        r2 = r1;

        i1 = i0;

        $i2 = staticinvoke <androidx.compose.ui.node.NodeChain: int access$getAggregateChildKindSet(androidx.compose.ui.node.NodeChain)>(r2);

        $i3 = $i2 & i1;

        if $i3 == 0 goto label3;

        r3 = r2;

        r7 = virtualinvoke r3.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label1:
        if r7 == null goto label3;

        r4 = (androidx.compose.ui.Modifier$Node) r7;

        $i4 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i5 = $i4 & i1;

        if $i5 == 0 goto label2;

        r5 = (androidx.compose.ui.Modifier$Node) r4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void reifiedOperationMarker(int,java.lang.String)>(3, "T");

        $z7 = r5 instanceof java.lang.Object;

        if $z7 == 0 goto label2;

        r6 = r5;

        return r6;

     label2:
        $i6 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: int getAggregateChildKindSet$ui_release()>();

        $i7 = $i6 & i1;

        if $i7 == 0 goto label3;

        r7 = virtualinvoke r7.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label1;

     label3:
        return null;
    }

    public final boolean has-H91voCI$ui_release(int)
    {
        androidx.compose.ui.node.NodeChain r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<androidx.compose.ui.node.NodeChain: int getAggregateChildKindSet()>();

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        androidx.compose.ui.node.NodeChain r0, r3;
        java.lang.StringBuilder r1, $r5;
        androidx.compose.ui.Modifier$Node r4, $r7, $r8, $r9, $r12, $r13, r17;
        java.lang.String $r10, $r18;

        r0 := @this: androidx.compose.ui.node.NodeChain;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r1 = $r5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r8 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node head>;

        $r7 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>;

        if $r8 != $r7 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label4;

     label1:
        r3 = r0;

        r17 = virtualinvoke r3.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getHead$ui_release()>();

     label2:
        if r17 == null goto label4;

        $r9 = virtualinvoke r3.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node getTail$ui_release()>();

        if r17 == $r9 goto label4;

        r4 = r17;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r4.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        $r13 = r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node tail>;

        if $r12 != $r13 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label4;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        r17 = virtualinvoke r17.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getChild$ui_release()>();

        goto label2;

     label4:
        $r18 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "StringBuilder().apply(builderAction).toString()");

        return $r18;
    }

    public static final androidx.compose.ui.Modifier$Node access$createAndInsertNodeAsParent(androidx.compose.ui.node.NodeChain, androidx.compose.ui.Modifier$Element, androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain $r0;
        androidx.compose.ui.Modifier$Element r1;
        androidx.compose.ui.Modifier$Node r2, $r3;

        $r0 := @parameter0: androidx.compose.ui.node.NodeChain;

        r1 := @parameter1: androidx.compose.ui.Modifier$Element;

        r2 := @parameter2: androidx.compose.ui.Modifier$Node;

        $r3 = specialinvoke $r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node createAndInsertNodeAsParent(androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>(r1, r2);

        return $r3;
    }

    public static final androidx.compose.ui.node.NodeChain$Logger access$getLogger$p(androidx.compose.ui.node.NodeChain)
    {
        androidx.compose.ui.node.NodeChain $r0;
        androidx.compose.ui.node.NodeChain$Logger $r1;

        $r0 := @parameter0: androidx.compose.ui.node.NodeChain;

        $r1 = $r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger logger>;

        return $r1;
    }

    public static final androidx.compose.ui.Modifier$Node access$disposeAndRemoveNode(androidx.compose.ui.node.NodeChain, androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain $r0;
        androidx.compose.ui.Modifier$Node r1, $r2;

        $r0 := @parameter0: androidx.compose.ui.node.NodeChain;

        r1 := @parameter1: androidx.compose.ui.Modifier$Node;

        $r2 = specialinvoke $r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node disposeAndRemoveNode(androidx.compose.ui.Modifier$Node)>(r1);

        return $r2;
    }

    public static final androidx.compose.ui.Modifier$Node access$updateNodeAndReplaceIfNeeded(androidx.compose.ui.node.NodeChain, androidx.compose.ui.Modifier$Element, androidx.compose.ui.Modifier$Element, androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain $r0;
        androidx.compose.ui.Modifier$Element r1, r2;
        androidx.compose.ui.Modifier$Node r3, $r4;

        $r0 := @parameter0: androidx.compose.ui.node.NodeChain;

        r1 := @parameter1: androidx.compose.ui.Modifier$Element;

        r2 := @parameter2: androidx.compose.ui.Modifier$Element;

        r3 := @parameter3: androidx.compose.ui.Modifier$Node;

        $r4 = specialinvoke $r0.<androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node updateNodeAndReplaceIfNeeded(androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>(r1, r2, r3);

        return $r4;
    }

    public static final int access$getAggregateChildKindSet(androidx.compose.ui.node.NodeChain)
    {
        androidx.compose.ui.node.NodeChain $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.ui.node.NodeChain;

        $i0 = specialinvoke $r0.<androidx.compose.ui.node.NodeChain: int getAggregateChildKindSet()>();

        return $i0;
    }

androidx.compose.ui.node.NodeChain$Differ
<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>
<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet>
<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector before>
<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector after>
<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.node.NodeChain this$0>
    public void <init>(androidx.compose.ui.node.NodeChain, androidx.compose.ui.Modifier$Node, int, androidx.compose.runtime.collection.MutableVector, androidx.compose.runtime.collection.MutableVector)
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        androidx.compose.ui.node.NodeChain r1;
        androidx.compose.ui.Modifier$Node r2;
        int i0;
        androidx.compose.runtime.collection.MutableVector r3, r4;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        r1 := @parameter0: androidx.compose.ui.node.NodeChain;

        r2 := @parameter1: androidx.compose.ui.Modifier$Node;

        i0 := @parameter2: int;

        r3 := @parameter3: androidx.compose.runtime.collection.MutableVector;

        r4 := @parameter4: androidx.compose.runtime.collection.MutableVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "node");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "before");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "after");

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.node.NodeChain this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node> = r2;

        r0.<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet> = i0;

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector before> = r3;

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector after> = r4;

        return;
    }

    public final androidx.compose.ui.Modifier$Node getNode()
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        androidx.compose.ui.Modifier$Node $r1;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        $r1 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        return $r1;
    }

    public final void setNode(androidx.compose.ui.Modifier$Node)
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        androidx.compose.ui.Modifier$Node r1;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        r1 := @parameter0: androidx.compose.ui.Modifier$Node;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node> = r1;

        return;
    }

    public final int getAggregateChildKindSet()
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        int $i0;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        $i0 = r0.<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet>;

        return $i0;
    }

    public final void setAggregateChildKindSet(int)
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        int i0;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        i0 := @parameter0: int;

        r0.<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet> = i0;

        return;
    }

    public final androidx.compose.runtime.collection.MutableVector getBefore()
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        androidx.compose.runtime.collection.MutableVector $r1;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        $r1 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector before>;

        return $r1;
    }

    public final void setBefore(androidx.compose.runtime.collection.MutableVector)
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        androidx.compose.runtime.collection.MutableVector r1;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        r1 := @parameter0: androidx.compose.runtime.collection.MutableVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector before> = r1;

        return;
    }

    public final androidx.compose.runtime.collection.MutableVector getAfter()
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        androidx.compose.runtime.collection.MutableVector $r1;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        $r1 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector after>;

        return $r1;
    }

    public final void setAfter(androidx.compose.runtime.collection.MutableVector)
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        androidx.compose.runtime.collection.MutableVector r1;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        r1 := @parameter0: androidx.compose.runtime.collection.MutableVector;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector after> = r1;

        return;
    }

    public boolean areItemsTheSame(int, int)
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        int i0, i1, $i2;
        java.lang.Object[] $r1, $r4;
        java.lang.Object $r2, $r5;
        androidx.compose.ui.Modifier$Element $r3, $r6;
        androidx.compose.runtime.collection.MutableVector r7, r8;
        boolean $z2;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector before>;

        $r1 = virtualinvoke r7.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r2 = $r1[i0];

        $r3 = (androidx.compose.ui.Modifier$Element) $r2;

        r8 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector after>;

        $r4 = virtualinvoke r8.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r5 = $r4[i1];

        $r6 = (androidx.compose.ui.Modifier$Element) $r5;

        $i2 = staticinvoke <androidx.compose.ui.node.NodeChainKt: int reuseActionForModifiers(androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element)>($r3, $r6);

        if $i2 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void insert(int, int)
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        androidx.compose.ui.Modifier$Node r1, $r7, $r10, $r11, $r14;
        androidx.compose.runtime.collection.MutableVector r2, $r16;
        androidx.compose.ui.node.NodeChain $r3, $r8;
        java.lang.Object[] $r4, $r12;
        java.lang.Object $r5, $r13;
        androidx.compose.ui.Modifier$Element $r6, $r15;
        androidx.compose.ui.node.NodeChain$Logger $r9;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        $r3 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.node.NodeChain this$0>;

        r2 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector after>;

        $r4 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r5 = $r4[i1];

        $r6 = (androidx.compose.ui.Modifier$Element) $r5;

        $r7 = staticinvoke <androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node access$createAndInsertNodeAsParent(androidx.compose.ui.node.NodeChain,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>($r3, $r6, r1);

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node> = $r7;

        $r8 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.node.NodeChain this$0>;

        $r9 = staticinvoke <androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger access$getLogger$p(androidx.compose.ui.node.NodeChain)>($r8);

        if $r9 == null goto label1;

        $r16 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector after>;

        $r12 = virtualinvoke $r16.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r13 = $r12[i1];

        $r15 = (androidx.compose.ui.Modifier$Element) $r13;

        $r14 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        interfaceinvoke $r9.<androidx.compose.ui.node.NodeChain$Logger: void nodeInserted(int,int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node,androidx.compose.ui.Modifier$Node)>(i0, i1, $r15, r1, $r14);

        goto label1;

     label1:
        $i2 = r0.<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet>;

        $r10 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        $i3 = virtualinvoke $r10.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i4 = $i2 | $i3;

        r0.<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet> = $i4;

        $r11 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        $i5 = r0.<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet>;

        virtualinvoke $r11.<androidx.compose.ui.Modifier$Node: void setAggregateChildKindSet$ui_release(int)>($i5);

        return;
    }

    public void remove(int)
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        int i0;
        androidx.compose.runtime.collection.MutableVector r1;
        androidx.compose.ui.Modifier$Node $r2, $r3, $r6, $r8, $r11;
        androidx.compose.ui.node.NodeChain $r4, $r7;
        androidx.compose.ui.node.NodeChain$Logger $r5;
        java.lang.Object[] $r9;
        java.lang.Object $r10;
        androidx.compose.ui.Modifier$Element $r12;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node> = $r3;

        $r4 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.node.NodeChain this$0>;

        $r5 = staticinvoke <androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger access$getLogger$p(androidx.compose.ui.node.NodeChain)>($r4);

        if $r5 == null goto label1;

        r1 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector before>;

        $r9 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r10 = $r9[i0];

        $r12 = (androidx.compose.ui.Modifier$Element) $r10;

        $r11 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        interfaceinvoke $r5.<androidx.compose.ui.node.NodeChain$Logger: void nodeRemoved(int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>(i0, $r12, $r11);

        goto label1;

     label1:
        $r7 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.node.NodeChain this$0>;

        $r6 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        $r8 = staticinvoke <androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node access$disposeAndRemoveNode(androidx.compose.ui.node.NodeChain,androidx.compose.ui.Modifier$Node)>($r7, $r6);

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node> = $r8;

        return;
    }

    public void same(int, int)
    {
        androidx.compose.ui.node.NodeChain$Differ r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        androidx.compose.ui.Modifier$Element r1, r18;
        androidx.compose.ui.Modifier$Node $r2, $r3, $r10, $r12, $r15, $r19, $r20, $r21;
        java.lang.Object[] $r4, $r6;
        java.lang.Object $r5, $r7;
        boolean $z1;
        androidx.compose.ui.node.NodeChain $r8, $r11, $r13;
        androidx.compose.ui.node.NodeChain$Logger $r9, $r14;
        androidx.compose.runtime.collection.MutableVector r16, $r17;

        r0 := @this: androidx.compose.ui.node.NodeChain$Differ;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.Modifier$Node: androidx.compose.ui.Modifier$Node getParent$ui_release()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node> = $r3;

        r16 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector before>;

        $r4 = virtualinvoke r16.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r5 = $r4[i0];

        r1 = (androidx.compose.ui.Modifier$Element) $r5;

        $r17 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.runtime.collection.MutableVector after>;

        $r6 = virtualinvoke $r17.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r7 = $r6[i1];

        r18 = (androidx.compose.ui.Modifier$Element) $r7;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, r18);

        if $z1 != 0 goto label2;

        $r19 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        $r11 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.node.NodeChain this$0>;

        $r12 = staticinvoke <androidx.compose.ui.node.NodeChain: androidx.compose.ui.Modifier$Node access$updateNodeAndReplaceIfNeeded(androidx.compose.ui.node.NodeChain,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>($r11, r1, r18, $r19);

        r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node> = $r12;

        $r13 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.node.NodeChain this$0>;

        $r14 = staticinvoke <androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger access$getLogger$p(androidx.compose.ui.node.NodeChain)>($r13);

        if $r14 == null goto label1;

        $r15 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        interfaceinvoke $r14.<androidx.compose.ui.node.NodeChain$Logger: void nodeUpdated(int,int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node,androidx.compose.ui.Modifier$Node)>(i0, i1, r1, r18, $r19, $r15);

        goto label3;

     label1:
        goto label3;

     label2:
        $r8 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.node.NodeChain this$0>;

        $r9 = staticinvoke <androidx.compose.ui.node.NodeChain: androidx.compose.ui.node.NodeChain$Logger access$getLogger$p(androidx.compose.ui.node.NodeChain)>($r8);

        if $r9 == null goto label3;

        $r10 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        interfaceinvoke $r9.<androidx.compose.ui.node.NodeChain$Logger: void nodeReused(int,int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>(i0, i1, r1, r18, $r10);

        goto label3;

     label3:
        $i2 = r0.<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet>;

        $r20 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        $i3 = virtualinvoke $r20.<androidx.compose.ui.Modifier$Node: int getKindSet$ui_release()>();

        $i4 = $i2 | $i3;

        r0.<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet> = $i4;

        $r21 = r0.<androidx.compose.ui.node.NodeChain$Differ: androidx.compose.ui.Modifier$Node node>;

        $i5 = r0.<androidx.compose.ui.node.NodeChain$Differ: int aggregateChildKindSet>;

        virtualinvoke $r21.<androidx.compose.ui.Modifier$Node: void setAggregateChildKindSet$ui_release(int)>($i5);

        return;
    }

androidx.compose.ui.node.NodeChain$Logger
<androidx.compose.ui.node.NodeChain$Logger: void linearDiffAborted(int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>
<androidx.compose.ui.node.NodeChain$Logger: void nodeUpdated(int,int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node,androidx.compose.ui.Modifier$Node)>
<androidx.compose.ui.node.NodeChain$Logger: void nodeReused(int,int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>
<androidx.compose.ui.node.NodeChain$Logger: void nodeInserted(int,int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node,androidx.compose.ui.Modifier$Node)>
<androidx.compose.ui.node.NodeChain$Logger: void nodeRemoved(int,androidx.compose.ui.Modifier$Element,androidx.compose.ui.Modifier$Node)>
