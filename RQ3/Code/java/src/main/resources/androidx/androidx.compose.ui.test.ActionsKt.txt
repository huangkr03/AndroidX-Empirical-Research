androidx.compose.ui.test.ActionsKt
    public static final androidx.compose.ui.test.SemanticsNodeInteraction performClick(androidx.compose.ui.test.SemanticsNodeInteraction)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r1;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <androidx.compose.ui.test.Actions_androidKt: androidx.compose.ui.test.SemanticsNodeInteraction performClickImpl(androidx.compose.ui.test.SemanticsNodeInteraction)>($r0);

        return $r1;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performScrollTo(androidx.compose.ui.test.SemanticsNodeInteraction)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        androidx.compose.ui.semantics.SemanticsNode $r1;
        androidx.compose.ui.test.TestContext $r2;
        androidx.compose.ui.test.TestOwner $r3;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Action performScrollTo() failed.");

        $r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        $r3 = virtualinvoke $r2.<androidx.compose.ui.test.TestContext: androidx.compose.ui.test.TestOwner getTestOwner$ui_test_release()>();

        staticinvoke <androidx.compose.ui.test.ActionsKt: void scrollToNode(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestOwner)>($r1, $r3);

        return $r0;
    }

    private static final void scrollToNode(androidx.compose.ui.semantics.SemanticsNode, androidx.compose.ui.test.TestOwner)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0, r2, $r9;
        androidx.compose.ui.test.TestOwner r1;
        androidx.compose.ui.geometry.Rect r3, r4, r22;
        long l0, $l1, $l2, $l3, $l4;
        kotlin.jvm.internal.Ref$FloatRef r5, r6, $r15, $r16;
        androidx.compose.ui.test.ActionsKt$scrollToNode$scrollableNode$1 $r7;
        kotlin.jvm.functions.Function1 $r8;
        androidx.compose.ui.layout.LayoutInfo $r10, $r12;
        androidx.compose.ui.layout.LayoutCoordinates $r11, $r13, r21;
        androidx.compose.ui.geometry.Offset$Companion $r14;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        boolean $z0, $z1, $z2;
        androidx.compose.ui.test.ActionsKt$scrollToNode$1 $r17;
        kotlin.jvm.functions.Function0 $r18;
        java.lang.AssertionError $r20;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        r1 := @parameter1: androidx.compose.ui.test.TestOwner;

        $r7 = <androidx.compose.ui.test.ActionsKt$scrollToNode$scrollableNode$1: androidx.compose.ui.test.ActionsKt$scrollToNode$scrollableNode$1 INSTANCE>;

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        $r9 = staticinvoke <androidx.compose.ui.test.UtilsKt: androidx.compose.ui.semantics.SemanticsNode findClosestParentNode$default(androidx.compose.ui.semantics.SemanticsNode,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r0, 0, $r8, 1, null);

        if $r9 != null goto label1;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("Semantic Node has no parent layout with a Scroll SemanticsAction");

        throw $r20;

     label1:
        r2 = $r9;

        $r10 = virtualinvoke r2.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r11 = interfaceinvoke $r10.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.layout.LayoutCoordinates getCoordinates()>();

        r3 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: androidx.compose.ui.geometry.Rect boundsInParent(androidx.compose.ui.layout.LayoutCoordinates)>($r11);

        $r12 = virtualinvoke r2.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r13 = interfaceinvoke $r12.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.layout.LayoutCoordinates getCoordinates()>();

        r21 = interfaceinvoke $r13.<androidx.compose.ui.layout.LayoutCoordinates: androidx.compose.ui.layout.LayoutCoordinates getParentLayoutCoordinates()>();

        if r21 == null goto label2;

        $l4 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: long positionInRoot(androidx.compose.ui.layout.LayoutCoordinates)>(r21);

        goto label3;

     label2:
        $r14 = <androidx.compose.ui.geometry.Offset: androidx.compose.ui.geometry.Offset$Companion Companion>;

        $l4 = virtualinvoke $r14.<androidx.compose.ui.geometry.Offset$Companion: long getZero-F1C5BW0()>();

     label3:
        l0 = $l4;

        r22 = virtualinvoke r3.<androidx.compose.ui.geometry.Rect: androidx.compose.ui.geometry.Rect translate-k-4lQ0M(long)>(l0);

        $l1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: long getPositionInRoot-F1C5BW0()>();

        $l2 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: long getSize-YbymL2g()>();

        $l3 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long toSize-ozmzZPI(long)>($l2);

        r4 = staticinvoke <androidx.compose.ui.geometry.RectKt: androidx.compose.ui.geometry.Rect Rect-tz77jQw(long,long)>($l1, $l3);

        $r15 = new kotlin.jvm.internal.Ref$FloatRef;

        specialinvoke $r15.<kotlin.jvm.internal.Ref$FloatRef: void <init>()>();

        r5 = $r15;

        $f0 = virtualinvoke r4.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        $f1 = virtualinvoke r22.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        $f2 = $f0 - $f1;

        $f3 = virtualinvoke r4.<androidx.compose.ui.geometry.Rect: float getRight()>();

        $f4 = virtualinvoke r22.<androidx.compose.ui.geometry.Rect: float getRight()>();

        $f5 = $f3 - $f4;

        $f6 = staticinvoke <androidx.compose.ui.test.ActionsKt: float scrollToNode$scrollDelta(float,float)>($f2, $f5);

        r5.<kotlin.jvm.internal.Ref$FloatRef: float element> = $f6;

        $z0 = staticinvoke <androidx.compose.ui.test.ActionsKt: boolean isReversedHorizontally(androidx.compose.ui.semantics.SemanticsNode)>(r2);

        if $z0 == 0 goto label4;

        $f18 = r5.<kotlin.jvm.internal.Ref$FloatRef: float element>;

        $f19 = neg $f18;

        r5.<kotlin.jvm.internal.Ref$FloatRef: float element> = $f19;

     label4:
        $z1 = staticinvoke <androidx.compose.ui.test.ActionsKt: boolean isRtl(androidx.compose.ui.semantics.SemanticsNode)>(r2);

        if $z1 == 0 goto label5;

        $f16 = r5.<kotlin.jvm.internal.Ref$FloatRef: float element>;

        $f17 = neg $f16;

        r5.<kotlin.jvm.internal.Ref$FloatRef: float element> = $f17;

     label5:
        $r16 = new kotlin.jvm.internal.Ref$FloatRef;

        specialinvoke $r16.<kotlin.jvm.internal.Ref$FloatRef: void <init>()>();

        r6 = $r16;

        $f7 = virtualinvoke r4.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $f8 = virtualinvoke r22.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $f9 = $f7 - $f8;

        $f10 = virtualinvoke r4.<androidx.compose.ui.geometry.Rect: float getBottom()>();

        $f11 = virtualinvoke r22.<androidx.compose.ui.geometry.Rect: float getBottom()>();

        $f12 = $f10 - $f11;

        $f13 = staticinvoke <androidx.compose.ui.test.ActionsKt: float scrollToNode$scrollDelta(float,float)>($f9, $f12);

        r6.<kotlin.jvm.internal.Ref$FloatRef: float element> = $f13;

        $z2 = staticinvoke <androidx.compose.ui.test.ActionsKt: boolean isReversedVertically(androidx.compose.ui.semantics.SemanticsNode)>(r2);

        if $z2 == 0 goto label6;

        $f14 = r6.<kotlin.jvm.internal.Ref$FloatRef: float element>;

        $f15 = neg $f14;

        r6.<kotlin.jvm.internal.Ref$FloatRef: float element> = $f15;

     label6:
        $r17 = new androidx.compose.ui.test.ActionsKt$scrollToNode$1;

        specialinvoke $r17.<androidx.compose.ui.test.ActionsKt$scrollToNode$1: void <init>(androidx.compose.ui.semantics.SemanticsNode,kotlin.jvm.internal.Ref$FloatRef,kotlin.jvm.internal.Ref$FloatRef)>(r2, r5, r6);

        $r18 = (kotlin.jvm.functions.Function0) $r17;

        interfaceinvoke r1.<androidx.compose.ui.test.TestOwner: java.lang.Object runOnUiThread(kotlin.jvm.functions.Function0)>($r18);

        return;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performScrollToIndex(androidx.compose.ui.test.SemanticsNodeInteraction, int)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        androidx.compose.ui.semantics.SemanticsNode $r6;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed: performScrollToIndex(");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>($r5);

        staticinvoke <androidx.compose.ui.test.ActionsKt: void scrollToIndex(androidx.compose.ui.semantics.SemanticsNode,int,androidx.compose.ui.test.SemanticsNodeInteraction)>($r6, i0, $r0);

        return $r0;
    }

    private static final void scrollToIndex(androidx.compose.ui.semantics.SemanticsNode, int, androidx.compose.ui.test.SemanticsNodeInteraction)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        int i0;
        androidx.compose.ui.test.SemanticsNodeInteraction r1;
        androidx.compose.ui.semantics.SemanticsPropertyKey[] r2;
        androidx.compose.ui.semantics.SemanticsActions $r3;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r4;
        androidx.compose.ui.test.ActionsKt$scrollToIndex$1 $r5;
        kotlin.jvm.functions.Function0 $r6, $r10;
        androidx.compose.ui.test.TestContext $r7;
        androidx.compose.ui.test.TestOwner $r8;
        androidx.compose.ui.test.ActionsKt$scrollToIndex$2 $r9;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        i0 := @parameter1: int;

        r1 := @parameter2: androidx.compose.ui.test.SemanticsNodeInteraction;

        r2 = newarray (androidx.compose.ui.semantics.SemanticsPropertyKey)[1];

        $r3 = <androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsActions INSTANCE>;

        $r4 = virtualinvoke $r3.<androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsPropertyKey getScrollToIndex()>();

        r2[0] = $r4;

        $r5 = new androidx.compose.ui.test.ActionsKt$scrollToIndex$1;

        specialinvoke $r5.<androidx.compose.ui.test.ActionsKt$scrollToIndex$1: void <init>(int)>(i0);

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        staticinvoke <androidx.compose.ui.test.ActionsKt: void requireSemantics(androidx.compose.ui.test.SemanticsNodeInteraction,androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.semantics.SemanticsPropertyKey[],kotlin.jvm.functions.Function0)>(r1, $r0, r2, $r6);

        $r7 = virtualinvoke r1.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        $r8 = virtualinvoke $r7.<androidx.compose.ui.test.TestContext: androidx.compose.ui.test.TestOwner getTestOwner$ui_test_release()>();

        $r9 = new androidx.compose.ui.test.ActionsKt$scrollToIndex$2;

        specialinvoke $r9.<androidx.compose.ui.test.ActionsKt$scrollToIndex$2: void <init>(androidx.compose.ui.semantics.SemanticsNode,int)>($r0, i0);

        $r10 = (kotlin.jvm.functions.Function0) $r9;

        interfaceinvoke $r8.<androidx.compose.ui.test.TestOwner: java.lang.Object runOnUiThread(kotlin.jvm.functions.Function0)>($r10);

        return;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performScrollToKey(androidx.compose.ui.test.SemanticsNodeInteraction, java.lang.Object)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        java.lang.Object r1, $r17, $r19;
        androidx.compose.ui.semantics.SemanticsNode r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r26, $r27, $r28, $r29;
        java.lang.String $r7, $r31, $r33;
        androidx.compose.ui.semantics.SemanticsProperties $r8, $r15;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r9, $r11, $r16;
        androidx.compose.ui.semantics.SemanticsActions $r10;
        androidx.compose.ui.test.ActionsKt$performScrollToKey$1 $r12;
        kotlin.jvm.functions.Function0 $r13, $r24;
        androidx.compose.ui.semantics.SemanticsConfiguration $r14;
        kotlin.jvm.functions.Function1 $r18;
        java.lang.Number $r20;
        androidx.compose.ui.test.TestContext $r21;
        androidx.compose.ui.test.TestOwner $r22;
        androidx.compose.ui.test.ActionsKt$performScrollToKey$3 $r23;
        java.lang.IllegalArgumentException $r30;
        androidx.compose.ui.semantics.SemanticsPropertyKey[] r32;
        int i0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed: performScrollToKey(\"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>($r7);

        r32 = newarray (androidx.compose.ui.semantics.SemanticsPropertyKey)[2];

        $r8 = <androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsProperties INSTANCE>;

        $r9 = virtualinvoke $r8.<androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsPropertyKey getIndexForKey()>();

        r32[0] = $r9;

        $r10 = <androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsActions INSTANCE>;

        $r11 = virtualinvoke $r10.<androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsPropertyKey getScrollToIndex()>();

        r32[1] = $r11;

        $r12 = new androidx.compose.ui.test.ActionsKt$performScrollToKey$1;

        specialinvoke $r12.<androidx.compose.ui.test.ActionsKt$performScrollToKey$1: void <init>(java.lang.Object)>(r1);

        $r13 = (kotlin.jvm.functions.Function0) $r12;

        staticinvoke <androidx.compose.ui.test.ActionsKt: void requireSemantics(androidx.compose.ui.test.SemanticsNodeInteraction,androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.semantics.SemanticsPropertyKey[],kotlin.jvm.functions.Function0)>($r0, r2, r32, $r13);

        $r14 = virtualinvoke r2.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $r15 = <androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsProperties INSTANCE>;

        $r16 = virtualinvoke $r15.<androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsPropertyKey getIndexForKey()>();

        $r17 = virtualinvoke $r14.<androidx.compose.ui.semantics.SemanticsConfiguration: java.lang.Object get(androidx.compose.ui.semantics.SemanticsPropertyKey)>($r16);

        $r18 = (kotlin.jvm.functions.Function1) $r17;

        $r19 = interfaceinvoke $r18.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        $r20 = (java.lang.Number) $r19;

        i0 = virtualinvoke $r20.<java.lang.Number: int intValue()>();

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to scroll to the item identified by \"");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", couldn\'t find the key.");

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = new java.lang.IllegalArgumentException;

        $r31 = virtualinvoke $r33.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label3:
        $r21 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        $r22 = virtualinvoke $r21.<androidx.compose.ui.test.TestContext: androidx.compose.ui.test.TestOwner getTestOwner$ui_test_release()>();

        $r23 = new androidx.compose.ui.test.ActionsKt$performScrollToKey$3;

        specialinvoke $r23.<androidx.compose.ui.test.ActionsKt$performScrollToKey$3: void <init>(androidx.compose.ui.semantics.SemanticsNode,int)>(r2, i0);

        $r24 = (kotlin.jvm.functions.Function0) $r23;

        interfaceinvoke $r22.<androidx.compose.ui.test.TestOwner: java.lang.Object runOnUiThread(kotlin.jvm.functions.Function0)>($r24);

        return $r0;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performScrollToNode(androidx.compose.ui.test.SemanticsNodeInteraction, androidx.compose.ui.test.SemanticsMatcher)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        androidx.compose.ui.test.SemanticsMatcher r1;
        kotlin.jvm.internal.Ref$ObjectRef r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r42, $r43, $r45, $r46, $r59, $r60, $r62, $r63, $r83, $r84, $r86, $r87;
        java.lang.String $r6, $r9, $r44, $r51, $r61, $r68, r82, $r85, $r88, r101;
        androidx.compose.ui.semantics.SemanticsNode $r10, $r14, $r16, $r19, $r21, $r24, $r29, $r32, $r40, $r50, $r55, $r57, $r67, $r72, r74, r78, r80, r81, $r89, r92, r97, r99, r100;
        java.lang.Object $r11, $r13, $r15, $r18, $r20, $r23, $r28, $r31, $r39, $r49, $r56, $r66, r77, $r79, $r91, r96, $r98;
        java.util.List $r12, $r93;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z11, $z15, $z17, z19, z20;
        androidx.compose.ui.semantics.ScrollAxisRange $r17, $r22, $r30, $r33, $r41, $r58, r102, r103;
        androidx.compose.ui.layout.LayoutInfo $r25, $r54, $r71;
        androidx.compose.ui.layout.LayoutCoordinates $r26;
        androidx.compose.ui.geometry.Rect $r27;
        androidx.compose.ui.test.TestContext $r34, $r52, $r69;
        androidx.compose.ui.test.TestOwner $r35, $r53, $r70;
        androidx.compose.ui.test.ActionsKt$performScrollToNode$3 $r36;
        kotlin.jvm.functions.Function0 $r37;
        java.lang.AssertionError $r47, $r64;
        androidx.compose.ui.test.SemanticsSelector $r48, $r65;
        java.lang.Iterable $r75, $r94;
        java.util.Iterator r76, r95;
        long l0;
        float $f0, f1, $f2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: androidx.compose.ui.test.SemanticsMatcher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "matcher");

        $r3 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r3.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r2 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed: performScrollToNode(");

        $r6 = virtualinvoke r1.<androidx.compose.ui.test.SemanticsMatcher: java.lang.String getDescription()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>($r9);

        r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r10;

        $r11 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        r74 = (androidx.compose.ui.semantics.SemanticsNode) $r11;

        $r12 = virtualinvoke r74.<androidx.compose.ui.semantics.SemanticsNode: java.util.List getChildren()>();

        $r75 = (java.lang.Iterable) $r12;

        r76 = interfaceinvoke $r75.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r76.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        r77 = interfaceinvoke r76.<java.util.Iterator: java.lang.Object next()>();

        r78 = (androidx.compose.ui.semantics.SemanticsNode) r77;

        $r71 = virtualinvoke r78.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $z7 = interfaceinvoke $r71.<androidx.compose.ui.layout.LayoutInfo: boolean isPlaced()>();

        if $z7 == 0 goto label02;

        $r72 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.SemanticsNode findMatchInHierarchy(androidx.compose.ui.test.SemanticsMatcher,androidx.compose.ui.semantics.SemanticsNode)>(r1, r78);

        if $r72 == null goto label02;

        $z11 = 1;

        goto label03;

     label02:
        $z11 = 0;

     label03:
        if $z11 == 0 goto label01;

        $r79 = r77;

        goto label05;

     label04:
        $r79 = null;

     label05:
        r80 = (androidx.compose.ui.semantics.SemanticsNode) $r79;

        if r80 == null goto label06;

        r81 = r80;

        $r69 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        $r70 = virtualinvoke $r69.<androidx.compose.ui.test.TestContext: androidx.compose.ui.test.TestOwner getTestOwner$ui_test_release()>();

        staticinvoke <androidx.compose.ui.test.ActionsKt: void scrollToNode(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestOwner)>(r81, $r70);

        return $r0;

     label06:
        $r13 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r14 = (androidx.compose.ui.semantics.SemanticsNode) $r13;

        $z1 = staticinvoke <androidx.compose.ui.test.ActionsKt: boolean isLazyList(androidx.compose.ui.semantics.SemanticsNode)>($r14);

        if $z1 != 0 goto label07;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No node found that matches ");

        $r61 = virtualinvoke r1.<androidx.compose.ui.test.SemanticsMatcher: java.lang.String getDescription()>();

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in scrollable container");

        r82 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        $r64 = new java.lang.AssertionError;

        $r65 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector getSelector$ui_test_release()>();

        $r66 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r67 = (androidx.compose.ui.semantics.SemanticsNode) $r66;

        $r68 = staticinvoke <androidx.compose.ui.test.ErrorMessagesKt: java.lang.String buildGeneralErrorMessage(java.lang.String,androidx.compose.ui.test.SemanticsSelector,androidx.compose.ui.semantics.SemanticsNode)>(r82, $r65, $r67);

        specialinvoke $r64.<java.lang.AssertionError: void <init>(java.lang.Object)>($r68);

        throw $r64;

     label07:
        $r15 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r16 = (androidx.compose.ui.semantics.SemanticsNode) $r15;

        $r17 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.ScrollAxisRange getHorizontalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)>($r16);

        $z2 = staticinvoke <androidx.compose.ui.test.ActionsKt: boolean isAtStart(androidx.compose.ui.semantics.ScrollAxisRange)>($r17);

        if $z2 == 0 goto label08;

        $r56 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r57 = (androidx.compose.ui.semantics.SemanticsNode) $r56;

        $r58 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.ScrollAxisRange getVerticalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)>($r57);

        $z6 = staticinvoke <androidx.compose.ui.test.ActionsKt: boolean isAtStart(androidx.compose.ui.semantics.ScrollAxisRange)>($r58);

        if $z6 != 0 goto label09;

     label08:
        $r18 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r19 = (androidx.compose.ui.semantics.SemanticsNode) $r18;

        staticinvoke <androidx.compose.ui.test.ActionsKt: void scrollToIndex(androidx.compose.ui.semantics.SemanticsNode,int,androidx.compose.ui.test.SemanticsNodeInteraction)>($r19, 0, $r0);

     label09:
        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed: performScrollToNode(");

        $r85 = virtualinvoke r1.<androidx.compose.ui.test.SemanticsMatcher: java.lang.String getDescription()>();

        $r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        $r89 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>($r88);

        r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r89;

        $r91 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        r92 = (androidx.compose.ui.semantics.SemanticsNode) $r91;

        $r93 = virtualinvoke r92.<androidx.compose.ui.semantics.SemanticsNode: java.util.List getChildren()>();

        $r94 = (java.lang.Iterable) $r93;

        r95 = interfaceinvoke $r94.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z15 = interfaceinvoke r95.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label13;

        r96 = interfaceinvoke r95.<java.util.Iterator: java.lang.Object next()>();

        r97 = (androidx.compose.ui.semantics.SemanticsNode) r96;

        $r54 = virtualinvoke r97.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $z5 = interfaceinvoke $r54.<androidx.compose.ui.layout.LayoutInfo: boolean isPlaced()>();

        if $z5 == 0 goto label11;

        $r55 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.SemanticsNode findMatchInHierarchy(androidx.compose.ui.test.SemanticsMatcher,androidx.compose.ui.semantics.SemanticsNode)>(r1, r97);

        if $r55 == null goto label11;

        $z17 = 1;

        goto label12;

     label11:
        $z17 = 0;

     label12:
        if $z17 == 0 goto label10;

        $r98 = r96;

        goto label14;

     label13:
        $r98 = null;

     label14:
        r99 = (androidx.compose.ui.semantics.SemanticsNode) $r98;

        if r99 == null goto label15;

        r100 = r99;

        $r52 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        $r53 = virtualinvoke $r52.<androidx.compose.ui.test.TestContext: androidx.compose.ui.test.TestOwner getTestOwner$ui_test_release()>();

        staticinvoke <androidx.compose.ui.test.ActionsKt: void scrollToNode(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestOwner)>(r100, $r53);

        return $r0;

     label15:
        $r20 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r21 = (androidx.compose.ui.semantics.SemanticsNode) $r20;

        $r22 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.ScrollAxisRange getHorizontalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)>($r21);

        $z3 = staticinvoke <androidx.compose.ui.test.ActionsKt: boolean isAtEnd(androidx.compose.ui.semantics.ScrollAxisRange)>($r22);

        if $z3 == 0 goto label16;

        $r39 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r40 = (androidx.compose.ui.semantics.SemanticsNode) $r39;

        $r41 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.ScrollAxisRange getVerticalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)>($r40);

        $z4 = staticinvoke <androidx.compose.ui.test.ActionsKt: boolean isAtEnd(androidx.compose.ui.semantics.ScrollAxisRange)>($r41);

        if $z4 == 0 goto label16;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No node found that matches ");

        $r44 = virtualinvoke r1.<androidx.compose.ui.test.SemanticsMatcher: java.lang.String getDescription()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in scrollable container");

        r101 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r47 = new java.lang.AssertionError;

        $r48 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector getSelector$ui_test_release()>();

        $r49 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r50 = (androidx.compose.ui.semantics.SemanticsNode) $r49;

        $r51 = staticinvoke <androidx.compose.ui.test.ErrorMessagesKt: java.lang.String buildGeneralErrorMessage(java.lang.String,androidx.compose.ui.test.SemanticsSelector,androidx.compose.ui.semantics.SemanticsNode)>(r101, $r48, $r50);

        specialinvoke $r47.<java.lang.AssertionError: void <init>(java.lang.Object)>($r51);

        throw $r47;

     label16:
        $r23 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r24 = (androidx.compose.ui.semantics.SemanticsNode) $r23;

        $r25 = virtualinvoke $r24.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r26 = interfaceinvoke $r25.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.layout.LayoutCoordinates getCoordinates()>();

        $r27 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: androidx.compose.ui.geometry.Rect boundsInParent(androidx.compose.ui.layout.LayoutCoordinates)>($r26);

        l0 = virtualinvoke $r27.<androidx.compose.ui.geometry.Rect: long getSize-NH-jbRc()>();

        $r28 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r29 = (androidx.compose.ui.semantics.SemanticsNode) $r28;

        $r30 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.ScrollAxisRange getHorizontalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)>($r29);

        if $r30 == null goto label17;

        r102 = $r30;

        z19 = 0;

        $f0 = staticinvoke <androidx.compose.ui.geometry.Size: float getWidth-impl(long)>(l0);

        goto label18;

     label17:
        $f0 = 0.0F;

     label18:
        f1 = $f0;

        $r31 = r2.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r32 = (androidx.compose.ui.semantics.SemanticsNode) $r31;

        $r33 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.ScrollAxisRange getVerticalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)>($r32);

        if $r33 == null goto label19;

        r103 = $r33;

        z20 = 0;

        $f2 = staticinvoke <androidx.compose.ui.geometry.Size: float getHeight-impl(long)>(l0);

        goto label20;

     label19:
        $f2 = 0.0F;

     label20:
        $r34 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        $r35 = virtualinvoke $r34.<androidx.compose.ui.test.TestContext: androidx.compose.ui.test.TestOwner getTestOwner$ui_test_release()>();

        $r36 = new androidx.compose.ui.test.ActionsKt$performScrollToNode$3;

        specialinvoke $r36.<androidx.compose.ui.test.ActionsKt$performScrollToNode$3: void <init>(kotlin.jvm.internal.Ref$ObjectRef,float,float)>(r2, f1, $f2);

        $r37 = (kotlin.jvm.functions.Function0) $r36;

        interfaceinvoke $r35.<androidx.compose.ui.test.TestOwner: java.lang.Object runOnUiThread(kotlin.jvm.functions.Function0)>($r37);

        goto label09;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performGesture(androidx.compose.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.semantics.SemanticsNode r2;
        java.lang.Throwable r4, $r8;
        androidx.compose.ui.test.GestureScope $r5;
        androidx.compose.ui.test.TestContext $r6;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to perform a gesture.");

        $r5 = new androidx.compose.ui.test.GestureScope;

        $r6 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        specialinvoke $r5.<androidx.compose.ui.test.GestureScope: void <init>(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestContext)>(r2, $r6);

     label1:
        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

     label2:
        virtualinvoke $r5.<androidx.compose.ui.test.GestureScope: void dispose$ui_test_release()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

     label4:
        virtualinvoke $r5.<androidx.compose.ui.test.GestureScope: void dispose$ui_test_release()>();

        throw r4;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performTouchInput(androidx.compose.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.semantics.SemanticsNode r2;
        java.lang.Throwable r4, $r7;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r5;
        androidx.compose.ui.test.TestContext $r6;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to inject touch input.");

        $r5 = new androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r6 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        specialinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void <init>(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestContext)>(r2, $r6);

     label1:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void touch(kotlin.jvm.functions.Function1)>(r1);

     label2:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        goto label5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

     label4:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        throw r4;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performMouseInput(androidx.compose.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.semantics.SemanticsNode r2;
        java.lang.Throwable r4, $r7;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r5;
        androidx.compose.ui.test.TestContext $r6;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to inject mouse input.");

        $r5 = new androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r6 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        specialinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void <init>(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestContext)>(r2, $r6);

     label1:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void mouse(kotlin.jvm.functions.Function1)>(r1);

     label2:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        goto label5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

     label4:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        throw r4;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performKeyInput(androidx.compose.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.semantics.SemanticsNode r2;
        java.lang.Throwable r4, $r7;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r5;
        androidx.compose.ui.test.TestContext $r6;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to inject key input.");

        $r5 = new androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r6 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        specialinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void <init>(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestContext)>(r2, $r6);

     label1:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void key(kotlin.jvm.functions.Function1)>(r1);

     label2:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        goto label5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

     label4:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        throw r4;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performMultiModalInput(androidx.compose.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.semantics.SemanticsNode r2;
        java.lang.Throwable r4, $r8;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r5;
        androidx.compose.ui.test.TestContext $r6;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to inject multi-modal input.");

        $r5 = new androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r6 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        specialinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void <init>(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestContext)>(r2, $r6);

     label1:
        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

     label2:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

     label4:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        throw r4;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static final void performSemanticsAction(androidx.compose.ui.test.SemanticsNodeInteraction, androidx.compose.ui.semantics.SemanticsPropertyKey, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        androidx.compose.ui.semantics.SemanticsPropertyKey r1;
        kotlin.jvm.functions.Function1 r2;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: androidx.compose.ui.semantics.SemanticsPropertyKey;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "invocation");

        staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.test.SemanticsNodeInteraction performSemanticsAction(androidx.compose.ui.test.SemanticsNodeInteraction,androidx.compose.ui.semantics.SemanticsPropertyKey,kotlin.jvm.functions.Function1)>($r0, r1, r2);

        return;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performSemanticsAction(androidx.compose.ui.test.SemanticsNodeInteraction, androidx.compose.ui.semantics.SemanticsPropertyKey, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        androidx.compose.ui.semantics.SemanticsPropertyKey r1;
        kotlin.jvm.functions.Function1 r2;
        androidx.compose.ui.semantics.SemanticsNode r3;
        androidx.compose.ui.semantics.SemanticsPropertyKey[] r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r7, $r10;
        androidx.compose.ui.test.ActionsKt$performSemanticsAction$1 $r11;
        kotlin.jvm.functions.Function0 $r12, $r16;
        androidx.compose.ui.test.TestContext $r13;
        androidx.compose.ui.test.TestOwner $r14;
        androidx.compose.ui.test.ActionsKt$performSemanticsAction$2 $r15;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: androidx.compose.ui.semantics.SemanticsPropertyKey;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "invocation");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to perform ");

        $r7 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsPropertyKey: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" action.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>($r10);

        r4 = newarray (androidx.compose.ui.semantics.SemanticsPropertyKey)[1];

        r4[0] = r1;

        $r11 = new androidx.compose.ui.test.ActionsKt$performSemanticsAction$1;

        specialinvoke $r11.<androidx.compose.ui.test.ActionsKt$performSemanticsAction$1: void <init>(androidx.compose.ui.semantics.SemanticsPropertyKey)>(r1);

        $r12 = (kotlin.jvm.functions.Function0) $r11;

        staticinvoke <androidx.compose.ui.test.ActionsKt: void requireSemantics(androidx.compose.ui.test.SemanticsNodeInteraction,androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.semantics.SemanticsPropertyKey[],kotlin.jvm.functions.Function0)>($r0, r3, r4, $r12);

        $r13 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        $r14 = virtualinvoke $r13.<androidx.compose.ui.test.TestContext: androidx.compose.ui.test.TestOwner getTestOwner$ui_test_release()>();

        $r15 = new androidx.compose.ui.test.ActionsKt$performSemanticsAction$2;

        specialinvoke $r15.<androidx.compose.ui.test.ActionsKt$performSemanticsAction$2: void <init>(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.semantics.SemanticsPropertyKey,kotlin.jvm.functions.Function1)>(r3, r1, r2);

        $r16 = (kotlin.jvm.functions.Function0) $r15;

        interfaceinvoke $r14.<androidx.compose.ui.test.TestOwner: java.lang.Object runOnUiThread(kotlin.jvm.functions.Function0)>($r16);

        return $r0;
    }

    public static final void performSemanticsAction(androidx.compose.ui.test.SemanticsNodeInteraction, androidx.compose.ui.semantics.SemanticsPropertyKey)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        androidx.compose.ui.semantics.SemanticsPropertyKey r1;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: androidx.compose.ui.semantics.SemanticsPropertyKey;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.test.SemanticsNodeInteraction performSemanticsAction(androidx.compose.ui.test.SemanticsNodeInteraction,androidx.compose.ui.semantics.SemanticsPropertyKey)>($r0, r1);

        return;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performSemanticsAction(androidx.compose.ui.test.SemanticsNodeInteraction, androidx.compose.ui.semantics.SemanticsPropertyKey)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0, $r4;
        androidx.compose.ui.semantics.SemanticsPropertyKey r1;
        androidx.compose.ui.test.ActionsKt$performSemanticsAction$3 $r2;
        kotlin.jvm.functions.Function1 $r3;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: androidx.compose.ui.semantics.SemanticsPropertyKey;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "key");

        $r2 = <androidx.compose.ui.test.ActionsKt$performSemanticsAction$3: androidx.compose.ui.test.ActionsKt$performSemanticsAction$3 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function1) $r2;

        $r4 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.test.SemanticsNodeInteraction performSemanticsAction(androidx.compose.ui.test.SemanticsNodeInteraction,androidx.compose.ui.semantics.SemanticsPropertyKey,kotlin.jvm.functions.Function1)>($r0, r1, $r3);

        return $r4;
    }

    public static final androidx.compose.ui.test.SemanticsNodeInteraction performRotaryScrollInput(androidx.compose.ui.test.SemanticsNodeInteraction, kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.semantics.SemanticsNode r2;
        java.lang.Throwable r4, $r7;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r5;
        androidx.compose.ui.test.TestContext $r6;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.semantics.SemanticsNode fetchSemanticsNode(java.lang.String)>("Failed to send rotary Event");

        $r5 = new androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r6 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.TestContext getTestContext$ui_test_release()>();

        specialinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void <init>(androidx.compose.ui.semantics.SemanticsNode,androidx.compose.ui.test.TestContext)>(r2, $r6);

     label1:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void rotary(kotlin.jvm.functions.Function1)>(r1);

     label2:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        goto label5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

     label4:
        virtualinvoke $r5.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: void dispose$ui_test_release()>();

        throw r4;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static final boolean isLazyList(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.semantics.SemanticsConfiguration $r1, $r4;
        androidx.compose.ui.semantics.SemanticsActions $r2, $r5;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r3, $r6;
        boolean $z0, $z1, $z2;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $r2 = <androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsActions INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsPropertyKey getScrollBy()>();

        $z0 = virtualinvoke $r1.<androidx.compose.ui.semantics.SemanticsConfiguration: boolean contains(androidx.compose.ui.semantics.SemanticsPropertyKey)>($r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $r5 = <androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsActions INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.semantics.SemanticsActions: androidx.compose.ui.semantics.SemanticsPropertyKey getScrollToIndex()>();

        $z1 = virtualinvoke $r4.<androidx.compose.ui.semantics.SemanticsConfiguration: boolean contains(androidx.compose.ui.semantics.SemanticsPropertyKey)>($r6);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static final androidx.compose.ui.semantics.ScrollAxisRange getHorizontalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.semantics.SemanticsConfiguration $r1;
        androidx.compose.ui.semantics.SemanticsProperties $r2;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r3;
        java.lang.Object $r4;
        androidx.compose.ui.semantics.ScrollAxisRange $r5;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $r2 = <androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsProperties INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsPropertyKey getHorizontalScrollAxisRange()>();

        $r4 = staticinvoke <androidx.compose.ui.semantics.SemanticsConfigurationKt: java.lang.Object getOrNull(androidx.compose.ui.semantics.SemanticsConfiguration,androidx.compose.ui.semantics.SemanticsPropertyKey)>($r1, $r3);

        $r5 = (androidx.compose.ui.semantics.ScrollAxisRange) $r4;

        return $r5;
    }

    private static final androidx.compose.ui.semantics.ScrollAxisRange getVerticalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.semantics.SemanticsConfiguration $r1;
        androidx.compose.ui.semantics.SemanticsProperties $r2;
        androidx.compose.ui.semantics.SemanticsPropertyKey $r3;
        java.lang.Object $r4;
        androidx.compose.ui.semantics.ScrollAxisRange $r5;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $r2 = <androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsProperties INSTANCE>;

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsProperties: androidx.compose.ui.semantics.SemanticsPropertyKey getVerticalScrollAxisRange()>();

        $r4 = staticinvoke <androidx.compose.ui.semantics.SemanticsConfigurationKt: java.lang.Object getOrNull(androidx.compose.ui.semantics.SemanticsConfiguration,androidx.compose.ui.semantics.SemanticsPropertyKey)>($r1, $r3);

        $r5 = (androidx.compose.ui.semantics.ScrollAxisRange) $r4;

        return $r5;
    }

    private static final boolean isReversedHorizontally(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.semantics.ScrollAxisRange $r1;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.ScrollAxisRange getHorizontalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.semantics.ScrollAxisRange: boolean getReverseScrolling()>();

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final boolean isReversedVertically(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.semantics.ScrollAxisRange $r1;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.ScrollAxisRange getVerticalScrollAxis(androidx.compose.ui.semantics.SemanticsNode)>($r0);

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<androidx.compose.ui.semantics.ScrollAxisRange: boolean getReverseScrolling()>();

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final boolean isAtStart(androidx.compose.ui.semantics.ScrollAxisRange)
    {
        androidx.compose.ui.semantics.ScrollAxisRange $r0, r1;
        kotlin.jvm.functions.Function0 $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0;
        byte $b0;
        boolean $z1;

        $r0 := @parameter0: androidx.compose.ui.semantics.ScrollAxisRange;

        if $r0 == null goto label3;

        r1 = $r0;

        $r2 = virtualinvoke $r0.<androidx.compose.ui.semantics.ScrollAxisRange: kotlin.jvm.functions.Function0 getValue()>();

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $b0 = $f0 cmpg 0.0F;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        goto label4;

     label3:
        $z1 = 1;

     label4:
        return $z1;
    }

    private static final boolean isAtEnd(androidx.compose.ui.semantics.ScrollAxisRange)
    {
        androidx.compose.ui.semantics.ScrollAxisRange $r0, r1;
        kotlin.jvm.functions.Function0 $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.Number $r4, $r7;
        float $f0, $f1;
        byte $b0;
        boolean $z1;

        $r0 := @parameter0: androidx.compose.ui.semantics.ScrollAxisRange;

        if $r0 == null goto label3;

        r1 = $r0;

        $r2 = virtualinvoke $r0.<androidx.compose.ui.semantics.ScrollAxisRange: kotlin.jvm.functions.Function0 getValue()>();

        $r3 = interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        $r5 = virtualinvoke $r0.<androidx.compose.ui.semantics.ScrollAxisRange: kotlin.jvm.functions.Function0 getMaxValue()>();

        $r6 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r7 = (java.lang.Number) $r6;

        $f1 = virtualinvoke $r7.<java.lang.Number: float floatValue()>();

        $b0 = $f0 cmpg $f1;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        goto label4;

     label3:
        $z1 = 1;

     label4:
        return $z1;
    }

    private static final boolean isRtl(androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.semantics.SemanticsNode $r0;
        androidx.compose.ui.layout.LayoutInfo $r1;
        androidx.compose.ui.unit.LayoutDirection $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        $r1 = virtualinvoke $r0.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r2 = interfaceinvoke $r1.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        $r3 = <androidx.compose.ui.unit.LayoutDirection: androidx.compose.ui.unit.LayoutDirection Rtl>;

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final void requireSemantics(androidx.compose.ui.test.SemanticsNodeInteraction, androidx.compose.ui.semantics.SemanticsNode, androidx.compose.ui.semantics.SemanticsPropertyKey[], kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.test.SemanticsNodeInteraction $r0;
        androidx.compose.ui.semantics.SemanticsNode r1;
        androidx.compose.ui.semantics.SemanticsPropertyKey[] r2;
        kotlin.jvm.functions.Function0 r3;
        java.util.List r4;
        java.util.Collection r6, $r10;
        int i0, i1;
        androidx.compose.ui.semantics.SemanticsPropertyKey r7, r8;
        java.util.ArrayList $r9;
        boolean $z3, $z4, $z6, $z7;
        java.lang.StringBuilder $r11, $r14, $r15, $r20, $r21;
        java.lang.Object $r12;
        java.lang.String $r13, $r19, $r24, $r26;
        androidx.compose.ui.test.ActionsKt$requireSemantics$msg$1 $r16;
        kotlin.jvm.functions.Function1 $r17;
        java.lang.Iterable $r18;
        java.lang.AssertionError $r22;
        androidx.compose.ui.test.SemanticsSelector $r23;
        androidx.compose.ui.semantics.SemanticsConfiguration $r25;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsNodeInteraction;

        r1 := @parameter1: androidx.compose.ui.semantics.SemanticsNode;

        r2 := @parameter2: androidx.compose.ui.semantics.SemanticsPropertyKey[];

        r3 := @parameter3: kotlin.jvm.functions.Function0;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r6 = (java.util.Collection) $r9;

        i1 = 0;

        i0 = lengthof r2;

     label1:
        if i1 >= i0 goto label5;

        r7 = r2[i1];

        r8 = r7;

        $r25 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.semantics.SemanticsConfiguration getConfig()>();

        $z4 = virtualinvoke $r25.<androidx.compose.ui.semantics.SemanticsConfiguration: boolean contains(androidx.compose.ui.semantics.SemanticsPropertyKey)>(r8);

        if $z4 != 0 goto label2;

        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        if $z6 == 0 goto label4;

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>(r7);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        r4 = (java.util.List) r6;

        $r10 = (java.util.Collection) r4;

        $z3 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z3 != 0 goto label6;

        $z7 = 1;

        goto label7;

     label6:
        $z7 = 0;

     label7:
        if $z7 == 0 goto label8;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = interfaceinvoke r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r13 = (java.lang.String) $r12;

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", the node is missing [");

        $r18 = (java.lang.Iterable) r4;

        $r16 = <androidx.compose.ui.test.ActionsKt$requireSemantics$msg$1: androidx.compose.ui.test.ActionsKt$requireSemantics$msg$1 INSTANCE>;

        $r17 = (kotlin.jvm.functions.Function1) $r16;

        $r19 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r18, null, null, null, 0, null, $r17, 31, null);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = new java.lang.AssertionError;

        $r23 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsNodeInteraction: androidx.compose.ui.test.SemanticsSelector getSelector$ui_test_release()>();

        $r24 = staticinvoke <androidx.compose.ui.test.ErrorMessagesKt: java.lang.String buildGeneralErrorMessage(java.lang.String,androidx.compose.ui.test.SemanticsSelector,androidx.compose.ui.semantics.SemanticsNode)>($r26, $r23, r1);

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>($r24);

        throw $r22;

     label8:
        return;
    }

    private static final androidx.compose.ui.semantics.SemanticsNode findMatchInDescendants(androidx.compose.ui.test.SemanticsMatcher, androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.test.SemanticsMatcher $r0;
        androidx.compose.ui.semantics.SemanticsNode r1, r5, $r7, $r9, r10;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.util.List $r6;
        boolean $z3, $z4, $z5;
        androidx.compose.ui.layout.LayoutInfo $r8;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsMatcher;

        r1 := @parameter1: androidx.compose.ui.semantics.SemanticsNode;

        $r6 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: java.util.List getChildren()>();

        $r2 = (java.lang.Iterable) $r6;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.compose.ui.semantics.SemanticsNode) r4;

        $r8 = virtualinvoke r5.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $z4 = interfaceinvoke $r8.<androidx.compose.ui.layout.LayoutInfo: boolean isPlaced()>();

        if $z4 == 0 goto label2;

        $r9 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.SemanticsNode findMatchInHierarchy(androidx.compose.ui.test.SemanticsMatcher,androidx.compose.ui.semantics.SemanticsNode)>($r0, r5);

        if $r9 == null goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        if $z5 == 0 goto label1;

        r10 = (androidx.compose.ui.semantics.SemanticsNode) r4;

        return r10;

     label4:
        $r7 = (androidx.compose.ui.semantics.SemanticsNode) null;

        return $r7;
    }

    private static final androidx.compose.ui.semantics.SemanticsNode findMatchInHierarchy(androidx.compose.ui.test.SemanticsMatcher, androidx.compose.ui.semantics.SemanticsNode)
    {
        androidx.compose.ui.test.SemanticsMatcher $r0;
        androidx.compose.ui.semantics.SemanticsNode r1, r6, $r9, $r10;
        java.lang.Iterable $r3;
        java.util.Iterator r4;
        java.lang.Object r5, $r11;
        boolean $z3, $z4, $z5, $z6;
        java.util.List $r7;
        androidx.compose.ui.layout.LayoutInfo $r8;

        $r0 := @parameter0: androidx.compose.ui.test.SemanticsMatcher;

        r1 := @parameter1: androidx.compose.ui.semantics.SemanticsNode;

        $z3 = virtualinvoke $r0.<androidx.compose.ui.test.SemanticsMatcher: boolean matches(androidx.compose.ui.semantics.SemanticsNode)>(r1);

        if $z3 == 0 goto label1;

        $r10 = r1;

        goto label7;

     label1:
        $r7 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: java.util.List getChildren()>();

        $r3 = (java.lang.Iterable) $r7;

        r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.compose.ui.semantics.SemanticsNode) r5;

        $r8 = virtualinvoke r6.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $z5 = interfaceinvoke $r8.<androidx.compose.ui.layout.LayoutInfo: boolean isPlaced()>();

        if $z5 == 0 goto label3;

        $r9 = staticinvoke <androidx.compose.ui.test.ActionsKt: androidx.compose.ui.semantics.SemanticsNode findMatchInHierarchy(androidx.compose.ui.test.SemanticsMatcher,androidx.compose.ui.semantics.SemanticsNode)>($r0, r6);

        if $r9 == null goto label3;

        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        if $z6 == 0 goto label2;

        $r11 = r5;

        goto label6;

     label5:
        $r11 = null;

     label6:
        $r10 = (androidx.compose.ui.semantics.SemanticsNode) $r11;

     label7:
        return $r10;
    }

    private static final float scrollToNode$scrollDelta(float, float)
    {
        float f0, f1, $f2, $f3, $f4, $f5, $f6;
        byte $b0, $b1;
        boolean $z0;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = staticinvoke <java.lang.Math: float signum(float)>(f0);

        $f3 = staticinvoke <java.lang.Math: float signum(float)>(f1);

        $b0 = $f2 cmpg $f3;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label4;

        $f4 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $f5 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        $b1 = $f4 cmpg $f5;

        if $b1 >= 0 goto label3;

        $f6 = f0;

        goto label5;

     label3:
        $f6 = f1;

        goto label5;

     label4:
        $f6 = 0.0F;

     label5:
        return $f6;
    }

