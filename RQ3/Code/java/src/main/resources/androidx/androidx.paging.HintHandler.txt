androidx.paging.HintHandler
<androidx.paging.HintHandler: androidx.paging.HintHandler$State state>
    public void <init>()
    {
        androidx.paging.HintHandler r0;
        androidx.paging.HintHandler$State $r1;

        r0 := @this: androidx.paging.HintHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new androidx.paging.HintHandler$State;

        specialinvoke $r1.<androidx.paging.HintHandler$State: void <init>(androidx.paging.HintHandler)>(r0);

        r0.<androidx.paging.HintHandler: androidx.paging.HintHandler$State state> = $r1;

        return;
    }

    public final androidx.paging.ViewportHint$Access getLastAccessHint()
    {
        androidx.paging.HintHandler r0;
        androidx.paging.HintHandler$State $r1;
        androidx.paging.ViewportHint$Access $r2;

        r0 := @this: androidx.paging.HintHandler;

        $r1 = r0.<androidx.paging.HintHandler: androidx.paging.HintHandler$State state>;

        $r2 = virtualinvoke $r1.<androidx.paging.HintHandler$State: androidx.paging.ViewportHint$Access getLastAccessHint()>();

        return $r2;
    }

    public final kotlinx.coroutines.flow.Flow hintFor(androidx.paging.LoadType)
    {
        androidx.paging.HintHandler r0;
        androidx.paging.LoadType r1, r2;
        int i0, $i1;
        int[] $r3;
        androidx.paging.HintHandler$State $r4, $r5;
        java.lang.IllegalArgumentException $r6;
        kotlinx.coroutines.flow.Flow $r7;

        r0 := @this: androidx.paging.HintHandler;

        r1 := @parameter0: androidx.paging.LoadType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "loadType");

        r2 = r1;

        $r3 = <androidx.paging.HintHandler$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r2.<androidx.paging.LoadType: int ordinal()>();

        i0 = $r3[$i1];

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r5 = r0.<androidx.paging.HintHandler: androidx.paging.HintHandler$State state>;

        $r7 = virtualinvoke $r5.<androidx.paging.HintHandler$State: kotlinx.coroutines.flow.Flow getPrependFlow()>();

        goto label4;

     label2:
        $r4 = r0.<androidx.paging.HintHandler: androidx.paging.HintHandler$State state>;

        $r7 = virtualinvoke $r4.<androidx.paging.HintHandler$State: kotlinx.coroutines.flow.Flow getAppendFlow()>();

        goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid load type for hints");

        throw $r6;

     label4:
        return $r7;
    }

    public final void forceSetHint(androidx.paging.LoadType, androidx.paging.ViewportHint)
    {
        androidx.paging.HintHandler r0;
        androidx.paging.LoadType r1, $r3, $r10;
        androidx.paging.ViewportHint r2;
        boolean z0, z1, $z3, z4;
        androidx.paging.HintHandler$forceSetHint$2 $r4;
        androidx.paging.HintHandler$State $r5;
        kotlin.jvm.functions.Function2 $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8, r11;
        java.lang.Throwable $r9;

        r0 := @this: androidx.paging.HintHandler;

        r1 := @parameter0: androidx.paging.LoadType;

        r2 := @parameter1: androidx.paging.ViewportHint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "loadType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "viewportHint");

        $r3 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        if r1 == $r3 goto label1;

        $r10 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        if r1 != $r10 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label4;

        r11 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("invalid load type for reset: ", r1);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        $r9 = (java.lang.Throwable) $r7;

        throw $r9;

     label4:
        $r5 = r0.<androidx.paging.HintHandler: androidx.paging.HintHandler$State state>;

        $r4 = new androidx.paging.HintHandler$forceSetHint$2;

        specialinvoke $r4.<androidx.paging.HintHandler$forceSetHint$2: void <init>(androidx.paging.LoadType,androidx.paging.ViewportHint)>(r1, r2);

        $r6 = (kotlin.jvm.functions.Function2) $r4;

        virtualinvoke $r5.<androidx.paging.HintHandler$State: void modify(androidx.paging.ViewportHint$Access,kotlin.jvm.functions.Function2)>(null, $r6);

        return;
    }

    public final void processHint(androidx.paging.ViewportHint)
    {
        androidx.paging.HintHandler r0;
        androidx.paging.ViewportHint r1;
        boolean $z0;
        androidx.paging.HintHandler$processHint$1 $r2;
        androidx.paging.HintHandler$State $r3;
        kotlin.jvm.functions.Function2 $r4;
        androidx.paging.ViewportHint$Access $r5;

        r0 := @this: androidx.paging.HintHandler;

        r1 := @parameter0: androidx.paging.ViewportHint;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "viewportHint");

        $r3 = r0.<androidx.paging.HintHandler: androidx.paging.HintHandler$State state>;

        $z0 = r1 instanceof androidx.paging.ViewportHint$Access;

        if $z0 == 0 goto label1;

        $r5 = (androidx.paging.ViewportHint$Access) r1;

        goto label2;

     label1:
        $r5 = null;

     label2:
        $r2 = new androidx.paging.HintHandler$processHint$1;

        specialinvoke $r2.<androidx.paging.HintHandler$processHint$1: void <init>(androidx.paging.ViewportHint)>(r1);

        $r4 = (kotlin.jvm.functions.Function2) $r2;

        virtualinvoke $r3.<androidx.paging.HintHandler$State: void modify(androidx.paging.ViewportHint$Access,kotlin.jvm.functions.Function2)>($r5, $r4);

        return;
    }

androidx.paging.HintHandler$forceSetHint$2
<androidx.paging.HintHandler$forceSetHint$2: androidx.paging.LoadType $loadType>
<androidx.paging.HintHandler$forceSetHint$2: androidx.paging.ViewportHint $viewportHint>
    void <init>(androidx.paging.LoadType, androidx.paging.ViewportHint)
    {
        androidx.paging.HintHandler$forceSetHint$2 r0;
        androidx.paging.LoadType $r1;
        androidx.paging.ViewportHint $r2;

        r0 := @this: androidx.paging.HintHandler$forceSetHint$2;

        $r1 := @parameter0: androidx.paging.LoadType;

        $r2 := @parameter1: androidx.paging.ViewportHint;

        r0.<androidx.paging.HintHandler$forceSetHint$2: androidx.paging.LoadType $loadType> = $r1;

        r0.<androidx.paging.HintHandler$forceSetHint$2: androidx.paging.ViewportHint $viewportHint> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.paging.HintHandler$HintFlow, androidx.paging.HintHandler$HintFlow)
    {
        androidx.paging.HintHandler$forceSetHint$2 r0;
        androidx.paging.HintHandler$HintFlow r1, r2;
        androidx.paging.LoadType $r3, $r4;
        androidx.paging.ViewportHint $r5, $r6;

        r0 := @this: androidx.paging.HintHandler$forceSetHint$2;

        r1 := @parameter0: androidx.paging.HintHandler$HintFlow;

        r2 := @parameter1: androidx.paging.HintHandler$HintFlow;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "prependHint");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "appendHint");

        $r4 = r0.<androidx.paging.HintHandler$forceSetHint$2: androidx.paging.LoadType $loadType>;

        $r3 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<androidx.paging.HintHandler$forceSetHint$2: androidx.paging.ViewportHint $viewportHint>;

        virtualinvoke r1.<androidx.paging.HintHandler$HintFlow: void setValue(androidx.paging.ViewportHint)>($r6);

        goto label2;

     label1:
        $r5 = r0.<androidx.paging.HintHandler$forceSetHint$2: androidx.paging.ViewportHint $viewportHint>;

        virtualinvoke r2.<androidx.paging.HintHandler$HintFlow: void setValue(androidx.paging.ViewportHint)>($r5);

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.paging.HintHandler$forceSetHint$2 r0;
        java.lang.Object r1, r2;
        androidx.paging.HintHandler$HintFlow $r3, $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.paging.HintHandler$forceSetHint$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.paging.HintHandler$HintFlow) r1;

        $r3 = (androidx.paging.HintHandler$HintFlow) r2;

        virtualinvoke r0.<androidx.paging.HintHandler$forceSetHint$2: void invoke(androidx.paging.HintHandler$HintFlow,androidx.paging.HintHandler$HintFlow)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

androidx.paging.HintHandler$HintFlow
<androidx.paging.HintHandler$HintFlow: androidx.paging.ViewportHint value>
<androidx.paging.HintHandler$HintFlow: kotlinx.coroutines.flow.MutableSharedFlow _flow>
<androidx.paging.HintHandler$HintFlow: androidx.paging.HintHandler this$0>
    public void <init>(androidx.paging.HintHandler)
    {
        androidx.paging.HintHandler$HintFlow r0;
        androidx.paging.HintHandler r1;
        kotlinx.coroutines.channels.BufferOverflow $r2;
        kotlinx.coroutines.flow.MutableSharedFlow $r3;

        r0 := @this: androidx.paging.HintHandler$HintFlow;

        r1 := @parameter0: androidx.paging.HintHandler;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "this$0");

        r0.<androidx.paging.HintHandler$HintFlow: androidx.paging.HintHandler this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow DROP_OLDEST>;

        $r3 = staticinvoke <kotlinx.coroutines.flow.SharedFlowKt: kotlinx.coroutines.flow.MutableSharedFlow MutableSharedFlow$default(int,int,kotlinx.coroutines.channels.BufferOverflow,int,java.lang.Object)>(1, 0, $r2, 2, null);

        r0.<androidx.paging.HintHandler$HintFlow: kotlinx.coroutines.flow.MutableSharedFlow _flow> = $r3;

        return;
    }

    public final androidx.paging.ViewportHint getValue()
    {
        androidx.paging.HintHandler$HintFlow r0;
        androidx.paging.ViewportHint $r1;

        r0 := @this: androidx.paging.HintHandler$HintFlow;

        $r1 = r0.<androidx.paging.HintHandler$HintFlow: androidx.paging.ViewportHint value>;

        return $r1;
    }

    public final void setValue(androidx.paging.ViewportHint)
    {
        androidx.paging.HintHandler$HintFlow r0;
        androidx.paging.ViewportHint r1;
        kotlinx.coroutines.flow.MutableSharedFlow $r2;

        r0 := @this: androidx.paging.HintHandler$HintFlow;

        r1 := @parameter0: androidx.paging.ViewportHint;

        r0.<androidx.paging.HintHandler$HintFlow: androidx.paging.ViewportHint value> = r1;

        if r1 == null goto label1;

        $r2 = r0.<androidx.paging.HintHandler$HintFlow: kotlinx.coroutines.flow.MutableSharedFlow _flow>;

        interfaceinvoke $r2.<kotlinx.coroutines.flow.MutableSharedFlow: boolean tryEmit(java.lang.Object)>(r1);

     label1:
        return;
    }

    public final kotlinx.coroutines.flow.Flow getFlow()
    {
        androidx.paging.HintHandler$HintFlow r0;
        kotlinx.coroutines.flow.MutableSharedFlow $r1;
        kotlinx.coroutines.flow.Flow $r2;

        r0 := @this: androidx.paging.HintHandler$HintFlow;

        $r1 = r0.<androidx.paging.HintHandler$HintFlow: kotlinx.coroutines.flow.MutableSharedFlow _flow>;

        $r2 = (kotlinx.coroutines.flow.Flow) $r1;

        return $r2;
    }

androidx.paging.HintHandler$processHint$1
<androidx.paging.HintHandler$processHint$1: androidx.paging.ViewportHint $viewportHint>
    void <init>(androidx.paging.ViewportHint)
    {
        androidx.paging.HintHandler$processHint$1 r0;
        androidx.paging.ViewportHint $r1;

        r0 := @this: androidx.paging.HintHandler$processHint$1;

        $r1 := @parameter0: androidx.paging.ViewportHint;

        r0.<androidx.paging.HintHandler$processHint$1: androidx.paging.ViewportHint $viewportHint> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(androidx.paging.HintHandler$HintFlow, androidx.paging.HintHandler$HintFlow)
    {
        androidx.paging.HintHandler$processHint$1 r0;
        androidx.paging.HintHandler$HintFlow r1, r2;
        androidx.paging.ViewportHint $r3, $r4, $r6, $r7, $r9, $r10;
        androidx.paging.LoadType $r5, $r8;
        boolean $z0, $z1;

        r0 := @this: androidx.paging.HintHandler$processHint$1;

        r1 := @parameter0: androidx.paging.HintHandler$HintFlow;

        r2 := @parameter1: androidx.paging.HintHandler$HintFlow;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "prependHint");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "appendHint");

        $r3 = r0.<androidx.paging.HintHandler$processHint$1: androidx.paging.ViewportHint $viewportHint>;

        $r4 = virtualinvoke r1.<androidx.paging.HintHandler$HintFlow: androidx.paging.ViewportHint getValue()>();

        $r5 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $z0 = staticinvoke <androidx.paging.HintHandlerKt: boolean shouldPrioritizeOver(androidx.paging.ViewportHint,androidx.paging.ViewportHint,androidx.paging.LoadType)>($r3, $r4, $r5);

        if $z0 == 0 goto label1;

        $r10 = r0.<androidx.paging.HintHandler$processHint$1: androidx.paging.ViewportHint $viewportHint>;

        virtualinvoke r1.<androidx.paging.HintHandler$HintFlow: void setValue(androidx.paging.ViewportHint)>($r10);

     label1:
        $r6 = r0.<androidx.paging.HintHandler$processHint$1: androidx.paging.ViewportHint $viewportHint>;

        $r7 = virtualinvoke r2.<androidx.paging.HintHandler$HintFlow: androidx.paging.ViewportHint getValue()>();

        $r8 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $z1 = staticinvoke <androidx.paging.HintHandlerKt: boolean shouldPrioritizeOver(androidx.paging.ViewportHint,androidx.paging.ViewportHint,androidx.paging.LoadType)>($r6, $r7, $r8);

        if $z1 == 0 goto label2;

        $r9 = r0.<androidx.paging.HintHandler$processHint$1: androidx.paging.ViewportHint $viewportHint>;

        virtualinvoke r2.<androidx.paging.HintHandler$HintFlow: void setValue(androidx.paging.ViewportHint)>($r9);

     label2:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.paging.HintHandler$processHint$1 r0;
        java.lang.Object r1, r2;
        androidx.paging.HintHandler$HintFlow $r3, $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.paging.HintHandler$processHint$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.paging.HintHandler$HintFlow) r1;

        $r3 = (androidx.paging.HintHandler$HintFlow) r2;

        virtualinvoke r0.<androidx.paging.HintHandler$processHint$1: void invoke(androidx.paging.HintHandler$HintFlow,androidx.paging.HintHandler$HintFlow)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

androidx.paging.HintHandler$State
<androidx.paging.HintHandler$State: androidx.paging.HintHandler$HintFlow prepend>
<androidx.paging.HintHandler$State: androidx.paging.HintHandler$HintFlow append>
<androidx.paging.HintHandler$State: androidx.paging.ViewportHint$Access lastAccessHint>
<androidx.paging.HintHandler$State: java.util.concurrent.locks.ReentrantLock lock>
<androidx.paging.HintHandler$State: androidx.paging.HintHandler this$0>
    public void <init>(androidx.paging.HintHandler)
    {
        androidx.paging.HintHandler$State r0;
        androidx.paging.HintHandler r1, $r3, $r5;
        androidx.paging.HintHandler$HintFlow $r2, $r4;
        java.util.concurrent.locks.ReentrantLock $r6;

        r0 := @this: androidx.paging.HintHandler$State;

        r1 := @parameter0: androidx.paging.HintHandler;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "this$0");

        r0.<androidx.paging.HintHandler$State: androidx.paging.HintHandler this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.paging.HintHandler$HintFlow;

        $r3 = r0.<androidx.paging.HintHandler$State: androidx.paging.HintHandler this$0>;

        specialinvoke $r2.<androidx.paging.HintHandler$HintFlow: void <init>(androidx.paging.HintHandler)>($r3);

        r0.<androidx.paging.HintHandler$State: androidx.paging.HintHandler$HintFlow prepend> = $r2;

        $r4 = new androidx.paging.HintHandler$HintFlow;

        $r5 = r0.<androidx.paging.HintHandler$State: androidx.paging.HintHandler this$0>;

        specialinvoke $r4.<androidx.paging.HintHandler$HintFlow: void <init>(androidx.paging.HintHandler)>($r5);

        r0.<androidx.paging.HintHandler$State: androidx.paging.HintHandler$HintFlow append> = $r4;

        $r6 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<androidx.paging.HintHandler$State: java.util.concurrent.locks.ReentrantLock lock> = $r6;

        return;
    }

    public final androidx.paging.ViewportHint$Access getLastAccessHint()
    {
        androidx.paging.HintHandler$State r0;
        androidx.paging.ViewportHint$Access $r1;

        r0 := @this: androidx.paging.HintHandler$State;

        $r1 = r0.<androidx.paging.HintHandler$State: androidx.paging.ViewportHint$Access lastAccessHint>;

        return $r1;
    }

    public final kotlinx.coroutines.flow.Flow getPrependFlow()
    {
        androidx.paging.HintHandler$State r0;
        androidx.paging.HintHandler$HintFlow $r1;
        kotlinx.coroutines.flow.Flow $r2;

        r0 := @this: androidx.paging.HintHandler$State;

        $r1 = r0.<androidx.paging.HintHandler$State: androidx.paging.HintHandler$HintFlow prepend>;

        $r2 = virtualinvoke $r1.<androidx.paging.HintHandler$HintFlow: kotlinx.coroutines.flow.Flow getFlow()>();

        return $r2;
    }

    public final kotlinx.coroutines.flow.Flow getAppendFlow()
    {
        androidx.paging.HintHandler$State r0;
        androidx.paging.HintHandler$HintFlow $r1;
        kotlinx.coroutines.flow.Flow $r2;

        r0 := @this: androidx.paging.HintHandler$State;

        $r1 = r0.<androidx.paging.HintHandler$State: androidx.paging.HintHandler$HintFlow append>;

        $r2 = virtualinvoke $r1.<androidx.paging.HintHandler$HintFlow: kotlinx.coroutines.flow.Flow getFlow()>();

        return $r2;
    }

    public final void modify(androidx.paging.ViewportHint$Access, kotlin.jvm.functions.Function2)
    {
        androidx.paging.HintHandler$State r0;
        androidx.paging.ViewportHint$Access r1;
        kotlin.jvm.functions.Function2 r2;
        java.util.concurrent.locks.Lock r3;
        boolean z0, z2;
        java.util.concurrent.locks.ReentrantLock $r4;
        androidx.paging.HintHandler$HintFlow $r5, $r6;
        java.lang.Throwable $r8, r10;
        kotlin.Unit r9;

        r0 := @this: androidx.paging.HintHandler$State;

        r1 := @parameter0: androidx.paging.ViewportHint$Access;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        $r4 = r0.<androidx.paging.HintHandler$State: java.util.concurrent.locks.ReentrantLock lock>;

        r3 = (java.util.concurrent.locks.Lock) $r4;

        z0 = 0;

        z2 = 0;

        interfaceinvoke r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        if r1 == null goto label2;

        r0.<androidx.paging.HintHandler$State: androidx.paging.ViewportHint$Access lastAccessHint> = r1;

     label2:
        $r6 = r0.<androidx.paging.HintHandler$State: androidx.paging.HintHandler$HintFlow prepend>;

        $r5 = r0.<androidx.paging.HintHandler$State: androidx.paging.HintHandler$HintFlow append>;

        interfaceinvoke r2.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r6, $r5);

        r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        interfaceinvoke r3.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label4:
        $r8 := @caughtexception;

        r10 = $r8;

     label5:
        interfaceinvoke r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

androidx.paging.HintHandler$WhenMappings
<androidx.paging.HintHandler$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.paging.LoadType[] $r1;
        int $i0, $i1, $i2;
        androidx.paging.LoadType $r2, $r3;

        $r1 = staticinvoke <androidx.paging.LoadType: androidx.paging.LoadType[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.paging.LoadType: androidx.paging.LoadType PREPEND>;

        $i1 = virtualinvoke $r2.<androidx.paging.LoadType: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.paging.LoadType: androidx.paging.LoadType APPEND>;

        $i2 = virtualinvoke $r3.<androidx.paging.LoadType: int ordinal()>();

        r0[$i2] = 2;

        <androidx.paging.HintHandler$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

