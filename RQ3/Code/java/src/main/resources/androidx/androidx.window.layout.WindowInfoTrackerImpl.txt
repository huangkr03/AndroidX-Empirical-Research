androidx.window.layout.WindowInfoTrackerImpl
<androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowInfoTrackerImpl$Companion Companion>
<androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowMetricsCalculator windowMetricsCalculator>
<androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend windowBackend>
<androidx.window.layout.WindowInfoTrackerImpl: int BUFFER_CAPACITY>
    public void <init>(androidx.window.layout.WindowMetricsCalculator, androidx.window.layout.WindowBackend)
    {
        androidx.window.layout.WindowInfoTrackerImpl r0;
        androidx.window.layout.WindowMetricsCalculator r1;
        androidx.window.layout.WindowBackend r2;

        r0 := @this: androidx.window.layout.WindowInfoTrackerImpl;

        r1 := @parameter0: androidx.window.layout.WindowMetricsCalculator;

        r2 := @parameter1: androidx.window.layout.WindowBackend;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "windowMetricsCalculator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "windowBackend");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowMetricsCalculator windowMetricsCalculator> = r1;

        r0.<androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend windowBackend> = r2;

        return;
    }

    public kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
    {
        androidx.window.layout.WindowInfoTrackerImpl r0;
        android.app.Activity r1;
        androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1 $r2;
        kotlin.jvm.functions.Function2 $r3;
        kotlinx.coroutines.flow.Flow $r4;

        r0 := @this: androidx.window.layout.WindowInfoTrackerImpl;

        r1 := @parameter0: android.app.Activity;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "activity");

        $r2 = new androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1;

        specialinvoke $r2.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void <init>(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,kotlin.coroutines.Continuation)>(r0, r1, null);

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        $r4 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flow(kotlin.jvm.functions.Function2)>($r3);

        return $r4;
    }

    public static final androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)
    {
        androidx.window.layout.WindowInfoTrackerImpl $r0;
        androidx.window.layout.WindowBackend $r1;

        $r0 := @parameter0: androidx.window.layout.WindowInfoTrackerImpl;

        $r1 = $r0.<androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend windowBackend>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.window.layout.WindowInfoTrackerImpl$Companion $r0;

        $r0 = new androidx.window.layout.WindowInfoTrackerImpl$Companion;

        specialinvoke $r0.<androidx.window.layout.WindowInfoTrackerImpl$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowInfoTrackerImpl$Companion Companion> = $r0;

        return;
    }

androidx.window.layout.WindowInfoTrackerImpl$Companion
    private void <init>()
    {
        androidx.window.layout.WindowInfoTrackerImpl$Companion r0;

        r0 := @this: androidx.window.layout.WindowInfoTrackerImpl$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.window.layout.WindowInfoTrackerImpl$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.window.layout.WindowInfoTrackerImpl$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.window.layout.WindowInfoTrackerImpl$Companion: void <init>()>();

        return;
    }

androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1
<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1>
<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2>
<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label>
<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0>
<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0>
<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity>
    void <init>(androidx.window.layout.WindowInfoTrackerImpl, android.app.Activity, kotlin.coroutines.Continuation)
    {
        androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1 r0;
        androidx.window.layout.WindowInfoTrackerImpl $r1;
        android.app.Activity $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1;

        $r1 := @parameter0: androidx.window.layout.WindowInfoTrackerImpl;

        $r2 := @parameter1: android.app.Activity;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0> = $r1;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1 r0;
        java.lang.Object $r1, r4, $r5, $r6, $r7, $r13, $r15, $r16, $r17, $r18, $r19, $r32;
        kotlinx.coroutines.channels.Channel r2;
        androidx.window.layout.WindowLayoutInfo r3;
        int $i0;
        kotlin.coroutines.Continuation $r8, $r14;
        java.lang.Boolean $r9;
        boolean $z0;
        androidx.window.layout.WindowInfoTrackerImpl $r10, $r21, $r27;
        androidx.window.layout.WindowBackend $r11, $r22, $r28;
        kotlin.Unit $r12;
        kotlinx.coroutines.channels.BufferOverflow $r20;
        android.app.Activity $r23;
        java.util.concurrent.Executor $r24;
        java.lang.IllegalStateException $r25;
        java.lang.Throwable $r26, r33;
        kotlinx.coroutines.flow.FlowCollector $r29;
        androidx.core.util.Consumer r30;
        kotlinx.coroutines.channels.ChannelIterator r31;

        r0 := @this: androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1;

        $r1 := @parameter0: java.lang.Object;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label05;
            case 2: goto label09;
            default: goto label16;
        };

     label01:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r19 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0>;

        $r29 = (kotlinx.coroutines.flow.FlowCollector) $r19;

        $r20 = <kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow DROP_OLDEST>;

        r2 = staticinvoke <kotlinx.coroutines.channels.ChannelKt: kotlinx.coroutines.channels.Channel Channel$default(int,kotlinx.coroutines.channels.BufferOverflow,kotlin.jvm.functions.Function1,int,java.lang.Object)>(10, $r20, null, 4, null);

        r30 = dynamicinvoke "accept" <androidx.core.util.Consumer (kotlinx.coroutines.channels.Channel)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void invokeSuspend$lambda-0(kotlinx.coroutines.channels.Channel,androidx.window.layout.WindowLayoutInfo)>, methodtype: void __METHODTYPE__(androidx.window.layout.WindowLayoutInfo));

        $r21 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0>;

        $r22 = staticinvoke <androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)>($r21);

        $r23 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity>;

        $r24 = dynamicinvoke "execute" <java.util.concurrent.Executor ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Runnable), methodhandle: "REF_INVOKE_INTERFACE" <java.lang.Runnable: void run()>, methodtype: void __METHODTYPE__(java.lang.Runnable));

        interfaceinvoke $r22.<androidx.window.layout.WindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)>($r23, $r24, r30);

     label02:
        r31 = interfaceinvoke r2.<kotlinx.coroutines.channels.Channel: kotlinx.coroutines.channels.ChannelIterator iterator()>();

     label03:
        $r8 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0> = $r29;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1> = r30;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2> = r31;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label> = 1;

        $r32 = interfaceinvoke r31.<kotlinx.coroutines.channels.ChannelIterator: java.lang.Object hasNext(kotlin.coroutines.Continuation)>($r8);

     label04:
        if $r32 != r4 goto label07;

        return r4;

     label05:
        $r16 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2>;

        r31 = (kotlinx.coroutines.channels.ChannelIterator) $r16;

        $r17 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1>;

        r30 = (androidx.core.util.Consumer) $r17;

        $r18 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0>;

        $r29 = (kotlinx.coroutines.flow.FlowCollector) $r18;

     label06:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r32 = $r1;

     label07:
        $r9 = (java.lang.Boolean) $r32;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label12;

        $r13 = interfaceinvoke r31.<kotlinx.coroutines.channels.ChannelIterator: java.lang.Object next()>();

        r3 = (androidx.window.layout.WindowLayoutInfo) $r13;

        $r14 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0> = $r29;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1> = r30;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2> = r31;

        r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label> = 2;

        $r15 = interfaceinvoke $r29.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(r3, $r14);

     label08:
        if $r15 != r4 goto label11;

        return r4;

     label09:
        $r5 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2>;

        r31 = (kotlinx.coroutines.channels.ChannelIterator) $r5;

        $r6 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1>;

        r30 = (androidx.core.util.Consumer) $r6;

        $r7 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0>;

        $r29 = (kotlinx.coroutines.flow.FlowCollector) $r7;

     label10:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label11:
        goto label03;

     label12:
        $r10 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0>;

        $r11 = staticinvoke <androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)>($r10);

        interfaceinvoke $r11.<androidx.window.layout.WindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)>(r30);

        goto label15;

     label13:
        $r26 := @caughtexception;

        r33 = $r26;

     label14:
        $r27 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0>;

        $r28 = staticinvoke <androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)>($r27);

        interfaceinvoke $r28.<androidx.window.layout.WindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)>(r30);

        throw r33;

     label15:
        $r12 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r12;

     label16:
        $r25 = new java.lang.IllegalStateException;

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r25;

        catch java.lang.Throwable from label02 to label04 with label13;
        catch java.lang.Throwable from label06 to label08 with label13;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r7;
        android.app.Activity $r5;
        androidx.window.layout.WindowInfoTrackerImpl $r6;

        r0 := @this: androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1;

        $r6 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0>;

        $r5 = r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity>;

        specialinvoke $r4.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void <init>(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,kotlin.coroutines.Continuation)>($r6, $r5, $r2);

        r3 = $r4;

        r3.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0> = r1;

        $r7 = (kotlin.coroutines.Continuation) r3;

        return $r7;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1 r0, $r5;
        kotlinx.coroutines.flow.FlowCollector r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    private static final void invokeSuspend$lambda-0(kotlinx.coroutines.channels.Channel, androidx.window.layout.WindowLayoutInfo)
    {
        kotlinx.coroutines.channels.Channel $r0;
        androidx.window.layout.WindowLayoutInfo r1;

        $r0 := @parameter0: kotlinx.coroutines.channels.Channel;

        r1 := @parameter1: androidx.window.layout.WindowLayoutInfo;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r1, "info");

        interfaceinvoke $r0.<kotlinx.coroutines.channels.Channel: java.lang.Object trySend-JP2dKIU(java.lang.Object)>(r1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.flow.FlowCollector $r4;

        r0 := @this: androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.flow.FlowCollector) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

