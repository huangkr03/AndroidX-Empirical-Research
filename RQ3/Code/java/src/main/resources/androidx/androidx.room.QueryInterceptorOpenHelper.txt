androidx.room.QueryInterceptorOpenHelper
<androidx.room.QueryInterceptorOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>
<androidx.room.QueryInterceptorOpenHelper: java.util.concurrent.Executor queryCallbackExecutor>
<androidx.room.QueryInterceptorOpenHelper: androidx.room.RoomDatabase$QueryCallback queryCallback>
    public void <init>(androidx.sqlite.db.SupportSQLiteOpenHelper, java.util.concurrent.Executor, androidx.room.RoomDatabase$QueryCallback)
    {
        androidx.room.QueryInterceptorOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper r1;
        java.util.concurrent.Executor r2;
        androidx.room.RoomDatabase$QueryCallback r3;

        r0 := @this: androidx.room.QueryInterceptorOpenHelper;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.room.RoomDatabase$QueryCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "delegate");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "queryCallbackExecutor");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "queryCallback");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.QueryInterceptorOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate> = r1;

        r0.<androidx.room.QueryInterceptorOpenHelper: java.util.concurrent.Executor queryCallbackExecutor> = r2;

        r0.<androidx.room.QueryInterceptorOpenHelper: androidx.room.RoomDatabase$QueryCallback queryCallback> = r3;

        return;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()
    {
        androidx.room.QueryInterceptorOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.QueryInterceptorOpenHelper;

        $r1 = r0.<androidx.room.QueryInterceptorOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>;

        return $r1;
    }

    public java.lang.String getDatabaseName()
    {
        androidx.room.QueryInterceptorOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.QueryInterceptorOpenHelper;

        $r1 = r0.<androidx.room.QueryInterceptorOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>;

        $r2 = interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: java.lang.String getDatabaseName()>();

        return $r2;
    }

    public void close()
    {
        androidx.room.QueryInterceptorOpenHelper r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.QueryInterceptorOpenHelper;

        $r1 = r0.<androidx.room.QueryInterceptorOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: void close()>();

        return;
    }

    public void setWriteAheadLoggingEnabled(boolean)
    {
        androidx.room.QueryInterceptorOpenHelper r0;
        boolean z0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.QueryInterceptorOpenHelper;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.room.QueryInterceptorOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper delegate>;

        interfaceinvoke $r1.<androidx.sqlite.db.SupportSQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)>(z0);

        return;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()
    {
        androidx.room.QueryInterceptorOpenHelper r0;
        androidx.room.QueryInterceptorDatabase $r1;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3, $r6;
        androidx.room.RoomDatabase$QueryCallback $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.room.QueryInterceptorOpenHelper;

        $r1 = new androidx.room.QueryInterceptorDatabase;

        $r2 = virtualinvoke r0.<androidx.room.QueryInterceptorOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()>();

        $r3 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        $r5 = r0.<androidx.room.QueryInterceptorOpenHelper: java.util.concurrent.Executor queryCallbackExecutor>;

        $r4 = r0.<androidx.room.QueryInterceptorOpenHelper: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        specialinvoke $r1.<androidx.room.QueryInterceptorDatabase: void <init>(androidx.sqlite.db.SupportSQLiteDatabase,java.util.concurrent.Executor,androidx.room.RoomDatabase$QueryCallback)>($r3, $r5, $r4);

        $r6 = (androidx.sqlite.db.SupportSQLiteDatabase) $r1;

        return $r6;
    }

    public androidx.sqlite.db.SupportSQLiteDatabase getReadableDatabase()
    {
        androidx.room.QueryInterceptorOpenHelper r0;
        androidx.room.QueryInterceptorDatabase $r1;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r2;
        androidx.sqlite.db.SupportSQLiteDatabase $r3, $r6;
        androidx.room.RoomDatabase$QueryCallback $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.room.QueryInterceptorOpenHelper;

        $r1 = new androidx.room.QueryInterceptorDatabase;

        $r2 = virtualinvoke r0.<androidx.room.QueryInterceptorOpenHelper: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegate()>();

        $r3 = interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getReadableDatabase()>();

        $r5 = r0.<androidx.room.QueryInterceptorOpenHelper: java.util.concurrent.Executor queryCallbackExecutor>;

        $r4 = r0.<androidx.room.QueryInterceptorOpenHelper: androidx.room.RoomDatabase$QueryCallback queryCallback>;

        specialinvoke $r1.<androidx.room.QueryInterceptorDatabase: void <init>(androidx.sqlite.db.SupportSQLiteDatabase,java.util.concurrent.Executor,androidx.room.RoomDatabase$QueryCallback)>($r3, $r5, $r4);

        $r6 = (androidx.sqlite.db.SupportSQLiteDatabase) $r1;

        return $r6;
    }

