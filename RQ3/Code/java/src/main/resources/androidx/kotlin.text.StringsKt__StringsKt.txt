kotlin.text.StringsKt__StringsKt
    public void <init>()
    {
        kotlin.text.StringsKt__StringsKt $r0;

        $r0 := @this: kotlin.text.StringsKt__StringsKt;

        specialinvoke $r0.<kotlin.text.StringsKt__StringsJVMKt: void <init>()>();

        return;
    }

    public static final kotlin.Pair access$findAnyOf(java.lang.CharSequence, java.util.Collection, int, boolean, boolean)
    {
        java.util.Collection $r0;
        int $i0;
        boolean $z0, $z1;
        kotlin.Pair $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r1 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.Pair findAnyOf$StringsKt__StringsKt(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>($r2, $r0, $i0, $z0, $z1);

        return $r1;
    }

    public static final java.lang.String commonPrefixWith(java.lang.CharSequence, java.lang.CharSequence, boolean)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        char $c2, $c3;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z1 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c2, $c3, $z0);

        if $z1 == 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i1 = $i0 + -1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean hasSurrogatePairAt(java.lang.CharSequence,int)>($r0, $i1);

        if $z0 != 0 goto label4;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean hasSurrogatePairAt(java.lang.CharSequence,int)>($r1, $i1);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        goto label5;

     label4:
        $i0 = $i1;

     label5:
        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String commonPrefixWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0, $r3;
        java.lang.Object $r1;
        java.lang.String $r2;
        boolean $z0;
        int $i0;

        $r3 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String commonPrefixWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r3, $r0, $z0);

        return $r2;
    }

    public static final java.lang.String commonSuffixWith(java.lang.CharSequence, java.lang.CharSequence, boolean)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4;
        char $c5, $c6;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        $i4 = $i0 - $i3;

        $i4 = $i4 + -1;

        $c5 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $i4 = $i1 - $i3;

        $i4 = $i4 + -1;

        $c6 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i4);

        $z1 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c5, $c6, $z0);

        if $z1 == 0 goto label2;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $i2 = $i0 - $i3;

        $i2 = $i2 + -1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean hasSurrogatePairAt(java.lang.CharSequence,int)>($r0, $i2);

        if $z0 != 0 goto label4;

        $i1 = $i1 - $i3;

        $i1 = $i1 + -1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean hasSurrogatePairAt(java.lang.CharSequence,int)>($r1, $i1);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        goto label5;

     label4:
        $i3 = $i3 + -1;

     label5:
        $i3 = $i0 - $i3;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i3, $i0);

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String commonSuffixWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0, $r3;
        java.lang.Object $r1;
        java.lang.String $r2;
        boolean $z0;
        int $i0;

        $r3 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String commonSuffixWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r3, $r0, $z0);

        return $r2;
    }

    public static final boolean contains(java.lang.CharSequence, char, boolean)
    {
        char $c0;
        boolean $z0;
        int $i1;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, $c0, 0, $z0, 2, null);

        if $i1 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final boolean contains(java.lang.CharSequence, java.lang.CharSequence, boolean)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r2;
        int $i0;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $z1 = $r0 instanceof java.lang.String;

        $z2 = 1;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.String) $r0;

        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r1, $r2, 0, $z0, 2, null);

        if $i0 < 0 goto label1;

        goto label4;

     label1:
        $z2 = 0;

        goto label4;

     label2:
        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = staticinvoke <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)>($r1, $r0, 0, $i0, $z0, 0, 16, null);

        if $i0 < 0 goto label3;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    private static final boolean contains(java.lang.CharSequence, kotlin.text.Regex)
    {
        kotlin.text.Regex $r0;
        boolean $z0;
        java.lang.CharSequence $r1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.text.Regex;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "regex");

        $z0 = virtualinvoke $r0.<kotlin.text.Regex: boolean containsMatchIn(java.lang.CharSequence)>($r1);

        return $z0;
    }

    public static boolean contains$default(java.lang.CharSequence, char, boolean, int, java.lang.Object)
    {
        char $c0;
        java.lang.Object $r0;
        boolean $z0;
        java.lang.CharSequence $r1;
        int $i1;

        $r1 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $z0 := @parameter2: boolean;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $z0 = 0;

     label1:
        $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains(java.lang.CharSequence,char,boolean)>($r1, $c0, $z0);

        return $z0;
    }

    public static boolean contains$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r2, $r0, $z0);

        return $z0;
    }

    public static final boolean contentEqualsIgnoreCaseImpl(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0;
        java.lang.String $r2, $r3;
        int $i0, $i1;
        char $c2, $c3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $z0 = $r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) $r0;

        $r3 = (java.lang.String) $r1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean equals(java.lang.String,java.lang.String,boolean)>($r2, $r3, 1);

        return $z0;

     label1:
        if $r0 != $r1 goto label2;

        return 1;

     label2:
        if $r0 == null goto label7;

        if $r1 == null goto label7;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label6;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c2, $c3, 1);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        return 1;

     label7:
        return 0;
    }

    public static final boolean contentEqualsImpl(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0;
        int $i0, $i1;
        char $c2, $c3;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $z0 = $r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r0);

        return $z0;

     label1:
        if $r1 != $r0 goto label2;

        return 1;

     label2:
        if $r1 == null goto label7;

        if $r0 == null goto label7;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label6;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c2 == $c3 goto label5;

        return 0;

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        return 1;

     label7:
        return 0;
    }

    public static final boolean endsWith(java.lang.CharSequence, char, boolean)
    {
        char $c0, $c2;
        boolean $z0;
        java.lang.CharSequence $r0;
        int $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label1;

        $i1 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r0);

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c2, $c0, $z0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final boolean endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean)
    {
        int $i0, $i1;
        java.lang.CharSequence $r0, $r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "suffix");

        if $z0 != 0 goto label1;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $z1 = $r1 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $r2 = (java.lang.String) $r0;

        $r3 = (java.lang.String) $r1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r2, $r3, 0, 2, null);

        return $z0;

     label1:
        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = $i0 - $i1;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r0, $i0, $r1, 0, $i1, $z0);

        return $z0;
    }

    public static boolean endsWith$default(java.lang.CharSequence, char, boolean, int, java.lang.Object)
    {
        char $c0;
        java.lang.Object $r0;
        boolean $z0;
        java.lang.CharSequence $r1;
        int $i1;

        $r1 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $z0 := @parameter2: boolean;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $z0 = 0;

     label1:
        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith(java.lang.CharSequence,char,boolean)>($r1, $c0, $z0);

        return $z0;
    }

    public static boolean endsWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r2, $r0, $z0);

        return $z0;
    }

    public static final kotlin.Pair findAnyOf(java.lang.CharSequence, java.util.Collection, int, boolean)
    {
        java.util.Collection $r0;
        int $i0;
        boolean $z0;
        kotlin.Pair $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "strings");

        $r1 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.Pair findAnyOf$StringsKt__StringsKt(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>($r2, $r0, $i0, $z0, 0);

        return $r1;
    }

    private static final kotlin.Pair findAnyOf$StringsKt__StringsKt(java.lang.CharSequence, java.util.Collection, int, boolean, boolean)
    {
        boolean $z0, $z1;
        java.lang.CharSequence $r0;
        java.util.Collection $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2, $r8;
        java.lang.String $r3, $r9;
        java.lang.Integer $r4;
        kotlin.Pair $r5;
        kotlin.ranges.IntProgression $r6;
        java.util.Iterator $r7;
        kotlin.ranges.IntRange r10;
        java.lang.Iterable r11;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        if $z0 != 0 goto label04;

        $i1 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i1 != 1 goto label04;

        r11 = (java.lang.Iterable) $r1;

        $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object single(java.lang.Iterable)>(r11);

        $r3 = (java.lang.String) $r2;

        if $z1 != 0 goto label01;

        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r0, $r3, $i0, 0, 4, null);

        goto label02;

     label01:
        $i0 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r0, $r3, $i0, 0, 4, null);

     label02:
        if $i0 >= 0 goto label03;

        return null;

     label03:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $r5;

     label04:
        if $z1 != 0 goto label05;

        r10 = new kotlin.ranges.IntRange;

        $r6 = r10;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        specialinvoke r10.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i1);

        goto label06;

     label05:
        $i1 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r0);

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i0, $i1);

        $r6 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression downTo(int,int)>($i0, 0);

     label06:
        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label14;

        $i2 = virtualinvoke $r6.<kotlin.ranges.IntProgression: int getFirst()>();

        $i0 = $i2;

        $i1 = virtualinvoke $r6.<kotlin.ranges.IntProgression: int getLast()>();

        $i3 = virtualinvoke $r6.<kotlin.ranges.IntProgression: int getStep()>();

        if $i3 <= 0 goto label08;

        if $i2 <= $i1 goto label07;

        goto label08;

     label07:
        goto label09;

     label08:
        if $i3 >= 0 goto label22;

        if $i1 > $i2 goto label22;

        goto label07;

     label09:
        r11 = (java.lang.Iterable) $r1;

        $r7 = interfaceinvoke r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r2 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = $r2;

        $r3 = (java.lang.String) $r2;

        $r9 = (java.lang.String) $r0;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>($r3, 0, $r9, $i0, $i2, $z0);

        if $z1 == 0 goto label10;

        goto label12;

     label11:
        $r8 = null;

     label12:
        $r3 = (java.lang.String) $r8;

        if $r3 == null goto label13;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $r5;

     label13:
        if $i0 == $i1 goto label22;

        $i0 = $i0 + $i3;

        goto label09;

     label14:
        $i2 = virtualinvoke $r6.<kotlin.ranges.IntProgression: int getFirst()>();

        $i0 = $i2;

        $i1 = virtualinvoke $r6.<kotlin.ranges.IntProgression: int getLast()>();

        $i3 = virtualinvoke $r6.<kotlin.ranges.IntProgression: int getStep()>();

        if $i3 <= 0 goto label16;

        if $i2 <= $i1 goto label15;

        goto label16;

     label15:
        goto label17;

     label16:
        if $i3 >= 0 goto label22;

        if $i1 > $i2 goto label22;

        goto label15;

     label17:
        r11 = (java.lang.Iterable) $r1;

        $r7 = interfaceinvoke r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label18:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label19;

        $r2 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = $r2;

        $r3 = (java.lang.String) $r2;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r3, 0, $r0, $i0, $i2, $z0);

        if $z1 == 0 goto label18;

        goto label20;

     label19:
        $r8 = null;

     label20:
        $r3 = (java.lang.String) $r8;

        if $r3 == null goto label21;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $r5;

     label21:
        if $i0 == $i1 goto label22;

        $i0 = $i0 + $i3;

        goto label17;

     label22:
        return null;
    }

    public static kotlin.Pair findAnyOf$default(java.lang.CharSequence, java.util.Collection, int, boolean, int, java.lang.Object)
    {
        java.util.Collection $r0;
        kotlin.Pair $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r3;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $r1 = staticinvoke <kotlin.text.StringsKt: kotlin.Pair findAnyOf(java.lang.CharSequence,java.util.Collection,int,boolean)>($r2, $r0, $i0, $z0);

        return $r1;
    }

    public static final kotlin.Pair findLastAnyOf(java.lang.CharSequence, java.util.Collection, int, boolean)
    {
        java.util.Collection $r0;
        int $i0;
        boolean $z0;
        kotlin.Pair $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "strings");

        $r1 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.Pair findAnyOf$StringsKt__StringsKt(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>($r2, $r0, $i0, $z0, 1);

        return $r1;
    }

    public static kotlin.Pair findLastAnyOf$default(java.lang.CharSequence, java.util.Collection, int, boolean, int, java.lang.Object)
    {
        java.util.Collection $r0;
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r2;
        kotlin.Pair $r3;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r1);

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $r3 = staticinvoke <kotlin.text.StringsKt: kotlin.Pair findLastAnyOf(java.lang.CharSequence,java.util.Collection,int,boolean)>($r1, $r0, $i0, $z0);

        return $r3;
    }

    public static final kotlin.ranges.IntRange getIndices(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence $r0;
        kotlin.ranges.IntRange $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.ranges.IntRange;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = $i0 + -1;

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(0, $i0);

        return $r1;
    }

    public static final int getLastIndex(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = $i0 + -1;

        return $i0;
    }

    public static final boolean hasSurrogatePairAt(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        kotlin.ranges.IntRange $r1;
        boolean $z0, $z1;
        char $c2;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.ranges.IntRange;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i1 + -2;

        $z0 = 0;

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(0, $i1);

        $z1 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean contains(int)>($i0);

        if $z1 == 0 goto label1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c2);

        if $z1 == 0 goto label1;

        $i0 = $i0 + 1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $z1 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c2);

        if $z1 == 0 goto label1;

        $z0 = 1;

        goto label1;

     label1:
        return $z0;
    }

    private static final java.lang.Object ifBlank(java.lang.CharSequence, kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;
        java.lang.CharSequence $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean isBlank(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r2;

     label1:
        return $r1;
    }

    private static final java.lang.Object ifEmpty(java.lang.CharSequence, kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;
        java.lang.CharSequence $r1;
        int $i0;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r2;

     label3:
        return $r1;
    }

    public static final int indexOf(java.lang.CharSequence, char, int, boolean)
    {
        char $c0;
        int $i1;
        boolean $z0, $z1;
        java.lang.CharSequence $r0;
        java.lang.String $r1;
        char[] $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $z0 != 0 goto label2;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r1 = (java.lang.String) $r0;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>($c0, $i1);

        return $i1;

     label2:
        $r2 = newarray (char)[1];

        $r2[0] = $c0;

        $i1 = staticinvoke <kotlin.text.StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)>($r0, $r2, $i1, $z0);

        return $i1;
    }

    public static final int indexOf(java.lang.CharSequence, java.lang.String, int, boolean)
    {
        java.lang.String $r0, $r2;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.CharSequence $r1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "string");

        if $z0 != 0 goto label2;

        $z1 = $r1 instanceof java.lang.String;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r2 = (java.lang.String) $r1;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>($r0, $i0);

        return $i0;

     label2:
        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = staticinvoke <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)>($r1, $r0, $i0, $i1, $z0, 0, 16, null);

        return $i0;
    }

    private static final int indexOf$StringsKt__StringsKt(java.lang.CharSequence, java.lang.CharSequence, int, int, boolean, boolean)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        kotlin.ranges.IntProgression $r2;
        java.lang.String $r3, $r4;
        kotlin.ranges.IntRange r5;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $z1 := @parameter5: boolean;

        if $z1 != 0 goto label01;

        r5 = new kotlin.ranges.IntRange;

        $r2 = r5;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i1, $i2);

        specialinvoke r5.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i1);

        goto label02;

     label01:
        $i2 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r1);

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i0, $i2);

        $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i1, 0);

        $r2 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression downTo(int,int)>($i0, $i1);

     label02:
        $z1 = $r1 instanceof java.lang.String;

        if $z1 == 0 goto label07;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label07;

        $i3 = virtualinvoke $r2.<kotlin.ranges.IntProgression: int getFirst()>();

        $i0 = $i3;

        $i1 = virtualinvoke $r2.<kotlin.ranges.IntProgression: int getLast()>();

        $i2 = virtualinvoke $r2.<kotlin.ranges.IntProgression: int getStep()>();

        if $i2 <= 0 goto label04;

        if $i3 <= $i1 goto label03;

        goto label04;

     label03:
        goto label05;

     label04:
        if $i2 >= 0 goto label12;

        if $i1 > $i3 goto label12;

        goto label03;

     label05:
        $r3 = (java.lang.String) $r0;

        $r4 = (java.lang.String) $r1;

        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>($r3, 0, $r4, $i0, $i3, $z0);

        if $z1 == 0 goto label06;

        return $i0;

     label06:
        if $i0 == $i1 goto label12;

        $i0 = $i0 + $i2;

        goto label05;

     label07:
        $i3 = virtualinvoke $r2.<kotlin.ranges.IntProgression: int getFirst()>();

        $i0 = $i3;

        $i1 = virtualinvoke $r2.<kotlin.ranges.IntProgression: int getLast()>();

        $i2 = virtualinvoke $r2.<kotlin.ranges.IntProgression: int getStep()>();

        if $i2 <= 0 goto label09;

        if $i3 <= $i1 goto label08;

        goto label09;

     label08:
        goto label10;

     label09:
        if $i2 >= 0 goto label12;

        if $i1 > $i3 goto label12;

        goto label08;

     label10:
        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r0, 0, $r1, $i0, $i3, $z0);

        if $z1 == 0 goto label11;

        return $i0;

     label11:
        if $i0 == $i1 goto label12;

        $i0 = $i0 + $i2;

        goto label10;

     label12:
        return -1;
    }

    static int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence, java.lang.CharSequence, int, int, boolean, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0, $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.lang.Object $r1;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $z1 := @parameter5: boolean;

        $i2 := @parameter6: int;

        $r1 := @parameter7: java.lang.Object;

        $i2 = $i2 & 16;

        if $i2 == 0 goto label1;

        $z1 = 0;

        goto label1;

     label1:
        $i0 = staticinvoke <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>($r2, $r0, $i0, $i1, $z0, $z1);

        return $i0;
    }

    public static int indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object)
    {
        char $c0;
        int $i1, $i2, $i3;
        java.lang.CharSequence $r0;
        boolean $z0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i2 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i1 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $z0 = 0;

     label2:
        $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)>($r0, $c0, $i1, $z0);

        return $i1;
    }

    public static int indexOf$default(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object)
    {
        java.lang.String $r0;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>($r1, $r0, $i0, $z0);

        return $i0;
    }

    public static final int indexOfAny(java.lang.CharSequence, java.util.Collection, int, boolean)
    {
        java.util.Collection $r0;
        int $i0;
        boolean $z0;
        java.lang.CharSequence $r1;
        kotlin.Pair $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "strings");

        $r2 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.Pair findAnyOf$StringsKt__StringsKt(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>($r1, $r0, $i0, $z0, 0);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<kotlin.Pair: java.lang.Object getFirst()>();

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;

     label1:
        return -1;
    }

    public static final int indexOfAny(java.lang.CharSequence, char[], int, boolean)
    {
        boolean $z0, $z1;
        int $i0, $i1, $i3;
        java.lang.CharSequence $r0;
        char[] $r1;
        char $c2, $c4;
        java.lang.String $r2;
        kotlin.ranges.IntRange $r3;
        kotlin.collections.IntIterator $r4;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: char[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "chars");

        if $z0 != 0 goto label1;

        $i1 = lengthof $r1;

        if $i1 != 1 goto label1;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $c2 = staticinvoke <kotlin.collections.ArraysKt: char single(char[])>($r1);

        $r2 = (java.lang.String) $r0;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>($c2, $i0);

        return $i0;

     label1:
        $r3 = new kotlin.ranges.IntRange;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0);

        $i1 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r0);

        specialinvoke $r3.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i1);

        $r4 = virtualinvoke $r3.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z1 = virtualinvoke $r4.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $i1 = virtualinvoke $r4.<kotlin.collections.IntIterator: int nextInt()>();

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $i0 = lengthof $r1;

        $i3 = 0;

     label3:
        if $i3 >= $i0 goto label5;

        $c4 = $r1[$i3];

        $z1 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c4, $c2, $z0);

        if $z1 == 0 goto label4;

        $z1 = 1;

        goto label6;

     label4:
        $i3 = $i3 + 1;

        goto label3;

     label5:
        $z1 = 0;

     label6:
        if $z1 == 0 goto label2;

        return $i1;

     label7:
        return -1;
    }

    public static int indexOfAny$default(java.lang.CharSequence, java.util.Collection, int, boolean, int, java.lang.Object)
    {
        java.util.Collection $r0;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOfAny(java.lang.CharSequence,java.util.Collection,int,boolean)>($r1, $r0, $i0, $z0);

        return $i0;
    }

    public static int indexOfAny$default(java.lang.CharSequence, char[], int, boolean, int, java.lang.Object)
    {
        char[] $r0;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: char[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)>($r1, $r0, $i0, $z0);

        return $i0;
    }

    private static final boolean isEmpty(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static final boolean isNotBlank(java.lang.CharSequence)
    {
        boolean $z0;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean isBlank(java.lang.CharSequence)>($r0);

        $z0 = $z0 ^ 1;

        return $z0;
    }

    private static final boolean isNotEmpty(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static final boolean isNullOrBlank(java.lang.CharSequence)
    {
        boolean $z0;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        if $r0 == null goto label2;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean isBlank(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private static final boolean isNullOrEmpty(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence $r0;

        $r0 := @parameter0: java.lang.CharSequence;

        if $r0 == null goto label2;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static final kotlin.collections.CharIterator iterator(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        kotlin.text.StringsKt__StringsKt$iterator$1 $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.text.StringsKt__StringsKt$iterator$1;

        specialinvoke $r1.<kotlin.text.StringsKt__StringsKt$iterator$1: void <init>(java.lang.CharSequence)>($r0);

        return $r1;
    }

    public static final int lastIndexOf(java.lang.CharSequence, char, int, boolean)
    {
        char $c0;
        int $i1;
        boolean $z0, $z1;
        java.lang.CharSequence $r0;
        java.lang.String $r1;
        char[] $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $z0 != 0 goto label2;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r1 = (java.lang.String) $r0;

        $i1 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int,int)>($c0, $i1);

        return $i1;

     label2:
        $r2 = newarray (char)[1];

        $r2[0] = $c0;

        $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)>($r0, $r2, $i1, $z0);

        return $i1;
    }

    public static final int lastIndexOf(java.lang.CharSequence, java.lang.String, int, boolean)
    {
        java.lang.String $r0, $r2;
        int $i0;
        boolean $z0, $z1;
        java.lang.CharSequence $r1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "string");

        if $z0 != 0 goto label2;

        $z1 = $r1 instanceof java.lang.String;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r2 = (java.lang.String) $r1;

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(java.lang.String,int)>($r0, $i0);

        return $i0;

     label2:
        $i0 = staticinvoke <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>($r1, $r0, $i0, 0, $z0, 1);

        return $i0;
    }

    public static int lastIndexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object)
    {
        char $c0;
        java.lang.CharSequence $r0;
        int $i1, $i2, $i3;
        boolean $z0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i2 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i1 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r0);

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $z0 = 0;

     label2:
        $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf(java.lang.CharSequence,char,int,boolean)>($r0, $c0, $i1, $z0);

        return $i1;
    }

    public static int lastIndexOf$default(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r1);

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $i0 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf(java.lang.CharSequence,java.lang.String,int,boolean)>($r1, $r0, $i0, $z0);

        return $i0;
    }

    public static final int lastIndexOfAny(java.lang.CharSequence, java.util.Collection, int, boolean)
    {
        java.util.Collection $r0;
        int $i0;
        boolean $z0;
        java.lang.CharSequence $r1;
        kotlin.Pair $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "strings");

        $r2 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.Pair findAnyOf$StringsKt__StringsKt(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>($r1, $r0, $i0, $z0, 1);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<kotlin.Pair: java.lang.Object getFirst()>();

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;

     label1:
        return -1;
    }

    public static final int lastIndexOfAny(java.lang.CharSequence, char[], int, boolean)
    {
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i3;
        java.lang.CharSequence $r0;
        char[] $r1;
        char $c2, $c4;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: char[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "chars");

        if $z0 != 0 goto label1;

        $i1 = lengthof $r1;

        if $i1 != 1 goto label1;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $c2 = staticinvoke <kotlin.collections.ArraysKt: char single(char[])>($r1);

        $r2 = (java.lang.String) $r0;

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int,int)>($c2, $i0);

        return $i0;

     label1:
        $i1 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r0);

        $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i0, $i1);

     label2:
        if $i1 < 0 goto label7;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $i0 = lengthof $r1;

        $z1 = 0;

        $i3 = 0;

     label3:
        if $i3 >= $i0 goto label5;

        $c4 = $r1[$i3];

        $z2 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c4, $c2, $z0);

        if $z2 == 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $i3 = $i3 + 1;

        goto label3;

     label5:
        if $z1 == 0 goto label6;

        return $i1;

     label6:
        $i1 = $i1 + -1;

        goto label2;

     label7:
        return -1;
    }

    public static int lastIndexOfAny$default(java.lang.CharSequence, java.util.Collection, int, boolean, int, java.lang.Object)
    {
        java.util.Collection $r0;
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r1);

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $i0 = staticinvoke <kotlin.text.StringsKt: int lastIndexOfAny(java.lang.CharSequence,java.util.Collection,int,boolean)>($r1, $r0, $i0, $z0);

        return $i0;
    }

    public static int lastIndexOfAny$default(java.lang.CharSequence, char[], int, boolean, int, java.lang.Object)
    {
        char[] $r0;
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: char[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $i0 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r1);

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $z0 = 0;

     label2:
        $i0 = staticinvoke <kotlin.text.StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)>($r1, $r0, $i0, $z0);

        return $i0;
    }

    public static final kotlin.sequences.Sequence lineSequence(java.lang.CharSequence)
    {
        java.lang.String[] $r0;
        kotlin.sequences.Sequence $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "\r\n";

        $r0[1] = "\n";

        $r0[2] = "\r";

        $r1 = staticinvoke <kotlin.text.StringsKt: kotlin.sequences.Sequence splitToSequence$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>($r2, $r0, 0, 0, 6, null);

        return $r1;
    }

    public static final java.util.List lines(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        kotlin.sequences.Sequence $r1;
        java.util.List $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.text.StringsKt: kotlin.sequences.Sequence lineSequence(java.lang.CharSequence)>($r0);

        $r2 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r1);

        return $r2;
    }

    private static final boolean matches(java.lang.CharSequence, kotlin.text.Regex)
    {
        kotlin.text.Regex $r0;
        boolean $z0;
        java.lang.CharSequence $r1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.text.Regex;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "regex");

        $z0 = virtualinvoke $r0.<kotlin.text.Regex: boolean matches(java.lang.CharSequence)>($r1);

        return $z0;
    }

    private static final java.lang.String orEmpty(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return "";

     label1:
        return $r0;
    }

    public static final java.lang.CharSequence padEnd(java.lang.CharSequence, int, char)
    {
        kotlin.ranges.IntRange $r0;
        java.lang.CharSequence $r1;
        int $i0, $i2;
        char $c1;
        java.lang.StringBuilder $r2;
        kotlin.collections.IntIterator $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        if $i0 < 0 goto label4;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 > $i2 goto label1;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        return $r1;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r1);

        $r0 = new kotlin.ranges.IntRange;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = $i0 - $i2;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r3 = virtualinvoke $r0.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label2;

     label3:
        return $r2;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Desired length ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        goto label5;

     label5:
        throw $r4;
    }

    public static final java.lang.String padEnd(java.lang.String, int, char)
    {
        int $i0;
        char $c1;
        java.lang.String $r0;
        java.lang.CharSequence $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence padEnd(java.lang.CharSequence,int,char)>($r0, $i0, $c1);

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

    public static java.lang.CharSequence padEnd$default(java.lang.CharSequence, int, char, int, java.lang.Object)
    {
        int $i0, $i2;
        java.lang.Object $r0;
        java.lang.CharSequence $r1;
        char $c1;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $c1 = 32;

     label1:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence padEnd(java.lang.CharSequence,int,char)>($r1, $i0, $c1);

        return $r1;
    }

    public static java.lang.String padEnd$default(java.lang.String, int, char, int, java.lang.Object)
    {
        int $i0, $i2;
        java.lang.Object $r0;
        java.lang.String $r1;
        char $c1;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $c1 = 32;

     label1:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String padEnd(java.lang.String,int,char)>($r1, $i0, $c1);

        return $r1;
    }

    public static final java.lang.CharSequence padStart(java.lang.CharSequence, int, char)
    {
        java.lang.CharSequence $r0;
        int $i0, $i2;
        char $c1;
        java.lang.StringBuilder $r1;
        kotlin.ranges.IntRange $r2;
        kotlin.collections.IntIterator $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $i0 < 0 goto label4;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 > $i2 goto label1;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        return $r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r2 = new kotlin.ranges.IntRange;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = $i0 - $i2;

        specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>(1, $i0);

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>();

     label2:
        $z0 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label2;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r0);

        return $r1;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Desired length ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than zero.");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        goto label5;

     label5:
        throw $r4;
    }

    public static final java.lang.String padStart(java.lang.String, int, char)
    {
        int $i0;
        char $c1;
        java.lang.String $r0;
        java.lang.CharSequence $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence padStart(java.lang.CharSequence,int,char)>($r0, $i0, $c1);

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

    public static java.lang.CharSequence padStart$default(java.lang.CharSequence, int, char, int, java.lang.Object)
    {
        int $i0, $i2;
        java.lang.Object $r0;
        java.lang.CharSequence $r1;
        char $c1;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $c1 = 32;

     label1:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence padStart(java.lang.CharSequence,int,char)>($r1, $i0, $c1);

        return $r1;
    }

    public static java.lang.String padStart$default(java.lang.String, int, char, int, java.lang.Object)
    {
        int $i0, $i2;
        java.lang.Object $r0;
        java.lang.String $r1;
        char $c1;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $c1 := @parameter2: char;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $c1 = 32;

     label1:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String padStart(java.lang.String,int,char)>($r1, $i0, $c1);

        return $r1;
    }

    private static final kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt(java.lang.CharSequence, char[], int, boolean, int)
    {
        java.lang.CharSequence $r0;
        char[] $r1;
        int $i0, $i1;
        boolean $z0;
        kotlin.text.DelimitedRangesSequence $r2;
        kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1 $r3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: char[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        staticinvoke <kotlin.text.StringsKt: void requireNonNegativeLimit(int)>($i1);

        $r2 = new kotlin.text.DelimitedRangesSequence;

        $r3 = new kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1;

        specialinvoke $r3.<kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1: void <init>(char[],boolean)>($r1, $z0);

        specialinvoke $r2.<kotlin.text.DelimitedRangesSequence: void <init>(java.lang.CharSequence,int,int,kotlin.jvm.functions.Function2)>($r0, $i0, $i1, $r3);

        return $r2;
    }

    private static final kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt(java.lang.CharSequence, java.lang.String[], int, boolean, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        boolean $z0;
        kotlin.text.DelimitedRangesSequence $r1;
        kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2 $r2;
        java.util.List $r3;
        java.lang.String[] $r4;

        $r0 := @parameter0: java.lang.CharSequence;

        $r4 := @parameter1: java.lang.String[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        staticinvoke <kotlin.text.StringsKt: void requireNonNegativeLimit(int)>($i1);

        $r3 = staticinvoke <kotlin.collections.ArraysKt: java.util.List asList(java.lang.Object[])>($r4);

        $r1 = new kotlin.text.DelimitedRangesSequence;

        $r2 = new kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2;

        specialinvoke $r2.<kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2: void <init>(java.util.List,boolean)>($r3, $z0);

        specialinvoke $r1.<kotlin.text.DelimitedRangesSequence: void <init>(java.lang.CharSequence,int,int,kotlin.jvm.functions.Function2)>($r0, $i0, $i1, $r2);

        return $r1;
    }

    static kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence, char[], int, boolean, int, int, java.lang.Object)
    {
        char[] $r0;
        kotlin.sequences.Sequence $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Object $r3;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: char[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $r3 := @parameter6: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $z0 = 0;

     label2:
        $i2 = $i2 & 8;

        if $i2 == 0 goto label3;

        $i1 = 0;

     label3:
        $r1 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt(java.lang.CharSequence,char[],int,boolean,int)>($r2, $r0, $i0, $z0, $i1);

        return $r1;
    }

    static kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence, java.lang.String[], int, boolean, int, int, java.lang.Object)
    {
        java.lang.String[] $r0;
        kotlin.sequences.Sequence $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Object $r3;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String[];

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $r3 := @parameter6: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $z0 = 0;

     label2:
        $i2 = $i2 & 8;

        if $i2 == 0 goto label3;

        $i1 = 0;

     label3:
        $r1 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt(java.lang.CharSequence,java.lang.String[],int,boolean,int)>($r2, $r0, $i0, $z0, $i1);

        return $r1;
    }

    public static final boolean regionMatchesImpl(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.CharSequence $r0, $r1;
        boolean $z0, $z1;
        char $c5, $c6;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $r0 := @parameter2: java.lang.CharSequence;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $z0 := @parameter5: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        if $i1 < 0 goto label5;

        if $i0 < 0 goto label5;

        $i3 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i3 = $i3 - $i2;

        if $i0 > $i3 goto label5;

        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i3 = $i3 - $i2;

        if $i1 <= $i3 goto label1;

        return 0;

     label1:
        $i3 = 0;

     label2:
        if $i3 >= $i2 goto label4;

        $i4 = $i0 + $i3;

        $c5 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i4);

        $i4 = $i1 + $i3;

        $c6 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $z1 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c5, $c6, $z0);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }

    public static final java.lang.CharSequence removePrefix(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "prefix");

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r0, $r1, 0, 2, null);

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        return $r0;

     label1:
        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        return $r0;
    }

    public static final java.lang.String removePrefix(java.lang.String, java.lang.CharSequence)
    {
        java.lang.String $r0;
        java.lang.CharSequence $r1;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "prefix");

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r0, $r1, 0, 2, null);

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String).substring(startIndex)");

     label1:
        return $r0;
    }

    public static final java.lang.CharSequence removeRange(java.lang.CharSequence, int, int)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.CharSequence $r0;
        java.lang.StringBuilder $r1, $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.lang.CharSequence;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $i2 < $i1 goto label2;

        if $i2 != $i1 goto label1;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i1);

        return $r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = $i2 - $i1;

        $i0 = $i3 - $i0;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, 0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "this.append(value, startIndex, endIndex)");

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, $i2, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "this.append(value, startIndex, endIndex)");

        return $r1;

     label2:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("End index (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is less than start index (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public static final java.lang.CharSequence removeRange(java.lang.CharSequence, kotlin.ranges.IntRange)
    {
        java.lang.CharSequence $r0;
        kotlin.ranges.IntRange $r1;
        java.lang.Integer $r2;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r0 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence removeRange(java.lang.CharSequence,int,int)>($r0, $i0, $i1);

        return $r0;
    }

    private static final java.lang.String removeRange(java.lang.String, int, int)
    {
        int $i0, $i1;
        java.lang.String $r0;
        java.lang.CharSequence $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence removeRange(java.lang.CharSequence,int,int)>($r0, $i0, $i1);

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

    private static final java.lang.String removeRange(java.lang.String, kotlin.ranges.IntRange)
    {
        kotlin.ranges.IntRange $r0;
        java.lang.String $r1;
        java.lang.CharSequence $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "range");

        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence removeRange(java.lang.CharSequence,kotlin.ranges.IntRange)>($r1, $r0);

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static final java.lang.CharSequence removeSuffix(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "suffix");

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r0, $r1, 0, 2, null);

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = $i0 - $i1;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        return $r0;

     label1:
        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        return $r0;
    }

    public static final java.lang.String removeSuffix(java.lang.String, java.lang.CharSequence)
    {
        java.lang.String $r0;
        java.lang.CharSequence $r1;
        boolean $z0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "suffix");

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r0, $r1, 0, 2, null);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = $i0 - $i1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

     label1:
        return $r0;
    }

    public static final java.lang.CharSequence removeSurrounding(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "delimiter");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence removeSurrounding(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>($r1, $r0, $r0);

        return $r1;
    }

    public static final java.lang.CharSequence removeSurrounding(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1, $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 := @parameter2: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "prefix");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "suffix");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i1 = $i1 + $i2;

        if $i0 < $i1 goto label1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r0, $r1, 0, 2, null);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r0, $r2, 0, 2, null);

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i1 = $i1 - $i2;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        return $r0;

     label1:
        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        return $r0;
    }

    public static final java.lang.String removeSurrounding(java.lang.String, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "delimiter");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String removeSurrounding(java.lang.String,java.lang.CharSequence,java.lang.CharSequence)>($r1, $r0, $r0);

        return $r1;
    }

    public static final java.lang.String removeSurrounding(java.lang.String, java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.String $r0;
        java.lang.CharSequence $r1, $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 := @parameter2: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "prefix");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "suffix");

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i1 = $i1 + $i2;

        if $i0 < $i1 goto label1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r0, $r1, 0, 2, null);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r0, $r2, 0, 2, null);

        if $z0 == 0 goto label1;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i1 = $i1 - $i2;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

     label1:
        return $r0;
    }

    private static final java.lang.String replace(java.lang.CharSequence, kotlin.text.Regex, java.lang.String)
    {
        kotlin.text.Regex $r0;
        java.lang.String $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.text.Regex;

        $r1 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "regex");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "replacement");

        $r1 = virtualinvoke $r0.<kotlin.text.Regex: java.lang.String replace(java.lang.CharSequence,java.lang.String)>($r2, $r1);

        return $r1;
    }

    private static final java.lang.String replace(java.lang.CharSequence, kotlin.text.Regex, kotlin.jvm.functions.Function1)
    {
        kotlin.text.Regex $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.String $r2;
        java.lang.CharSequence $r3;

        $r3 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.text.Regex;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "regex");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $r2 = virtualinvoke $r0.<kotlin.text.Regex: java.lang.String replace(java.lang.CharSequence,kotlin.jvm.functions.Function1)>($r3, $r1);

        return $r2;
    }

    public static final java.lang.String replaceAfter(java.lang.String, char, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        char $c0;
        int $i1, $i2;
        java.lang.CharSequence $r3;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r0 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "missingDelimiterValue");

        $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r1, $c0, 0, 0, 6, null);

        if $i1 != -1 goto label1;

        return $r2;

     label1:
        $i1 = $i1 + 1;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r1, $i1, $i2, $r0);

        $r1 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static final java.lang.String replaceAfter(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        int $i0, $i1;
        java.lang.CharSequence $r4;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "delimiter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "missingDelimiterValue");

        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r2, $r3, 0, 0, 6, null);

        if $i0 != -1 goto label1;

        return $r1;

     label1:
        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r2, $i0, $i1, $r0);

        $r2 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String replaceAfter$default(java.lang.String, char, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        char $c0;
        java.lang.String $r0, $r2, $r3;
        java.lang.Object $r1;
        int $i1;

        $r2 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r0 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String replaceAfter(java.lang.String,char,java.lang.String,java.lang.String)>($r2, $c0, $r0, $r3);

        return $r2;
    }

    public static java.lang.String replaceAfter$default(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        java.lang.String $r0, $r1, $r3, $r4;
        java.lang.Object $r2;
        int $i0;

        $r3 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label1;

        $r4 = $r3;

     label1:
        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.String replaceAfter(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r0, $r1, $r4);

        return $r3;
    }

    public static final java.lang.String replaceAfterLast(java.lang.String, char, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        char $c0;
        int $i1, $i2;
        java.lang.CharSequence $r3;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r0 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "missingDelimiterValue");

        $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r1, $c0, 0, 0, 6, null);

        if $i1 != -1 goto label1;

        return $r2;

     label1:
        $i1 = $i1 + 1;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r1, $i1, $i2, $r0);

        $r1 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static final java.lang.String replaceAfterLast(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        int $i0, $i1;
        java.lang.CharSequence $r4;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "delimiter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "missingDelimiterValue");

        $i0 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r2, $r3, 0, 0, 6, null);

        if $i0 != -1 goto label1;

        return $r1;

     label1:
        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r2, $i0, $i1, $r0);

        $r2 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String replaceAfterLast$default(java.lang.String, char, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        char $c0;
        java.lang.String $r0, $r2, $r3;
        java.lang.Object $r1;
        int $i1;

        $r2 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r0 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String replaceAfterLast(java.lang.String,char,java.lang.String,java.lang.String)>($r2, $c0, $r0, $r3);

        return $r2;
    }

    public static java.lang.String replaceAfterLast$default(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        java.lang.String $r0, $r1, $r3, $r4;
        java.lang.Object $r2;
        int $i0;

        $r3 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label1;

        $r4 = $r3;

     label1:
        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.String replaceAfterLast(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r0, $r1, $r4);

        return $r3;
    }

    public static final java.lang.String replaceBefore(java.lang.String, char, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        char $c0;
        int $i1;
        java.lang.CharSequence $r3;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r0 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "missingDelimiterValue");

        $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r1, $c0, 0, 0, 6, null);

        if $i1 != -1 goto label1;

        return $r2;

     label1:
        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r1, 0, $i1, $r0);

        $r1 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static final java.lang.String replaceBefore(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        int $i0;
        java.lang.CharSequence $r4;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "delimiter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "missingDelimiterValue");

        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r1, $r2, 0, 0, 6, null);

        if $i0 != -1 goto label1;

        return $r3;

     label1:
        $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r1, 0, $i0, $r0);

        $r1 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String replaceBefore$default(java.lang.String, char, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        char $c0;
        java.lang.String $r0, $r2, $r3;
        java.lang.Object $r1;
        int $i1;

        $r2 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r0 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String replaceBefore(java.lang.String,char,java.lang.String,java.lang.String)>($r2, $c0, $r0, $r3);

        return $r2;
    }

    public static java.lang.String replaceBefore$default(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        java.lang.String $r0, $r1, $r3, $r4;
        java.lang.Object $r2;
        int $i0;

        $r3 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label1;

        $r4 = $r3;

     label1:
        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.String replaceBefore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r0, $r1, $r4);

        return $r3;
    }

    public static final java.lang.String replaceBeforeLast(java.lang.String, char, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        char $c0;
        int $i1;
        java.lang.CharSequence $r3;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r0 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "missingDelimiterValue");

        $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r1, $c0, 0, 0, 6, null);

        if $i1 != -1 goto label1;

        return $r2;

     label1:
        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r1, 0, $i1, $r0);

        $r1 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static final java.lang.String replaceBeforeLast(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        int $i0;
        java.lang.CharSequence $r4;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "delimiter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "missingDelimiterValue");

        $i0 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r1, $r2, 0, 0, 6, null);

        if $i0 != -1 goto label1;

        return $r3;

     label1:
        $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r1, 0, $i0, $r0);

        $r1 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String replaceBeforeLast$default(java.lang.String, char, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        char $c0;
        java.lang.String $r0, $r2, $r3;
        java.lang.Object $r1;
        int $i1;

        $r2 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r0 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String replaceBeforeLast(java.lang.String,char,java.lang.String,java.lang.String)>($r2, $c0, $r0, $r3);

        return $r2;
    }

    public static java.lang.String replaceBeforeLast$default(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        java.lang.String $r0, $r1, $r3, $r4;
        java.lang.Object $r2;
        int $i0;

        $r3 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label1;

        $r4 = $r3;

     label1:
        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.String replaceBeforeLast(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r0, $r1, $r4);

        return $r3;
    }

    private static final java.lang.String replaceFirst(java.lang.CharSequence, kotlin.text.Regex, java.lang.String)
    {
        kotlin.text.Regex $r0;
        java.lang.String $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.text.Regex;

        $r1 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "regex");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "replacement");

        $r1 = virtualinvoke $r0.<kotlin.text.Regex: java.lang.String replaceFirst(java.lang.CharSequence,java.lang.String)>($r2, $r1);

        return $r1;
    }

    private static final java.lang.String replaceFirstCharWithChar(java.lang.String, kotlin.jvm.functions.Function1)
    {
        java.lang.String $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        boolean $z0;
        char $c1;
        java.lang.Character $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r2 = (java.lang.Character) $r3;

        $c1 = virtualinvoke $r2.<java.lang.Character: char charValue()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String).substring(startIndex)");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return $r0;
    }

    private static final java.lang.String replaceFirstCharWithCharSequence(java.lang.String, kotlin.jvm.functions.Function1)
    {
        java.lang.String $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        char $c1;
        java.lang.Character $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "transform");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r4 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String).substring(startIndex)");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return $r0;
    }

    public static final java.lang.CharSequence replaceRange(java.lang.CharSequence, int, int, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "replacement");

        if $i1 < $i0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, 0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "this.append(value, startIndex, endIndex)");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r1);

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r0, $i1, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "this.append(value, startIndex, endIndex)");

        return $r2;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("End index (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is less than start index (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static final java.lang.CharSequence replaceRange(java.lang.CharSequence, kotlin.ranges.IntRange, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        kotlin.ranges.IntRange $r2;
        java.lang.Integer $r3;
        int $i0, $i1;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: kotlin.ranges.IntRange;

        $r0 := @parameter2: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "range");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r3 = virtualinvoke $r2.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r1, $i0, $i1, $r0);

        return $r1;
    }

    private static final java.lang.String replaceRange(java.lang.String, int, int, java.lang.CharSequence)
    {
        int $i0, $i1;
        java.lang.CharSequence $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "replacement");

        $r0 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,int,int,java.lang.CharSequence)>($r1, $i0, $i1, $r0);

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    private static final java.lang.String replaceRange(java.lang.String, kotlin.ranges.IntRange, java.lang.CharSequence)
    {
        kotlin.ranges.IntRange $r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: kotlin.ranges.IntRange;

        $r1 := @parameter2: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "range");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "replacement");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence replaceRange(java.lang.CharSequence,kotlin.ranges.IntRange,java.lang.CharSequence)>($r2, $r0, $r1);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static final void requireNonNegativeLimit(int)
    {
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Limit must be non-negative, but was ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    private static final java.util.List split(java.lang.CharSequence, kotlin.text.Regex, int)
    {
        kotlin.text.Regex $r0;
        int $i0;
        java.util.List $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.text.Regex;

        $i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "regex");

        $r1 = virtualinvoke $r0.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>($r2, $i0);

        return $r1;
    }

    public static final java.util.List split(java.lang.CharSequence, char[], boolean, int)
    {
        java.lang.CharSequence $r0;
        char[] $r1;
        boolean $z0;
        int $i0, $i1;
        char $c2;
        java.lang.String $r2;
        java.util.List $r3;
        kotlin.sequences.Sequence $r4;
        java.lang.Iterable $r5;
        java.util.ArrayList $r6, r10;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        kotlin.ranges.IntRange $r9;
        java.util.Collection r11;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: char[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delimiters");

        $i1 = lengthof $r1;

        if $i1 != 1 goto label1;

        $c2 = $r1[0];

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2);

        $r3 = staticinvoke <kotlin.text.StringsKt__StringsKt: java.util.List split$StringsKt__StringsKt(java.lang.CharSequence,java.lang.String,boolean,int)>($r0, $r2, $z0, $i0);

        return $r3;

     label1:
        $r4 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence,char[],int,boolean,int,int,java.lang.Object)>($r0, $r1, 0, $z0, $i0, 2, null);

        $r5 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Iterable asIterable(kotlin.sequences.Sequence)>($r4);

        r10 = new java.util.ArrayList;

        $r6 = r10;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r5, 10);

        specialinvoke r10.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (kotlin.ranges.IntRange) $r8;

        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String substring(java.lang.CharSequence,kotlin.ranges.IntRange)>($r0, $r9);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke r11.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        goto label2;

     label3:
        $r3 = (java.util.List) $r6;

        return $r3;
    }

    public static final java.util.List split(java.lang.CharSequence, java.lang.String[], boolean, int)
    {
        java.lang.CharSequence $r0;
        java.lang.String[] $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.String $r2;
        java.util.List $r3;
        kotlin.sequences.Sequence $r4;
        java.lang.Iterable $r5;
        java.util.ArrayList $r6, r10;
        java.util.Iterator $r7;
        java.lang.Object $r8;
        kotlin.ranges.IntRange $r9;
        java.util.Collection r11;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delimiters");

        $i1 = lengthof $r1;

        $z1 = 1;

        if $i1 != 1 goto label3;

        $r2 = $r1[0];

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r3 = staticinvoke <kotlin.text.StringsKt__StringsKt: java.util.List split$StringsKt__StringsKt(java.lang.CharSequence,java.lang.String,boolean,int)>($r0, $r2, $z0, $i0);

        return $r3;

     label3:
        $r4 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.String[],int,boolean,int,int,java.lang.Object)>($r0, $r1, 0, $z0, $i0, 2, null);

        $r5 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Iterable asIterable(kotlin.sequences.Sequence)>($r4);

        r10 = new java.util.ArrayList;

        $r6 = r10;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r5, 10);

        specialinvoke r10.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (kotlin.ranges.IntRange) $r8;

        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String substring(java.lang.CharSequence,kotlin.ranges.IntRange)>($r0, $r9);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke r11.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        goto label4;

     label5:
        $r3 = (java.util.List) $r6;

        return $r3;
    }

    private static final java.util.List split$StringsKt__StringsKt(java.lang.CharSequence, java.lang.String, boolean, int)
    {
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r0, r6;
        java.lang.CharSequence $r1, $r3;
        java.lang.String $r2, $r4;
        java.util.List $r5;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        staticinvoke <kotlin.text.StringsKt: void requireNonNegativeLimit(int)>($i0);

        $i1 = 0;

        $i2 = staticinvoke <kotlin.text.StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>($r1, $r2, 0, $z0);

        $i3 = $i2;

        if $i2 == -1 goto label8;

        $z1 = 1;

        if $i0 != 1 goto label1;

        goto label8;

     label1:
        if $i0 <= 0 goto label2;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r6 = new java.util.ArrayList;

        $r0 = r6;

        $i2 = 10;

        if $z1 == 0 goto label4;

        $i2 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i0, 10);

        goto label4;

     label4:
        specialinvoke r6.<java.util.ArrayList: void <init>(int)>($i2);

     label5:
        $r3 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i3);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = $i1 + $i3;

        if $z1 == 0 goto label6;

        $i3 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $i2 = $i0 + -1;

        if $i3 == $i2 goto label7;

     label6:
        $i2 = staticinvoke <kotlin.text.StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>($r1, $r2, $i1, $z0);

        $i3 = $i2;

        if $i2 != -1 goto label5;

     label7:
        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r5 = (java.util.List) $r0;

        return $r5;

     label8:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r2);

        return $r5;
    }

    static java.util.List split$default(java.lang.CharSequence, kotlin.text.Regex, int, int, java.lang.Object)
    {
        kotlin.text.Regex $r0;
        java.lang.Object $r1;
        java.util.List $r2;
        java.lang.CharSequence $r3;
        int $i0, $i1;

        $r3 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.text.Regex;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "regex");

        $r2 = virtualinvoke $r0.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>($r3, $i0);

        return $r2;
    }

    public static java.util.List split$default(java.lang.CharSequence, char[], boolean, int, int, java.lang.Object)
    {
        char[] $r0;
        java.util.List $r1;
        java.lang.CharSequence $r2;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: char[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $z0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $i0 = 0;

     label2:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.util.List split(java.lang.CharSequence,char[],boolean,int)>($r2, $r0, $z0, $i0);

        return $r1;
    }

    public static java.util.List split$default(java.lang.CharSequence, java.lang.String[], boolean, int, int, java.lang.Object)
    {
        java.lang.String[] $r0;
        java.util.List $r1;
        java.lang.CharSequence $r2;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $z0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $i0 = 0;

     label2:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.util.List split(java.lang.CharSequence,java.lang.String[],boolean,int)>($r2, $r0, $z0, $i0);

        return $r1;
    }

    private static final kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence, kotlin.text.Regex, int)
    {
        kotlin.text.Regex $r0;
        int $i0;
        kotlin.sequences.Sequence $r1;
        java.lang.CharSequence $r2;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.text.Regex;

        $i0 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "regex");

        $r1 = virtualinvoke $r0.<kotlin.text.Regex: kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence,int)>($r2, $i0);

        return $r1;
    }

    public static final kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence, char[], boolean, int)
    {
        int $i0;
        java.lang.CharSequence $r0;
        char[] $r1;
        boolean $z0;
        kotlin.sequences.Sequence $r2;
        kotlin.text.StringsKt__StringsKt$splitToSequence$2 $r3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: char[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delimiters");

        $r2 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence,char[],int,boolean,int,int,java.lang.Object)>($r0, $r1, 0, $z0, $i0, 2, null);

        $r3 = new kotlin.text.StringsKt__StringsKt$splitToSequence$2;

        specialinvoke $r3.<kotlin.text.StringsKt__StringsKt$splitToSequence$2: void <init>(java.lang.CharSequence)>($r0);

        $r2 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r2, $r3);

        return $r2;
    }

    public static final kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence, java.lang.String[], boolean, int)
    {
        int $i0;
        java.lang.CharSequence $r0;
        java.lang.String[] $r1;
        boolean $z0;
        kotlin.sequences.Sequence $r2;
        kotlin.text.StringsKt__StringsKt$splitToSequence$1 $r3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delimiters");

        $r2 = staticinvoke <kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.String[],int,boolean,int,int,java.lang.Object)>($r0, $r1, 0, $z0, $i0, 2, null);

        $r3 = new kotlin.text.StringsKt__StringsKt$splitToSequence$1;

        specialinvoke $r3.<kotlin.text.StringsKt__StringsKt$splitToSequence$1: void <init>(java.lang.CharSequence)>($r0);

        $r2 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r2, $r3);

        return $r2;
    }

    static kotlin.sequences.Sequence splitToSequence$default(java.lang.CharSequence, kotlin.text.Regex, int, int, java.lang.Object)
    {
        kotlin.text.Regex $r0;
        java.lang.Object $r1;
        kotlin.sequences.Sequence $r2;
        java.lang.CharSequence $r3;
        int $i0, $i1;

        $r3 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.text.Regex;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "regex");

        $r2 = virtualinvoke $r0.<kotlin.text.Regex: kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence,int)>($r3, $i0);

        return $r2;
    }

    public static kotlin.sequences.Sequence splitToSequence$default(java.lang.CharSequence, char[], boolean, int, int, java.lang.Object)
    {
        char[] $r0;
        kotlin.sequences.Sequence $r1;
        java.lang.CharSequence $r2;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: char[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $z0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $i0 = 0;

     label2:
        $r1 = staticinvoke <kotlin.text.StringsKt: kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence,char[],boolean,int)>($r2, $r0, $z0, $i0);

        return $r1;
    }

    public static kotlin.sequences.Sequence splitToSequence$default(java.lang.CharSequence, java.lang.String[], boolean, int, int, java.lang.Object)
    {
        java.lang.String[] $r0;
        kotlin.sequences.Sequence $r1;
        java.lang.CharSequence $r2;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object $r3;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $z0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $i0 = 0;

     label2:
        $r1 = staticinvoke <kotlin.text.StringsKt: kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence,java.lang.String[],boolean,int)>($r2, $r0, $z0, $i0);

        return $r1;
    }

    public static final boolean startsWith(java.lang.CharSequence, char, boolean)
    {
        char $c0, $c2;
        boolean $z0;
        java.lang.CharSequence $r0;
        int $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>(0);

        $z0 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c2, $c0, $z0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final boolean startsWith(java.lang.CharSequence, java.lang.CharSequence, int, boolean)
    {
        java.lang.CharSequence $r0, $r1;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.String $r2, $r3;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "prefix");

        if $z0 != 0 goto label1;

        $z1 = $r1 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $r2 = (java.lang.String) $r1;

        $r3 = (java.lang.String) $r0;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,int,boolean,int,java.lang.Object)>($r2, $r3, $i0, 0, 4, null);

        return $z0;

     label1:
        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r1, $i0, $r0, 0, $i1, $z0);

        return $z0;
    }

    public static final boolean startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean)
    {
        java.lang.CharSequence $r0, $r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r3;
        int $i0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "prefix");

        if $z0 != 0 goto label1;

        $z1 = $r0 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $z1 = $r1 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $r2 = (java.lang.String) $r0;

        $r3 = (java.lang.String) $r1;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r2, $r3, 0, 2, null);

        return $z0;

     label1:
        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r0, 0, $r1, 0, $i0, $z0);

        return $z0;
    }

    public static boolean startsWith$default(java.lang.CharSequence, char, boolean, int, java.lang.Object)
    {
        char $c0;
        java.lang.Object $r0;
        boolean $z0;
        java.lang.CharSequence $r1;
        int $i1;

        $r1 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $z0 := @parameter2: boolean;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $z0 = 0;

     label1:
        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith(java.lang.CharSequence,char,boolean)>($r1, $c0, $z0);

        return $z0;
    }

    public static boolean startsWith$default(java.lang.CharSequence, java.lang.CharSequence, int, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0, $r2;
        int $i0, $i1;
        java.lang.Object $r1;
        boolean $z0;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i1 := @parameter4: int;

        $r1 := @parameter5: java.lang.Object;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label1;

        $z0 = 0;

     label1:
        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,int,boolean)>($r2, $r0, $i0, $z0);

        return $z0;
    }

    public static boolean startsWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object)
    {
        java.lang.CharSequence $r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0;

        $r2 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r2, $r0, $z0);

        return $z0;
    }

    public static final java.lang.CharSequence subSequence(java.lang.CharSequence, kotlin.ranges.IntRange)
    {
        java.lang.CharSequence $r0;
        kotlin.ranges.IntRange $r1;
        java.lang.Integer $r2;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        return $r0;
    }

    private static final java.lang.CharSequence subSequence(java.lang.String, int, int)
    {
        int $i0, $i1;
        java.lang.CharSequence $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = virtualinvoke $r1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        return $r0;
    }

    private static final java.lang.String substring(java.lang.CharSequence, int, int)
    {
        int $i0, $i1;
        java.lang.CharSequence $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static final java.lang.String substring(java.lang.CharSequence, kotlin.ranges.IntRange)
    {
        java.lang.CharSequence $r0;
        kotlin.ranges.IntRange $r1;
        java.lang.Integer $r2;
        int $i0, $i1;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public static final java.lang.String substring(java.lang.String, kotlin.ranges.IntRange)
    {
        java.lang.String $r0;
        kotlin.ranges.IntRange $r1;
        java.lang.Integer $r2;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getStart()>();

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $r2 = virtualinvoke $r1.<kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()>();

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    static java.lang.String substring$default(java.lang.CharSequence, int, int, int, java.lang.Object)
    {
        int $i0, $i1, $i2;
        java.lang.Object $r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i2 = $i2 & 2;

        if $i2 == 0 goto label1;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static final java.lang.String substringAfter(java.lang.String, char, java.lang.String)
    {
        java.lang.String $r0, $r1;
        char $c0;
        int $i1, $i2;

        $r0 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r1 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "missingDelimiterValue");

        $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, $c0, 0, 0, 6, null);

        if $i1 != -1 goto label1;

        return $r1;

     label1:
        $i1 = $i1 + 1;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static final java.lang.String substringAfter(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0, $i1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "delimiter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "missingDelimiterValue");

        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r1, $r2, 0, 0, 6, null);

        if $i0 != -1 goto label1;

        return $r0;

     label1:
        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r1;
    }

    public static java.lang.String substringAfter$default(java.lang.String, char, java.lang.String, int, java.lang.Object)
    {
        char $c0;
        java.lang.Object $r0;
        java.lang.String $r1, $r2;
        int $i1;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $r2 = $r1;

     label1:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter(java.lang.String,char,java.lang.String)>($r1, $c0, $r2);

        return $r1;
    }

    public static java.lang.String substringAfter$default(java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        java.lang.String $r0, $r2, $r3;
        java.lang.Object $r1;
        int $i0;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r3);

        return $r2;
    }

    public static final java.lang.String substringAfterLast(java.lang.String, char, java.lang.String)
    {
        java.lang.String $r0, $r1;
        char $c0;
        int $i1, $i2;

        $r0 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r1 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "missingDelimiterValue");

        $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, $c0, 0, 0, 6, null);

        if $i1 != -1 goto label1;

        return $r1;

     label1:
        $i1 = $i1 + 1;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static final java.lang.String substringAfterLast(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0, $i1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "delimiter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "missingDelimiterValue");

        $i0 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r1, $r2, 0, 0, 6, null);

        if $i0 != -1 goto label1;

        return $r0;

     label1:
        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r1;
    }

    public static java.lang.String substringAfterLast$default(java.lang.String, char, java.lang.String, int, java.lang.Object)
    {
        char $c0;
        java.lang.Object $r0;
        java.lang.String $r1, $r2;
        int $i1;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $r2 = $r1;

     label1:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)>($r1, $c0, $r2);

        return $r1;
    }

    public static java.lang.String substringAfterLast$default(java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        java.lang.String $r0, $r2, $r3;
        java.lang.Object $r1;
        int $i0;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r3);

        return $r2;
    }

    public static final java.lang.String substringBefore(java.lang.String, char, java.lang.String)
    {
        java.lang.String $r0, $r1;
        char $c0;
        int $i1;

        $r0 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r1 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "missingDelimiterValue");

        $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, $c0, 0, 0, 6, null);

        if $i1 != -1 goto label1;

        return $r1;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static final java.lang.String substringBefore(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delimiter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "missingDelimiterValue");

        $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r0, $r1, 0, 0, 6, null);

        if $i0 != -1 goto label1;

        return $r2;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static java.lang.String substringBefore$default(java.lang.String, char, java.lang.String, int, java.lang.Object)
    {
        char $c0;
        java.lang.Object $r0;
        java.lang.String $r1, $r2;
        int $i1;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $r2 = $r1;

     label1:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringBefore(java.lang.String,char,java.lang.String)>($r1, $c0, $r2);

        return $r1;
    }

    public static java.lang.String substringBefore$default(java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        java.lang.String $r0, $r2, $r3;
        java.lang.Object $r1;
        int $i0;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringBefore(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r3);

        return $r2;
    }

    public static final java.lang.String substringBeforeLast(java.lang.String, char, java.lang.String)
    {
        java.lang.String $r0, $r1;
        char $c0;
        int $i1;

        $r0 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r1 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "missingDelimiterValue");

        $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, $c0, 0, 0, 6, null);

        if $i1 != -1 goto label1;

        return $r1;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static final java.lang.String substringBeforeLast(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delimiter");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "missingDelimiterValue");

        $i0 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r0, $r1, 0, 0, 6, null);

        if $i0 != -1 goto label1;

        return $r2;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)");

        return $r0;
    }

    public static java.lang.String substringBeforeLast$default(java.lang.String, char, java.lang.String, int, java.lang.Object)
    {
        char $c0;
        java.lang.Object $r0;
        java.lang.String $r1, $r2;
        int $i1;

        $r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label1;

        $r2 = $r1;

     label1:
        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringBeforeLast(java.lang.String,char,java.lang.String)>($r1, $c0, $r2);

        return $r1;
    }

    public static java.lang.String substringBeforeLast$default(java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        java.lang.String $r0, $r2, $r3;
        java.lang.Object $r1;
        int $i0;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $r3 = $r2;

     label1:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringBeforeLast(java.lang.String,java.lang.String,java.lang.String)>($r2, $r0, $r3);

        return $r2;
    }

    public static final boolean toBooleanStrict(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "true");

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "false");

        if $z0 == 0 goto label3;

        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The string doesn\'t represent a boolean value: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    public static final java.lang.Boolean toBooleanStrictOrNull(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.lang.Boolean $r1;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "true");

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r1;

     label1:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "false");

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r1;

     label2:
        return null;
    }

    public static final java.lang.CharSequence trim(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        char $c3;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + -1;

        $i0 = 0;

        $z0 = 0;

     label1:
        if $i0 > $i1 goto label7;

        if $z0 != 0 goto label2;

        $i2 = $i0;

        goto label3;

     label2:
        $i2 = $i1;

     label3:
        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $z1 = staticinvoke <kotlin.text.CharsKt: boolean isWhitespace(char)>($c3);

        if $z0 != 0 goto label5;

        if $z1 != 0 goto label4;

        $z0 = 1;

        goto label1;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        if $z1 != 0 goto label6;

        goto label7;

     label6:
        $i1 = $i1 + -1;

        goto label1;

     label7:
        $i1 = $i1 + 1;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        return $r0;
    }

    public static final java.lang.CharSequence trim(java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        char $c3;
        java.lang.Character $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + -1;

        $i0 = 0;

        $z0 = 0;

     label1:
        if $i0 > $i1 goto label7;

        if $z0 != 0 goto label2;

        $i2 = $i0;

        goto label3;

     label2:
        $i2 = $i1;

     label3:
        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z1 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label5;

        if $z1 != 0 goto label4;

        $z0 = 1;

        goto label1;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        if $z1 != 0 goto label6;

        goto label7;

     label6:
        $i1 = $i1 + -1;

        goto label1;

     label7:
        $i1 = $i1 + 1;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        return $r1;
    }

    public static final transient java.lang.CharSequence trim(java.lang.CharSequence, char[])
    {
        char[] $r0;
        java.lang.CharSequence $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        char $c3;

        $r1 := @parameter0: java.lang.CharSequence;

        $r0 := @parameter1: char[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "chars");

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + -1;

        $i0 = 0;

        $z0 = 0;

     label1:
        if $i0 > $i1 goto label7;

        if $z0 != 0 goto label2;

        $i2 = $i0;

        goto label3;

     label2:
        $i2 = $i1;

     label3:
        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

        $z1 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(char[],char)>($r0, $c3);

        if $z0 != 0 goto label5;

        if $z1 != 0 goto label4;

        $z0 = 1;

        goto label1;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        if $z1 != 0 goto label6;

        goto label7;

     label6:
        $i1 = $i1 + -1;

        goto label1;

     label7:
        $i1 = $i1 + 1;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        return $r1;
    }

    private static final java.lang.String trim(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.CharSequence $r1;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

    public static final java.lang.String trim(java.lang.String, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        char $c3;
        java.lang.Character $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        java.lang.CharSequence $r5;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "predicate");

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + -1;

        $i0 = 0;

        $z0 = 0;

     label1:
        if $i0 > $i1 goto label7;

        if $z0 != 0 goto label2;

        $i2 = $i0;

        goto label3;

     label2:
        $i2 = $i1;

     label3:
        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z1 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label5;

        if $z1 != 0 goto label4;

        $z0 = 1;

        goto label1;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        if $z1 != 0 goto label6;

        goto label7;

     label6:
        $i1 = $i1 + -1;

        goto label1;

     label7:
        $i1 = $i1 + 1;

        $r5 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r1 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static final transient java.lang.String trim(java.lang.String, char[])
    {
        char[] $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        char $c3;
        java.lang.CharSequence $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: char[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "chars");

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + -1;

        $i0 = 0;

        $z0 = 0;

     label1:
        if $i0 > $i1 goto label7;

        if $z0 != 0 goto label2;

        $i2 = $i0;

        goto label3;

     label2:
        $i2 = $i1;

     label3:
        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

        $z1 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(char[],char)>($r0, $c3);

        if $z0 != 0 goto label5;

        if $z1 != 0 goto label4;

        $z0 = 1;

        goto label1;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        if $z1 != 0 goto label6;

        goto label7;

     label6:
        $i1 = $i1 + -1;

        goto label1;

     label7:
        $i1 = $i1 + 1;

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static final java.lang.CharSequence trimEnd(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = $i0 + -1;

        if $i0 < 0 goto label4;

     label1:
        $i1 = $i0 + -1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = staticinvoke <kotlin.text.CharsKt: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label2;

        $i0 = $i0 + 1;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        return $r0;

     label2:
        if $i1 >= 0 goto label3;

        goto label4;

     label3:
        $i0 = $i1;

        goto label1;

     label4:
        return "";
    }

    public static final java.lang.CharSequence trimEnd(java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        java.lang.CharSequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        char $c2;
        java.lang.Character $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + -1;

        if $i1 < 0 goto label3;

     label1:
        $i0 = $i1 + -1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i1 + 1;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        return $r0;

     label2:
        if $i0 < 0 goto label3;

        $i1 = $i0;

        goto label1;

     label3:
        return "";
    }

    public static final transient java.lang.CharSequence trimEnd(java.lang.CharSequence, char[])
    {
        int $i0, $i1;
        java.lang.CharSequence $r0;
        char[] $r1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: char[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "chars");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(char[],char)>($r1, $c2);

        if $z0 != 0 goto label2;

        $i0 = $i1 + 1;

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        return $r0;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        return "";
    }

    private static final java.lang.String trimEnd(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.CharSequence $r1;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trimEnd(java.lang.CharSequence)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

    public static final java.lang.String trimEnd(java.lang.String, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        java.lang.String $r0;
        kotlin.jvm.functions.Function1 $r1;
        char $c2;
        java.lang.Character $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = $i1 + 1;

        $r3 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        goto label5;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        $r3 = "";

     label5:
        $r0 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

    public static final transient java.lang.String trimEnd(java.lang.String, char[])
    {
        int $i0, $i1;
        java.lang.String $r0;
        char[] $r1;
        char $c2;
        boolean $z0;
        java.lang.Object $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "chars");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i0 + -1;

        if $i1 < 0 goto label4;

     label1:
        $i0 = $i1 + -1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(char[],char)>($r1, $c2);

        if $z0 != 0 goto label2;

        $i0 = $i1 + 1;

        $r2 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        goto label5;

     label2:
        if $i0 >= 0 goto label3;

        goto label4;

     label3:
        $i1 = $i0;

        goto label1;

     label4:
        $r2 = "";

     label5:
        $r0 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

    public static final java.lang.CharSequence trimStart(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = staticinvoke <kotlin.text.CharsKt: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        return $r0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return "";
    }

    public static final java.lang.CharSequence trimStart(java.lang.CharSequence, kotlin.jvm.functions.Function1)
    {
        java.lang.CharSequence $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        char $c2;
        java.lang.Character $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        return $r0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return "";
    }

    public static final transient java.lang.CharSequence trimStart(java.lang.CharSequence, char[])
    {
        java.lang.CharSequence $r0;
        char[] $r1;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: char[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "chars");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(char[],char)>($r1, $c2);

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        return $r0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return "";
    }

    private static final java.lang.String trimStart(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.CharSequence $r1;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trimStart(java.lang.CharSequence)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

    public static final java.lang.String trimStart(java.lang.String, kotlin.jvm.functions.Function1)
    {
        java.lang.String $r0;
        kotlin.jvm.functions.Function1 $r1;
        int $i0, $i1;
        char $c2;
        java.lang.Character $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "predicate");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r3 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        goto label4;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r3 = "";

     label4:
        $r0 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

    public static final transient java.lang.String trimStart(java.lang.String, char[])
    {
        java.lang.String $r0;
        char[] $r1;
        int $i0, $i1;
        char $c2;
        boolean $z0;
        java.lang.Object $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "chars");

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(char[],char)>($r1, $c2);

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r2 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        goto label4;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r2 = "";

     label4:
        $r0 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r0;
    }

