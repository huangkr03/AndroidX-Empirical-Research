androidx.compose.ui.test.MultiModalInjectionScopeImpl
<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>
<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.semantics.SemanticsNode _semanticsNode>
<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.InputDispatcher _inputDispatcher>
<androidx.compose.ui.test.MultiModalInjectionScopeImpl: kotlin.Lazy boundsInRoot$delegate>
<androidx.compose.ui.test.MultiModalInjectionScopeImpl: kotlin.Lazy visibleSize$delegate>
<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.TouchInjectionScope touchScope>
<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.MouseInjectionScope mouseScope>
<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.KeyInjectionScope keyScope>
<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.RotaryInjectionScope rotaryScope>
    public void <init>(androidx.compose.ui.semantics.SemanticsNode, androidx.compose.ui.test.TestContext)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        androidx.compose.ui.semantics.SemanticsNode r1, $r6;
        androidx.compose.ui.test.TestContext r2;
        java.lang.String r3, $r24;
        androidx.compose.ui.layout.LayoutInfo $r4;
        androidx.compose.ui.unit.Density $r5;
        androidx.compose.ui.node.RootForTest $r7;
        androidx.compose.ui.test.InputDispatcher $r8;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2 $r9;
        kotlin.jvm.functions.Function0 $r10, $r13;
        kotlin.Lazy $r11, $r14;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2 $r12;
        androidx.compose.ui.test.TouchInjectionScopeImpl $r15;
        androidx.compose.ui.test.TouchInjectionScope $r16;
        androidx.compose.ui.test.MouseInjectionScopeImpl $r17;
        androidx.compose.ui.test.MouseInjectionScope $r18;
        androidx.compose.ui.test.KeyInjectionScopeImpl $r19;
        androidx.compose.ui.test.KeyInjectionScope $r20;
        androidx.compose.ui.test.RotaryInjectionScopeImpl $r21;
        androidx.compose.ui.test.RotaryInjectionScope $r22;
        java.lang.IllegalStateException $r23;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r1 := @parameter0: androidx.compose.ui.semantics.SemanticsNode;

        r2 := @parameter1: androidx.compose.ui.test.TestContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "node");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "testContext");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = virtualinvoke r1.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r5 = interfaceinvoke $r4.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.unit.Density getDensity()>();

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0> = $r5;

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.semantics.SemanticsNode _semanticsNode> = r1;

        $r6 = specialinvoke r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.semantics.SemanticsNode getSemanticsNode()>();

        $r7 = virtualinvoke $r6.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.node.RootForTest getRoot()>();

        if $r7 != null goto label1;

        r3 = "Required value was null.";

        $r23 = new java.lang.IllegalStateException;

        $r24 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label1:
        $r8 = staticinvoke <androidx.compose.ui.test.AndroidInputDispatcher_androidKt: androidx.compose.ui.test.InputDispatcher createInputDispatcher(androidx.compose.ui.test.TestContext,androidx.compose.ui.node.RootForTest)>(r2, $r7);

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.InputDispatcher _inputDispatcher> = $r8;

        $r9 = new androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2;

        specialinvoke $r9.<androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2: void <init>(androidx.compose.ui.test.MultiModalInjectionScopeImpl)>(r0);

        $r10 = (kotlin.jvm.functions.Function0) $r9;

        $r11 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r10);

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: kotlin.Lazy boundsInRoot$delegate> = $r11;

        $r12 = new androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2;

        specialinvoke $r12.<androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2: void <init>(androidx.compose.ui.test.MultiModalInjectionScopeImpl)>(r0);

        $r13 = (kotlin.jvm.functions.Function0) $r12;

        $r14 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r13);

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: kotlin.Lazy visibleSize$delegate> = $r14;

        $r15 = new androidx.compose.ui.test.TouchInjectionScopeImpl;

        specialinvoke $r15.<androidx.compose.ui.test.TouchInjectionScopeImpl: void <init>(androidx.compose.ui.test.MultiModalInjectionScopeImpl)>(r0);

        $r16 = (androidx.compose.ui.test.TouchInjectionScope) $r15;

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.TouchInjectionScope touchScope> = $r16;

        $r17 = new androidx.compose.ui.test.MouseInjectionScopeImpl;

        specialinvoke $r17.<androidx.compose.ui.test.MouseInjectionScopeImpl: void <init>(androidx.compose.ui.test.MultiModalInjectionScopeImpl)>(r0);

        $r18 = (androidx.compose.ui.test.MouseInjectionScope) $r17;

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.MouseInjectionScope mouseScope> = $r18;

        $r19 = new androidx.compose.ui.test.KeyInjectionScopeImpl;

        specialinvoke $r19.<androidx.compose.ui.test.KeyInjectionScopeImpl: void <init>(androidx.compose.ui.test.MultiModalInjectionScopeImpl)>(r0);

        $r20 = (androidx.compose.ui.test.KeyInjectionScope) $r19;

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.KeyInjectionScope keyScope> = $r20;

        $r21 = new androidx.compose.ui.test.RotaryInjectionScopeImpl;

        specialinvoke $r21.<androidx.compose.ui.test.RotaryInjectionScopeImpl: void <init>(androidx.compose.ui.test.MultiModalInjectionScopeImpl)>(r0);

        $r22 = (androidx.compose.ui.test.RotaryInjectionScope) $r21;

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.RotaryInjectionScope rotaryScope> = $r22;

        return;
    }

    public float getDensity()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        androidx.compose.ui.unit.Density $r1;
        float $f0;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: float getDensity()>();

        return $f0;
    }

    public float getFontScale()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        androidx.compose.ui.unit.Density $r1;
        float $f0;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: float getFontScale()>();

        return $f0;
    }

    public int roundToPx-0680j_4(float)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        float $f0;
        androidx.compose.ui.unit.Density $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $i0 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: int roundToPx-0680j_4(float)>($f0);

        return $i0;
    }

    public int roundToPx--R2X_6o(long)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        long $l0;
        androidx.compose.ui.unit.Density $r1;
        int $i1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $i1 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: int roundToPx--R2X_6o(long)>($l0);

        return $i1;
    }

    public float toDp-GaN1DYA(long)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        long $l0;
        androidx.compose.ui.unit.Density $r1;
        float $f0;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: float toDp-GaN1DYA(long)>($l0);

        return $f0;
    }

    public float toDp-u2uoSUM(float)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        float $f0, $f1;
        androidx.compose.ui.unit.Density $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $f1 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(float)>($f0);

        return $f1;
    }

    public float toDp-u2uoSUM(int)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        int $i0;
        androidx.compose.ui.unit.Density $r1;
        float $f0;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: float toDp-u2uoSUM(int)>($i0);

        return $f0;
    }

    public long toDpSize-k-rfVVM(long)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        long $l0, $l1;
        androidx.compose.ui.unit.Density $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $l1 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: long toDpSize-k-rfVVM(long)>($l0);

        return $l1;
    }

    public float toPx-0680j_4(float)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        float $f0, $f1;
        androidx.compose.ui.unit.Density $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $f1 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: float toPx-0680j_4(float)>($f0);

        return $f1;
    }

    public float toPx--R2X_6o(long)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        long $l0;
        androidx.compose.ui.unit.Density $r1;
        float $f0;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $f0 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: float toPx--R2X_6o(long)>($l0);

        return $f0;
    }

    public androidx.compose.ui.geometry.Rect toRect(androidx.compose.ui.unit.DpRect)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        androidx.compose.ui.unit.DpRect $r1;
        androidx.compose.ui.unit.Density $r2;
        androidx.compose.ui.geometry.Rect $r3;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r1 := @parameter0: androidx.compose.ui.unit.DpRect;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $r3 = interfaceinvoke $r2.<androidx.compose.ui.unit.Density: androidx.compose.ui.geometry.Rect toRect(androidx.compose.ui.unit.DpRect)>($r1);

        return $r3;
    }

    public long toSize-XkaWNTQ(long)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        long $l0, $l1;
        androidx.compose.ui.unit.Density $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $l0 := @parameter0: long;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $l1 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: long toSize-XkaWNTQ(long)>($l0);

        return $l1;
    }

    public long toSp-0xMU5do(float)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        float $f0;
        androidx.compose.ui.unit.Density $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: long toSp-0xMU5do(float)>($f0);

        return $l0;
    }

    public long toSp-kPz2Gy4(float)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        float $f0;
        androidx.compose.ui.unit.Density $r1;
        long $l0;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: long toSp-kPz2Gy4(float)>($f0);

        return $l0;
    }

    public long toSp-kPz2Gy4(int)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        int $i0;
        androidx.compose.ui.unit.Density $r1;
        long $l1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.unit.Density $$delegate_0>;

        $l1 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: long toSp-kPz2Gy4(int)>($i0);

        return $l1;
    }

    private final androidx.compose.ui.semantics.SemanticsNode getSemanticsNode()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        androidx.compose.ui.semantics.SemanticsNode $r1;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.semantics.SemanticsNode _semanticsNode>;

        if $r1 != null goto label1;

        $r4 = "Can\'t query SemanticsNode, InjectionScope has already been disposed";

        $r2 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return $r1;
    }

    public final androidx.compose.ui.test.InputDispatcher getInputDispatcher$ui_test_release()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        androidx.compose.ui.test.InputDispatcher $r1;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.InputDispatcher _inputDispatcher>;

        if $r1 != null goto label1;

        $r4 = "Can\'t send gesture, InjectionScope has already been disposed";

        $r2 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return $r1;
    }

    private final androidx.compose.ui.geometry.Rect getBoundsInRoot()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.compose.ui.geometry.Rect $r3;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: kotlin.Lazy boundsInRoot$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.compose.ui.geometry.Rect) $r2;

        return $r3;
    }

    public long getVisibleSize-YbymL2g()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        androidx.compose.ui.unit.IntSize $r3;
        long $l0;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: kotlin.Lazy visibleSize$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (androidx.compose.ui.unit.IntSize) $r2;

        $l0 = virtualinvoke $r3.<androidx.compose.ui.unit.IntSize: long unbox-impl()>();

        return $l0;
    }

    public final long localToRoot-MK-Hz9U$ui_test_release(long)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        long l0, $l1, $l2;
        androidx.compose.ui.geometry.Rect $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        l0 := @parameter0: long;

        $r1 = specialinvoke r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        $l1 = virtualinvoke $r1.<androidx.compose.ui.geometry.Rect: long getTopLeft-F1C5BW0()>();

        $l2 = staticinvoke <androidx.compose.ui.geometry.Offset: long plus-MK-Hz9U(long,long)>(l0, $l1);

        return $l2;
    }

    public final long rootToLocal-MK-Hz9U$ui_test_release(long)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        long l0, $l1, $l2;
        androidx.compose.ui.geometry.Rect $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        l0 := @parameter0: long;

        $r1 = specialinvoke r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        $l1 = virtualinvoke $r1.<androidx.compose.ui.geometry.Rect: long getTopLeft-F1C5BW0()>();

        $l2 = staticinvoke <androidx.compose.ui.geometry.Offset: long minus-MK-Hz9U(long,long)>(l0, $l1);

        return $l2;
    }

    public androidx.compose.ui.platform.ViewConfiguration getViewConfiguration()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        androidx.compose.ui.semantics.SemanticsNode $r1;
        androidx.compose.ui.layout.LayoutInfo $r2;
        androidx.compose.ui.platform.ViewConfiguration $r3;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r1 = specialinvoke r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.semantics.SemanticsNode getSemanticsNode()>();

        $r2 = virtualinvoke $r1.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.layout.LayoutInfo getLayoutInfo()>();

        $r3 = interfaceinvoke $r2.<androidx.compose.ui.layout.LayoutInfo: androidx.compose.ui.platform.ViewConfiguration getViewConfiguration()>();

        return $r3;
    }

    public final void dispose$ui_test_release()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        androidx.compose.ui.test.InputDispatcher r1, r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.semantics.SemanticsNode _semanticsNode> = null;

        $r4 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.InputDispatcher _inputDispatcher>;

        if $r4 == null goto label6;

        r1 = $r4;

        r2 = r1;

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.InputDispatcher _inputDispatcher> = null;

     label1:
        virtualinvoke r2.<androidx.compose.ui.test.InputDispatcher: void flush()>();

     label2:
        virtualinvoke r2.<androidx.compose.ui.test.InputDispatcher: void dispose()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        virtualinvoke r2.<androidx.compose.ui.test.InputDispatcher: void dispose()>();

        throw r3;

     label5:
        goto label6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void advanceEventTime(long)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        long l0;
        androidx.compose.ui.test.InputDispatcher $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.InputDispatcher getInputDispatcher$ui_test_release()>();

        virtualinvoke $r1.<androidx.compose.ui.test.InputDispatcher: void advanceEventTime(long)>(l0);

        return;
    }

    private static void getMouseScope$annotations()
    {
        return;
    }

    private static void getKeyScope$annotations()
    {
        return;
    }

    private static void getRotaryScope$annotations()
    {
        return;
    }

    public void touch(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.test.TouchInjectionScope $r2;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r2 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.TouchInjectionScope touchScope>;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return;
    }

    public void mouse(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.test.MouseInjectionScope $r2;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r2 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.MouseInjectionScope mouseScope>;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return;
    }

    public void key(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.test.KeyInjectionScope $r2;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r2 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.KeyInjectionScope keyScope>;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return;
    }

    public void rotary(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.ui.test.RotaryInjectionScope $r2;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $r2 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.test.RotaryInjectionScope rotaryScope>;

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        return;
    }

    public static final androidx.compose.ui.semantics.SemanticsNode access$getSemanticsNode(androidx.compose.ui.test.MultiModalInjectionScopeImpl)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r0;
        androidx.compose.ui.semantics.SemanticsNode $r1;

        $r0 := @parameter0: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r1 = specialinvoke $r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.semantics.SemanticsNode getSemanticsNode()>();

        return $r1;
    }

    public static final androidx.compose.ui.geometry.Rect access$getBoundsInRoot(androidx.compose.ui.test.MultiModalInjectionScopeImpl)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r0;
        androidx.compose.ui.geometry.Rect $r1;

        $r0 := @parameter0: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        $r1 = specialinvoke $r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        return $r1;
    }

androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2
<androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2: androidx.compose.ui.test.MultiModalInjectionScopeImpl this$0>
    void <init>(androidx.compose.ui.test.MultiModalInjectionScopeImpl)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2 r0;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2;

        $r1 := @parameter0: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2: androidx.compose.ui.test.MultiModalInjectionScopeImpl this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.compose.ui.geometry.Rect invoke()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2 r0;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r1;
        androidx.compose.ui.semantics.SemanticsNode $r2;
        androidx.compose.ui.geometry.Rect $r3;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2: androidx.compose.ui.test.MultiModalInjectionScopeImpl this$0>;

        $r2 = staticinvoke <androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.semantics.SemanticsNode access$getSemanticsNode(androidx.compose.ui.test.MultiModalInjectionScopeImpl)>($r1);

        $r3 = virtualinvoke $r2.<androidx.compose.ui.semantics.SemanticsNode: androidx.compose.ui.geometry.Rect getBoundsInRoot()>();

        return $r3;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2 r0;
        androidx.compose.ui.geometry.Rect $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2;

        $r1 = virtualinvoke r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl$boundsInRoot$2: androidx.compose.ui.geometry.Rect invoke()>();

        return $r1;
    }

androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2
<androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2: androidx.compose.ui.test.MultiModalInjectionScopeImpl this$0>
    void <init>(androidx.compose.ui.test.MultiModalInjectionScopeImpl)
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2 r0;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2;

        $r1 := @parameter0: androidx.compose.ui.test.MultiModalInjectionScopeImpl;

        r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2: androidx.compose.ui.test.MultiModalInjectionScopeImpl this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final long invoke-YbymL2g()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2 r0;
        androidx.compose.ui.test.MultiModalInjectionScopeImpl $r1, $r3;
        androidx.compose.ui.geometry.Rect $r2, $r4;
        float $f0, $f1;
        int $i0, $i1;
        long $l2;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2;

        $r1 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2: androidx.compose.ui.test.MultiModalInjectionScopeImpl this$0>;

        $r2 = staticinvoke <androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.geometry.Rect access$getBoundsInRoot(androidx.compose.ui.test.MultiModalInjectionScopeImpl)>($r1);

        $f0 = virtualinvoke $r2.<androidx.compose.ui.geometry.Rect: float getWidth()>();

        $i0 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f0);

        $r3 = r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2: androidx.compose.ui.test.MultiModalInjectionScopeImpl this$0>;

        $r4 = staticinvoke <androidx.compose.ui.test.MultiModalInjectionScopeImpl: androidx.compose.ui.geometry.Rect access$getBoundsInRoot(androidx.compose.ui.test.MultiModalInjectionScopeImpl)>($r3);

        $f1 = virtualinvoke $r4.<androidx.compose.ui.geometry.Rect: float getHeight()>();

        $i1 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f1);

        $l2 = staticinvoke <androidx.compose.ui.unit.IntSizeKt: long IntSize(int,int)>($i0, $i1);

        return $l2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2 r0;
        long $l0;
        androidx.compose.ui.unit.IntSize $r1;

        r0 := @this: androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2;

        $l0 = virtualinvoke r0.<androidx.compose.ui.test.MultiModalInjectionScopeImpl$visibleSize$2: long invoke-YbymL2g()>();

        $r1 = staticinvoke <androidx.compose.ui.unit.IntSize: androidx.compose.ui.unit.IntSize box-impl(long)>($l0);

        return $r1;
    }

