androidx.test.ext.truth.os.BundleSubject
<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>
    public static androidx.test.ext.truth.os.BundleSubject assertThat(android.os.Bundle)
    {
        android.os.Bundle r0;
        com.google.common.truth.Subject$Factory $r1;
        com.google.common.truth.SimpleSubjectBuilder $r2;
        com.google.common.truth.Subject $r3;
        androidx.test.ext.truth.os.BundleSubject $r4;

        r0 := @parameter0: android.os.Bundle;

        $r1 = staticinvoke <androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.Subject$Factory bundles()>();

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.SimpleSubjectBuilder assertAbout(com.google.common.truth.Subject$Factory)>($r1);

        $r3 = virtualinvoke $r2.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r0);

        $r4 = (androidx.test.ext.truth.os.BundleSubject) $r3;

        return $r4;
    }

    public androidx.test.ext.truth.os.ParcelableSubject parcelable(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        com.google.common.truth.Subject$Factory $r4;
        com.google.common.truth.SimpleSubjectBuilder $r5;
        android.os.Bundle $r6;
        android.os.Parcelable $r7;
        com.google.common.truth.Subject $r8;
        androidx.test.ext.truth.os.ParcelableSubject $r9;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getParcelable(%s)", $r2);

        $r4 = staticinvoke <androidx.test.ext.truth.os.ParcelableSubject: com.google.common.truth.Subject$Factory parcelables()>();

        $r5 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r4);

        $r6 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $r7 = virtualinvoke $r6.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>($r7);

        $r9 = (androidx.test.ext.truth.os.ParcelableSubject) $r8;

        return $r9;
    }

    public com.google.common.truth.BooleanSubject bool(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.os.Bundle $r4;
        boolean $z0;
        java.lang.Boolean $r5;
        com.google.common.truth.BooleanSubject $r6;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getBoolean(%s)", $r2);

        $r4 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $z0 = virtualinvoke $r4.<android.os.Bundle: boolean getBoolean(java.lang.String)>(r1);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.BooleanSubject that(java.lang.Boolean)>($r5);

        return $r6;
    }

    public com.google.common.truth.DoubleSubject doubleFloat(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.os.Bundle $r4;
        double $d0;
        java.lang.Double $r5;
        com.google.common.truth.DoubleSubject $r6;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getDouble(%s)", $r2);

        $r4 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $d0 = virtualinvoke $r4.<android.os.Bundle: double getDouble(java.lang.String)>(r1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.DoubleSubject that(java.lang.Double)>($r5);

        return $r6;
    }

    public com.google.common.truth.IntegerSubject integer(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.os.Bundle $r4;
        int $i0;
        java.lang.Integer $r5;
        com.google.common.truth.IntegerSubject $r6;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getInt(%s)", $r2);

        $r4 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $i0 = virtualinvoke $r4.<android.os.Bundle: int getInt(java.lang.String)>(r1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r5);

        return $r6;
    }

    public com.google.common.truth.IterableSubject parcelableArrayList(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.os.Bundle $r4;
        java.util.ArrayList $r5;
        com.google.common.truth.IterableSubject $r6;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getParcelableArrayList(%s)", $r2);

        $r4 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $r5 = virtualinvoke $r4.<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IterableSubject that(java.lang.Iterable)>($r5);

        return $r6;
    }

    public com.google.common.truth.IterableSubject stringArrayList(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.os.Bundle $r4;
        java.util.ArrayList $r5;
        com.google.common.truth.IterableSubject $r6;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getStringArrayList(%s)", $r2);

        $r4 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $r5 = virtualinvoke $r4.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IterableSubject that(java.lang.Iterable)>($r5);

        return $r6;
    }

    public com.google.common.truth.LongSubject longInt(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.os.Bundle $r4;
        long $l0;
        java.lang.Long $r5;
        com.google.common.truth.LongSubject $r6;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getLong(%s)", $r2);

        $r4 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $l0 = virtualinvoke $r4.<android.os.Bundle: long getLong(java.lang.String)>(r1);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.LongSubject that(java.lang.Long)>($r5);

        return $r6;
    }

    public com.google.common.truth.ObjectArraySubject stringArray(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.os.Bundle $r4;
        java.lang.String[] $r5;
        com.google.common.truth.ObjectArraySubject $r6;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getStringArray(%s)", $r2);

        $r4 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $r5 = virtualinvoke $r4.<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.ObjectArraySubject that(java.lang.Object[])>($r5);

        return $r6;
    }

    public com.google.common.truth.StringSubject string(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1, $r5;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.os.Bundle $r4;
        com.google.common.truth.StringSubject $r6;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getString(%s)", $r2);

        $r4 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $r5 = virtualinvoke $r4.<android.os.Bundle: java.lang.String getString(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.StringSubject that(java.lang.String)>($r5);

        return $r6;
    }

    public static com.google.common.truth.Subject$Factory bundles()
    {
        androidx.test.ext.truth.os.BundleSubject$$ExternalSyntheticLambda0 $r0;

        $r0 = <androidx.test.ext.truth.os.BundleSubject$$ExternalSyntheticLambda0: androidx.test.ext.truth.os.BundleSubject$$ExternalSyntheticLambda0 INSTANCE>;

        return $r0;
    }

    public com.google.common.truth.Subject parcelableAsType(java.lang.String, com.google.common.truth.Subject$Factory)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        com.google.common.truth.Subject$Factory r2;
        java.lang.Object[] $r3;
        com.google.common.truth.StandardSubjectBuilder $r4;
        com.google.common.truth.SimpleSubjectBuilder $r5;
        android.os.Bundle $r6;
        android.os.Parcelable $r7;
        com.google.common.truth.Subject $r8;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.google.common.truth.Subject$Factory;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getParcelable(%s)", $r3);

        $r5 = virtualinvoke $r4.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>(r2);

        $r6 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $r7 = virtualinvoke $r6.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>($r7);

        return $r8;
    }

    public com.google.common.truth.Subject serializable(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        com.google.common.truth.StandardSubjectBuilder $r3;
        android.os.Bundle $r4;
        java.io.Serializable $r5;
        com.google.common.truth.Subject $r6;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("getSerializable(%s)", $r2);

        $r4 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $r5 = virtualinvoke $r4.<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>($r5);

        return $r6;
    }

    void <init>(com.google.common.truth.FailureMetadata, android.os.Bundle)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        com.google.common.truth.FailureMetadata r1;
        android.os.Bundle r2;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: com.google.common.truth.FailureMetadata;

        r2 := @parameter1: android.os.Bundle;

        specialinvoke r0.<com.google.common.truth.Subject: void <init>(com.google.common.truth.FailureMetadata,java.lang.Object)>(r1, r2);

        r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual> = r2;

        return;
    }

    public void containsKey(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1, r2, $r7;
        android.os.Bundle $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;
        com.google.common.truth.Fact $r8;
        com.google.common.truth.Fact[] $r9;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $z0 = virtualinvoke $r3.<android.os.Bundle: boolean containsKey(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        r2 = r1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected to contain key ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r7);

        $r9 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r8, $r9);

     label1:
        return;
    }

    public void doesNotContainKey(java.lang.String)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        java.lang.String r1, r2, $r7;
        android.os.Bundle $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;
        com.google.common.truth.Fact $r8;
        com.google.common.truth.Fact[] $r9;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $z0 = virtualinvoke $r3.<android.os.Bundle: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        r2 = r1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected to not contain key ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r7);

        $r9 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r8, $r9);

     label1:
        return;
    }

    public void hasSize(int)
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        com.google.common.truth.StandardSubjectBuilder $r2;
        android.os.Bundle $r3;
        java.lang.Integer $r4, $r6;
        com.google.common.truth.IntegerSubject $r5;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("size()", $r1);

        $r3 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $i1 = virtualinvoke $r3.<android.os.Bundle: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5 = virtualinvoke $r2.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.IntegerSubject that(java.lang.Integer)>($r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r5.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r6);

        return;
    }

    public void isEmpty()
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        android.os.Bundle $r1;
        boolean $z0;
        com.google.common.truth.Fact $r2;
        com.google.common.truth.Fact[] $r3;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        $r1 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("expected to be empty");

        $r3 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r2, $r3);

     label1:
        return;
    }

    public void isNotEmpty()
    {
        androidx.test.ext.truth.os.BundleSubject r0;
        android.os.Bundle $r1;
        boolean $z0;
        com.google.common.truth.Fact $r2;
        com.google.common.truth.Fact[] $r3;

        r0 := @this: androidx.test.ext.truth.os.BundleSubject;

        $r1 = r0.<androidx.test.ext.truth.os.BundleSubject: android.os.Bundle actual>;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("expected to be non-empty");

        $r3 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.test.ext.truth.os.BundleSubject: void failWithActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r2, $r3);

     label1:
        return;
    }

