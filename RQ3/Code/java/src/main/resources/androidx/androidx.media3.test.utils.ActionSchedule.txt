androidx.media3.test.utils.ActionSchedule
<androidx.media3.test.utils.ActionSchedule: androidx.media3.test.utils.ActionSchedule$ActionNode rootNode>
<androidx.media3.test.utils.ActionSchedule: androidx.media3.test.utils.ActionSchedule$CallbackAction callbackAction>
    private void <init>(androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.test.utils.ActionSchedule$CallbackAction)
    {
        androidx.media3.test.utils.ActionSchedule r0;
        androidx.media3.test.utils.ActionSchedule$ActionNode r1;
        androidx.media3.test.utils.ActionSchedule$CallbackAction r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r2 := @parameter1: androidx.media3.test.utils.ActionSchedule$CallbackAction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.ActionSchedule: androidx.media3.test.utils.ActionSchedule$ActionNode rootNode> = r1;

        r0.<androidx.media3.test.utils.ActionSchedule: androidx.media3.test.utils.ActionSchedule$CallbackAction callbackAction> = r2;

        return;
    }

    void start(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$Callback)
    {
        androidx.media3.test.utils.ActionSchedule r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$Callback r5;
        androidx.media3.test.utils.ActionSchedule$CallbackAction $r6;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r7;

        r0 := @this: androidx.media3.test.utils.ActionSchedule;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$Callback;

        $r6 = r0.<androidx.media3.test.utils.ActionSchedule: androidx.media3.test.utils.ActionSchedule$CallbackAction callbackAction>;

        virtualinvoke $r6.<androidx.media3.test.utils.ActionSchedule$CallbackAction: void setCallback(androidx.media3.test.utils.ActionSchedule$Callback)>(r5);

        $r7 = r0.<androidx.media3.test.utils.ActionSchedule: androidx.media3.test.utils.ActionSchedule$ActionNode rootNode>;

        virtualinvoke $r7.<androidx.media3.test.utils.ActionSchedule$ActionNode: void schedule(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper)>(r1, r2, r3, r4);

        return;
    }

    void <init>(androidx.media3.test.utils.ActionSchedule$ActionNode, androidx.media3.test.utils.ActionSchedule$CallbackAction, androidx.media3.test.utils.ActionSchedule$1)
    {
        androidx.media3.test.utils.ActionSchedule r0;
        androidx.media3.test.utils.ActionSchedule$ActionNode r1;
        androidx.media3.test.utils.ActionSchedule$CallbackAction r2;
        androidx.media3.test.utils.ActionSchedule$1 r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r2 := @parameter1: androidx.media3.test.utils.ActionSchedule$CallbackAction;

        r3 := @parameter2: androidx.media3.test.utils.ActionSchedule$1;

        specialinvoke r0.<androidx.media3.test.utils.ActionSchedule: void <init>(androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.test.utils.ActionSchedule$CallbackAction)>(r1, r2);

        return;
    }

androidx.media3.test.utils.ActionSchedule$1
androidx.media3.test.utils.ActionSchedule$ActionNode$1
<androidx.media3.test.utils.ActionSchedule$ActionNode$1: androidx.media3.test.utils.ActionSchedule$ActionNode this$0>
    void <init>(androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode$1 r0;
        androidx.media3.test.utils.ActionSchedule$ActionNode r1;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$ActionNode$1;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r0.<androidx.media3.test.utils.ActionSchedule$ActionNode$1: androidx.media3.test.utils.ActionSchedule$ActionNode this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode$1 r0;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        androidx.media3.test.utils.Action $r2;
        androidx.media3.exoplayer.ExoPlayer $r4;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r6;
        android.view.Surface $r8;
        androidx.media3.common.util.HandlerWrapper $r10, $r12;
        long $l0;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$ActionNode$1;

        $r1 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode$1: androidx.media3.test.utils.ActionSchedule$ActionNode this$0>;

        $r2 = staticinvoke <androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.test.utils.Action access$500(androidx.media3.test.utils.ActionSchedule$ActionNode)>($r1);

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode$1: androidx.media3.test.utils.ActionSchedule$ActionNode this$0>;

        $r4 = staticinvoke <androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.ExoPlayer access$100(androidx.media3.test.utils.ActionSchedule$ActionNode)>($r3);

        $r5 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode$1: androidx.media3.test.utils.ActionSchedule$ActionNode this$0>;

        $r6 = staticinvoke <androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.trackselection.DefaultTrackSelector access$200(androidx.media3.test.utils.ActionSchedule$ActionNode)>($r5);

        $r7 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode$1: androidx.media3.test.utils.ActionSchedule$ActionNode this$0>;

        $r8 = staticinvoke <androidx.media3.test.utils.ActionSchedule$ActionNode: android.view.Surface access$300(androidx.media3.test.utils.ActionSchedule$ActionNode)>($r7);

        $r9 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode$1: androidx.media3.test.utils.ActionSchedule$ActionNode this$0>;

        $r10 = staticinvoke <androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.common.util.HandlerWrapper access$400(androidx.media3.test.utils.ActionSchedule$ActionNode)>($r9);

        virtualinvoke $r2.<androidx.media3.test.utils.Action: void doActionAndScheduleNext(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper,androidx.media3.test.utils.ActionSchedule$ActionNode)>($r4, $r6, $r8, $r10, null);

        $r11 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode$1: androidx.media3.test.utils.ActionSchedule$ActionNode this$0>;

        $r12 = staticinvoke <androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.common.util.HandlerWrapper access$400(androidx.media3.test.utils.ActionSchedule$ActionNode)>($r11);

        $r13 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode$1: androidx.media3.test.utils.ActionSchedule$ActionNode this$0>;

        $l0 = staticinvoke <androidx.media3.test.utils.ActionSchedule$ActionNode: long access$600(androidx.media3.test.utils.ActionSchedule$ActionNode)>($r13);

        interfaceinvoke $r12.<androidx.media3.common.util.HandlerWrapper: boolean postDelayed(java.lang.Runnable,long)>(r0, $l0);

        return;
    }

androidx.media3.test.utils.ActionSchedule$ActionNode
<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.test.utils.Action action>
<androidx.media3.test.utils.ActionSchedule$ActionNode: long delayMs>
<androidx.media3.test.utils.ActionSchedule$ActionNode: long repeatIntervalMs>
<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.test.utils.ActionSchedule$ActionNode next>
<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.ExoPlayer player>
<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>
<androidx.media3.test.utils.ActionSchedule$ActionNode: android.view.Surface surface>
<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.common.util.HandlerWrapper mainHandler>
    public void <init>(androidx.media3.test.utils.Action, long)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.test.utils.Action r1;
        long l0;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r1 := @parameter0: androidx.media3.test.utils.Action;

        l0 := @parameter1: long;

        specialinvoke r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: void <init>(androidx.media3.test.utils.Action,long,long)>(r1, l0, -9223372036854775807L);

        return;
    }

    public void <init>(androidx.media3.test.utils.Action, long, long)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.test.utils.Action r1;
        long l0, l1;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r1 := @parameter0: androidx.media3.test.utils.Action;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.test.utils.Action action> = r1;

        r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: long delayMs> = l0;

        r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: long repeatIntervalMs> = l1;

        return;
    }

    public void setNext(androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0, r1;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.test.utils.ActionSchedule$ActionNode next> = r1;

        return;
    }

    public void schedule(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        long $l0, $l2;
        byte $b1;
        android.os.Looper $r5, $r6;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$ActionNode;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.ExoPlayer player> = r1;

        r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector> = r2;

        r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: android.view.Surface surface> = r3;

        r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.common.util.HandlerWrapper mainHandler> = r4;

        $l0 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: long delayMs>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r6 = interfaceinvoke r4.<androidx.media3.common.util.HandlerWrapper: android.os.Looper getLooper()>();

        if $r5 != $r6 goto label1;

        virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: void run()>();

        goto label2;

     label1:
        $l2 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: long delayMs>;

        interfaceinvoke r4.<androidx.media3.common.util.HandlerWrapper: boolean postDelayed(java.lang.Runnable,long)>(r0, $l2);

     label2:
        return;
    }

    public void run()
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0, $r11;
        androidx.media3.exoplayer.ExoPlayer $r1, $r5;
        androidx.media3.test.utils.Action $r2;
        java.lang.Object $r3, $r6, $r10;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r4, $r8;
        androidx.media3.common.util.HandlerWrapper $r7, $r12, $r14;
        android.view.Surface $r9;
        long $l0, $l2;
        byte $b1;
        androidx.media3.test.utils.ActionSchedule$ActionNode$1 $r13;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$ActionNode;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.test.utils.Action action>;

        $r1 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.ExoPlayer player>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r1);

        $r5 = (androidx.media3.exoplayer.ExoPlayer) $r3;

        $r4 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r4);

        $r8 = (androidx.media3.exoplayer.trackselection.DefaultTrackSelector) $r6;

        $r9 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: android.view.Surface surface>;

        $r7 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.common.util.HandlerWrapper mainHandler>;

        $r10 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r7);

        $r12 = (androidx.media3.common.util.HandlerWrapper) $r10;

        $r11 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.test.utils.ActionSchedule$ActionNode next>;

        virtualinvoke $r2.<androidx.media3.test.utils.Action: void doActionAndScheduleNext(androidx.media3.exoplayer.ExoPlayer,androidx.media3.exoplayer.trackselection.DefaultTrackSelector,android.view.Surface,androidx.media3.common.util.HandlerWrapper,androidx.media3.test.utils.ActionSchedule$ActionNode)>($r5, $r8, $r9, $r12, $r11);

        $l0 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: long repeatIntervalMs>;

        $b1 = $l0 cmp -9223372036854775807L;

        if $b1 == 0 goto label1;

        $r14 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.common.util.HandlerWrapper mainHandler>;

        $r13 = new androidx.media3.test.utils.ActionSchedule$ActionNode$1;

        specialinvoke $r13.<androidx.media3.test.utils.ActionSchedule$ActionNode$1: void <init>(androidx.media3.test.utils.ActionSchedule$ActionNode)>(r0);

        $l2 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: long repeatIntervalMs>;

        interfaceinvoke $r14.<androidx.media3.common.util.HandlerWrapper: boolean postDelayed(java.lang.Runnable,long)>($r13, $l2);

     label1:
        return;
    }

    static androidx.media3.exoplayer.ExoPlayer access$100(androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.exoplayer.ExoPlayer $r1;

        r0 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        $r1 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.ExoPlayer player>;

        return $r1;
    }

    static androidx.media3.exoplayer.trackselection.DefaultTrackSelector access$200(androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector $r1;

        r0 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        $r1 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.exoplayer.trackselection.DefaultTrackSelector trackSelector>;

        return $r1;
    }

    static android.view.Surface access$300(androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        android.view.Surface $r1;

        r0 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        $r1 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: android.view.Surface surface>;

        return $r1;
    }

    static androidx.media3.common.util.HandlerWrapper access$400(androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.common.util.HandlerWrapper $r1;

        r0 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        $r1 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.common.util.HandlerWrapper mainHandler>;

        return $r1;
    }

    static androidx.media3.test.utils.Action access$500(androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        androidx.media3.test.utils.Action $r1;

        r0 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        $r1 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: androidx.media3.test.utils.Action action>;

        return $r1;
    }

    static long access$600(androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$ActionNode r0;
        long $l0;

        r0 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        $l0 = r0.<androidx.media3.test.utils.ActionSchedule$ActionNode: long repeatIntervalMs>;

        return $l0;
    }

androidx.media3.test.utils.ActionSchedule$Builder
<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>
<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$ActionNode rootNode>
<androidx.media3.test.utils.ActionSchedule$Builder: long currentDelayMs>
<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$ActionNode previousNode>
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0;
        java.lang.String r1;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r2, $r4;
        androidx.media3.test.utils.ActionSchedule$RootAction $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag> = r1;

        $r2 = new androidx.media3.test.utils.ActionSchedule$ActionNode;

        $r3 = new androidx.media3.test.utils.ActionSchedule$RootAction;

        specialinvoke $r3.<androidx.media3.test.utils.ActionSchedule$RootAction: void <init>(java.lang.String)>(r1);

        specialinvoke $r2.<androidx.media3.test.utils.ActionSchedule$ActionNode: void <init>(androidx.media3.test.utils.Action,long)>($r3, 0L);

        r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$ActionNode rootNode> = $r2;

        $r4 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$ActionNode rootNode>;

        r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$ActionNode previousNode> = $r4;

        return;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder delay(long)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0;
        long l0, $l1, $l2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        l0 := @parameter0: long;

        $l1 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: long currentDelayMs>;

        $l2 = $l1 + l0;

        r0.<androidx.media3.test.utils.ActionSchedule$Builder: long currentDelayMs> = $l2;

        return r0;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action r1;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r2;
        long $l0;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.test.utils.Action;

        $r2 = new androidx.media3.test.utils.ActionSchedule$ActionNode;

        $l0 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: long currentDelayMs>;

        specialinvoke $r2.<androidx.media3.test.utils.ActionSchedule$ActionNode: void <init>(androidx.media3.test.utils.Action,long)>(r1, $l0);

        $r3 = specialinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder appendActionNode(androidx.media3.test.utils.ActionSchedule$ActionNode)>($r2);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder repeat(androidx.media3.test.utils.Action, long)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action r1;
        long l0, $l1;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.test.utils.Action;

        l0 := @parameter1: long;

        $r2 = new androidx.media3.test.utils.ActionSchedule$ActionNode;

        $l1 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: long currentDelayMs>;

        specialinvoke $r2.<androidx.media3.test.utils.ActionSchedule$ActionNode: void <init>(androidx.media3.test.utils.Action,long,long)>(r1, $l1, l0);

        $r3 = specialinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder appendActionNode(androidx.media3.test.utils.ActionSchedule$ActionNode)>($r2);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder seek(long)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        long l0;
        androidx.media3.test.utils.Action$Seek $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        l0 := @parameter0: long;

        $r1 = new androidx.media3.test.utils.Action$Seek;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$Seek: void <init>(java.lang.String,long)>($r2, l0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder seek(int, long)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0;
        long l1;
        androidx.media3.test.utils.Action$Seek $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = new androidx.media3.test.utils.Action$Seek;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$Seek: void <init>(java.lang.String,int,long,boolean)>($r2, i0, l1, 0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder seek(int, long, boolean)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0;
        long l1;
        boolean z0;
        androidx.media3.test.utils.Action$Seek $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        z0 := @parameter2: boolean;

        $r1 = new androidx.media3.test.utils.Action$Seek;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$Seek: void <init>(java.lang.String,int,long,boolean)>($r2, i0, l1, z0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder seekAndWait(long)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3, $r6;
        long l0;
        androidx.media3.test.utils.Action$Seek $r1;
        java.lang.String $r2, $r5;
        androidx.media3.test.utils.Action$WaitForPlaybackState $r4;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        l0 := @parameter0: long;

        $r1 = new androidx.media3.test.utils.Action$Seek;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$Seek: void <init>(java.lang.String,long)>($r2, l0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        $r4 = new androidx.media3.test.utils.Action$WaitForPlaybackState;

        $r5 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r4.<androidx.media3.test.utils.Action$WaitForPlaybackState: void <init>(java.lang.String,int)>($r5, 3);

        $r6 = virtualinvoke $r3.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r4);

        return $r6;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder waitForPendingPlayerCommands()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$WaitForPendingPlayerCommands $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$WaitForPendingPlayerCommands;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$WaitForPendingPlayerCommands: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder setPlaybackParameters(androidx.media3.common.PlaybackParameters)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.common.PlaybackParameters r1;
        androidx.media3.test.utils.Action$SetPlaybackParameters $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.common.PlaybackParameters;

        $r2 = new androidx.media3.test.utils.Action$SetPlaybackParameters;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$SetPlaybackParameters: void <init>(java.lang.String,androidx.media3.common.PlaybackParameters)>($r3, r1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder stop()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$Stop $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$Stop;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$Stop: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder stop(boolean)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        boolean z0;
        androidx.media3.test.utils.Action$Stop $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        z0 := @parameter0: boolean;

        $r1 = new androidx.media3.test.utils.Action$Stop;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$Stop: void <init>(java.lang.String,boolean)>($r2, z0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder play()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$SetPlayWhenReady $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$SetPlayWhenReady;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$SetPlayWhenReady: void <init>(java.lang.String,boolean)>($r2, 1);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder playUntilPosition(int, long)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0;
        long l1;
        androidx.media3.test.utils.Action$PlayUntilPosition $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = new androidx.media3.test.utils.Action$PlayUntilPosition;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$PlayUntilPosition: void <init>(java.lang.String,int,long)>($r2, i0, l1);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder playUntilStartOfMediaItem(int)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0;
        androidx.media3.test.utils.Action$PlayUntilPosition $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        $r1 = new androidx.media3.test.utils.Action$PlayUntilPosition;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$PlayUntilPosition: void <init>(java.lang.String,int,long)>($r2, i0, 0L);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder pause()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$SetPlayWhenReady $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$SetPlayWhenReady;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$SetPlayWhenReady: void <init>(java.lang.String,boolean)>($r2, 0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder enableRenderer(int)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0;
        androidx.media3.test.utils.Action$SetRendererDisabled $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        $r1 = new androidx.media3.test.utils.Action$SetRendererDisabled;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$SetRendererDisabled: void <init>(java.lang.String,int,boolean)>($r2, i0, 0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder disableRenderer(int)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0;
        androidx.media3.test.utils.Action$SetRendererDisabled $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        $r1 = new androidx.media3.test.utils.Action$SetRendererDisabled;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$SetRendererDisabled: void <init>(java.lang.String,int,boolean)>($r2, i0, 1);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder clearVideoSurface()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$ClearVideoSurface $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$ClearVideoSurface;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$ClearVideoSurface: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder setVideoSurface()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$SetVideoSurface $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$SetVideoSurface;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$SetVideoSurface: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder setAudioAttributes(androidx.media3.common.AudioAttributes, boolean)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.common.AudioAttributes r1;
        boolean z0;
        androidx.media3.test.utils.Action$SetAudioAttributes $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.common.AudioAttributes;

        z0 := @parameter1: boolean;

        $r2 = new androidx.media3.test.utils.Action$SetAudioAttributes;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$SetAudioAttributes: void <init>(java.lang.String,androidx.media3.common.AudioAttributes,boolean)>($r3, r1, z0);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public transient androidx.media3.test.utils.ActionSchedule$Builder setMediaSources(int, long, androidx.media3.exoplayer.source.MediaSource[])
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        int i0;
        long l1;
        androidx.media3.exoplayer.source.MediaSource[] r1;
        androidx.media3.test.utils.Action$SetMediaItems $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: androidx.media3.exoplayer.source.MediaSource[];

        $r2 = new androidx.media3.test.utils.Action$SetMediaItems;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$SetMediaItems: void <init>(java.lang.String,int,long,androidx.media3.exoplayer.source.MediaSource[])>($r3, i0, l1, r1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public transient androidx.media3.test.utils.ActionSchedule$Builder setMediaSources(boolean, androidx.media3.exoplayer.source.MediaSource[])
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        boolean z0;
        androidx.media3.exoplayer.source.MediaSource[] r1;
        androidx.media3.test.utils.Action$SetMediaItemsResetPosition $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource[];

        $r2 = new androidx.media3.test.utils.Action$SetMediaItemsResetPosition;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$SetMediaItemsResetPosition: void <init>(java.lang.String,boolean,androidx.media3.exoplayer.source.MediaSource[])>($r3, z0, r1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public transient androidx.media3.test.utils.ActionSchedule$Builder setMediaSources(androidx.media3.exoplayer.source.MediaSource[])
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.exoplayer.source.MediaSource[] r1;
        androidx.media3.test.utils.Action$SetMediaItems $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource[];

        $r2 = new androidx.media3.test.utils.Action$SetMediaItems;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$SetMediaItems: void <init>(java.lang.String,int,long,androidx.media3.exoplayer.source.MediaSource[])>($r3, -1, -9223372036854775807L, r1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public transient androidx.media3.test.utils.ActionSchedule$Builder addMediaSources(androidx.media3.exoplayer.source.MediaSource[])
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.exoplayer.source.MediaSource[] r1;
        androidx.media3.test.utils.Action$AddMediaItems $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource[];

        $r2 = new androidx.media3.test.utils.Action$AddMediaItems;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$AddMediaItems: void <init>(java.lang.String,androidx.media3.exoplayer.source.MediaSource[])>($r3, r1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder moveMediaItem(int, int)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0, i1;
        androidx.media3.test.utils.Action$MoveMediaItem $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new androidx.media3.test.utils.Action$MoveMediaItem;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$MoveMediaItem: void <init>(java.lang.String,int,int)>($r2, i0, i1);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder removeMediaItem(int)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0;
        androidx.media3.test.utils.Action$RemoveMediaItem $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        $r1 = new androidx.media3.test.utils.Action$RemoveMediaItem;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$RemoveMediaItem: void <init>(java.lang.String,int)>($r2, i0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder removeMediaItems(int, int)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0, i1;
        androidx.media3.test.utils.Action$RemoveMediaItems $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new androidx.media3.test.utils.Action$RemoveMediaItems;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$RemoveMediaItems: void <init>(java.lang.String,int,int)>($r2, i0, i1);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder prepare()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$Prepare $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$Prepare;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$Prepare: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder clearMediaItems()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$ClearMediaItems $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$ClearMediaItems;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$ClearMediaItems: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder setRepeatMode(int)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0;
        androidx.media3.test.utils.Action$SetRepeatMode $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        $r1 = new androidx.media3.test.utils.Action$SetRepeatMode;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$SetRepeatMode: void <init>(java.lang.String,int)>($r2, i0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder setShuffleOrder(androidx.media3.exoplayer.source.ShuffleOrder)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.exoplayer.source.ShuffleOrder r1;
        androidx.media3.test.utils.Action$SetShuffleOrder $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.source.ShuffleOrder;

        $r2 = new androidx.media3.test.utils.Action$SetShuffleOrder;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$SetShuffleOrder: void <init>(java.lang.String,androidx.media3.exoplayer.source.ShuffleOrder)>($r3, r1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder setShuffleModeEnabled(boolean)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        boolean z0;
        androidx.media3.test.utils.Action$SetShuffleModeEnabled $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        z0 := @parameter0: boolean;

        $r1 = new androidx.media3.test.utils.Action$SetShuffleModeEnabled;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$SetShuffleModeEnabled: void <init>(java.lang.String,boolean)>($r2, z0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder sendMessage(androidx.media3.exoplayer.PlayerMessage$Target, long)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.exoplayer.PlayerMessage$Target r1;
        long l0;
        androidx.media3.test.utils.Action$SendMessages $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.PlayerMessage$Target;

        l0 := @parameter1: long;

        $r2 = new androidx.media3.test.utils.Action$SendMessages;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$SendMessages: void <init>(java.lang.String,androidx.media3.exoplayer.PlayerMessage$Target,long)>($r3, r1, l0);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder sendMessage(androidx.media3.exoplayer.PlayerMessage$Target, int, long)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.exoplayer.PlayerMessage$Target r1;
        int i0;
        long l1;
        androidx.media3.test.utils.Action$SendMessages $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.PlayerMessage$Target;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r2 = new androidx.media3.test.utils.Action$SendMessages;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$SendMessages: void <init>(java.lang.String,androidx.media3.exoplayer.PlayerMessage$Target,int,long,boolean)>($r3, r1, i0, l1, 1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder sendMessage(androidx.media3.exoplayer.PlayerMessage$Target, int, long, boolean)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.exoplayer.PlayerMessage$Target r1;
        int i0;
        long l1;
        boolean z0;
        androidx.media3.test.utils.Action$SendMessages $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.PlayerMessage$Target;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        $r2 = new androidx.media3.test.utils.Action$SendMessages;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$SendMessages: void <init>(java.lang.String,androidx.media3.exoplayer.PlayerMessage$Target,int,long,boolean)>($r3, r1, i0, l1, z0);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder waitForTimelineChanged()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$WaitForTimelineChanged $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$WaitForTimelineChanged;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$WaitForTimelineChanged: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder waitForTimelineChanged(androidx.media3.common.Timeline, int)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.common.Timeline r1;
        int i0;
        androidx.media3.test.utils.Action$WaitForTimelineChanged $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.common.Timeline;

        i0 := @parameter1: int;

        $r2 = new androidx.media3.test.utils.Action$WaitForTimelineChanged;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$WaitForTimelineChanged: void <init>(java.lang.String,androidx.media3.common.Timeline,int)>($r3, r1, i0);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder waitForPositionDiscontinuity()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        androidx.media3.test.utils.Action$WaitForPositionDiscontinuity $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r1 = new androidx.media3.test.utils.Action$WaitForPositionDiscontinuity;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$WaitForPositionDiscontinuity: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder waitForPlayWhenReady(boolean)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        boolean z0;
        androidx.media3.test.utils.Action$WaitForPlayWhenReady $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        z0 := @parameter0: boolean;

        $r1 = new androidx.media3.test.utils.Action$WaitForPlayWhenReady;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$WaitForPlayWhenReady: void <init>(java.lang.String,boolean)>($r2, z0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder waitForPlaybackState(int)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        int i0;
        androidx.media3.test.utils.Action$WaitForPlaybackState $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        i0 := @parameter0: int;

        $r1 = new androidx.media3.test.utils.Action$WaitForPlaybackState;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$WaitForPlaybackState: void <init>(java.lang.String,int)>($r2, i0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder waitForIsLoading(boolean)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r3;
        boolean z0;
        androidx.media3.test.utils.Action$WaitForIsLoading $r1;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        z0 := @parameter0: boolean;

        $r1 = new androidx.media3.test.utils.Action$WaitForIsLoading;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r1.<androidx.media3.test.utils.Action$WaitForIsLoading: void <init>(java.lang.String,boolean)>($r2, z0);

        $r3 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r1);

        return $r3;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder waitForMessage(androidx.media3.test.utils.ActionSchedule$PlayerTarget)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.test.utils.ActionSchedule$PlayerTarget r1;
        androidx.media3.test.utils.Action$WaitForMessage $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule$PlayerTarget;

        $r2 = new androidx.media3.test.utils.Action$WaitForMessage;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$WaitForMessage: void <init>(java.lang.String,androidx.media3.test.utils.ActionSchedule$PlayerTarget)>($r3, r1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder executeRunnable(java.lang.Runnable)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        java.lang.Runnable r1;
        androidx.media3.test.utils.Action$ExecuteRunnable $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = new androidx.media3.test.utils.Action$ExecuteRunnable;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$ExecuteRunnable: void <init>(java.lang.String,java.lang.Runnable)>($r3, r1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule$Builder throwPlaybackException(androidx.media3.exoplayer.ExoPlaybackException)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0, $r4;
        androidx.media3.exoplayer.ExoPlaybackException r1;
        androidx.media3.test.utils.Action$ThrowPlaybackException $r2;
        java.lang.String $r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlaybackException;

        $r2 = new androidx.media3.test.utils.Action$ThrowPlaybackException;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.Action$ThrowPlaybackException: void <init>(java.lang.String,androidx.media3.exoplayer.ExoPlaybackException)>($r3, r1);

        $r4 = virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>($r2);

        return $r4;
    }

    public androidx.media3.test.utils.ActionSchedule build()
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0;
        androidx.media3.test.utils.ActionSchedule$CallbackAction r1, $r2;
        java.lang.String $r3;
        androidx.media3.test.utils.ActionSchedule $r5;
        androidx.media3.test.utils.ActionSchedule$ActionNode $r6;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        $r2 = new androidx.media3.test.utils.ActionSchedule$CallbackAction;

        $r3 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: java.lang.String tag>;

        specialinvoke $r2.<androidx.media3.test.utils.ActionSchedule$CallbackAction: void <init>(java.lang.String)>($r3);

        r1 = $r2;

        virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$Builder apply(androidx.media3.test.utils.Action)>(r1);

        $r5 = new androidx.media3.test.utils.ActionSchedule;

        $r6 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$ActionNode rootNode>;

        specialinvoke $r5.<androidx.media3.test.utils.ActionSchedule: void <init>(androidx.media3.test.utils.ActionSchedule$ActionNode,androidx.media3.test.utils.ActionSchedule$CallbackAction,androidx.media3.test.utils.ActionSchedule$1)>($r6, r1, null);

        return $r5;
    }

    private androidx.media3.test.utils.ActionSchedule$Builder appendActionNode(androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$Builder r0;
        androidx.media3.test.utils.ActionSchedule$ActionNode r1, $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$Builder;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule$ActionNode;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$ActionNode previousNode>;

        virtualinvoke $r2.<androidx.media3.test.utils.ActionSchedule$ActionNode: void setNext(androidx.media3.test.utils.ActionSchedule$ActionNode)>(r1);

        r0.<androidx.media3.test.utils.ActionSchedule$Builder: androidx.media3.test.utils.ActionSchedule$ActionNode previousNode> = r1;

        r0.<androidx.media3.test.utils.ActionSchedule$Builder: long currentDelayMs> = 0L;

        return r0;
    }

androidx.media3.test.utils.ActionSchedule$Callback
<androidx.media3.test.utils.ActionSchedule$Callback: void onActionScheduleFinished()>
androidx.media3.test.utils.ActionSchedule$CallbackAction
<androidx.media3.test.utils.ActionSchedule$CallbackAction: androidx.media3.test.utils.ActionSchedule$Callback callback>
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.ActionSchedule$CallbackAction r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$CallbackAction;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "FinishedCallback");

        return;
    }

    public void setCallback(androidx.media3.test.utils.ActionSchedule$Callback)
    {
        androidx.media3.test.utils.ActionSchedule$CallbackAction r0;
        androidx.media3.test.utils.ActionSchedule$Callback r1;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$CallbackAction;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule$Callback;

        r0.<androidx.media3.test.utils.ActionSchedule$CallbackAction: androidx.media3.test.utils.ActionSchedule$Callback callback> = r1;

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.ActionSchedule$CallbackAction r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$CallbackAction;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

    void doActionAndScheduleNextImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface, androidx.media3.common.util.HandlerWrapper, androidx.media3.test.utils.ActionSchedule$ActionNode)
    {
        androidx.media3.test.utils.ActionSchedule$CallbackAction r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;
        androidx.media3.common.util.HandlerWrapper r4;
        androidx.media3.test.utils.ActionSchedule$ActionNode r5;
        androidx.media3.test.utils.ActionSchedule$Callback r6;
        java.lang.Runnable $r8;
        boolean $z1;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$CallbackAction;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        r4 := @parameter3: androidx.media3.common.util.HandlerWrapper;

        r5 := @parameter4: androidx.media3.test.utils.ActionSchedule$ActionNode;

        if r5 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z1);

        r6 = r0.<androidx.media3.test.utils.ActionSchedule$CallbackAction: androidx.media3.test.utils.ActionSchedule$Callback callback>;

        if r6 == null goto label3;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.test.utils.ActionSchedule$Callback)>(r6) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_INTERFACE" <androidx.media3.test.utils.ActionSchedule$Callback: void onActionScheduleFinished()>, methodtype: void __METHODTYPE__());

        interfaceinvoke r4.<androidx.media3.common.util.HandlerWrapper: boolean post(java.lang.Runnable)>($r8);

     label3:
        return;
    }

androidx.media3.test.utils.ActionSchedule$PlayerRunnable
<androidx.media3.test.utils.ActionSchedule$PlayerRunnable: androidx.media3.exoplayer.ExoPlayer player>
    public void <init>()
    {
        androidx.media3.test.utils.ActionSchedule$PlayerRunnable r0;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$PlayerRunnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

<androidx.media3.test.utils.ActionSchedule$PlayerRunnable: void run(androidx.media3.exoplayer.ExoPlayer)>
    public final void run()
    {
        androidx.media3.test.utils.ActionSchedule$PlayerRunnable r0;
        androidx.media3.exoplayer.ExoPlayer $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$PlayerRunnable;

        $r1 = r0.<androidx.media3.test.utils.ActionSchedule$PlayerRunnable: androidx.media3.exoplayer.ExoPlayer player>;

        $r2 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r1);

        $r3 = (androidx.media3.exoplayer.ExoPlayer) $r2;

        virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$PlayerRunnable: void run(androidx.media3.exoplayer.ExoPlayer)>($r3);

        return;
    }

    void setPlayer(androidx.media3.exoplayer.ExoPlayer)
    {
        androidx.media3.test.utils.ActionSchedule$PlayerRunnable r0;
        androidx.media3.exoplayer.ExoPlayer r1;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$PlayerRunnable;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r0.<androidx.media3.test.utils.ActionSchedule$PlayerRunnable: androidx.media3.exoplayer.ExoPlayer player> = r1;

        return;
    }

androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback
<androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback: void onMessageArrived()>
androidx.media3.test.utils.ActionSchedule$PlayerTarget
<androidx.media3.test.utils.ActionSchedule$PlayerTarget: androidx.media3.exoplayer.ExoPlayer player>
<androidx.media3.test.utils.ActionSchedule$PlayerTarget: boolean hasArrived>
<androidx.media3.test.utils.ActionSchedule$PlayerTarget: androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback callback>
    public void <init>()
    {
        androidx.media3.test.utils.ActionSchedule$PlayerTarget r0;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$PlayerTarget;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setCallback(androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback)
    {
        androidx.media3.test.utils.ActionSchedule$PlayerTarget r0;
        androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback r1;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$PlayerTarget;

        r1 := @parameter0: androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback;

        r0.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback callback> = r1;

        $z0 = r0.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: boolean hasArrived>;

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback: void onMessageArrived()>();

     label1:
        return;
    }

<androidx.media3.test.utils.ActionSchedule$PlayerTarget: void handleMessage(androidx.media3.exoplayer.ExoPlayer,int,java.lang.Object)>
    public final void handleMessage(int, java.lang.Object)
    {
        androidx.media3.test.utils.ActionSchedule$PlayerTarget r0;
        int i0;
        java.lang.Object r1, $r3;
        androidx.media3.exoplayer.ExoPlayer $r2, $r4;
        androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback $r5, $r6;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$PlayerTarget;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: androidx.media3.exoplayer.ExoPlayer player>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r2);

        $r4 = (androidx.media3.exoplayer.ExoPlayer) $r3;

        virtualinvoke r0.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: void handleMessage(androidx.media3.exoplayer.ExoPlayer,int,java.lang.Object)>($r4, i0, r1);

        $r5 = r0.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback callback>;

        if $r5 == null goto label1;

        r0.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: boolean hasArrived> = 1;

        $r6 = r0.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback callback>;

        interfaceinvoke $r6.<androidx.media3.test.utils.ActionSchedule$PlayerTarget$Callback: void onMessageArrived()>();

     label1:
        return;
    }

    void setPlayer(androidx.media3.exoplayer.ExoPlayer)
    {
        androidx.media3.test.utils.ActionSchedule$PlayerTarget r0;
        androidx.media3.exoplayer.ExoPlayer r1;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$PlayerTarget;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r0.<androidx.media3.test.utils.ActionSchedule$PlayerTarget: androidx.media3.exoplayer.ExoPlayer player> = r1;

        return;
    }

androidx.media3.test.utils.ActionSchedule$RootAction
    public void <init>(java.lang.String)
    {
        androidx.media3.test.utils.ActionSchedule$RootAction r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$RootAction;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.media3.test.utils.Action: void <init>(java.lang.String,java.lang.String)>(r1, "Root");

        return;
    }

    protected void doActionImpl(androidx.media3.exoplayer.ExoPlayer, androidx.media3.exoplayer.trackselection.DefaultTrackSelector, android.view.Surface)
    {
        androidx.media3.test.utils.ActionSchedule$RootAction r0;
        androidx.media3.exoplayer.ExoPlayer r1;
        androidx.media3.exoplayer.trackselection.DefaultTrackSelector r2;
        android.view.Surface r3;

        r0 := @this: androidx.media3.test.utils.ActionSchedule$RootAction;

        r1 := @parameter0: androidx.media3.exoplayer.ExoPlayer;

        r2 := @parameter1: androidx.media3.exoplayer.trackselection.DefaultTrackSelector;

        r3 := @parameter2: android.view.Surface;

        return;
    }

