androidx.media3.extractor.flv.VideoTagPayloadReader
<androidx.media3.extractor.flv.VideoTagPayloadReader: int VIDEO_CODEC_AVC>
<androidx.media3.extractor.flv.VideoTagPayloadReader: int VIDEO_FRAME_KEYFRAME>
<androidx.media3.extractor.flv.VideoTagPayloadReader: int VIDEO_FRAME_VIDEO_INFO>
<androidx.media3.extractor.flv.VideoTagPayloadReader: int AVC_PACKET_TYPE_SEQUENCE_HEADER>
<androidx.media3.extractor.flv.VideoTagPayloadReader: int AVC_PACKET_TYPE_AVC_NALU>
<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalStartCode>
<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalLength>
<androidx.media3.extractor.flv.VideoTagPayloadReader: int nalUnitLengthFieldLength>
<androidx.media3.extractor.flv.VideoTagPayloadReader: boolean hasOutputFormat>
<androidx.media3.extractor.flv.VideoTagPayloadReader: boolean hasOutputKeyframe>
<androidx.media3.extractor.flv.VideoTagPayloadReader: int frameType>
    public void <init>(androidx.media3.extractor.TrackOutput)
    {
        androidx.media3.extractor.flv.VideoTagPayloadReader r0;
        androidx.media3.extractor.TrackOutput r1;
        androidx.media3.common.util.ParsableByteArray $r2, $r4;
        byte[] $r3;

        r0 := @this: androidx.media3.extractor.flv.VideoTagPayloadReader;

        r1 := @parameter0: androidx.media3.extractor.TrackOutput;

        specialinvoke r0.<androidx.media3.extractor.flv.TagPayloadReader: void <init>(androidx.media3.extractor.TrackOutput)>(r1);

        $r2 = new androidx.media3.common.util.ParsableByteArray;

        $r3 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        specialinvoke $r2.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r3);

        r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalStartCode> = $r2;

        $r4 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r4.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(4);

        r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalLength> = $r4;

        return;
    }

    public void seek()
    {
        androidx.media3.extractor.flv.VideoTagPayloadReader r0;

        r0 := @this: androidx.media3.extractor.flv.VideoTagPayloadReader;

        r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: boolean hasOutputKeyframe> = 0;

        return;
    }

    protected boolean parseHeader(androidx.media3.common.util.ParsableByteArray) throws androidx.media3.extractor.flv.TagPayloadReader$UnsupportedFormatException
    {
        androidx.media3.extractor.flv.VideoTagPayloadReader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, i1, i2, $i3;
        java.lang.StringBuilder $r4, $r5, r7;
        java.lang.String $r6;
        boolean $z0;
        androidx.media3.extractor.flv.TagPayloadReader$UnsupportedFormatException r8;
        java.lang.Throwable r9;

        r0 := @this: androidx.media3.extractor.flv.VideoTagPayloadReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        $i3 = i0 >> 4;

        i1 = $i3 & 15;

        i2 = i0 & 15;

        if i2 == 7 goto label1;

        r8 = new androidx.media3.extractor.flv.TagPayloadReader$UnsupportedFormatException;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Video format not supported: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r8.<androidx.media3.extractor.flv.TagPayloadReader$UnsupportedFormatException: void <init>(java.lang.String)>($r6);

        r9 = (java.lang.Throwable) r8;

        throw r9;

     label1:
        r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: int frameType> = i1;

        if i1 == 5 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected boolean parsePayload(androidx.media3.common.util.ParsableByteArray, long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.flv.VideoTagPayloadReader r0;
        androidx.media3.common.util.ParsableByteArray r1, $r2, $r4, $r6, $r7, $r8, $r9, $r12, r25;
        int i0, i1, i2, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, i16, i17, $i18, i19;
        long $l3, $l4, l14, l15;
        boolean $z0, $z1, $z2, $z3, z4;
        androidx.media3.extractor.TrackOutput $r3, $r10, $r11, $r24;
        byte[] $r5, $r13, $r14, r28;
        androidx.media3.common.Format$Builder $r15, $r16, $r18, $r19, $r20, $r21, $r23;
        java.lang.String $r17;
        float $f0;
        java.util.List $r22;
        androidx.media3.extractor.AvcConfig r26;
        androidx.media3.common.Format r27;
        byte $b20;

        r0 := @this: androidx.media3.extractor.flv.VideoTagPayloadReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l14 := @parameter1: long;

        i0 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        i1 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int readInt24()>();

        $l3 = (long) i1;

        $l4 = $l3 * 1000L;

        l15 = l14 + $l4;

        if i0 != 0 goto label1;

        $z2 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: boolean hasOutputFormat>;

        if $z2 != 0 goto label1;

        $r12 = new androidx.media3.common.util.ParsableByteArray;

        $i9 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        $r13 = newarray (byte)[$i9];

        specialinvoke $r12.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r13);

        r25 = $r12;

        $r14 = virtualinvoke r25.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i10 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>($r14, 0, $i10);

        r26 = staticinvoke <androidx.media3.extractor.AvcConfig: androidx.media3.extractor.AvcConfig parse(androidx.media3.common.util.ParsableByteArray)>(r25);

        $i11 = r26.<androidx.media3.extractor.AvcConfig: int nalUnitLengthFieldLength>;

        r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: int nalUnitLengthFieldLength> = $i11;

        $r15 = new androidx.media3.common.Format$Builder;

        specialinvoke $r15.<androidx.media3.common.Format$Builder: void <init>()>();

        $r16 = virtualinvoke $r15.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>("video/avc");

        $r17 = r26.<androidx.media3.extractor.AvcConfig: java.lang.String codecs>;

        $r18 = virtualinvoke $r16.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setCodecs(java.lang.String)>($r17);

        $i12 = r26.<androidx.media3.extractor.AvcConfig: int width>;

        $r19 = virtualinvoke $r18.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>($i12);

        $i13 = r26.<androidx.media3.extractor.AvcConfig: int height>;

        $r20 = virtualinvoke $r19.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>($i13);

        $f0 = r26.<androidx.media3.extractor.AvcConfig: float pixelWidthHeightRatio>;

        $r21 = virtualinvoke $r20.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setPixelWidthHeightRatio(float)>($f0);

        $r22 = r26.<androidx.media3.extractor.AvcConfig: java.util.List initializationData>;

        $r23 = virtualinvoke $r21.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setInitializationData(java.util.List)>($r22);

        r27 = virtualinvoke $r23.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $r24 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r24.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>(r27);

        r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: boolean hasOutputFormat> = 1;

        return 0;

     label1:
        if i0 != 1 goto label9;

        $z0 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: boolean hasOutputFormat>;

        if $z0 == 0 goto label9;

        $i5 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: int frameType>;

        if $i5 != 1 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        z4 = $z3;

        $z1 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: boolean hasOutputKeyframe>;

        if $z1 != 0 goto label4;

        if z4 != 0 goto label4;

        return 0;

     label4:
        $r2 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalLength>;

        r28 = virtualinvoke $r2.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r28[0] = 0;

        r28[1] = 0;

        r28[2] = 0;

        $i6 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: int nalUnitLengthFieldLength>;

        i16 = 4 - $i6;

        i17 = 0;

     label5:
        $i18 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        if $i18 <= 0 goto label6;

        $r4 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalLength>;

        $r5 = virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i8 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: int nalUnitLengthFieldLength>;

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>($r5, i16, $i8);

        $r6 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalLength>;

        virtualinvoke $r6.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r7 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalLength>;

        i2 = virtualinvoke $r7.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        $r8 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalStartCode>;

        virtualinvoke $r8.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r10 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        $r9 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.common.util.ParsableByteArray nalStartCode>;

        interfaceinvoke $r10.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r9, 4);

        i19 = i17 + 4;

        $r11 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r11.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>(r1, i2);

        i17 = i19 + i2;

        goto label5;

     label6:
        $r3 = r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: androidx.media3.extractor.TrackOutput output>;

        if z4 == 0 goto label7;

        $b20 = 1;

        goto label8;

     label7:
        $b20 = 0;

     label8:
        interfaceinvoke $r3.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l15, $b20, i17, 0, null);

        r0.<androidx.media3.extractor.flv.VideoTagPayloadReader: boolean hasOutputKeyframe> = 1;

        return 1;

     label9:
        return 0;
    }

