io.grpc.internal.CallTracer
<io.grpc.internal.CallTracer: io.grpc.internal.CallTracer$Factory DEFAULT_FACTORY>
<io.grpc.internal.CallTracer: io.grpc.internal.LongCounter callsFailed>
<io.grpc.internal.CallTracer: io.grpc.internal.LongCounter callsStarted>
<io.grpc.internal.CallTracer: io.grpc.internal.LongCounter callsSucceeded>
<io.grpc.internal.CallTracer: long lastCallStartedNanos>
<io.grpc.internal.CallTracer: io.grpc.internal.TimeProvider timeProvider>
    static void <clinit>()
    {
        io.grpc.internal.CallTracer$1 $r0;

        $r0 = new io.grpc.internal.CallTracer$1;

        specialinvoke $r0.<io.grpc.internal.CallTracer$1: void <init>()>();

        <io.grpc.internal.CallTracer: io.grpc.internal.CallTracer$Factory DEFAULT_FACTORY> = $r0;

        return;
    }

    void <init>(io.grpc.internal.TimeProvider)
    {
        io.grpc.internal.CallTracer $r0;
        io.grpc.internal.TimeProvider $r1;
        io.grpc.internal.LongCounter $r2;

        $r0 := @this: io.grpc.internal.CallTracer;

        $r1 := @parameter0: io.grpc.internal.TimeProvider;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <io.grpc.internal.LongCounterFactory: io.grpc.internal.LongCounter create()>();

        $r0.<io.grpc.internal.CallTracer: io.grpc.internal.LongCounter callsStarted> = $r2;

        $r2 = staticinvoke <io.grpc.internal.LongCounterFactory: io.grpc.internal.LongCounter create()>();

        $r0.<io.grpc.internal.CallTracer: io.grpc.internal.LongCounter callsSucceeded> = $r2;

        $r2 = staticinvoke <io.grpc.internal.LongCounterFactory: io.grpc.internal.LongCounter create()>();

        $r0.<io.grpc.internal.CallTracer: io.grpc.internal.LongCounter callsFailed> = $r2;

        $r0.<io.grpc.internal.CallTracer: io.grpc.internal.TimeProvider timeProvider> = $r1;

        return;
    }

    public void reportCallEnded(boolean)
    {
        io.grpc.internal.CallTracer $r0;
        boolean $z0;
        io.grpc.internal.LongCounter $r1;

        $r0 := @this: io.grpc.internal.CallTracer;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r1 = $r0.<io.grpc.internal.CallTracer: io.grpc.internal.LongCounter callsSucceeded>;

        interfaceinvoke $r1.<io.grpc.internal.LongCounter: void add(long)>(1L);

        return;

     label1:
        $r1 = $r0.<io.grpc.internal.CallTracer: io.grpc.internal.LongCounter callsFailed>;

        interfaceinvoke $r1.<io.grpc.internal.LongCounter: void add(long)>(1L);

        return;
    }

    public void reportCallStarted()
    {
        io.grpc.internal.CallTracer $r0;
        long $l0;
        io.grpc.internal.LongCounter $r1;
        io.grpc.internal.TimeProvider $r2;

        $r0 := @this: io.grpc.internal.CallTracer;

        $r1 = $r0.<io.grpc.internal.CallTracer: io.grpc.internal.LongCounter callsStarted>;

        interfaceinvoke $r1.<io.grpc.internal.LongCounter: void add(long)>(1L);

        $r2 = $r0.<io.grpc.internal.CallTracer: io.grpc.internal.TimeProvider timeProvider>;

        $l0 = interfaceinvoke $r2.<io.grpc.internal.TimeProvider: long currentTimeNanos()>();

        $r0.<io.grpc.internal.CallTracer: long lastCallStartedNanos> = $l0;

        return;
    }

io.grpc.internal.CallTracer$1
    void <init>()
    {
        io.grpc.internal.CallTracer$1 $r0;

        $r0 := @this: io.grpc.internal.CallTracer$1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public io.grpc.internal.CallTracer create()
    {
        io.grpc.internal.CallTracer$1 $r0;
        io.grpc.internal.CallTracer $r1;
        io.grpc.internal.TimeProvider $r2;

        $r0 := @this: io.grpc.internal.CallTracer$1;

        $r1 = new io.grpc.internal.CallTracer;

        $r2 = <io.grpc.internal.TimeProvider: io.grpc.internal.TimeProvider SYSTEM_TIME_PROVIDER>;

        specialinvoke $r1.<io.grpc.internal.CallTracer: void <init>(io.grpc.internal.TimeProvider)>($r2);

        return $r1;
    }

io.grpc.internal.CallTracer$Factory
<io.grpc.internal.CallTracer$Factory: io.grpc.internal.CallTracer create()>
