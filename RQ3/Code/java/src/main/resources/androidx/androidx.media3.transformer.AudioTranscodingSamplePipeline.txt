androidx.media3.transformer.AudioTranscodingSamplePipeline
<androidx.media3.transformer.AudioTranscodingSamplePipeline: int DEFAULT_ENCODER_BITRATE>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.common.audio.AudioProcessor$AudioFormat encoderInputAudioFormat>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: java.nio.ByteBuffer processorOutputBuffer>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: long nextEncoderInputBufferTimeUs>
<androidx.media3.transformer.AudioTranscodingSamplePipeline: long encoderBufferDurationRemainder>
    public void <init>(androidx.media3.common.Format, long, long, androidx.media3.transformer.TransformationRequest, androidx.media3.transformer.Codec$DecoderFactory, androidx.media3.transformer.Codec$EncoderFactory, androidx.media3.transformer.MuxerWrapper, androidx.media3.transformer.FallbackListener) throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.common.Format r1, $r22, r33;
        long l0, l1;
        androidx.media3.transformer.TransformationRequest r2, $r23;
        androidx.media3.transformer.Codec$DecoderFactory r3;
        androidx.media3.transformer.Codec$EncoderFactory r4;
        androidx.media3.transformer.MuxerWrapper r5;
        androidx.media3.transformer.FallbackListener r6;
        boolean $z0, $z1;
        androidx.media3.decoder.DecoderInputBuffer $r7, $r8, $r9;
        androidx.media3.transformer.Codec $r10, $r20, $r21;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r11, r30;
        int $i2, $i3, $i4, $i5;
        java.nio.ByteBuffer $r12;
        androidx.media3.common.Format$Builder $r13, $r15, $r16, $r17, $r18;
        java.lang.String $r14, $r32;
        com.google.common.collect.ImmutableList $r19;
        androidx.media3.transformer.SpeedChangingAudioProcessor $r24, $r26, $r27;
        androidx.media3.transformer.SegmentSpeedProvider $r25;
        java.lang.Throwable $r28, r31;
        java.lang.IllegalStateException $r29;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        r1 := @parameter0: androidx.media3.common.Format;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 := @parameter3: androidx.media3.transformer.TransformationRequest;

        r3 := @parameter4: androidx.media3.transformer.Codec$DecoderFactory;

        r4 := @parameter5: androidx.media3.transformer.Codec$EncoderFactory;

        r5 := @parameter6: androidx.media3.transformer.MuxerWrapper;

        r6 := @parameter7: androidx.media3.transformer.FallbackListener;

        $z0 = r2.<androidx.media3.transformer.TransformationRequest: boolean flattenForSlowMotion>;

        specialinvoke r0.<androidx.media3.transformer.BaseSamplePipeline: void <init>(androidx.media3.common.Format,long,long,boolean,androidx.media3.transformer.MuxerWrapper)>(r1, l0, l1, $z0, r5);

        $r7 = new androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke $r7.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(0);

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer> = $r7;

        $r8 = new androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke $r8.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(0);

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer> = $r8;

        $r9 = new androidx.media3.decoder.DecoderInputBuffer;

        specialinvoke $r9.<androidx.media3.decoder.DecoderInputBuffer: void <init>(int)>(0);

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer> = $r9;

        $r10 = interfaceinvoke r3.<androidx.media3.transformer.Codec$DecoderFactory: androidx.media3.transformer.Codec createForAudioDecoding(androidx.media3.common.Format)>(r1);

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder> = $r10;

        $r11 = new androidx.media3.common.audio.AudioProcessor$AudioFormat;

        $i3 = r1.<androidx.media3.common.Format: int sampleRate>;

        $i2 = r1.<androidx.media3.common.Format: int channelCount>;

        specialinvoke $r11.<androidx.media3.common.audio.AudioProcessor$AudioFormat: void <init>(int,int,int)>($i3, $i2, 2);

        r30 = $r11;

        $z1 = r2.<androidx.media3.transformer.TransformationRequest: boolean flattenForSlowMotion>;

        if $z1 == 0 goto label5;

        $r24 = new androidx.media3.transformer.SpeedChangingAudioProcessor;

        $r25 = new androidx.media3.transformer.SegmentSpeedProvider;

        specialinvoke $r25.<androidx.media3.transformer.SegmentSpeedProvider: void <init>(androidx.media3.common.Format)>(r1);

        specialinvoke $r24.<androidx.media3.transformer.SpeedChangingAudioProcessor: void <init>(androidx.media3.transformer.SpeedProvider)>($r25);

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor> = $r24;

     label1:
        $r26 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        r30 = virtualinvoke $r26.<androidx.media3.transformer.SpeedChangingAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat configure(androidx.media3.common.audio.AudioProcessor$AudioFormat)>(r30);

     label2:
        goto label4;

     label3:
        $r28 := @caughtexception;

        r31 = $r28;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r31);

        throw $r29;

     label4:
        $r27 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        virtualinvoke $r27.<androidx.media3.transformer.SpeedChangingAudioProcessor: void flush()>();

        goto label6;

     label5:
        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor> = null;

     label6:
        $r12 = <androidx.media3.common.audio.AudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: java.nio.ByteBuffer processorOutputBuffer> = $r12;

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.common.audio.AudioProcessor$AudioFormat encoderInputAudioFormat> = r30;

        $r13 = new androidx.media3.common.Format$Builder;

        specialinvoke $r13.<androidx.media3.common.Format$Builder: void <init>()>();

        $r14 = r2.<androidx.media3.transformer.TransformationRequest: java.lang.String audioMimeType>;

        if $r14 != null goto label7;

        $r32 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        goto label8;

     label7:
        $r32 = r2.<androidx.media3.transformer.TransformationRequest: java.lang.String audioMimeType>;

     label8:
        $r15 = virtualinvoke $r13.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>($r32);

        $i4 = r30.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        $r16 = virtualinvoke $r15.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>($i4);

        $i5 = r30.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int channelCount>;

        $r17 = virtualinvoke $r16.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>($i5);

        $r18 = virtualinvoke $r17.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setAverageBitrate(int)>(131072);

        r33 = virtualinvoke $r18.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $r19 = virtualinvoke r5.<androidx.media3.transformer.MuxerWrapper: com.google.common.collect.ImmutableList getSupportedSampleMimeTypes(int)>(1);

        $r20 = interfaceinvoke r4.<androidx.media3.transformer.Codec$EncoderFactory: androidx.media3.transformer.Codec createForAudioEncoding(androidx.media3.common.Format,java.util.List)>(r33, $r19);

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder> = $r20;

        $r21 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        $r22 = interfaceinvoke $r21.<androidx.media3.transformer.Codec: androidx.media3.common.Format getConfigurationFormat()>();

        $r23 = staticinvoke <androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.TransformationRequest createFallbackTransformationRequest(androidx.media3.transformer.TransformationRequest,androidx.media3.common.Format,androidx.media3.common.Format)>(r2, r33, $r22);

        virtualinvoke r6.<androidx.media3.transformer.FallbackListener: void onTransformationRequestFinalized(androidx.media3.transformer.TransformationRequest)>($r23);

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long nextEncoderInputBufferTimeUs> = l0;

        return;

        catch androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException from label1 to label2 with label3;
    }

    public void release()
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.transformer.SpeedChangingAudioProcessor $r1, $r4;
        androidx.media3.transformer.Codec $r2, $r3;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        if $r1 == null goto label1;

        $r4 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        virtualinvoke $r4.<androidx.media3.transformer.SpeedChangingAudioProcessor: void reset()>();

     label1:
        $r2 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        interfaceinvoke $r2.<androidx.media3.transformer.Codec: void release()>();

        $r3 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        interfaceinvoke $r3.<androidx.media3.transformer.Codec: void release()>();

        return;
    }

    protected androidx.media3.decoder.DecoderInputBuffer dequeueInputBufferInternal() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.decoder.DecoderInputBuffer $r1, $r3;
        androidx.media3.transformer.Codec $r2;
        boolean $z0;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r2 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>;

        $z0 = interfaceinvoke $r2.<androidx.media3.transformer.Codec: boolean maybeDequeueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)>($r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    protected void queueInputBufferInternal() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.decoder.DecoderInputBuffer $r1;
        androidx.media3.transformer.Codec $r2;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r2 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer decoderInputBuffer>;

        interfaceinvoke $r2.<androidx.media3.transformer.Codec: void queueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)>($r1);

        return;
    }

    protected boolean processDataUpToMuxer() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.transformer.SpeedChangingAudioProcessor $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        if $r1 == null goto label4;

        $z1 = specialinvoke r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: boolean feedEncoderFromProcessor()>();

        if $z1 != 0 goto label1;

        $z2 = specialinvoke r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: boolean feedProcessorFromDecoder()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        $z0 = specialinvoke r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: boolean feedEncoderFromDecoder()>();

        return $z0;
    }

    protected androidx.media3.common.Format getMuxerInputFormat() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.transformer.Codec $r1;
        androidx.media3.common.Format $r2;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        $r2 = interfaceinvoke $r1.<androidx.media3.transformer.Codec: androidx.media3.common.Format getOutputFormat()>();

        return $r2;
    }

    protected androidx.media3.decoder.DecoderInputBuffer getMuxerInputBuffer() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.transformer.Codec $r1, $r6;
        androidx.media3.decoder.DecoderInputBuffer $r2, $r4, $r7, $r11, $r12;
        java.nio.ByteBuffer $r3, $r5;
        android.media.MediaCodec$BufferInfo $r8, $r10;
        java.lang.Object $r9;
        long $l0;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r2 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        $r3 = interfaceinvoke $r1.<androidx.media3.transformer.Codec: java.nio.ByteBuffer getOutputBuffer()>();

        $r2.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data> = $r3;

        $r4 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        $r5 = $r4.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        if $r5 != null goto label1;

        return null;

     label1:
        $r7 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        $r6 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        $r8 = interfaceinvoke $r6.<androidx.media3.transformer.Codec: android.media.MediaCodec$BufferInfo getOutputBufferInfo()>();

        $r9 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r8);

        $r10 = (android.media.MediaCodec$BufferInfo) $r9;

        $l0 = $r10.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r7.<androidx.media3.decoder.DecoderInputBuffer: long timeUs> = $l0;

        $r11 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        virtualinvoke $r11.<androidx.media3.decoder.DecoderInputBuffer: void setFlags(int)>(1);

        $r12 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderOutputBuffer>;

        return $r12;
    }

    protected void releaseMuxerInputBuffer() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.transformer.Codec $r1;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        interfaceinvoke $r1.<androidx.media3.transformer.Codec: void releaseOutputBuffer(boolean)>(0);

        return;
    }

    protected boolean isMuxerInputEnded()
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.transformer.Codec $r1;
        boolean $z0;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        $z0 = interfaceinvoke $r1.<androidx.media3.transformer.Codec: boolean isEnded()>();

        return $z0;
    }

    private boolean feedEncoderFromDecoder() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        java.nio.ByteBuffer r1;
        androidx.media3.decoder.DecoderInputBuffer $r2;
        androidx.media3.transformer.Codec $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r3 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        $r2 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        $z0 = interfaceinvoke $r3.<androidx.media3.transformer.Codec: boolean maybeDequeueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)>($r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $z1 = interfaceinvoke $r4.<androidx.media3.transformer.Codec: boolean isEnded()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: void queueEndOfStreamToEncoder()>();

        return 0;

     label2:
        $r5 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        r1 = interfaceinvoke $r5.<androidx.media3.transformer.Codec: java.nio.ByteBuffer getOutputBuffer()>();

        if r1 != null goto label3;

        return 0;

     label3:
        specialinvoke r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: void feedEncoder(java.nio.ByteBuffer)>(r1);

        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 != 0 goto label4;

        $r6 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        interfaceinvoke $r6.<androidx.media3.transformer.Codec: void releaseOutputBuffer(boolean)>(0);

     label4:
        return 1;
    }

    private boolean feedEncoderFromProcessor() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.decoder.DecoderInputBuffer $r1;
        androidx.media3.transformer.Codec $r2, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.nio.ByteBuffer $r3, $r4, $r6, $r7;
        androidx.media3.transformer.SpeedChangingAudioProcessor $r5, $r9;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r2 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        $z0 = interfaceinvoke $r2.<androidx.media3.transformer.Codec: boolean maybeDequeueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: java.nio.ByteBuffer processorOutputBuffer>;

        $z1 = virtualinvoke $r3.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label3;

        $r5 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        $r6 = virtualinvoke $r5.<androidx.media3.transformer.SpeedChangingAudioProcessor: java.nio.ByteBuffer getOutput()>();

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: java.nio.ByteBuffer processorOutputBuffer> = $r6;

        $r7 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: java.nio.ByteBuffer processorOutputBuffer>;

        $z2 = virtualinvoke $r7.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 != 0 goto label3;

        $r8 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $z3 = interfaceinvoke $r8.<androidx.media3.transformer.Codec: boolean isEnded()>();

        if $z3 == 0 goto label2;

        $r9 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        $z4 = virtualinvoke $r9.<androidx.media3.transformer.SpeedChangingAudioProcessor: boolean isEnded()>();

        if $z4 == 0 goto label2;

        specialinvoke r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: void queueEndOfStreamToEncoder()>();

     label2:
        return 0;

     label3:
        $r4 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: java.nio.ByteBuffer processorOutputBuffer>;

        specialinvoke r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: void feedEncoder(java.nio.ByteBuffer)>($r4);

        return 1;
    }

    private boolean feedProcessorFromDecoder() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        java.nio.ByteBuffer r1, $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.media3.transformer.SpeedChangingAudioProcessor $r3, $r6, $r8, $r10;
        androidx.media3.transformer.Codec $r5, $r7, $r9;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r2 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: java.nio.ByteBuffer processorOutputBuffer>;

        $z0 = virtualinvoke $r2.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        $r4 = virtualinvoke $r3.<androidx.media3.transformer.SpeedChangingAudioProcessor: java.nio.ByteBuffer getOutput()>();

        $z1 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r5 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        $z2 = interfaceinvoke $r5.<androidx.media3.transformer.Codec: boolean isEnded()>();

        if $z2 == 0 goto label3;

        $r10 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        virtualinvoke $r10.<androidx.media3.transformer.SpeedChangingAudioProcessor: void queueEndOfStream()>();

        return 0;

     label3:
        $r6 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        $z3 = virtualinvoke $r6.<androidx.media3.transformer.SpeedChangingAudioProcessor: boolean isEnded()>();

        if $z3 != 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z5);

        $r7 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        r1 = interfaceinvoke $r7.<androidx.media3.transformer.Codec: java.nio.ByteBuffer getOutputBuffer()>();

        if r1 != null goto label6;

        return 0;

     label6:
        $r8 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.SpeedChangingAudioProcessor speedChangingAudioProcessor>;

        virtualinvoke $r8.<androidx.media3.transformer.SpeedChangingAudioProcessor: void queueInput(java.nio.ByteBuffer)>(r1);

        $z4 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z4 != 0 goto label7;

        $r9 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec decoder>;

        interfaceinvoke $r9.<androidx.media3.transformer.Codec: void releaseOutputBuffer(boolean)>(0);

     label7:
        return 1;
    }

    private void feedEncoder(java.nio.ByteBuffer) throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        java.nio.ByteBuffer r1, r2, $r4;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8;
        androidx.media3.decoder.DecoderInputBuffer $r3, $r8, $r11, $r12, $r14;
        java.lang.Object $r5;
        long $l5, $l9;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r9, $r10;
        androidx.media3.transformer.Codec $r15;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r3 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        $r4 = $r3.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        r2 = (java.nio.ByteBuffer) $r5;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i2 = virtualinvoke r2.<java.nio.ByteBuffer: int capacity()>();

        $i3 = $i1 + $i2;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i3);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i4);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

        $r8 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        $l5 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long nextEncoderInputBufferTimeUs>;

        $r8.<androidx.media3.decoder.DecoderInputBuffer: long timeUs> = $l5;

        $i6 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        $l9 = (long) $i6;

        $r9 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.common.audio.AudioProcessor$AudioFormat encoderInputAudioFormat>;

        $i8 = $r9.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int bytesPerFrame>;

        $r10 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.common.audio.AudioProcessor$AudioFormat encoderInputAudioFormat>;

        $i7 = $r10.<androidx.media3.common.audio.AudioProcessor$AudioFormat: int sampleRate>;

        specialinvoke r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: void computeNextEncoderInputBufferTimeUs(long,int,int)>($l9, $i8, $i7);

        $r11 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        virtualinvoke $r11.<androidx.media3.decoder.DecoderInputBuffer: void setFlags(int)>(0);

        $r12 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        virtualinvoke $r12.<androidx.media3.decoder.DecoderInputBuffer: void flip()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i0);

        $r15 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        $r14 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        interfaceinvoke $r15.<androidx.media3.transformer.Codec: void queueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)>($r14);

        return;
    }

    private void queueEndOfStreamToEncoder() throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        androidx.media3.decoder.DecoderInputBuffer $r1, $r5, $r6, $r7, $r8;
        java.nio.ByteBuffer $r2, $r4;
        java.lang.Object $r3;
        int $i0;
        long $l1;
        androidx.media3.transformer.Codec $r9;
        boolean $z0;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        $r1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        $r2 = $r1.<androidx.media3.decoder.DecoderInputBuffer: java.nio.ByteBuffer data>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (java.nio.ByteBuffer) $r3;

        $i0 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r5 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        $l1 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long nextEncoderInputBufferTimeUs>;

        $r5.<androidx.media3.decoder.DecoderInputBuffer: long timeUs> = $l1;

        $r6 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        virtualinvoke $r6.<androidx.media3.decoder.DecoderInputBuffer: void addFlag(int)>(4);

        $r7 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        virtualinvoke $r7.<androidx.media3.decoder.DecoderInputBuffer: void flip()>();

        $r9 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.transformer.Codec encoder>;

        $r8 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: androidx.media3.decoder.DecoderInputBuffer encoderInputBuffer>;

        interfaceinvoke $r9.<androidx.media3.transformer.Codec: void queueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)>($r8);

        return;
    }

    private void computeNextEncoderInputBufferTimeUs(long, int, int)
    {
        androidx.media3.transformer.AudioTranscodingSamplePipeline r0;
        long l0, l3, l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l13, $l14, $l15, $l16, l17;
        int i1, i2;
        byte $b12;

        r0 := @this: androidx.media3.transformer.AudioTranscodingSamplePipeline;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l6 = l0 * 1000000L;

        $l5 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long encoderBufferDurationRemainder>;

        l3 = $l6 + $l5;

        $l8 = (long) i1;

        $l7 = (long) i2;

        l4 = $l8 * $l7;

        l17 = l3 / l4;

        $l9 = l17 * l4;

        $l10 = l3 - $l9;

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long encoderBufferDurationRemainder> = $l10;

        $l11 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long encoderBufferDurationRemainder>;

        $b12 = $l11 cmp 0L;

        if $b12 <= 0 goto label1;

        l17 = l17 + 1L;

        $l15 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long encoderBufferDurationRemainder>;

        $l16 = $l15 - l4;

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long encoderBufferDurationRemainder> = $l16;

     label1:
        $l13 = r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long nextEncoderInputBufferTimeUs>;

        $l14 = $l13 + l17;

        r0.<androidx.media3.transformer.AudioTranscodingSamplePipeline: long nextEncoderInputBufferTimeUs> = $l14;

        return;
    }

    private static androidx.media3.transformer.TransformationRequest createFallbackTransformationRequest(androidx.media3.transformer.TransformationRequest, androidx.media3.common.Format, androidx.media3.common.Format)
    {
        androidx.media3.transformer.TransformationRequest r0, $r8;
        androidx.media3.common.Format r1, r2;
        java.lang.String $r3, $r4, $r6;
        boolean $z0;
        androidx.media3.transformer.TransformationRequest$Builder $r5, $r7;

        r0 := @parameter0: androidx.media3.transformer.TransformationRequest;

        r1 := @parameter1: androidx.media3.common.Format;

        r2 := @parameter2: androidx.media3.common.Format;

        $r4 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r3 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = staticinvoke <androidx.media3.common.util.Util: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r5 = virtualinvoke r0.<androidx.media3.transformer.TransformationRequest: androidx.media3.transformer.TransformationRequest$Builder buildUpon()>();

        $r6 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r7 = virtualinvoke $r5.<androidx.media3.transformer.TransformationRequest$Builder: androidx.media3.transformer.TransformationRequest$Builder setAudioMimeType(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<androidx.media3.transformer.TransformationRequest$Builder: androidx.media3.transformer.TransformationRequest build()>();

        return $r8;
    }

