androidx.room.compiler.processing.util.compiler.KotlinCliRunner
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: androidx.room.compiler.processing.util.compiler.KotlinCliRunner INSTANCE>
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: org.jetbrains.kotlin.cli.jvm.K2JVMCompiler compiler>
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: kotlin.Lazy inheritedClasspath$delegate>
    private void <init>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final kotlin.sequences.Sequence existingRootPaths(java.util.List)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner r0;
        java.util.List $r1;
        java.lang.Iterable $r2;
        kotlin.sequences.Sequence $r3, $r6, $r9, $r12, $r13;
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1 $r4;
        kotlin.jvm.functions.Function1 $r5, $r8, $r11;
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2 $r7;
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3 $r10;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner;

        $r1 := @parameter0: java.util.List;

        $r2 = (java.lang.Iterable) $r1;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: kotlin.sequences.Sequence asSequence(java.lang.Iterable)>($r2);

        $r4 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1 INSTANCE>;

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        $r6 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r3, $r5);

        $r7 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2 INSTANCE>;

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        $r9 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence filter(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r6, $r8);

        $r10 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3 INSTANCE>;

        $r11 = (kotlin.jvm.functions.Function1) $r10;

        $r12 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)>($r9, $r11);

        $r13 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence distinct(kotlin.sequences.Sequence)>($r12);

        return $r13;
    }

    private final void copyToCliArguments(androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments, org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner r0, r46, r55;
        androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments $r1;
        org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments r2, r41, r47, r57;
        java.util.List r3, $r8, $r12, $r15, $r17, $r19, $r26, $r29, $r33, $r34, $r37, $r40, r53;
        org.jetbrains.kotlin.config.JvmTarget $r4;
        java.lang.String $r5, $r7, $r20, $r25;
        org.jetbrains.kotlin.config.JvmDefaultMode $r6;
        java.lang.String[] $r9, $r11, $r30, $r32;
        java.lang.Object[] $r10, $r31;
        boolean $z0, $z1, $z3, $z5, z8, $z10, z12, $z14, z16, z17, $z19;
        java.lang.Iterable $r13, $r18, $r21, $r38, $r48, $r58;
        java.util.Collection $r14, r39, r42, r49, $r54, r56, r59;
        java.util.ArrayList $r16, $r27, $r35;
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2 $r22;
        kotlin.jvm.functions.Function1 $r23;
        java.lang.CharSequence $r24;
        kotlin.sequences.Sequence $r28, $r36;
        java.util.Iterator r43, r50, r60;
        java.lang.Object r44, r51, r61;
        java.io.File r45;
        androidx.room.compiler.processing.util.compiler.SourceSet r52, r62;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner;

        $r1 := @parameter0: androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments;

        r2 := @parameter1: org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments;

        virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setNoStdlib(boolean)>(1);

        virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setNoReflect(boolean)>(1);

        $r4 = <org.jetbrains.kotlin.config.JvmTarget: org.jetbrains.kotlin.config.JvmTarget JVM_1_8>;

        $r5 = virtualinvoke $r4.<org.jetbrains.kotlin.config.JvmTarget: java.lang.String getDescription()>();

        virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setJvmTarget(java.lang.String)>($r5);

        virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setNoOptimize(boolean)>(1);

        virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setUseJavac(boolean)>(0);

        virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setCompileJava(boolean)>(0);

        $r6 = <org.jetbrains.kotlin.config.JvmDefaultMode: org.jetbrains.kotlin.config.JvmDefaultMode ALL_COMPATIBILITY>;

        $r7 = virtualinvoke $r6.<org.jetbrains.kotlin.config.JvmDefaultMode: java.lang.String getDescription()>();

        virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setJvmDefault(java.lang.String)>($r7);

        virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setAllowNoSourceFiles(boolean)>(1);

        $r8 = virtualinvoke $r1.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getJavacArguments()>();

        r39 = (java.util.Collection) $r8;

        $r9 = newarray (java.lang.String)[0];

        $r10 = interfaceinvoke r39.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r10, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        $r11 = (java.lang.String[]) $r10;

        virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setJavacArguments(java.lang.String[])>($r11);

        $z0 = virtualinvoke $r1.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: boolean getInheritClasspaths()>();

        if $z0 == 0 goto label1;

        $r40 = specialinvoke r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: java.util.List getInheritedClasspath()>();

        goto label2;

     label1:
        $r40 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label2:
        $r12 = virtualinvoke $r1.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getAdditionalClasspaths()>();

        $r14 = (java.util.Collection) $r12;

        $r13 = (java.lang.Iterable) $r40;

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,java.lang.Iterable)>($r14, $r13);

        r41 = r2;

        z8 = 0;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r42 = (java.util.Collection) $r16;

        $r38 = (java.lang.Iterable) $r15;

        r43 = interfaceinvoke $r38.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z10 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label4;

        r44 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r45 = (java.io.File) r44;

        $z5 = virtualinvoke r45.<java.io.File: boolean exists()>();

        if $z5 == 0 goto label3;

        interfaceinvoke r42.<java.util.Collection: boolean add(java.lang.Object)>(r44);

        goto label3;

     label4:
        $r17 = (java.util.List) r42;

        $r18 = (java.lang.Iterable) $r17;

        $r19 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List distinct(java.lang.Iterable)>($r18);

        $r21 = (java.lang.Iterable) $r19;

        $r20 = <java.io.File: java.lang.String pathSeparator>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r20, "pathSeparator");

        $r24 = (java.lang.CharSequence) $r20;

        $r22 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2 INSTANCE>;

        $r23 = (kotlin.jvm.functions.Function1) $r22;

        $r25 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r21, $r24, null, null, 0, null, $r23, 30, null);

        virtualinvoke r41.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setClasspath(java.lang.String)>($r25);

        $r26 = virtualinvoke $r1.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getSourceSets()>();

        r46 = r0;

        r47 = r2;

        z12 = 0;

        $r48 = (java.lang.Iterable) $r26;

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        r49 = (java.util.Collection) $r27;

        r50 = interfaceinvoke $r48.<java.lang.Iterable: java.util.Iterator iterator()>();

     label5:
        $z14 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label6;

        r51 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();

        r52 = (androidx.room.compiler.processing.util.compiler.SourceSet) r51;

        $z3 = virtualinvoke r52.<androidx.room.compiler.processing.util.compiler.SourceSet: boolean getHasJavaSource()>();

        if $z3 == 0 goto label5;

        interfaceinvoke r49.<java.util.Collection: boolean add(java.lang.Object)>(r51);

        goto label5;

     label6:
        r53 = (java.util.List) r49;

        $r28 = specialinvoke r46.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: kotlin.sequences.Sequence existingRootPaths(java.util.List)>(r53);

        $r29 = staticinvoke <kotlin.sequences.SequencesKt: java.util.List toList(kotlin.sequences.Sequence)>($r28);

        z16 = 0;

        $r54 = (java.util.Collection) $r29;

        $r30 = newarray (java.lang.String)[0];

        $r31 = interfaceinvoke $r54.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r30);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r31, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        $r32 = (java.lang.String[]) $r31;

        virtualinvoke r47.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setJavaSourceRoots(java.lang.String[])>($r32);

        $r33 = virtualinvoke r2.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: java.util.List getFreeArgs()>();

        $r34 = virtualinvoke $r1.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getSourceSets()>();

        r55 = r0;

        r56 = (java.util.Collection) $r33;

        r57 = r2;

        z17 = 0;

        $r58 = (java.lang.Iterable) $r34;

        $r35 = new java.util.ArrayList;

        specialinvoke $r35.<java.util.ArrayList: void <init>()>();

        r59 = (java.util.Collection) $r35;

        r60 = interfaceinvoke $r58.<java.lang.Iterable: java.util.Iterator iterator()>();

     label7:
        $z19 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label8;

        r61 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r62 = (androidx.room.compiler.processing.util.compiler.SourceSet) r61;

        $z1 = virtualinvoke r62.<androidx.room.compiler.processing.util.compiler.SourceSet: boolean getHasKotlinSource()>();

        if $z1 == 0 goto label7;

        interfaceinvoke r59.<java.util.Collection: boolean add(java.lang.Object)>(r61);

        goto label7;

     label8:
        r3 = (java.util.List) r59;

        $r36 = specialinvoke r55.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: kotlin.sequences.Sequence existingRootPaths(java.util.List)>(r3);

        $r37 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List plus(java.util.Collection,kotlin.sequences.Sequence)>(r56, $r36);

        virtualinvoke r57.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setFreeArgs(java.util.List)>($r37);

        return;
    }

    public final androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult runKotlinCli(androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments, java.io.File, java.util.List)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner r0;
        androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments r1;
        java.io.File r2;
        java.util.List r3, $r9, $r19;
        org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments r4;
        java.util.Collection r5;
        org.jetbrains.kotlin.cli.jvm.K2JVMCompiler $r6, $r8, $r16;
        java.lang.String $r7;
        java.lang.String[] $r10, $r13;
        java.lang.Object[] $r11;
        org.jetbrains.kotlin.cli.common.arguments.CommonToolArguments $r12;
        androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector $r14;
        org.jetbrains.kotlin.cli.common.messages.MessageCollector $r15;
        androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion $r17;
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult $r18;
        org.jetbrains.kotlin.cli.common.ExitCode $r21;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner;

        r1 := @parameter0: androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "arguments");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "destinationDir");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "pluginRegistrars");

        $r6 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: org.jetbrains.kotlin.cli.jvm.K2JVMCompiler compiler>;

        r4 = virtualinvoke $r6.<org.jetbrains.kotlin.cli.jvm.K2JVMCompiler: org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments createArguments()>();

        virtualinvoke r2.<java.io.File: boolean mkdirs()>();

        $r7 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke r4.<org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments: void setDestination(java.lang.String)>($r7);

        specialinvoke r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: void copyToCliArguments(androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments,org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments)>(r1, r4);

        $r8 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: org.jetbrains.kotlin.cli.jvm.K2JVMCompiler compiler>;

        $r9 = virtualinvoke r1.<androidx.room.compiler.processing.util.compiler.steps.CompilationStepArguments: java.util.List getKotlincArguments()>();

        r5 = (java.util.Collection) $r9;

        $r10 = newarray (java.lang.String)[0];

        $r11 = interfaceinvoke r5.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r11, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");

        $r13 = (java.lang.String[]) $r11;

        $r12 = (org.jetbrains.kotlin.cli.common.arguments.CommonToolArguments) r4;

        virtualinvoke $r8.<org.jetbrains.kotlin.cli.jvm.K2JVMCompiler: void parseArguments(java.lang.String[],org.jetbrains.kotlin.cli.common.arguments.CommonToolArguments)>($r13, $r12);

        $r14 = new androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector;

        specialinvoke $r14.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: void <init>()>();

        $r17 = <androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar: androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion Companion>;

        $r16 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: org.jetbrains.kotlin.cli.jvm.K2JVMCompiler compiler>;

        $r15 = (org.jetbrains.kotlin.cli.common.messages.MessageCollector) $r14;

        $r21 = virtualinvoke $r17.<androidx.room.compiler.processing.util.compiler.DelegatingTestRegistrar$Companion: org.jetbrains.kotlin.cli.common.ExitCode runCompilation(org.jetbrains.kotlin.cli.jvm.K2JVMCompiler,org.jetbrains.kotlin.cli.common.messages.MessageCollector,org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments,java.util.List)>($r16, $r15, r4, r3);

        $r18 = new androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult;

        $r19 = virtualinvoke $r14.<androidx.room.compiler.processing.util.compiler.DiagnosticsMessageCollector: java.util.List getDiagnostics()>();

        specialinvoke $r18.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: void <init>(org.jetbrains.kotlin.cli.common.ExitCode,java.util.List,java.io.File,org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments)>($r21, $r19, r2, r4);

        return $r18;
    }

    private final java.util.List getInheritedClasspath()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner;

        r1 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: kotlin.Lazy inheritedClasspath$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    private final java.util.List getClasspathFromClassloader(java.lang.ClassLoader)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner r0;
        java.lang.ClassLoader r1, r2, r3, $r6, $r11, r30;
        java.util.Set r4, $r28;
        java.util.Collection r5, $r29, r37, r42;
        java.util.LinkedHashSet $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.net.URLClassLoader $r8, $r10;
        java.net.URL[] $r9;
        java.lang.String $r12, $r13, $r15, $r20, $r22, $r31, $r35, $r40;
        java.lang.IllegalStateException $r14, $r21;
        java.lang.StringBuilder $r16, $r17, $r18, $r19;
        java.util.ArrayList $r23, $r25;
        int $i0, $i1, i2;
        java.util.List $r24, $r26;
        java.io.File $r27, $r45;
        java.lang.Object[] $r32;
        java.lang.Object r33, $r39, $r44;
        java.net.URL r34;
        java.lang.Iterable $r36, $r41;
        java.util.Iterator r38, r43;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner;

        r1 := @parameter0: java.lang.ClassLoader;

        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getPlatformClassLoader()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "getPlatformClassLoader()");

        r2 = $r6;

        r30 = r1;

        r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r7 = new java.util.LinkedHashSet;

        specialinvoke $r7.<java.util.LinkedHashSet: void <init>()>();

        r4 = (java.util.Set) $r7;

     label01:
        if r30 != r3 goto label02;

        $r28 = staticinvoke <androidx.room.compiler.processing.util.TestUiltsKt: java.util.Set getSystemClasspaths()>();

        $r29 = (java.util.Collection) $r28;

        interfaceinvoke r4.<java.util.Set: boolean addAll(java.util.Collection)>($r29);

        goto label08;

     label02:
        if r30 != r2 goto label03;

        goto label08;

     label03:
        $z0 = r30 instanceof java.net.URLClassLoader;

        if $z0 != 0 goto label04;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Classpath for compilation could not be extracted\n                since ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an instance of URLClassloader\n                ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r20);

        $r21 = new java.lang.IllegalStateException;

        $r22 = virtualinvoke $r31.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label04:
        $r8 = (java.net.URLClassLoader) r30;

        $r9 = virtualinvoke $r8.<java.net.URLClassLoader: java.net.URL[] getURLs()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "currentClassloader.urLs");

        $r32 = (java.lang.Object[]) $r9;

        $i1 = 0;

        i2 = lengthof $r32;

     label05:
        if $i1 >= i2 goto label07;

        r33 = $r32[$i1];

        r34 = (java.net.URL) r33;

        $r12 = virtualinvoke r34.<java.net.URL: java.lang.String getProtocol()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r12, "file");

        if $z1 != 0 goto label06;

        $r35 = "Given classloader consists of classpaths which are unsupported for\n                    compilation.";

        $r14 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke $r35.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label06:
        $r13 = virtualinvoke r34.<java.net.URL: java.lang.String getPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "url.path");

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r13);

        $i1 = $i1 + 1;

        goto label05;

     label07:
        $r10 = (java.net.URLClassLoader) r30;

        $r11 = virtualinvoke $r10.<java.net.URLClassLoader: java.lang.ClassLoader getParent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "currentClassloader.parent");

        r30 = $r11;

        goto label01;

     label08:
        $r36 = (java.lang.Iterable) r4;

        $r23 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r36, 10);

        specialinvoke $r23.<java.util.ArrayList: void <init>(int)>($i0);

        r37 = (java.util.Collection) $r23;

        r38 = interfaceinvoke $r36.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r39 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        $r40 = (java.lang.String) $r39;

        r5 = r37;

        $r27 = new java.io.File;

        specialinvoke $r27.<java.io.File: void <init>(java.lang.String)>($r40);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r27);

        goto label09;

     label10:
        $r24 = (java.util.List) r37;

        $r41 = (java.lang.Iterable) $r24;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        r42 = (java.util.Collection) $r25;

        r43 = interfaceinvoke $r41.<java.lang.Iterable: java.util.Iterator iterator()>();

     label11:
        $z4 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r44 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        $r45 = (java.io.File) $r44;

        $z2 = virtualinvoke $r45.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label11;

        interfaceinvoke r42.<java.util.Collection: boolean add(java.lang.Object)>($r44);

        goto label11;

     label12:
        $r26 = (java.util.List) r42;

        return $r26;
    }

    public static final java.util.List access$getClasspathFromClassloader(androidx.room.compiler.processing.util.compiler.KotlinCliRunner, java.lang.ClassLoader)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner $r0;
        java.lang.ClassLoader r1;
        java.util.List $r2;

        $r0 := @parameter0: androidx.room.compiler.processing.util.compiler.KotlinCliRunner;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: java.util.List getClasspathFromClassloader(java.lang.ClassLoader)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner $r0;
        org.jetbrains.kotlin.cli.jvm.K2JVMCompiler $r1;
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2 $r2;
        kotlin.jvm.functions.Function0 $r3;
        kotlin.LazyThreadSafetyMode $r4;
        kotlin.Lazy $r5;

        $r0 = new androidx.room.compiler.processing.util.compiler.KotlinCliRunner;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: androidx.room.compiler.processing.util.compiler.KotlinCliRunner INSTANCE> = $r0;

        $r1 = new org.jetbrains.kotlin.cli.jvm.K2JVMCompiler;

        specialinvoke $r1.<org.jetbrains.kotlin.cli.jvm.K2JVMCompiler: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: org.jetbrains.kotlin.cli.jvm.K2JVMCompiler compiler> = $r1;

        $r4 = <kotlin.LazyThreadSafetyMode: kotlin.LazyThreadSafetyMode NONE>;

        $r2 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2 INSTANCE>;

        $r3 = (kotlin.jvm.functions.Function0) $r2;

        $r5 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.LazyThreadSafetyMode,kotlin.jvm.functions.Function0)>($r4, $r3);

        <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: kotlin.Lazy inheritedClasspath$delegate> = $r5;

        return;
    }

androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2 INSTANCE>
    void <init>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2 r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.CharSequence invoke(java.io.File)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2 r0;
        java.io.File r1;
        java.lang.String $r2;
        java.lang.CharSequence $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2;

        r1 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "it.canonicalPath");

        $r3 = (java.lang.CharSequence) $r2;

        return $r3;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2 r0;
        java.lang.Object r1;
        java.io.File $r2;
        java.lang.CharSequence $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.io.File) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2: java.lang.CharSequence invoke(java.io.File)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2 $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$copyToCliArguments$2 INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1 INSTANCE>
    void <init>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1 r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.io.File invoke(androidx.room.compiler.processing.util.compiler.SourceSet)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1 r0;
        androidx.room.compiler.processing.util.compiler.SourceSet r1;
        java.io.File $r2;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1;

        r1 := @parameter0: androidx.room.compiler.processing.util.compiler.SourceSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<androidx.room.compiler.processing.util.compiler.SourceSet: java.io.File getRoot()>();

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1 r0;
        java.lang.Object r1;
        androidx.room.compiler.processing.util.compiler.SourceSet $r2;
        java.io.File $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.room.compiler.processing.util.compiler.SourceSet) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1: java.io.File invoke(androidx.room.compiler.processing.util.compiler.SourceSet)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1 $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$1 INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2 INSTANCE>
    void <init>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2 r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(java.io.File)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2 r0;
        java.io.File r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2;

        r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2 r0;
        java.lang.Object r1;
        java.io.File $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.io.File) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2: java.lang.Boolean invoke(java.io.File)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2 $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$2 INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3 INSTANCE>
    void <init>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3 r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.String invoke(java.io.File)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3 r0;
        java.io.File r1;
        java.lang.String $r2;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3;

        r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getCanonicalPath()>();

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3 r0;
        java.lang.Object r1;
        java.io.File $r2;
        java.lang.String $r3;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.io.File) r1;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3: java.lang.String invoke(java.io.File)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3 $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$existingRootPaths$3 INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2 INSTANCE>
    void <init>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2 r0;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.List invoke()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2 r0;
        java.lang.Class $r1;
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner $r2;
        java.lang.ClassLoader $r3;
        java.util.List $r4;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2;

        $r2 = <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: androidx.room.compiler.processing.util.compiler.KotlinCliRunner INSTANCE>;

        $r1 = class "Landroidx/room/compiler/processing/util/compiler/KotlinCliRunner;";

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "KotlinCliRunner::class.java.classLoader");

        $r4 = staticinvoke <androidx.room.compiler.processing.util.compiler.KotlinCliRunner: java.util.List access$getClasspathFromClassloader(androidx.room.compiler.processing.util.compiler.KotlinCliRunner,java.lang.ClassLoader)>($r2, $r3);

        return $r4;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2 r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2: java.util.List invoke()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2 $r0;

        $r0 = new androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2;

        specialinvoke $r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2: void <init>()>();

        <androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$inheritedClasspath$2 INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: org.jetbrains.kotlin.cli.common.ExitCode exitCode>
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: java.util.List diagnostics>
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: java.io.File compiledClasspath>
<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments kotlinCliArguments>
    public void <init>(org.jetbrains.kotlin.cli.common.ExitCode, java.util.List, java.io.File, org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments)
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult r0;
        org.jetbrains.kotlin.cli.common.ExitCode r1;
        java.util.List r2;
        java.io.File r3;
        org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments r4;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult;

        r1 := @parameter0: org.jetbrains.kotlin.cli.common.ExitCode;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.io.File;

        r4 := @parameter3: org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "exitCode");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "diagnostics");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "compiledClasspath");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "kotlinCliArguments");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: org.jetbrains.kotlin.cli.common.ExitCode exitCode> = r1;

        r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: java.util.List diagnostics> = r2;

        r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: java.io.File compiledClasspath> = r3;

        r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments kotlinCliArguments> = r4;

        return;
    }

    public final org.jetbrains.kotlin.cli.common.ExitCode getExitCode()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult r0;
        org.jetbrains.kotlin.cli.common.ExitCode $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: org.jetbrains.kotlin.cli.common.ExitCode exitCode>;

        return $r1;
    }

    public final java.util.List getDiagnostics()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult r0;
        java.util.List $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: java.util.List diagnostics>;

        return $r1;
    }

    public final java.io.File getCompiledClasspath()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult r0;
        java.io.File $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: java.io.File compiledClasspath>;

        return $r1;
    }

    public final org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments getKotlinCliArguments()
    {
        androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult r0;
        org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments $r1;

        r0 := @this: androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult;

        $r1 = r0.<androidx.room.compiler.processing.util.compiler.KotlinCliRunner$KotlinCliResult: org.jetbrains.kotlin.cli.common.arguments.K2JVMCompilerArguments kotlinCliArguments>;

        return $r1;
    }

