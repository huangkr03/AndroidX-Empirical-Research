androidx.compose.ui.text.platform.AndroidFontListTypeface
<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion Companion>
<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher fontMatcher$1>
<androidx.compose.ui.text.platform.AndroidFontListTypeface: java.util.Map loadedTypefaces>
<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontFamily fontFamily>
<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher fontMatcher>
    public void <init>(androidx.compose.ui.text.font.FontListFontFamily, android.content.Context, java.util.List, androidx.compose.ui.text.font.FontMatcher)
    {
        androidx.compose.ui.text.platform.AndroidFontListTypeface r0;
        androidx.compose.ui.text.font.FontListFontFamily r1;
        android.content.Context r2;
        java.util.List r3, r5, $r15, $r16, $r24, $r35, r41, r43, r50, $r54, $r55, $r58;
        androidx.compose.ui.text.font.FontMatcher r4, $r23;
        java.util.Collection r6, $r19, $r28;
        java.util.ArrayList $r7, $r14, $r18, r36;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, i8, i9, i10, $i11, i12, i13, $i14;
        boolean $z0, $z1, $z4, z15, z17;
        java.util.LinkedHashMap $r8;
        androidx.compose.ui.text.font.FontFamily $r9;
        androidx.compose.ui.text.platform.AndroidTypefaceCache $r10;
        android.graphics.Typeface $r11;
        java.lang.IllegalStateException $r13, $r30;
        java.util.HashSet $r17, r48;
        java.lang.Object $r20, $r21, $r25, r38, r39, r44, r51, r59;
        androidx.compose.ui.text.font.FontStyle $r22;
        androidx.compose.ui.text.font.Font $r26, r40, r52, r53, r60;
        androidx.compose.ui.text.font.FontLoadingStrategy$Companion $r27;
        java.lang.Throwable $r29, r61;
        java.lang.StringBuilder $r31, $r32, $r33;
        java.lang.String $r34;
        kotlin.Pair r45;
        androidx.compose.ui.text.font.FontWeight r46;
        java.util.Map r57;

        r0 := @this: androidx.compose.ui.text.platform.AndroidFontListTypeface;

        r1 := @parameter0: androidx.compose.ui.text.font.FontListFontFamily;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: androidx.compose.ui.text.font.FontMatcher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fontFamily");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "fontMatcher");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher fontMatcher$1> = r4;

        $r35 = virtualinvoke r1.<androidx.compose.ui.text.font.FontListFontFamily: java.util.List getFonts()>();

        $r7 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r35.<java.util.List: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0);

        r36 = $r7;

        i6 = 0;

        $i7 = interfaceinvoke $r35.<java.util.List: int size()>();

     label01:
        if i6 >= $i7 goto label03;

        r38 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(i6);

        r39 = r38;

        r40 = (androidx.compose.ui.text.font.Font) r39;

        $i4 = interfaceinvoke r40.<androidx.compose.ui.text.font.Font: int getLoadingStrategy-PKNRLFQ()>();

        $r27 = <androidx.compose.ui.text.font.FontLoadingStrategy: androidx.compose.ui.text.font.FontLoadingStrategy$Companion Companion>;

        $i5 = virtualinvoke $r27.<androidx.compose.ui.text.font.FontLoadingStrategy$Companion: int getBlocking-PKNRLFQ()>();

        $z4 = staticinvoke <androidx.compose.ui.text.font.FontLoadingStrategy: boolean equals-impl0(int,int)>($i4, $i5);

        if $z4 == 0 goto label02;

        $r28 = (java.util.Collection) r36;

        interfaceinvoke $r28.<java.util.Collection: boolean add(java.lang.Object)>(r39);

     label02:
        i6 = i6 + 1;

        goto label01;

     label03:
        r5 = (java.util.List) r36;

        if r3 == null goto label09;

        r41 = r3;

        $r14 = new java.util.ArrayList;

        $i1 = interfaceinvoke r41.<java.util.List: int size()>();

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i1);

        r43 = r41;

        i8 = 0;

        i9 = interfaceinvoke r43.<java.util.List: int size()>();

     label04:
        if i8 >= i9 goto label05;

        r44 = interfaceinvoke r43.<java.util.List: java.lang.Object get(int)>(i8);

        r45 = (kotlin.Pair) r44;

        r6 = (java.util.Collection) $r14;

        $r20 = virtualinvoke r45.<kotlin.Pair: java.lang.Object component1()>();

        r46 = (androidx.compose.ui.text.font.FontWeight) $r20;

        $r21 = virtualinvoke r45.<kotlin.Pair: java.lang.Object component2()>();

        $r22 = (androidx.compose.ui.text.font.FontStyle) $r21;

        i10 = virtualinvoke $r22.<androidx.compose.ui.text.font.FontStyle: int unbox-impl()>();

        $r23 = r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher fontMatcher$1>;

        $r24 = virtualinvoke $r23.<androidx.compose.ui.text.font.FontMatcher: java.util.List matchFont-RetOiIg(java.util.List,androidx.compose.ui.text.font.FontWeight,int)>(r5, r46, i10);

        $r25 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object firstOrNull(java.util.List)>($r24);

        $r26 = (androidx.compose.ui.text.font.Font) $r25;

        interfaceinvoke r6.<java.util.Collection: boolean add(java.lang.Object)>($r26);

        i8 = i8 + 1;

        goto label04;

     label05:
        $r15 = (java.util.List) $r14;

        $r16 = staticinvoke <androidx.compose.ui.text.TempListUtilsKt: java.util.List fastFilterNotNull(java.util.List)>($r15);

        if $r16 == null goto label09;

        $r17 = new java.util.HashSet;

        $i2 = interfaceinvoke $r16.<java.util.List: int size()>();

        specialinvoke $r17.<java.util.HashSet: void <init>(int)>($i2);

        r48 = $r17;

        $r18 = new java.util.ArrayList;

        $i3 = interfaceinvoke $r16.<java.util.List: int size()>();

        specialinvoke $r18.<java.util.ArrayList: void <init>(int)>($i3);

        r50 = $r16;

        z15 = 0;

        $i11 = 0;

        i12 = interfaceinvoke r50.<java.util.List: int size()>();

     label06:
        if $i11 >= i12 goto label08;

        r51 = interfaceinvoke r50.<java.util.List: java.lang.Object get(int)>($i11);

        r52 = (androidx.compose.ui.text.font.Font) r51;

        z17 = 0;

        r53 = r52;

        $z1 = virtualinvoke r48.<java.util.HashSet: boolean add(java.lang.Object)>(r53);

        if $z1 == 0 goto label07;

        $r19 = (java.util.Collection) $r18;

        interfaceinvoke $r19.<java.util.Collection: boolean add(java.lang.Object)>(r51);

     label07:
        $i11 = $i11 + 1;

        goto label06;

     label08:
        $r54 = (java.util.List) $r18;

        goto label10;

     label09:
        $r54 = null;

     label10:
        $r55 = $r54;

        if $r54 != null goto label11;

        $r55 = r5;

     label11:
        $z0 = interfaceinvoke $r55.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label12;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not match font");

        throw $r13;

     label12:
        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        r57 = (java.util.Map) $r8;

        $r58 = $r55;

        i13 = 0;

        $i14 = interfaceinvoke $r55.<java.util.List: int size()>();

     label13:
        if i13 >= $i14 goto label18;

        r59 = interfaceinvoke $r58.<java.util.List: java.lang.Object get(int)>(i13);

        r60 = (androidx.compose.ui.text.font.Font) r59;

     label14:
        $r10 = <androidx.compose.ui.text.platform.AndroidTypefaceCache: androidx.compose.ui.text.platform.AndroidTypefaceCache INSTANCE>;

        $r11 = virtualinvoke $r10.<androidx.compose.ui.text.platform.AndroidTypefaceCache: android.graphics.Typeface getOrCreate(android.content.Context,androidx.compose.ui.text.font.Font)>(r2, r60);

        interfaceinvoke r57.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r60, $r11);

     label15:
        goto label17;

     label16:
        $r29 := @caughtexception;

        r61 = $r29;

        $r30 = new java.lang.IllegalStateException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create Typeface from ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r60);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        throw $r30;

     label17:
        i13 = i13 + 1;

        goto label13;

     label18:
        r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: java.util.Map loadedTypefaces> = r57;

        $r9 = (androidx.compose.ui.text.font.FontFamily) r1;

        r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontFamily fontFamily> = $r9;

        return;

        catch java.lang.Exception from label14 to label15 with label16;
    }

    public void <init>(androidx.compose.ui.text.font.FontListFontFamily, android.content.Context, java.util.List, androidx.compose.ui.text.font.FontMatcher, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.text.platform.AndroidFontListTypeface r0;
        androidx.compose.ui.text.font.FontListFontFamily r1;
        android.content.Context r2;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r3;
        java.util.List r4;
        androidx.compose.ui.text.font.FontMatcher r5;

        r0 := @this: androidx.compose.ui.text.platform.AndroidFontListTypeface;

        r1 := @parameter0: androidx.compose.ui.text.font.FontListFontFamily;

        r2 := @parameter1: android.content.Context;

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: androidx.compose.ui.text.font.FontMatcher;

        i0 := @parameter4: int;

        r3 := @parameter5: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        r4 = null;

     label1:
        $i2 = i0 & 8;

        if $i2 == 0 goto label2;

        r5 = <androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher fontMatcher>;

     label2:
        specialinvoke r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: void <init>(androidx.compose.ui.text.font.FontListFontFamily,android.content.Context,java.util.List,androidx.compose.ui.text.font.FontMatcher)>(r1, r2, r4, r5);

        return;
    }

    public final androidx.compose.ui.text.font.FontMatcher getFontMatcher()
    {
        androidx.compose.ui.text.platform.AndroidFontListTypeface r0;
        androidx.compose.ui.text.font.FontMatcher $r1;

        r0 := @this: androidx.compose.ui.text.platform.AndroidFontListTypeface;

        $r1 = r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher fontMatcher$1>;

        return $r1;
    }

    public androidx.compose.ui.text.font.FontFamily getFontFamily()
    {
        androidx.compose.ui.text.platform.AndroidFontListTypeface r0;
        androidx.compose.ui.text.font.FontFamily $r1;

        r0 := @this: androidx.compose.ui.text.platform.AndroidFontListTypeface;

        $r1 = r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontFamily fontFamily>;

        return $r1;
    }

    public android.graphics.Typeface getNativeTypeface-PYhJU0U(androidx.compose.ui.text.font.FontWeight, int, int)
    {
        androidx.compose.ui.text.platform.AndroidFontListTypeface r0;
        androidx.compose.ui.text.font.FontWeight r1;
        int i0, i1;
        androidx.compose.ui.text.font.Font r2, $r13;
        android.graphics.Typeface r3, $r17;
        java.lang.String r4, $r19;
        java.util.ArrayList $r5;
        java.util.Map $r6, $r14;
        androidx.compose.ui.text.font.FontMatcher $r7;
        java.util.Set $r8;
        java.util.Collection $r9;
        java.util.List $r10, $r11;
        java.lang.Object $r12, $r15, $r16;
        java.lang.IllegalArgumentException $r18;
        java.lang.IllegalStateException $r20;

        r0 := @this: androidx.compose.ui.text.platform.AndroidFontListTypeface;

        r1 := @parameter0: androidx.compose.ui.text.font.FontWeight;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fontWeight");

        $r7 = r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher fontMatcher$1>;

        $r5 = new java.util.ArrayList;

        $r6 = r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: java.util.Map loadedTypefaces>;

        $r8 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        $r9 = (java.util.Collection) $r8;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        $r10 = (java.util.List) $r5;

        $r11 = virtualinvoke $r7.<androidx.compose.ui.text.font.FontMatcher: java.util.List matchFont-RetOiIg(java.util.List,androidx.compose.ui.text.font.FontWeight,int)>($r10, r1, i0);

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object firstOrNull(java.util.List)>($r11);

        $r13 = (androidx.compose.ui.text.font.Font) $r12;

        if $r13 != null goto label1;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not load font");

        throw $r20;

     label1:
        r2 = $r13;

        $r14 = r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface: java.util.Map loadedTypefaces>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (android.graphics.Typeface) $r15;

        if r3 != null goto label2;

        r4 = "Required value was null.";

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label2:
        $r16 = staticinvoke <androidx.compose.ui.text.font.FontSynthesis_androidKt: java.lang.Object synthesizeTypeface-FxwP2eA(int,java.lang.Object,androidx.compose.ui.text.font.Font,androidx.compose.ui.text.font.FontWeight,int)>(i1, r3, r2, r1, i0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r16, "null cannot be cast to non-null type android.graphics.Typeface");

        $r17 = (android.graphics.Typeface) $r16;

        return $r17;
    }

    public static final androidx.compose.ui.text.font.FontMatcher access$getFontMatcher$cp()
    {
        androidx.compose.ui.text.font.FontMatcher $r0;

        $r0 = <androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher fontMatcher>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion $r0;
        androidx.compose.ui.text.font.FontMatcher $r1;

        $r0 = new androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion;

        specialinvoke $r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion Companion> = $r0;

        $r1 = new androidx.compose.ui.text.font.FontMatcher;

        specialinvoke $r1.<androidx.compose.ui.text.font.FontMatcher: void <init>()>();

        <androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher fontMatcher> = $r1;

        return;
    }

androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion
    private void <init>()
    {
        androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion r0;

        r0 := @this: androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.compose.ui.text.font.FontMatcher getFontMatcher()
    {
        androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion r0;
        androidx.compose.ui.text.font.FontMatcher $r1;

        r0 := @this: androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion;

        $r1 = staticinvoke <androidx.compose.ui.text.platform.AndroidFontListTypeface: androidx.compose.ui.text.font.FontMatcher access$getFontMatcher$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.text.platform.AndroidFontListTypeface$Companion: void <init>()>();

        return;
    }

