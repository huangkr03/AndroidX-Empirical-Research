kotlin.collections.MapsKt__MapsJVMKt
<kotlin.collections.MapsKt__MapsJVMKt: int INT_MAX_POWER_OF_TWO>
    public void <init>()
    {
        kotlin.collections.MapsKt__MapsJVMKt $r0;

        $r0 := @this: kotlin.collections.MapsKt__MapsJVMKt;

        specialinvoke $r0.<kotlin.collections.MapsKt__MapWithDefaultKt: void <init>()>();

        return;
    }

    public static final java.util.Map build(java.util.Map)
    {
        java.util.Map $r0;
        kotlin.collections.builders.MapBuilder $r1;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builder");

        $r1 = (kotlin.collections.builders.MapBuilder) $r0;

        $r0 = virtualinvoke $r1.<kotlin.collections.builders.MapBuilder: java.util.Map build()>();

        return $r0;
    }

    private static final java.util.Map buildMapInternal(int, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0;
        java.util.Map $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builderAction");

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map createMapBuilder(int)>($i0);

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map build(java.util.Map)>($r1);

        return $r1;
    }

    private static final java.util.Map buildMapInternal(kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.Map $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builderAction");

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map createMapBuilder()>();

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r1 = staticinvoke <kotlin.collections.MapsKt: java.util.Map build(java.util.Map)>($r1);

        return $r1;
    }

    public static final java.util.Map createMapBuilder()
    {
        kotlin.collections.builders.MapBuilder $r0;

        $r0 = new kotlin.collections.builders.MapBuilder;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void <init>()>();

        return $r0;
    }

    public static final java.util.Map createMapBuilder(int)
    {
        int $i0;
        kotlin.collections.builders.MapBuilder $r0;

        $i0 := @parameter0: int;

        $r0 = new kotlin.collections.builders.MapBuilder;

        specialinvoke $r0.<kotlin.collections.builders.MapBuilder: void <init>(int)>($i0);

        return $r0;
    }

    public static final java.lang.Object getOrPut(java.util.concurrent.ConcurrentMap, java.lang.Object, kotlin.jvm.functions.Function0)
    {
        java.lang.Object $r0, $r3;
        kotlin.jvm.functions.Function0 $r1;
        java.util.concurrent.ConcurrentMap $r2;

        $r2 := @parameter0: java.util.concurrent.ConcurrentMap;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "defaultValue");

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r0);

        if $r3 != null goto label2;

        $r3 = interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r0, $r3);

        if $r0 != null goto label1;

        return $r3;

     label1:
        return $r0;

     label2:
        return $r3;
    }

    public static final int mapCapacity(int)
    {
        int $i0;
        float $f0;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label3;

        if $i0 >= 3 goto label1;

        $i0 = $i0 + 1;

        return $i0;

     label1:
        if $i0 >= 1073741824 goto label2;

        $f0 = (float) $i0;

        $f0 = $f0 / 0.75F;

        $f0 = $f0 + 1.0F;

        $i0 = (int) $f0;

        return $i0;

     label2:
        return 2147483647;

     label3:
        return $i0;
    }

    public static final java.util.Map mapOf(kotlin.Pair)
    {
        kotlin.Pair $r0;
        java.lang.Object $r1, $r2;
        java.util.Map $r3;

        $r0 := @parameter0: kotlin.Pair;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pair");

        $r1 = virtualinvoke $r0.<kotlin.Pair: java.lang.Object getFirst()>();

        $r2 = virtualinvoke $r0.<kotlin.Pair: java.lang.Object getSecond()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r1, $r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "singletonMap(pair.first, pair.second)");

        return $r3;
    }

    public static final transient java.util.SortedMap sortedMapOf(java.util.Comparator, kotlin.Pair[])
    {
        java.util.Comparator $r0;
        kotlin.Pair[] $r1;
        java.util.TreeMap $r2, r3;
        java.util.Map r4;

        $r0 := @parameter0: java.util.Comparator;

        $r1 := @parameter1: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparator");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pairs");

        r3 = new java.util.TreeMap;

        $r2 = r3;

        specialinvoke r3.<java.util.TreeMap: void <init>(java.util.Comparator)>($r0);

        r4 = (java.util.Map) $r2;

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.Pair[])>(r4, $r1);

        return $r2;
    }

    public static final transient java.util.SortedMap sortedMapOf(kotlin.Pair[])
    {
        kotlin.Pair[] $r0;
        java.util.TreeMap $r1, r2;
        java.util.Map r3;

        $r0 := @parameter0: kotlin.Pair[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pairs");

        r2 = new java.util.TreeMap;

        $r1 = r2;

        specialinvoke r2.<java.util.TreeMap: void <init>()>();

        r3 = (java.util.Map) $r1;

        staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,kotlin.Pair[])>(r3, $r0);

        return $r1;
    }

    private static final java.util.Properties toProperties(java.util.Map)
    {
        java.util.Map $r0;
        java.util.Properties $r1;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

        virtualinvoke $r1.<java.util.Properties: void putAll(java.util.Map)>($r0);

        return $r1;
    }

    public static final java.util.Map toSingletonMap(java.util.Map)
    {
        java.util.Map $r0;
        java.util.Set $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3, $r5;
        java.util.Map$Entry $r4;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map$Entry) $r3;

        $r3 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r0 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r3, $r5);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "with(entries.iterator().\u2026ingletonMap(key, value) }");

        return $r0;
    }

    private static final java.util.Map toSingletonMapOrSelf(java.util.Map)
    {
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toSingletonMap(java.util.Map)>($r0);

        return $r0;
    }

    public static final java.util.SortedMap toSortedMap(java.util.Map)
    {
        java.util.Map $r0;
        java.util.TreeMap $r1;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Map)>($r0);

        return $r1;
    }

    public static final java.util.SortedMap toSortedMap(java.util.Map, java.util.Comparator)
    {
        java.util.Map $r0;
        java.util.Comparator $r1;
        java.util.TreeMap $r2;

        $r0 := @parameter0: java.util.Map;

        $r1 := @parameter1: java.util.Comparator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Comparator)>($r1);

        virtualinvoke $r2.<java.util.TreeMap: void putAll(java.util.Map)>($r0);

        return $r2;
    }

