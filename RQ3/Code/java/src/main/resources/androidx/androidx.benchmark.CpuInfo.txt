androidx.benchmark.CpuInfo
<androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>
<androidx.benchmark.CpuInfo: java.lang.String TAG>
<androidx.benchmark.CpuInfo: java.util.List coreDirs>
<androidx.benchmark.CpuInfo: boolean locked>
<androidx.benchmark.CpuInfo: long maxFreqHz>
    private void <init>()
    {
        androidx.benchmark.CpuInfo r0;

        r0 := @this: androidx.benchmark.CpuInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.util.List getCoreDirs()
    {
        androidx.benchmark.CpuInfo r0;
        java.util.List $r1;

        r0 := @this: androidx.benchmark.CpuInfo;

        $r1 = <androidx.benchmark.CpuInfo: java.util.List coreDirs>;

        return $r1;
    }

    public final boolean getLocked()
    {
        androidx.benchmark.CpuInfo r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.CpuInfo;

        $z0 = <androidx.benchmark.CpuInfo: boolean locked>;

        return $z0;
    }

    public final long getMaxFreqHz()
    {
        androidx.benchmark.CpuInfo r0;
        long $l0;

        r0 := @this: androidx.benchmark.CpuInfo;

        $l0 = <androidx.benchmark.CpuInfo: long maxFreqHz>;

        return $l0;
    }

    public final boolean isCpuLocked(java.util.List)
    {
        androidx.benchmark.CpuInfo r0;
        java.util.List r1, r2, $r6, r28, $r31, r33, r36;
        java.util.ArrayList $r3, $r16;
        java.util.LinkedHashMap $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z11, $z21, $z22, z23, $z24, $z26, $z27, $z29;
        java.util.Set $r5;
        java.lang.Iterable $r7, $r18, $r23, r37, $r41;
        java.lang.Comparable $r8;
        java.lang.Long $r9;
        long $l1, $l4, $l5, l7;
        byte $b2, $b6;
        java.util.Collection $r10, $r15, r19;
        java.lang.Object $r11, $r12, $r13, r21, r26, r30, $r32, $r39, r43;
        androidx.benchmark.CpuInfo$CoreDir $r14, r22, r27, $r40, $r44;
        java.util.Iterator $r20, $r25, $r34, r38, $r42;
        java.util.Map r24;
        java.util.Map$Entry r35;

        r0 := @this: androidx.benchmark.CpuInfo;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "coreDirs");

        $r18 = (java.lang.Iterable) r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r19 = (java.util.Collection) $r3;

        $r20 = interfaceinvoke $r18.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z11 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label02;

        r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r22 = (androidx.benchmark.CpuInfo$CoreDir) r21;

        $z7 = virtualinvoke r22.<androidx.benchmark.CpuInfo$CoreDir: boolean getOnline()>();

        if $z7 == 0 goto label01;

        interfaceinvoke r19.<java.util.Collection: boolean add(java.lang.Object)>(r21);

        goto label01;

     label02:
        r2 = (java.util.List) r19;

        $r23 = (java.lang.Iterable) r2;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r24 = (java.util.Map) $r4;

        $r25 = interfaceinvoke $r23.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r27 = (androidx.benchmark.CpuInfo$CoreDir) r26;

        r28 = virtualinvoke r27.<androidx.benchmark.CpuInfo$CoreDir: java.util.List getAvailableFreqs()>();

        r30 = interfaceinvoke r24.<java.util.Map: java.lang.Object get(java.lang.Object)>(r28);

        if r30 != null goto label04;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r31 = (java.util.List) $r16;

        interfaceinvoke r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r28, $r31);

        $r32 = $r31;

        goto label05;

     label04:
        $r32 = r30;

     label05:
        r33 = (java.util.List) $r32;

        interfaceinvoke r33.<java.util.List: boolean add(java.lang.Object)>(r26);

        goto label03;

     label06:
        $r5 = interfaceinvoke r24.<java.util.Map: java.util.Set entrySet()>();

        $r34 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke $r34.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r11 = interfaceinvoke $r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        r36 = (java.util.List) $r12;

        r37 = (java.lang.Iterable) r36;

        $z4 = r37 instanceof java.util.Collection;

        if $z4 == 0 goto label08;

        $r15 = (java.util.Collection) r37;

        $z5 = interfaceinvoke $r15.<java.util.Collection: boolean isEmpty()>();

        if $z5 == 0 goto label08;

        $z21 = 0;

        goto label13;

     label08:
        r38 = interfaceinvoke r37.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z22 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z22 == 0 goto label12;

        $r39 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        $r40 = (androidx.benchmark.CpuInfo$CoreDir) $r39;

        z23 = 0;

        $l4 = virtualinvoke $r40.<androidx.benchmark.CpuInfo$CoreDir: long getSetSpeedKhz()>();

        $r13 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object first(java.util.List)>(r36);

        $r14 = (androidx.benchmark.CpuInfo$CoreDir) $r13;

        $l5 = virtualinvoke $r14.<androidx.benchmark.CpuInfo$CoreDir: long getSetSpeedKhz()>();

        $b6 = $l4 cmp $l5;

        if $b6 == 0 goto label10;

        $z24 = 1;

        goto label11;

     label10:
        $z24 = 0;

     label11:
        if $z24 == 0 goto label09;

        $z21 = 1;

        goto label13;

     label12:
        $z21 = 0;

     label13:
        if $z21 == 0 goto label14;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", "Clocks not locked: cores with same available frequencies running with different current min freq");

        return 0;

     label14:
        goto label07;

     label15:
        $r41 = (java.lang.Iterable) r2;

        $z2 = $r41 instanceof java.util.Collection;

        if $z2 == 0 goto label16;

        $r10 = (java.util.Collection) $r41;

        $z3 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z3 == 0 goto label16;

        $z26 = 0;

        goto label22;

     label16:
        $r42 = interfaceinvoke $r41.<java.lang.Iterable: java.util.Iterator iterator()>();

     label17:
        $z27 = interfaceinvoke $r42.<java.util.Iterator: boolean hasNext()>();

        if $z27 == 0 goto label21;

        r43 = interfaceinvoke $r42.<java.util.Iterator: java.lang.Object next()>();

        $r44 = (androidx.benchmark.CpuInfo$CoreDir) r43;

        $r6 = virtualinvoke $r44.<androidx.benchmark.CpuInfo$CoreDir: java.util.List getAvailableFreqs()>();

        $r7 = (java.lang.Iterable) $r6;

        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Comparable minOrNull(java.lang.Iterable)>($r7);

        $r9 = (java.lang.Long) $r8;

        l7 = virtualinvoke $r44.<androidx.benchmark.CpuInfo$CoreDir: long getSetSpeedKhz()>();

        if $r9 != null goto label18;

        goto label19;

     label18:
        $l1 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $b2 = $l1 cmp l7;

        if $b2 != 0 goto label19;

        $z29 = 1;

        goto label20;

     label19:
        $z29 = 0;

     label20:
        if $z29 == 0 goto label17;

        $z26 = 1;

        goto label22;

     label21:
        $z26 = 0;

     label22:
        if $z26 == 0 goto label23;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", "Clocks not locked: online cores with min freq == min avail freq");

        return 0;

     label23:
        return 1;
    }

    private final java.lang.String readFileTextOrNull(java.lang.String)
    {
        androidx.benchmark.CpuInfo r0;
        java.lang.String r1, $r5, $r9;
        java.lang.Throwable r2, $r8;
        java.io.File $r4;
        boolean $z1;
        java.lang.CharSequence $r6, $r7;

        r0 := @this: androidx.benchmark.CpuInfo;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1);

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $r5 = staticinvoke <kotlin.io.FilesKt: java.lang.String readText$default(java.io.File,java.nio.charset.Charset,int,java.lang.Object)>($r4, null, 1, null);

        $r6 = (java.lang.CharSequence) $r5;

        $r7 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r6);

        $r9 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        goto label3;

     label2:
        $r9 = null;

     label3:
        return $r9;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        return null;

        catch java.io.IOException from label1 to label4 with label4;
    }

    private static final boolean _init_$lambda-0(java.io.File, java.lang.String)
    {
        java.io.File r0, $r3;
        java.lang.String r1;
        java.lang.CharSequence r2;
        boolean $z0, $z1, $z2;
        kotlin.text.Regex $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r1, "name");

        r2 = (java.lang.CharSequence) r1;

        $r4 = new kotlin.text.Regex;

        specialinvoke $r4.<kotlin.text.Regex: void <init>(java.lang.String)>("^cpu[0-9]+");

        $z1 = virtualinvoke $r4.<kotlin.text.Regex: boolean matches(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static void <clinit>()
    {
        java.io.File r0, $r8;
        java.lang.String r1, r2, r3, r6, $r25, $r30, $r35, $r36, $r38, $r53, r54, r58, r62, r66, $r71, $r84, $r87, r88, $r90, r91;
        java.util.Collection r4, r51, r59, $r68, r72, $r95;
        long l0, l1, $l4, $l6, $l10, $l20, l21, $l22, l23, l24, l25, $l26, $l27;
        java.util.List r5, $r12, $r14, $r16, $r19, $r44, $r49, $r55, r57, r63, r64, r73, r74, $r82, $r94;
        boolean z2, $z3, $z4, $z5, $z6, $z8, $z9, $z12, $z16, $z24, z25, $z28, $z30, z31, z35, $z36, $z38, z41, $z43, z44;
        androidx.benchmark.CpuInfo $r7, $r11, $r15, $r17, $r18, $r34, $r37, $r86, $r89;
        java.io.FilenameFilter $r9;
        java.util.ArrayList $r10, $r13, $r40, $r41;
        int $i2, $i8, i11, $i12, $i28, i29, i30, i31;
        byte $b3, $b7;
        java.lang.StringBuilder $r20, $r21, $r22, $r23, $r24, $r29, $r31, $r32, $r33;
        androidx.benchmark.CpuInfo$CoreDir $r26, $r92, r98, r103, r105, $r106;
        java.lang.Iterable $r27, $r28, $r42, $r47, $r65, r67, $r99;
        kotlin.text.Regex $r39;
        java.lang.Long $r43, $r45, $r85;
        java.lang.CharSequence $r46, r56;
        java.lang.String[] $r48, r52;
        java.util.Iterator $r60, r69, $r96, $r100, $r107;
        java.lang.Object r61, r70, r97, $r101, $r102, $r104, $r108;
        androidx.benchmark.Shell $r83;

        $r7 = new androidx.benchmark.CpuInfo;

        specialinvoke $r7.<androidx.benchmark.CpuInfo: void <init>()>();

        <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE> = $r7;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("/sys/devices/system/cpu");

        r0 = $r8;

        $r9 = dynamicinvoke "accept" <java.io.FilenameFilter ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.io.File,java.lang.String), methodhandle: "REF_INVOKE_STATIC" <androidx.benchmark.CpuInfo: boolean _init_$lambda-0(java.io.File,java.lang.String)>, methodtype: boolean __METHODTYPE__(java.io.File,java.lang.String));

        $r48 = virtualinvoke r0.<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>($r9);

        if $r48 != null goto label01;

        $r49 = null;

        goto label22;

     label01:
        $r10 = new java.util.ArrayList;

        $i2 = lengthof $r48;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i2);

        r51 = (java.util.Collection) $r10;

        r52 = $r48;

        i11 = 0;

        $i12 = lengthof r52;

     label02:
        if i11 >= $i12 goto label21;

        r1 = r52[i11];

        i11 = i11 + 1;

        r2 = r1;

        r4 = r51;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        r3 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r53 = r3;

        $r34 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $r35 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r3, "/online");

        $r36 = specialinvoke $r34.<androidx.benchmark.CpuInfo: java.lang.String readFileTextOrNull(java.lang.String)>($r35);

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r36, "0");

        if $z8 != 0 goto label03;

        $z16 = 1;

        goto label04;

     label03:
        $z16 = 0;

        $z24 = 0;

     label04:
        $r37 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $r38 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r3, "/cpufreq/scaling_available_frequencies");

        r54 = specialinvoke $r37.<androidx.benchmark.CpuInfo: java.lang.String readFileTextOrNull(java.lang.String)>($r38);

        if r54 != null goto label05;

        $r55 = null;

        goto label13;

     label05:
        r56 = (java.lang.CharSequence) r54;

        $r39 = new kotlin.text.Regex;

        specialinvoke $r39.<kotlin.text.Regex: void <init>(java.lang.String)>("\\s+");

        r57 = virtualinvoke $r39.<kotlin.text.Regex: java.util.List split(java.lang.CharSequence,int)>(r56, 0);

        if r57 != null goto label06;

        $r55 = null;

        goto label13;

     label06:
        z25 = $z16;

        r58 = r3;

        $r40 = new java.util.ArrayList;

        specialinvoke $r40.<java.util.ArrayList: void <init>()>();

        r59 = (java.util.Collection) $r40;

        $r47 = (java.lang.Iterable) r57;

        $r60 = interfaceinvoke $r47.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z28 = interfaceinvoke $r60.<java.util.Iterator: boolean hasNext()>();

        if $z28 == 0 goto label10;

        r61 = interfaceinvoke $r60.<java.util.Iterator: java.lang.Object next()>();

        r62 = (java.lang.String) r61;

        $r46 = (java.lang.CharSequence) r62;

        $z12 = staticinvoke <kotlin.text.StringsKt: boolean isBlank(java.lang.CharSequence)>($r46);

        if $z12 != 0 goto label08;

        $z30 = 1;

        goto label09;

     label08:
        $z30 = 0;

     label09:
        if $z30 == 0 goto label07;

        interfaceinvoke r59.<java.util.Collection: boolean add(java.lang.Object)>(r61);

        goto label07;

     label10:
        r63 = (java.util.List) r59;

        r64 = r63;

        $r65 = (java.lang.Iterable) r64;

        z31 = z25;

        r66 = r58;

        r67 = $r65;

        $r41 = new java.util.ArrayList;

        $i8 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r65, 10);

        specialinvoke $r41.<java.util.ArrayList: void <init>(int)>($i8);

        $r68 = (java.util.Collection) $r41;

        r69 = interfaceinvoke r67.<java.lang.Iterable: java.util.Iterator iterator()>();

     label11:
        $z9 = interfaceinvoke r69.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label12;

        r70 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>();

        $r71 = (java.lang.String) r70;

        r72 = $r68;

        $l10 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r71);

        $r45 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l10);

        interfaceinvoke r72.<java.util.Collection: boolean add(java.lang.Object)>($r45);

        goto label11;

     label12:
        r73 = (java.util.List) $r68;

        $r53 = r66;

        $z24 = z31;

        $r42 = (java.lang.Iterable) r73;

        $r55 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List sorted(java.lang.Iterable)>($r42);

     label13:
        r74 = $r55;

        if r74 != null goto label14;

        $r43 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        $r44 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r43);

        $r82 = $r44;

        goto label15;

     label14:
        $r82 = r74;

     label15:
        $r83 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r84 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r3, "/cpufreq/scaling_setspeed");

        $r85 = virtualinvoke $r83.<androidx.benchmark.Shell: java.lang.Long catProcFileLong(java.lang.String)>($r84);

        if $r85 != null goto label17;

        $r86 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $r87 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r3, "/cpufreq/scaling_min_freq");

        r88 = specialinvoke $r86.<androidx.benchmark.CpuInfo: java.lang.String readFileTextOrNull(java.lang.String)>($r87);

        if r88 != null goto label16;

        $l20 = -1L;

        goto label18;

     label16:
        l21 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r88);

        $l20 = l21;

        goto label18;

     label17:
        $l20 = virtualinvoke $r85.<java.lang.Long: long longValue()>();

     label18:
        $r89 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $r90 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r3, "/cpufreq/cpuinfo_max_freq");

        r91 = specialinvoke $r89.<androidx.benchmark.CpuInfo: java.lang.String readFileTextOrNull(java.lang.String)>($r90);

        if r91 != null goto label19;

        $l22 = -1L;

        goto label20;

     label19:
        l23 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r91);

        $l22 = l23;

     label20:
        l0 = $l22;

        l1 = $l20;

        r5 = $r82;

        z2 = $z24;

        r6 = $r53;

        $r92 = new androidx.benchmark.CpuInfo$CoreDir;

        specialinvoke $r92.<androidx.benchmark.CpuInfo$CoreDir: void <init>(java.lang.String,boolean,java.util.List,long,long)>(r6, z2, r5, l1, l0);

        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>($r92);

        goto label02;

     label21:
        $r49 = (java.util.List) r51;

     label22:
        if $r49 != null goto label23;

        $r94 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        goto label24;

     label23:
        $r94 = $r49;

     label24:
        <androidx.benchmark.CpuInfo: java.util.List coreDirs> = $r94;

        $r11 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $r12 = <androidx.benchmark.CpuInfo: java.util.List coreDirs>;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r95 = (java.util.Collection) $r13;

        z35 = 0;

        $r28 = (java.lang.Iterable) $r12;

        $r96 = interfaceinvoke $r28.<java.lang.Iterable: java.util.Iterator iterator()>();

     label25:
        $z36 = interfaceinvoke $r96.<java.util.Iterator: boolean hasNext()>();

        if $z36 == 0 goto label28;

        r97 = interfaceinvoke $r96.<java.util.Iterator: java.lang.Object next()>();

        r98 = (androidx.benchmark.CpuInfo$CoreDir) r97;

        $l6 = virtualinvoke r98.<androidx.benchmark.CpuInfo$CoreDir: long getMaxFreqKhz()>();

        $b7 = $l6 cmp -1L;

        if $b7 == 0 goto label26;

        $z38 = 1;

        goto label27;

     label26:
        $z38 = 0;

     label27:
        if $z38 == 0 goto label25;

        interfaceinvoke $r95.<java.util.Collection: boolean add(java.lang.Object)>(r97);

        goto label25;

     label28:
        $r14 = (java.util.List) $r95;

        $r99 = (java.lang.Iterable) $r14;

        $r100 = interfaceinvoke $r99.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z3 = interfaceinvoke $r100.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label29;

        $r101 = null;

        goto label33;

     label29:
        $r102 = interfaceinvoke $r100.<java.util.Iterator: java.lang.Object next()>();

        $z4 = interfaceinvoke $r100.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label30;

        $r101 = $r102;

        goto label33;

     label30:
        r103 = (androidx.benchmark.CpuInfo$CoreDir) $r102;

        l24 = virtualinvoke r103.<androidx.benchmark.CpuInfo$CoreDir: long getMaxFreqKhz()>();

     label31:
        $r104 = interfaceinvoke $r100.<java.util.Iterator: java.lang.Object next()>();

        r105 = (androidx.benchmark.CpuInfo$CoreDir) $r104;

        z41 = 0;

        l25 = virtualinvoke r105.<androidx.benchmark.CpuInfo$CoreDir: long getMaxFreqKhz()>();

        $b3 = l24 cmp l25;

        if $b3 >= 0 goto label32;

        $r102 = $r104;

        l24 = l25;

     label32:
        $z5 = interfaceinvoke $r100.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label31;

        $r101 = $r102;

     label33:
        $r106 = (androidx.benchmark.CpuInfo$CoreDir) $r101;

        if $r106 != null goto label34;

        $l26 = -1L;

        goto label35;

     label34:
        $l27 = virtualinvoke $r106.<androidx.benchmark.CpuInfo$CoreDir: long getMaxFreqKhz()>();

        $l4 = (long) 1000;

        $l26 = $l27 * $l4;

     label35:
        <androidx.benchmark.CpuInfo: long maxFreqHz> = $l26;

        $r17 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $r15 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $r16 = <androidx.benchmark.CpuInfo: java.util.List coreDirs>;

        $z6 = virtualinvoke $r17.<androidx.benchmark.CpuInfo: boolean isCpuLocked(java.util.List)>($r16);

        <androidx.benchmark.CpuInfo: boolean locked> = $z6;

        $r18 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $r19 = <androidx.benchmark.CpuInfo: java.util.List coreDirs>;

        $i28 = 0;

        $r27 = (java.lang.Iterable) $r19;

        $r107 = interfaceinvoke $r27.<java.lang.Iterable: java.util.Iterator iterator()>();

     label36:
        $z43 = interfaceinvoke $r107.<java.util.Iterator: boolean hasNext()>();

        if $z43 == 0 goto label38;

        $r108 = interfaceinvoke $r107.<java.util.Iterator: java.lang.Object next()>();

        i29 = $i28;

        $i28 = i29 + 1;

        i30 = i29;

        if i30 >= 0 goto label37;

        staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>();

     label37:
        i31 = i30;

        z44 = 0;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cpu");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i31);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r26 = (androidx.benchmark.CpuInfo$CoreDir) $r108;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r25);

        goto label36;

     label38:
        return;
    }

androidx.benchmark.CpuInfo$1
<androidx.benchmark.CpuInfo$1: androidx.benchmark.CpuInfo$1 INSTANCE>
    public final boolean accept(java.io.File, java.lang.String)
    {
        androidx.benchmark.CpuInfo$1 r0;
        java.io.File r1, $r5;
        java.lang.String r2;
        java.lang.CharSequence r3;
        kotlin.text.Regex r4, $r6;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: androidx.benchmark.CpuInfo$1;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r2);

        $z1 = virtualinvoke $r5.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>(r2, "name");

        r3 = (java.lang.CharSequence) r2;

        $r6 = new kotlin.text.Regex;

        specialinvoke $r6.<kotlin.text.Regex: void <init>(java.lang.String)>("^cpu[0-9]+");

        r4 = $r6;

        z0 = 0;

        $z2 = virtualinvoke r4.<kotlin.text.Regex: boolean matches(java.lang.CharSequence)>(r3);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    void <init>()
    {
        androidx.benchmark.CpuInfo$1 r0;

        r0 := @this: androidx.benchmark.CpuInfo$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.benchmark.CpuInfo$1 $r0;

        $r0 = new androidx.benchmark.CpuInfo$1;

        specialinvoke $r0.<androidx.benchmark.CpuInfo$1: void <init>()>();

        <androidx.benchmark.CpuInfo$1: androidx.benchmark.CpuInfo$1 INSTANCE> = $r0;

        return;
    }

androidx.benchmark.CpuInfo$CoreDir
<androidx.benchmark.CpuInfo$CoreDir: java.lang.String path>
<androidx.benchmark.CpuInfo$CoreDir: boolean online>
<androidx.benchmark.CpuInfo$CoreDir: java.util.List availableFreqs>
<androidx.benchmark.CpuInfo$CoreDir: long setSpeedKhz>
<androidx.benchmark.CpuInfo$CoreDir: long maxFreqKhz>
    public void <init>(java.lang.String, boolean, java.util.List, long, long)
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        java.lang.String r1;
        boolean z0;
        java.util.List r2;
        long l0, l1;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.List;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "path");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "availableFreqs");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.benchmark.CpuInfo$CoreDir: java.lang.String path> = r1;

        r0.<androidx.benchmark.CpuInfo$CoreDir: boolean online> = z0;

        r0.<androidx.benchmark.CpuInfo$CoreDir: java.util.List availableFreqs> = r2;

        r0.<androidx.benchmark.CpuInfo$CoreDir: long setSpeedKhz> = l0;

        r0.<androidx.benchmark.CpuInfo$CoreDir: long maxFreqKhz> = l1;

        return;
    }

    public final java.lang.String getPath()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $r1 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.lang.String path>;

        return $r1;
    }

    public final boolean getOnline()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $z0 = r0.<androidx.benchmark.CpuInfo$CoreDir: boolean online>;

        return $z0;
    }

    public final java.util.List getAvailableFreqs()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        java.util.List $r1;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $r1 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.util.List availableFreqs>;

        return $r1;
    }

    public final long getSetSpeedKhz()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        long $l0;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $l0 = r0.<androidx.benchmark.CpuInfo$CoreDir: long setSpeedKhz>;

        return $l0;
    }

    public final long getMaxFreqKhz()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        long $l0;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $l0 = r0.<androidx.benchmark.CpuInfo$CoreDir: long maxFreqKhz>;

        return $l0;
    }

    public final java.lang.String component1()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $r1 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.lang.String path>;

        return $r1;
    }

    public final boolean component2()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $z0 = r0.<androidx.benchmark.CpuInfo$CoreDir: boolean online>;

        return $z0;
    }

    public final java.util.List component3()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        java.util.List $r1;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $r1 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.util.List availableFreqs>;

        return $r1;
    }

    public final long component4()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        long $l0;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $l0 = r0.<androidx.benchmark.CpuInfo$CoreDir: long setSpeedKhz>;

        return $l0;
    }

    public final long component5()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        long $l0;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $l0 = r0.<androidx.benchmark.CpuInfo$CoreDir: long maxFreqKhz>;

        return $l0;
    }

    public final androidx.benchmark.CpuInfo$CoreDir copy(java.lang.String, boolean, java.util.List, long, long)
    {
        androidx.benchmark.CpuInfo$CoreDir r0, $r3;
        java.lang.String r1;
        boolean z0;
        java.util.List r2;
        long l0, l1;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.List;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "path");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "availableFreqs");

        $r3 = new androidx.benchmark.CpuInfo$CoreDir;

        specialinvoke $r3.<androidx.benchmark.CpuInfo$CoreDir: void <init>(java.lang.String,boolean,java.util.List,long,long)>(r1, z0, r2, l0, l1);

        return $r3;
    }

    public static androidx.benchmark.CpuInfo$CoreDir copy$default(androidx.benchmark.CpuInfo$CoreDir, java.lang.String, boolean, java.util.List, long, long, int, java.lang.Object)
    {
        androidx.benchmark.CpuInfo$CoreDir r0, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1;
        java.lang.String r3;
        boolean z0;
        java.util.List r4;
        long l6, l7;

        r0 := @parameter0: androidx.benchmark.CpuInfo$CoreDir;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r4 := @parameter3: java.util.List;

        l6 := @parameter4: long;

        l7 := @parameter5: long;

        i0 := @parameter6: int;

        r1 := @parameter7: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.lang.String path>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        z0 = r0.<androidx.benchmark.CpuInfo$CoreDir: boolean online>;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        r4 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.util.List availableFreqs>;

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        l6 = r0.<androidx.benchmark.CpuInfo$CoreDir: long setSpeedKhz>;

     label4:
        $i5 = i0 & 16;

        if $i5 == 0 goto label5;

        l7 = r0.<androidx.benchmark.CpuInfo$CoreDir: long maxFreqKhz>;

     label5:
        $r2 = virtualinvoke r0.<androidx.benchmark.CpuInfo$CoreDir: androidx.benchmark.CpuInfo$CoreDir copy(java.lang.String,boolean,java.util.List,long,long)>(r3, z0, r4, l6, l7);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r3, $r15;
        boolean $z0;
        java.util.List $r8;
        long $l0, $l1;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CoreDir(path=");

        $r3 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.lang.String path>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", online=");

        $z0 = r0.<androidx.benchmark.CpuInfo$CoreDir: boolean online>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", availableFreqs=");

        $r8 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.util.List availableFreqs>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", setSpeedKhz=");

        $l0 = r0.<androidx.benchmark.CpuInfo$CoreDir: long setSpeedKhz>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxFreqKhz=");

        $l1 = r0.<androidx.benchmark.CpuInfo$CoreDir: long maxFreqKhz>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public int hashCode()
    {
        androidx.benchmark.CpuInfo$CoreDir r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8, i9, i10, i11, i12, i13, i14;
        java.util.List $r2;
        long $l3, $l6;
        boolean $z0, z1;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        $r1 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.lang.String path>;

        i9 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = i9 * 31;

        $z0 = r0.<androidx.benchmark.CpuInfo$CoreDir: boolean online>;

        if $z0 == 0 goto label1;

        $z0 = 1;

     label1:
        z1 = $z0;

        i14 = (int) z1;

        i10 = $i0 + i14;

        $i1 = i10 * 31;

        $r2 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.util.List availableFreqs>;

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i11 = $i1 + $i2;

        $i4 = i11 * 31;

        $l3 = r0.<androidx.benchmark.CpuInfo$CoreDir: long setSpeedKhz>;

        $i5 = staticinvoke <java.lang.Long: int hashCode(long)>($l3);

        i12 = $i4 + $i5;

        $i7 = i12 * 31;

        $l6 = r0.<androidx.benchmark.CpuInfo$CoreDir: long maxFreqKhz>;

        $i8 = staticinvoke <java.lang.Long: int hashCode(long)>($l6);

        i13 = $i7 + $i8;

        return i13;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.benchmark.CpuInfo$CoreDir r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r3, $r4;
        java.util.List $r5, $r6;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;

        r0 := @this: androidx.benchmark.CpuInfo$CoreDir;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.benchmark.CpuInfo$CoreDir;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (androidx.benchmark.CpuInfo$CoreDir) r1;

        $r4 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.lang.String path>;

        $r3 = r2.<androidx.benchmark.CpuInfo$CoreDir: java.lang.String path>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $z3 = r0.<androidx.benchmark.CpuInfo$CoreDir: boolean online>;

        $z2 = r2.<androidx.benchmark.CpuInfo$CoreDir: boolean online>;

        if $z3 == $z2 goto label4;

        return 0;

     label4:
        $r6 = r0.<androidx.benchmark.CpuInfo$CoreDir: java.util.List availableFreqs>;

        $r5 = r2.<androidx.benchmark.CpuInfo$CoreDir: java.util.List availableFreqs>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z4 != 0 goto label5;

        return 0;

     label5:
        $l1 = r0.<androidx.benchmark.CpuInfo$CoreDir: long setSpeedKhz>;

        $l0 = r2.<androidx.benchmark.CpuInfo$CoreDir: long setSpeedKhz>;

        $b2 = $l1 cmp $l0;

        if $b2 == 0 goto label6;

        return 0;

     label6:
        $l4 = r0.<androidx.benchmark.CpuInfo$CoreDir: long maxFreqKhz>;

        $l3 = r2.<androidx.benchmark.CpuInfo$CoreDir: long maxFreqKhz>;

        $b5 = $l4 cmp $l3;

        if $b5 == 0 goto label7;

        return 0;

     label7:
        return 1;
    }

