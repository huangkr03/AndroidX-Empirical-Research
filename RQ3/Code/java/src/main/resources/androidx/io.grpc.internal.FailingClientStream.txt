io.grpc.internal.FailingClientStream
<io.grpc.internal.FailingClientStream: io.grpc.Status error>
<io.grpc.internal.FailingClientStream: io.grpc.internal.ClientStreamListener$RpcProgress rpcProgress>
<io.grpc.internal.FailingClientStream: boolean started>
<io.grpc.internal.FailingClientStream: io.grpc.ClientStreamTracer[] tracers>
    public void <init>(io.grpc.Status, io.grpc.internal.ClientStreamListener$RpcProgress, io.grpc.ClientStreamTracer[])
    {
        io.grpc.internal.FailingClientStream $r0;
        io.grpc.Status $r1;
        io.grpc.internal.ClientStreamListener$RpcProgress $r2;
        io.grpc.ClientStreamTracer[] $r3;
        boolean $z0;

        $r0 := @this: io.grpc.internal.FailingClientStream;

        $r1 := @parameter0: io.grpc.Status;

        $r2 := @parameter1: io.grpc.internal.ClientStreamListener$RpcProgress;

        $r3 := @parameter2: io.grpc.ClientStreamTracer[];

        specialinvoke $r0.<io.grpc.internal.NoopClientStream: void <init>()>();

        $z0 = virtualinvoke $r1.<io.grpc.Status: boolean isOk()>();

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "error must not be OK");

        $r0.<io.grpc.internal.FailingClientStream: io.grpc.Status error> = $r1;

        $r0.<io.grpc.internal.FailingClientStream: io.grpc.internal.ClientStreamListener$RpcProgress rpcProgress> = $r2;

        $r0.<io.grpc.internal.FailingClientStream: io.grpc.ClientStreamTracer[] tracers> = $r3;

        return;
    }

    public void <init>(io.grpc.Status, io.grpc.ClientStreamTracer[])
    {
        io.grpc.internal.FailingClientStream $r0;
        io.grpc.Status $r1;
        io.grpc.ClientStreamTracer[] $r2;
        io.grpc.internal.ClientStreamListener$RpcProgress $r3;

        $r0 := @this: io.grpc.internal.FailingClientStream;

        $r1 := @parameter0: io.grpc.Status;

        $r2 := @parameter1: io.grpc.ClientStreamTracer[];

        $r3 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress PROCESSED>;

        specialinvoke $r0.<io.grpc.internal.FailingClientStream: void <init>(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,io.grpc.ClientStreamTracer[])>($r1, $r3, $r2);

        return;
    }

    public void appendTimeoutInsight(io.grpc.internal.InsightBuilder)
    {
        io.grpc.internal.FailingClientStream $r0;
        io.grpc.internal.InsightBuilder $r1;
        io.grpc.Status $r2;
        io.grpc.internal.ClientStreamListener$RpcProgress $r3;

        $r0 := @this: io.grpc.internal.FailingClientStream;

        $r1 := @parameter0: io.grpc.internal.InsightBuilder;

        $r2 = $r0.<io.grpc.internal.FailingClientStream: io.grpc.Status error>;

        $r1 = virtualinvoke $r1.<io.grpc.internal.InsightBuilder: io.grpc.internal.InsightBuilder appendKeyValue(java.lang.String,java.lang.Object)>("error", $r2);

        $r3 = $r0.<io.grpc.internal.FailingClientStream: io.grpc.internal.ClientStreamListener$RpcProgress rpcProgress>;

        virtualinvoke $r1.<io.grpc.internal.InsightBuilder: io.grpc.internal.InsightBuilder appendKeyValue(java.lang.String,java.lang.Object)>("progress", $r3);

        return;
    }

    public void start(io.grpc.internal.ClientStreamListener)
    {
        io.grpc.internal.FailingClientStream $r0;
        io.grpc.internal.ClientStreamListener $r1;
        io.grpc.Status $r2;
        boolean $z0;
        int $i0, $i1;
        io.grpc.ClientStreamTracer[] $r3;
        io.grpc.ClientStreamTracer $r4;
        io.grpc.internal.ClientStreamListener$RpcProgress $r5;
        io.grpc.Metadata $r6;

        $r0 := @this: io.grpc.internal.FailingClientStream;

        $r1 := @parameter0: io.grpc.internal.ClientStreamListener;

        $z0 = $r0.<io.grpc.internal.FailingClientStream: boolean started>;

        $i0 = 0;

        if $z0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "already started");

        $r0.<io.grpc.internal.FailingClientStream: boolean started> = 1;

        $r3 = $r0.<io.grpc.internal.FailingClientStream: io.grpc.ClientStreamTracer[] tracers>;

        $i1 = lengthof $r3;

     label3:
        if $i0 >= $i1 goto label4;

        $r4 = $r3[$i0];

        $r2 = $r0.<io.grpc.internal.FailingClientStream: io.grpc.Status error>;

        virtualinvoke $r4.<io.grpc.ClientStreamTracer: void streamClosed(io.grpc.Status)>($r2);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r2 = $r0.<io.grpc.internal.FailingClientStream: io.grpc.Status error>;

        $r5 = $r0.<io.grpc.internal.FailingClientStream: io.grpc.internal.ClientStreamListener$RpcProgress rpcProgress>;

        $r6 = new io.grpc.Metadata;

        specialinvoke $r6.<io.grpc.Metadata: void <init>()>();

        interfaceinvoke $r1.<io.grpc.internal.ClientStreamListener: void closed(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,io.grpc.Metadata)>($r2, $r5, $r6);

        return;
    }

