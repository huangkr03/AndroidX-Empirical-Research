kotlin.sequences.USequencesKt___USequencesKt
    public void <init>()
    {
        kotlin.sequences.USequencesKt___USequencesKt $r0;

        $r0 := @this: kotlin.sequences.USequencesKt___USequencesKt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final int sumOfUByte(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Iterator $r1;
        int $i0, $i3;
        boolean $z0;
        java.lang.Object $r2;
        kotlin.UByte $r3;
        byte $b1;
        short $s2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kotlin.UByte) $r2;

        $b1 = virtualinvoke $r3.<kotlin.UByte: byte unbox-impl()>();

        $s2 = $b1 & 255;

        $i3 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($s2);

        $i0 = $i0 + $i3;

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        goto label1;

     label2:
        return $i0;
    }

    public static final int sumOfUInt(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Iterator $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r2;
        kotlin.UInt $r3;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kotlin.UInt) $r2;

        $i1 = virtualinvoke $r3.<kotlin.UInt: int unbox-impl()>();

        $i0 = $i0 + $i1;

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        goto label1;

     label2:
        return $i0;
    }

    public static final long sumOfULong(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Iterator $r1;
        long $l0, $l1;
        boolean $z0;
        java.lang.Object $r2;
        kotlin.ULong $r3;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $l0 = 0L;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kotlin.ULong) $r2;

        $l1 = virtualinvoke $r3.<kotlin.ULong: long unbox-impl()>();

        $l0 = $l0 + $l1;

        $l0 = staticinvoke <kotlin.ULong: long constructor-impl(long)>($l0);

        goto label1;

     label2:
        return $l0;
    }

    public static final int sumOfUShort(kotlin.sequences.Sequence)
    {
        kotlin.sequences.Sequence $r0;
        java.util.Iterator $r1;
        int $i0, $i3;
        boolean $z0;
        java.lang.Object $r2;
        kotlin.UShort $r3;
        short $s1;
        char $c2;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = interfaceinvoke $r0.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $i0 = 0;

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (kotlin.UShort) $r2;

        $s1 = virtualinvoke $r3.<kotlin.UShort: short unbox-impl()>();

        $c2 = (char) $s1;

        $i3 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($c2);

        $i0 = $i0 + $i3;

        $i0 = staticinvoke <kotlin.UInt: int constructor-impl(int)>($i0);

        goto label1;

     label2:
        return $i0;
    }

