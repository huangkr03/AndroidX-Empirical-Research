io.grpc.okhttp.OkHttpWritableBuffer
<io.grpc.okhttp.OkHttpWritableBuffer: okio.Buffer buffer>
<io.grpc.okhttp.OkHttpWritableBuffer: int readableBytes>
<io.grpc.okhttp.OkHttpWritableBuffer: int writableBytes>
    void <init>(okio.Buffer, int)
    {
        io.grpc.okhttp.OkHttpWritableBuffer $r0;
        okio.Buffer $r1;
        int $i0;

        $r0 := @this: io.grpc.okhttp.OkHttpWritableBuffer;

        $r1 := @parameter0: okio.Buffer;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.okhttp.OkHttpWritableBuffer: okio.Buffer buffer> = $r1;

        $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int writableBytes> = $i0;

        return;
    }

    okio.Buffer buffer()
    {
        io.grpc.okhttp.OkHttpWritableBuffer $r0;
        okio.Buffer r1;

        $r0 := @this: io.grpc.okhttp.OkHttpWritableBuffer;

        r1 = $r0.<io.grpc.okhttp.OkHttpWritableBuffer: okio.Buffer buffer>;

        return r1;
    }

    public int readableBytes()
    {
        io.grpc.okhttp.OkHttpWritableBuffer $r0;
        int i0;

        $r0 := @this: io.grpc.okhttp.OkHttpWritableBuffer;

        i0 = $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int readableBytes>;

        return i0;
    }

    public void release()
    {
        io.grpc.okhttp.OkHttpWritableBuffer $r0;

        $r0 := @this: io.grpc.okhttp.OkHttpWritableBuffer;

        return;
    }

    public int writableBytes()
    {
        io.grpc.okhttp.OkHttpWritableBuffer $r0;
        int i0;

        $r0 := @this: io.grpc.okhttp.OkHttpWritableBuffer;

        i0 = $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int writableBytes>;

        return i0;
    }

    public void write(byte)
    {
        io.grpc.okhttp.OkHttpWritableBuffer $r0;
        okio.Buffer $r1;
        byte $b0;
        int $i1;

        $r0 := @this: io.grpc.okhttp.OkHttpWritableBuffer;

        $b0 := @parameter0: byte;

        $r1 = $r0.<io.grpc.okhttp.OkHttpWritableBuffer: okio.Buffer buffer>;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($b0);

        $i1 = $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int writableBytes>;

        $i1 = $i1 + -1;

        $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int writableBytes> = $i1;

        $i1 = $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int readableBytes>;

        $i1 = $i1 + 1;

        $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int readableBytes> = $i1;

        return;
    }

    public void write(byte[], int, int)
    {
        io.grpc.okhttp.OkHttpWritableBuffer $r0;
        int $i0, $i1;
        okio.Buffer $r1;
        byte[] $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpWritableBuffer;

        $r2 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = $r0.<io.grpc.okhttp.OkHttpWritableBuffer: okio.Buffer buffer>;

        virtualinvoke $r1.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r2, $i0, $i1);

        $i0 = $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int writableBytes>;

        $i0 = $i0 - $i1;

        $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int writableBytes> = $i0;

        $i0 = $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int readableBytes>;

        $i0 = $i0 + $i1;

        $r0.<io.grpc.okhttp.OkHttpWritableBuffer: int readableBytes> = $i0;

        return;
    }

