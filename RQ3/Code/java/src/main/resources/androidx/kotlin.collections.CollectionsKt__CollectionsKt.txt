kotlin.collections.CollectionsKt__CollectionsKt
    public void <init>()
    {
        kotlin.collections.CollectionsKt__CollectionsKt $r0;

        $r0 := @this: kotlin.collections.CollectionsKt__CollectionsKt;

        specialinvoke $r0.<kotlin.collections.CollectionsKt__CollectionsJVMKt: void <init>()>();

        return;
    }

    private static final java.util.List List(int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        java.util.ArrayList $r1, r4;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        java.util.List r5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "init");

        r4 = new java.util.ArrayList;

        $r1 = r4;

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r5 = (java.util.List) $r1;

        return r5;
    }

    private static final java.util.List MutableList(int, kotlin.jvm.functions.Function1)
    {
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r0;
        java.util.ArrayList $r1, r4;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        java.util.List r5;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "init");

        r4 = new java.util.ArrayList;

        $r1 = r4;

        specialinvoke r4.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r5 = (java.util.List) $r1;

        return r5;
    }

    private static final java.util.ArrayList arrayListOf()
    {
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        return $r0;
    }

    public static final transient java.util.ArrayList arrayListOf(java.lang.Object[])
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.Object[] $r1;
        int $i0;
        java.util.ArrayList $r2;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        return $r2;

     label1:
        $r2 = new java.util.ArrayList;

        $r0 = new kotlin.collections.ArrayAsCollection;

        specialinvoke $r0.<kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>($r1, 1);

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r0);

        return $r2;
    }

    public static final java.util.Collection asCollection(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        kotlin.collections.ArrayAsCollection $r1;

        $r0 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.collections.ArrayAsCollection;

        specialinvoke $r1.<kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>($r0, 0);

        return $r1;
    }

    public static final int binarySearch(java.util.List, int, int, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.List $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;
        java.lang.Number $r3;

        $r1 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "comparison");

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        staticinvoke <kotlin.collections.CollectionsKt__CollectionsKt: void rangeCheck$CollectionsKt__CollectionsKt(int,int,int)>($i2, $i0, $i1);

        $i1 = $i1 + -1;

     label1:
        if $i0 > $i1 goto label4;

        $i2 = $i0 + $i1;

        $i2 = $i2 >>> 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r2 = interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

        $r3 = (java.lang.Number) $r2;

        $i3 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        if $i3 >= 0 goto label2;

        $i0 = $i2 + 1;

        goto label1;

     label2:
        if $i3 <= 0 goto label3;

        $i1 = $i2 + -1;

        goto label1;

     label3:
        return $i2;

     label4:
        $i0 = $i0 + 1;

        $i0 = neg $i0;

        return $i0;
    }

    public static final int binarySearch(java.util.List, java.lang.Comparable, int, int)
    {
        java.lang.Comparable $r0, $r3;
        java.util.List $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        $r1 := @parameter0: java.util.List;

        $r0 := @parameter1: java.lang.Comparable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        staticinvoke <kotlin.collections.CollectionsKt__CollectionsKt: void rangeCheck$CollectionsKt__CollectionsKt(int,int,int)>($i2, $i0, $i1);

        $i1 = $i1 + -1;

     label1:
        if $i0 > $i1 goto label4;

        $i2 = $i0 + $i1;

        $i2 = $i2 >>> 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (java.lang.Comparable) $r2;

        $i3 = staticinvoke <kotlin.comparisons.ComparisonsKt: int compareValues(java.lang.Comparable,java.lang.Comparable)>($r3, $r0);

        if $i3 >= 0 goto label2;

        $i0 = $i2 + 1;

        goto label1;

     label2:
        if $i3 <= 0 goto label3;

        $i1 = $i2 + -1;

        goto label1;

     label3:
        return $i2;

     label4:
        $i0 = $i0 + 1;

        $i0 = neg $i0;

        return $i0;
    }

    public static final int binarySearch(java.util.List, java.lang.Object, java.util.Comparator, int, int)
    {
        java.lang.Object $r0, $r3;
        java.util.Comparator $r1;
        java.util.List $r2;
        int $i0, $i1, $i2, $i3;

        $r2 := @parameter0: java.util.List;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.util.Comparator;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "comparator");

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        staticinvoke <kotlin.collections.CollectionsKt__CollectionsKt: void rangeCheck$CollectionsKt__CollectionsKt(int,int,int)>($i2, $i0, $i1);

        $i1 = $i1 + -1;

     label1:
        if $i0 > $i1 goto label4;

        $i2 = $i0 + $i1;

        $i2 = $i2 >>> 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $i3 = interfaceinvoke $r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r0);

        if $i3 >= 0 goto label2;

        $i0 = $i2 + 1;

        goto label1;

     label2:
        if $i3 <= 0 goto label3;

        $i1 = $i2 + -1;

        goto label1;

     label3:
        return $i2;

     label4:
        $i0 = $i0 + 1;

        $i0 = neg $i0;

        return $i0;
    }

    public static int binarySearch$default(java.util.List, int, int, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.List $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        $r1 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: kotlin.jvm.functions.Function1;

        $i2 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 2;

        if $i2 == 0 goto label2;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

     label2:
        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int binarySearch(java.util.List,int,int,kotlin.jvm.functions.Function1)>($r1, $i0, $i1, $r0);

        return $i0;
    }

    public static int binarySearch$default(java.util.List, java.lang.Comparable, int, int, int, java.lang.Object)
    {
        java.lang.Comparable $r0;
        java.util.List $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        $r1 := @parameter0: java.util.List;

        $r0 := @parameter1: java.lang.Comparable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

     label2:
        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int binarySearch(java.util.List,java.lang.Comparable,int,int)>($r1, $r0, $i0, $i1);

        return $i0;
    }

    public static int binarySearch$default(java.util.List, java.lang.Object, java.util.Comparator, int, int, int, java.lang.Object)
    {
        java.lang.Object $r0, $r3;
        java.util.Comparator $r1;
        java.util.List $r2;
        int $i0, $i1, $i2, $i3;

        $r2 := @parameter0: java.util.List;

        $r0 := @parameter1: java.lang.Object;

        $r1 := @parameter2: java.util.Comparator;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $r3 := @parameter6: java.lang.Object;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 8;

        if $i2 == 0 goto label2;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,int,int)>($r2, $r0, $r1, $i0, $i1);

        return $i0;
    }

    public static final int binarySearchBy(java.util.List, java.lang.Comparable, int, int, kotlin.jvm.functions.Function1)
    {
        java.lang.Comparable $r0;
        int $i0, $i1;
        kotlin.jvm.functions.Function1 $r1;
        java.util.List $r2;
        kotlin.collections.CollectionsKt__CollectionsKt$binarySearchBy$1 $r3;

        $r2 := @parameter0: java.util.List;

        $r0 := @parameter1: java.lang.Comparable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "selector");

        $r3 = new kotlin.collections.CollectionsKt__CollectionsKt$binarySearchBy$1;

        specialinvoke $r3.<kotlin.collections.CollectionsKt__CollectionsKt$binarySearchBy$1: void <init>(kotlin.jvm.functions.Function1,java.lang.Comparable)>($r1, $r0);

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int binarySearch(java.util.List,int,int,kotlin.jvm.functions.Function1)>($r2, $i0, $i1, $r3);

        return $i0;
    }

    public static int binarySearchBy$default(java.util.List, java.lang.Comparable, int, int, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        java.lang.Comparable $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.util.List $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        kotlin.collections.CollectionsKt__CollectionsKt$binarySearchBy$1 $r4;

        $r2 := @parameter0: java.util.List;

        $r0 := @parameter1: java.lang.Comparable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: kotlin.jvm.functions.Function1;

        $i2 := @parameter5: int;

        $r3 := @parameter6: java.lang.Object;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label1;

        $i0 = 0;

     label1:
        $i2 = $i2 & 4;

        if $i2 == 0 goto label2;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        $r4 = new kotlin.collections.CollectionsKt__CollectionsKt$binarySearchBy$1;

        specialinvoke $r4.<kotlin.collections.CollectionsKt__CollectionsKt$binarySearchBy$1: void <init>(kotlin.jvm.functions.Function1,java.lang.Comparable)>($r1, $r0);

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int binarySearch(java.util.List,int,int,kotlin.jvm.functions.Function1)>($r2, $i0, $i1, $r4);

        return $i0;
    }

    private static final java.util.List buildList(int, kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        int $i0;
        java.util.List $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builderAction");

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder(int)>($i0);

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>($r1);

        return $r1;
    }

    private static final java.util.List buildList(kotlin.jvm.functions.Function1)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.util.List $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "builderAction");

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List createListBuilder()>();

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List build(java.util.List)>($r1);

        return $r1;
    }

    private static final boolean containsAll(java.util.Collection, java.util.Collection)
    {
        java.util.Collection $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: java.util.Collection;

        $r0 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean containsAll(java.util.Collection)>($r0);

        return $z0;
    }

    public static final java.util.List emptyList()
    {
        kotlin.collections.EmptyList r0;

        r0 = <kotlin.collections.EmptyList: kotlin.collections.EmptyList INSTANCE>;

        return r0;
    }

    public static final kotlin.ranges.IntRange getIndices(java.util.Collection)
    {
        int $i0;
        java.util.Collection $r0;
        kotlin.ranges.IntRange $r1;

        $r0 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = new kotlin.ranges.IntRange;

        $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>();

        $i0 = $i0 + -1;

        specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(0, $i0);

        return $r1;
    }

    public static final int getLastIndex(java.util.List)
    {
        int $i0;
        java.util.List $r0;

        $r0 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        return $i0;
    }

    private static final java.lang.Object ifEmpty(java.util.Collection, kotlin.jvm.functions.Function0)
    {
        kotlin.jvm.functions.Function0 $r0;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r1 := @parameter0: java.util.Collection;

        $r0 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "defaultValue");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r0.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r2;

     label1:
        return $r1;
    }

    private static final boolean isNotEmpty(java.util.Collection)
    {
        boolean $z0;
        java.util.Collection $r0;

        $r0 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean isEmpty()>();

        $z0 = $z0 ^ 1;

        return $z0;
    }

    private static final boolean isNullOrEmpty(java.util.Collection)
    {
        boolean $z0;
        java.util.Collection $r0;

        $r0 := @parameter0: java.util.Collection;

        if $r0 == null goto label2;

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private static final java.util.List listOf()
    {
        java.util.List $r0;

        $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r0;
    }

    public static final transient java.util.List listOf(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        int $i0;
        java.util.List $r1;

        $r0 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements");

        $i0 = lengthof $r0;

        if $i0 <= 0 goto label1;

        $r1 = staticinvoke <kotlin.collections.ArraysKt: java.util.List asList(java.lang.Object[])>($r0);

        return $r1;

     label1:
        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;
    }

    public static final java.util.List listOfNotNull(java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.List $r1;

        $r0 := @parameter0: java.lang.Object;

        if $r0 == null goto label1;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r0);

        return $r1;

     label1:
        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r1;
    }

    public static final transient java.util.List listOfNotNull(java.lang.Object[])
    {
        java.util.List $r0;
        java.lang.Object[] $r1;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $r0 = staticinvoke <kotlin.collections.ArraysKt: java.util.List filterNotNull(java.lang.Object[])>($r1);

        return $r0;
    }

    private static final java.util.List mutableListOf()
    {
        java.util.ArrayList r0;
        java.util.List r1;

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.List) r0;

        return r1;
    }

    public static final transient java.util.List mutableListOf(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        int $i0;
        java.util.ArrayList r1;
        kotlin.collections.ArrayAsCollection r2;
        java.util.List r3;

        $r0 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements");

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r3 = (java.util.List) r1;

        return r3;

     label1:
        r1 = new java.util.ArrayList;

        r2 = new kotlin.collections.ArrayAsCollection;

        specialinvoke r2.<kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>($r0, 1);

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r3 = (java.util.List) r1;

        return r3;
    }

    public static final java.util.List optimizeReadOnlyList(java.util.List)
    {
        java.util.List $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        lookupswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        return $r0;

     label2:
        $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(0);

        $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r1);

        return $r0;

     label3:
        $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        return $r0;
    }

    private static final java.util.Collection orEmpty(java.util.Collection)
    {
        java.util.List $r0;
        java.util.Collection $r1;

        $r1 := @parameter0: java.util.Collection;

        if $r1 != null goto label1;

        $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        $r1 = (java.util.Collection) $r0;

     label1:
        return $r1;
    }

    private static final java.util.List orEmpty(java.util.List)
    {
        java.util.List $r0;

        $r0 := @parameter0: java.util.List;

        if $r0 != null goto label1;

        $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label1:
        return $r0;
    }

    private static final void rangeCheck$CollectionsKt__CollectionsKt(int, int, int)
    {
        int $i0, $i1, $i2;
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i1 > $i2 goto label3;

        if $i1 < 0 goto label2;

        if $i2 > $i0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("toIndex (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is greater than size (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label2:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is less than zero.");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r0;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is greater than toIndex (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public static final java.util.List shuffled(java.lang.Iterable, kotlin.random.Random)
    {
        kotlin.random.Random $r0;
        java.util.List $r1;
        java.lang.Iterable $r2;

        $r2 := @parameter0: java.lang.Iterable;

        $r0 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "random");

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.lang.Iterable)>($r2);

        staticinvoke <kotlin.collections.CollectionsKt: void shuffle(java.util.List,kotlin.random.Random)>($r1, $r0);

        return $r1;
    }

    public static final void throwCountOverflow()
    {
        java.lang.ArithmeticException $r0;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Count overflow has happened.");

        throw $r0;
    }

    public static final void throwIndexOverflow()
    {
        java.lang.ArithmeticException $r0;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Index overflow has happened.");

        throw $r0;
    }

