android.databinding.tool.util.StringUtils
<android.databinding.tool.util.StringUtils: java.lang.String LINE_SEPARATOR>
<android.databinding.tool.util.StringUtils: java.lang.String AMP_ENTITY>
<android.databinding.tool.util.StringUtils: java.lang.String QUOT_ENTITY>
<android.databinding.tool.util.StringUtils: java.lang.String APOS_ENTITY>
<android.databinding.tool.util.StringUtils: java.lang.String LT_ENTITY>
<android.databinding.tool.util.StringUtils: java.lang.String GT_ENTITY>
<android.databinding.tool.util.StringUtils: java.lang.String TAB_ENTITY>
<android.databinding.tool.util.StringUtils: java.lang.String CR_ENTITY>
<android.databinding.tool.util.StringUtils: java.lang.String LFEED_ENTITY>
    public static boolean isNotBlank(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return 0;

     label1:
        i2 = 0;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

     label2:
        if i2 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 != 0 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static java.lang.String capitalize(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        char c0, $c1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r2, $r4;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.google.common.base.Strings: boolean isNullOrEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isTitleCase(char)>(c0);

        if $z1 == 0 goto label2;

        return r0;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $c1 = staticinvoke <java.lang.Character: char toTitleCase(char)>(c0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String unescapeXml(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("&quot;", "\"");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("&lt;", "<");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("&gt;", ">");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("&apos;", "\'");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("&amp;", "&");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("&#x9;", "\t");

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("&#xD;", "\r");

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("&#xA;", "\n");

        return $r8;
    }

    public static java.lang.String join(java.lang.CharSequence[], java.lang.String)
    {
        java.lang.CharSequence[] r0;
        java.lang.String r1, $r5;
        java.util.stream.Stream $r2;
        java.util.stream.Collector $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.CharSequence[];

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0);

        $r3 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(r1);

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r3);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    private void <init>()
    {
        android.databinding.tool.util.StringUtils r0;

        r0 := @this: android.databinding.tool.util.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        com.google.common.base.StandardSystemProperty $r0;
        java.lang.String $r1;

        $r0 = <com.google.common.base.StandardSystemProperty: com.google.common.base.StandardSystemProperty LINE_SEPARATOR>;

        $r1 = virtualinvoke $r0.<com.google.common.base.StandardSystemProperty: java.lang.String value()>();

        <android.databinding.tool.util.StringUtils: java.lang.String LINE_SEPARATOR> = $r1;

        return;
    }

