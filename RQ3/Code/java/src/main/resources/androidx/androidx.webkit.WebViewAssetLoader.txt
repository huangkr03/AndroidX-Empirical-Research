androidx.webkit.WebViewAssetLoader
<androidx.webkit.WebViewAssetLoader: java.lang.String TAG>
<androidx.webkit.WebViewAssetLoader: java.lang.String DEFAULT_DOMAIN>
<androidx.webkit.WebViewAssetLoader: java.util.List mMatchers>
    void <init>(java.util.List)
    {
        androidx.webkit.WebViewAssetLoader r0;
        java.util.List r1;

        r0 := @this: androidx.webkit.WebViewAssetLoader;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.webkit.WebViewAssetLoader: java.util.List mMatchers> = r1;

        return;
    }

    public android.webkit.WebResourceResponse shouldInterceptRequest(android.net.Uri)
    {
        androidx.webkit.WebViewAssetLoader r0;
        android.net.Uri r1;
        java.util.Iterator r2;
        androidx.webkit.WebViewAssetLoader$PathMatcher r3;
        androidx.webkit.WebViewAssetLoader$PathHandler r4;
        java.lang.String r5, $r9;
        android.webkit.WebResourceResponse r6;
        java.util.List $r7;
        java.lang.Object $r8;
        boolean $z0;

        r0 := @this: androidx.webkit.WebViewAssetLoader;

        r1 := @parameter0: android.net.Uri;

        $r7 = r0.<androidx.webkit.WebViewAssetLoader: java.util.List mMatchers>;

        r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.webkit.WebViewAssetLoader$PathMatcher) $r8;

        r4 = virtualinvoke r3.<androidx.webkit.WebViewAssetLoader$PathMatcher: androidx.webkit.WebViewAssetLoader$PathHandler match(android.net.Uri)>(r1);

        if r4 != null goto label2;

        goto label1;

     label2:
        $r9 = virtualinvoke r1.<android.net.Uri: java.lang.String getPath()>();

        r5 = virtualinvoke r3.<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String getSuffixPath(java.lang.String)>($r9);

        r6 = interfaceinvoke r4.<androidx.webkit.WebViewAssetLoader$PathHandler: android.webkit.WebResourceResponse handle(java.lang.String)>(r5);

        if r6 != null goto label3;

        goto label1;

     label3:
        return r6;

     label4:
        return null;
    }

androidx.webkit.WebViewAssetLoader$AssetsPathHandler
<androidx.webkit.WebViewAssetLoader$AssetsPathHandler: androidx.webkit.internal.AssetHelper mAssetHelper>
    public void <init>(android.content.Context)
    {
        androidx.webkit.WebViewAssetLoader$AssetsPathHandler r0;
        android.content.Context r1;
        androidx.webkit.internal.AssetHelper $r2;

        r0 := @this: androidx.webkit.WebViewAssetLoader$AssetsPathHandler;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.webkit.internal.AssetHelper;

        specialinvoke $r2.<androidx.webkit.internal.AssetHelper: void <init>(android.content.Context)>(r1);

        r0.<androidx.webkit.WebViewAssetLoader$AssetsPathHandler: androidx.webkit.internal.AssetHelper mAssetHelper> = $r2;

        return;
    }

    void <init>(androidx.webkit.internal.AssetHelper)
    {
        androidx.webkit.WebViewAssetLoader$AssetsPathHandler r0;
        androidx.webkit.internal.AssetHelper r1;

        r0 := @this: androidx.webkit.WebViewAssetLoader$AssetsPathHandler;

        r1 := @parameter0: androidx.webkit.internal.AssetHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.webkit.WebViewAssetLoader$AssetsPathHandler: androidx.webkit.internal.AssetHelper mAssetHelper> = r1;

        return;
    }

    public android.webkit.WebResourceResponse handle(java.lang.String)
    {
        androidx.webkit.WebViewAssetLoader$AssetsPathHandler r0;
        java.lang.String r1, r2, $r9;
        androidx.webkit.internal.AssetHelper $r3;
        android.webkit.WebResourceResponse $r4, $r10;
        java.lang.Throwable $r5, r12;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.io.InputStream r11;

        r0 := @this: androidx.webkit.WebViewAssetLoader$AssetsPathHandler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<androidx.webkit.WebViewAssetLoader$AssetsPathHandler: androidx.webkit.internal.AssetHelper mAssetHelper>;

        r11 = virtualinvoke $r3.<androidx.webkit.internal.AssetHelper: java.io.InputStream openAsset(java.lang.String)>(r1);

        r2 = staticinvoke <androidx.webkit.internal.AssetHelper: java.lang.String guessMimeType(java.lang.String)>(r1);

        $r4 = new android.webkit.WebResourceResponse;

        specialinvoke $r4.<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>(r2, null, r11);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r12 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error opening asset path: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewAssetLoader", $r9, r12);

        $r10 = new android.webkit.WebResourceResponse;

        specialinvoke $r10.<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>(null, null, null);

        return $r10;

        catch java.io.IOException from label1 to label2 with label3;
    }

androidx.webkit.WebViewAssetLoader$Builder
<androidx.webkit.WebViewAssetLoader$Builder: boolean mHttpAllowed>
<androidx.webkit.WebViewAssetLoader$Builder: java.lang.String mDomain>
<androidx.webkit.WebViewAssetLoader$Builder: java.util.List mHandlerList>
    public void <init>()
    {
        androidx.webkit.WebViewAssetLoader$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: androidx.webkit.WebViewAssetLoader$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.webkit.WebViewAssetLoader$Builder: java.lang.String mDomain> = "appassets.androidplatform.net";

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<androidx.webkit.WebViewAssetLoader$Builder: java.util.List mHandlerList> = $r1;

        return;
    }

    public androidx.webkit.WebViewAssetLoader$Builder setDomain(java.lang.String)
    {
        androidx.webkit.WebViewAssetLoader$Builder r0;
        java.lang.String r1;

        r0 := @this: androidx.webkit.WebViewAssetLoader$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<androidx.webkit.WebViewAssetLoader$Builder: java.lang.String mDomain> = r1;

        return r0;
    }

    public androidx.webkit.WebViewAssetLoader$Builder setHttpAllowed(boolean)
    {
        androidx.webkit.WebViewAssetLoader$Builder r0;
        boolean z0;

        r0 := @this: androidx.webkit.WebViewAssetLoader$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.webkit.WebViewAssetLoader$Builder: boolean mHttpAllowed> = z0;

        return r0;
    }

    public androidx.webkit.WebViewAssetLoader$Builder addPathHandler(java.lang.String, androidx.webkit.WebViewAssetLoader$PathHandler)
    {
        androidx.webkit.WebViewAssetLoader$Builder r0;
        java.lang.String r1;
        androidx.webkit.WebViewAssetLoader$PathHandler r2;
        java.util.List $r3;
        androidx.core.util.Pair $r4;

        r0 := @this: androidx.webkit.WebViewAssetLoader$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.webkit.WebViewAssetLoader$PathHandler;

        $r3 = r0.<androidx.webkit.WebViewAssetLoader$Builder: java.util.List mHandlerList>;

        $r4 = staticinvoke <androidx.core.util.Pair: androidx.core.util.Pair create(java.lang.Object,java.lang.Object)>(r1, r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return r0;
    }

    public androidx.webkit.WebViewAssetLoader build()
    {
        androidx.webkit.WebViewAssetLoader$Builder r0;
        java.util.ArrayList r1, $r6;
        java.util.Iterator r2;
        androidx.core.util.Pair r3;
        java.lang.String r4, $r13;
        androidx.webkit.WebViewAssetLoader$PathHandler r5;
        java.util.List $r7;
        boolean $z0, $z1;
        androidx.webkit.WebViewAssetLoader $r8;
        java.lang.Object $r9, $r10, $r11;
        androidx.webkit.WebViewAssetLoader$PathMatcher $r12;

        r0 := @this: androidx.webkit.WebViewAssetLoader$Builder;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = r0.<androidx.webkit.WebViewAssetLoader$Builder: java.util.List mHandlerList>;

        r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.core.util.Pair) $r9;

        $r10 = r3.<androidx.core.util.Pair: java.lang.Object first>;

        r4 = (java.lang.String) $r10;

        $r11 = r3.<androidx.core.util.Pair: java.lang.Object second>;

        r5 = (androidx.webkit.WebViewAssetLoader$PathHandler) $r11;

        $r12 = new androidx.webkit.WebViewAssetLoader$PathMatcher;

        $r13 = r0.<androidx.webkit.WebViewAssetLoader$Builder: java.lang.String mDomain>;

        $z1 = r0.<androidx.webkit.WebViewAssetLoader$Builder: boolean mHttpAllowed>;

        specialinvoke $r12.<androidx.webkit.WebViewAssetLoader$PathMatcher: void <init>(java.lang.String,java.lang.String,boolean,androidx.webkit.WebViewAssetLoader$PathHandler)>($r13, r4, $z1, r5);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        $r8 = new androidx.webkit.WebViewAssetLoader;

        specialinvoke $r8.<androidx.webkit.WebViewAssetLoader: void <init>(java.util.List)>(r1);

        return $r8;
    }

androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler
<androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler: java.lang.String[] FORBIDDEN_DATA_DIRS>
<androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler: java.io.File mDirectory>
    public void <init>(android.content.Context, java.io.File)
    {
        androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler r0;
        android.content.Context r1;
        java.io.File r2, $r4;
        java.lang.Throwable r3, $r12;
        java.lang.String $r5, $r11, $r16, $r18;
        boolean $z0;
        java.lang.IllegalArgumentException $r6, $r13;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r14, $r15, $r17;

        r0 := @this: androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r4 = new java.io.File;

        $r5 = staticinvoke <androidx.webkit.internal.AssetHelper: java.lang.String getCanonicalDirPath(java.io.File)>(r2);

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        r0.<androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler: java.io.File mDirectory> = $r4;

        $z0 = specialinvoke r0.<androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler: boolean isAllowedInternalStorageDir(android.content.Context)>(r1);

        if $z0 != 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given directory \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" doesn\'t exist under an allowed app internal storage directory");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r3 = $r12;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve the canonical path for the given directory: ");

        $r16 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r18, r3);

        throw $r13;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private boolean isAllowedInternalStorageDir(android.content.Context) throws java.io.IOException
    {
        androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler r0;
        android.content.Context r1;
        java.lang.String r2, r3, r4, r6, $r13;
        java.lang.String[] r5;
        int i0, i1;
        java.io.File $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler;

        r1 := @parameter0: android.content.Context;

        $r7 = r0.<androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler: java.io.File mDirectory>;

        r2 = staticinvoke <androidx.webkit.internal.AssetHelper: java.lang.String getCanonicalDirPath(java.io.File)>($r7);

        $r8 = virtualinvoke r1.<android.content.Context: java.io.File getCacheDir()>();

        r3 = staticinvoke <androidx.webkit.internal.AssetHelper: java.lang.String getCanonicalDirPath(java.io.File)>($r8);

        $r9 = staticinvoke <androidx.webkit.internal.AssetHelper: java.io.File getDataDir(android.content.Context)>(r1);

        r4 = staticinvoke <androidx.webkit.internal.AssetHelper: java.lang.String getCanonicalDirPath(java.io.File)>($r9);

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(r4);

        if $z4 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label3;

     label2:
        return 0;

     label3:
        r5 = <androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler: java.lang.String[] FORBIDDEN_DATA_DIRS>;

        i0 = lengthof r5;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r6 = r5[i1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>($r13);

        if $z3 == 0 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return 1;
    }

    public android.webkit.WebResourceResponse handle(java.lang.String)
    {
        androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler r0;
        java.lang.String r1, r3, $r7, $r14;
        java.io.InputStream r2;
        java.io.File $r4, $r6, r15;
        java.lang.Object[] $r5;
        android.webkit.WebResourceResponse $r8, $r9;
        java.lang.Throwable $r10, r16;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler: java.io.File mDirectory>;

        r15 = staticinvoke <androidx.webkit.internal.AssetHelper: java.io.File getCanonicalFileIfChild(java.io.File,java.lang.String)>($r4, r1);

        if r15 == null goto label3;

        r2 = staticinvoke <androidx.webkit.internal.AssetHelper: java.io.InputStream openFile(java.io.File)>(r15);

        r3 = staticinvoke <androidx.webkit.internal.AssetHelper: java.lang.String guessMimeType(java.lang.String)>(r1);

        $r9 = new android.webkit.WebResourceResponse;

        specialinvoke $r9.<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>(r3, null, r2);

     label2:
        return $r9;

     label3:
        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r1;

        $r6 = r0.<androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler: java.io.File mDirectory>;

        $r5[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The requested file: %s is outside the mounted directory: %s", $r5);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WebViewAssetLoader", $r7);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        r16 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error opening the requested path: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewAssetLoader", $r14, r16);

     label6:
        $r8 = new android.webkit.WebResourceResponse;

        specialinvoke $r8.<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>(null, null, null);

        return $r8;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "app_webview/";

        $r0[1] = "databases/";

        $r0[2] = "lib/";

        $r0[3] = "shared_prefs/";

        $r0[4] = "code_cache/";

        <androidx.webkit.WebViewAssetLoader$InternalStoragePathHandler: java.lang.String[] FORBIDDEN_DATA_DIRS> = $r0;

        return;
    }

androidx.webkit.WebViewAssetLoader$PathHandler
<androidx.webkit.WebViewAssetLoader$PathHandler: android.webkit.WebResourceResponse handle(java.lang.String)>
androidx.webkit.WebViewAssetLoader$PathMatcher
<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String HTTP_SCHEME>
<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String HTTPS_SCHEME>
<androidx.webkit.WebViewAssetLoader$PathMatcher: boolean mHttpEnabled>
<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String mAuthority>
<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String mPath>
<androidx.webkit.WebViewAssetLoader$PathMatcher: androidx.webkit.WebViewAssetLoader$PathHandler mHandler>
    void <init>(java.lang.String, java.lang.String, boolean, androidx.webkit.WebViewAssetLoader$PathHandler)
    {
        androidx.webkit.WebViewAssetLoader$PathMatcher r0;
        java.lang.String r1, r2;
        boolean z0, $z1, $z2;
        androidx.webkit.WebViewAssetLoader$PathHandler r3;
        java.lang.IllegalArgumentException $r4, $r5;
        char $c0;

        r0 := @this: androidx.webkit.WebViewAssetLoader$PathMatcher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: androidx.webkit.WebViewAssetLoader$PathHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z1 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $c0 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        if $c0 == 47 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path should start with a slash \'/\'.");

        throw $r4;

     label2:
        $z2 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z2 != 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path should end with a slash \'/\'");

        throw $r5;

     label3:
        r0.<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String mAuthority> = r1;

        r0.<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String mPath> = r2;

        r0.<androidx.webkit.WebViewAssetLoader$PathMatcher: boolean mHttpEnabled> = z0;

        r0.<androidx.webkit.WebViewAssetLoader$PathMatcher: androidx.webkit.WebViewAssetLoader$PathHandler mHandler> = r3;

        return;
    }

    public androidx.webkit.WebViewAssetLoader$PathHandler match(android.net.Uri)
    {
        androidx.webkit.WebViewAssetLoader$PathMatcher r0;
        android.net.Uri r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.webkit.WebViewAssetLoader$PathHandler $r8;

        r0 := @this: androidx.webkit.WebViewAssetLoader$PathMatcher;

        r1 := @parameter0: android.net.Uri;

        $r2 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 == 0 goto label1;

        $z5 = r0.<androidx.webkit.WebViewAssetLoader$PathMatcher: boolean mHttpEnabled>;

        if $z5 != 0 goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z1 != 0 goto label2;

        $r9 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z4 != 0 goto label2;

        return null;

     label2:
        $r4 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

        $r5 = r0.<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String mAuthority>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label3;

        return null;

     label3:
        $r6 = virtualinvoke r1.<android.net.Uri: java.lang.String getPath()>();

        $r7 = r0.<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String mPath>;

        $z3 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>($r7);

        if $z3 != 0 goto label4;

        return null;

     label4:
        $r8 = r0.<androidx.webkit.WebViewAssetLoader$PathMatcher: androidx.webkit.WebViewAssetLoader$PathHandler mHandler>;

        return $r8;
    }

    public java.lang.String getSuffixPath(java.lang.String)
    {
        androidx.webkit.WebViewAssetLoader$PathMatcher r0;
        java.lang.String r1, $r2, $r3;

        r0 := @this: androidx.webkit.WebViewAssetLoader$PathMatcher;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.webkit.WebViewAssetLoader$PathMatcher: java.lang.String mPath>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>($r2, "");

        return $r3;
    }

androidx.webkit.WebViewAssetLoader$ResourcesPathHandler
<androidx.webkit.WebViewAssetLoader$ResourcesPathHandler: androidx.webkit.internal.AssetHelper mAssetHelper>
    public void <init>(android.content.Context)
    {
        androidx.webkit.WebViewAssetLoader$ResourcesPathHandler r0;
        android.content.Context r1;
        androidx.webkit.internal.AssetHelper $r2;

        r0 := @this: androidx.webkit.WebViewAssetLoader$ResourcesPathHandler;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.webkit.internal.AssetHelper;

        specialinvoke $r2.<androidx.webkit.internal.AssetHelper: void <init>(android.content.Context)>(r1);

        r0.<androidx.webkit.WebViewAssetLoader$ResourcesPathHandler: androidx.webkit.internal.AssetHelper mAssetHelper> = $r2;

        return;
    }

    void <init>(androidx.webkit.internal.AssetHelper)
    {
        androidx.webkit.WebViewAssetLoader$ResourcesPathHandler r0;
        androidx.webkit.internal.AssetHelper r1;

        r0 := @this: androidx.webkit.WebViewAssetLoader$ResourcesPathHandler;

        r1 := @parameter0: androidx.webkit.internal.AssetHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.webkit.WebViewAssetLoader$ResourcesPathHandler: androidx.webkit.internal.AssetHelper mAssetHelper> = r1;

        return;
    }

    public android.webkit.WebResourceResponse handle(java.lang.String)
    {
        androidx.webkit.WebViewAssetLoader$ResourcesPathHandler r0;
        java.lang.String r1, r2, $r9, $r15;
        androidx.webkit.internal.AssetHelper $r3;
        android.webkit.WebResourceResponse $r4, $r10;
        java.lang.Throwable $r5, $r11, r17, r18;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r13, $r14;
        java.io.InputStream r16;

        r0 := @this: androidx.webkit.WebViewAssetLoader$ResourcesPathHandler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<androidx.webkit.WebViewAssetLoader$ResourcesPathHandler: androidx.webkit.internal.AssetHelper mAssetHelper>;

        r16 = virtualinvoke $r3.<androidx.webkit.internal.AssetHelper: java.io.InputStream openResource(java.lang.String)>(r1);

        r2 = staticinvoke <androidx.webkit.internal.AssetHelper: java.lang.String guessMimeType(java.lang.String)>(r1);

        $r4 = new android.webkit.WebResourceResponse;

        specialinvoke $r4.<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>(r2, null, r16);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r17 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource not found from the path: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewAssetLoader", $r9, r17);

        goto label5;

     label4:
        $r11 := @caughtexception;

        r18 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error opening resource from the path: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewAssetLoader", $r15, r18);

     label5:
        $r10 = new android.webkit.WebResourceResponse;

        specialinvoke $r10.<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>(null, null, null);

        return $r10;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

