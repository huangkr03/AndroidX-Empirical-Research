androidx.core.graphics.TypefaceCompatBaseImpl
<androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.String TAG>
<androidx.core.graphics.TypefaceCompatBaseImpl: int INVALID_KEY>
<androidx.core.graphics.TypefaceCompatBaseImpl: java.util.concurrent.ConcurrentHashMap mFontFamilies>
    void <init>()
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<androidx.core.graphics.TypefaceCompatBaseImpl: java.util.concurrent.ConcurrentHashMap mFontFamilies> = $r1;

        return;
    }

    private static java.lang.Object findBestFont(java.lang.Object[], int, androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)
    {
        java.lang.Object[] r0;
        int i0, $i2, $i3;
        androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor r1;
        short s1, $s4;
        boolean z0, $z1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor;

        $i2 = i0 & 1;

        if $i2 != 0 goto label1;

        $s4 = 400;

        goto label2;

     label1:
        $s4 = 700;

     label2:
        s1 = $s4;

        $i3 = i0 & 2;

        if $i3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        $r2 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,boolean,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>(r0, s1, z0, r1);

        return $r2;
    }

    private static java.lang.Object findBestFont(java.lang.Object[], int, boolean, androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)
    {
        java.lang.Object[] r0, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        boolean z0, $z1;
        androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor r1;
        java.lang.Object r3, r4;
        byte $b9;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor;

        r4 = null;

        i7 = 2147483647;

        r2 = r0;

        i1 = lengthof r2;

        i8 = 0;

     label1:
        if i8 >= i1 goto label6;

        r3 = r2[i8];

        $i3 = interfaceinvoke r1.<androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor: int getWeight(java.lang.Object)>(r3);

        $i4 = $i3 - i0;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i4);

        $i6 = $i5 * 2;

        $z1 = interfaceinvoke r1.<androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor: boolean isItalic(java.lang.Object)>(r3);

        if $z1 != z0 goto label2;

        $b9 = 0;

        goto label3;

     label2:
        $b9 = 1;

     label3:
        i2 = $i6 + $b9;

        if r4 == null goto label4;

        if i7 <= i2 goto label5;

     label4:
        r4 = r3;

        i7 = i2;

     label5:
        i8 = i8 + 1;

        goto label1;

     label6:
        return r4;
    }

    private static long getUniqueKey(android.graphics.Typeface)
    {
        android.graphics.Typeface r0;
        java.lang.Number r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        long $l0;
        java.lang.Throwable $r4, $r5, r7, r8;
        java.lang.reflect.Field r6;

        r0 := @parameter0: android.graphics.Typeface;

        if r0 != null goto label1;

        return 0L;

     label1:
        $r2 = class "Landroid/graphics/Typeface;";

        r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("native_instance");

        virtualinvoke r6.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r3 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.lang.Number) $r3;

        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

     label2:
        return $l0;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TypefaceCompatBaseImpl", "Could not retrieve font from family.", r7);

        return 0L;

     label4:
        $r4 := @caughtexception;

        r8 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TypefaceCompatBaseImpl", "Could not retrieve font from family.", r8);

        return 0L;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    protected androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[], int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        androidx.core.provider.FontsContractCompat$FontInfo[] r1;
        int i0;
        androidx.core.graphics.TypefaceCompatBaseImpl$1 $r2;
        java.lang.Object $r3;
        androidx.core.provider.FontsContractCompat$FontInfo $r4;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: androidx.core.provider.FontsContractCompat$FontInfo[];

        i0 := @parameter1: int;

        $r2 = new androidx.core.graphics.TypefaceCompatBaseImpl$1;

        specialinvoke $r2.<androidx.core.graphics.TypefaceCompatBaseImpl$1: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>(r0);

        $r3 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>(r1, i0, $r2);

        $r4 = (androidx.core.provider.FontsContractCompat$FontInfo) $r3;

        return $r4;
    }

    protected android.graphics.Typeface createFromInputStream(android.content.Context, java.io.InputStream)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        android.content.Context r1;
        java.io.InputStream r2;
        java.io.File r3;
        java.lang.Throwable r4, $r6, $r7;
        boolean $z0;
        java.lang.String $r5;
        android.graphics.Typeface r8;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.io.InputStream;

        r3 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>(r1);

        if r3 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,java.io.InputStream)>(r3, r2);

        if $z0 != 0 goto label3;

     label2:
        virtualinvoke r3.<java.io.File: boolean delete()>();

        return null;

     label3:
        $r5 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>();

        r8 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>($r5);

     label4:
        virtualinvoke r3.<java.io.File: boolean delete()>();

        return r8;

     label5:
        $r7 := @caughtexception;

     label6:
        virtualinvoke r3.<java.io.File: boolean delete()>();

        return null;

     label7:
        $r6 := @caughtexception;

        r4 = $r6;

     label8:
        virtualinvoke r3.<java.io.File: boolean delete()>();

        throw r4;

        catch java.lang.RuntimeException from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.graphics.Typeface createFromFontInfo(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontsContractCompat$FontInfo[], int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        android.content.Context r1;
        android.os.CancellationSignal r2;
        androidx.core.provider.FontsContractCompat$FontInfo[] r3;
        int i0, $i1;
        androidx.core.provider.FontsContractCompat$FontInfo r4;
        java.lang.Throwable r5, $r8, $r9;
        android.content.ContentResolver $r6;
        android.net.Uri $r7;
        java.io.InputStream r10;
        android.graphics.Typeface r11;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.CancellationSignal;

        r3 := @parameter2: androidx.core.provider.FontsContractCompat$FontInfo[];

        i0 := @parameter3: int;

        $i1 = lengthof r3;

        if $i1 >= 1 goto label1;

        return null;

     label1:
        r4 = virtualinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int)>(r3, i0);

        r10 = null;

     label2:
        $r6 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = virtualinvoke r4.<androidx.core.provider.FontsContractCompat$FontInfo: android.net.Uri getUri()>();

        r10 = virtualinvoke $r6.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r7);

        r11 = virtualinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl: android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream)>(r1, r10);

     label3:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r10);

        return r11;

     label4:
        $r8 := @caughtexception;

     label5:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r10);

        return null;

     label6:
        $r9 := @caughtexception;

        r5 = $r9;

     label7:
        staticinvoke <androidx.core.graphics.TypefaceCompatUtil: void closeQuietly(java.io.Closeable)>(r10);

        throw r5;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry r1;
        int i0;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] $r2;
        androidx.core.graphics.TypefaceCompatBaseImpl$2 $r3;
        java.lang.Object $r4;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r5;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries()>();

        $r3 = new androidx.core.graphics.TypefaceCompatBaseImpl$2;

        specialinvoke $r3.<androidx.core.graphics.TypefaceCompatBaseImpl$2: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>(r0);

        $r4 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>($r2, i0, $r3);

        $r5 = (androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry) $r4;

        return $r5;
    }

    private androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, int, boolean)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry r1;
        int i0;
        boolean z0;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] $r2;
        androidx.core.graphics.TypefaceCompatBaseImpl$3 $r3;
        java.lang.Object $r4;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r5;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r1.<androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries()>();

        $r3 = new androidx.core.graphics.TypefaceCompatBaseImpl$3;

        specialinvoke $r3.<androidx.core.graphics.TypefaceCompatBaseImpl$3: void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)>(r0);

        $r4 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: java.lang.Object findBestFont(java.lang.Object[],int,boolean,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor)>($r2, i0, z0, $r3);

        $r5 = (androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry) $r4;

        return $r5;
    }

    public android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context, androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, android.content.res.Resources, int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        android.content.Context r1;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry r2;
        android.content.res.Resources r3;
        int i0, $i1;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry r4;
        android.graphics.Typeface r5;
        java.lang.String $r6;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        r3 := @parameter2: android.content.res.Resources;

        i0 := @parameter3: int;

        r4 = specialinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int)>(r2, i0);

        if r4 != null goto label1;

        return null;

     label1:
        $i1 = virtualinvoke r4.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: int getResourceId()>();

        $r6 = virtualinvoke r4.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: java.lang.String getFileName()>();

        r5 = staticinvoke <androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int,int)>(r1, r3, $i1, $r6, 0, i0);

        specialinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl: void addFontFamily(android.graphics.Typeface,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry)>(r5, r2);

        return r5;
    }

    android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context, androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry, android.content.res.Resources, int, boolean)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        android.content.Context r1;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry r2;
        android.content.res.Resources r3;
        int i0, $i1;
        boolean z0;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry r4;
        android.graphics.Typeface r5;
        java.lang.String $r6;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        r3 := @parameter2: android.content.res.Resources;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        r4 = specialinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int,boolean)>(r2, i0, z0);

        if r4 != null goto label1;

        return null;

     label1:
        $i1 = virtualinvoke r4.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: int getResourceId()>();

        $r6 = virtualinvoke r4.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: java.lang.String getFileName()>();

        r5 = staticinvoke <androidx.core.graphics.TypefaceCompat: android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int,int)>(r1, r3, $i1, $r6, 0, 0);

        specialinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl: void addFontFamily(android.graphics.Typeface,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry)>(r5, r2);

        return r5;
    }

    public android.graphics.Typeface createFromResourcesFontFile(android.content.Context, android.content.res.Resources, int, java.lang.String, int)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        android.content.Context r1;
        android.content.res.Resources r2;
        int i0, i1;
        java.lang.String r3, $r6;
        java.io.File r4;
        java.lang.Throwable r5, $r7, $r8;
        boolean $z0;
        android.graphics.Typeface r9;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.res.Resources;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        r4 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: java.io.File getTempFile(android.content.Context)>(r1);

        if r4 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <androidx.core.graphics.TypefaceCompatUtil: boolean copyToFile(java.io.File,android.content.res.Resources,int)>(r4, r2, i0);

        if $z0 != 0 goto label3;

     label2:
        virtualinvoke r4.<java.io.File: boolean delete()>();

        return null;

     label3:
        $r6 = virtualinvoke r4.<java.io.File: java.lang.String getPath()>();

        r9 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>($r6);

     label4:
        virtualinvoke r4.<java.io.File: boolean delete()>();

        return r9;

     label5:
        $r8 := @caughtexception;

     label6:
        virtualinvoke r4.<java.io.File: boolean delete()>();

        return null;

     label7:
        $r7 := @caughtexception;

        r5 = $r7;

     label8:
        virtualinvoke r4.<java.io.File: boolean delete()>();

        throw r5;

        catch java.lang.RuntimeException from label1 to label2 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    android.graphics.Typeface createWeightStyle(android.content.Context, android.graphics.Typeface, int, boolean)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        android.content.Context r1;
        android.graphics.Typeface r2, r5;
        int i0;
        boolean z0;
        java.lang.Throwable r3, $r4;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.graphics.Typeface;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r5 = null;

     label1:
        r5 = staticinvoke <androidx.core.graphics.WeightTypefaceApi14: android.graphics.Typeface createWeightStyle(androidx.core.graphics.TypefaceCompatBaseImpl,android.content.Context,android.graphics.Typeface,int,boolean)>(r0, r1, r2, i0, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        if r5 != null goto label5;

        r5 = r2;

     label5:
        return r5;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry getFontFamily(android.graphics.Typeface)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        android.graphics.Typeface r1;
        long l0;
        byte $b1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Long $r3;
        java.lang.Object $r4;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry $r5;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: android.graphics.Typeface;

        l0 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: long getUniqueKey(android.graphics.Typeface)>(r1);

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<androidx.core.graphics.TypefaceCompatBaseImpl: java.util.concurrent.ConcurrentHashMap mFontFamilies>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry) $r4;

        return $r5;
    }

    private void addFontFamily(android.graphics.Typeface, androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl r0;
        android.graphics.Typeface r1;
        androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry r2;
        long l0;
        byte $b1;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Long $r4;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl;

        r1 := @parameter0: android.graphics.Typeface;

        r2 := @parameter1: androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry;

        l0 = staticinvoke <androidx.core.graphics.TypefaceCompatBaseImpl: long getUniqueKey(android.graphics.Typeface)>(r1);

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r3 = r0.<androidx.core.graphics.TypefaceCompatBaseImpl: java.util.concurrent.ConcurrentHashMap mFontFamilies>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

     label1:
        return;
    }

androidx.core.graphics.TypefaceCompatBaseImpl$1
<androidx.core.graphics.TypefaceCompatBaseImpl$1: androidx.core.graphics.TypefaceCompatBaseImpl this$0>
    void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$1 r0;
        androidx.core.graphics.TypefaceCompatBaseImpl r1;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$1;

        r1 := @parameter0: androidx.core.graphics.TypefaceCompatBaseImpl;

        r0.<androidx.core.graphics.TypefaceCompatBaseImpl$1: androidx.core.graphics.TypefaceCompatBaseImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getWeight(androidx.core.provider.FontsContractCompat$FontInfo)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$1 r0;
        androidx.core.provider.FontsContractCompat$FontInfo r1;
        int $i0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$1;

        r1 := @parameter0: androidx.core.provider.FontsContractCompat$FontInfo;

        $i0 = virtualinvoke r1.<androidx.core.provider.FontsContractCompat$FontInfo: int getWeight()>();

        return $i0;
    }

    public boolean isItalic(androidx.core.provider.FontsContractCompat$FontInfo)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$1 r0;
        androidx.core.provider.FontsContractCompat$FontInfo r1;
        boolean $z0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$1;

        r1 := @parameter0: androidx.core.provider.FontsContractCompat$FontInfo;

        $z0 = virtualinvoke r1.<androidx.core.provider.FontsContractCompat$FontInfo: boolean isItalic()>();

        return $z0;
    }

    public volatile boolean isItalic(java.lang.Object)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$1 r0;
        java.lang.Object r1;
        androidx.core.provider.FontsContractCompat$FontInfo $r2;
        boolean $z0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.core.provider.FontsContractCompat$FontInfo) r1;

        $z0 = virtualinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl$1: boolean isItalic(androidx.core.provider.FontsContractCompat$FontInfo)>($r2);

        return $z0;
    }

    public volatile int getWeight(java.lang.Object)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$1 r0;
        java.lang.Object r1;
        androidx.core.provider.FontsContractCompat$FontInfo $r2;
        int $i0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.core.provider.FontsContractCompat$FontInfo) r1;

        $i0 = virtualinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl$1: int getWeight(androidx.core.provider.FontsContractCompat$FontInfo)>($r2);

        return $i0;
    }

androidx.core.graphics.TypefaceCompatBaseImpl$2
<androidx.core.graphics.TypefaceCompatBaseImpl$2: androidx.core.graphics.TypefaceCompatBaseImpl this$0>
    void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$2 r0;
        androidx.core.graphics.TypefaceCompatBaseImpl r1;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$2;

        r1 := @parameter0: androidx.core.graphics.TypefaceCompatBaseImpl;

        r0.<androidx.core.graphics.TypefaceCompatBaseImpl$2: androidx.core.graphics.TypefaceCompatBaseImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getWeight(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$2 r0;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry r1;
        int $i0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$2;

        r1 := @parameter0: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry;

        $i0 = virtualinvoke r1.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: int getWeight()>();

        return $i0;
    }

    public boolean isItalic(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$2 r0;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry r1;
        boolean $z0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$2;

        r1 := @parameter0: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry;

        $z0 = virtualinvoke r1.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: boolean isItalic()>();

        return $z0;
    }

    public volatile boolean isItalic(java.lang.Object)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$2 r0;
        java.lang.Object r1;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r2;
        boolean $z0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry) r1;

        $z0 = virtualinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl$2: boolean isItalic(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)>($r2);

        return $z0;
    }

    public volatile int getWeight(java.lang.Object)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$2 r0;
        java.lang.Object r1;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r2;
        int $i0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry) r1;

        $i0 = virtualinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl$2: int getWeight(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)>($r2);

        return $i0;
    }

androidx.core.graphics.TypefaceCompatBaseImpl$3
<androidx.core.graphics.TypefaceCompatBaseImpl$3: androidx.core.graphics.TypefaceCompatBaseImpl this$0>
    void <init>(androidx.core.graphics.TypefaceCompatBaseImpl)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$3 r0;
        androidx.core.graphics.TypefaceCompatBaseImpl r1;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$3;

        r1 := @parameter0: androidx.core.graphics.TypefaceCompatBaseImpl;

        r0.<androidx.core.graphics.TypefaceCompatBaseImpl$3: androidx.core.graphics.TypefaceCompatBaseImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getWeight(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$3 r0;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry r1;
        int $i0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$3;

        r1 := @parameter0: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry;

        $i0 = virtualinvoke r1.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: int getWeight()>();

        return $i0;
    }

    public boolean isItalic(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$3 r0;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry r1;
        boolean $z0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$3;

        r1 := @parameter0: androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry;

        $z0 = virtualinvoke r1.<androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry: boolean isItalic()>();

        return $z0;
    }

    public volatile boolean isItalic(java.lang.Object)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$3 r0;
        java.lang.Object r1;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r2;
        boolean $z0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry) r1;

        $z0 = virtualinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl$3: boolean isItalic(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)>($r2);

        return $z0;
    }

    public volatile int getWeight(java.lang.Object)
    {
        androidx.core.graphics.TypefaceCompatBaseImpl$3 r0;
        java.lang.Object r1;
        androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry $r2;
        int $i0;

        r0 := @this: androidx.core.graphics.TypefaceCompatBaseImpl$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry) r1;

        $i0 = virtualinvoke r0.<androidx.core.graphics.TypefaceCompatBaseImpl$3: int getWeight(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry)>($r2);

        return $i0;
    }

androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor
<androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor: int getWeight(java.lang.Object)>
<androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor: boolean isItalic(java.lang.Object)>
