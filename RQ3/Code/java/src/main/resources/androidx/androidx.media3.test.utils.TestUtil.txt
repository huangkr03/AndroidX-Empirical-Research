androidx.media3.test.utils.TestUtil
    private void <init>()
    {
        androidx.media3.test.utils.TestUtil r0;

        r0 := @this: androidx.media3.test.utils.TestUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] buildTestData(int)
    {
        int i0;
        byte[] $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] buildTestData(int,int)>(i0, i0);

        return $r0;
    }

    public static byte[] buildTestData(int, int)
    {
        int i0, i1;
        java.util.Random $r0;
        long $l2;
        byte[] $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.util.Random;

        $l2 = (long) i1;

        specialinvoke $r0.<java.util.Random: void <init>(long)>($l2);

        $r1 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] buildTestData(int,java.util.Random)>(i0, $r0);

        return $r1;
    }

    public static byte[] buildTestData(int, java.util.Random)
    {
        int i0;
        java.util.Random r0;
        byte[] r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Random;

        r1 = newarray (byte)[i0];

        virtualinvoke r0.<java.util.Random: void nextBytes(byte[])>(r1);

        return r1;
    }

    public static java.lang.String buildTestString(int, java.util.Random)
    {
        int i0, $i1, i3;
        java.util.Random r0;
        char[] r1;
        java.lang.String $r2;
        char $c2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Random;

        r1 = newarray (char)[i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $i1 = virtualinvoke r0.<java.util.Random: int nextInt()>();

        $c2 = (char) $i1;

        r1[i3] = $c2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public static transient byte[] createByteArray(int[])
    {
        int[] r0;
        byte[] r1;
        int $i0, $i1, $i2, $i3, i4, $i5;
        boolean $z0;
        byte $b6;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        r1 = newarray (byte)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label4;

        $i2 = r0[i4];

        if 0 > $i2 goto label2;

        $i3 = r0[i4];

        if $i3 > 255 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $i5 = r0[i4];

        $b6 = (byte) $i5;

        r1[i4] = $b6;

        i4 = i4 + 1;

        goto label1;

     label4:
        return r1;
    }

    public static transient com.google.common.collect.ImmutableList createByteList(int[])
    {
        int[] r0;
        byte[] $r1;
        java.util.List $r2;
        com.google.common.collect.ImmutableList $r3;

        r0 := @parameter0: int[];

        $r1 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] createByteArray(int[])>(r0);

        $r2 = staticinvoke <com.google.common.primitives.Bytes: java.util.List asList(byte[])>($r1);

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r2);

        return $r3;
    }

    public static java.io.File createTestFile(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File r0, $r2;
        java.lang.String r1;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <androidx.media3.test.utils.TestUtil: java.io.File createTestFile(java.io.File,java.lang.String,long)>(r0, r1, 1L);

        return $r2;
    }

    public static java.io.File createTestFile(java.io.File, java.lang.String, long) throws java.io.IOException
    {
        java.io.File r0, $r2, $r3;
        java.lang.String r1;
        long l0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <androidx.media3.test.utils.TestUtil: java.io.File createTestFile(java.io.File,long)>($r2, l0);

        return $r3;
    }

    public static java.io.File createTestFile(java.io.File, long) throws java.io.IOException
    {
        java.io.File r0;
        long l0, l3;
        java.io.FileOutputStream r1, $r2;
        byte $b1;
        int $i2;

        r0 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

        r1 = $r2;

        l3 = 0L;

     label1:
        $b1 = l3 cmp l0;

        if $b1 >= 0 goto label2;

        $i2 = (int) l3;

        virtualinvoke r1.<java.io.FileOutputStream: void write(int)>($i2);

        l3 = l3 + 1L;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        return r0;
    }

    public static byte[] getByteArray(android.content.Context, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1;
        java.io.InputStream $r2;
        byte[] $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <androidx.media3.test.utils.TestUtil: java.io.InputStream getInputStream(android.content.Context,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <androidx.media3.common.util.Util: byte[] toByteArray(java.io.InputStream)>($r2);

        return $r3;
    }

    public static java.io.InputStream getInputStream(android.content.Context, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1;
        android.content.res.Resources $r2;
        android.content.res.AssetManager $r3;
        java.io.InputStream $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        $r4 = virtualinvoke $r3.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>(r1);

        return $r4;
    }

    public static java.lang.String getString(android.content.Context, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1, $r3;
        byte[] $r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] getByteArray(android.content.Context,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <androidx.media3.common.util.Util: java.lang.String fromUtf8Bytes(byte[])>($r2);

        return $r3;
    }

    public static android.graphics.Bitmap getBitmap(android.content.Context, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1;
        java.io.InputStream $r2;
        android.graphics.Bitmap $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <androidx.media3.test.utils.TestUtil: java.io.InputStream getInputStream(android.content.Context,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>($r2);

        return $r3;
    }

    public static androidx.media3.database.DatabaseProvider getInMemoryDatabaseProvider()
    {
        androidx.media3.database.DefaultDatabaseProvider $r0;
        androidx.media3.test.utils.TestUtil$1 $r1;

        $r0 = new androidx.media3.database.DefaultDatabaseProvider;

        $r1 = new androidx.media3.test.utils.TestUtil$1;

        specialinvoke $r1.<androidx.media3.test.utils.TestUtil$1: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(null, null, null, 1);

        specialinvoke $r0.<androidx.media3.database.DefaultDatabaseProvider: void <init>(android.database.sqlite.SQLiteOpenHelper)>($r1);

        return $r0;
    }

    public static void assertTimelinesSame(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        com.google.common.truth.IterableSubject $r2;
        com.google.common.truth.Correspondence$BinaryPredicate $r3;
        com.google.common.truth.Correspondence $r4;
        com.google.common.truth.IterableSubject$UsingCorrespondence $r5;
        com.google.common.truth.Ordered $r6;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(r0);

        $r3 = dynamicinvoke "apply" <com.google.common.truth.Correspondence$BinaryPredicate ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.Object,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.TestUtil: boolean timelinesAreSame(androidx.media3.common.Timeline,androidx.media3.common.Timeline)>, methodtype: boolean __METHODTYPE__(androidx.media3.common.Timeline,androidx.media3.common.Timeline));

        $r4 = staticinvoke <com.google.common.truth.Correspondence: com.google.common.truth.Correspondence 'from'(com.google.common.truth.Correspondence$BinaryPredicate,java.lang.String)>($r3, "is equal to (ignoring Window.uid and Period.uid)");

        $r5 = virtualinvoke $r2.<com.google.common.truth.IterableSubject: com.google.common.truth.IterableSubject$UsingCorrespondence comparingElementsUsing(com.google.common.truth.Correspondence)>($r4);

        $r6 = virtualinvoke $r5.<com.google.common.truth.IterableSubject$UsingCorrespondence: com.google.common.truth.Ordered containsExactlyElementsIn(java.lang.Iterable)>(r1);

        interfaceinvoke $r6.<com.google.common.truth.Ordered: void inOrder()>();

        return;
    }

    public static boolean timelinesAreSame(androidx.media3.common.Timeline, androidx.media3.common.Timeline)
    {
        androidx.media3.common.Timeline r0, r1;
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline $r2, $r3;
        boolean $z0;

        r0 := @parameter0: androidx.media3.common.Timeline;

        r1 := @parameter1: androidx.media3.common.Timeline;

        $r2 = new androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        specialinvoke $r2.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: void <init>(androidx.media3.common.Timeline)>(r0);

        $r3 = new androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        specialinvoke $r3.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: void <init>(androidx.media3.common.Timeline)>(r1);

        $z0 = virtualinvoke $r2.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public static void assertDataSourceContent(androidx.media3.datasource.DataSource, androidx.media3.datasource.DataSpec, byte[], boolean) throws java.io.IOException
    {
        androidx.media3.datasource.DataSource r0;
        androidx.media3.datasource.DataSpec r1;
        byte[] r2, r3;
        boolean z0;
        long l0;
        java.lang.Throwable r4, $r9;
        java.lang.Long $r5;
        com.google.common.truth.LongSubject $r6;
        java.lang.Integer $r7;
        com.google.common.truth.PrimitiveByteArraySubject $r8;
        int $i1;

        r0 := @parameter0: androidx.media3.datasource.DataSource;

        r1 := @parameter1: androidx.media3.datasource.DataSpec;

        r2 := @parameter2: byte[];

        z0 := @parameter3: boolean;

     label1:
        l0 = interfaceinvoke r0.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>(r1);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r6 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r5);

        if z0 == 0 goto label2;

        $i1 = lengthof r2;

        goto label3;

     label2:
        $i1 = -1;

     label3:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r6.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r7);

        r3 = staticinvoke <androidx.media3.datasource.DataSourceUtil: byte[] readToEnd(androidx.media3.datasource.DataSource)>(r0);

        $r8 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r3);

        virtualinvoke $r8.<com.google.common.truth.PrimitiveByteArraySubject: void isEqualTo(java.lang.Object)>(r2);

     label4:
        interfaceinvoke r0.<androidx.media3.datasource.DataSource: void close()>();

        goto label7;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

     label6:
        interfaceinvoke r0.<androidx.media3.datasource.DataSource: void close()>();

        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void assertBufferInfosEqual(android.media.MediaCodec$BufferInfo, android.media.MediaCodec$BufferInfo)
    {
        android.media.MediaCodec$BufferInfo r0, r1;
        int $i0, $i1, $i2, $i3, $i6, $i7;
        java.lang.Integer $r2, $r4, $r5, $r7, $r11, $r13;
        com.google.common.truth.IntegerSubject $r3, $r6, $r12;
        long $l4, $l5;
        java.lang.Long $r8, $r10;
        com.google.common.truth.LongSubject $r9;

        r0 := @parameter0: android.media.MediaCodec$BufferInfo;

        r1 := @parameter1: android.media.MediaCodec$BufferInfo;

        $i0 = r1.<android.media.MediaCodec$BufferInfo: int flags>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r2);

        $i1 = r0.<android.media.MediaCodec$BufferInfo: int flags>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r3.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r4);

        $i2 = r1.<android.media.MediaCodec$BufferInfo: int offset>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r5);

        $i3 = r0.<android.media.MediaCodec$BufferInfo: int offset>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r6.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r7);

        $l4 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r8);

        $l5 = r0.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        virtualinvoke $r9.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r10);

        $i6 = r1.<android.media.MediaCodec$BufferInfo: int size>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r12 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r11);

        $i7 = r0.<android.media.MediaCodec$BufferInfo: int size>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        virtualinvoke $r12.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r13);

        return;
    }

    public static void assertBitmapsAreSimilar(android.graphics.Bitmap, android.graphics.Bitmap, double)
    {
        android.graphics.Bitmap r0, r1;
        double d0, $d1;
        java.lang.Double $r2, $r4;
        com.google.common.truth.DoubleSubject $r3;
        java.lang.Comparable r5;

        r0 := @parameter0: android.graphics.Bitmap;

        r1 := @parameter1: android.graphics.Bitmap;

        d0 := @parameter2: double;

        $d1 = staticinvoke <androidx.media3.test.utils.TestUtil: double getPsnr(android.graphics.Bitmap,android.graphics.Bitmap)>(r0, r1);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.DoubleSubject assertThat(java.lang.Double)>($r2);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        r5 = (java.lang.Comparable) $r4;

        virtualinvoke $r3.<com.google.common.truth.DoubleSubject: void isAtLeast(java.lang.Comparable)>(r5);

        return;
    }

    private static double getPsnr(android.graphics.Bitmap, android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i29, i30;
        java.lang.Integer $r2, $r4, $r5, $r7;
        com.google.common.truth.IntegerSubject $r3, $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        long $l27, l28;

        r0 := @parameter0: android.graphics.Bitmap;

        r1 := @parameter1: android.graphics.Bitmap;

        $i8 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r2);

        $i9 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        virtualinvoke $r3.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r4);

        $i10 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r6 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r5);

        $i11 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        virtualinvoke $r6.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r7);

        l28 = 0L;

        i29 = 0;

     label1:
        $i12 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if i29 >= $i12 goto label4;

        i30 = 0;

     label2:
        $i15 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if i30 >= $i15 goto label3;

        i0 = virtualinvoke r0.<android.graphics.Bitmap: int getPixel(int,int)>(i29, i30);

        i1 = staticinvoke <android.graphics.Color: int red(int)>(i0);

        i2 = staticinvoke <android.graphics.Color: int green(int)>(i0);

        i3 = staticinvoke <android.graphics.Color: int blue(int)>(i0);

        i4 = virtualinvoke r1.<android.graphics.Bitmap: int getPixel(int,int)>(i29, i30);

        i5 = staticinvoke <android.graphics.Color: int red(int)>(i4);

        i6 = staticinvoke <android.graphics.Color: int green(int)>(i4);

        i7 = staticinvoke <android.graphics.Color: int blue(int)>(i4);

        $i17 = i1 - i5;

        $i16 = i1 - i5;

        $i21 = $i17 * $i16;

        $i19 = i2 - i6;

        $i18 = i2 - i6;

        $i20 = $i19 * $i18;

        $i25 = $i21 + $i20;

        $i23 = i3 - i7;

        $i22 = i3 - i7;

        $i24 = $i23 * $i22;

        $i26 = $i25 + $i24;

        $l27 = (long) $i26;

        l28 = l28 + $l27;

        i30 = i30 + 1;

        goto label2;

     label3:
        i29 = i29 + 1;

        goto label1;

     label4:
        $d0 = (double) l28;

        $i13 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $d1 = (double) $i13;

        $d2 = 195075.0 * $d1;

        $i14 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $d3 = (double) $i14;

        $d4 = $d2 * $d3;

        d8 = $d0 / $d4;

        $d5 = 1.0 / d8;

        $d6 = staticinvoke <java.lang.Math: double log10(double)>($d5);

        $d7 = 10.0 * $d6;

        return $d7;
    }

    public static android.net.Uri buildAssetUri(java.lang.String)
    {
        java.lang.String r0, $r4;
        java.lang.StringBuilder $r1, $r2, $r3;
        android.net.Uri $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("asset:///");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r4);

        return $r5;
    }

    public static androidx.media3.extractor.SeekMap extractSeekMap(androidx.media3.extractor.Extractor, androidx.media3.test.utils.FakeExtractorOutput, androidx.media3.datasource.DataSource, android.net.Uri) throws java.io.IOException
    {
        androidx.media3.extractor.Extractor r0;
        androidx.media3.test.utils.FakeExtractorOutput r1;
        androidx.media3.datasource.DataSource r2;
        android.net.Uri r3;
        androidx.media3.extractor.PositionHolder r4, r19;
        int i0, i2, i3, $i4;
        java.lang.Throwable r5, $r16, r21;
        androidx.media3.extractor.SeekMap $r7, $r8, $r15;
        long $l1;
        android.util.SparseArray $r10, $r11, $r18;
        java.lang.Object $r12;
        androidx.media3.test.utils.FakeTrackOutput $r13;
        androidx.media3.common.Format $r14;
        boolean $z0;
        androidx.media3.extractor.ExtractorInput r17;
        java.io.IOException r20;

        r0 := @parameter0: androidx.media3.extractor.Extractor;

        r1 := @parameter1: androidx.media3.test.utils.FakeExtractorOutput;

        r2 := @parameter2: androidx.media3.datasource.DataSource;

        r3 := @parameter3: android.net.Uri;

        r17 = staticinvoke <androidx.media3.test.utils.TestUtil: androidx.media3.extractor.ExtractorInput getExtractorInputFromPosition(androidx.media3.datasource.DataSource,long,android.net.Uri)>(r2, 0L, r3);

        interfaceinvoke r0.<androidx.media3.extractor.Extractor: void init(androidx.media3.extractor.ExtractorOutput)>(r1);

        r19 = new androidx.media3.extractor.PositionHolder;

        specialinvoke r19.<androidx.media3.extractor.PositionHolder: void <init>()>();

        r4 = r19;

        i2 = 0;

     label01:
        if i2 != 0 goto label03;

        $r15 = r1.<androidx.media3.test.utils.FakeExtractorOutput: androidx.media3.extractor.SeekMap seekMap>;

        if $r15 == null goto label02;

        $z0 = r1.<androidx.media3.test.utils.FakeExtractorOutput: boolean tracksEnded>;

        if $z0 != 0 goto label03;

     label02:
        i2 = interfaceinvoke r0.<androidx.media3.extractor.Extractor: int read(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.PositionHolder)>(r17, r4);

        goto label01;

     label03:
        i3 = 0;

     label04:
        $r18 = r1.<androidx.media3.test.utils.FakeExtractorOutput: android.util.SparseArray trackOutputs>;

        $i4 = virtualinvoke $r18.<android.util.SparseArray: int size()>();

        if i3 >= $i4 goto label07;

        $r10 = r1.<androidx.media3.test.utils.FakeExtractorOutput: android.util.SparseArray trackOutputs>;

        i0 = virtualinvoke $r10.<android.util.SparseArray: int keyAt(int)>(i3);

     label05:
        if i2 != 0 goto label06;

        $r11 = r1.<androidx.media3.test.utils.FakeExtractorOutput: android.util.SparseArray trackOutputs>;

        $r12 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r13 = (androidx.media3.test.utils.FakeTrackOutput) $r12;

        $r14 = $r13.<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.common.Format lastFormat>;

        if $r14 != null goto label06;

        i2 = interfaceinvoke r0.<androidx.media3.extractor.Extractor: int read(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.PositionHolder)>(r17, r4);

        goto label05;

     label06:
        i3 = i3 + 1;

        goto label04;

     label07:
        staticinvoke <androidx.media3.datasource.DataSourceUtil: void closeQuietly(androidx.media3.datasource.DataSource)>(r2);

        goto label10;

     label08:
        $r16 := @caughtexception;

        r5 = $r16;

     label09:
        staticinvoke <androidx.media3.datasource.DataSourceUtil: void closeQuietly(androidx.media3.datasource.DataSource)>(r2);

        throw r5;

     label10:
        if i2 != 1 goto label11;

        $l1 = r4.<androidx.media3.extractor.PositionHolder: long position>;

        r17 = staticinvoke <androidx.media3.test.utils.TestUtil: androidx.media3.extractor.ExtractorInput getExtractorInputFromPosition(androidx.media3.datasource.DataSource,long,android.net.Uri)>(r2, $l1, r3);

        i2 = 0;

        goto label12;

     label11:
        if i2 != -1 goto label12;

        r20 = new java.io.IOException;

        specialinvoke r20.<java.io.IOException: void <init>(java.lang.String)>("EOF encountered without seekmap");

        r21 = (java.lang.Throwable) r20;

        throw r21;

     label12:
        $r7 = r1.<androidx.media3.test.utils.FakeExtractorOutput: androidx.media3.extractor.SeekMap seekMap>;

        if $r7 == null goto label01;

        $r8 = r1.<androidx.media3.test.utils.FakeExtractorOutput: androidx.media3.extractor.SeekMap seekMap>;

        return $r8;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public static androidx.media3.test.utils.FakeExtractorOutput extractAllSamplesFromFile(androidx.media3.extractor.Extractor, android.content.Context, java.lang.String) throws java.io.IOException
    {
        androidx.media3.extractor.Extractor r0;
        android.content.Context r1;
        java.lang.String r2;
        byte[] r3;
        androidx.media3.test.utils.FakeExtractorOutput r4, $r7;
        androidx.media3.test.utils.FakeExtractorInput r5;
        androidx.media3.extractor.PositionHolder r6, $r10;
        androidx.media3.test.utils.FakeExtractorInput$Builder $r8, $r9;
        long $l0;
        int $i1, i2;

        r0 := @parameter0: androidx.media3.extractor.Extractor;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] getByteArray(android.content.Context,java.lang.String)>(r1, r2);

        $r7 = new androidx.media3.test.utils.FakeExtractorOutput;

        specialinvoke $r7.<androidx.media3.test.utils.FakeExtractorOutput: void <init>()>();

        r4 = $r7;

        interfaceinvoke r0.<androidx.media3.extractor.Extractor: void init(androidx.media3.extractor.ExtractorOutput)>(r4);

        $r8 = new androidx.media3.test.utils.FakeExtractorInput$Builder;

        specialinvoke $r8.<androidx.media3.test.utils.FakeExtractorInput$Builder: void <init>()>();

        $r9 = virtualinvoke $r8.<androidx.media3.test.utils.FakeExtractorInput$Builder: androidx.media3.test.utils.FakeExtractorInput$Builder setData(byte[])>(r3);

        r5 = virtualinvoke $r9.<androidx.media3.test.utils.FakeExtractorInput$Builder: androidx.media3.test.utils.FakeExtractorInput build()>();

        $r10 = new androidx.media3.extractor.PositionHolder;

        specialinvoke $r10.<androidx.media3.extractor.PositionHolder: void <init>()>();

        r6 = $r10;

        i2 = 0;

     label1:
        if i2 == -1 goto label4;

     label2:
        if i2 != 0 goto label3;

        i2 = interfaceinvoke r0.<androidx.media3.extractor.Extractor: int read(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.PositionHolder)>(r5, r6);

        goto label2;

     label3:
        if i2 != 1 goto label1;

        $l0 = r6.<androidx.media3.extractor.PositionHolder: long position>;

        $i1 = (int) $l0;

        virtualinvoke r5.<androidx.media3.test.utils.FakeExtractorInput: void setPosition(int)>($i1);

        i2 = 0;

        goto label1;

     label4:
        return r4;
    }

    public static int seekToTimeUs(androidx.media3.extractor.Extractor, androidx.media3.extractor.SeekMap, long, androidx.media3.datasource.DataSource, androidx.media3.test.utils.FakeTrackOutput, android.net.Uri) throws java.io.IOException
    {
        androidx.media3.extractor.Extractor r0;
        androidx.media3.extractor.SeekMap r1;
        long l0, l2, $l5;
        androidx.media3.datasource.DataSource r2;
        androidx.media3.test.utils.FakeTrackOutput r3;
        android.net.Uri r4;
        int i1, $i3, $i4, $i6, i7;
        androidx.media3.extractor.SeekMap$SeekPoints r5;
        androidx.media3.extractor.PositionHolder r6, $r9;
        java.lang.Throwable r7, $r10;
        androidx.media3.extractor.SeekPoint $r8;
        androidx.media3.extractor.ExtractorInput r11;

        r0 := @parameter0: androidx.media3.extractor.Extractor;

        r1 := @parameter1: androidx.media3.extractor.SeekMap;

        l0 := @parameter2: long;

        r2 := @parameter3: androidx.media3.datasource.DataSource;

        r3 := @parameter4: androidx.media3.test.utils.FakeTrackOutput;

        r4 := @parameter5: android.net.Uri;

        i1 = virtualinvoke r3.<androidx.media3.test.utils.FakeTrackOutput: int getSampleCount()>();

        r5 = interfaceinvoke r1.<androidx.media3.extractor.SeekMap: androidx.media3.extractor.SeekMap$SeekPoints getSeekPoints(long)>(l0);

        $r8 = r5.<androidx.media3.extractor.SeekMap$SeekPoints: androidx.media3.extractor.SeekPoint first>;

        l2 = $r8.<androidx.media3.extractor.SeekPoint: long position>;

        interfaceinvoke r0.<androidx.media3.extractor.Extractor: void seek(long,long)>(l2, l0);

        $r9 = new androidx.media3.extractor.PositionHolder;

        specialinvoke $r9.<androidx.media3.extractor.PositionHolder: void <init>()>();

        r6 = $r9;

        r6.<androidx.media3.extractor.PositionHolder: long position> = -1L;

        r11 = staticinvoke <androidx.media3.test.utils.TestUtil: androidx.media3.extractor.ExtractorInput getExtractorInputFromPosition(androidx.media3.datasource.DataSource,long,android.net.Uri)>(r2, l2, r4);

        i7 = 0;

     label1:
        if i7 != 0 goto label2;

        $i6 = virtualinvoke r3.<androidx.media3.test.utils.FakeTrackOutput: int getSampleCount()>();

        if $i6 != i1 goto label2;

        i7 = interfaceinvoke r0.<androidx.media3.extractor.Extractor: int read(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.PositionHolder)>(r11, r6);

        goto label1;

     label2:
        staticinvoke <androidx.media3.datasource.DataSourceUtil: void closeQuietly(androidx.media3.datasource.DataSource)>(r2);

        goto label5;

     label3:
        $r10 := @caughtexception;

        r7 = $r10;

     label4:
        staticinvoke <androidx.media3.datasource.DataSourceUtil: void closeQuietly(androidx.media3.datasource.DataSource)>(r2);

        throw r7;

     label5:
        if i7 != 1 goto label6;

        $l5 = r6.<androidx.media3.extractor.PositionHolder: long position>;

        r11 = staticinvoke <androidx.media3.test.utils.TestUtil: androidx.media3.extractor.ExtractorInput getExtractorInputFromPosition(androidx.media3.datasource.DataSource,long,android.net.Uri)>(r2, $l5, r4);

        i7 = 0;

        goto label1;

     label6:
        if i7 != -1 goto label7;

        $i4 = virtualinvoke r3.<androidx.media3.test.utils.FakeTrackOutput: int getSampleCount()>();

        if $i4 != i1 goto label7;

        return -1;

     label7:
        $i3 = virtualinvoke r3.<androidx.media3.test.utils.FakeTrackOutput: int getSampleCount()>();

        if $i3 <= i1 goto label1;

        return i1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static androidx.media3.extractor.ExtractorInput getExtractorInputFromPosition(androidx.media3.datasource.DataSource, long, android.net.Uri) throws java.io.IOException
    {
        androidx.media3.datasource.DataSource r0;
        long l0, l2;
        android.net.Uri r1;
        androidx.media3.datasource.DataSpec r2, r5;
        byte $b1;
        androidx.media3.extractor.DefaultExtractorInput r6;
        androidx.media3.extractor.ExtractorInput r7;

        r0 := @parameter0: androidx.media3.datasource.DataSource;

        l0 := @parameter1: long;

        r1 := @parameter2: android.net.Uri;

        r5 = new androidx.media3.datasource.DataSpec;

        specialinvoke r5.<androidx.media3.datasource.DataSpec: void <init>(android.net.Uri,long,long)>(r1, l0, -1L);

        r2 = r5;

        l2 = interfaceinvoke r0.<androidx.media3.datasource.DataSource: long open(androidx.media3.datasource.DataSpec)>(r2);

        $b1 = l2 cmp -1L;

        if $b1 == 0 goto label1;

        l2 = l2 + l0;

     label1:
        r6 = new androidx.media3.extractor.DefaultExtractorInput;

        specialinvoke r6.<androidx.media3.extractor.DefaultExtractorInput: void <init>(androidx.media3.common.DataReader,long,long)>(r0, l0, l2);

        r7 = (androidx.media3.extractor.ExtractorInput) r6;

        return r7;
    }

    public static androidx.media3.extractor.metadata.MetadataInputBuffer createMetadataInputBuffer(byte[])
    {
        byte[] r0;
        androidx.media3.extractor.metadata.MetadataInputBuffer r1, $r2;
        int $i0;
        java.nio.ByteBuffer $r3, $r4, $r5;

        r0 := @parameter0: byte[];

        $r2 = new androidx.media3.extractor.metadata.MetadataInputBuffer;

        specialinvoke $r2.<androidx.media3.extractor.metadata.MetadataInputBuffer: void <init>()>();

        r1 = $r2;

        $i0 = lengthof r0;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        $r4 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r0);

        r1.<androidx.media3.extractor.metadata.MetadataInputBuffer: java.nio.ByteBuffer data> = $r4;

        $r5 = r1.<androidx.media3.extractor.metadata.MetadataInputBuffer: java.nio.ByteBuffer data>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return r1;
    }

    public static java.util.List getPublicMethods(java.lang.Class)
    {
        java.lang.Class r0, r4, r13, r14;
        java.util.ArrayDeque r1, $r7;
        java.util.HashSet r2, $r8;
        java.lang.Object r3, $r9, $r11, $r12;
        java.lang.reflect.Method[] r5;
        int i0, $i1, i2;
        java.lang.reflect.Method r6;
        boolean $z1, $z2, $z3, $z5, $z7;
        java.util.ArrayList $r10, r16;
        java.lang.Class[] $r15;
        java.util.Iterator r17;

        r0 := @parameter0: java.lang.Class;

        $r7 = new java.util.ArrayDeque;

        specialinvoke $r7.<java.util.ArrayDeque: void <init>()>();

        r1 = $r7;

        interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r0);

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r2 = $r8;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r3 = $r9;

     label1:
        $z1 = interfaceinvoke r1.<java.util.Queue: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $r12 = interfaceinvoke r1.<java.util.Queue: java.lang.Object remove()>();

        r13 = (java.lang.Class) $r12;

        $z5 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r13);

        if $z5 == 0 goto label3;

        r14 = virtualinvoke r13.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r14 == null goto label2;

        $z7 = virtualinvoke r14.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3);

        if $z7 != 0 goto label2;

        interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r14);

     label2:
        $r15 = virtualinvoke r13.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r1, $r15);

     label3:
        goto label1;

     label4:
        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r16 = $r10;

        r17 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r11;

        r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof r5;

        i2 = 0;

     label6:
        if i2 >= i0 goto label8;

        r6 = r5[i2];

        $i1 = virtualinvoke r6.<java.lang.reflect.Method: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z3 == 0 goto label7;

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>(r6);

     label7:
        i2 = i2 + 1;

        goto label6;

     label8:
        goto label5;

     label9:
        return r16;
    }

androidx.media3.test.utils.TestUtil$1
    void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        androidx.media3.test.utils.TestUtil$1 r0;
        android.content.Context r1;
        java.lang.String r2;
        android.database.sqlite.SQLiteDatabase$CursorFactory r3;
        int i0;

        r0 := @this: androidx.media3.test.utils.TestUtil$1;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter3: int;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(r1, r2, r3, i0);

        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        androidx.media3.test.utils.TestUtil$1 r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: androidx.media3.test.utils.TestUtil$1;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        androidx.media3.test.utils.TestUtil$1 r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.TestUtil$1;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline
<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>
    public void <init>(androidx.media3.common.Timeline)
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        androidx.media3.common.Timeline r1;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        r1 := @parameter0: androidx.media3.common.Timeline;

        specialinvoke r0.<androidx.media3.common.Timeline: void <init>()>();

        r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate> = r1;

        return;
    }

    public int getWindowCount()
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        androidx.media3.common.Timeline $r1;
        int $i0;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        $r1 = r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>;

        $i0 = virtualinvoke $r1.<androidx.media3.common.Timeline: int getWindowCount()>();

        return $i0;
    }

    public int getNextWindowIndex(int, int, boolean)
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        int i0, i1, $i2;
        boolean z0;
        androidx.media3.common.Timeline $r1;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>;

        $i2 = virtualinvoke $r1.<androidx.media3.common.Timeline: int getNextWindowIndex(int,int,boolean)>(i0, i1, 0);

        return $i2;
    }

    public int getPreviousWindowIndex(int, int, boolean)
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        int i0, i1, $i2;
        boolean z0;
        androidx.media3.common.Timeline $r1;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>;

        $i2 = virtualinvoke $r1.<androidx.media3.common.Timeline: int getPreviousWindowIndex(int,int,boolean)>(i0, i1, 0);

        return $i2;
    }

    public int getLastWindowIndex(boolean)
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        boolean z0;
        androidx.media3.common.Timeline $r1;
        int $i0;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>;

        $i0 = virtualinvoke $r1.<androidx.media3.common.Timeline: int getLastWindowIndex(boolean)>(0);

        return $i0;
    }

    public int getFirstWindowIndex(boolean)
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        boolean z0;
        androidx.media3.common.Timeline $r1;
        int $i0;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>;

        $i0 = virtualinvoke $r1.<androidx.media3.common.Timeline: int getFirstWindowIndex(boolean)>(0);

        return $i0;
    }

    public androidx.media3.common.Timeline$Window getWindow(int, androidx.media3.common.Timeline$Window, long)
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        int i0;
        androidx.media3.common.Timeline$Window r1;
        long l1;
        androidx.media3.common.Timeline $r2;
        java.lang.Integer $r4;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.Timeline$Window;

        l1 := @parameter2: long;

        $r2 = r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>;

        virtualinvoke $r2.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Window getWindow(int,androidx.media3.common.Timeline$Window,long)>(i0, r1, l1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r1.<androidx.media3.common.Timeline$Window: java.lang.Object uid> = $r4;

        return r1;
    }

    public int getPeriodCount()
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        androidx.media3.common.Timeline $r1;
        int $i0;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        $r1 = r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>;

        $i0 = virtualinvoke $r1.<androidx.media3.common.Timeline: int getPeriodCount()>();

        return $i0;
    }

    public androidx.media3.common.Timeline$Period getPeriod(int, androidx.media3.common.Timeline$Period, boolean)
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        int i0;
        androidx.media3.common.Timeline$Period r1;
        boolean z0;
        androidx.media3.common.Timeline $r2;
        java.lang.Integer $r4;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.Timeline$Period;

        z0 := @parameter2: boolean;

        $r2 = r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>;

        virtualinvoke $r2.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Period getPeriod(int,androidx.media3.common.Timeline$Period,boolean)>(i0, r1, z0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r1.<androidx.media3.common.Timeline$Period: java.lang.Object uid> = $r4;

        return r1;
    }

    public int getIndexOfPeriod(java.lang.Object)
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        java.lang.Object r1;
        androidx.media3.common.Timeline $r2;
        int $i0;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline: androidx.media3.common.Timeline delegate>;

        $i0 = virtualinvoke $r2.<androidx.media3.common.Timeline: int getIndexOfPeriod(java.lang.Object)>(r1);

        return $i0;
    }

    public java.lang.Object getUidOfPeriod(int)
    {
        androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline r0;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: androidx.media3.test.utils.TestUtil$NoUidOrShufflingTimeline;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        return $r1;
    }

