androidx.camera.core.imagecapture.SingleBundlingNode
<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingRequest mPendingRequest>
<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingNode$In mOutputEdge>
    void <init>()
    {
        androidx.camera.core.imagecapture.SingleBundlingNode r0;

        r0 := @this: androidx.camera.core.imagecapture.SingleBundlingNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.camera.core.imagecapture.ProcessingNode$In transform(androidx.camera.core.imagecapture.CaptureNode$Out)
    {
        androidx.camera.core.imagecapture.SingleBundlingNode r0;
        androidx.camera.core.imagecapture.CaptureNode$Out r1;
        androidx.camera.core.processing.Edge $r2, $r4;
        androidx.core.util.Consumer $r3, $r5;
        int $i0;
        androidx.camera.core.imagecapture.ProcessingNode$In $r6, $r7;

        r0 := @this: androidx.camera.core.imagecapture.SingleBundlingNode;

        r1 := @parameter0: androidx.camera.core.imagecapture.CaptureNode$Out;

        $r2 = virtualinvoke r1.<androidx.camera.core.imagecapture.CaptureNode$Out: androidx.camera.core.processing.Edge getImageEdge()>();

        $r3 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.core.imagecapture.SingleBundlingNode)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.imagecapture.SingleBundlingNode: void matchImageWithRequest(androidx.camera.core.ImageProxy)>, methodtype: void __METHODTYPE__(androidx.camera.core.ImageProxy));

        virtualinvoke $r2.<androidx.camera.core.processing.Edge: void setListener(androidx.core.util.Consumer)>($r3);

        $r4 = virtualinvoke r1.<androidx.camera.core.imagecapture.CaptureNode$Out: androidx.camera.core.processing.Edge getRequestEdge()>();

        $r5 = dynamicinvoke "accept" <androidx.core.util.Consumer (androidx.camera.core.imagecapture.SingleBundlingNode)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.imagecapture.SingleBundlingNode: void trackIncomingRequest(androidx.camera.core.imagecapture.ProcessingRequest)>, methodtype: void __METHODTYPE__(androidx.camera.core.imagecapture.ProcessingRequest));

        virtualinvoke $r4.<androidx.camera.core.processing.Edge: void setListener(androidx.core.util.Consumer)>($r5);

        $i0 = virtualinvoke r1.<androidx.camera.core.imagecapture.CaptureNode$Out: int getFormat()>();

        $r6 = staticinvoke <androidx.camera.core.imagecapture.ProcessingNode$In: androidx.camera.core.imagecapture.ProcessingNode$In of(int)>($i0);

        r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingNode$In mOutputEdge> = $r6;

        $r7 = r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingNode$In mOutputEdge>;

        return $r7;
    }

    public void release()
    {
        androidx.camera.core.imagecapture.SingleBundlingNode r0;

        r0 := @this: androidx.camera.core.imagecapture.SingleBundlingNode;

        return;
    }

    private void trackIncomingRequest(androidx.camera.core.imagecapture.ProcessingRequest)
    {
        androidx.camera.core.imagecapture.SingleBundlingNode r0;
        androidx.camera.core.imagecapture.ProcessingRequest r1, $r3;
        java.util.List $r2;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.core.imagecapture.SingleBundlingNode;

        r1 := @parameter0: androidx.camera.core.imagecapture.ProcessingRequest;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = virtualinvoke r1.<androidx.camera.core.imagecapture.ProcessingRequest: java.util.List getStageIds()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Cannot handle multi-image capture.");

        $r3 = r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingRequest mPendingRequest>;

        if $r3 != null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Already has an existing request.");

        r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingRequest mPendingRequest> = r1;

        return;
    }

    private void matchImageWithRequest(androidx.camera.core.ImageProxy)
    {
        androidx.camera.core.imagecapture.SingleBundlingNode r0;
        androidx.camera.core.ImageProxy r1;
        int i0, $i1;
        androidx.camera.core.imagecapture.ProcessingRequest $r2, $r5, $r10, $r16;
        androidx.camera.core.ImageInfo $r3;
        androidx.camera.core.impl.TagBundle $r4;
        java.lang.String $r6;
        java.lang.Object $r7, $r8, $r12;
        java.lang.Integer $r9, $r13;
        java.util.List $r11;
        androidx.camera.core.imagecapture.ProcessingNode$In $r14;
        androidx.camera.core.processing.Edge $r15;
        androidx.camera.core.imagecapture.ProcessingNode$InputPacket $r17;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.core.imagecapture.SingleBundlingNode;

        r1 := @parameter0: androidx.camera.core.ImageProxy;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingRequest mPendingRequest>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z0);

        $r3 = interfaceinvoke r1.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageInfo getImageInfo()>();

        $r4 = interfaceinvoke $r3.<androidx.camera.core.ImageInfo: androidx.camera.core.impl.TagBundle getTagBundle()>();

        $r5 = r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingRequest mPendingRequest>;

        $r6 = virtualinvoke $r5.<androidx.camera.core.imagecapture.ProcessingRequest: java.lang.String getTagBundleKey()>();

        $r7 = virtualinvoke $r4.<androidx.camera.core.impl.TagBundle: java.lang.Object getTag(java.lang.String)>($r6);

        $r8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r7);

        $r9 = (java.lang.Integer) $r8;

        i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingRequest mPendingRequest>;

        $r11 = virtualinvoke $r10.<androidx.camera.core.imagecapture.ProcessingRequest: java.util.List getStageIds()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (java.lang.Integer) $r12;

        $i1 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        if i0 != $i1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z1);

        $r14 = r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingNode$In mOutputEdge>;

        $r15 = virtualinvoke $r14.<androidx.camera.core.imagecapture.ProcessingNode$In: androidx.camera.core.processing.Edge getEdge()>();

        $r16 = r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingRequest mPendingRequest>;

        $r17 = staticinvoke <androidx.camera.core.imagecapture.ProcessingNode$InputPacket: androidx.camera.core.imagecapture.ProcessingNode$InputPacket of(androidx.camera.core.imagecapture.ProcessingRequest,androidx.camera.core.ImageProxy)>($r16, r1);

        virtualinvoke $r15.<androidx.camera.core.processing.Edge: void accept(java.lang.Object)>($r17);

        r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingRequest mPendingRequest> = null;

        return;
    }

    public volatile java.lang.Object transform(java.lang.Object)
    {
        androidx.camera.core.imagecapture.SingleBundlingNode r0;
        java.lang.Object r1;
        androidx.camera.core.imagecapture.CaptureNode$Out $r2;
        androidx.camera.core.imagecapture.ProcessingNode$In $r3;

        r0 := @this: androidx.camera.core.imagecapture.SingleBundlingNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.camera.core.imagecapture.CaptureNode$Out) r1;

        $r3 = virtualinvoke r0.<androidx.camera.core.imagecapture.SingleBundlingNode: androidx.camera.core.imagecapture.ProcessingNode$In transform(androidx.camera.core.imagecapture.CaptureNode$Out)>($r2);

        return $r3;
    }

