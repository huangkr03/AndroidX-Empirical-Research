androidx.test.runner.AndroidJUnitRunner
<androidx.test.runner.AndroidJUnitRunner: java.lang.String LOG_TAG>
<androidx.test.runner.AndroidJUnitRunner: android.os.Bundle arguments>
<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.listener.InstrumentationResultPrinter instrumentationResultPrinter>
<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>
<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.events.client.TestEventClient testEventClient>
<androidx.test.runner.AndroidJUnitRunner: java.util.Set appExceptionsHandled>
    private android.os.Bundle getArguments()
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        android.os.Bundle $r1;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        $r1 = r0.<androidx.test.runner.AndroidJUnitRunner: android.os.Bundle arguments>;

        return $r1;
    }

    androidx.test.internal.runner.TestRequestBuilder createTestRequestBuilder(android.app.Instrumentation, android.os.Bundle)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        android.app.Instrumentation r1;
        android.os.Bundle r2;
        androidx.test.internal.runner.TestRequestBuilder $r3;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: android.os.Bundle;

        $r3 = new androidx.test.internal.runner.TestRequestBuilder;

        specialinvoke $r3.<androidx.test.internal.runner.TestRequestBuilder: void <init>(android.app.Instrumentation,android.os.Bundle)>(r1, r2);

        return $r3;
    }

    androidx.test.internal.runner.listener.InstrumentationResultPrinter getInstrumentationResultPrinter()
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.listener.InstrumentationResultPrinter $r1;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        $r1 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.listener.InstrumentationResultPrinter instrumentationResultPrinter>;

        return $r1;
    }

    org.junit.runner.Request buildRequest(androidx.test.internal.runner.RunnerArgs, android.os.Bundle)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        android.os.Bundle r2;
        androidx.test.internal.runner.TestRequestBuilder r3;
        java.util.Set $r4, $r6;
        boolean $z0;
        org.junit.runner.Request $r8;
        java.util.Collection $r9;
        android.app.Instrumentation r11, r12;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        r2 := @parameter1: android.os.Bundle;

        r11 = (android.app.Instrumentation) r0;

        r3 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.TestRequestBuilder createTestRequestBuilder(android.app.Instrumentation,android.os.Bundle)>(r11, r2);

        $r4 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.Set classpathToScan>;

        virtualinvoke r3.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addPathsToScan(java.lang.Iterable)>($r4);

        $r6 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.Set classpathToScan>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r12 = (android.app.Instrumentation) r0;

        $r9 = staticinvoke <androidx.test.internal.runner.ClassPathScanner: java.util.Collection getDefaultClasspaths(android.app.Instrumentation)>(r12);

        virtualinvoke r3.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addPathsToScan(java.lang.Iterable)>($r9);

     label1:
        virtualinvoke r3.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addFromRunnerArgs(androidx.test.internal.runner.RunnerArgs)>(r1);

        $r8 = virtualinvoke r3.<androidx.test.internal.runner.TestRequestBuilder: org.junit.runner.Request build()>();

        return $r8;
    }

    public void <init>()
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.listener.InstrumentationResultPrinter $r1;
        androidx.test.internal.events.client.TestEventClient $r2;
        java.util.WeakHashMap $r3;
        java.util.Set $r4;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void <init>()>();

        $r1 = new androidx.test.internal.runner.listener.InstrumentationResultPrinter;

        specialinvoke $r1.<androidx.test.internal.runner.listener.InstrumentationResultPrinter: void <init>()>();

        r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.listener.InstrumentationResultPrinter instrumentationResultPrinter> = $r1;

        $r2 = <androidx.test.internal.events.client.TestEventClient: androidx.test.internal.events.client.TestEventClient NO_OP_CLIENT>;

        r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.events.client.TestEventClient testEventClient> = $r2;

        $r3 = new java.util.WeakHashMap;

        specialinvoke $r3.<java.util.WeakHashMap: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r3);

        r0.<androidx.test.runner.AndroidJUnitRunner: java.util.Set appExceptionsHandled> = $r4;

        return;
    }

    private void addCoverageListener(androidx.test.internal.runner.RunnerArgs, androidx.test.internal.runner.TestExecutor$Builder)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        androidx.test.internal.runner.TestExecutor$Builder r2;
        boolean $z0;
        androidx.test.internal.runner.listener.CoverageListener $r3;
        java.lang.String $r4;
        androidx.test.platform.io.PlatformTestStorage $r5;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        r2 := @parameter1: androidx.test.internal.runner.TestExecutor$Builder;

        $z0 = r1.<androidx.test.internal.runner.RunnerArgs: boolean codeCoverage>;

        if $z0 == 0 goto label1;

        $r3 = new androidx.test.internal.runner.listener.CoverageListener;

        $r4 = r1.<androidx.test.internal.runner.RunnerArgs: java.lang.String codeCoveragePath>;

        $r5 = staticinvoke <androidx.test.platform.io.PlatformTestStorageRegistry: androidx.test.platform.io.PlatformTestStorage getInstance()>();

        specialinvoke $r3.<androidx.test.internal.runner.listener.CoverageListener: void <init>(java.lang.String,androidx.test.platform.io.PlatformTestStorage)>($r4, $r5);

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>($r3);

     label1:
        return;
    }

    private void addDelayListener(androidx.test.internal.runner.RunnerArgs, androidx.test.internal.runner.TestExecutor$Builder)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        androidx.test.internal.runner.TestExecutor$Builder r2;
        int $i0, $i1, $i2;
        boolean $z0;
        androidx.test.internal.runner.listener.DelayInjector $r3, $r5;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        r2 := @parameter1: androidx.test.internal.runner.TestExecutor$Builder;

        $i0 = r1.<androidx.test.internal.runner.RunnerArgs: int delayInMillis>;

        if $i0 <= 0 goto label1;

        $r5 = new androidx.test.internal.runner.listener.DelayInjector;

        $i2 = r1.<androidx.test.internal.runner.RunnerArgs: int delayInMillis>;

        specialinvoke $r5.<androidx.test.internal.runner.listener.DelayInjector: void <init>(int)>($i2);

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>($r5);

        goto label2;

     label1:
        $z0 = r1.<androidx.test.internal.runner.RunnerArgs: boolean logOnly>;

        if $z0 == 0 goto label2;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 >= 16 goto label2;

        $r3 = new androidx.test.internal.runner.listener.DelayInjector;

        specialinvoke $r3.<androidx.test.internal.runner.listener.DelayInjector: void <init>(int)>(15);

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>($r3);

     label2:
        return;
    }

    final void addListeners(androidx.test.internal.runner.RunnerArgs, androidx.test.internal.runner.TestExecutor$Builder)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        androidx.test.internal.runner.TestExecutor$Builder r2;
        boolean $z0;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        r2 := @parameter1: androidx.test.internal.runner.TestExecutor$Builder;

        $z0 = r1.<androidx.test.internal.runner.RunnerArgs: boolean newRunListenerMode>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addListenersNewOrder(androidx.test.internal.runner.RunnerArgs,androidx.test.internal.runner.TestExecutor$Builder)>(r1, r2);

        goto label2;

     label1:
        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addListenersLegacyOrder(androidx.test.internal.runner.RunnerArgs,androidx.test.internal.runner.TestExecutor$Builder)>(r1, r2);

     label2:
        return;
    }

    private void addListenersFromArg(androidx.test.internal.runner.RunnerArgs, androidx.test.internal.runner.TestExecutor$Builder)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        androidx.test.internal.runner.TestExecutor$Builder r2;
        java.util.Iterator r3;
        org.junit.runner.notification.RunListener r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        r2 := @parameter1: androidx.test.internal.runner.TestExecutor$Builder;

        $r5 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List listeners>;

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.junit.runner.notification.RunListener) $r6;

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r4);

        goto label1;

     label2:
        return;
    }

    private static void addListenersFromClasspath(androidx.test.internal.runner.TestExecutor$Builder)
    {
        androidx.test.internal.runner.TestExecutor$Builder r0;
        java.util.Iterator r1;
        org.junit.runner.notification.RunListener r2;
        java.util.ServiceLoader $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @parameter0: androidx.test.internal.runner.TestExecutor$Builder;

        $r3 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lorg/junit/runner/notification/RunListener;");

        r1 = virtualinvoke $r3.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.junit.runner.notification.RunListener) $r4;

        virtualinvoke r0.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r2);

        goto label1;

     label2:
        return;
    }

    private void addListenersLegacyOrder(androidx.test.internal.runner.RunnerArgs, androidx.test.internal.runner.TestExecutor$Builder)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        androidx.test.internal.runner.TestExecutor$Builder r2;
        org.junit.runner.notification.RunListener r3;
        boolean $z0, $z1, $z2;
        androidx.test.internal.events.client.TestEventClient $r6;
        androidx.test.internal.runner.listener.InstrumentationResultPrinter $r7, $r18;
        androidx.test.internal.runner.listener.SuiteAssignmentPrinter r20;
        androidx.test.internal.runner.listener.LogRunListener r21;
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher r22;
        androidx.test.runner.AndroidJUnitRunner$1 r23;
        androidx.test.internal.runner.listener.ActivityFinisherRunListener r24;
        androidx.test.internal.runner.listener.TraceRunListener r25;
        android.app.Instrumentation r26;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        r2 := @parameter1: androidx.test.internal.runner.TestExecutor$Builder;

        $z0 = r1.<androidx.test.internal.runner.RunnerArgs: boolean logOnly>;

        if $z0 == 0 goto label1;

        $r18 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.listener.InstrumentationResultPrinter getInstrumentationResultPrinter()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>($r18);

        goto label6;

     label1:
        $z1 = r1.<androidx.test.internal.runner.RunnerArgs: boolean suiteAssignment>;

        if $z1 == 0 goto label2;

        r20 = new androidx.test.internal.runner.listener.SuiteAssignmentPrinter;

        specialinvoke r20.<androidx.test.internal.runner.listener.SuiteAssignmentPrinter: void <init>()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r20);

        goto label6;

     label2:
        r21 = new androidx.test.internal.runner.listener.LogRunListener;

        specialinvoke r21.<androidx.test.internal.runner.listener.LogRunListener: void <init>()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r21);

        $r6 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.events.client.TestEventClient testEventClient>;

        r3 = virtualinvoke $r6.<androidx.test.internal.events.client.TestEventClient: org.junit.runner.notification.RunListener getRunListener()>();

        if r3 == null goto label3;

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r3);

        goto label4;

     label3:
        $r7 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.listener.InstrumentationResultPrinter getInstrumentationResultPrinter()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>($r7);

     label4:
        $z2 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: boolean shouldWaitForActivitiesToComplete()>();

        if $z2 == 0 goto label5;

        r24 = new androidx.test.internal.runner.listener.ActivityFinisherRunListener;

        r22 = new androidx.test.runner.MonitoringInstrumentation$ActivityFinisher;

        specialinvoke r22.<androidx.test.runner.MonitoringInstrumentation$ActivityFinisher: void <init>(androidx.test.runner.MonitoringInstrumentation)>(r0);

        r23 = new androidx.test.runner.AndroidJUnitRunner$1;

        specialinvoke r23.<androidx.test.runner.AndroidJUnitRunner$1: void <init>(androidx.test.runner.AndroidJUnitRunner)>(r0);

        r26 = (android.app.Instrumentation) r0;

        specialinvoke r24.<androidx.test.internal.runner.listener.ActivityFinisherRunListener: void <init>(android.app.Instrumentation,androidx.test.runner.MonitoringInstrumentation$ActivityFinisher,java.lang.Runnable)>(r26, r22, r23);

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r24);

     label5:
        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addDelayListener(androidx.test.internal.runner.RunnerArgs,androidx.test.internal.runner.TestExecutor$Builder)>(r1, r2);

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addCoverageListener(androidx.test.internal.runner.RunnerArgs,androidx.test.internal.runner.TestExecutor$Builder)>(r1, r2);

        r25 = new androidx.test.internal.runner.listener.TraceRunListener;

        specialinvoke r25.<androidx.test.internal.runner.listener.TraceRunListener: void <init>()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r25);

     label6:
        staticinvoke <androidx.test.runner.AndroidJUnitRunner: void addListenersFromClasspath(androidx.test.internal.runner.TestExecutor$Builder)>(r2);

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addListenersFromArg(androidx.test.internal.runner.RunnerArgs,androidx.test.internal.runner.TestExecutor$Builder)>(r1, r2);

        return;
    }

    private void addListenersNewOrder(androidx.test.internal.runner.RunnerArgs, androidx.test.internal.runner.TestExecutor$Builder)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        androidx.test.internal.runner.TestExecutor$Builder r2;
        org.junit.runner.notification.RunListener r3;
        boolean $z0, $z1, $z2;
        androidx.test.internal.events.client.TestEventClient $r6;
        androidx.test.internal.runner.listener.InstrumentationResultPrinter $r7, $r18;
        androidx.test.internal.runner.listener.SuiteAssignmentPrinter r20;
        androidx.test.internal.runner.listener.LogRunListener r21;
        androidx.test.runner.MonitoringInstrumentation$ActivityFinisher r22;
        androidx.test.runner.AndroidJUnitRunner$2 r23;
        androidx.test.internal.runner.listener.ActivityFinisherRunListener r24;
        androidx.test.internal.runner.listener.TraceRunListener r25;
        android.app.Instrumentation r26;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        r2 := @parameter1: androidx.test.internal.runner.TestExecutor$Builder;

        staticinvoke <androidx.test.runner.AndroidJUnitRunner: void addListenersFromClasspath(androidx.test.internal.runner.TestExecutor$Builder)>(r2);

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addListenersFromArg(androidx.test.internal.runner.RunnerArgs,androidx.test.internal.runner.TestExecutor$Builder)>(r1, r2);

        $z0 = r1.<androidx.test.internal.runner.RunnerArgs: boolean logOnly>;

        if $z0 == 0 goto label1;

        $r18 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.listener.InstrumentationResultPrinter getInstrumentationResultPrinter()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>($r18);

        goto label6;

     label1:
        $z1 = r1.<androidx.test.internal.runner.RunnerArgs: boolean suiteAssignment>;

        if $z1 == 0 goto label2;

        r20 = new androidx.test.internal.runner.listener.SuiteAssignmentPrinter;

        specialinvoke r20.<androidx.test.internal.runner.listener.SuiteAssignmentPrinter: void <init>()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r20);

        goto label6;

     label2:
        r21 = new androidx.test.internal.runner.listener.LogRunListener;

        specialinvoke r21.<androidx.test.internal.runner.listener.LogRunListener: void <init>()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r21);

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addDelayListener(androidx.test.internal.runner.RunnerArgs,androidx.test.internal.runner.TestExecutor$Builder)>(r1, r2);

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addCoverageListener(androidx.test.internal.runner.RunnerArgs,androidx.test.internal.runner.TestExecutor$Builder)>(r1, r2);

        $r6 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.events.client.TestEventClient testEventClient>;

        r3 = virtualinvoke $r6.<androidx.test.internal.events.client.TestEventClient: org.junit.runner.notification.RunListener getRunListener()>();

        if r3 == null goto label3;

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r3);

        goto label4;

     label3:
        $r7 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.listener.InstrumentationResultPrinter getInstrumentationResultPrinter()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>($r7);

     label4:
        $z2 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: boolean shouldWaitForActivitiesToComplete()>();

        if $z2 == 0 goto label5;

        r24 = new androidx.test.internal.runner.listener.ActivityFinisherRunListener;

        r22 = new androidx.test.runner.MonitoringInstrumentation$ActivityFinisher;

        specialinvoke r22.<androidx.test.runner.MonitoringInstrumentation$ActivityFinisher: void <init>(androidx.test.runner.MonitoringInstrumentation)>(r0);

        r23 = new androidx.test.runner.AndroidJUnitRunner$2;

        specialinvoke r23.<androidx.test.runner.AndroidJUnitRunner$2: void <init>(androidx.test.runner.AndroidJUnitRunner)>(r0);

        r26 = (android.app.Instrumentation) r0;

        specialinvoke r24.<androidx.test.internal.runner.listener.ActivityFinisherRunListener: void <init>(android.app.Instrumentation,androidx.test.runner.MonitoringInstrumentation$ActivityFinisher,java.lang.Runnable)>(r26, r22, r23);

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r24);

     label5:
        r25 = new androidx.test.internal.runner.listener.TraceRunListener;

        specialinvoke r25.<androidx.test.internal.runner.listener.TraceRunListener: void <init>()>();

        virtualinvoke r2.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor$Builder addRunListener(org.junit.runner.notification.RunListener)>(r25);

     label6:
        return;
    }

    private void addScreenCaptureProcessors(androidx.test.internal.runner.RunnerArgs)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        java.util.HashSet $r2;
        java.util.List $r3;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        $r2 = new java.util.HashSet;

        $r3 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List screenCaptureProcessors>;

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        staticinvoke <androidx.test.runner.screenshot.Screenshot: void addScreenCaptureProcessors(java.util.Set)>($r2);

        return;
    }

    public void onCreate(android.os.Bundle)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        android.os.Bundle r1, $r6;
        java.util.Iterator r2;
        androidx.test.runner.lifecycle.ApplicationLifecycleCallback r3;
        java.lang.Throwable r4, $r17;
        java.lang.String r5, $r10;
        java.lang.StringBuilder $r7, $r8, $r9;
        androidx.test.internal.runner.RunnerArgs $r11, $r12, $r14;
        boolean $z0, $z1, $z2;
        java.util.List $r13;
        java.lang.Object $r15;
        androidx.test.runner.lifecycle.ApplicationLifecycleMonitor $r16;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: android.os.Bundle;

        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>("AndroidJUnitRunner#onCreate");

     label1:
        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void onCreate(android.os.Bundle)>(r1);

        r0.<androidx.test.runner.AndroidJUnitRunner: android.os.Bundle arguments> = r1;

        $r6 = r0.<androidx.test.runner.AndroidJUnitRunner: android.os.Bundle arguments>;

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void parseRunnerArgs(android.os.Bundle)>($r6);

        r5 = virtualinvoke r1.<android.os.Bundle: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onCreate ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidJUnitRunner", $r10);

        $r11 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $z0 = specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: boolean waitForDebugger(androidx.test.internal.runner.RunnerArgs)>($r11);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidJUnitRunner", "Waiting for debugger to connect...");

        staticinvoke <android.os.Debug: void waitForDebugger()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidJUnitRunner", "Debugger connected.");

     label2:
        $r12 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r13 = $r12.<androidx.test.internal.runner.RunnerArgs: java.util.List appListeners>;

        r2 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.test.runner.lifecycle.ApplicationLifecycleCallback) $r15;

        $r16 = staticinvoke <androidx.test.runner.lifecycle.ApplicationLifecycleMonitorRegistry: androidx.test.runner.lifecycle.ApplicationLifecycleMonitor getInstance()>();

        interfaceinvoke $r16.<androidx.test.runner.lifecycle.ApplicationLifecycleMonitor: void addLifecycleCallback(androidx.test.runner.lifecycle.ApplicationLifecycleCallback)>(r3);

        goto label3;

     label4:
        $r14 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addScreenCaptureProcessors(androidx.test.internal.runner.RunnerArgs)>($r14);

        $z1 = specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: boolean shouldWaitForOrchestratorService()>();

        if $z1 == 0 goto label5;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AndroidJUnitRunner", "Waiting to connect to the Orchestrator service...");

        goto label6;

     label5:
        virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void start()>();

     label6:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label9;

     label7:
        $r17 := @caughtexception;

        r4 = $r17;

     label8:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void onOrchestratorConnect()
    {
        androidx.test.runner.AndroidJUnitRunner r0;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void onTestEventClientConnect()>();

        return;
    }

    public void onStart()
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        org.junit.runner.Request r1;
        java.lang.String r2, $r19, $r20, $r27, $r30, $r31, $r37;
        java.lang.Throwable r3, $r23, $r32, $r33, r35, r39;
        androidx.test.internal.runner.RunnerArgs $r5, $r7, $r9, $r11, $r14, $r16, $r25, $r28, $r36;
        android.os.Bundle $r6, r34, r40;
        androidx.test.internal.runner.RunnerArgs$TestArg $r8, $r15, $r17, $r26, $r29;
        androidx.test.internal.runner.TestExecutor $r12;
        java.lang.Class[] $r18;
        java.lang.Object[] $r21, $r24;
        boolean $z1;
        androidx.test.internal.runner.TestExecutor$Builder r38, r42;
        androidx.test.internal.platform.reflect.ReflectiveMethod r41;
        android.app.Instrumentation r43;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AndroidJUnitRunner", "onStart is called.");

        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>("AndroidJUnitRunner#onStart");

        r40 = new android.os.Bundle;

        specialinvoke r40.<android.os.Bundle: void <init>()>();

        r34 = r40;

     label01:
        virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void setJsBridgeClassName(java.lang.String)>("androidx.test.espresso.web.bridge.JavaScriptBridge");

        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void onStart()>();

        $r5 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r6 = specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: android.os.Bundle getArguments()>();

        r1 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: org.junit.runner.Request buildRequest(androidx.test.internal.runner.RunnerArgs,android.os.Bundle)>($r5, $r6);

        $r7 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r8 = $r7.<androidx.test.internal.runner.RunnerArgs: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod>;

        if $r8 == null goto label05;

     label02:
        r41 = new androidx.test.internal.platform.reflect.ReflectiveMethod;

        $r14 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r15 = $r14.<androidx.test.internal.runner.RunnerArgs: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod>;

        $r20 = $r15.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

        $r16 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r17 = $r16.<androidx.test.internal.runner.RunnerArgs: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod>;

        $r19 = $r17.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>;

        $r18 = newarray (java.lang.Class)[0];

        specialinvoke r41.<androidx.test.internal.platform.reflect.ReflectiveMethod: void <init>(java.lang.String,java.lang.String,java.lang.Class[])>($r20, $r19, $r18);

        $r21 = newarray (java.lang.Object)[0];

        virtualinvoke r41.<androidx.test.internal.platform.reflect.ReflectiveMethod: java.lang.Object invokeStatic(java.lang.Object[])>($r21);

     label03:
        goto label05;

     label04:
        $r23 := @caughtexception;

        r35 = $r23;

        $r24 = newarray (java.lang.Object)[2];

        $r25 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r26 = $r25.<androidx.test.internal.runner.RunnerArgs: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod>;

        $r27 = $r26.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

        $r24[0] = $r27;

        $r28 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r29 = $r28.<androidx.test.internal.runner.RunnerArgs: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod>;

        $r30 = $r29.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>;

        $r24[1] = $r30;

        $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Reflective call to remote method %s#%s failed", $r24);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidJUnitRunner", $r31, r35);

     label05:
        $r36 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r37 = $r36.<androidx.test.internal.runner.RunnerArgs: java.lang.String targetProcess>;

        $z1 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: boolean isPrimaryInstrProcess(java.lang.String)>($r37);

        if $z1 != 0 goto label07;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidJUnitRunner", "Runner is idle...");

     label06:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        return;

     label07:
        $r9 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        specialinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void registerTestStorage(androidx.test.internal.runner.RunnerArgs)>($r9);

     label08:
        r42 = new androidx.test.internal.runner.TestExecutor$Builder;

        r43 = (android.app.Instrumentation) r0;

        specialinvoke r42.<androidx.test.internal.runner.TestExecutor$Builder: void <init>(android.app.Instrumentation)>(r43);

        r38 = r42;

        $r11 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void addListeners(androidx.test.internal.runner.RunnerArgs,androidx.test.internal.runner.TestExecutor$Builder)>($r11, r38);

        $r12 = virtualinvoke r38.<androidx.test.internal.runner.TestExecutor$Builder: androidx.test.internal.runner.TestExecutor build()>();

        r34 = virtualinvoke $r12.<androidx.test.internal.runner.TestExecutor: android.os.Bundle execute(org.junit.runner.Request)>(r1);

     label09:
        goto label11;

     label10:
        $r33 := @caughtexception;

        r39 = $r33;

        r2 = "Fatal exception when running tests";

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidJUnitRunner", "Fatal exception when running tests", r39);

        virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: boolean onException(java.lang.Object,java.lang.Throwable)>(r0, r39);

     label11:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label14;

     label12:
        $r32 := @caughtexception;

        r3 = $r32;

     label13:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw r3;

     label14:
        virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void finish(int,android.os.Bundle)>(-1, r34);

        return;

        catch androidx.test.internal.platform.reflect.ReflectionException from label02 to label03 with label04;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label06 with label12;
        catch java.lang.Throwable from label07 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void onTestEventClientConnect()
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.events.client.TestEventClient $r1;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        $r1 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.events.client.TestEventClient testEventClient>;

        virtualinvoke $r1.<androidx.test.internal.events.client.TestEventClient: void setConnectedToOrchestrator(boolean)>(1);

        virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: void start()>();

        return;
    }

    private void parseRunnerArgs(android.os.Bundle)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        android.os.Bundle r1;
        androidx.test.internal.runner.RunnerArgs$Builder $r3, $r4, r6;
        androidx.test.internal.runner.RunnerArgs $r5;
        android.app.Instrumentation r7, r8;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: android.os.Bundle;

        r6 = new androidx.test.internal.runner.RunnerArgs$Builder;

        specialinvoke r6.<androidx.test.internal.runner.RunnerArgs$Builder: void <init>()>();

        r7 = (android.app.Instrumentation) r0;

        $r3 = virtualinvoke r6.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$Builder fromManifest(android.app.Instrumentation)>(r7);

        r8 = (android.app.Instrumentation) r0;

        $r4 = virtualinvoke $r3.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$Builder fromBundle(android.app.Instrumentation,android.os.Bundle)>(r8, r1);

        $r5 = virtualinvoke $r4.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs build()>();

        r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs> = $r5;

        return;
    }

    private void registerTestStorage(androidx.test.internal.runner.RunnerArgs)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        boolean $z0;
        androidx.test.platform.io.FileTestStorage $r2;
        androidx.test.services.storage.TestStorage $r3;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        $z0 = r1.<androidx.test.internal.runner.RunnerArgs: boolean useTestStorageService>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AndroidJUnitRunner", "Use the test storage service for managing file I/O.");

        $r3 = new androidx.test.services.storage.TestStorage;

        specialinvoke $r3.<androidx.test.services.storage.TestStorage: void <init>()>();

        staticinvoke <androidx.test.platform.io.PlatformTestStorageRegistry: void registerInstance(androidx.test.platform.io.PlatformTestStorage)>($r3);

        goto label2;

     label1:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AndroidJUnitRunner", "Use the raw file system for managing file I/O.");

        $r2 = new androidx.test.platform.io.FileTestStorage;

        specialinvoke $r2.<androidx.test.platform.io.FileTestStorage: void <init>()>();

        staticinvoke <androidx.test.platform.io.PlatformTestStorageRegistry: void registerInstance(androidx.test.platform.io.PlatformTestStorage)>($r2);

     label2:
        return;
    }

    public void sendStatus(int, android.os.Bundle)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        int i0;
        android.os.Bundle r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>("sendStatus");

     label1:
        specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: void sendStatus(int,android.os.Bundle)>(i0, r1);

     label2:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean onException(java.lang.Object, java.lang.Throwable)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        java.lang.Object r1;
        java.lang.Throwable r2, r3, r6, $r16;
        androidx.test.internal.runner.listener.InstrumentationResultPrinter r4;
        android.os.StrictMode$ThreadPolicy r5;
        java.util.Set $r7, $r8;
        boolean $z0, $z2;
        androidx.test.internal.events.client.TestEventClient $r9, $r10;
        android.app.Instrumentation $r11, r17;
        java.lang.Object[] $r12;
        java.lang.Class $r13;
        java.lang.String $r14, $r15;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        r3 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: java.lang.Throwable unwrapException(java.lang.Throwable)>(r2);

        $r7 = r0.<androidx.test.runner.AndroidJUnitRunner: java.util.Set appExceptionsHandled>;

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        $r12 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("We\'ve already handled this exception %s. Ignoring.", $r12);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AndroidJUnitRunner", $r15);

        return 0;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidJUnitRunner", "An unhandled exception was thrown by the app.", r2);

        $r8 = r0.<androidx.test.runner.AndroidJUnitRunner: java.util.Set appExceptionsHandled>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r3);

        r4 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.listener.InstrumentationResultPrinter getInstrumentationResultPrinter()>();

        if r4 == null goto label7;

        $r11 = virtualinvoke r4.<androidx.test.internal.runner.listener.InstrumentationResultPrinter: android.app.Instrumentation getInstrumentation()>();

        if $r11 != null goto label2;

        r17 = (android.app.Instrumentation) r0;

        virtualinvoke r4.<androidx.test.internal.runner.listener.InstrumentationResultPrinter: void setInstrumentation(android.app.Instrumentation)>(r17);

     label2:
        r5 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>();

     label3:
        virtualinvoke r4.<androidx.test.internal.runner.listener.InstrumentationResultPrinter: void reportProcessCrash(java.lang.Throwable)>(r2);

     label4:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r5);

        goto label7;

     label5:
        $r16 := @caughtexception;

        r6 = $r16;

     label6:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r5);

        throw r6;

     label7:
        $r9 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.events.client.TestEventClient testEventClient>;

        if $r9 == null goto label8;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AndroidJUnitRunner", "Reporting the crash to an event service.");

        $r10 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.events.client.TestEventClient testEventClient>;

        virtualinvoke $r10.<androidx.test.internal.events.client.TestEventClient: boolean reportProcessCrash(java.lang.Throwable)>(r2);

     label8:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidJUnitRunner", "Bringing down the entire Instrumentation process.");

        $z2 = specialinvoke r0.<androidx.test.runner.MonitoringInstrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>(r1, r2);

        return $z2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean shouldWaitForOrchestratorService()
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.events.client.TestEventClientArgs r1;
        androidx.test.internal.events.client.TestEventClientArgs$Builder $r2, $r4, $r7, $r10, $r12, $r14, $r17, $r20, $r22;
        androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0 $r3;
        androidx.test.internal.runner.RunnerArgs $r5, $r8, $r11, $r13, $r15, $r18, $r21;
        java.lang.String $r6, $r9, $r16, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.content.Context $r23;
        androidx.test.internal.events.client.TestEventClient $r24, $r25;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        $r2 = staticinvoke <androidx.test.internal.events.client.TestEventClientArgs: androidx.test.internal.events.client.TestEventClientArgs$Builder builder()>();

        $r3 = <androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0: androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0 INSTANCE>;

        $r4 = virtualinvoke $r2.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$Builder setConnectionFactory(androidx.test.internal.events.client.TestEventClientArgs$ConnectionFactory)>($r3);

        $r5 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r6 = $r5.<androidx.test.internal.runner.RunnerArgs: java.lang.String orchestratorService>;

        $r7 = virtualinvoke $r4.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$Builder setOrchestratorService(java.lang.String)>($r6);

        $r8 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r9 = $r8.<androidx.test.internal.runner.RunnerArgs: java.lang.String targetProcess>;

        $z0 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: boolean isPrimaryInstrProcess(java.lang.String)>($r9);

        $r10 = virtualinvoke $r7.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$Builder setPrimaryInstProcess(boolean)>($z0);

        $r11 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $z1 = $r11.<androidx.test.internal.runner.RunnerArgs: boolean listTestsForOrchestrator>;

        $r12 = virtualinvoke $r10.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$Builder setTestDiscoveryRequested(boolean)>($z1);

        $r13 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $z2 = $r13.<androidx.test.internal.runner.RunnerArgs: boolean listTestsForOrchestrator>;

        if $z2 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        $r14 = virtualinvoke $r12.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$Builder setTestRunEventsRequested(boolean)>($z5);

        $r15 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r16 = $r15.<androidx.test.internal.runner.RunnerArgs: java.lang.String testDiscoveryService>;

        $r17 = virtualinvoke $r14.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$Builder setTestDiscoveryService(java.lang.String)>($r16);

        $r18 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $r19 = $r18.<androidx.test.internal.runner.RunnerArgs: java.lang.String testRunEventsService>;

        $r20 = virtualinvoke $r17.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$Builder setTestRunEventService(java.lang.String)>($r19);

        $r21 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.runner.RunnerArgs runnerArgs>;

        $z3 = $r21.<androidx.test.internal.runner.RunnerArgs: boolean testPlatformMigration>;

        $r22 = virtualinvoke $r20.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs$Builder setTestPlatformMigration(boolean)>($z3);

        r1 = virtualinvoke $r22.<androidx.test.internal.events.client.TestEventClientArgs$Builder: androidx.test.internal.events.client.TestEventClientArgs build()>();

        $r23 = virtualinvoke r0.<androidx.test.runner.AndroidJUnitRunner: android.content.Context getContext()>();

        $r24 = staticinvoke <androidx.test.internal.events.client.TestEventClient: androidx.test.internal.events.client.TestEventClient connect(android.content.Context,androidx.test.internal.events.client.TestEventClientConnectListener,androidx.test.internal.events.client.TestEventClientArgs)>($r23, r0, r1);

        r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.events.client.TestEventClient testEventClient> = $r24;

        $r25 = r0.<androidx.test.runner.AndroidJUnitRunner: androidx.test.internal.events.client.TestEventClient testEventClient>;

        $z4 = virtualinvoke $r25.<androidx.test.internal.events.client.TestEventClient: boolean isOrchestrationServiceEnabled()>();

        return $z4;
    }

    private boolean waitForDebugger(androidx.test.internal.runner.RunnerArgs)
    {
        androidx.test.runner.AndroidJUnitRunner r0;
        androidx.test.internal.runner.RunnerArgs r1;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        $z0 = r1.<androidx.test.internal.runner.RunnerArgs: boolean debug>;

        if $z0 == 0 goto label1;

        $z1 = r1.<androidx.test.internal.runner.RunnerArgs: boolean listTestsForOrchestrator>;

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0
<androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0: androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0 INSTANCE>
    public final androidx.test.internal.events.client.TestEventServiceConnection create(androidx.test.internal.events.client.TestEventClientConnectListener)
    {
        androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0 r0;
        androidx.test.internal.events.client.TestEventClientConnectListener r1;
        androidx.test.orchestrator.callback.OrchestratorV1Connection $r2;
        androidx.test.internal.events.client.TestEventServiceConnection $r3;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0;

        r1 := @parameter0: androidx.test.internal.events.client.TestEventClientConnectListener;

        $r2 = new androidx.test.orchestrator.callback.OrchestratorV1Connection;

        specialinvoke $r2.<androidx.test.orchestrator.callback.OrchestratorV1Connection: void <init>(androidx.test.internal.events.client.TestEventClientConnectListener)>(r1);

        $r3 = (androidx.test.internal.events.client.TestEventServiceConnection) $r2;

        return $r3;
    }

    static void <clinit>()
    {
        androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0 $r0;

        $r0 = new androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0;

        specialinvoke $r0.<androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0: void <init>()>();

        <androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0: androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0 INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0 r0;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner$$ExternalSyntheticLambda0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.runner.AndroidJUnitRunner$1
<androidx.test.runner.AndroidJUnitRunner$1: androidx.test.runner.AndroidJUnitRunner this$0>
    void <init>(androidx.test.runner.AndroidJUnitRunner)
    {
        androidx.test.runner.AndroidJUnitRunner$1 r0;
        androidx.test.runner.AndroidJUnitRunner r1;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner$1;

        r1 := @parameter0: androidx.test.runner.AndroidJUnitRunner;

        r0.<androidx.test.runner.AndroidJUnitRunner$1: androidx.test.runner.AndroidJUnitRunner this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.runner.AndroidJUnitRunner$1 r0;
        androidx.test.runner.AndroidJUnitRunner $r1;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner$1;

        $r1 = r0.<androidx.test.runner.AndroidJUnitRunner$1: androidx.test.runner.AndroidJUnitRunner this$0>;

        virtualinvoke $r1.<androidx.test.runner.AndroidJUnitRunner: void waitForActivitiesToComplete()>();

        return;
    }

androidx.test.runner.AndroidJUnitRunner$2
<androidx.test.runner.AndroidJUnitRunner$2: androidx.test.runner.AndroidJUnitRunner this$0>
    void <init>(androidx.test.runner.AndroidJUnitRunner)
    {
        androidx.test.runner.AndroidJUnitRunner$2 r0;
        androidx.test.runner.AndroidJUnitRunner r1;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner$2;

        r1 := @parameter0: androidx.test.runner.AndroidJUnitRunner;

        r0.<androidx.test.runner.AndroidJUnitRunner$2: androidx.test.runner.AndroidJUnitRunner this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.runner.AndroidJUnitRunner$2 r0;
        androidx.test.runner.AndroidJUnitRunner $r1;

        r0 := @this: androidx.test.runner.AndroidJUnitRunner$2;

        $r1 = r0.<androidx.test.runner.AndroidJUnitRunner$2: androidx.test.runner.AndroidJUnitRunner this$0>;

        virtualinvoke $r1.<androidx.test.runner.AndroidJUnitRunner: void waitForActivitiesToComplete()>();

        return;
    }

