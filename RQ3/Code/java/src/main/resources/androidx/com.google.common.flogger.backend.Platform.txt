com.google.common.flogger.backend.Platform
<com.google.common.flogger.backend.Platform: java.lang.String ANDROID_PLATFORM>
<com.google.common.flogger.backend.Platform: java.lang.String[] AVAILABLE_PLATFORMS>
<com.google.common.flogger.backend.Platform: java.lang.String DEFAULT_PLATFORM>
<com.google.common.flogger.backend.Platform: java.lang.String GOOGLE_PLATFORM>
    static volatile java.lang.String[] '-$$Nest$sfgetAVAILABLE_PLATFORMS'()
    {
        java.lang.String[] r0;

        r0 = <com.google.common.flogger.backend.Platform: java.lang.String[] AVAILABLE_PLATFORMS>;

        return r0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <com.google.common.flogger.backend.Platform: java.lang.String ANDROID_PLATFORM> = "com.google.common.flogger.backend.android.AndroidPlatform";

        <com.google.common.flogger.backend.Platform: java.lang.String GOOGLE_PLATFORM> = "com.google.common.flogger.backend.google.GooglePlatform";

        <com.google.common.flogger.backend.Platform: java.lang.String DEFAULT_PLATFORM> = "com.google.common.flogger.backend.system.DefaultPlatform";

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "com.google.common.flogger.backend.android.AndroidPlatform";

        $r0[1] = "com.google.common.flogger.backend.google.GooglePlatform";

        $r0[2] = "com.google.common.flogger.backend.system.DefaultPlatform";

        <com.google.common.flogger.backend.Platform: java.lang.String[] AVAILABLE_PLATFORMS> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.flogger.backend.Platform $r0;

        $r0 := @this: com.google.common.flogger.backend.Platform;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.flogger.backend.LoggerBackend getBackend(java.lang.String)
    {
        java.lang.String $r0;
        com.google.common.flogger.backend.Platform $r1;
        com.google.common.flogger.backend.LoggerBackend $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.flogger.backend.Platform$LazyHolder: com.google.common.flogger.backend.Platform '-$$Nest$sfgetINSTANCE'()>();

        $r2 = virtualinvoke $r1.<com.google.common.flogger.backend.Platform: com.google.common.flogger.backend.LoggerBackend getBackendImpl(java.lang.String)>($r0);

        return $r2;
    }

    public static com.google.common.flogger.backend.Platform$LogCallerFinder getCallerFinder()
    {
        com.google.common.flogger.backend.Platform $r0;
        com.google.common.flogger.backend.Platform$LogCallerFinder $r1;

        $r0 = staticinvoke <com.google.common.flogger.backend.Platform$LazyHolder: com.google.common.flogger.backend.Platform '-$$Nest$sfgetINSTANCE'()>();

        $r1 = virtualinvoke $r0.<com.google.common.flogger.backend.Platform: com.google.common.flogger.backend.Platform$LogCallerFinder getCallerFinderImpl()>();

        return $r1;
    }

    public static java.lang.String getConfigInfo()
    {
        com.google.common.flogger.backend.Platform $r0;
        java.lang.String $r1;

        $r0 = staticinvoke <com.google.common.flogger.backend.Platform$LazyHolder: com.google.common.flogger.backend.Platform '-$$Nest$sfgetINSTANCE'()>();

        $r1 = virtualinvoke $r0.<com.google.common.flogger.backend.Platform: java.lang.String getConfigInfoImpl()>();

        return $r1;
    }

    public static com.google.common.flogger.context.ContextDataProvider getContextDataProvider()
    {
        com.google.common.flogger.backend.Platform $r0;
        com.google.common.flogger.context.ContextDataProvider $r1;

        $r0 = staticinvoke <com.google.common.flogger.backend.Platform$LazyHolder: com.google.common.flogger.backend.Platform '-$$Nest$sfgetINSTANCE'()>();

        $r1 = virtualinvoke $r0.<com.google.common.flogger.backend.Platform: com.google.common.flogger.context.ContextDataProvider getContextDataProviderImpl()>();

        return $r1;
    }

    public static int getCurrentRecursionDepth()
    {
        int $i0;

        $i0 = staticinvoke <com.google.common.flogger.util.RecursionDepth: int getCurrentDepth()>();

        return $i0;
    }

    public static long getCurrentTimeNanos()
    {
        com.google.common.flogger.backend.Platform $r0;
        long $l0;

        $r0 = staticinvoke <com.google.common.flogger.backend.Platform$LazyHolder: com.google.common.flogger.backend.Platform '-$$Nest$sfgetINSTANCE'()>();

        $l0 = virtualinvoke $r0.<com.google.common.flogger.backend.Platform: long getCurrentTimeNanosImpl()>();

        return $l0;
    }

    public static com.google.common.flogger.backend.Metadata getInjectedMetadata()
    {
        com.google.common.flogger.context.ContextDataProvider $r0;
        com.google.common.flogger.backend.Metadata $r1;

        $r0 = staticinvoke <com.google.common.flogger.backend.Platform: com.google.common.flogger.context.ContextDataProvider getContextDataProvider()>();

        $r1 = virtualinvoke $r0.<com.google.common.flogger.context.ContextDataProvider: com.google.common.flogger.backend.Metadata getMetadata()>();

        return $r1;
    }

    public static com.google.common.flogger.context.Tags getInjectedTags()
    {
        com.google.common.flogger.context.ContextDataProvider $r0;
        com.google.common.flogger.context.Tags $r1;

        $r0 = staticinvoke <com.google.common.flogger.backend.Platform: com.google.common.flogger.context.ContextDataProvider getContextDataProvider()>();

        $r1 = virtualinvoke $r0.<com.google.common.flogger.context.ContextDataProvider: com.google.common.flogger.context.Tags getTags()>();

        return $r1;
    }

    public static boolean shouldForceLogging(java.lang.String, java.util.logging.Level, boolean)
    {
        java.util.logging.Level $r0;
        boolean $z0;
        java.lang.String $r1;
        com.google.common.flogger.context.ContextDataProvider $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.util.logging.Level;

        $z0 := @parameter2: boolean;

        $r2 = staticinvoke <com.google.common.flogger.backend.Platform: com.google.common.flogger.context.ContextDataProvider getContextDataProvider()>();

        $z0 = virtualinvoke $r2.<com.google.common.flogger.context.ContextDataProvider: boolean shouldForceLogging(java.lang.String,java.util.logging.Level,boolean)>($r1, $r0, $z0);

        return $z0;
    }

<com.google.common.flogger.backend.Platform: com.google.common.flogger.backend.LoggerBackend getBackendImpl(java.lang.String)>
<com.google.common.flogger.backend.Platform: com.google.common.flogger.backend.Platform$LogCallerFinder getCallerFinderImpl()>
<com.google.common.flogger.backend.Platform: java.lang.String getConfigInfoImpl()>
    protected com.google.common.flogger.context.ContextDataProvider getContextDataProviderImpl()
    {
        com.google.common.flogger.backend.Platform $r0;
        com.google.common.flogger.context.ContextDataProvider $r1;

        $r0 := @this: com.google.common.flogger.backend.Platform;

        $r1 = staticinvoke <com.google.common.flogger.context.ContextDataProvider: com.google.common.flogger.context.ContextDataProvider getNoOpProvider()>();

        return $r1;
    }

    protected long getCurrentTimeNanosImpl()
    {
        com.google.common.flogger.backend.Platform $r0;
        java.util.concurrent.TimeUnit $r1;
        long $l0;

        $r0 := @this: com.google.common.flogger.backend.Platform;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>($l0);

        return $l0;
    }

com.google.common.flogger.backend.Platform$LazyHolder
<com.google.common.flogger.backend.Platform$LazyHolder: com.google.common.flogger.backend.Platform INSTANCE>
    static volatile com.google.common.flogger.backend.Platform '-$$Nest$sfgetINSTANCE'()
    {
        com.google.common.flogger.backend.Platform r0;

        r0 = <com.google.common.flogger.backend.Platform$LazyHolder: com.google.common.flogger.backend.Platform INSTANCE>;

        return r0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        com.google.common.flogger.backend.Platform $r1;

        $r0 = staticinvoke <com.google.common.flogger.backend.Platform: java.lang.String[] '-$$Nest$sfgetAVAILABLE_PLATFORMS'()>();

        $r1 = staticinvoke <com.google.common.flogger.backend.Platform$LazyHolder: com.google.common.flogger.backend.Platform loadFirstAvailablePlatform(java.lang.String[])>($r0);

        <com.google.common.flogger.backend.Platform$LazyHolder: com.google.common.flogger.backend.Platform INSTANCE> = $r1;

        return;
    }

    private static com.google.common.flogger.backend.Platform loadFirstAvailablePlatform(java.lang.String[])
    {
        java.lang.String[] $r0;
        com.google.common.flogger.backend.Platform $r1;
        java.lang.StringBuilder $r2, $r10;
        int $i0, $i1;
        java.lang.String $r3;
        java.lang.Class $r4;
        java.lang.Class[] $r5;
        java.lang.reflect.Constructor $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8;
        java.lang.Throwable $r9;
        boolean $z0;
        java.lang.IllegalStateException $r11;

        $r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <com.google.common.flogger.backend.PlatformProvider: com.google.common.flogger.backend.Platform getPlatform()>();

        goto label01;

     label01:
        if $r1 == null goto label02;

        return $r1;

     label02:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = lengthof $r0;

        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label10;

        $r3 = $r0[$i1];

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3);

        $r5 = newarray (java.lang.Class)[0];

     label04:
        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

     label05:
        $r7 = newarray (java.lang.Object)[0];

     label06:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

     label07:
        $r1 = (com.google.common.flogger.backend.Platform) $r8;

        return $r1;

     label08:
        $r9 := @caughtexception;

        $z0 = $r9 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label09;

        $r9 = virtualinvoke $r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label09:
        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $i1 = $i1 + 1;

        goto label03;

     label10:
        $r11 = new java.lang.IllegalStateException;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "No logging platforms found:");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        goto label11;

     label11:
        throw $r11;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
    }

com.google.common.flogger.backend.Platform$LogCallerFinder
    public void <init>()
    {
        com.google.common.flogger.backend.Platform$LogCallerFinder $r0;

        $r0 := @this: com.google.common.flogger.backend.Platform$LogCallerFinder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

<com.google.common.flogger.backend.Platform$LogCallerFinder: com.google.common.flogger.LogSite findLogSite(java.lang.Class,int)>
<com.google.common.flogger.backend.Platform$LogCallerFinder: java.lang.String findLoggingClass(java.lang.Class)>
