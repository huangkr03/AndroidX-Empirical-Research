androidx.work.CoroutineWorker
<androidx.work.CoroutineWorker: kotlinx.coroutines.CompletableJob job>
<androidx.work.CoroutineWorker: androidx.work.impl.utils.futures.SettableFuture future>
<androidx.work.CoroutineWorker: kotlinx.coroutines.CoroutineDispatcher coroutineContext>
    public void <init>(android.content.Context, androidx.work.WorkerParameters)
    {
        androidx.work.CoroutineWorker r0;
        android.content.Context r1;
        androidx.work.WorkerParameters r2;
        kotlinx.coroutines.CompletableJob $r3;
        androidx.work.impl.utils.futures.SettableFuture $r4, $r5;
        java.lang.Runnable $r6;
        androidx.work.impl.utils.taskexecutor.TaskExecutor $r7;
        androidx.work.impl.utils.taskexecutor.SerialExecutor $r8;
        java.util.concurrent.Executor $r9;
        kotlinx.coroutines.CoroutineDispatcher $r10;

        r0 := @this: androidx.work.CoroutineWorker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.work.WorkerParameters;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "appContext");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "params");

        specialinvoke r0.<androidx.work.ListenableWorker: void <init>(android.content.Context,androidx.work.WorkerParameters)>(r1, r2);

        $r3 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        r0.<androidx.work.CoroutineWorker: kotlinx.coroutines.CompletableJob job> = $r3;

        $r4 = staticinvoke <androidx.work.impl.utils.futures.SettableFuture: androidx.work.impl.utils.futures.SettableFuture create()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "create()");

        r0.<androidx.work.CoroutineWorker: androidx.work.impl.utils.futures.SettableFuture future> = $r4;

        $r5 = r0.<androidx.work.CoroutineWorker: androidx.work.impl.utils.futures.SettableFuture future>;

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.work.CoroutineWorker)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.work.CoroutineWorker: void _init_$lambda$0(androidx.work.CoroutineWorker)>, methodtype: void __METHODTYPE__());

        $r7 = virtualinvoke r0.<androidx.work.CoroutineWorker: androidx.work.impl.utils.taskexecutor.TaskExecutor getTaskExecutor()>();

        $r8 = interfaceinvoke $r7.<androidx.work.impl.utils.taskexecutor.TaskExecutor: androidx.work.impl.utils.taskexecutor.SerialExecutor getSerialTaskExecutor()>();

        $r9 = (java.util.concurrent.Executor) $r8;

        virtualinvoke $r5.<androidx.work.impl.utils.futures.SettableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r6, $r9);

        $r10 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getDefault()>();

        r0.<androidx.work.CoroutineWorker: kotlinx.coroutines.CoroutineDispatcher coroutineContext> = $r10;

        return;
    }

    public final kotlinx.coroutines.CompletableJob getJob$work_runtime_ktx_release()
    {
        androidx.work.CoroutineWorker r0;
        kotlinx.coroutines.CompletableJob $r1;

        r0 := @this: androidx.work.CoroutineWorker;

        $r1 = r0.<androidx.work.CoroutineWorker: kotlinx.coroutines.CompletableJob job>;

        return $r1;
    }

    public final androidx.work.impl.utils.futures.SettableFuture getFuture$work_runtime_ktx_release()
    {
        androidx.work.CoroutineWorker r0;
        androidx.work.impl.utils.futures.SettableFuture $r1;

        r0 := @this: androidx.work.CoroutineWorker;

        $r1 = r0.<androidx.work.CoroutineWorker: androidx.work.impl.utils.futures.SettableFuture future>;

        return $r1;
    }

    public kotlinx.coroutines.CoroutineDispatcher getCoroutineContext()
    {
        androidx.work.CoroutineWorker r0;
        kotlinx.coroutines.CoroutineDispatcher $r1;

        r0 := @this: androidx.work.CoroutineWorker;

        $r1 = r0.<androidx.work.CoroutineWorker: kotlinx.coroutines.CoroutineDispatcher coroutineContext>;

        return $r1;
    }

    public static void getCoroutineContext$annotations()
    {
        return;
    }

    public final com.google.common.util.concurrent.ListenableFuture startWork()
    {
        androidx.work.CoroutineWorker r0;
        kotlinx.coroutines.CoroutineScope r1;
        kotlinx.coroutines.CoroutineDispatcher $r2;
        kotlinx.coroutines.CompletableJob $r3;
        kotlin.coroutines.CoroutineContext $r4, $r5;
        androidx.work.CoroutineWorker$startWork$1 $r6;
        kotlin.jvm.functions.Function2 $r7;
        androidx.work.impl.utils.futures.SettableFuture $r9;
        com.google.common.util.concurrent.ListenableFuture $r10;

        r0 := @this: androidx.work.CoroutineWorker;

        $r2 = virtualinvoke r0.<androidx.work.CoroutineWorker: kotlinx.coroutines.CoroutineDispatcher getCoroutineContext()>();

        $r3 = r0.<androidx.work.CoroutineWorker: kotlinx.coroutines.CompletableJob job>;

        $r4 = (kotlin.coroutines.CoroutineContext) $r3;

        $r5 = virtualinvoke $r2.<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r4);

        r1 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r5);

        $r6 = new androidx.work.CoroutineWorker$startWork$1;

        specialinvoke $r6.<androidx.work.CoroutineWorker$startWork$1: void <init>(androidx.work.CoroutineWorker,kotlin.coroutines.Continuation)>(r0, null);

        $r7 = (kotlin.jvm.functions.Function2) $r6;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>(r1, null, null, $r7, 3, null);

        $r9 = r0.<androidx.work.CoroutineWorker: androidx.work.impl.utils.futures.SettableFuture future>;

        $r10 = (com.google.common.util.concurrent.ListenableFuture) $r9;

        return $r10;
    }

<androidx.work.CoroutineWorker: java.lang.Object doWork(kotlin.coroutines.Continuation)>
    public java.lang.Object getForegroundInfo(kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.work.CoroutineWorker;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $r2 = staticinvoke <androidx.work.CoroutineWorker: java.lang.Object getForegroundInfo$suspendImpl(androidx.work.CoroutineWorker,kotlin.coroutines.Continuation)>(r0, $r1);

        return $r2;
    }

    static java.lang.Object getForegroundInfo$suspendImpl(androidx.work.CoroutineWorker, kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.IllegalStateException $r2;

        $r0 := @parameter0: androidx.work.CoroutineWorker;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not implemented");

        throw $r2;
    }

    public final java.lang.Object setProgress(androidx.work.Data, kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker r0;
        androidx.work.Data r1;
        kotlin.coroutines.Continuation $r2, r4, $r9;
        kotlinx.coroutines.CancellableContinuationImpl r5, $r8;
        kotlinx.coroutines.CancellableContinuation r6;
        com.google.common.util.concurrent.ListenableFuture $r7;
        boolean $z3, z4;
        androidx.work.ListenableFutureKt$await$2$1 $r10;
        androidx.work.DirectExecutor $r11;
        java.util.concurrent.Executor $r12;
        java.lang.Runnable $r13;
        androidx.work.ListenableFutureKt$await$2$2 $r14;
        kotlin.jvm.functions.Function1 $r15;
        java.lang.Object $r16, $r17, $r18;
        kotlin.Unit $r19;
        java.lang.Throwable $r21, r22, $r23;

        r0 := @this: androidx.work.CoroutineWorker;

        r1 := @parameter0: androidx.work.Data;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r7 = virtualinvoke r0.<androidx.work.CoroutineWorker: com.google.common.util.concurrent.ListenableFuture setProgressAsync(androidx.work.Data)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "setProgressAsync(data)");

        $z3 = interfaceinvoke $r7.<com.google.common.util.concurrent.ListenableFuture: boolean isDone()>();

        if $z3 == 0 goto label4;

     label1:
        interfaceinvoke $r7.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        goto label6;

     label2:
        $r21 := @caughtexception;

        r22 = $r21;

        $r23 = virtualinvoke r22.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        if $r23 != null goto label3;

        $r23 = (java.lang.Throwable) r22;

     label3:
        throw $r23;

     label4:
        z4 = 0;

        r4 = $r2;

        $r8 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>(r4);

        specialinvoke $r8.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r9, 1);

        r5 = $r8;

        virtualinvoke r5.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        r6 = (kotlinx.coroutines.CancellableContinuation) r5;

        $r10 = new androidx.work.ListenableFutureKt$await$2$1;

        specialinvoke $r10.<androidx.work.ListenableFutureKt$await$2$1: void <init>(kotlinx.coroutines.CancellableContinuation,com.google.common.util.concurrent.ListenableFuture)>(r6, $r7);

        $r13 = (java.lang.Runnable) $r10;

        $r11 = <androidx.work.DirectExecutor: androidx.work.DirectExecutor INSTANCE>;

        $r12 = (java.util.concurrent.Executor) $r11;

        interfaceinvoke $r7.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r13, $r12);

        $r14 = new androidx.work.ListenableFutureKt$await$2$2;

        specialinvoke $r14.<androidx.work.ListenableFutureKt$await$2$2: void <init>(com.google.common.util.concurrent.ListenableFuture)>($r7);

        $r15 = (kotlin.jvm.functions.Function1) $r14;

        interfaceinvoke r6.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r15);

        $r16 = virtualinvoke r5.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r17 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r16 != $r17 goto label5;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label5:
        $r18 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r16 != $r18 goto label6;

        return $r16;

     label6:
        $r19 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r19;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label2;
    }

    public final java.lang.Object setForeground(androidx.work.ForegroundInfo, kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker r0;
        androidx.work.ForegroundInfo r1;
        kotlin.coroutines.Continuation $r2, r4, $r9;
        kotlinx.coroutines.CancellableContinuationImpl r5, $r8;
        kotlinx.coroutines.CancellableContinuation r6;
        com.google.common.util.concurrent.ListenableFuture $r7;
        boolean $z3, z4;
        androidx.work.ListenableFutureKt$await$2$1 $r10;
        androidx.work.DirectExecutor $r11;
        java.util.concurrent.Executor $r12;
        java.lang.Runnable $r13;
        androidx.work.ListenableFutureKt$await$2$2 $r14;
        kotlin.jvm.functions.Function1 $r15;
        java.lang.Object $r16, $r17, $r18;
        kotlin.Unit $r19;
        java.lang.Throwable $r21, r22, $r23;

        r0 := @this: androidx.work.CoroutineWorker;

        r1 := @parameter0: androidx.work.ForegroundInfo;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r7 = virtualinvoke r0.<androidx.work.CoroutineWorker: com.google.common.util.concurrent.ListenableFuture setForegroundAsync(androidx.work.ForegroundInfo)>(r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "setForegroundAsync(foregroundInfo)");

        $z3 = interfaceinvoke $r7.<com.google.common.util.concurrent.ListenableFuture: boolean isDone()>();

        if $z3 == 0 goto label4;

     label1:
        interfaceinvoke $r7.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        goto label6;

     label2:
        $r21 := @caughtexception;

        r22 = $r21;

        $r23 = virtualinvoke r22.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        if $r23 != null goto label3;

        $r23 = (java.lang.Throwable) r22;

     label3:
        throw $r23;

     label4:
        z4 = 0;

        r4 = $r2;

        $r8 = new kotlinx.coroutines.CancellableContinuationImpl;

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)>(r4);

        specialinvoke $r8.<kotlinx.coroutines.CancellableContinuationImpl: void <init>(kotlin.coroutines.Continuation,int)>($r9, 1);

        r5 = $r8;

        virtualinvoke r5.<kotlinx.coroutines.CancellableContinuationImpl: void initCancellability()>();

        r6 = (kotlinx.coroutines.CancellableContinuation) r5;

        $r10 = new androidx.work.ListenableFutureKt$await$2$1;

        specialinvoke $r10.<androidx.work.ListenableFutureKt$await$2$1: void <init>(kotlinx.coroutines.CancellableContinuation,com.google.common.util.concurrent.ListenableFuture)>(r6, $r7);

        $r13 = (java.lang.Runnable) $r10;

        $r11 = <androidx.work.DirectExecutor: androidx.work.DirectExecutor INSTANCE>;

        $r12 = (java.util.concurrent.Executor) $r11;

        interfaceinvoke $r7.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r13, $r12);

        $r14 = new androidx.work.ListenableFutureKt$await$2$2;

        specialinvoke $r14.<androidx.work.ListenableFutureKt$await$2$2: void <init>(com.google.common.util.concurrent.ListenableFuture)>($r7);

        $r15 = (kotlin.jvm.functions.Function1) $r14;

        interfaceinvoke r6.<kotlinx.coroutines.CancellableContinuation: void invokeOnCancellation(kotlin.jvm.functions.Function1)>($r15);

        $r16 = virtualinvoke r5.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()>();

        $r17 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r16 != $r17 goto label5;

        staticinvoke <kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)>($r2);

     label5:
        $r18 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r16 != $r18 goto label6;

        return $r16;

     label6:
        $r19 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r19;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label2;
    }

    public final com.google.common.util.concurrent.ListenableFuture getForegroundInfoAsync()
    {
        androidx.work.CoroutineWorker r0;
        kotlinx.coroutines.CompletableJob r1;
        kotlinx.coroutines.CoroutineScope r2;
        androidx.work.JobListenableFuture r3, $r7;
        kotlinx.coroutines.CoroutineDispatcher $r4;
        kotlin.coroutines.CoroutineContext $r5, $r6;
        kotlinx.coroutines.Job $r8;
        androidx.work.CoroutineWorker$getForegroundInfoAsync$1 $r9;
        kotlin.jvm.functions.Function2 $r10;
        com.google.common.util.concurrent.ListenableFuture $r12;

        r0 := @this: androidx.work.CoroutineWorker;

        r1 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r4 = virtualinvoke r0.<androidx.work.CoroutineWorker: kotlinx.coroutines.CoroutineDispatcher getCoroutineContext()>();

        $r5 = (kotlin.coroutines.CoroutineContext) r1;

        $r6 = virtualinvoke $r4.<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r5);

        r2 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r6);

        $r7 = new androidx.work.JobListenableFuture;

        $r8 = (kotlinx.coroutines.Job) r1;

        specialinvoke $r7.<androidx.work.JobListenableFuture: void <init>(kotlinx.coroutines.Job,androidx.work.impl.utils.futures.SettableFuture,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r8, null, 2, null);

        r3 = $r7;

        $r9 = new androidx.work.CoroutineWorker$getForegroundInfoAsync$1;

        specialinvoke $r9.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: void <init>(androidx.work.JobListenableFuture,androidx.work.CoroutineWorker,kotlin.coroutines.Continuation)>(r3, r0, null);

        $r10 = (kotlin.jvm.functions.Function2) $r9;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>(r2, null, null, $r10, 3, null);

        $r12 = (com.google.common.util.concurrent.ListenableFuture) r3;

        return $r12;
    }

    public final void onStopped()
    {
        androidx.work.CoroutineWorker r0;
        androidx.work.impl.utils.futures.SettableFuture $r1;

        r0 := @this: androidx.work.CoroutineWorker;

        specialinvoke r0.<androidx.work.ListenableWorker: void onStopped()>();

        $r1 = r0.<androidx.work.CoroutineWorker: androidx.work.impl.utils.futures.SettableFuture future>;

        virtualinvoke $r1.<androidx.work.impl.utils.futures.SettableFuture: boolean cancel(boolean)>(0);

        return;
    }

    private static final void _init_$lambda$0(androidx.work.CoroutineWorker)
    {
        androidx.work.CoroutineWorker r0;
        androidx.work.impl.utils.futures.SettableFuture $r1;
        boolean $z0;
        kotlinx.coroutines.CompletableJob $r2;
        kotlinx.coroutines.Job $r3;

        r0 := @parameter0: androidx.work.CoroutineWorker;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.work.CoroutineWorker: androidx.work.impl.utils.futures.SettableFuture future>;

        $z0 = virtualinvoke $r1.<androidx.work.impl.utils.futures.SettableFuture: boolean isCancelled()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.work.CoroutineWorker: kotlinx.coroutines.CompletableJob job>;

        $r3 = (kotlinx.coroutines.Job) $r2;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r3, null, 1, null);

     label1:
        return;
    }

androidx.work.CoroutineWorker$getForegroundInfoAsync$1
<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: java.lang.Object L$0>
<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: int label>
<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: androidx.work.JobListenableFuture $jobFuture>
<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: androidx.work.CoroutineWorker this$0>
    void <init>(androidx.work.JobListenableFuture, androidx.work.CoroutineWorker, kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker$getForegroundInfoAsync$1 r0;
        androidx.work.JobListenableFuture $r1;
        androidx.work.CoroutineWorker $r2;
        kotlin.coroutines.Continuation $r3;

        r0 := @this: androidx.work.CoroutineWorker$getForegroundInfoAsync$1;

        $r1 := @parameter0: androidx.work.JobListenableFuture;

        $r2 := @parameter1: androidx.work.CoroutineWorker;

        $r3 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: androidx.work.JobListenableFuture $jobFuture> = $r1;

        r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: androidx.work.CoroutineWorker this$0> = $r2;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r3);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.work.CoroutineWorker$getForegroundInfoAsync$1 r0;
        java.lang.Object $r1, r2, $r3, $r9;
        int $i0;
        kotlin.Unit $r4;
        androidx.work.CoroutineWorker $r5;
        kotlin.coroutines.Continuation $r6;
        java.lang.IllegalStateException $r7;
        androidx.work.JobListenableFuture r8;

        r0 := @this: androidx.work.CoroutineWorker$getForegroundInfoAsync$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        r8 = r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: androidx.work.JobListenableFuture $jobFuture>;

        $r5 = r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: androidx.work.CoroutineWorker this$0>;

        $r6 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: java.lang.Object L$0> = r8;

        r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: int label> = 1;

        $r9 = virtualinvoke $r5.<androidx.work.CoroutineWorker: java.lang.Object getForegroundInfo(kotlin.coroutines.Continuation)>($r6);

        if $r9 != r2 goto label3;

        return r2;

     label2:
        $r3 = r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: java.lang.Object L$0>;

        r8 = (androidx.work.JobListenableFuture) $r3;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r9 = $r1;

     label3:
        virtualinvoke r8.<androidx.work.JobListenableFuture: void complete(java.lang.Object)>($r9);

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label4:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r7;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker$getForegroundInfoAsync$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r6;
        androidx.work.CoroutineWorker $r4;
        androidx.work.JobListenableFuture $r5;

        r0 := @this: androidx.work.CoroutineWorker$getForegroundInfoAsync$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.work.CoroutineWorker$getForegroundInfoAsync$1;

        $r5 = r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: androidx.work.JobListenableFuture $jobFuture>;

        $r4 = r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: androidx.work.CoroutineWorker this$0>;

        specialinvoke $r3.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: void <init>(androidx.work.JobListenableFuture,androidx.work.CoroutineWorker,kotlin.coroutines.Continuation)>($r5, $r4, $r2);

        $r6 = (kotlin.coroutines.Continuation) $r3;

        return $r6;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker$getForegroundInfoAsync$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.work.CoroutineWorker$getForegroundInfoAsync$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.work.CoroutineWorker$getForegroundInfoAsync$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.work.CoroutineWorker$getForegroundInfoAsync$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.work.CoroutineWorker$getForegroundInfoAsync$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.work.CoroutineWorker$getForegroundInfoAsync$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

androidx.work.CoroutineWorker$startWork$1
<androidx.work.CoroutineWorker$startWork$1: int label>
<androidx.work.CoroutineWorker$startWork$1: androidx.work.CoroutineWorker this$0>
    void <init>(androidx.work.CoroutineWorker, kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker$startWork$1 r0;
        androidx.work.CoroutineWorker $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.work.CoroutineWorker$startWork$1;

        $r1 := @parameter0: androidx.work.CoroutineWorker;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.work.CoroutineWorker$startWork$1: androidx.work.CoroutineWorker this$0> = $r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.work.CoroutineWorker$startWork$1 r0;
        java.lang.Object $r1, r2, $r12;
        int $i0;
        androidx.work.CoroutineWorker $r3, $r6, $r10;
        androidx.work.impl.utils.futures.SettableFuture $r4, $r11;
        kotlin.Unit $r5;
        kotlin.coroutines.Continuation $r7;
        java.lang.IllegalStateException $r8;
        java.lang.Throwable $r9, r14;
        androidx.work.ListenableWorker$Result r13;

        r0 := @this: androidx.work.CoroutineWorker$startWork$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.work.CoroutineWorker$startWork$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label4;
            default: goto label9;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label2:
        $r6 = r0.<androidx.work.CoroutineWorker$startWork$1: androidx.work.CoroutineWorker this$0>;

        $r7 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.work.CoroutineWorker$startWork$1: int label> = 1;

        $r12 = virtualinvoke $r6.<androidx.work.CoroutineWorker: java.lang.Object doWork(kotlin.coroutines.Continuation)>($r7);

     label3:
        if $r12 != r2 goto label5;

        return r2;

     label4:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r12 = $r1;

     label5:
        r13 = (androidx.work.ListenableWorker$Result) $r12;

        $r3 = r0.<androidx.work.CoroutineWorker$startWork$1: androidx.work.CoroutineWorker this$0>;

        $r4 = virtualinvoke $r3.<androidx.work.CoroutineWorker: androidx.work.impl.utils.futures.SettableFuture getFuture$work_runtime_ktx_release()>();

        virtualinvoke $r4.<androidx.work.impl.utils.futures.SettableFuture: boolean set(java.lang.Object)>(r13);

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        r14 = $r9;

        $r10 = r0.<androidx.work.CoroutineWorker$startWork$1: androidx.work.CoroutineWorker this$0>;

        $r11 = virtualinvoke $r10.<androidx.work.CoroutineWorker: androidx.work.impl.utils.futures.SettableFuture getFuture$work_runtime_ktx_release()>();

        virtualinvoke $r11.<androidx.work.impl.utils.futures.SettableFuture: boolean setException(java.lang.Throwable)>(r14);

     label8:
        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;

     label9:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker$startWork$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        androidx.work.CoroutineWorker $r4;

        r0 := @this: androidx.work.CoroutineWorker$startWork$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.work.CoroutineWorker$startWork$1;

        $r4 = r0.<androidx.work.CoroutineWorker$startWork$1: androidx.work.CoroutineWorker this$0>;

        specialinvoke $r3.<androidx.work.CoroutineWorker$startWork$1: void <init>(androidx.work.CoroutineWorker,kotlin.coroutines.Continuation)>($r4, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.work.CoroutineWorker$startWork$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.work.CoroutineWorker$startWork$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.work.CoroutineWorker$startWork$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.work.CoroutineWorker$startWork$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.work.CoroutineWorker$startWork$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.work.CoroutineWorker$startWork$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.work.CoroutineWorker$startWork$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.work.CoroutineWorker$startWork$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

