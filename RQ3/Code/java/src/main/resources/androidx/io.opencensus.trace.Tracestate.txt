io.opencensus.trace.Tracestate
    void <init>()
    {
        io.opencensus.trace.Tracestate $r0;

        $r0 := @this: io.opencensus.trace.Tracestate;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static io.opencensus.trace.Tracestate access$200(java.util.List)
    {
        io.opencensus.trace.Tracestate $r0;
        java.util.List $r1;

        $r1 := @parameter0: java.util.List;

        $r0 = staticinvoke <io.opencensus.trace.Tracestate: io.opencensus.trace.Tracestate create(java.util.List)>($r1);

        return $r0;
    }

    public static io.opencensus.trace.Tracestate$Builder builder()
    {
        io.opencensus.trace.Tracestate$Builder $r0;
        io.opencensus.trace.Tracestate $r1;

        $r0 = new io.opencensus.trace.Tracestate$Builder;

        $r1 = staticinvoke <io.opencensus.trace.Tracestate$Builder: io.opencensus.trace.Tracestate access$000()>();

        specialinvoke $r0.<io.opencensus.trace.Tracestate$Builder: void <init>(io.opencensus.trace.Tracestate,io.opencensus.trace.Tracestate$1)>($r1, null);

        return $r0;
    }

    private static io.opencensus.trace.Tracestate create(java.util.List)
    {
        java.util.List $r0;
        int $i0;
        boolean $z0;
        io.opencensus.trace.AutoValue_Tracestate $r1;

        $r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if $i0 > 32 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <io.opencensus.internal.Utils: void checkState(boolean,java.lang.Object)>($z0, "Invalid size");

        $r1 = new io.opencensus.trace.AutoValue_Tracestate;

        $r0 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        specialinvoke $r1.<io.opencensus.trace.AutoValue_Tracestate: void <init>(java.util.List)>($r0);

        return $r1;
    }

<io.opencensus.trace.Tracestate: java.util.List getEntries()>
io.opencensus.trace.Tracestate$1
io.opencensus.trace.Tracestate$Builder
<io.opencensus.trace.Tracestate$Builder: io.opencensus.trace.Tracestate EMPTY>
<io.opencensus.trace.Tracestate$Builder: java.util.ArrayList entries>
<io.opencensus.trace.Tracestate$Builder: io.opencensus.trace.Tracestate parent>
    static void <clinit>()
    {
        java.util.List $r0;
        io.opencensus.trace.Tracestate $r1;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r1 = staticinvoke <io.opencensus.trace.Tracestate: io.opencensus.trace.Tracestate access$200(java.util.List)>($r0);

        <io.opencensus.trace.Tracestate$Builder: io.opencensus.trace.Tracestate EMPTY> = $r1;

        return;
    }

    private void <init>(io.opencensus.trace.Tracestate)
    {
        io.opencensus.trace.Tracestate$Builder $r0;
        io.opencensus.trace.Tracestate $r1;

        $r0 := @this: io.opencensus.trace.Tracestate$Builder;

        $r1 := @parameter0: io.opencensus.trace.Tracestate;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        staticinvoke <io.opencensus.internal.Utils: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "parent");

        $r0.<io.opencensus.trace.Tracestate$Builder: io.opencensus.trace.Tracestate parent> = $r1;

        $r0.<io.opencensus.trace.Tracestate$Builder: java.util.ArrayList entries> = null;

        return;
    }

    void <init>(io.opencensus.trace.Tracestate, io.opencensus.trace.Tracestate$1)
    {
        io.opencensus.trace.Tracestate$Builder $r0;
        io.opencensus.trace.Tracestate $r1;
        io.opencensus.trace.Tracestate$1 $r2;

        $r0 := @this: io.opencensus.trace.Tracestate$Builder;

        $r1 := @parameter0: io.opencensus.trace.Tracestate;

        $r2 := @parameter1: io.opencensus.trace.Tracestate$1;

        specialinvoke $r0.<io.opencensus.trace.Tracestate$Builder: void <init>(io.opencensus.trace.Tracestate)>($r1);

        return;
    }

    static io.opencensus.trace.Tracestate access$000()
    {
        io.opencensus.trace.Tracestate r0;

        r0 = <io.opencensus.trace.Tracestate$Builder: io.opencensus.trace.Tracestate EMPTY>;

        return r0;
    }

    public io.opencensus.trace.Tracestate build()
    {
        io.opencensus.trace.Tracestate$Builder $r0;
        io.opencensus.trace.Tracestate $r1;
        java.util.ArrayList $r2;
        java.util.List r3;

        $r0 := @this: io.opencensus.trace.Tracestate$Builder;

        $r2 = $r0.<io.opencensus.trace.Tracestate$Builder: java.util.ArrayList entries>;

        if $r2 != null goto label1;

        $r1 = $r0.<io.opencensus.trace.Tracestate$Builder: io.opencensus.trace.Tracestate parent>;

        return $r1;

     label1:
        r3 = (java.util.List) $r2;

        $r1 = staticinvoke <io.opencensus.trace.Tracestate: io.opencensus.trace.Tracestate access$200(java.util.List)>(r3);

        return $r1;
    }

io.opencensus.trace.Tracestate$Entry
    void <init>()
    {
        io.opencensus.trace.Tracestate$Entry $r0;

        $r0 := @this: io.opencensus.trace.Tracestate$Entry;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

<io.opencensus.trace.Tracestate$Entry: java.lang.String getKey()>
<io.opencensus.trace.Tracestate$Entry: java.lang.String getValue()>
