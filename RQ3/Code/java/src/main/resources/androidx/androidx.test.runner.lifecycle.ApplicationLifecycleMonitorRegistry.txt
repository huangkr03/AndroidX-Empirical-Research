androidx.test.runner.lifecycle.ApplicationLifecycleMonitorRegistry
<androidx.test.runner.lifecycle.ApplicationLifecycleMonitorRegistry: java.util.concurrent.atomic.AtomicReference lifecycleMonitor>
    public static androidx.test.runner.lifecycle.ApplicationLifecycleMonitor getInstance()
    {
        androidx.test.runner.lifecycle.ApplicationLifecycleMonitor r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        java.lang.IllegalStateException $r3;

        $r1 = <androidx.test.runner.lifecycle.ApplicationLifecycleMonitorRegistry: java.util.concurrent.atomic.AtomicReference lifecycleMonitor>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r0 = (androidx.test.runner.lifecycle.ApplicationLifecycleMonitor) $r2;

        if null != r0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No lifecycle monitor registered! Are you running under an Instrumentation which registers lifecycle monitors?");

        throw $r3;

     label1:
        return r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReference $r0;

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        <androidx.test.runner.lifecycle.ApplicationLifecycleMonitorRegistry: java.util.concurrent.atomic.AtomicReference lifecycleMonitor> = $r0;

        return;
    }

    private void <init>()
    {
        androidx.test.runner.lifecycle.ApplicationLifecycleMonitorRegistry r0;

        r0 := @this: androidx.test.runner.lifecycle.ApplicationLifecycleMonitorRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void registerInstance(androidx.test.runner.lifecycle.ApplicationLifecycleMonitor)
    {
        androidx.test.runner.lifecycle.ApplicationLifecycleMonitor r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @parameter0: androidx.test.runner.lifecycle.ApplicationLifecycleMonitor;

        $r1 = <androidx.test.runner.lifecycle.ApplicationLifecycleMonitorRegistry: java.util.concurrent.atomic.AtomicReference lifecycleMonitor>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r0);

        return;
    }

