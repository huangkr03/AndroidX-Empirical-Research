androidx.palette.graphics.Palette
<androidx.palette.graphics.Palette: int DEFAULT_RESIZE_BITMAP_AREA>
<androidx.palette.graphics.Palette: int DEFAULT_CALCULATE_NUMBER_COLORS>
<androidx.palette.graphics.Palette: float MIN_CONTRAST_TITLE_TEXT>
<androidx.palette.graphics.Palette: float MIN_CONTRAST_BODY_TEXT>
<androidx.palette.graphics.Palette: java.lang.String LOG_TAG>
<androidx.palette.graphics.Palette: boolean LOG_TIMINGS>
<androidx.palette.graphics.Palette: java.util.List mSwatches>
<androidx.palette.graphics.Palette: java.util.List mTargets>
<androidx.palette.graphics.Palette: java.util.Map mSelectedSwatches>
<androidx.palette.graphics.Palette: android.util.SparseBooleanArray mUsedColors>
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch mDominantSwatch>
<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Filter DEFAULT_FILTER>
    public static androidx.palette.graphics.Palette$Builder 'from'(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0;
        androidx.palette.graphics.Palette$Builder $r1;

        r0 := @parameter0: android.graphics.Bitmap;

        $r1 = new androidx.palette.graphics.Palette$Builder;

        specialinvoke $r1.<androidx.palette.graphics.Palette$Builder: void <init>(android.graphics.Bitmap)>(r0);

        return $r1;
    }

    public static androidx.palette.graphics.Palette 'from'(java.util.List)
    {
        java.util.List r0;
        androidx.palette.graphics.Palette$Builder $r1;
        androidx.palette.graphics.Palette $r2;

        r0 := @parameter0: java.util.List;

        $r1 = new androidx.palette.graphics.Palette$Builder;

        specialinvoke $r1.<androidx.palette.graphics.Palette$Builder: void <init>(java.util.List)>(r0);

        $r2 = virtualinvoke $r1.<androidx.palette.graphics.Palette$Builder: androidx.palette.graphics.Palette generate()>();

        return $r2;
    }

    public static androidx.palette.graphics.Palette generate(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0;
        androidx.palette.graphics.Palette$Builder $r1;
        androidx.palette.graphics.Palette $r2;

        r0 := @parameter0: android.graphics.Bitmap;

        $r1 = staticinvoke <androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Builder 'from'(android.graphics.Bitmap)>(r0);

        $r2 = virtualinvoke $r1.<androidx.palette.graphics.Palette$Builder: androidx.palette.graphics.Palette generate()>();

        return $r2;
    }

    public static androidx.palette.graphics.Palette generate(android.graphics.Bitmap, int)
    {
        android.graphics.Bitmap r0;
        int i0;
        androidx.palette.graphics.Palette$Builder $r1, $r2;
        androidx.palette.graphics.Palette $r3;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        $r1 = staticinvoke <androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Builder 'from'(android.graphics.Bitmap)>(r0);

        $r2 = virtualinvoke $r1.<androidx.palette.graphics.Palette$Builder: androidx.palette.graphics.Palette$Builder maximumColorCount(int)>(i0);

        $r3 = virtualinvoke $r2.<androidx.palette.graphics.Palette$Builder: androidx.palette.graphics.Palette generate()>();

        return $r3;
    }

    public static android.os.AsyncTask generateAsync(android.graphics.Bitmap, androidx.palette.graphics.Palette$PaletteAsyncListener)
    {
        android.graphics.Bitmap r0;
        androidx.palette.graphics.Palette$PaletteAsyncListener r1;
        androidx.palette.graphics.Palette$Builder $r2;
        android.os.AsyncTask $r3;

        r0 := @parameter0: android.graphics.Bitmap;

        r1 := @parameter1: androidx.palette.graphics.Palette$PaletteAsyncListener;

        $r2 = staticinvoke <androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Builder 'from'(android.graphics.Bitmap)>(r0);

        $r3 = virtualinvoke $r2.<androidx.palette.graphics.Palette$Builder: android.os.AsyncTask generate(androidx.palette.graphics.Palette$PaletteAsyncListener)>(r1);

        return $r3;
    }

    public static android.os.AsyncTask generateAsync(android.graphics.Bitmap, int, androidx.palette.graphics.Palette$PaletteAsyncListener)
    {
        android.graphics.Bitmap r0;
        int i0;
        androidx.palette.graphics.Palette$PaletteAsyncListener r1;
        androidx.palette.graphics.Palette$Builder $r2, $r3;
        android.os.AsyncTask $r4;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        r1 := @parameter2: androidx.palette.graphics.Palette$PaletteAsyncListener;

        $r2 = staticinvoke <androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Builder 'from'(android.graphics.Bitmap)>(r0);

        $r3 = virtualinvoke $r2.<androidx.palette.graphics.Palette$Builder: androidx.palette.graphics.Palette$Builder maximumColorCount(int)>(i0);

        $r4 = virtualinvoke $r3.<androidx.palette.graphics.Palette$Builder: android.os.AsyncTask generate(androidx.palette.graphics.Palette$PaletteAsyncListener)>(r1);

        return $r4;
    }

    void <init>(java.util.List, java.util.List)
    {
        androidx.palette.graphics.Palette r0;
        java.util.List r1, r2;
        android.util.SparseBooleanArray $r3;
        androidx.collection.ArrayMap $r4;
        androidx.palette.graphics.Palette$Swatch $r5;

        r0 := @this: androidx.palette.graphics.Palette;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.palette.graphics.Palette: java.util.List mSwatches> = r1;

        r0.<androidx.palette.graphics.Palette: java.util.List mTargets> = r2;

        $r3 = new android.util.SparseBooleanArray;

        specialinvoke $r3.<android.util.SparseBooleanArray: void <init>()>();

        r0.<androidx.palette.graphics.Palette: android.util.SparseBooleanArray mUsedColors> = $r3;

        $r4 = new androidx.collection.ArrayMap;

        specialinvoke $r4.<androidx.collection.ArrayMap: void <init>()>();

        r0.<androidx.palette.graphics.Palette: java.util.Map mSelectedSwatches> = $r4;

        $r5 = specialinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch findDominantSwatch()>();

        r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch mDominantSwatch> = $r5;

        return;
    }

    public java.util.List getSwatches()
    {
        androidx.palette.graphics.Palette r0;
        java.util.List $r1, $r2;

        r0 := @this: androidx.palette.graphics.Palette;

        $r1 = r0.<androidx.palette.graphics.Palette: java.util.List mSwatches>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public java.util.List getTargets()
    {
        androidx.palette.graphics.Palette r0;
        java.util.List $r1, $r2;

        r0 := @this: androidx.palette.graphics.Palette;

        $r1 = r0.<androidx.palette.graphics.Palette: java.util.List mTargets>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public androidx.palette.graphics.Palette$Swatch getVibrantSwatch()
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target $r1;
        androidx.palette.graphics.Palette$Swatch $r2;

        r0 := @this: androidx.palette.graphics.Palette;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target VIBRANT>;

        $r2 = virtualinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch getSwatchForTarget(androidx.palette.graphics.Target)>($r1);

        return $r2;
    }

    public androidx.palette.graphics.Palette$Swatch getLightVibrantSwatch()
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target $r1;
        androidx.palette.graphics.Palette$Swatch $r2;

        r0 := @this: androidx.palette.graphics.Palette;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target LIGHT_VIBRANT>;

        $r2 = virtualinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch getSwatchForTarget(androidx.palette.graphics.Target)>($r1);

        return $r2;
    }

    public androidx.palette.graphics.Palette$Swatch getDarkVibrantSwatch()
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target $r1;
        androidx.palette.graphics.Palette$Swatch $r2;

        r0 := @this: androidx.palette.graphics.Palette;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target DARK_VIBRANT>;

        $r2 = virtualinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch getSwatchForTarget(androidx.palette.graphics.Target)>($r1);

        return $r2;
    }

    public androidx.palette.graphics.Palette$Swatch getMutedSwatch()
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target $r1;
        androidx.palette.graphics.Palette$Swatch $r2;

        r0 := @this: androidx.palette.graphics.Palette;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target MUTED>;

        $r2 = virtualinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch getSwatchForTarget(androidx.palette.graphics.Target)>($r1);

        return $r2;
    }

    public androidx.palette.graphics.Palette$Swatch getLightMutedSwatch()
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target $r1;
        androidx.palette.graphics.Palette$Swatch $r2;

        r0 := @this: androidx.palette.graphics.Palette;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target LIGHT_MUTED>;

        $r2 = virtualinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch getSwatchForTarget(androidx.palette.graphics.Target)>($r1);

        return $r2;
    }

    public androidx.palette.graphics.Palette$Swatch getDarkMutedSwatch()
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target $r1;
        androidx.palette.graphics.Palette$Swatch $r2;

        r0 := @this: androidx.palette.graphics.Palette;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target DARK_MUTED>;

        $r2 = virtualinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch getSwatchForTarget(androidx.palette.graphics.Target)>($r1);

        return $r2;
    }

    public int getVibrantColor(int)
    {
        androidx.palette.graphics.Palette r0;
        int i0, $i1;
        androidx.palette.graphics.Target $r1;

        r0 := @this: androidx.palette.graphics.Palette;

        i0 := @parameter0: int;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target VIBRANT>;

        $i1 = virtualinvoke r0.<androidx.palette.graphics.Palette: int getColorForTarget(androidx.palette.graphics.Target,int)>($r1, i0);

        return $i1;
    }

    public int getLightVibrantColor(int)
    {
        androidx.palette.graphics.Palette r0;
        int i0, $i1;
        androidx.palette.graphics.Target $r1;

        r0 := @this: androidx.palette.graphics.Palette;

        i0 := @parameter0: int;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target LIGHT_VIBRANT>;

        $i1 = virtualinvoke r0.<androidx.palette.graphics.Palette: int getColorForTarget(androidx.palette.graphics.Target,int)>($r1, i0);

        return $i1;
    }

    public int getDarkVibrantColor(int)
    {
        androidx.palette.graphics.Palette r0;
        int i0, $i1;
        androidx.palette.graphics.Target $r1;

        r0 := @this: androidx.palette.graphics.Palette;

        i0 := @parameter0: int;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target DARK_VIBRANT>;

        $i1 = virtualinvoke r0.<androidx.palette.graphics.Palette: int getColorForTarget(androidx.palette.graphics.Target,int)>($r1, i0);

        return $i1;
    }

    public int getMutedColor(int)
    {
        androidx.palette.graphics.Palette r0;
        int i0, $i1;
        androidx.palette.graphics.Target $r1;

        r0 := @this: androidx.palette.graphics.Palette;

        i0 := @parameter0: int;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target MUTED>;

        $i1 = virtualinvoke r0.<androidx.palette.graphics.Palette: int getColorForTarget(androidx.palette.graphics.Target,int)>($r1, i0);

        return $i1;
    }

    public int getLightMutedColor(int)
    {
        androidx.palette.graphics.Palette r0;
        int i0, $i1;
        androidx.palette.graphics.Target $r1;

        r0 := @this: androidx.palette.graphics.Palette;

        i0 := @parameter0: int;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target LIGHT_MUTED>;

        $i1 = virtualinvoke r0.<androidx.palette.graphics.Palette: int getColorForTarget(androidx.palette.graphics.Target,int)>($r1, i0);

        return $i1;
    }

    public int getDarkMutedColor(int)
    {
        androidx.palette.graphics.Palette r0;
        int i0, $i1;
        androidx.palette.graphics.Target $r1;

        r0 := @this: androidx.palette.graphics.Palette;

        i0 := @parameter0: int;

        $r1 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target DARK_MUTED>;

        $i1 = virtualinvoke r0.<androidx.palette.graphics.Palette: int getColorForTarget(androidx.palette.graphics.Target,int)>($r1, i0);

        return $i1;
    }

    public androidx.palette.graphics.Palette$Swatch getSwatchForTarget(androidx.palette.graphics.Target)
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        androidx.palette.graphics.Palette$Swatch $r4;

        r0 := @this: androidx.palette.graphics.Palette;

        r1 := @parameter0: androidx.palette.graphics.Target;

        $r2 = r0.<androidx.palette.graphics.Palette: java.util.Map mSelectedSwatches>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (androidx.palette.graphics.Palette$Swatch) $r3;

        return $r4;
    }

    public int getColorForTarget(androidx.palette.graphics.Target, int)
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target r1;
        int i0, $i1;
        androidx.palette.graphics.Palette$Swatch r2;

        r0 := @this: androidx.palette.graphics.Palette;

        r1 := @parameter0: androidx.palette.graphics.Target;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch getSwatchForTarget(androidx.palette.graphics.Target)>(r1);

        if r2 == null goto label1;

        $i1 = virtualinvoke r2.<androidx.palette.graphics.Palette$Swatch: int getRgb()>();

        goto label2;

     label1:
        $i1 = i0;

     label2:
        return $i1;
    }

    public androidx.palette.graphics.Palette$Swatch getDominantSwatch()
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Palette$Swatch $r1;

        r0 := @this: androidx.palette.graphics.Palette;

        $r1 = r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch mDominantSwatch>;

        return $r1;
    }

    public int getDominantColor(int)
    {
        androidx.palette.graphics.Palette r0;
        int i0, $i1;
        androidx.palette.graphics.Palette$Swatch $r1, $r2;

        r0 := @this: androidx.palette.graphics.Palette;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch mDominantSwatch>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch mDominantSwatch>;

        $i1 = virtualinvoke $r2.<androidx.palette.graphics.Palette$Swatch: int getRgb()>();

        goto label2;

     label1:
        $i1 = i0;

     label2:
        return $i1;
    }

    void generate()
    {
        androidx.palette.graphics.Palette r0;
        int i0, i1;
        androidx.palette.graphics.Target r1;
        java.util.List $r2, $r4;
        android.util.SparseBooleanArray $r3;
        java.lang.Object $r5;
        java.util.Map $r6;
        androidx.palette.graphics.Palette$Swatch $r7;

        r0 := @this: androidx.palette.graphics.Palette;

        i1 = 0;

        $r2 = r0.<androidx.palette.graphics.Palette: java.util.List mTargets>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<androidx.palette.graphics.Palette: java.util.List mTargets>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        r1 = (androidx.palette.graphics.Target) $r5;

        virtualinvoke r1.<androidx.palette.graphics.Target: void normalizeWeights()>();

        $r6 = r0.<androidx.palette.graphics.Palette: java.util.Map mSelectedSwatches>;

        $r7 = specialinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch generateScoredTarget(androidx.palette.graphics.Target)>(r1);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<androidx.palette.graphics.Palette: android.util.SparseBooleanArray mUsedColors>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void clear()>();

        return;
    }

    private androidx.palette.graphics.Palette$Swatch generateScoredTarget(androidx.palette.graphics.Target)
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target r1;
        androidx.palette.graphics.Palette$Swatch r2;
        boolean $z0;
        android.util.SparseBooleanArray $r3;
        int $i0;

        r0 := @this: androidx.palette.graphics.Palette;

        r1 := @parameter0: androidx.palette.graphics.Target;

        r2 = specialinvoke r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch getMaxScoredSwatchForTarget(androidx.palette.graphics.Target)>(r1);

        if r2 == null goto label1;

        $z0 = virtualinvoke r1.<androidx.palette.graphics.Target: boolean isExclusive()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.palette.graphics.Palette: android.util.SparseBooleanArray mUsedColors>;

        $i0 = virtualinvoke r2.<androidx.palette.graphics.Palette$Swatch: int getRgb()>();

        virtualinvoke $r3.<android.util.SparseBooleanArray: void append(int,boolean)>($i0, 1);

     label1:
        return r2;
    }

    private androidx.palette.graphics.Palette$Swatch getMaxScoredSwatchForTarget(androidx.palette.graphics.Target)
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Target r1;
        int i0, i2;
        androidx.palette.graphics.Palette$Swatch r2, r6;
        float f0, f1;
        java.util.List $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;
        byte $b1;

        r0 := @this: androidx.palette.graphics.Palette;

        r1 := @parameter0: androidx.palette.graphics.Target;

        f1 = 0.0F;

        r6 = null;

        i2 = 0;

        $r3 = r0.<androidx.palette.graphics.Palette: java.util.List mSwatches>;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

     label1:
        if i2 >= i0 goto label4;

        $r4 = r0.<androidx.palette.graphics.Palette: java.util.List mSwatches>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (androidx.palette.graphics.Palette$Swatch) $r5;

        $z0 = specialinvoke r0.<androidx.palette.graphics.Palette: boolean shouldBeScoredForTarget(androidx.palette.graphics.Palette$Swatch,androidx.palette.graphics.Target)>(r2, r1);

        if $z0 == 0 goto label3;

        f0 = specialinvoke r0.<androidx.palette.graphics.Palette: float generateScore(androidx.palette.graphics.Palette$Swatch,androidx.palette.graphics.Target)>(r2, r1);

        if r6 == null goto label2;

        $b1 = f0 cmpl f1;

        if $b1 <= 0 goto label3;

     label2:
        r6 = r2;

        f1 = f0;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r6;
    }

    private boolean shouldBeScoredForTarget(androidx.palette.graphics.Palette$Swatch, androidx.palette.graphics.Target)
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Palette$Swatch r1;
        androidx.palette.graphics.Target r2;
        float[] r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b0, $b1, $b2, $b3;
        android.util.SparseBooleanArray $r4;
        int $i4;
        boolean $z0, $z1;

        r0 := @this: androidx.palette.graphics.Palette;

        r1 := @parameter0: androidx.palette.graphics.Palette$Swatch;

        r2 := @parameter1: androidx.palette.graphics.Target;

        r3 = virtualinvoke r1.<androidx.palette.graphics.Palette$Swatch: float[] getHsl()>();

        $f0 = r3[1];

        $f1 = virtualinvoke r2.<androidx.palette.graphics.Target: float getMinimumSaturation()>();

        $b0 = $f0 cmpl $f1;

        if $b0 < 0 goto label1;

        $f2 = r3[1];

        $f3 = virtualinvoke r2.<androidx.palette.graphics.Target: float getMaximumSaturation()>();

        $b1 = $f2 cmpg $f3;

        if $b1 > 0 goto label1;

        $f4 = r3[2];

        $f5 = virtualinvoke r2.<androidx.palette.graphics.Target: float getMinimumLightness()>();

        $b2 = $f4 cmpl $f5;

        if $b2 < 0 goto label1;

        $f6 = r3[2];

        $f7 = virtualinvoke r2.<androidx.palette.graphics.Target: float getMaximumLightness()>();

        $b3 = $f6 cmpg $f7;

        if $b3 > 0 goto label1;

        $r4 = r0.<androidx.palette.graphics.Palette: android.util.SparseBooleanArray mUsedColors>;

        $i4 = virtualinvoke r1.<androidx.palette.graphics.Palette$Swatch: int getRgb()>();

        $z0 = virtualinvoke $r4.<android.util.SparseBooleanArray: boolean get(int)>($i4);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private float generateScore(androidx.palette.graphics.Palette$Swatch, androidx.palette.graphics.Target)
    {
        androidx.palette.graphics.Palette r0;
        androidx.palette.graphics.Palette$Swatch r1, $r4, $r5;
        androidx.palette.graphics.Target r2;
        float[] r3;
        int i0, $i4, $i5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, f21, f22, f23;
        byte $b1, $b2, $b3;

        r0 := @this: androidx.palette.graphics.Palette;

        r1 := @parameter0: androidx.palette.graphics.Palette$Swatch;

        r2 := @parameter1: androidx.palette.graphics.Target;

        r3 = virtualinvoke r1.<androidx.palette.graphics.Palette$Swatch: float[] getHsl()>();

        f21 = 0.0F;

        f22 = 0.0F;

        f23 = 0.0F;

        $r4 = r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch mDominantSwatch>;

        if $r4 == null goto label1;

        $r5 = r0.<androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Swatch mDominantSwatch>;

        $i5 = virtualinvoke $r5.<androidx.palette.graphics.Palette$Swatch: int getPopulation()>();

        goto label2;

     label1:
        $i5 = 1;

     label2:
        i0 = $i5;

        $f0 = virtualinvoke r2.<androidx.palette.graphics.Target: float getSaturationWeight()>();

        $b1 = $f0 cmpl 0.0F;

        if $b1 <= 0 goto label3;

        $f15 = virtualinvoke r2.<androidx.palette.graphics.Target: float getSaturationWeight()>();

        $f16 = r3[1];

        $f17 = virtualinvoke r2.<androidx.palette.graphics.Target: float getTargetSaturation()>();

        $f18 = $f16 - $f17;

        $f19 = staticinvoke <java.lang.Math: float abs(float)>($f18);

        $f20 = 1.0F - $f19;

        f21 = $f15 * $f20;

     label3:
        $f1 = virtualinvoke r2.<androidx.palette.graphics.Target: float getLightnessWeight()>();

        $b2 = $f1 cmpl 0.0F;

        if $b2 <= 0 goto label4;

        $f9 = virtualinvoke r2.<androidx.palette.graphics.Target: float getLightnessWeight()>();

        $f10 = r3[2];

        $f11 = virtualinvoke r2.<androidx.palette.graphics.Target: float getTargetLightness()>();

        $f12 = $f10 - $f11;

        $f13 = staticinvoke <java.lang.Math: float abs(float)>($f12);

        $f14 = 1.0F - $f13;

        f22 = $f9 * $f14;

     label4:
        $f2 = virtualinvoke r2.<androidx.palette.graphics.Target: float getPopulationWeight()>();

        $b3 = $f2 cmpl 0.0F;

        if $b3 <= 0 goto label5;

        $f5 = virtualinvoke r2.<androidx.palette.graphics.Target: float getPopulationWeight()>();

        $i4 = virtualinvoke r1.<androidx.palette.graphics.Palette$Swatch: int getPopulation()>();

        $f7 = (float) $i4;

        $f6 = (float) i0;

        $f8 = $f7 / $f6;

        f23 = $f5 * $f8;

     label5:
        $f3 = f21 + f22;

        $f4 = $f3 + f23;

        return $f4;
    }

    private androidx.palette.graphics.Palette$Swatch findDominantSwatch()
    {
        androidx.palette.graphics.Palette r0;
        int i0, $i1, i2, i3;
        androidx.palette.graphics.Palette$Swatch r1, r5;
        java.util.List $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.palette.graphics.Palette;

        i2 = -2147483648;

        r5 = null;

        i3 = 0;

        $r2 = r0.<androidx.palette.graphics.Palette: java.util.List mSwatches>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label1:
        if i3 >= i0 goto label3;

        $r3 = r0.<androidx.palette.graphics.Palette: java.util.List mSwatches>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i3);

        r1 = (androidx.palette.graphics.Palette$Swatch) $r4;

        $i1 = virtualinvoke r1.<androidx.palette.graphics.Palette$Swatch: int getPopulation()>();

        if $i1 <= i2 goto label2;

        r5 = r1;

        i2 = virtualinvoke r1.<androidx.palette.graphics.Palette$Swatch: int getPopulation()>();

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return r5;
    }

    static void <clinit>()
    {
        androidx.palette.graphics.Palette$1 $r0;

        $r0 = new androidx.palette.graphics.Palette$1;

        specialinvoke $r0.<androidx.palette.graphics.Palette$1: void <init>()>();

        <androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Filter DEFAULT_FILTER> = $r0;

        return;
    }

androidx.palette.graphics.Palette$1
<androidx.palette.graphics.Palette$1: float BLACK_MAX_LIGHTNESS>
<androidx.palette.graphics.Palette$1: float WHITE_MIN_LIGHTNESS>
    void <init>()
    {
        androidx.palette.graphics.Palette$1 r0;

        r0 := @this: androidx.palette.graphics.Palette$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isAllowed(int, float[])
    {
        androidx.palette.graphics.Palette$1 r0;
        int i0;
        float[] r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.palette.graphics.Palette$1;

        i0 := @parameter0: int;

        r1 := @parameter1: float[];

        $z0 = specialinvoke r0.<androidx.palette.graphics.Palette$1: boolean isWhite(float[])>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<androidx.palette.graphics.Palette$1: boolean isBlack(float[])>(r1);

        if $z1 != 0 goto label1;

        $z2 = specialinvoke r0.<androidx.palette.graphics.Palette$1: boolean isNearRedILine(float[])>(r1);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private boolean isBlack(float[])
    {
        androidx.palette.graphics.Palette$1 r0;
        float[] r1;
        float $f0;
        byte $b0;
        boolean $z0;

        r0 := @this: androidx.palette.graphics.Palette$1;

        r1 := @parameter0: float[];

        $f0 = r1[2];

        $b0 = $f0 cmpg 0.05F;

        if $b0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isWhite(float[])
    {
        androidx.palette.graphics.Palette$1 r0;
        float[] r1;
        float $f0;
        byte $b0;
        boolean $z0;

        r0 := @this: androidx.palette.graphics.Palette$1;

        r1 := @parameter0: float[];

        $f0 = r1[2];

        $b0 = $f0 cmpl 0.95F;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isNearRedILine(float[])
    {
        androidx.palette.graphics.Palette$1 r0;
        float[] r1;
        float $f0, $f1, $f2;
        byte $b0, $b1, $b2;
        boolean $z0;

        r0 := @this: androidx.palette.graphics.Palette$1;

        r1 := @parameter0: float[];

        $f0 = r1[0];

        $b0 = $f0 cmpl 10.0F;

        if $b0 < 0 goto label1;

        $f1 = r1[0];

        $b1 = $f1 cmpg 37.0F;

        if $b1 > 0 goto label1;

        $f2 = r1[1];

        $b2 = $f2 cmpg 0.82F;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

androidx.palette.graphics.Palette$Builder$1
<androidx.palette.graphics.Palette$Builder$1: androidx.palette.graphics.Palette$PaletteAsyncListener val$listener>
<androidx.palette.graphics.Palette$Builder$1: androidx.palette.graphics.Palette$Builder this$0>
    void <init>(androidx.palette.graphics.Palette$Builder, androidx.palette.graphics.Palette$PaletteAsyncListener)
    {
        androidx.palette.graphics.Palette$Builder$1 r0;
        androidx.palette.graphics.Palette$Builder r1;
        androidx.palette.graphics.Palette$PaletteAsyncListener r2;

        r0 := @this: androidx.palette.graphics.Palette$Builder$1;

        r1 := @parameter0: androidx.palette.graphics.Palette$Builder;

        r2 := @parameter1: androidx.palette.graphics.Palette$PaletteAsyncListener;

        r0.<androidx.palette.graphics.Palette$Builder$1: androidx.palette.graphics.Palette$Builder this$0> = r1;

        r0.<androidx.palette.graphics.Palette$Builder$1: androidx.palette.graphics.Palette$PaletteAsyncListener val$listener> = r2;

        specialinvoke r0.<android.os.AsyncTask: void <init>()>();

        return;
    }

    protected transient androidx.palette.graphics.Palette doInBackground(android.graphics.Bitmap[])
    {
        androidx.palette.graphics.Palette$Builder$1 r0;
        android.graphics.Bitmap[] r1;
        java.lang.Throwable r2, $r5;
        androidx.palette.graphics.Palette$Builder $r3;
        androidx.palette.graphics.Palette $r4;

        r0 := @this: androidx.palette.graphics.Palette$Builder$1;

        r1 := @parameter0: android.graphics.Bitmap[];

     label1:
        $r3 = r0.<androidx.palette.graphics.Palette$Builder$1: androidx.palette.graphics.Palette$Builder this$0>;

        $r4 = virtualinvoke $r3.<androidx.palette.graphics.Palette$Builder: androidx.palette.graphics.Palette generate()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Palette", "Exception thrown during async generate", r2);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void onPostExecute(androidx.palette.graphics.Palette)
    {
        androidx.palette.graphics.Palette$Builder$1 r0;
        androidx.palette.graphics.Palette r1;
        androidx.palette.graphics.Palette$PaletteAsyncListener $r2;

        r0 := @this: androidx.palette.graphics.Palette$Builder$1;

        r1 := @parameter0: androidx.palette.graphics.Palette;

        $r2 = r0.<androidx.palette.graphics.Palette$Builder$1: androidx.palette.graphics.Palette$PaletteAsyncListener val$listener>;

        interfaceinvoke $r2.<androidx.palette.graphics.Palette$PaletteAsyncListener: void onGenerated(androidx.palette.graphics.Palette)>(r1);

        return;
    }

    protected volatile void onPostExecute(java.lang.Object)
    {
        androidx.palette.graphics.Palette$Builder$1 r0;
        java.lang.Object r1;
        androidx.palette.graphics.Palette $r2;

        r0 := @this: androidx.palette.graphics.Palette$Builder$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.palette.graphics.Palette) r1;

        virtualinvoke r0.<androidx.palette.graphics.Palette$Builder$1: void onPostExecute(androidx.palette.graphics.Palette)>($r2);

        return;
    }

    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        androidx.palette.graphics.Palette$Builder$1 r0;
        java.lang.Object[] r1;
        android.graphics.Bitmap[] $r2;
        androidx.palette.graphics.Palette $r3;

        r0 := @this: androidx.palette.graphics.Palette$Builder$1;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (android.graphics.Bitmap[]) r1;

        $r3 = virtualinvoke r0.<androidx.palette.graphics.Palette$Builder$1: androidx.palette.graphics.Palette doInBackground(android.graphics.Bitmap[])>($r2);

        return $r3;
    }

androidx.palette.graphics.Palette$Builder
<androidx.palette.graphics.Palette$Builder: java.util.List mSwatches>
<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>
<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>
<androidx.palette.graphics.Palette$Builder: int mMaxColors>
<androidx.palette.graphics.Palette$Builder: int mResizeArea>
<androidx.palette.graphics.Palette$Builder: int mResizeMaxDimension>
<androidx.palette.graphics.Palette$Builder: java.util.List mFilters>
<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>
    public void <init>(android.graphics.Bitmap)
    {
        androidx.palette.graphics.Palette$Builder r0;
        android.graphics.Bitmap r1;
        java.util.ArrayList $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        androidx.palette.graphics.Palette$Filter $r5;
        java.util.List $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        androidx.palette.graphics.Target $r7, $r9, $r11, $r13, $r15, $r17;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets> = $r2;

        r0.<androidx.palette.graphics.Palette$Builder: int mMaxColors> = 16;

        r0.<androidx.palette.graphics.Palette$Builder: int mResizeArea> = 12544;

        r0.<androidx.palette.graphics.Palette$Builder: int mResizeMaxDimension> = -1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.palette.graphics.Palette$Builder: java.util.List mFilters> = $r3;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.Bitmap: boolean isRecycled()>();

        if $z0 == 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bitmap is not valid");

        throw $r4;

     label2:
        $r6 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mFilters>;

        $r5 = <androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Filter DEFAULT_FILTER>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap> = r1;

        r0.<androidx.palette.graphics.Palette$Builder: java.util.List mSwatches> = null;

        $r8 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        $r7 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target LIGHT_VIBRANT>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r10 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        $r9 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target VIBRANT>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r12 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        $r11 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target DARK_VIBRANT>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r14 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        $r13 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target LIGHT_MUTED>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r16 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        $r15 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target MUTED>;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r18 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        $r17 = <androidx.palette.graphics.Target: androidx.palette.graphics.Target DARK_MUTED>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r17);

        return;
    }

    public void <init>(java.util.List)
    {
        androidx.palette.graphics.Palette$Builder r0;
        java.util.List r1, $r6;
        java.util.ArrayList $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        androidx.palette.graphics.Palette$Filter $r5;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets> = $r2;

        r0.<androidx.palette.graphics.Palette$Builder: int mMaxColors> = 16;

        r0.<androidx.palette.graphics.Palette$Builder: int mResizeArea> = 12544;

        r0.<androidx.palette.graphics.Palette$Builder: int mResizeMaxDimension> = -1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.palette.graphics.Palette$Builder: java.util.List mFilters> = $r3;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("List of Swatches is not valid");

        throw $r4;

     label2:
        $r6 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mFilters>;

        $r5 = <androidx.palette.graphics.Palette: androidx.palette.graphics.Palette$Filter DEFAULT_FILTER>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        r0.<androidx.palette.graphics.Palette$Builder: java.util.List mSwatches> = r1;

        r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap> = null;

        return;
    }

    public androidx.palette.graphics.Palette$Builder maximumColorCount(int)
    {
        androidx.palette.graphics.Palette$Builder r0;
        int i0;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        i0 := @parameter0: int;

        r0.<androidx.palette.graphics.Palette$Builder: int mMaxColors> = i0;

        return r0;
    }

    public androidx.palette.graphics.Palette$Builder resizeBitmapSize(int)
    {
        androidx.palette.graphics.Palette$Builder r0;
        int i0;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        i0 := @parameter0: int;

        r0.<androidx.palette.graphics.Palette$Builder: int mResizeMaxDimension> = i0;

        r0.<androidx.palette.graphics.Palette$Builder: int mResizeArea> = -1;

        return r0;
    }

    public androidx.palette.graphics.Palette$Builder resizeBitmapArea(int)
    {
        androidx.palette.graphics.Palette$Builder r0;
        int i0;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        i0 := @parameter0: int;

        r0.<androidx.palette.graphics.Palette$Builder: int mResizeArea> = i0;

        r0.<androidx.palette.graphics.Palette$Builder: int mResizeMaxDimension> = -1;

        return r0;
    }

    public androidx.palette.graphics.Palette$Builder clearFilters()
    {
        androidx.palette.graphics.Palette$Builder r0;
        java.util.List $r1;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        $r1 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mFilters>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return r0;
    }

    public androidx.palette.graphics.Palette$Builder addFilter(androidx.palette.graphics.Palette$Filter)
    {
        androidx.palette.graphics.Palette$Builder r0;
        androidx.palette.graphics.Palette$Filter r1;
        java.util.List $r2;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        r1 := @parameter0: androidx.palette.graphics.Palette$Filter;

        if r1 == null goto label1;

        $r2 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mFilters>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return r0;
    }

    public androidx.palette.graphics.Palette$Builder setRegion(int, int, int, int)
    {
        androidx.palette.graphics.Palette$Builder r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.graphics.Bitmap $r1, $r3, $r5;
        android.graphics.Rect $r2, $r4, $r6, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>;

        if $r1 == null goto label2;

        $r2 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>;

        if $r2 != null goto label1;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion> = $r8;

     label1:
        $r4 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>;

        $r3 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>;

        $i4 = virtualinvoke $r3.<android.graphics.Bitmap: int getWidth()>();

        $r5 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>;

        $i5 = virtualinvoke $r5.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke $r4.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i4, $i5);

        $r6 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>;

        $z0 = virtualinvoke $r6.<android.graphics.Rect: boolean intersect(int,int,int,int)>(i0, i1, i2, i3);

        if $z0 != 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The given region must intersect with the Bitmap\'s dimensions.");

        throw $r7;

     label2:
        return r0;
    }

    public androidx.palette.graphics.Palette$Builder clearRegion()
    {
        androidx.palette.graphics.Palette$Builder r0;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion> = null;

        return r0;
    }

    public androidx.palette.graphics.Palette$Builder addTarget(androidx.palette.graphics.Target)
    {
        androidx.palette.graphics.Palette$Builder r0;
        androidx.palette.graphics.Target r1;
        java.util.List $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        r1 := @parameter0: androidx.palette.graphics.Target;

        $r2 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return r0;
    }

    public androidx.palette.graphics.Palette$Builder clearTargets()
    {
        androidx.palette.graphics.Palette$Builder r0;
        java.util.List $r1, $r2;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        $r1 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

     label1:
        return r0;
    }

    public androidx.palette.graphics.Palette generate()
    {
        androidx.palette.graphics.Palette$Builder r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap $r2, $r7, $r8, $r15, $r16, r17;
        java.util.List $r3, $r6, $r11, $r12, $r18, r21;
        java.lang.AssertionError $r4;
        androidx.palette.graphics.Palette $r5, r22;
        androidx.palette.graphics.ColorCutQuantizer $r9, r20;
        int[] $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        androidx.palette.graphics.Palette$Filter[] $r13, $r19;
        java.lang.Object[] $r14;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, d14;
        boolean $z0;
        java.lang.NullPointerException r23, r24, r25, r26;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        $r2 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>;

        if $r2 == null goto label07;

        $r7 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>;

        r17 = specialinvoke r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap scaleBitmapDown(android.graphics.Bitmap)>($r7);

        if null == null goto label01;

        r23 = new java.lang.NullPointerException;

        specialinvoke r23.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke logger.<android.util.TimingLogger: void addSplit(java.lang.String)>(\"Processed Bitmap\")");

        throw r23;

     label01:
        r1 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>;

        $r8 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>;

        if r17 == $r8 goto label02;

        if r1 == null goto label02;

        $i2 = virtualinvoke r17.<android.graphics.Bitmap: int getWidth()>();

        $d0 = (double) $i2;

        $r16 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>;

        $i3 = virtualinvoke $r16.<android.graphics.Bitmap: int getWidth()>();

        $d1 = (double) $i3;

        d14 = $d0 / $d1;

        $i4 = r1.<android.graphics.Rect: int left>;

        $d2 = (double) $i4;

        $d3 = $d2 * d14;

        $d4 = staticinvoke <java.lang.Math: double floor(double)>($d3);

        $i5 = (int) $d4;

        r1.<android.graphics.Rect: int left> = $i5;

        $i6 = r1.<android.graphics.Rect: int top>;

        $d5 = (double) $i6;

        $d6 = $d5 * d14;

        $d7 = staticinvoke <java.lang.Math: double floor(double)>($d6);

        $i7 = (int) $d7;

        r1.<android.graphics.Rect: int top> = $i7;

        $i8 = r1.<android.graphics.Rect: int right>;

        $d8 = (double) $i8;

        $d9 = $d8 * d14;

        $d10 = staticinvoke <java.lang.Math: double ceil(double)>($d9);

        $i9 = (int) $d10;

        $i10 = virtualinvoke r17.<android.graphics.Bitmap: int getWidth()>();

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i9, $i10);

        r1.<android.graphics.Rect: int right> = $i11;

        $i12 = r1.<android.graphics.Rect: int bottom>;

        $d11 = (double) $i12;

        $d12 = $d11 * d14;

        $d13 = staticinvoke <java.lang.Math: double ceil(double)>($d12);

        $i13 = (int) $d13;

        $i14 = virtualinvoke r17.<android.graphics.Bitmap: int getHeight()>();

        $i15 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i14);

        r1.<android.graphics.Rect: int bottom> = $i15;

     label02:
        $r9 = new androidx.palette.graphics.ColorCutQuantizer;

        $r10 = specialinvoke r0.<androidx.palette.graphics.Palette$Builder: int[] getPixelsFromBitmap(android.graphics.Bitmap)>(r17);

        $i0 = r0.<androidx.palette.graphics.Palette$Builder: int mMaxColors>;

        $r18 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mFilters>;

        $z0 = interfaceinvoke $r18.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        $r19 = null;

        goto label04;

     label03:
        $r12 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mFilters>;

        $r11 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mFilters>;

        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        $r13 = newarray (androidx.palette.graphics.Palette$Filter)[$i1];

        $r14 = interfaceinvoke $r12.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r19 = (androidx.palette.graphics.Palette$Filter[]) $r14;

     label04:
        specialinvoke $r9.<androidx.palette.graphics.ColorCutQuantizer: void <init>(int[],int,androidx.palette.graphics.Palette$Filter[])>($r10, $i0, $r19);

        r20 = $r9;

        $r15 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>;

        if r17 == $r15 goto label05;

        virtualinvoke r17.<android.graphics.Bitmap: void recycle()>();

     label05:
        r21 = virtualinvoke r20.<androidx.palette.graphics.ColorCutQuantizer: java.util.List getQuantizedColors()>();

        if null == null goto label06;

        r24 = new java.lang.NullPointerException;

        specialinvoke r24.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke logger.<android.util.TimingLogger: void addSplit(java.lang.String)>(\"Color quantization completed\")");

        throw r24;

     label06:
        goto label09;

     label07:
        $r3 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mSwatches>;

        if $r3 == null goto label08;

        r21 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mSwatches>;

        goto label09;

     label08:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label09:
        $r5 = new androidx.palette.graphics.Palette;

        $r6 = r0.<androidx.palette.graphics.Palette$Builder: java.util.List mTargets>;

        specialinvoke $r5.<androidx.palette.graphics.Palette: void <init>(java.util.List,java.util.List)>(r21, $r6);

        r22 = $r5;

        virtualinvoke r22.<androidx.palette.graphics.Palette: void generate()>();

        if null == null goto label10;

        r25 = new java.lang.NullPointerException;

        specialinvoke r25.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke logger.<android.util.TimingLogger: void addSplit(java.lang.String)>(\"Created Palette\")");

        throw r25;

     label10:
        return r22;
    }

    public android.os.AsyncTask generate(androidx.palette.graphics.Palette$PaletteAsyncListener)
    {
        androidx.palette.graphics.Palette$Builder r0;
        androidx.palette.graphics.Palette$PaletteAsyncListener r1;
        androidx.palette.graphics.Palette$Builder$1 $r2;
        android.graphics.Bitmap[] $r3;
        android.graphics.Bitmap $r4;
        java.util.concurrent.Executor $r5;
        android.os.AsyncTask $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        r1 := @parameter0: androidx.palette.graphics.Palette$PaletteAsyncListener;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener can not be null");

        throw $r7;

     label1:
        $r2 = new androidx.palette.graphics.Palette$Builder$1;

        specialinvoke $r2.<androidx.palette.graphics.Palette$Builder$1: void <init>(androidx.palette.graphics.Palette$Builder,androidx.palette.graphics.Palette$PaletteAsyncListener)>(r0, r1);

        $r5 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r3 = newarray (android.graphics.Bitmap)[1];

        $r4 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Bitmap mBitmap>;

        $r3[0] = $r4;

        $r6 = virtualinvoke $r2.<androidx.palette.graphics.Palette$Builder$1: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r5, $r3);

        return $r6;
    }

    private int[] getPixelsFromBitmap(android.graphics.Bitmap)
    {
        androidx.palette.graphics.Palette$Builder r0;
        android.graphics.Bitmap r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        int[] r2, r3;
        android.graphics.Rect $r4, $r5, $r6, $r7, $r8;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        r1 := @parameter0: android.graphics.Bitmap;

        i0 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        i1 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $i4 = i0 * i1;

        r2 = newarray (int)[$i4];

        virtualinvoke r1.<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>(r2, 0, i0, 0, 0, i0, i1);

        $r4 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>;

        if $r4 != null goto label1;

        return r2;

     label1:
        $r5 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>;

        i2 = virtualinvoke $r5.<android.graphics.Rect: int width()>();

        $r6 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>;

        i3 = virtualinvoke $r6.<android.graphics.Rect: int height()>();

        $i5 = i2 * i3;

        r3 = newarray (int)[$i5];

        i12 = 0;

     label2:
        if i12 >= i3 goto label3;

        $r7 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>;

        $i6 = $r7.<android.graphics.Rect: int top>;

        $i7 = i12 + $i6;

        $i9 = $i7 * i0;

        $r8 = r0.<androidx.palette.graphics.Palette$Builder: android.graphics.Rect mRegion>;

        $i8 = $r8.<android.graphics.Rect: int left>;

        $i11 = $i9 + $i8;

        $i10 = i12 * i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i11, r3, $i10, i2);

        i12 = i12 + 1;

        goto label2;

     label3:
        return r3;
    }

    private android.graphics.Bitmap scaleBitmapDown(android.graphics.Bitmap)
    {
        androidx.palette.graphics.Palette$Builder r0;
        android.graphics.Bitmap r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;
        byte $b16;

        r0 := @this: androidx.palette.graphics.Palette$Builder;

        r1 := @parameter0: android.graphics.Bitmap;

        d11 = -1.0;

        $i0 = r0.<androidx.palette.graphics.Palette$Builder: int mResizeArea>;

        if $i0 <= 0 goto label2;

        $i10 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i11 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        i14 = $i10 * $i11;

        $i12 = r0.<androidx.palette.graphics.Palette$Builder: int mResizeArea>;

        if i14 <= $i12 goto label1;

        $i13 = r0.<androidx.palette.graphics.Palette$Builder: int mResizeArea>;

        $d9 = (double) $i13;

        $d8 = (double) i14;

        $d10 = $d9 / $d8;

        d11 = staticinvoke <java.lang.Math: double sqrt(double)>($d10);

     label1:
        goto label3;

     label2:
        $i1 = r0.<androidx.palette.graphics.Palette$Builder: int mResizeMaxDimension>;

        if $i1 <= 0 goto label3;

        $i6 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i7 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        i15 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i7);

        $i8 = r0.<androidx.palette.graphics.Palette$Builder: int mResizeMaxDimension>;

        if i15 <= $i8 goto label3;

        $i9 = r0.<androidx.palette.graphics.Palette$Builder: int mResizeMaxDimension>;

        $d7 = (double) $i9;

        $d6 = (double) i15;

        d11 = $d7 / $d6;

     label3:
        $b16 = d11 cmpg 0.0;

        if $b16 > 0 goto label4;

        return r1;

     label4:
        $i2 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $d0 = (double) $i2;

        $d1 = $d0 * d11;

        $d2 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        $i3 = (int) $d2;

        $i4 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $d3 = (double) $i4;

        $d4 = $d3 * d11;

        $d5 = staticinvoke <java.lang.Math: double ceil(double)>($d4);

        $i5 = (int) $d5;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>(r1, $i3, $i5, 0);

        return $r2;
    }

androidx.palette.graphics.Palette$Filter
<androidx.palette.graphics.Palette$Filter: boolean isAllowed(int,float[])>
androidx.palette.graphics.Palette$PaletteAsyncListener
<androidx.palette.graphics.Palette$PaletteAsyncListener: void onGenerated(androidx.palette.graphics.Palette)>
androidx.palette.graphics.Palette$Swatch
<androidx.palette.graphics.Palette$Swatch: int mRed>
<androidx.palette.graphics.Palette$Swatch: int mGreen>
<androidx.palette.graphics.Palette$Swatch: int mBlue>
<androidx.palette.graphics.Palette$Swatch: int mRgb>
<androidx.palette.graphics.Palette$Swatch: int mPopulation>
<androidx.palette.graphics.Palette$Swatch: boolean mGeneratedTextColors>
<androidx.palette.graphics.Palette$Swatch: int mTitleTextColor>
<androidx.palette.graphics.Palette$Swatch: int mBodyTextColor>
<androidx.palette.graphics.Palette$Swatch: float[] mHsl>
    public void <init>(int, int)
    {
        androidx.palette.graphics.Palette$Swatch r0;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = staticinvoke <android.graphics.Color: int red(int)>(i0);

        r0.<androidx.palette.graphics.Palette$Swatch: int mRed> = $i2;

        $i3 = staticinvoke <android.graphics.Color: int green(int)>(i0);

        r0.<androidx.palette.graphics.Palette$Swatch: int mGreen> = $i3;

        $i4 = staticinvoke <android.graphics.Color: int blue(int)>(i0);

        r0.<androidx.palette.graphics.Palette$Swatch: int mBlue> = $i4;

        r0.<androidx.palette.graphics.Palette$Swatch: int mRgb> = i0;

        r0.<androidx.palette.graphics.Palette$Swatch: int mPopulation> = i1;

        return;
    }

    void <init>(int, int, int, int)
    {
        androidx.palette.graphics.Palette$Swatch r0;
        int i0, i1, i2, i3, $i4;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.palette.graphics.Palette$Swatch: int mRed> = i0;

        r0.<androidx.palette.graphics.Palette$Swatch: int mGreen> = i1;

        r0.<androidx.palette.graphics.Palette$Swatch: int mBlue> = i2;

        $i4 = staticinvoke <android.graphics.Color: int rgb(int,int,int)>(i0, i1, i2);

        r0.<androidx.palette.graphics.Palette$Swatch: int mRgb> = $i4;

        r0.<androidx.palette.graphics.Palette$Swatch: int mPopulation> = i3;

        return;
    }

    void <init>(float[], int)
    {
        androidx.palette.graphics.Palette$Swatch r0;
        float[] r1;
        int i0, $i1;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <androidx.core.graphics.ColorUtils: int HSLToColor(float[])>(r1);

        specialinvoke r0.<androidx.palette.graphics.Palette$Swatch: void <init>(int,int)>($i1, i0);

        r0.<androidx.palette.graphics.Palette$Swatch: float[] mHsl> = r1;

        return;
    }

    public int getRgb()
    {
        androidx.palette.graphics.Palette$Swatch r0;
        int $i0;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        $i0 = r0.<androidx.palette.graphics.Palette$Swatch: int mRgb>;

        return $i0;
    }

    public float[] getHsl()
    {
        androidx.palette.graphics.Palette$Swatch r0;
        float[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        $r1 = r0.<androidx.palette.graphics.Palette$Swatch: float[] mHsl>;

        if $r1 != null goto label1;

        $r4 = newarray (float)[3];

        r0.<androidx.palette.graphics.Palette$Swatch: float[] mHsl> = $r4;

     label1:
        $i2 = r0.<androidx.palette.graphics.Palette$Swatch: int mRed>;

        $i1 = r0.<androidx.palette.graphics.Palette$Swatch: int mGreen>;

        $i0 = r0.<androidx.palette.graphics.Palette$Swatch: int mBlue>;

        $r2 = r0.<androidx.palette.graphics.Palette$Swatch: float[] mHsl>;

        staticinvoke <androidx.core.graphics.ColorUtils: void RGBToHSL(int,int,int,float[])>($i2, $i1, $i0, $r2);

        $r3 = r0.<androidx.palette.graphics.Palette$Swatch: float[] mHsl>;

        return $r3;
    }

    public int getPopulation()
    {
        androidx.palette.graphics.Palette$Swatch r0;
        int $i0;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        $i0 = r0.<androidx.palette.graphics.Palette$Swatch: int mPopulation>;

        return $i0;
    }

    public int getTitleTextColor()
    {
        androidx.palette.graphics.Palette$Swatch r0;
        int $i0;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        specialinvoke r0.<androidx.palette.graphics.Palette$Swatch: void ensureTextColorsGenerated()>();

        $i0 = r0.<androidx.palette.graphics.Palette$Swatch: int mTitleTextColor>;

        return $i0;
    }

    public int getBodyTextColor()
    {
        androidx.palette.graphics.Palette$Swatch r0;
        int $i0;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        specialinvoke r0.<androidx.palette.graphics.Palette$Swatch: void ensureTextColorsGenerated()>();

        $i0 = r0.<androidx.palette.graphics.Palette$Swatch: int mBodyTextColor>;

        return $i0;
    }

    private void ensureTextColorsGenerated()
    {
        androidx.palette.graphics.Palette$Swatch r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        $z0 = r0.<androidx.palette.graphics.Palette$Swatch: boolean mGeneratedTextColors>;

        if $z0 != 0 goto label7;

        $i4 = r0.<androidx.palette.graphics.Palette$Swatch: int mRgb>;

        i0 = staticinvoke <androidx.core.graphics.ColorUtils: int calculateMinimumAlpha(int,int,float)>(-1, $i4, 4.5F);

        $i5 = r0.<androidx.palette.graphics.Palette$Swatch: int mRgb>;

        i1 = staticinvoke <androidx.core.graphics.ColorUtils: int calculateMinimumAlpha(int,int,float)>(-1, $i5, 3.0F);

        if i0 == -1 goto label1;

        if i1 == -1 goto label1;

        $i10 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>(-1, i0);

        r0.<androidx.palette.graphics.Palette$Swatch: int mBodyTextColor> = $i10;

        $i11 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>(-1, i1);

        r0.<androidx.palette.graphics.Palette$Swatch: int mTitleTextColor> = $i11;

        r0.<androidx.palette.graphics.Palette$Swatch: boolean mGeneratedTextColors> = 1;

        return;

     label1:
        $i6 = r0.<androidx.palette.graphics.Palette$Swatch: int mRgb>;

        i2 = staticinvoke <androidx.core.graphics.ColorUtils: int calculateMinimumAlpha(int,int,float)>(-16777216, $i6, 4.5F);

        $i7 = r0.<androidx.palette.graphics.Palette$Swatch: int mRgb>;

        i3 = staticinvoke <androidx.core.graphics.ColorUtils: int calculateMinimumAlpha(int,int,float)>(-16777216, $i7, 3.0F);

        if i2 == -1 goto label2;

        if i3 == -1 goto label2;

        $i8 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>(-16777216, i2);

        r0.<androidx.palette.graphics.Palette$Swatch: int mBodyTextColor> = $i8;

        $i9 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>(-16777216, i3);

        r0.<androidx.palette.graphics.Palette$Swatch: int mTitleTextColor> = $i9;

        r0.<androidx.palette.graphics.Palette$Swatch: boolean mGeneratedTextColors> = 1;

        return;

     label2:
        if i0 == -1 goto label3;

        $i12 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>(-1, i0);

        goto label4;

     label3:
        $i12 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>(-16777216, i2);

     label4:
        r0.<androidx.palette.graphics.Palette$Swatch: int mBodyTextColor> = $i12;

        if i1 == -1 goto label5;

        $i13 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>(-1, i1);

        goto label6;

     label5:
        $i13 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>(-16777216, i3);

     label6:
        r0.<androidx.palette.graphics.Palette$Swatch: int mTitleTextColor> = $i13;

        r0.<androidx.palette.graphics.Palette$Swatch: boolean mGeneratedTextColors> = 1;

     label7:
        return;
    }

    public java.lang.String toString()
    {
        androidx.palette.graphics.Palette$Swatch r0;
        java.lang.StringBuilder $r1, $r4, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r22, $r23;
        java.lang.Class $r2;
        java.lang.String $r3, $r5, $r10, $r17, $r21, $r24;
        int $i0, $i1, $i2, $i3;
        float[] $r9;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        $r1 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [RGB: #");

        $i0 = virtualinvoke r0.<androidx.palette.graphics.Palette$Swatch: int getRgb()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [HSL: ");

        $r9 = virtualinvoke r0.<androidx.palette.graphics.Palette$Swatch: float[] getHsl()>();

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Population: ");

        $i1 = r0.<androidx.palette.graphics.Palette$Swatch: int mPopulation>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Title Text: #");

        $i2 = virtualinvoke r0.<androidx.palette.graphics.Palette$Swatch: int getTitleTextColor()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [Body Text: #");

        $i3 = virtualinvoke r0.<androidx.palette.graphics.Palette$Swatch: int getBodyTextColor()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r24;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.palette.graphics.Palette$Swatch r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (androidx.palette.graphics.Palette$Swatch) r1;

        $i1 = r0.<androidx.palette.graphics.Palette$Swatch: int mPopulation>;

        $i0 = r2.<androidx.palette.graphics.Palette$Swatch: int mPopulation>;

        if $i1 != $i0 goto label4;

        $i3 = r0.<androidx.palette.graphics.Palette$Swatch: int mRgb>;

        $i2 = r2.<androidx.palette.graphics.Palette$Swatch: int mRgb>;

        if $i3 != $i2 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public int hashCode()
    {
        androidx.palette.graphics.Palette$Swatch r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.palette.graphics.Palette$Swatch;

        $i0 = r0.<androidx.palette.graphics.Palette$Swatch: int mRgb>;

        $i2 = 31 * $i0;

        $i1 = r0.<androidx.palette.graphics.Palette$Swatch: int mPopulation>;

        $i3 = $i2 + $i1;

        return $i3;
    }

