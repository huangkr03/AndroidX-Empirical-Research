kotlin.random.RandomKt
    public static final kotlin.random.Random Random(int)
    {
        int $i0, $i1;
        kotlin.random.XorWowRandom $r0;

        $i0 := @parameter0: int;

        $r0 = new kotlin.random.XorWowRandom;

        $i1 = $i0 >> 31;

        specialinvoke $r0.<kotlin.random.XorWowRandom: void <init>(int,int)>($i0, $i1);

        return $r0;
    }

    public static final kotlin.random.Random Random(long)
    {
        int $i0, $i1;
        kotlin.random.XorWowRandom $r0;
        long $l2;

        $l2 := @parameter0: long;

        $r0 = new kotlin.random.XorWowRandom;

        $i1 = (int) $l2;

        $l2 = $l2 >> 32;

        $i0 = (int) $l2;

        specialinvoke $r0.<kotlin.random.XorWowRandom: void <init>(int,int)>($i1, $i0);

        return $r0;
    }

    public static final java.lang.String boundsErrorMessage(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "from");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "until");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Random range is empty: [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static final void checkRangeBounds(double, double)
    {
        double $d0, $d1;
        byte $b0;
        boolean $z0;
        java.lang.Double $r0, $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        $d1 := @parameter0: double;

        $d0 := @parameter1: double;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r2 = staticinvoke <kotlin.random.RandomKt: java.lang.String boundsErrorMessage(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public static final void checkRangeBounds(int, int)
    {
        int $i0, $i1;
        boolean $z0;
        java.lang.Integer $r0, $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 <= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2 = staticinvoke <kotlin.random.RandomKt: java.lang.String boundsErrorMessage(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public static final void checkRangeBounds(long, long)
    {
        long $l0, $l1;
        byte $b2;
        boolean $z0;
        java.lang.Long $r0, $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2 = staticinvoke <kotlin.random.RandomKt: java.lang.String boundsErrorMessage(java.lang.Object,java.lang.Object)>($r0, $r1);

        $r3 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    public static final int fastLog2(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0);

        $i0 = 31 - $i0;

        return $i0;
    }

    public static final int nextInt(kotlin.random.Random, kotlin.ranges.IntRange)
    {
        kotlin.random.Random $r0;
        kotlin.ranges.IntRange $r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: kotlin.random.Random;

        $r1 := @parameter1: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $z0 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $i0 = virtualinvoke $r1.<kotlin.ranges.IntRange: int getLast()>();

        if $i0 >= 2147483647 goto label1;

        $i0 = virtualinvoke $r1.<kotlin.ranges.IntRange: int getFirst()>();

        $i1 = virtualinvoke $r1.<kotlin.ranges.IntRange: int getLast()>();

        $i1 = $i1 + 1;

        $i0 = virtualinvoke $r0.<kotlin.random.Random: int nextInt(int,int)>($i0, $i1);

        return $i0;

     label1:
        $i0 = virtualinvoke $r1.<kotlin.ranges.IntRange: int getFirst()>();

        if $i0 <= -2147483648 goto label2;

        $i0 = virtualinvoke $r1.<kotlin.ranges.IntRange: int getFirst()>();

        $i0 = $i0 + -1;

        $i1 = virtualinvoke $r1.<kotlin.ranges.IntRange: int getLast()>();

        $i0 = virtualinvoke $r0.<kotlin.random.Random: int nextInt(int,int)>($i0, $i1);

        $i0 = $i0 + 1;

        return $i0;

     label2:
        $i0 = virtualinvoke $r0.<kotlin.random.Random: int nextInt()>();

        return $i0;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get random in empty range: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }

    public static final long nextLong(kotlin.random.Random, kotlin.ranges.LongRange)
    {
        kotlin.random.Random $r0;
        kotlin.ranges.LongRange $r1;
        boolean $z0;
        long $l0, $l2;
        byte $b1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: kotlin.random.Random;

        $r1 := @parameter1: kotlin.ranges.LongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $z0 = virtualinvoke $r1.<kotlin.ranges.LongRange: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $l0 = virtualinvoke $r1.<kotlin.ranges.LongRange: long getLast()>();

        $b1 = $l0 cmp 9223372036854775807L;

        if $b1 >= 0 goto label2;

        $l0 = virtualinvoke $r1.<kotlin.ranges.LongRange: long getFirst()>();

        $l2 = virtualinvoke $r1.<kotlin.ranges.LongRange: long getLast()>();

        $l2 = $l2 + 1L;

        $l0 = virtualinvoke $r0.<kotlin.random.Random: long nextLong(long,long)>($l0, $l2);

     label1:
        goto label4;

     label2:
        $l0 = virtualinvoke $r1.<kotlin.ranges.LongRange: long getFirst()>();

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 <= 0 goto label3;

        $l0 = virtualinvoke $r1.<kotlin.ranges.LongRange: long getFirst()>();

        $l0 = $l0 + -1L;

        $l2 = virtualinvoke $r1.<kotlin.ranges.LongRange: long getLast()>();

        $l0 = virtualinvoke $r0.<kotlin.random.Random: long nextLong(long,long)>($l0, $l2);

        $l0 = $l0 + 1L;

        goto label4;

     label3:
        $l0 = virtualinvoke $r0.<kotlin.random.Random: long nextLong()>();

        goto label1;

     label4:
        return $l0;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get random in empty range: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        goto label6;

     label6:
        throw $r2;
    }

    public static final int takeUpperBits(int, int)
    {
        int $i0, $i1, $i2;

        $i1 := @parameter0: int;

        $i2 := @parameter1: int;

        $i0 = 32 - $i2;

        $i1 = $i1 >>> $i0;

        $i2 = neg $i2;

        $i2 = $i2 >> 31;

        $i1 = $i1 & $i2;

        return $i1;
    }

