androidx.compose.ui.platform.DrawChildContainer
<androidx.compose.ui.platform.DrawChildContainer: boolean isDrawing>
    public void <init>(android.content.Context)
    {
        androidx.compose.ui.platform.DrawChildContainer r0;
        android.content.Context r1;
        int $i0;
        java.lang.Boolean $r2;

        r0 := @this: androidx.compose.ui.platform.DrawChildContainer;

        r1 := @parameter0: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context)>(r1);

        virtualinvoke r0.<androidx.compose.ui.platform.DrawChildContainer: void setClipChildren(boolean)>(0);

        $i0 = <androidx.compose.ui.R$id: int hide_in_inspector_tag>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r0.<androidx.compose.ui.platform.DrawChildContainer: void setTag(int,java.lang.Object)>($i0, $r2);

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        androidx.compose.ui.platform.DrawChildContainer r0;
        boolean z0;
        int i0, i1, i2, i3;

        r0 := @this: androidx.compose.ui.platform.DrawChildContainer;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    protected void onMeasure(int, int)
    {
        androidx.compose.ui.platform.DrawChildContainer r0;
        int i0, i1;

        r0 := @this: androidx.compose.ui.platform.DrawChildContainer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<androidx.compose.ui.platform.DrawChildContainer: void setMeasuredDimension(int,int)>(0, 0);

        return;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        androidx.compose.ui.platform.DrawChildContainer r0;
        android.graphics.Canvas r1;
        int i0, i1;
        androidx.compose.ui.platform.ViewLayer r2;
        android.view.View $r3;
        boolean $z0, z1;
        java.lang.Throwable $r4, r5;

        r0 := @this: androidx.compose.ui.platform.DrawChildContainer;

        r1 := @parameter0: android.graphics.Canvas;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        z1 = 0;

        i1 = 0;

        i0 = specialinvoke r0.<android.view.ViewGroup: int getChildCount()>();

     label1:
        if i1 >= i0 goto label3;

        $r3 = virtualinvoke r0.<androidx.compose.ui.platform.DrawChildContainer: android.view.View getChildAt(int)>(i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r3, "null cannot be cast to non-null type androidx.compose.ui.platform.ViewLayer");

        r2 = (androidx.compose.ui.platform.ViewLayer) $r3;

        $z0 = virtualinvoke r2.<androidx.compose.ui.platform.ViewLayer: boolean isInvalidated()>();

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        if z1 == 0 goto label8;

        r0.<androidx.compose.ui.platform.DrawChildContainer: boolean isDrawing> = 1;

     label4:
        specialinvoke r0.<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>(r1);

     label5:
        r0.<androidx.compose.ui.platform.DrawChildContainer: boolean isDrawing> = 0;

        goto label8;

     label6:
        $r4 := @caughtexception;

        r5 = $r4;

     label7:
        r0.<androidx.compose.ui.platform.DrawChildContainer: boolean isDrawing> = 0;

        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getChildCount()
    {
        androidx.compose.ui.platform.DrawChildContainer r0;
        boolean $z0;
        int $i0;

        r0 := @this: androidx.compose.ui.platform.DrawChildContainer;

        $z0 = r0.<androidx.compose.ui.platform.DrawChildContainer: boolean isDrawing>;

        if $z0 == 0 goto label1;

        $i0 = specialinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public final void drawChild$ui_release(androidx.compose.ui.graphics.Canvas, android.view.View, long)
    {
        androidx.compose.ui.platform.DrawChildContainer r0;
        androidx.compose.ui.graphics.Canvas r1;
        android.view.View r2;
        long l0;
        android.graphics.Canvas $r3;

        r0 := @this: androidx.compose.ui.platform.DrawChildContainer;

        r1 := @parameter0: androidx.compose.ui.graphics.Canvas;

        r2 := @parameter1: android.view.View;

        l0 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "canvas");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "view");

        $r3 = staticinvoke <androidx.compose.ui.graphics.AndroidCanvas_androidKt: android.graphics.Canvas getNativeCanvas(androidx.compose.ui.graphics.Canvas)>(r1);

        specialinvoke r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>($r3, r2, l0);

        return;
    }

