kotlinx.coroutines.internal.WeakMapCtorCache
<kotlinx.coroutines.internal.WeakMapCtorCache: kotlinx.coroutines.internal.WeakMapCtorCache INSTANCE>
<kotlinx.coroutines.internal.WeakMapCtorCache: java.util.concurrent.locks.ReentrantReadWriteLock cacheLock>
<kotlinx.coroutines.internal.WeakMapCtorCache: java.util.WeakHashMap exceptionCtors>
    static void <clinit>()
    {
        kotlinx.coroutines.internal.WeakMapCtorCache $r0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;
        java.util.WeakHashMap $r2;

        $r0 = new kotlinx.coroutines.internal.WeakMapCtorCache;

        specialinvoke $r0.<kotlinx.coroutines.internal.WeakMapCtorCache: void <init>()>();

        <kotlinx.coroutines.internal.WeakMapCtorCache: kotlinx.coroutines.internal.WeakMapCtorCache INSTANCE> = $r0;

        $r1 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        <kotlinx.coroutines.internal.WeakMapCtorCache: java.util.concurrent.locks.ReentrantReadWriteLock cacheLock> = $r1;

        $r2 = new java.util.WeakHashMap;

        specialinvoke $r2.<java.util.WeakHashMap: void <init>()>();

        <kotlinx.coroutines.internal.WeakMapCtorCache: java.util.WeakHashMap exceptionCtors> = $r2;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.internal.WeakMapCtorCache $r0;

        $r0 := @this: kotlinx.coroutines.internal.WeakMapCtorCache;

        specialinvoke $r0.<kotlinx.coroutines.internal.CtorCache: void <init>()>();

        return;
    }

    public kotlin.jvm.functions.Function1 get(java.lang.Class)
    {
        kotlinx.coroutines.internal.WeakMapCtorCache $r0;
        java.lang.Class $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock $r2;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r3;
        java.util.WeakHashMap $r4;
        java.lang.Object $r5;
        kotlin.jvm.functions.Function1 $r6;
        int $i0, $i1, $i2;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r7;
        java.lang.Throwable $r8, $r9;
        java.util.Map r10;

        $r0 := @this: kotlinx.coroutines.internal.WeakMapCtorCache;

        $r1 := @parameter0: java.lang.Class;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key");

        $r2 = <kotlinx.coroutines.internal.WeakMapCtorCache: java.util.concurrent.locks.ReentrantReadWriteLock cacheLock>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r4 = <kotlinx.coroutines.internal.WeakMapCtorCache: java.util.WeakHashMap exceptionCtors>;

     label01:
        $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r1);

     label02:
        $r6 = (kotlin.jvm.functions.Function1) $r5;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        if $r6 != null goto label20;

        $r3 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        $i0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()>();

        $i1 = 0;

        if $i0 != 0 goto label03;

        $i0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()>();

        goto label04;

     label03:
        $i0 = 0;

     label04:
        $i2 = 0;

     label05:
        if $i2 >= $i0 goto label06;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $i2 = $i2 + 1;

        goto label05;

     label06:
        $r7 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        $r4 = <kotlinx.coroutines.internal.WeakMapCtorCache: java.util.WeakHashMap exceptionCtors>;

     label07:
        $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r1);

     label08:
        $r6 = (kotlin.jvm.functions.Function1) $r5;

        if $r6 == null goto label11;

     label09:
        if $i1 >= $i0 goto label10;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $i1 = $i1 + 1;

        goto label09;

     label10:
        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return $r6;

     label11:
        $r6 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: kotlin.jvm.functions.Function1 access$createConstructor(java.lang.Class)>($r1);

        r10 = (java.util.Map) $r4;

     label12:
        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

     label13:
        if $i1 >= $i0 goto label14;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $i1 = $i1 + 1;

        goto label13;

     label14:
        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return $r6;

     label15:
        $r8 := @caughtexception;

     label16:
        if $i1 >= $i0 goto label17;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $i1 = $i1 + 1;

        goto label16;

     label17:
        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r8;

     label18:
        $r9 := @caughtexception;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        goto label19;

     label19:
        throw $r9;

     label20:
        return $r6;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
    }

