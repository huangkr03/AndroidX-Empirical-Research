androidx.biometric.CryptoObjectUtils
<androidx.biometric.CryptoObjectUtils: java.lang.String TAG>
<androidx.biometric.CryptoObjectUtils: java.lang.String FAKE_KEY_NAME>
<androidx.biometric.CryptoObjectUtils: java.lang.String KEYSTORE_INSTANCE>
    private void <init>()
    {
        androidx.biometric.CryptoObjectUtils r0;

        r0 := @this: androidx.biometric.CryptoObjectUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static androidx.biometric.BiometricPrompt$CryptoObject unwrapFromBiometricPrompt(android.hardware.biometrics.BiometricPrompt$CryptoObject)
    {
        android.hardware.biometrics.BiometricPrompt$CryptoObject r0;
        javax.crypto.Cipher r1;
        java.security.Signature r2;
        javax.crypto.Mac r3;
        android.security.identity.IdentityCredential r4;
        int $i0;
        androidx.biometric.BiometricPrompt$CryptoObject $r5, $r6, $r7, $r8;

        r0 := @parameter0: android.hardware.biometrics.BiometricPrompt$CryptoObject;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api28Impl: javax.crypto.Cipher getCipher(android.hardware.biometrics.BiometricPrompt$CryptoObject)>(r0);

        if r1 == null goto label2;

        $r8 = new androidx.biometric.BiometricPrompt$CryptoObject;

        specialinvoke $r8.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Cipher)>(r1);

        return $r8;

     label2:
        r2 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api28Impl: java.security.Signature getSignature(android.hardware.biometrics.BiometricPrompt$CryptoObject)>(r0);

        if r2 == null goto label3;

        $r7 = new androidx.biometric.BiometricPrompt$CryptoObject;

        specialinvoke $r7.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(java.security.Signature)>(r2);

        return $r7;

     label3:
        r3 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api28Impl: javax.crypto.Mac getMac(android.hardware.biometrics.BiometricPrompt$CryptoObject)>(r0);

        if r3 == null goto label4;

        $r6 = new androidx.biometric.BiometricPrompt$CryptoObject;

        specialinvoke $r6.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Mac)>(r3);

        return $r6;

     label4:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 30 goto label5;

        r4 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api30Impl: android.security.identity.IdentityCredential getIdentityCredential(android.hardware.biometrics.BiometricPrompt$CryptoObject)>(r0);

        if r4 == null goto label5;

        $r5 = new androidx.biometric.BiometricPrompt$CryptoObject;

        specialinvoke $r5.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(android.security.identity.IdentityCredential)>(r4);

        return $r5;

     label5:
        return null;
    }

    static android.hardware.biometrics.BiometricPrompt$CryptoObject wrapForBiometricPrompt(androidx.biometric.BiometricPrompt$CryptoObject)
    {
        androidx.biometric.BiometricPrompt$CryptoObject r0;
        javax.crypto.Cipher r1;
        java.security.Signature r2;
        javax.crypto.Mac r3;
        android.security.identity.IdentityCredential r4;
        int $i0;
        android.hardware.biometrics.BiometricPrompt$CryptoObject $r5, $r6, $r7, $r8;

        r0 := @parameter0: androidx.biometric.BiometricPrompt$CryptoObject;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = virtualinvoke r0.<androidx.biometric.BiometricPrompt$CryptoObject: javax.crypto.Cipher getCipher()>();

        if r1 == null goto label2;

        $r8 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api28Impl: android.hardware.biometrics.BiometricPrompt$CryptoObject create(javax.crypto.Cipher)>(r1);

        return $r8;

     label2:
        r2 = virtualinvoke r0.<androidx.biometric.BiometricPrompt$CryptoObject: java.security.Signature getSignature()>();

        if r2 == null goto label3;

        $r7 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api28Impl: android.hardware.biometrics.BiometricPrompt$CryptoObject create(java.security.Signature)>(r2);

        return $r7;

     label3:
        r3 = virtualinvoke r0.<androidx.biometric.BiometricPrompt$CryptoObject: javax.crypto.Mac getMac()>();

        if r3 == null goto label4;

        $r6 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api28Impl: android.hardware.biometrics.BiometricPrompt$CryptoObject create(javax.crypto.Mac)>(r3);

        return $r6;

     label4:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 30 goto label5;

        r4 = virtualinvoke r0.<androidx.biometric.BiometricPrompt$CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()>();

        if r4 == null goto label5;

        $r5 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api30Impl: android.hardware.biometrics.BiometricPrompt$CryptoObject create(android.security.identity.IdentityCredential)>(r4);

        return $r5;

     label5:
        return null;
    }

    static androidx.biometric.BiometricPrompt$CryptoObject unwrapFromFingerprintManager(androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)
    {
        androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject r0;
        javax.crypto.Cipher r1;
        java.security.Signature r2;
        javax.crypto.Mac r3;
        androidx.biometric.BiometricPrompt$CryptoObject $r4, $r5, $r6;

        r0 := @parameter0: androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = virtualinvoke r0.<androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject: javax.crypto.Cipher getCipher()>();

        if r1 == null goto label2;

        $r6 = new androidx.biometric.BiometricPrompt$CryptoObject;

        specialinvoke $r6.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Cipher)>(r1);

        return $r6;

     label2:
        r2 = virtualinvoke r0.<androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject: java.security.Signature getSignature()>();

        if r2 == null goto label3;

        $r5 = new androidx.biometric.BiometricPrompt$CryptoObject;

        specialinvoke $r5.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(java.security.Signature)>(r2);

        return $r5;

     label3:
        r3 = virtualinvoke r0.<androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject: javax.crypto.Mac getMac()>();

        if r3 == null goto label4;

        $r4 = new androidx.biometric.BiometricPrompt$CryptoObject;

        specialinvoke $r4.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Mac)>(r3);

        return $r4;

     label4:
        return null;
    }

    static androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject wrapForFingerprintManager(androidx.biometric.BiometricPrompt$CryptoObject)
    {
        androidx.biometric.BiometricPrompt$CryptoObject r0;
        javax.crypto.Cipher r1;
        java.security.Signature r2;
        javax.crypto.Mac r3;
        int $i0;
        android.security.identity.IdentityCredential $r4;
        androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject $r5, $r6, $r7;

        r0 := @parameter0: androidx.biometric.BiometricPrompt$CryptoObject;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = virtualinvoke r0.<androidx.biometric.BiometricPrompt$CryptoObject: javax.crypto.Cipher getCipher()>();

        if r1 == null goto label2;

        $r7 = new androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject;

        specialinvoke $r7.<androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject: void <init>(javax.crypto.Cipher)>(r1);

        return $r7;

     label2:
        r2 = virtualinvoke r0.<androidx.biometric.BiometricPrompt$CryptoObject: java.security.Signature getSignature()>();

        if r2 == null goto label3;

        $r6 = new androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject;

        specialinvoke $r6.<androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject: void <init>(java.security.Signature)>(r2);

        return $r6;

     label3:
        r3 = virtualinvoke r0.<androidx.biometric.BiometricPrompt$CryptoObject: javax.crypto.Mac getMac()>();

        if r3 == null goto label4;

        $r5 = new androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject;

        specialinvoke $r5.<androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject: void <init>(javax.crypto.Mac)>(r3);

        return $r5;

     label4:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 30 goto label5;

        $r4 = virtualinvoke r0.<androidx.biometric.BiometricPrompt$CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()>();

        if $r4 == null goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CryptoObjectUtils", "Identity credential is not supported by FingerprintManager.");

        return null;

     label5:
        return null;
    }

    static androidx.biometric.BiometricPrompt$CryptoObject createFakeCryptoObject()
    {
        android.security.keystore.KeyGenParameterSpec$Builder r0;
        javax.crypto.KeyGenerator r1;
        android.security.keystore.KeyGenParameterSpec r2;
        javax.crypto.SecretKey r3;
        javax.crypto.Cipher r4;
        java.security.Key $r6;
        androidx.biometric.BiometricPrompt$CryptoObject $r7;
        java.lang.Throwable $r8, r10;
        java.security.KeyStore r9;

     label1:
        r9 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r9.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        r0 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api23Impl: android.security.keystore.KeyGenParameterSpec$Builder createKeyGenParameterSpecBuilder(java.lang.String,int)>("androidxBiometric", 3);

        staticinvoke <androidx.biometric.CryptoObjectUtils$Api23Impl: void setBlockModeCBC(android.security.keystore.KeyGenParameterSpec$Builder)>(r0);

        staticinvoke <androidx.biometric.CryptoObjectUtils$Api23Impl: void setEncryptionPaddingPKCS7(android.security.keystore.KeyGenParameterSpec$Builder)>(r0);

        r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>("AES", "AndroidKeyStore");

        r2 = staticinvoke <androidx.biometric.CryptoObjectUtils$Api23Impl: android.security.keystore.KeyGenParameterSpec buildKeyGenParameterSpec(android.security.keystore.KeyGenParameterSpec$Builder)>(r0);

        staticinvoke <androidx.biometric.CryptoObjectUtils$Api23Impl: void initKeyGenerator(javax.crypto.KeyGenerator,android.security.keystore.KeyGenParameterSpec)>(r1, r2);

        virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        $r6 = virtualinvoke r9.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>("androidxBiometric", null);

        r3 = (javax.crypto.SecretKey) $r6;

        r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS7Padding");

        virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r3);

        $r7 = new androidx.biometric.BiometricPrompt$CryptoObject;

        specialinvoke $r7.<androidx.biometric.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Cipher)>(r4);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("CryptoObjectUtils", "Failed to create fake crypto object.", r10);

        return null;

        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
        catch java.security.NoSuchProviderException from label1 to label2 with label3;
    }

androidx.biometric.CryptoObjectUtils$Api23Impl
    private void <init>()
    {
        androidx.biometric.CryptoObjectUtils$Api23Impl r0;

        r0 := @this: androidx.biometric.CryptoObjectUtils$Api23Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.security.keystore.KeyGenParameterSpec$Builder createKeyGenParameterSpecBuilder(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        android.security.keystore.KeyGenParameterSpec$Builder $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new android.security.keystore.KeyGenParameterSpec$Builder;

        specialinvoke $r1.<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(java.lang.String,int)>(r0, i0);

        return $r1;
    }

    static void setBlockModeCBC(android.security.keystore.KeyGenParameterSpec$Builder)
    {
        android.security.keystore.KeyGenParameterSpec$Builder r0;
        java.lang.String[] $r1;

        r0 := @parameter0: android.security.keystore.KeyGenParameterSpec$Builder;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "CBC";

        virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setBlockModes(java.lang.String[])>($r1);

        return;
    }

    static void setEncryptionPaddingPKCS7(android.security.keystore.KeyGenParameterSpec$Builder)
    {
        android.security.keystore.KeyGenParameterSpec$Builder r0;
        java.lang.String[] $r1;

        r0 := @parameter0: android.security.keystore.KeyGenParameterSpec$Builder;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "PKCS7Padding";

        virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setEncryptionPaddings(java.lang.String[])>($r1);

        return;
    }

    static android.security.keystore.KeyGenParameterSpec buildKeyGenParameterSpec(android.security.keystore.KeyGenParameterSpec$Builder)
    {
        android.security.keystore.KeyGenParameterSpec$Builder r0;
        android.security.keystore.KeyGenParameterSpec $r1;

        r0 := @parameter0: android.security.keystore.KeyGenParameterSpec$Builder;

        $r1 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()>();

        return $r1;
    }

    static void initKeyGenerator(javax.crypto.KeyGenerator, android.security.keystore.KeyGenParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.KeyGenerator r0;
        android.security.keystore.KeyGenParameterSpec r1;

        r0 := @parameter0: javax.crypto.KeyGenerator;

        r1 := @parameter1: android.security.keystore.KeyGenParameterSpec;

        virtualinvoke r0.<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec)>(r1);

        return;
    }

androidx.biometric.CryptoObjectUtils$Api28Impl
    private void <init>()
    {
        androidx.biometric.CryptoObjectUtils$Api28Impl r0;

        r0 := @this: androidx.biometric.CryptoObjectUtils$Api28Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.hardware.biometrics.BiometricPrompt$CryptoObject create(javax.crypto.Cipher)
    {
        javax.crypto.Cipher r0;
        android.hardware.biometrics.BiometricPrompt$CryptoObject $r1;

        r0 := @parameter0: javax.crypto.Cipher;

        $r1 = new android.hardware.biometrics.BiometricPrompt$CryptoObject;

        specialinvoke $r1.<android.hardware.biometrics.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Cipher)>(r0);

        return $r1;
    }

    static android.hardware.biometrics.BiometricPrompt$CryptoObject create(java.security.Signature)
    {
        java.security.Signature r0;
        android.hardware.biometrics.BiometricPrompt$CryptoObject $r1;

        r0 := @parameter0: java.security.Signature;

        $r1 = new android.hardware.biometrics.BiometricPrompt$CryptoObject;

        specialinvoke $r1.<android.hardware.biometrics.BiometricPrompt$CryptoObject: void <init>(java.security.Signature)>(r0);

        return $r1;
    }

    static android.hardware.biometrics.BiometricPrompt$CryptoObject create(javax.crypto.Mac)
    {
        javax.crypto.Mac r0;
        android.hardware.biometrics.BiometricPrompt$CryptoObject $r1;

        r0 := @parameter0: javax.crypto.Mac;

        $r1 = new android.hardware.biometrics.BiometricPrompt$CryptoObject;

        specialinvoke $r1.<android.hardware.biometrics.BiometricPrompt$CryptoObject: void <init>(javax.crypto.Mac)>(r0);

        return $r1;
    }

    static javax.crypto.Cipher getCipher(android.hardware.biometrics.BiometricPrompt$CryptoObject)
    {
        android.hardware.biometrics.BiometricPrompt$CryptoObject r0;
        javax.crypto.Cipher $r1;

        r0 := @parameter0: android.hardware.biometrics.BiometricPrompt$CryptoObject;

        $r1 = virtualinvoke r0.<android.hardware.biometrics.BiometricPrompt$CryptoObject: javax.crypto.Cipher getCipher()>();

        return $r1;
    }

    static java.security.Signature getSignature(android.hardware.biometrics.BiometricPrompt$CryptoObject)
    {
        android.hardware.biometrics.BiometricPrompt$CryptoObject r0;
        java.security.Signature $r1;

        r0 := @parameter0: android.hardware.biometrics.BiometricPrompt$CryptoObject;

        $r1 = virtualinvoke r0.<android.hardware.biometrics.BiometricPrompt$CryptoObject: java.security.Signature getSignature()>();

        return $r1;
    }

    static javax.crypto.Mac getMac(android.hardware.biometrics.BiometricPrompt$CryptoObject)
    {
        android.hardware.biometrics.BiometricPrompt$CryptoObject r0;
        javax.crypto.Mac $r1;

        r0 := @parameter0: android.hardware.biometrics.BiometricPrompt$CryptoObject;

        $r1 = virtualinvoke r0.<android.hardware.biometrics.BiometricPrompt$CryptoObject: javax.crypto.Mac getMac()>();

        return $r1;
    }

androidx.biometric.CryptoObjectUtils$Api30Impl
    private void <init>()
    {
        androidx.biometric.CryptoObjectUtils$Api30Impl r0;

        r0 := @this: androidx.biometric.CryptoObjectUtils$Api30Impl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static android.hardware.biometrics.BiometricPrompt$CryptoObject create(android.security.identity.IdentityCredential)
    {
        android.security.identity.IdentityCredential r0;
        android.hardware.biometrics.BiometricPrompt$CryptoObject $r1;

        r0 := @parameter0: android.security.identity.IdentityCredential;

        $r1 = new android.hardware.biometrics.BiometricPrompt$CryptoObject;

        specialinvoke $r1.<android.hardware.biometrics.BiometricPrompt$CryptoObject: void <init>(android.security.identity.IdentityCredential)>(r0);

        return $r1;
    }

    static android.security.identity.IdentityCredential getIdentityCredential(android.hardware.biometrics.BiometricPrompt$CryptoObject)
    {
        android.hardware.biometrics.BiometricPrompt$CryptoObject r0;
        android.security.identity.IdentityCredential $r1;

        r0 := @parameter0: android.hardware.biometrics.BiometricPrompt$CryptoObject;

        $r1 = virtualinvoke r0.<android.hardware.biometrics.BiometricPrompt$CryptoObject: android.security.identity.IdentityCredential getIdentityCredential()>();

        return $r1;
    }

