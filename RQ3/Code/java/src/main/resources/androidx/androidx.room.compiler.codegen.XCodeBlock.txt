androidx.room.compiler.codegen.XCodeBlock
<androidx.room.compiler.codegen.XCodeBlock: androidx.room.compiler.codegen.XCodeBlock$Companion Companion>
    static void <clinit>()
    {
        androidx.room.compiler.codegen.XCodeBlock$Companion $r0;

        $r0 = <androidx.room.compiler.codegen.XCodeBlock$Companion: androidx.room.compiler.codegen.XCodeBlock$Companion $$INSTANCE>;

        <androidx.room.compiler.codegen.XCodeBlock: androidx.room.compiler.codegen.XCodeBlock$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.codegen.XCodeBlock$Builder$Companion$WhenMappings
<androidx.room.compiler.codegen.XCodeBlock$Builder$Companion$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.room.compiler.codegen.CodeLanguage[] $r1;
        int $i0, $i1, $i2;
        androidx.room.compiler.codegen.CodeLanguage $r2, $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        $r1 = staticinvoke <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label1:
        $r2 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage JAVA>;

        $i1 = virtualinvoke $r2.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        $r3 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage KOTLIN>;

        $i2 = virtualinvoke $r3.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r7 = $r4;

     label7:
        <androidx.room.compiler.codegen.XCodeBlock$Builder$Companion$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

androidx.room.compiler.codegen.XCodeBlock$Builder$Companion
<androidx.room.compiler.codegen.XCodeBlock$Builder$Companion: androidx.room.compiler.codegen.XCodeBlock$Builder$Companion $$INSTANCE>
    private void <init>()
    {
        androidx.room.compiler.codegen.XCodeBlock$Builder$Companion r0;

        r0 := @this: androidx.room.compiler.codegen.XCodeBlock$Builder$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.compiler.codegen.XCodeBlock$Builder apply(androidx.room.compiler.codegen.XCodeBlock$Builder, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        androidx.room.compiler.codegen.XCodeBlock$Builder$Companion r0;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r1, r4;
        kotlin.jvm.functions.Function1 r2, r3;
        androidx.room.compiler.codegen.CodeLanguage $r6;
        int[] $r7;
        int $i0, $i1;
        boolean $z1, $z2;
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder $r8;
        com.squareup.kotlinpoet.CodeBlock$Builder $r9;
        java.lang.IllegalStateException $r11, $r16;
        java.lang.String $r12, $r17, r18, r19;
        androidx.room.compiler.codegen.java.JavaCodeBlock$Builder $r13;
        com.squareup.javapoet.CodeBlock$Builder $r14;

        r0 := @this: androidx.room.compiler.codegen.XCodeBlock$Builder$Companion;

        $r1 := @parameter0: androidx.room.compiler.codegen.XCodeBlock$Builder;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r3 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "javaCodeBuilder");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "kotlinCodeBuilder");

        r4 = $r1;

        $r6 = interfaceinvoke r4.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.CodeLanguage getLanguage()>();

        $r7 = <androidx.room.compiler.codegen.XCodeBlock$Builder$Companion$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r6.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            default: goto label5;
        };

     label1:
        $z2 = r4 instanceof androidx.room.compiler.codegen.java.JavaCodeBlock$Builder;

        if $z2 != 0 goto label2;

        r18 = "Check failed.";

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke r18.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label2:
        $r13 = (androidx.room.compiler.codegen.java.JavaCodeBlock$Builder) r4;

        $r14 = virtualinvoke $r13.<androidx.room.compiler.codegen.java.JavaCodeBlock$Builder: com.squareup.javapoet.CodeBlock$Builder getActual$room_compiler_processing()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "this.actual");

        interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r14);

        goto label5;

     label3:
        $z1 = r4 instanceof androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        if $z1 != 0 goto label4;

        r19 = "Check failed.";

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label4:
        $r8 = (androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder) r4;

        $r9 = virtualinvoke $r8.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: com.squareup.kotlinpoet.CodeBlock$Builder getActual$room_compiler_processing()>();

        interfaceinvoke r3.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r9);

     label5:
        return r4;
    }

    static void <clinit>()
    {
        androidx.room.compiler.codegen.XCodeBlock$Builder$Companion $r0;

        $r0 = new androidx.room.compiler.codegen.XCodeBlock$Builder$Companion;

        specialinvoke $r0.<androidx.room.compiler.codegen.XCodeBlock$Builder$Companion: void <init>()>();

        <androidx.room.compiler.codegen.XCodeBlock$Builder$Companion: androidx.room.compiler.codegen.XCodeBlock$Builder$Companion $$INSTANCE> = $r0;

        return;
    }

androidx.room.compiler.codegen.XCodeBlock$Builder
<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder$Companion Companion>
<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder add(androidx.room.compiler.codegen.XCodeBlock)>
<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder add(java.lang.String,java.lang.Object[])>
<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder addStatement(java.lang.String,java.lang.Object[])>
<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder addLocalVariable(java.lang.String,androidx.room.compiler.codegen.XTypeName,boolean,androidx.room.compiler.codegen.XCodeBlock)>
    public static androidx.room.compiler.codegen.XCodeBlock$Builder addLocalVariable$default(androidx.room.compiler.codegen.XCodeBlock$Builder, java.lang.String, androidx.room.compiler.codegen.XTypeName, boolean, androidx.room.compiler.codegen.XCodeBlock, int, java.lang.Object)
    {
        androidx.room.compiler.codegen.XCodeBlock$Builder r0, $r4;
        java.lang.String r1;
        androidx.room.compiler.codegen.XTypeName r2;
        int i0, $i1, $i2;
        java.lang.Object r3;
        java.lang.UnsupportedOperationException $r5;
        boolean z0;
        androidx.room.compiler.codegen.XCodeBlock r6;

        r0 := @parameter0: androidx.room.compiler.codegen.XCodeBlock$Builder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.room.compiler.codegen.XTypeName;

        z0 := @parameter3: boolean;

        r6 := @parameter4: androidx.room.compiler.codegen.XCodeBlock;

        i0 := @parameter5: int;

        r3 := @parameter6: java.lang.Object;

        if r3 == null goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: addLocalVariable");

        throw $r5;

     label1:
        $i1 = i0 & 4;

        if $i1 == 0 goto label2;

        z0 = 0;

     label2:
        $i2 = i0 & 8;

        if $i2 == 0 goto label3;

        r6 = null;

     label3:
        $r4 = interfaceinvoke r0.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder addLocalVariable(java.lang.String,androidx.room.compiler.codegen.XTypeName,boolean,androidx.room.compiler.codegen.XCodeBlock)>(r1, r2, z0, r6);

        return $r4;
    }

<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder beginControlFlow(java.lang.String,java.lang.Object[])>
<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder nextControlFlow(java.lang.String,java.lang.Object[])>
<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder endControlFlow()>
<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock build()>
    static void <clinit>()
    {
        androidx.room.compiler.codegen.XCodeBlock$Builder$Companion $r0;

        $r0 = <androidx.room.compiler.codegen.XCodeBlock$Builder$Companion: androidx.room.compiler.codegen.XCodeBlock$Builder$Companion $$INSTANCE>;

        <androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder$Companion Companion> = $r0;

        return;
    }

androidx.room.compiler.codegen.XCodeBlock$Companion$WhenMappings
<androidx.room.compiler.codegen.XCodeBlock$Companion$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.room.compiler.codegen.CodeLanguage[] $r1;
        int $i0, $i1, $i2;
        androidx.room.compiler.codegen.CodeLanguage $r2, $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        $r1 = staticinvoke <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label1:
        $r2 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage JAVA>;

        $i1 = virtualinvoke $r2.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        $r3 = <androidx.room.compiler.codegen.CodeLanguage: androidx.room.compiler.codegen.CodeLanguage KOTLIN>;

        $i2 = virtualinvoke $r3.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        r0[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r7 = $r4;

     label7:
        <androidx.room.compiler.codegen.XCodeBlock$Companion$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

androidx.room.compiler.codegen.XCodeBlock$Companion
<androidx.room.compiler.codegen.XCodeBlock$Companion: androidx.room.compiler.codegen.XCodeBlock$Companion $$INSTANCE>
    private void <init>()
    {
        androidx.room.compiler.codegen.XCodeBlock$Companion r0;

        r0 := @this: androidx.room.compiler.codegen.XCodeBlock$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.room.compiler.codegen.XCodeBlock$Builder builder(androidx.room.compiler.codegen.CodeLanguage)
    {
        androidx.room.compiler.codegen.XCodeBlock$Companion r0;
        androidx.room.compiler.codegen.CodeLanguage r1;
        int[] $r2;
        int $i0, $i1;
        androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder $r3;
        androidx.room.compiler.codegen.java.JavaCodeBlock$Builder $r4;
        kotlin.NoWhenBranchMatchedException $r5;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r6;

        r0 := @this: androidx.room.compiler.codegen.XCodeBlock$Companion;

        r1 := @parameter0: androidx.room.compiler.codegen.CodeLanguage;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "language");

        $r2 = <androidx.room.compiler.codegen.XCodeBlock$Companion$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r1.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = new androidx.room.compiler.codegen.java.JavaCodeBlock$Builder;

        specialinvoke $r4.<androidx.room.compiler.codegen.java.JavaCodeBlock$Builder: void <init>()>();

        $r6 = (androidx.room.compiler.codegen.XCodeBlock$Builder) $r4;

        goto label4;

     label2:
        $r3 = new androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder;

        specialinvoke $r3.<androidx.room.compiler.codegen.kotlin.KotlinCodeBlock$Builder: void <init>()>();

        $r6 = (androidx.room.compiler.codegen.XCodeBlock$Builder) $r3;

        goto label4;

     label3:
        $r5 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r5.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r5;

     label4:
        return $r6;
    }

    public final transient androidx.room.compiler.codegen.XCodeBlock of(androidx.room.compiler.codegen.CodeLanguage, java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.XCodeBlock$Companion r0;
        androidx.room.compiler.codegen.CodeLanguage r1;
        java.lang.String r2;
        java.lang.Object[] r3, $r5;
        androidx.room.compiler.codegen.XCodeBlock$Builder $r4, $r6;
        int $i0;
        androidx.room.compiler.codegen.XCodeBlock $r7;

        r0 := @this: androidx.room.compiler.codegen.XCodeBlock$Companion;

        r1 := @parameter0: androidx.room.compiler.codegen.CodeLanguage;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "language");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "format");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "args");

        $r4 = virtualinvoke r0.<androidx.room.compiler.codegen.XCodeBlock$Companion: androidx.room.compiler.codegen.XCodeBlock$Builder builder(androidx.room.compiler.codegen.CodeLanguage)>(r1);

        $i0 = lengthof r3;

        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, $i0);

        $r6 = interfaceinvoke $r4.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder add(java.lang.String,java.lang.Object[])>(r2, $r5);

        $r7 = interfaceinvoke $r6.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock build()>();

        return $r7;
    }

    public final transient androidx.room.compiler.codegen.XCodeBlock ofNewInstance(androidx.room.compiler.codegen.CodeLanguage, androidx.room.compiler.codegen.XTypeName, java.lang.String, java.lang.Object[])
    {
        androidx.room.compiler.codegen.XCodeBlock$Companion r0;
        androidx.room.compiler.codegen.CodeLanguage r1;
        androidx.room.compiler.codegen.XTypeName r2;
        java.lang.String r3, r7, $r15, $r22;
        java.lang.Object[] r4, $r17, $r18;
        androidx.room.compiler.codegen.XCodeBlock$Builder r5;
        kotlin.jvm.internal.SpreadBuilder r8, $r16;
        int[] $r9;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14;
        androidx.room.compiler.codegen.XCodeBlock $r20;
        kotlin.NoWhenBranchMatchedException $r21;

        r0 := @this: androidx.room.compiler.codegen.XCodeBlock$Companion;

        r1 := @parameter0: androidx.room.compiler.codegen.CodeLanguage;

        r2 := @parameter1: androidx.room.compiler.codegen.XTypeName;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "language");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "typeName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "argsFormat");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "args");

        r5 = virtualinvoke r0.<androidx.room.compiler.codegen.XCodeBlock$Companion: androidx.room.compiler.codegen.XCodeBlock$Builder builder(androidx.room.compiler.codegen.CodeLanguage)>(r1);

        $r9 = <androidx.room.compiler.codegen.XCodeBlock$Companion$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r1.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        $i1 = $r9[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r22 = "new ";

        goto label4;

     label2:
        $r22 = "";

        goto label4;

     label3:
        $r21 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r21.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r21;

     label4:
        r7 = $r22;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%T(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new kotlin.jvm.internal.SpreadBuilder;

        specialinvoke $r16.<kotlin.jvm.internal.SpreadBuilder: void <init>(int)>(2);

        r8 = $r16;

        virtualinvoke r8.<kotlin.jvm.internal.SpreadBuilder: void add(java.lang.Object)>(r2);

        virtualinvoke r8.<kotlin.jvm.internal.SpreadBuilder: void addSpread(java.lang.Object)>(r4);

        $i2 = virtualinvoke r8.<kotlin.jvm.internal.SpreadBuilder: int size()>();

        $r17 = newarray (java.lang.Object)[$i2];

        $r18 = virtualinvoke r8.<kotlin.jvm.internal.SpreadBuilder: java.lang.Object[] toArray(java.lang.Object[])>($r17);

        interfaceinvoke r5.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder add(java.lang.String,java.lang.Object[])>($r15, $r18);

        $r20 = interfaceinvoke r5.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock build()>();

        return $r20;
    }

    public static androidx.room.compiler.codegen.XCodeBlock ofNewInstance$default(androidx.room.compiler.codegen.XCodeBlock$Companion, androidx.room.compiler.codegen.CodeLanguage, androidx.room.compiler.codegen.XTypeName, java.lang.String, java.lang.Object[], int, java.lang.Object)
    {
        androidx.room.compiler.codegen.XCodeBlock$Companion r0;
        androidx.room.compiler.codegen.CodeLanguage r1;
        androidx.room.compiler.codegen.XTypeName r2;
        java.lang.Object[] r3;
        int i0, $i1;
        java.lang.Object r4;
        androidx.room.compiler.codegen.XCodeBlock $r5;
        java.lang.String r6;

        r0 := @parameter0: androidx.room.compiler.codegen.XCodeBlock$Companion;

        r1 := @parameter1: androidx.room.compiler.codegen.CodeLanguage;

        r2 := @parameter2: androidx.room.compiler.codegen.XTypeName;

        r6 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.Object[];

        i0 := @parameter5: int;

        r4 := @parameter6: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        r6 = "";

     label1:
        $r5 = virtualinvoke r0.<androidx.room.compiler.codegen.XCodeBlock$Companion: androidx.room.compiler.codegen.XCodeBlock ofNewInstance(androidx.room.compiler.codegen.CodeLanguage,androidx.room.compiler.codegen.XTypeName,java.lang.String,java.lang.Object[])>(r1, r2, r6, r3);

        return $r5;
    }

    public final androidx.room.compiler.codegen.XCodeBlock ofCast(androidx.room.compiler.codegen.CodeLanguage, androidx.room.compiler.codegen.XTypeName, androidx.room.compiler.codegen.XCodeBlock)
    {
        androidx.room.compiler.codegen.XCodeBlock$Companion r0;
        androidx.room.compiler.codegen.CodeLanguage r1;
        androidx.room.compiler.codegen.XTypeName r2;
        androidx.room.compiler.codegen.XCodeBlock r3, $r11;
        androidx.room.compiler.codegen.XCodeBlock$Builder r4;
        int[] $r6;
        int $i0, $i1;
        java.lang.Object[] r9, r10;

        r0 := @this: androidx.room.compiler.codegen.XCodeBlock$Companion;

        r1 := @parameter0: androidx.room.compiler.codegen.CodeLanguage;

        r2 := @parameter1: androidx.room.compiler.codegen.XTypeName;

        r3 := @parameter2: androidx.room.compiler.codegen.XCodeBlock;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "language");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "typeName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "expressionBlock");

        r4 = virtualinvoke r0.<androidx.room.compiler.codegen.XCodeBlock$Companion: androidx.room.compiler.codegen.XCodeBlock$Builder builder(androidx.room.compiler.codegen.CodeLanguage)>(r1);

        $r6 = <androidx.room.compiler.codegen.XCodeBlock$Companion$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r1.<androidx.room.compiler.codegen.CodeLanguage: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        r9 = newarray (java.lang.Object)[2];

        r9[0] = r2;

        r9[1] = r3;

        interfaceinvoke r4.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder add(java.lang.String,java.lang.Object[])>("(%T) (%L)", r9);

        goto label3;

     label2:
        r10 = newarray (java.lang.Object)[2];

        r10[0] = r3;

        r10[1] = r2;

        interfaceinvoke r4.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock$Builder add(java.lang.String,java.lang.Object[])>("(%L) as %T", r10);

     label3:
        $r11 = interfaceinvoke r4.<androidx.room.compiler.codegen.XCodeBlock$Builder: androidx.room.compiler.codegen.XCodeBlock build()>();

        return $r11;
    }

    static void <clinit>()
    {
        androidx.room.compiler.codegen.XCodeBlock$Companion $r0;

        $r0 = new androidx.room.compiler.codegen.XCodeBlock$Companion;

        specialinvoke $r0.<androidx.room.compiler.codegen.XCodeBlock$Companion: void <init>()>();

        <androidx.room.compiler.codegen.XCodeBlock$Companion: androidx.room.compiler.codegen.XCodeBlock$Companion $$INSTANCE> = $r0;

        return;
    }

