androidx.media3.extractor.avi.ChunkReader
<androidx.media3.extractor.avi.ChunkReader: int INITIAL_INDEX_SIZE>
<androidx.media3.extractor.avi.ChunkReader: int CHUNK_TYPE_VIDEO_COMPRESSED>
<androidx.media3.extractor.avi.ChunkReader: int CHUNK_TYPE_VIDEO_UNCOMPRESSED>
<androidx.media3.extractor.avi.ChunkReader: int CHUNK_TYPE_AUDIO>
<androidx.media3.extractor.avi.ChunkReader: androidx.media3.extractor.TrackOutput trackOutput>
<androidx.media3.extractor.avi.ChunkReader: int chunkId>
<androidx.media3.extractor.avi.ChunkReader: int alternativeChunkId>
<androidx.media3.extractor.avi.ChunkReader: long durationUs>
<androidx.media3.extractor.avi.ChunkReader: int streamHeaderChunkCount>
<androidx.media3.extractor.avi.ChunkReader: int currentChunkSize>
<androidx.media3.extractor.avi.ChunkReader: int bytesRemainingInCurrentChunk>
<androidx.media3.extractor.avi.ChunkReader: int currentChunkIndex>
<androidx.media3.extractor.avi.ChunkReader: int indexChunkCount>
<androidx.media3.extractor.avi.ChunkReader: int indexSize>
<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets>
<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>
    public void <init>(int, int, long, int, androidx.media3.extractor.TrackOutput)
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int i0, i1, i3, i4, $i5, $i6, $i7;
        long l2;
        androidx.media3.extractor.TrackOutput r1;
        long[] $r2;
        int[] $r3;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

        r1 := @parameter4: androidx.media3.extractor.TrackOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i1 == 1 goto label1;

        if i1 != 2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        r0.<androidx.media3.extractor.avi.ChunkReader: long durationUs> = l2;

        r0.<androidx.media3.extractor.avi.ChunkReader: int streamHeaderChunkCount> = i3;

        r0.<androidx.media3.extractor.avi.ChunkReader: androidx.media3.extractor.TrackOutput trackOutput> = r1;

        if i1 != 2 goto label4;

        $i6 = 1667497984;

        goto label5;

     label4:
        $i6 = 1651965952;

     label5:
        i4 = $i6;

        $i5 = staticinvoke <androidx.media3.extractor.avi.ChunkReader: int getChunkIdFourCc(int,int)>(i0, i4);

        r0.<androidx.media3.extractor.avi.ChunkReader: int chunkId> = $i5;

        if i1 != 2 goto label6;

        $i7 = staticinvoke <androidx.media3.extractor.avi.ChunkReader: int getChunkIdFourCc(int,int)>(i0, 1650720768);

        goto label7;

     label6:
        $i7 = -1;

     label7:
        r0.<androidx.media3.extractor.avi.ChunkReader: int alternativeChunkId> = $i7;

        $r2 = newarray (long)[512];

        r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets> = $r2;

        $r3 = newarray (int)[512];

        r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices> = $r3;

        return;
    }

    public void appendKeyFrameToIndex(long)
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        long l0;
        int[] $r1, $r3, $r7, $r8, $r9;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        long[] $r2, $r4, $r5, $r6;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        l0 := @parameter0: long;

        $i2 = r0.<androidx.media3.extractor.avi.ChunkReader: int indexSize>;

        $r1 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        $i1 = lengthof $r1;

        if $i2 != $i1 goto label1;

        $r5 = r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets>;

        $r4 = r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets>;

        $i8 = lengthof $r4;

        $i9 = $i8 * 3;

        $i10 = $i9 / 2;

        $r6 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r5, $i10);

        r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets> = $r6;

        $r8 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        $r7 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        $i11 = lengthof $r7;

        $i12 = $i11 * 3;

        $i13 = $i12 / 2;

        $r9 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r8, $i13);

        r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices> = $r9;

     label1:
        $r2 = r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets>;

        $i3 = r0.<androidx.media3.extractor.avi.ChunkReader: int indexSize>;

        $r2[$i3] = l0;

        $r3 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        $i5 = r0.<androidx.media3.extractor.avi.ChunkReader: int indexSize>;

        $i4 = r0.<androidx.media3.extractor.avi.ChunkReader: int indexChunkCount>;

        $r3[$i5] = $i4;

        $i6 = r0.<androidx.media3.extractor.avi.ChunkReader: int indexSize>;

        $i7 = $i6 + 1;

        r0.<androidx.media3.extractor.avi.ChunkReader: int indexSize> = $i7;

        return;
    }

    public void advanceCurrentChunk()
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int $i0, $i1;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        $i0 = r0.<androidx.media3.extractor.avi.ChunkReader: int currentChunkIndex>;

        $i1 = $i0 + 1;

        r0.<androidx.media3.extractor.avi.ChunkReader: int currentChunkIndex> = $i1;

        return;
    }

    public long getCurrentChunkTimestampUs()
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int $i0;
        long $l1;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        $i0 = r0.<androidx.media3.extractor.avi.ChunkReader: int currentChunkIndex>;

        $l1 = specialinvoke r0.<androidx.media3.extractor.avi.ChunkReader: long getChunkTimestampUs(int)>($i0);

        return $l1;
    }

    public long getFrameDurationUs()
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        long $l0;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        $l0 = specialinvoke r0.<androidx.media3.extractor.avi.ChunkReader: long getChunkTimestampUs(int)>(1);

        return $l0;
    }

    public void incrementIndexChunkCount()
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int $i0, $i1;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        $i0 = r0.<androidx.media3.extractor.avi.ChunkReader: int indexChunkCount>;

        $i1 = $i0 + 1;

        r0.<androidx.media3.extractor.avi.ChunkReader: int indexChunkCount> = $i1;

        return;
    }

    public void compactIndex()
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int $i0, $i1;
        long[] $r1, $r2;
        int[] $r3, $r4;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        $r1 = r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets>;

        $i0 = r0.<androidx.media3.extractor.avi.ChunkReader: int indexSize>;

        $r2 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r1, $i0);

        r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets> = $r2;

        $r3 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        $i1 = r0.<androidx.media3.extractor.avi.ChunkReader: int indexSize>;

        $r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r3, $i1);

        r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices> = $r4;

        return;
    }

    public boolean handlesChunkId(int)
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.media3.extractor.avi.ChunkReader: int chunkId>;

        if $i1 == i0 goto label1;

        $i2 = r0.<androidx.media3.extractor.avi.ChunkReader: int alternativeChunkId>;

        if $i2 != i0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isCurrentFrameAKeyFrame()
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int $i0, $i1;
        int[] $r1;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        $r1 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        $i0 = r0.<androidx.media3.extractor.avi.ChunkReader: int currentChunkIndex>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r1, $i0);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isVideo()
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        $i0 = r0.<androidx.media3.extractor.avi.ChunkReader: int chunkId>;

        $i1 = $i0 & 1667497984;

        if $i1 != 1667497984 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAudio()
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        $i0 = r0.<androidx.media3.extractor.avi.ChunkReader: int chunkId>;

        $i1 = $i0 & 1651965952;

        if $i1 != 1651965952 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void onChunkStart(int)
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int i0;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        i0 := @parameter0: int;

        r0.<androidx.media3.extractor.avi.ChunkReader: int currentChunkSize> = i0;

        r0.<androidx.media3.extractor.avi.ChunkReader: int bytesRemainingInCurrentChunk> = i0;

        return;
    }

    public boolean onChunkData(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        androidx.media3.extractor.ExtractorInput r1;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        androidx.media3.extractor.TrackOutput $r2, $r3;
        long $l6;
        byte $b8;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $i1 = r0.<androidx.media3.extractor.avi.ChunkReader: int bytesRemainingInCurrentChunk>;

        $r2 = r0.<androidx.media3.extractor.avi.ChunkReader: androidx.media3.extractor.TrackOutput trackOutput>;

        $i0 = r0.<androidx.media3.extractor.avi.ChunkReader: int bytesRemainingInCurrentChunk>;

        $i2 = interfaceinvoke $r2.<androidx.media3.extractor.TrackOutput: int sampleData(androidx.media3.common.DataReader,int,boolean)>(r1, $i0, 0);

        $i3 = $i1 - $i2;

        r0.<androidx.media3.extractor.avi.ChunkReader: int bytesRemainingInCurrentChunk> = $i3;

        $i4 = r0.<androidx.media3.extractor.avi.ChunkReader: int bytesRemainingInCurrentChunk>;

        if $i4 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label6;

        $i5 = r0.<androidx.media3.extractor.avi.ChunkReader: int currentChunkSize>;

        if $i5 <= 0 goto label5;

        $r3 = r0.<androidx.media3.extractor.avi.ChunkReader: androidx.media3.extractor.TrackOutput trackOutput>;

        $l6 = virtualinvoke r0.<androidx.media3.extractor.avi.ChunkReader: long getCurrentChunkTimestampUs()>();

        $z1 = virtualinvoke r0.<androidx.media3.extractor.avi.ChunkReader: boolean isCurrentFrameAKeyFrame()>();

        if $z1 == 0 goto label3;

        $b8 = 1;

        goto label4;

     label3:
        $b8 = 0;

     label4:
        $i7 = r0.<androidx.media3.extractor.avi.ChunkReader: int currentChunkSize>;

        interfaceinvoke $r3.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>($l6, $b8, $i7, 0, null);

     label5:
        virtualinvoke r0.<androidx.media3.extractor.avi.ChunkReader: void advanceCurrentChunk()>();

     label6:
        return z0;
    }

    public void seekToPosition(long)
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        long l0;
        int i1, $i2, $i3;
        long[] $r1;
        int[] $r2;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        l0 := @parameter0: long;

        $i2 = r0.<androidx.media3.extractor.avi.ChunkReader: int indexSize>;

        if $i2 != 0 goto label1;

        r0.<androidx.media3.extractor.avi.ChunkReader: int currentChunkIndex> = 0;

        goto label2;

     label1:
        $r1 = r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets>;

        i1 = staticinvoke <androidx.media3.common.util.Util: int binarySearchFloor(long[],long,boolean,boolean)>($r1, l0, 1, 1);

        $r2 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        $i3 = $r2[i1];

        r0.<androidx.media3.extractor.avi.ChunkReader: int currentChunkIndex> = $i3;

     label2:
        return;
    }

    public androidx.media3.extractor.SeekMap$SeekPoints getSeekPoints(long)
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        long l0, $l3, $l4;
        int i1, i2, $i5, $i6, $i7, $i8;
        androidx.media3.extractor.SeekPoint r1, $r7, $r9;
        int[] $r2, $r3;
        long[] $r4;
        androidx.media3.extractor.SeekMap$SeekPoints $r5, $r6, $r8;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        l0 := @parameter0: long;

        $l3 = virtualinvoke r0.<androidx.media3.extractor.avi.ChunkReader: long getFrameDurationUs()>();

        $l4 = l0 / $l3;

        i1 = (int) $l4;

        $r2 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        i2 = staticinvoke <androidx.media3.common.util.Util: int binarySearchFloor(int[],int,boolean,boolean)>($r2, i1, 1, 1);

        $r3 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        $i5 = $r3[i2];

        if $i5 != i1 goto label1;

        $r8 = new androidx.media3.extractor.SeekMap$SeekPoints;

        $r9 = specialinvoke r0.<androidx.media3.extractor.avi.ChunkReader: androidx.media3.extractor.SeekPoint getSeekPoint(int)>(i2);

        specialinvoke $r8.<androidx.media3.extractor.SeekMap$SeekPoints: void <init>(androidx.media3.extractor.SeekPoint)>($r9);

        return $r8;

     label1:
        r1 = specialinvoke r0.<androidx.media3.extractor.avi.ChunkReader: androidx.media3.extractor.SeekPoint getSeekPoint(int)>(i2);

        $i7 = i2 + 1;

        $r4 = r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets>;

        $i6 = lengthof $r4;

        if $i7 >= $i6 goto label2;

        $r6 = new androidx.media3.extractor.SeekMap$SeekPoints;

        $i8 = i2 + 1;

        $r7 = specialinvoke r0.<androidx.media3.extractor.avi.ChunkReader: androidx.media3.extractor.SeekPoint getSeekPoint(int)>($i8);

        specialinvoke $r6.<androidx.media3.extractor.SeekMap$SeekPoints: void <init>(androidx.media3.extractor.SeekPoint,androidx.media3.extractor.SeekPoint)>(r1, $r7);

        return $r6;

     label2:
        $r5 = new androidx.media3.extractor.SeekMap$SeekPoints;

        specialinvoke $r5.<androidx.media3.extractor.SeekMap$SeekPoints: void <init>(androidx.media3.extractor.SeekPoint)>(r1);

        return $r5;
    }

    private long getChunkTimestampUs(int)
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int i0, $i3;
        long $l1, $l2, $l4, $l5, $l6;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        i0 := @parameter0: int;

        $l2 = r0.<androidx.media3.extractor.avi.ChunkReader: long durationUs>;

        $l1 = (long) i0;

        $l5 = $l2 * $l1;

        $i3 = r0.<androidx.media3.extractor.avi.ChunkReader: int streamHeaderChunkCount>;

        $l4 = (long) $i3;

        $l6 = $l5 / $l4;

        return $l6;
    }

    private androidx.media3.extractor.SeekPoint getSeekPoint(int)
    {
        androidx.media3.extractor.avi.ChunkReader r0;
        int i0, $i1;
        androidx.media3.extractor.SeekPoint $r1;
        int[] $r2;
        long $l2, $l3, $l4, $l5;
        long[] $r3;

        r0 := @this: androidx.media3.extractor.avi.ChunkReader;

        i0 := @parameter0: int;

        $r1 = new androidx.media3.extractor.SeekPoint;

        $r2 = r0.<androidx.media3.extractor.avi.ChunkReader: int[] keyFrameIndices>;

        $i1 = $r2[i0];

        $l2 = (long) $i1;

        $l3 = virtualinvoke r0.<androidx.media3.extractor.avi.ChunkReader: long getFrameDurationUs()>();

        $l5 = $l2 * $l3;

        $r3 = r0.<androidx.media3.extractor.avi.ChunkReader: long[] keyFrameOffsets>;

        $l4 = $r3[i0];

        specialinvoke $r1.<androidx.media3.extractor.SeekPoint: void <init>(long,long)>($l5, $l4);

        return $r1;
    }

    private static int getChunkIdFourCc(int, int)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 / 10;

        i3 = i0 % 10;

        $i4 = 48 + i3;

        $i6 = $i4 << 8;

        $i5 = 48 + i2;

        $i7 = $i6 | $i5;

        $i8 = $i7 | i1;

        return $i8;
    }

