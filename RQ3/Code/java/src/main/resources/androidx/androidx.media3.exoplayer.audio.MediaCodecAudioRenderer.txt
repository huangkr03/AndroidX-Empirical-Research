androidx.media3.exoplayer.audio.MediaCodecAudioRenderer
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: java.lang.String TAG>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: java.lang.String VIVO_BITS_PER_SAMPLE_KEY>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: android.content.Context context>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: int codecMaxInputSize>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean codecNeedsDiscardChannelsWorkaround>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.common.Format decryptOnlyCodecFormat>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: long currentPositionUs>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean allowFirstBufferPositionDiscontinuity>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean allowPositionDiscontinuity>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean audioSinkNeedsReset>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean experimentalKeepAudioTrackOnSeek>
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.Renderer$WakeupListener wakeupListener>
    public void <init>(android.content.Context, androidx.media3.exoplayer.mediacodec.MediaCodecSelector)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        android.content.Context r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,androidx.media3.exoplayer.mediacodec.MediaCodecSelector,android.os.Handler,androidx.media3.exoplayer.audio.AudioRendererEventListener)>(r1, r2, null, null);

        return;
    }

    public void <init>(android.content.Context, androidx.media3.exoplayer.mediacodec.MediaCodecSelector, android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        android.content.Context r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r2;
        android.os.Handler r3;
        androidx.media3.exoplayer.audio.AudioRendererEventListener r4;
        androidx.media3.common.audio.AudioProcessor[] $r5;
        androidx.media3.exoplayer.audio.AudioCapabilities $r6;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: androidx.media3.exoplayer.audio.AudioRendererEventListener;

        $r6 = <androidx.media3.exoplayer.audio.AudioCapabilities: androidx.media3.exoplayer.audio.AudioCapabilities DEFAULT_AUDIO_CAPABILITIES>;

        $r5 = newarray (androidx.media3.common.audio.AudioProcessor)[0];

        specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,androidx.media3.exoplayer.mediacodec.MediaCodecSelector,android.os.Handler,androidx.media3.exoplayer.audio.AudioRendererEventListener,androidx.media3.exoplayer.audio.AudioCapabilities,androidx.media3.common.audio.AudioProcessor[])>(r1, r2, r3, r4, $r6, $r5);

        return;
    }

    public transient void <init>(android.content.Context, androidx.media3.exoplayer.mediacodec.MediaCodecSelector, android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioCapabilities, androidx.media3.common.audio.AudioProcessor[])
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        android.content.Context r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r2;
        android.os.Handler r3;
        androidx.media3.exoplayer.audio.AudioRendererEventListener r4;
        androidx.media3.exoplayer.audio.AudioCapabilities r5, $r8, $r10;
        androidx.media3.common.audio.AudioProcessor[] r6;
        androidx.media3.exoplayer.audio.DefaultAudioSink$Builder $r7, $r11, $r12;
        java.lang.Object $r9;
        androidx.media3.exoplayer.audio.DefaultAudioSink $r13;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: androidx.media3.exoplayer.audio.AudioRendererEventListener;

        r5 := @parameter4: androidx.media3.exoplayer.audio.AudioCapabilities;

        r6 := @parameter5: androidx.media3.common.audio.AudioProcessor[];

        $r7 = new androidx.media3.exoplayer.audio.DefaultAudioSink$Builder;

        specialinvoke $r7.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: void <init>()>();

        $r8 = <androidx.media3.exoplayer.audio.AudioCapabilities: androidx.media3.exoplayer.audio.AudioCapabilities DEFAULT_AUDIO_CAPABILITIES>;

        $r9 = staticinvoke <com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)>(r5, $r8);

        $r10 = (androidx.media3.exoplayer.audio.AudioCapabilities) $r9;

        $r11 = virtualinvoke $r7.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioCapabilities(androidx.media3.exoplayer.audio.AudioCapabilities)>($r10);

        $r12 = virtualinvoke $r11.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink$Builder setAudioProcessors(androidx.media3.common.audio.AudioProcessor[])>(r6);

        $r13 = virtualinvoke $r12.<androidx.media3.exoplayer.audio.DefaultAudioSink$Builder: androidx.media3.exoplayer.audio.DefaultAudioSink build()>();

        specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,androidx.media3.exoplayer.mediacodec.MediaCodecSelector,android.os.Handler,androidx.media3.exoplayer.audio.AudioRendererEventListener,androidx.media3.exoplayer.audio.AudioSink)>(r1, r2, r3, r4, $r13);

        return;
    }

    public void <init>(android.content.Context, androidx.media3.exoplayer.mediacodec.MediaCodecSelector, android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioSink)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        android.content.Context r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r2;
        android.os.Handler r3;
        androidx.media3.exoplayer.audio.AudioRendererEventListener r4;
        androidx.media3.exoplayer.audio.AudioSink r5;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory $r6;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: androidx.media3.exoplayer.audio.AudioRendererEventListener;

        r5 := @parameter4: androidx.media3.exoplayer.audio.AudioSink;

        $r6 = <androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory DEFAULT>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory,androidx.media3.exoplayer.mediacodec.MediaCodecSelector,boolean,android.os.Handler,androidx.media3.exoplayer.audio.AudioRendererEventListener,androidx.media3.exoplayer.audio.AudioSink)>(r1, $r6, r2, 0, r3, r4, r5);

        return;
    }

    public void <init>(android.content.Context, androidx.media3.exoplayer.mediacodec.MediaCodecSelector, boolean, android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioSink)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        android.content.Context r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r2;
        boolean z0;
        android.os.Handler r3;
        androidx.media3.exoplayer.audio.AudioRendererEventListener r4;
        androidx.media3.exoplayer.audio.AudioSink r5;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory $r6;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        z0 := @parameter2: boolean;

        r3 := @parameter3: android.os.Handler;

        r4 := @parameter4: androidx.media3.exoplayer.audio.AudioRendererEventListener;

        r5 := @parameter5: androidx.media3.exoplayer.audio.AudioSink;

        $r6 = <androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory DEFAULT>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: void <init>(android.content.Context,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory,androidx.media3.exoplayer.mediacodec.MediaCodecSelector,boolean,android.os.Handler,androidx.media3.exoplayer.audio.AudioRendererEventListener,androidx.media3.exoplayer.audio.AudioSink)>(r1, $r6, r2, z0, r3, r4, r5);

        return;
    }

    public void <init>(android.content.Context, androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory, androidx.media3.exoplayer.mediacodec.MediaCodecSelector, boolean, android.os.Handler, androidx.media3.exoplayer.audio.AudioRendererEventListener, androidx.media3.exoplayer.audio.AudioSink)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r2;
        boolean z0;
        android.os.Handler r3;
        androidx.media3.exoplayer.audio.AudioRendererEventListener r4;
        androidx.media3.exoplayer.audio.AudioSink r5;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r6;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener $r7;
        android.content.Context r8, r9;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r8 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory;

        r2 := @parameter2: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        z0 := @parameter3: boolean;

        r3 := @parameter4: android.os.Handler;

        r4 := @parameter5: androidx.media3.exoplayer.audio.AudioRendererEventListener;

        r5 := @parameter6: androidx.media3.exoplayer.audio.AudioSink;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void <init>(int,androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Factory,androidx.media3.exoplayer.mediacodec.MediaCodecSelector,boolean,float)>(1, r1, r2, z0, 44100.0F);

        r9 = virtualinvoke r8.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: android.content.Context context> = r9;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink> = r5;

        $r6 = new androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher;

        specialinvoke $r6.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void <init>(android.os.Handler,androidx.media3.exoplayer.audio.AudioRendererEventListener)>(r3, r4);

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher> = $r6;

        $r7 = new androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        specialinvoke $r7.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: void <init>(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer,androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$1)>(r0, null);

        interfaceinvoke r5.<androidx.media3.exoplayer.audio.AudioSink: void setListener(androidx.media3.exoplayer.audio.AudioSink$Listener)>($r7);

        return;
    }

    public java.lang.String getName()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        return "MediaCodecAudioRenderer";
    }

    public void experimentalSetEnableKeepAudioTrackOnSeek(boolean)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        boolean z0;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean experimentalKeepAudioTrackOnSeek> = z0;

        return;
    }

    protected int supportsFormat(androidx.media3.exoplayer.mediacodec.MediaCodecSelector, androidx.media3.common.Format) throws androidx.media3.exoplayer.mediacodec.MediaCodecUtil$DecoderQueryException
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r1;
        androidx.media3.common.Format r2, $r6;
        byte b0, b1, $b15, $b17, b18, $b19, b20, $b21;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, $z13;
        java.util.List r3;
        short s2, $s22;
        java.lang.String $r4, $r13, $r14;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i16;
        androidx.media3.exoplayer.audio.AudioSink $r5, $r7, $r10, $r11;
        java.lang.Object $r8, $r9;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo $r12, r15, r16;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        r2 := @parameter1: androidx.media3.common.Format;

        $r4 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z2 = staticinvoke <androidx.media3.common.MimeTypes: boolean isAudio(java.lang.String)>($r4);

        if $z2 != 0 goto label01;

        $i14 = staticinvoke <androidx.media3.exoplayer.RendererCapabilities: int create(int)>(0);

        return $i14;

     label01:
        $i3 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i3 < 21 goto label02;

        $b15 = 32;

        goto label03;

     label02:
        $b15 = 0;

     label03:
        b0 = $b15;

        $i4 = r2.<androidx.media3.common.Format: int cryptoType>;

        if $i4 == 0 goto label04;

        $z9 = 1;

        goto label05;

     label04:
        $z9 = 0;

     label05:
        z0 = $z9;

        z1 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean supportsFormatDrm(androidx.media3.common.Format)>(r2);

        if z1 == 0 goto label07;

        $r11 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $z8 = interfaceinvoke $r11.<androidx.media3.exoplayer.audio.AudioSink: boolean supportsFormat(androidx.media3.common.Format)>(r2);

        if $z8 == 0 goto label07;

        if z0 == 0 goto label06;

        $r12 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: androidx.media3.exoplayer.mediacodec.MediaCodecInfo getDecryptOnlyDecoderInfo()>();

        if $r12 == null goto label07;

     label06:
        $i13 = staticinvoke <androidx.media3.exoplayer.RendererCapabilities: int create(int,int,int)>(4, 8, b0);

        return $i13;

     label07:
        $r13 = "audio/raw";

        $r14 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z10 == 0 goto label08;

        $r10 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $z7 = interfaceinvoke $r10.<androidx.media3.exoplayer.audio.AudioSink: boolean supportsFormat(androidx.media3.common.Format)>(r2);

        if $z7 != 0 goto label08;

        $i12 = staticinvoke <androidx.media3.exoplayer.RendererCapabilities: int create(int)>(1);

        return $i12;

     label08:
        $r5 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $i6 = r2.<androidx.media3.common.Format: int channelCount>;

        $i5 = r2.<androidx.media3.common.Format: int sampleRate>;

        $r6 = staticinvoke <androidx.media3.common.util.Util: androidx.media3.common.Format getPcmFormat(int,int,int)>(2, $i6, $i5);

        $z3 = interfaceinvoke $r5.<androidx.media3.exoplayer.audio.AudioSink: boolean supportsFormat(androidx.media3.common.Format)>($r6);

        if $z3 != 0 goto label09;

        $i11 = staticinvoke <androidx.media3.exoplayer.RendererCapabilities: int create(int)>(1);

        return $i11;

     label09:
        $r7 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        r3 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: java.util.List getDecoderInfos(androidx.media3.exoplayer.mediacodec.MediaCodecSelector,androidx.media3.common.Format,boolean,androidx.media3.exoplayer.audio.AudioSink)>(r1, r2, 0, $r7);

        $z4 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label10;

        $i10 = staticinvoke <androidx.media3.exoplayer.RendererCapabilities: int create(int)>(1);

        return $i10;

     label10:
        if z1 != 0 goto label11;

        $i9 = staticinvoke <androidx.media3.exoplayer.RendererCapabilities: int create(int)>(2);

        return $i9;

     label11:
        $r8 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r15 = (androidx.media3.exoplayer.mediacodec.MediaCodecInfo) $r8;

        z11 = virtualinvoke r15.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isFormatSupported(androidx.media3.common.Format)>(r2);

        z12 = 1;

        if z11 != 0 goto label14;

        i16 = 1;

     label12:
        $i8 = interfaceinvoke r3.<java.util.List: int size()>();

        if i16 >= $i8 goto label14;

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i16);

        r16 = (androidx.media3.exoplayer.mediacodec.MediaCodecInfo) $r9;

        $z6 = virtualinvoke r16.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isFormatSupported(androidx.media3.common.Format)>(r2);

        if $z6 == 0 goto label13;

        r15 = r16;

        z11 = 1;

        z12 = 0;

        goto label14;

     label13:
        i16 = i16 + 1;

        goto label12;

     label14:
        if z11 == 0 goto label15;

        $b17 = 4;

        goto label16;

     label15:
        $b17 = 3;

     label16:
        b18 = $b17;

        if z11 == 0 goto label17;

        $z5 = virtualinvoke r15.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isSeamlessAdaptationSupported(androidx.media3.common.Format)>(r2);

        if $z5 == 0 goto label17;

        $b19 = 16;

        goto label18;

     label17:
        $b19 = 8;

     label18:
        b20 = $b19;

        $z13 = r15.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean hardwareAccelerated>;

        if $z13 == 0 goto label19;

        $b21 = 64;

        goto label20;

     label19:
        $b21 = 0;

     label20:
        b1 = $b21;

        if z12 == 0 goto label21;

        $s22 = 128;

        goto label22;

     label21:
        $s22 = 0;

     label22:
        s2 = $s22;

        $i7 = staticinvoke <androidx.media3.exoplayer.RendererCapabilities: int create(int,int,int,int,int)>(b18, b20, b0, b1, s2);

        return $i7;
    }

    protected java.util.List getDecoderInfos(androidx.media3.exoplayer.mediacodec.MediaCodecSelector, androidx.media3.common.Format, boolean) throws androidx.media3.exoplayer.mediacodec.MediaCodecUtil$DecoderQueryException
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r1;
        androidx.media3.common.Format r2;
        boolean z0;
        androidx.media3.exoplayer.audio.AudioSink $r3;
        java.util.List $r4, $r5;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        r2 := @parameter1: androidx.media3.common.Format;

        z0 := @parameter2: boolean;

        $r3 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $r4 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: java.util.List getDecoderInfos(androidx.media3.exoplayer.mediacodec.MediaCodecSelector,androidx.media3.common.Format,boolean,androidx.media3.exoplayer.audio.AudioSink)>(r1, r2, z0, $r3);

        $r5 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: java.util.List getDecoderInfosSortedByFormatSupport(java.util.List,androidx.media3.common.Format)>($r4, r2);

        return $r5;
    }

    private static java.util.List getDecoderInfos(androidx.media3.exoplayer.mediacodec.MediaCodecSelector, androidx.media3.common.Format, boolean, androidx.media3.exoplayer.audio.AudioSink) throws androidx.media3.exoplayer.mediacodec.MediaCodecUtil$DecoderQueryException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecSelector r0;
        androidx.media3.common.Format r1;
        boolean z0, $z1;
        androidx.media3.exoplayer.audio.AudioSink r2;
        java.lang.String r3, r4;
        java.util.List r5, r14;
        com.google.common.collect.ImmutableList$Builder $r6, $r7, $r8;
        com.google.common.collect.ImmutableList $r9, $r10, $r11, $r12;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r13;

        r0 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecSelector;

        r1 := @parameter1: androidx.media3.common.Format;

        z0 := @parameter2: boolean;

        r2 := @parameter3: androidx.media3.exoplayer.audio.AudioSink;

        r3 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        if r3 != null goto label1;

        $r12 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();

        return $r12;

     label1:
        $z1 = interfaceinvoke r2.<androidx.media3.exoplayer.audio.AudioSink: boolean supportsFormat(androidx.media3.common.Format)>(r1);

        if $z1 == 0 goto label2;

        r13 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: androidx.media3.exoplayer.mediacodec.MediaCodecInfo getDecryptOnlyDecoderInfo()>();

        if r13 == null goto label2;

        $r11 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(r13);

        return $r11;

     label2:
        r14 = interfaceinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecSelector: java.util.List getDecoderInfos(java.lang.String,boolean,boolean)>(r3, z0, 0);

        r4 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: java.lang.String getAlternativeCodecMimeType(androidx.media3.common.Format)>(r1);

        if r4 != null goto label3;

        $r10 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>(r14);

        return $r10;

     label3:
        r5 = interfaceinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecSelector: java.util.List getDecoderInfos(java.lang.String,boolean,boolean)>(r4, z0, 0);

        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r7 = virtualinvoke $r6.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder addAll(java.lang.Iterable)>(r14);

        $r8 = virtualinvoke $r7.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder addAll(java.lang.Iterable)>(r5);

        $r9 = virtualinvoke $r8.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        return $r9;
    }

    protected boolean shouldUseBypass(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.common.Format r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        $r2 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $z0 = interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: boolean supportsFormat(androidx.media3.common.Format)>(r1);

        return $z0;
    }

    protected androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration getMediaCodecConfiguration(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, androidx.media3.common.Format, android.media.MediaCrypto, float)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r1;
        androidx.media3.common.Format r2, $r14;
        android.media.MediaCrypto r3;
        float f0;
        android.media.MediaFormat r4;
        boolean z0, $z1, $z2, $z3, $z4;
        androidx.media3.common.Format[] $r5;
        int $i0, $i1;
        java.lang.String $r6, $r7, $r8, $r9, $r12, $r13;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration $r10;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r2 := @parameter1: androidx.media3.common.Format;

        r3 := @parameter2: android.media.MediaCrypto;

        f0 := @parameter3: float;

        $r5 = virtualinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.common.Format[] getStreamFormats()>();

        $i0 = virtualinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: int getCodecMaxInputSize(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,androidx.media3.common.Format,androidx.media3.common.Format[])>(r1, r2, $r5);

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: int codecMaxInputSize> = $i0;

        $r6 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $z1 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean codecNeedsDiscardChannelsWorkaround(java.lang.String)>($r6);

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean codecNeedsDiscardChannelsWorkaround> = $z1;

        $r7 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String codecMimeType>;

        $i1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: int codecMaxInputSize>;

        r4 = virtualinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: android.media.MediaFormat getMediaFormat(androidx.media3.common.Format,java.lang.String,int,float)>(r2, $r7, $i1, f0);

        $r9 = "audio/raw";

        $r8 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label1;

        $r13 = "audio/raw";

        $r12 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        if z0 == 0 goto label3;

        $r14 = r2;

        goto label4;

     label3:
        $r14 = null;

     label4:
        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.common.Format decryptOnlyCodecFormat> = $r14;

        $r10 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration createForAudioDecoding(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,android.media.MediaFormat,androidx.media3.common.Format,android.media.MediaCrypto)>(r1, r4, r2, r3);

        return $r10;
    }

    protected androidx.media3.exoplayer.DecoderReuseEvaluation canReuseCodec(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, androidx.media3.common.Format, androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r1;
        androidx.media3.common.Format r2, r3;
        androidx.media3.exoplayer.DecoderReuseEvaluation r4, $r5;
        int $i0, $i1, i2, $i3;
        java.lang.String $r6;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r2 := @parameter1: androidx.media3.common.Format;

        r3 := @parameter2: androidx.media3.common.Format;

        r4 = virtualinvoke r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: androidx.media3.exoplayer.DecoderReuseEvaluation canReuseCodec(androidx.media3.common.Format,androidx.media3.common.Format)>(r2, r3);

        i2 = r4.<androidx.media3.exoplayer.DecoderReuseEvaluation: int discardReasons>;

        $i0 = specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: int getCodecMaxInputSize(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,androidx.media3.common.Format)>(r1, r3);

        $i1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: int codecMaxInputSize>;

        if $i0 <= $i1 goto label1;

        i2 = i2 | 64;

     label1:
        $r5 = new androidx.media3.exoplayer.DecoderReuseEvaluation;

        $r6 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        if i2 == 0 goto label2;

        $i3 = 0;

        goto label3;

     label2:
        $i3 = r4.<androidx.media3.exoplayer.DecoderReuseEvaluation: int result>;

     label3:
        specialinvoke $r5.<androidx.media3.exoplayer.DecoderReuseEvaluation: void <init>(java.lang.String,androidx.media3.common.Format,androidx.media3.common.Format,int,int)>($r6, r2, r3, $i3, i2);

        return $r5;
    }

    public androidx.media3.exoplayer.MediaClock getMediaClock()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        return r0;
    }

    protected float getCodecOperatingRateV23(float, androidx.media3.common.Format, androidx.media3.common.Format[])
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        float f0, $f1, $f2;
        androidx.media3.common.Format r1, r4;
        androidx.media3.common.Format[] r2, r3;
        int i0, i1, i2, i3;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        f0 := @parameter0: float;

        r1 := @parameter1: androidx.media3.common.Format;

        r2 := @parameter2: androidx.media3.common.Format[];

        i2 = -1;

        r3 = r2;

        i0 = lengthof r3;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r4 = r3[i3];

        i1 = r4.<androidx.media3.common.Format: int sampleRate>;

        if i1 == -1 goto label2;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, i1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        if i2 != -1 goto label4;

        $f2 = -1.0F;

        goto label5;

     label4:
        $f1 = (float) i2;

        $f2 = $f1 * f0;

     label5:
        return $f2;
    }

    protected void onCodecInitialized(java.lang.String, androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration, long, long)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        java.lang.String r1;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration r2;
        long l0, l1;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r3;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter$Configuration;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r3 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        virtualinvoke $r3.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void decoderInitialized(java.lang.String,long,long)>(r1, l0, l1);

        return;
    }

    protected void onCodecReleased(java.lang.String)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        java.lang.String r1;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        virtualinvoke $r2.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void decoderReleased(java.lang.String)>(r1);

        return;
    }

    protected void onCodecError(java.lang.Exception)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        java.lang.Exception r1;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r2;
        java.lang.Throwable r3;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: java.lang.Exception;

        r3 = (java.lang.Throwable) r1;

        staticinvoke <androidx.media3.common.util.Log: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecAudioRenderer", "Audio codec error", r3);

        $r2 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        virtualinvoke $r2.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void audioCodecError(java.lang.Exception)>(r1);

        return;
    }

    protected androidx.media3.exoplayer.DecoderReuseEvaluation onInputFormatChanged(androidx.media3.exoplayer.FormatHolder) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.FormatHolder r1;
        androidx.media3.exoplayer.DecoderReuseEvaluation r2;
        androidx.media3.common.Format $r3;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r4;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.FormatHolder;

        r2 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: androidx.media3.exoplayer.DecoderReuseEvaluation onInputFormatChanged(androidx.media3.exoplayer.FormatHolder)>(r1);

        $r4 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        $r3 = r1.<androidx.media3.exoplayer.FormatHolder: androidx.media3.common.Format format>;

        virtualinvoke $r4.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void inputFormatChanged(androidx.media3.common.Format,androidx.media3.exoplayer.DecoderReuseEvaluation)>($r3, r2);

        return r2;
    }

    protected void onOutputFormatChanged(androidx.media3.common.Format, android.media.MediaFormat) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.common.Format r1, $r3, r8;
        android.media.MediaFormat r2;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter $r4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, i11;
        int[] r7;
        androidx.media3.common.Format$Builder $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        androidx.media3.exoplayer.audio.AudioSink $r16;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: android.media.MediaFormat;

        r7 = null;

        $r3 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.common.Format decryptOnlyCodecFormat>;

        if $r3 == null goto label1;

        r8 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.common.Format decryptOnlyCodecFormat>;

        goto label8;

     label1:
        $r4 = virtualinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter getCodec()>();

        if $r4 != null goto label2;

        r8 = r1;

        goto label8;

     label2:
        $r6 = "audio/raw";

        $r5 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        i6 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        goto label6;

     label3:
        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 24 goto label4;

        $z2 = virtualinvoke r2.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("pcm-encoding");

        if $z2 == 0 goto label4;

        i6 = virtualinvoke r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("pcm-encoding");

        goto label6;

     label4:
        $z1 = virtualinvoke r2.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("v-bits-per-sample");

        if $z1 == 0 goto label5;

        $i5 = virtualinvoke r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("v-bits-per-sample");

        i6 = staticinvoke <androidx.media3.common.util.Util: int getPcmEncoding(int)>($i5);

        goto label6;

     label5:
        i6 = 2;

     label6:
        $r9 = new androidx.media3.common.Format$Builder;

        specialinvoke $r9.<androidx.media3.common.Format$Builder: void <init>()>();

        $r10 = virtualinvoke $r9.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>("audio/raw");

        $r11 = virtualinvoke $r10.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setPcmEncoding(int)>(i6);

        $i7 = r1.<androidx.media3.common.Format: int encoderDelay>;

        $r12 = virtualinvoke $r11.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setEncoderDelay(int)>($i7);

        $i8 = r1.<androidx.media3.common.Format: int encoderPadding>;

        $r13 = virtualinvoke $r12.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setEncoderPadding(int)>($i8);

        $i9 = virtualinvoke r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("channel-count");

        $r14 = virtualinvoke $r13.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>($i9);

        $i10 = virtualinvoke r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("sample-rate");

        $r15 = virtualinvoke $r14.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>($i10);

        r8 = virtualinvoke $r15.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $z3 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean codecNeedsDiscardChannelsWorkaround>;

        if $z3 == 0 goto label8;

        $i1 = r8.<androidx.media3.common.Format: int channelCount>;

        if $i1 != 6 goto label8;

        $i2 = r1.<androidx.media3.common.Format: int channelCount>;

        if $i2 >= 6 goto label8;

        $i3 = r1.<androidx.media3.common.Format: int channelCount>;

        r7 = newarray (int)[$i3];

        i11 = 0;

     label7:
        $i4 = r1.<androidx.media3.common.Format: int channelCount>;

        if i11 >= $i4 goto label8;

        r7[i11] = i11;

        i11 = i11 + 1;

        goto label7;

     label8:
        $r16 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r16.<androidx.media3.exoplayer.audio.AudioSink: void configure(androidx.media3.common.Format,int,int[])>(r8, 0, r7);

        goto label9;

     label9:
        return;
    }

    protected void onPositionDiscontinuity()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean allowPositionDiscontinuity> = 1;

        return;
    }

    protected void onEnabled(boolean, boolean) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        boolean z0, z1, $z2;
        androidx.media3.exoplayer.DecoderCounters $r1;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r2;
        androidx.media3.exoplayer.RendererConfiguration $r3;
        androidx.media3.exoplayer.audio.AudioSink $r4, $r5, $r7;
        androidx.media3.exoplayer.analytics.PlayerId $r6;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onEnabled(boolean,boolean)>(z0, z1);

        $r2 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        virtualinvoke $r2.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void enabled(androidx.media3.exoplayer.DecoderCounters)>($r1);

        $r3 = virtualinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.RendererConfiguration getConfiguration()>();

        $z2 = $r3.<androidx.media3.exoplayer.RendererConfiguration: boolean tunneling>;

        if $z2 == 0 goto label1;

        $r7 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r7.<androidx.media3.exoplayer.audio.AudioSink: void enableTunnelingV21()>();

        goto label2;

     label1:
        $r4 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r4.<androidx.media3.exoplayer.audio.AudioSink: void disableTunneling()>();

     label2:
        $r5 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $r6 = virtualinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.analytics.PlayerId getPlayerId()>();

        interfaceinvoke $r5.<androidx.media3.exoplayer.audio.AudioSink: void setPlayerId(androidx.media3.exoplayer.analytics.PlayerId)>($r6);

        return;
    }

    protected void onPositionReset(long, boolean) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        long l0;
        boolean z0, $z1;
        androidx.media3.exoplayer.audio.AudioSink $r1, $r2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onPositionReset(long,boolean)>(l0, z0);

        $z1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean experimentalKeepAudioTrackOnSeek>;

        if $z1 == 0 goto label1;

        $r2 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: void experimentalFlushWithoutAudioTrackRelease()>();

        goto label2;

     label1:
        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void flush()>();

     label2:
        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: long currentPositionUs> = l0;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean allowFirstBufferPositionDiscontinuity> = 1;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean allowPositionDiscontinuity> = 1;

        return;
    }

    protected void onStarted()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onStarted()>();

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void play()>();

        return;
    }

    protected void onStopped()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: void updateCurrentPosition()>();

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void pause()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onStopped()>();

        return;
    }

    protected void onDisabled()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        java.lang.Throwable r1, r2, r3, $r7, $r10, $r13;
        androidx.media3.exoplayer.audio.AudioSink $r4;
        androidx.media3.exoplayer.DecoderCounters $r5, $r8, $r11, $r14;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r6, $r9, $r12, $r15;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean audioSinkNeedsReset> = 1;

     label01:
        $r4 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r4.<androidx.media3.exoplayer.audio.AudioSink: void flush()>();

     label02:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onDisabled()>();

     label03:
        $r6 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        $r5 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        virtualinvoke $r6.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void disabled(androidx.media3.exoplayer.DecoderCounters)>($r5);

        goto label05;

     label04:
        $r7 := @caughtexception;

        r1 = $r7;

        $r9 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        $r8 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        virtualinvoke $r9.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void disabled(androidx.media3.exoplayer.DecoderCounters)>($r8);

        throw r1;

     label05:
        goto label11;

     label06:
        $r13 := @caughtexception;

        r2 = $r13;

     label07:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onDisabled()>();

     label08:
        $r15 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        $r14 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        virtualinvoke $r15.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void disabled(androidx.media3.exoplayer.DecoderCounters)>($r14);

        goto label10;

     label09:
        $r10 := @caughtexception;

        r3 = $r10;

        $r12 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        $r11 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        virtualinvoke $r12.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void disabled(androidx.media3.exoplayer.DecoderCounters)>($r11);

        throw r3;

     label10:
        throw r2;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    protected void onReset()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        java.lang.Throwable r1, $r3;
        boolean $z0, $z1;
        androidx.media3.exoplayer.audio.AudioSink $r2, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

     label1:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onReset()>();

     label2:
        $z0 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean audioSinkNeedsReset>;

        if $z0 == 0 goto label5;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean audioSinkNeedsReset> = 0;

        $r2 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: void reset()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $z1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean audioSinkNeedsReset>;

        if $z1 == 0 goto label4;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean audioSinkNeedsReset> = 0;

        $r4 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r4.<androidx.media3.exoplayer.audio.AudioSink: void reset()>();

     label4:
        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isEnded()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        boolean $z0, $z1, $z2;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isEnded()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $z1 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: boolean isEnded()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isReady()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $z0 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: boolean hasPendingData()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: boolean isReady()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public long getPositionUs()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        int $i0;
        long $l1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        $i0 = virtualinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: int getState()>();

        if $i0 != 2 goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: void updateCurrentPosition()>();

     label1:
        $l1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: long currentPositionUs>;

        return $l1;
    }

    public void setPlaybackParameters(androidx.media3.common.PlaybackParameters)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.common.PlaybackParameters r1;
        androidx.media3.exoplayer.audio.AudioSink $r2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.common.PlaybackParameters;

        $r2 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r2.<androidx.media3.exoplayer.audio.AudioSink: void setPlaybackParameters(androidx.media3.common.PlaybackParameters)>(r1);

        return;
    }

    public androidx.media3.common.PlaybackParameters getPlaybackParameters()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;
        androidx.media3.common.PlaybackParameters $r2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $r2 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: androidx.media3.common.PlaybackParameters getPlaybackParameters()>();

        return $r2;
    }

    protected void onQueueInputBuffer(androidx.media3.decoder.DecoderInputBuffer)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.decoder.DecoderInputBuffer r1;
        boolean $z0, $z1;
        long $l0, $l1, $l2, $l3, $l5;
        byte $b4;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.decoder.DecoderInputBuffer;

        $z0 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean allowFirstBufferPositionDiscontinuity>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<androidx.media3.decoder.DecoderInputBuffer: boolean isDecodeOnly()>();

        if $z1 != 0 goto label2;

        $l1 = r1.<androidx.media3.decoder.DecoderInputBuffer: long timeUs>;

        $l0 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: long currentPositionUs>;

        $l2 = $l1 - $l0;

        $l3 = staticinvoke <java.lang.Math: long abs(long)>($l2);

        $b4 = $l3 cmp 500000L;

        if $b4 <= 0 goto label1;

        $l5 = r1.<androidx.media3.decoder.DecoderInputBuffer: long timeUs>;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: long currentPositionUs> = $l5;

     label1:
        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean allowFirstBufferPositionDiscontinuity> = 0;

     label2:
        return;
    }

    protected void onProcessedStreamChange()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void onProcessedStreamChange()>();

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void handleDiscontinuity()>();

        return;
    }

    protected boolean processOutputBuffer(long, long, androidx.media3.exoplayer.mediacodec.MediaCodecAdapter, java.nio.ByteBuffer, int, int, int, long, boolean, boolean, androidx.media3.common.Format) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        long l0, l1, l5;
        androidx.media3.exoplayer.mediacodec.MediaCodecAdapter r1, $r11;
        java.nio.ByteBuffer r2;
        int i2, i3, i4, $i6, $i7, $i8, $i9, $i10;
        boolean z0, z1, z2;
        androidx.media3.common.Format r3, $r5;
        androidx.media3.exoplayer.audio.AudioSink $r6, $r9;
        androidx.media3.exoplayer.DecoderCounters $r7, $r8;
        java.lang.Object $r10;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: androidx.media3.exoplayer.mediacodec.MediaCodecAdapter;

        r2 := @parameter3: java.nio.ByteBuffer;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        l5 := @parameter7: long;

        z0 := @parameter8: boolean;

        z1 := @parameter9: boolean;

        r3 := @parameter10: androidx.media3.common.Format;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r5 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.common.Format decryptOnlyCodecFormat>;

        if $r5 == null goto label1;

        $i10 = i3 & 2;

        if $i10 == 0 goto label1;

        $r10 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r11 = (androidx.media3.exoplayer.mediacodec.MediaCodecAdapter) $r10;

        interfaceinvoke $r11.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void releaseOutputBuffer(int,boolean)>(i2, 0);

        return 1;

     label1:
        if z0 == 0 goto label3;

        if r1 == null goto label2;

        interfaceinvoke r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void releaseOutputBuffer(int,boolean)>(i2, 0);

     label2:
        $r8 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        $i8 = $r8.<androidx.media3.exoplayer.DecoderCounters: int skippedOutputBufferCount>;

        $i9 = $i8 + i4;

        $r8.<androidx.media3.exoplayer.DecoderCounters: int skippedOutputBufferCount> = $i9;

        $r9 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r9.<androidx.media3.exoplayer.audio.AudioSink: void handleDiscontinuity()>();

        return 1;

     label3:
        $r6 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        z2 = interfaceinvoke $r6.<androidx.media3.exoplayer.audio.AudioSink: boolean handleBuffer(java.nio.ByteBuffer,long,int)>(r2, l5, i4);

        goto label4;

     label4:
        if z2 == 0 goto label6;

        if r1 == null goto label5;

        interfaceinvoke r1.<androidx.media3.exoplayer.mediacodec.MediaCodecAdapter: void releaseOutputBuffer(int,boolean)>(i2, 0);

     label5:
        $r7 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.DecoderCounters decoderCounters>;

        $i6 = $r7.<androidx.media3.exoplayer.DecoderCounters: int renderedOutputBufferCount>;

        $i7 = $i6 + i4;

        $r7.<androidx.media3.exoplayer.DecoderCounters: int renderedOutputBufferCount> = $i7;

        return 1;

     label6:
        return 0;
    }

    protected void renderToEndOfStream() throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void playToEndOfStream()>();

        goto label1;

     label1:
        return;
    }

    protected void onOutputStreamOffsetUsChanged(long)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        long l0;
        androidx.media3.exoplayer.audio.AudioSink $r1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: void setOutputStreamOffsetUs(long)>(l0);

        return;
    }

    public void handleMessage(int, java.lang.Object) throws androidx.media3.exoplayer.ExoPlaybackException
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        androidx.media3.common.AudioAttributes r2;
        androidx.media3.common.AuxEffectInfo r3;
        androidx.media3.exoplayer.audio.AudioSink $r4, $r7, $r9, $r10, $r11, $r13;
        androidx.media3.exoplayer.Renderer$WakeupListener $r5;
        java.lang.Integer $r6;
        java.lang.Boolean $r8;
        boolean $z0;
        java.lang.Float $r12;
        float $f0;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        tableswitch(i0)
        {
            case 1: goto label8;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label8;
            case 5: goto label8;
            case 6: goto label3;
            case 7: goto label8;
            case 8: goto label8;
            case 9: goto label5;
            case 10: goto label6;
            case 11: goto label7;
            case 12: goto label4;
            default: goto label8;
        };

     label1:
        $r13 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $r12 = (java.lang.Float) r1;

        $f0 = virtualinvoke $r12.<java.lang.Float: float floatValue()>();

        interfaceinvoke $r13.<androidx.media3.exoplayer.audio.AudioSink: void setVolume(float)>($f0);

        goto label9;

     label2:
        r2 = (androidx.media3.common.AudioAttributes) r1;

        $r11 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r11.<androidx.media3.exoplayer.audio.AudioSink: void setAudioAttributes(androidx.media3.common.AudioAttributes)>(r2);

        goto label9;

     label3:
        r3 = (androidx.media3.common.AuxEffectInfo) r1;

        $r10 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        interfaceinvoke $r10.<androidx.media3.exoplayer.audio.AudioSink: void setAuxEffectInfo(androidx.media3.common.AuxEffectInfo)>(r3);

        goto label9;

     label4:
        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 23 goto label9;

        $r4 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$Api23: void setAudioSinkPreferredDevice(androidx.media3.exoplayer.audio.AudioSink,java.lang.Object)>($r4, r1);

        goto label9;

     label5:
        $r9 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $r8 = (java.lang.Boolean) r1;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        interfaceinvoke $r9.<androidx.media3.exoplayer.audio.AudioSink: void setSkipSilenceEnabled(boolean)>($z0);

        goto label9;

     label6:
        $r7 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $r6 = (java.lang.Integer) r1;

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r7.<androidx.media3.exoplayer.audio.AudioSink: void setAudioSessionId(int)>($i2);

        goto label9;

     label7:
        $r5 = (androidx.media3.exoplayer.Renderer$WakeupListener) r1;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.Renderer$WakeupListener wakeupListener> = $r5;

        goto label9;

     label8:
        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecRenderer: void handleMessage(int,java.lang.Object)>(i0, r1);

     label9:
        return;
    }

    protected int getCodecMaxInputSize(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, androidx.media3.common.Format, androidx.media3.common.Format[])
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r1;
        androidx.media3.common.Format r2, r5;
        androidx.media3.common.Format[] r3, r4;
        int i0, $i1, $i2, $i3, i4, i5;
        androidx.media3.exoplayer.DecoderReuseEvaluation $r6;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r2 := @parameter1: androidx.media3.common.Format;

        r3 := @parameter2: androidx.media3.common.Format[];

        i4 = specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: int getCodecMaxInputSize(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,androidx.media3.common.Format)>(r1, r2);

        $i1 = lengthof r3;

        if $i1 != 1 goto label1;

        return i4;

     label1:
        r4 = r3;

        i0 = lengthof r4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label4;

        r5 = r4[i5];

        $r6 = virtualinvoke r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: androidx.media3.exoplayer.DecoderReuseEvaluation canReuseCodec(androidx.media3.common.Format,androidx.media3.common.Format)>(r2, r5);

        $i2 = $r6.<androidx.media3.exoplayer.DecoderReuseEvaluation: int result>;

        if $i2 == 0 goto label3;

        $i3 = specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: int getCodecMaxInputSize(androidx.media3.exoplayer.mediacodec.MediaCodecInfo,androidx.media3.common.Format)>(r1, r5);

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i4, $i3);

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return i4;
    }

    private int getCodecMaxInputSize(androidx.media3.exoplayer.mediacodec.MediaCodecInfo, androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r1;
        androidx.media3.common.Format r2;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        android.content.Context $r5;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r2 := @parameter1: androidx.media3.common.Format;

        $r4 = "OMX.google.raw.decoder";

        $r3 = r1.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 24 goto label2;

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 != 23 goto label1;

        $r5 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: android.content.Context context>;

        $z1 = staticinvoke <androidx.media3.common.util.Util: boolean isTv(android.content.Context)>($r5);

        if $z1 != 0 goto label2;

     label1:
        return -1;

     label2:
        $i2 = r2.<androidx.media3.common.Format: int maxInputSize>;

        return $i2;
    }

    protected android.media.MediaFormat getMediaFormat(androidx.media3.common.Format, java.lang.String, int, float)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.common.Format r1, $r7;
        java.lang.String r2, $r8, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10;
        float f0;
        android.media.MediaFormat r3, $r4;
        java.util.List $r5;
        androidx.media3.exoplayer.audio.AudioSink $r6;
        boolean $z0, $z1;
        byte $b7;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        $r4 = new android.media.MediaFormat;

        specialinvoke $r4.<android.media.MediaFormat: void <init>()>();

        r3 = $r4;

        virtualinvoke r3.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r2);

        $i1 = r1.<androidx.media3.common.Format: int channelCount>;

        virtualinvoke r3.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("channel-count", $i1);

        $i2 = r1.<androidx.media3.common.Format: int sampleRate>;

        virtualinvoke r3.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("sample-rate", $i2);

        $r5 = r1.<androidx.media3.common.Format: java.util.List initializationData>;

        staticinvoke <androidx.media3.common.util.MediaFormatUtil: void setCsdBuffers(android.media.MediaFormat,java.util.List)>(r3, $r5);

        staticinvoke <androidx.media3.common.util.MediaFormatUtil: void maybeSetInteger(android.media.MediaFormat,java.lang.String,int)>(r3, "max-input-size", i0);

        $i3 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i3 < 23 goto label1;

        virtualinvoke r3.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("priority", 0);

        $b7 = f0 cmpl -1.0F;

        if $b7 == 0 goto label1;

        $z1 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean deviceDoesntSupportOperatingRate()>();

        if $z1 != 0 goto label1;

        virtualinvoke r3.<android.media.MediaFormat: void setFloat(java.lang.String,float)>("operating-rate", f0);

     label1:
        $i8 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i8 > 28 goto label2;

        $r9 = "audio/ac4";

        $r8 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        virtualinvoke r3.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("ac4-is-sync", 1);

     label2:
        $i9 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i9 < 24 goto label3;

        $r6 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $i5 = r1.<androidx.media3.common.Format: int channelCount>;

        $i4 = r1.<androidx.media3.common.Format: int sampleRate>;

        $r7 = staticinvoke <androidx.media3.common.util.Util: androidx.media3.common.Format getPcmFormat(int,int,int)>(4, $i5, $i4);

        $i6 = interfaceinvoke $r6.<androidx.media3.exoplayer.audio.AudioSink: int getFormatSupport(androidx.media3.common.Format)>($r7);

        if $i6 != 2 goto label3;

        virtualinvoke r3.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("pcm-encoding", 4);

     label3:
        $i10 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i10 < 32 goto label4;

        virtualinvoke r3.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("max-output-channel-count", 99);

     label4:
        return r3;
    }

    private void updateCurrentPosition()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        long l0, $l2, $l3;
        androidx.media3.exoplayer.audio.AudioSink $r1;
        boolean $z0, $z1;
        byte $b1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioSink audioSink>;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean isEnded()>();

        l0 = interfaceinvoke $r1.<androidx.media3.exoplayer.audio.AudioSink: long getCurrentPositionUs(boolean)>($z0);

        $b1 = l0 cmp -9223372036854775808L;

        if $b1 == 0 goto label3;

        $z1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean allowPositionDiscontinuity>;

        if $z1 == 0 goto label1;

        $l3 = l0;

        goto label2;

     label1:
        $l2 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: long currentPositionUs>;

        $l3 = staticinvoke <java.lang.Math: long max(long,long)>($l2, l0);

     label2:
        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: long currentPositionUs> = $l3;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: boolean allowPositionDiscontinuity> = 0;

     label3:
        return;
    }

    private static boolean deviceDoesntSupportOperatingRate()
    {
        int $i0;
        java.lang.String $r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 != 23 goto label2;

        $r1 = "ZTE B2017G";

        $r0 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label1;

        $r3 = "AXON 7 mini";

        $r2 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean codecNeedsDiscardChannelsWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.String;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 24 goto label2;

        $r1 = "OMX.SEC.aac.dec";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r3 = "samsung";

        $r2 = <androidx.media3.common.util.Util: java.lang.String MANUFACTURER>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $r4 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("zeroflte");

        if $z2 != 0 goto label1;

        $r5 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z3 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("herolte");

        if $z3 != 0 goto label1;

        $r6 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z4 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("heroqlte");

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;
    }

    static androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher access$100(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r1;

        r0 := @parameter0: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher eventDispatcher>;

        return $r1;
    }

    static androidx.media3.exoplayer.Renderer$WakeupListener access$200(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r0;
        androidx.media3.exoplayer.Renderer$WakeupListener $r1;

        r0 := @parameter0: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.Renderer$WakeupListener wakeupListener>;

        return $r1;
    }

androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$1
androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$Api23
    private void <init>()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$Api23 r0;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$Api23;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setAudioSinkPreferredDevice(androidx.media3.exoplayer.audio.AudioSink, java.lang.Object)
    {
        androidx.media3.exoplayer.audio.AudioSink r0;
        java.lang.Object r1;
        android.media.AudioDeviceInfo r2;

        r0 := @parameter0: androidx.media3.exoplayer.audio.AudioSink;

        r1 := @parameter1: java.lang.Object;

        r2 = (android.media.AudioDeviceInfo) r1;

        interfaceinvoke r0.<androidx.media3.exoplayer.audio.AudioSink: void setPreferredDevice(android.media.AudioDeviceInfo)>(r2);

        return;
    }

androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener
<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>
    private void <init>(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener r0;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        r1 := @parameter0: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onPositionDiscontinuity()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener r0;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer $r1;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>;

        virtualinvoke $r1.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: void onPositionDiscontinuity()>();

        return;
    }

    public void onPositionAdvancing(long)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener r0;
        long l0;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer $r1;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher access$100(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)>($r1);

        virtualinvoke $r2.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void positionAdvancing(long)>(l0);

        return;
    }

    public void onUnderrun(int, long, long)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener r0;
        int i0;
        long l1, l2;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer $r1;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher access$100(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)>($r1);

        virtualinvoke $r2.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void underrun(int,long,long)>(i0, l1, l2);

        return;
    }

    public void onSkipSilenceEnabledChanged(boolean)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener r0;
        boolean z0;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer $r1;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher access$100(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)>($r1);

        virtualinvoke $r2.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void skipSilenceEnabledChanged(boolean)>(z0);

        return;
    }

    public void onOffloadBufferEmptying()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener r0;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer $r1, $r3;
        androidx.media3.exoplayer.Renderer$WakeupListener $r2, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.Renderer$WakeupListener access$200(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)>($r1);

        if $r2 == null goto label1;

        $r3 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>;

        $r4 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.Renderer$WakeupListener access$200(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)>($r3);

        interfaceinvoke $r4.<androidx.media3.exoplayer.Renderer$WakeupListener: void onWakeup()>();

     label1:
        return;
    }

    public void onOffloadBufferFull()
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener r0;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer $r1, $r3;
        androidx.media3.exoplayer.Renderer$WakeupListener $r2, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        $r1 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.Renderer$WakeupListener access$200(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)>($r1);

        if $r2 == null goto label1;

        $r3 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>;

        $r4 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.Renderer$WakeupListener access$200(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)>($r3);

        interfaceinvoke $r4.<androidx.media3.exoplayer.Renderer$WakeupListener: void onSleep()>();

     label1:
        return;
    }

    public void onAudioSinkError(java.lang.Exception)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener r0;
        java.lang.Exception r1;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer $r2;
        androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher $r3;
        java.lang.Throwable r4;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        r1 := @parameter0: java.lang.Exception;

        r4 = (java.lang.Throwable) r1;

        staticinvoke <androidx.media3.common.util.Log: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecAudioRenderer", "Audio sink error", r4);

        $r2 = r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer this$0>;

        $r3 = staticinvoke <androidx.media3.exoplayer.audio.MediaCodecAudioRenderer: androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher access$100(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)>($r2);

        virtualinvoke $r3.<androidx.media3.exoplayer.audio.AudioRendererEventListener$EventDispatcher: void audioSinkError(java.lang.Exception)>(r1);

        return;
    }

    void <init>(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer, androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$1)
    {
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener r0;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer r1;
        androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$1 r2;

        r0 := @this: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener;

        r1 := @parameter0: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer;

        r2 := @parameter1: androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$1;

        specialinvoke r0.<androidx.media3.exoplayer.audio.MediaCodecAudioRenderer$AudioSinkListener: void <init>(androidx.media3.exoplayer.audio.MediaCodecAudioRenderer)>(r1);

        return;
    }

