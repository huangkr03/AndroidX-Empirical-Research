androidx.media3.extractor.mkv.MatroskaExtractor
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.ExtractorsFactory FACTORY>
<androidx.media3.extractor.mkv.MatroskaExtractor: int FLAG_DISABLE_SEEK_FOR_CUES>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String TAG>
<androidx.media3.extractor.mkv.MatroskaExtractor: int UNSET_ENTRY_ID>
<androidx.media3.extractor.mkv.MatroskaExtractor: int BLOCK_STATE_START>
<androidx.media3.extractor.mkv.MatroskaExtractor: int BLOCK_STATE_HEADER>
<androidx.media3.extractor.mkv.MatroskaExtractor: int BLOCK_STATE_DATA>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String DOC_TYPE_MATROSKA>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String DOC_TYPE_WEBM>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_VP8>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_VP9>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_AV1>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_MPEG2>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_MPEG4_SP>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_MPEG4_ASP>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_MPEG4_AP>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_H264>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_H265>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_FOURCC>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_THEORA>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_VORBIS>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_OPUS>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_AAC>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_MP2>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_MP3>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_AC3>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_E_AC3>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_TRUEHD>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_DTS>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_DTS_EXPRESS>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_DTS_LOSSLESS>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_FLAC>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_ACM>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_PCM_INT_LIT>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_PCM_INT_BIG>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_PCM_FLOAT>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_SUBRIP>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_ASS>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_VTT>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_VOBSUB>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_PGS>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String CODEC_ID_DVBSUB>
<androidx.media3.extractor.mkv.MatroskaExtractor: int VORBIS_MAX_INPUT_SIZE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int OPUS_MAX_INPUT_SIZE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ENCRYPTION_IV_SIZE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int TRACK_TYPE_AUDIO>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_EBML>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_EBML_READ_VERSION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_DOC_TYPE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_DOC_TYPE_READ_VERSION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_SEGMENT>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_SEGMENT_INFO>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_SEEK_HEAD>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_SEEK>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_SEEK_ID>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_SEEK_POSITION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_INFO>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_TIMECODE_SCALE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_DURATION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CLUSTER>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_TIME_CODE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_SIMPLE_BLOCK>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK_GROUP>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK_DURATION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK_ADDITIONS>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK_MORE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK_ADD_ID>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK_ADDITIONAL>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_REFERENCE_BLOCK>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_TRACKS>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_TRACK_ENTRY>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_TRACK_NUMBER>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_TRACK_TYPE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_FLAG_DEFAULT>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_FLAG_FORCED>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_DEFAULT_DURATION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_MAX_BLOCK_ADDITION_ID>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK_ADDITION_MAPPING>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK_ADD_ID_TYPE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_BLOCK_ADD_ID_EXTRA_DATA>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_NAME>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CODEC_ID>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CODEC_PRIVATE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CODEC_DELAY>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_SEEK_PRE_ROLL>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_DISCARD_PADDING>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_VIDEO>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PIXEL_WIDTH>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PIXEL_HEIGHT>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_DISPLAY_WIDTH>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_DISPLAY_HEIGHT>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_DISPLAY_UNIT>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_AUDIO>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CHANNELS>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_AUDIO_BIT_DEPTH>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_SAMPLING_FREQUENCY>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_ENCODINGS>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_ENCODING>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_ENCODING_ORDER>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_ENCODING_SCOPE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_COMPRESSION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_COMPRESSION_ALGORITHM>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_COMPRESSION_SETTINGS>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_ENCRYPTION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_ENCRYPTION_ALGORITHM>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_ENCRYPTION_KEY_ID>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_ENCRYPTION_AES_SETTINGS>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CONTENT_ENCRYPTION_AES_SETTINGS_CIPHER_MODE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CUES>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CUE_POINT>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CUE_TIME>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CUE_TRACK_POSITIONS>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_CUE_CLUSTER_POSITION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_LANGUAGE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PROJECTION>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PROJECTION_TYPE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PROJECTION_PRIVATE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PROJECTION_POSE_YAW>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PROJECTION_POSE_PITCH>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PROJECTION_POSE_ROLL>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_STEREO_MODE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_COLOUR>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_COLOUR_RANGE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_COLOUR_TRANSFER>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_COLOUR_PRIMARIES>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_MAX_CLL>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_MAX_FALL>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_MASTERING_METADATA>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PRIMARY_R_CHROMATICITY_X>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PRIMARY_R_CHROMATICITY_Y>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PRIMARY_G_CHROMATICITY_X>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PRIMARY_G_CHROMATICITY_Y>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PRIMARY_B_CHROMATICITY_X>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_PRIMARY_B_CHROMATICITY_Y>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_WHITE_POINT_CHROMATICITY_X>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_WHITE_POINT_CHROMATICITY_Y>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_LUMNINANCE_MAX>
<androidx.media3.extractor.mkv.MatroskaExtractor: int ID_LUMNINANCE_MIN>
<androidx.media3.extractor.mkv.MatroskaExtractor: int BLOCK_ADDITIONAL_ID_VP9_ITU_T_35>
<androidx.media3.extractor.mkv.MatroskaExtractor: int BLOCK_ADD_ID_TYPE_DVCC>
<androidx.media3.extractor.mkv.MatroskaExtractor: int BLOCK_ADD_ID_TYPE_DVVC>
<androidx.media3.extractor.mkv.MatroskaExtractor: int LACING_NONE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int LACING_XIPH>
<androidx.media3.extractor.mkv.MatroskaExtractor: int LACING_FIXED_SIZE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int LACING_EBML>
<androidx.media3.extractor.mkv.MatroskaExtractor: int FOURCC_COMPRESSION_DIVX>
<androidx.media3.extractor.mkv.MatroskaExtractor: int FOURCC_COMPRESSION_H263>
<androidx.media3.extractor.mkv.MatroskaExtractor: int FOURCC_COMPRESSION_VC1>
<androidx.media3.extractor.mkv.MatroskaExtractor: byte[] SUBRIP_PREFIX>
<androidx.media3.extractor.mkv.MatroskaExtractor: int SUBRIP_PREFIX_END_TIMECODE_OFFSET>
<androidx.media3.extractor.mkv.MatroskaExtractor: long SUBRIP_TIMECODE_LAST_VALUE_SCALING_FACTOR>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String SUBRIP_TIMECODE_FORMAT>
<androidx.media3.extractor.mkv.MatroskaExtractor: byte[] SSA_DIALOGUE_FORMAT>
<androidx.media3.extractor.mkv.MatroskaExtractor: byte[] SSA_PREFIX>
<androidx.media3.extractor.mkv.MatroskaExtractor: int SSA_PREFIX_END_TIMECODE_OFFSET>
<androidx.media3.extractor.mkv.MatroskaExtractor: long SSA_TIMECODE_LAST_VALUE_SCALING_FACTOR>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String SSA_TIMECODE_FORMAT>
<androidx.media3.extractor.mkv.MatroskaExtractor: byte[] VTT_PREFIX>
<androidx.media3.extractor.mkv.MatroskaExtractor: int VTT_PREFIX_END_TIMECODE_OFFSET>
<androidx.media3.extractor.mkv.MatroskaExtractor: long VTT_TIMECODE_LAST_VALUE_SCALING_FACTOR>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.lang.String VTT_TIMECODE_FORMAT>
<androidx.media3.extractor.mkv.MatroskaExtractor: int WAVE_FORMAT_SIZE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int WAVE_FORMAT_EXTENSIBLE>
<androidx.media3.extractor.mkv.MatroskaExtractor: int WAVE_FORMAT_PCM>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.util.UUID WAVE_SUBFORMAT_PCM>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.util.Map TRACK_NAME_TO_ROTATION_DEGREES>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.EbmlReader reader>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.VarintReader varintReader>
<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seekForCuesEnabled>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray nalStartCode>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray nalLength>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray vorbisNumPageSamples>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray seekEntryIdBytes>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray encryptionInitializationVector>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray encryptionSubsampleData>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray supplementalData>
<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>
<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentSize>
<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentPosition>
<androidx.media3.extractor.mkv.MatroskaExtractor: long timecodeScale>
<androidx.media3.extractor.mkv.MatroskaExtractor: long durationTimecode>
<androidx.media3.extractor.mkv.MatroskaExtractor: long durationUs>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sentSeekMap>
<androidx.media3.extractor.mkv.MatroskaExtractor: int seekEntryId>
<androidx.media3.extractor.mkv.MatroskaExtractor: long seekEntryPosition>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seekForCues>
<androidx.media3.extractor.mkv.MatroskaExtractor: long cuesContentPosition>
<androidx.media3.extractor.mkv.MatroskaExtractor: long seekPositionAfterBuildingCues>
<androidx.media3.extractor.mkv.MatroskaExtractor: long clusterTimecodeUs>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueTimesUs>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueClusterPositions>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seenClusterPositionForCurrentCuePoint>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean haveOutputSample>
<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState>
<androidx.media3.extractor.mkv.MatroskaExtractor: long blockTimeUs>
<androidx.media3.extractor.mkv.MatroskaExtractor: long blockDurationUs>
<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex>
<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>
<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>
<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumber>
<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumberLength>
<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags>
<androidx.media3.extractor.mkv.MatroskaExtractor: int blockAdditionalId>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean blockHasReferenceBlock>
<androidx.media3.extractor.mkv.MatroskaExtractor: long blockGroupDiscardPaddingNs>
<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>
<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>
<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleCurrentNalBytesRemaining>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleEncodingHandled>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleSignalByteRead>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean samplePartitionCountRead>
<androidx.media3.extractor.mkv.MatroskaExtractor: int samplePartitionCount>
<androidx.media3.extractor.mkv.MatroskaExtractor: byte sampleSignalByte>
<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleInitializationVectorRead>
<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.ExtractorOutput extractorOutput>
    public void <init>()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void <init>(int)>(0);

        return;
    }

    public void <init>(int)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0;
        androidx.media3.extractor.mkv.DefaultEbmlReader $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        $r1 = new androidx.media3.extractor.mkv.DefaultEbmlReader;

        specialinvoke $r1.<androidx.media3.extractor.mkv.DefaultEbmlReader: void <init>()>();

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void <init>(androidx.media3.extractor.mkv.EbmlReader,int)>($r1, i0);

        return;
    }

    void <init>(androidx.media3.extractor.mkv.EbmlReader, int)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.mkv.EbmlReader r1, $r3;
        int i0, $i1;
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor $r2;
        androidx.media3.extractor.mkv.VarintReader $r4;
        android.util.SparseArray $r5;
        androidx.media3.common.util.ParsableByteArray $r6, $r7, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19;
        java.nio.ByteBuffer $r8, $r9;
        byte[] $r10, $r13;
        int[] $r20;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.mkv.EbmlReader;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentPosition> = -1L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long timecodeScale> = -9223372036854775807L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationTimecode> = -9223372036854775807L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationUs> = -9223372036854775807L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long cuesContentPosition> = -1L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long seekPositionAfterBuildingCues> = -1L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long clusterTimecodeUs> = -9223372036854775807L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.EbmlReader reader> = r1;

        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.EbmlReader reader>;

        $r2 = new androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        specialinvoke $r2.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: void <init>(androidx.media3.extractor.mkv.MatroskaExtractor,androidx.media3.extractor.mkv.MatroskaExtractor$1)>(r0, null);

        interfaceinvoke $r3.<androidx.media3.extractor.mkv.EbmlReader: void init(androidx.media3.extractor.mkv.EbmlProcessor)>($r2);

        $i1 = i0 & 1;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seekForCuesEnabled> = $z0;

        $r4 = new androidx.media3.extractor.mkv.VarintReader;

        specialinvoke $r4.<androidx.media3.extractor.mkv.VarintReader: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.VarintReader varintReader> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks> = $r5;

        $r6 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r6.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(4);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch> = $r6;

        $r7 = new androidx.media3.common.util.ParsableByteArray;

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        $r9 = virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(-1);

        $r10 = virtualinvoke $r9.<java.nio.ByteBuffer: byte[] array()>();

        specialinvoke $r7.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r10);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray vorbisNumPageSamples> = $r7;

        $r11 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r11.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(4);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray seekEntryIdBytes> = $r11;

        $r12 = new androidx.media3.common.util.ParsableByteArray;

        $r13 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        specialinvoke $r12.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r13);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray nalStartCode> = $r12;

        $r14 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r14.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(4);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray nalLength> = $r14;

        $r15 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r15.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes> = $r15;

        $r16 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r16.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample> = $r16;

        $r17 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r17.<androidx.media3.common.util.ParsableByteArray: void <init>(int)>(8);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray encryptionInitializationVector> = $r17;

        $r18 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r18.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray encryptionSubsampleData> = $r18;

        $r19 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r19.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray supplementalData> = $r19;

        $r20 = newarray (int)[1];

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes> = $r20;

        return;
    }

    public final boolean sniff(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.mkv.Sniffer $r2;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $r2 = new androidx.media3.extractor.mkv.Sniffer;

        specialinvoke $r2.<androidx.media3.extractor.mkv.Sniffer: void <init>()>();

        $z0 = virtualinvoke $r2.<androidx.media3.extractor.mkv.Sniffer: boolean sniff(androidx.media3.extractor.ExtractorInput)>(r1);

        return $z0;
    }

    public final void init(androidx.media3.extractor.ExtractorOutput)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.ExtractorOutput r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.ExtractorOutput extractorOutput> = r1;

        return;
    }

    public void seek(long, long)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        long l0, l1;
        androidx.media3.extractor.mkv.EbmlReader $r1;
        androidx.media3.extractor.mkv.VarintReader $r2;
        android.util.SparseArray $r3, $r4;
        int $i2, i3;
        java.lang.Object $r5;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track $r6;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long clusterTimecodeUs> = -9223372036854775807L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState> = 0;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.EbmlReader reader>;

        interfaceinvoke $r1.<androidx.media3.extractor.mkv.EbmlReader: void reset()>();

        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.VarintReader varintReader>;

        virtualinvoke $r2.<androidx.media3.extractor.mkv.VarintReader: void reset()>();

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void resetWriteSampleData()>();

        i3 = 0;

     label1:
        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>;

        $i2 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i3 >= $i2 goto label2;

        $r4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r6 = (androidx.media3.extractor.mkv.MatroskaExtractor$Track) $r5;

        virtualinvoke $r6.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: void reset()>();

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public final void release()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        return;
    }

    public final int read(androidx.media3.extractor.ExtractorInput, androidx.media3.extractor.PositionHolder) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.PositionHolder r2;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r3;
        android.util.SparseArray $r4, $r5;
        int $i0, i2;
        java.lang.Object $r6;
        boolean $z0, $z1, z2;
        androidx.media3.extractor.mkv.EbmlReader $r7;
        long $l1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.extractor.PositionHolder;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean haveOutputSample> = 0;

        z2 = 1;

     label1:
        if z2 == 0 goto label2;

        $z0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean haveOutputSample>;

        if $z0 != 0 goto label2;

        $r7 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.EbmlReader reader>;

        z2 = interfaceinvoke $r7.<androidx.media3.extractor.mkv.EbmlReader: boolean read(androidx.media3.extractor.ExtractorInput)>(r1);

        if z2 == 0 goto label1;

        $l1 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getPosition()>();

        $z1 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean maybeSeekForCues(androidx.media3.extractor.PositionHolder,long)>(r2, $l1);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        if z2 != 0 goto label5;

        i2 = 0;

     label3:
        $r4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>;

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label4;

        $r5 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r3 = (androidx.media3.extractor.mkv.MatroskaExtractor$Track) $r6;

        staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: void access$100(androidx.media3.extractor.mkv.MatroskaExtractor$Track)>(r3);

        virtualinvoke r3.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: void outputPendingSampleMetadata()>();

        i2 = i2 + 1;

        goto label3;

     label4:
        return -1;

     label5:
        return 0;
    }

    protected int getElementType(int)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 131: goto label2;
            case 134: goto label3;
            case 136: goto label2;
            case 155: goto label2;
            case 159: goto label2;
            case 160: goto label1;
            case 161: goto label4;
            case 163: goto label4;
            case 165: goto label4;
            case 166: goto label1;
            case 174: goto label1;
            case 176: goto label2;
            case 179: goto label2;
            case 181: goto label5;
            case 183: goto label1;
            case 186: goto label2;
            case 187: goto label1;
            case 215: goto label2;
            case 224: goto label1;
            case 225: goto label1;
            case 231: goto label2;
            case 238: goto label2;
            case 241: goto label2;
            case 251: goto label2;
            case 16868: goto label1;
            case 16871: goto label2;
            case 16877: goto label4;
            case 16980: goto label2;
            case 16981: goto label4;
            case 17026: goto label3;
            case 17029: goto label2;
            case 17143: goto label2;
            case 17545: goto label5;
            case 18401: goto label2;
            case 18402: goto label4;
            case 18407: goto label1;
            case 18408: goto label2;
            case 19899: goto label1;
            case 20529: goto label2;
            case 20530: goto label2;
            case 20532: goto label1;
            case 20533: goto label1;
            case 21358: goto label3;
            case 21419: goto label4;
            case 21420: goto label2;
            case 21432: goto label2;
            case 21680: goto label2;
            case 21682: goto label2;
            case 21690: goto label2;
            case 21930: goto label2;
            case 21936: goto label1;
            case 21945: goto label2;
            case 21946: goto label2;
            case 21947: goto label2;
            case 21948: goto label2;
            case 21949: goto label2;
            case 21968: goto label1;
            case 21969: goto label5;
            case 21970: goto label5;
            case 21971: goto label5;
            case 21972: goto label5;
            case 21973: goto label5;
            case 21974: goto label5;
            case 21975: goto label5;
            case 21976: goto label5;
            case 21977: goto label5;
            case 21978: goto label5;
            case 21998: goto label2;
            case 22186: goto label2;
            case 22203: goto label2;
            case 25152: goto label1;
            case 25188: goto label2;
            case 25506: goto label4;
            case 28032: goto label1;
            case 30113: goto label1;
            case 30114: goto label2;
            case 30320: goto label1;
            case 30321: goto label2;
            case 30322: goto label4;
            case 30323: goto label5;
            case 30324: goto label5;
            case 30325: goto label5;
            case 2274716: goto label3;
            case 2352003: goto label2;
            case 2807729: goto label2;
            case 290298740: goto label1;
            case 357149030: goto label1;
            case 374648427: goto label1;
            case 408125543: goto label1;
            case 440786851: goto label1;
            case 475249515: goto label1;
            case 524531317: goto label1;
            default: goto label6;
        };

     label1:
        return 1;

     label2:
        return 2;

     label3:
        return 3;

     label4:
        return 4;

     label5:
        return 5;

     label6:
        return 0;
    }

    protected boolean isLevel1Element(int)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        if i0 == 357149030 goto label1;

        if i0 == 524531317 goto label1;

        if i0 == 475249515 goto label1;

        if i0 != 374648427 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected void startMasterElement(int, long, long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0;
        long l1, l2, $l3, $l4, $l6, $l8;
        boolean $z0, $z1;
        androidx.media3.extractor.ExtractorOutput $r2;
        byte $b5, $b7, $b9;
        androidx.media3.common.ParserException $r5;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track $r6, $r7, r12;
        androidx.media3.common.util.LongArray r9, r10;
        androidx.media3.extractor.SeekMap$Unseekable r11;
        java.lang.Throwable r13;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInitialized()>();

        lookupswitch(i0)
        {
            case 160: goto label08;
            case 174: goto label11;
            case 187: goto label05;
            case 19899: goto label03;
            case 20533: goto label10;
            case 21968: goto label12;
            case 25152: goto label09;
            case 408125543: goto label01;
            case 475249515: goto label04;
            case 524531317: goto label06;
            default: goto label13;
        };

     label01:
        $l6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentPosition>;

        $b7 = $l6 cmp -1L;

        if $b7 == 0 goto label02;

        $l8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentPosition>;

        $b9 = $l8 cmp l1;

        if $b9 == 0 goto label02;

        $r5 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Multiple Segment elements not supported", null);

        r13 = (java.lang.Throwable) $r5;

        throw r13;

     label02:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentPosition> = l1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentSize> = l2;

        goto label13;

     label03:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int seekEntryId> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long seekEntryPosition> = -1L;

        goto label13;

     label04:
        r9 = new androidx.media3.common.util.LongArray;

        specialinvoke r9.<androidx.media3.common.util.LongArray: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueTimesUs> = r9;

        r10 = new androidx.media3.common.util.LongArray;

        specialinvoke r10.<androidx.media3.common.util.LongArray: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueClusterPositions> = r10;

        goto label13;

     label05:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seenClusterPositionForCurrentCuePoint> = 0;

        goto label13;

     label06:
        $z0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sentSeekMap>;

        if $z0 != 0 goto label13;

        $z1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seekForCuesEnabled>;

        if $z1 == 0 goto label07;

        $l4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long cuesContentPosition>;

        $b5 = $l4 cmp -1L;

        if $b5 == 0 goto label07;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seekForCues> = 1;

        goto label13;

     label07:
        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        r11 = new androidx.media3.extractor.SeekMap$Unseekable;

        $l3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationUs>;

        specialinvoke r11.<androidx.media3.extractor.SeekMap$Unseekable: void <init>(long)>($l3);

        interfaceinvoke $r2.<androidx.media3.extractor.ExtractorOutput: void seekMap(androidx.media3.extractor.SeekMap)>(r11);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sentSeekMap> = 1;

        goto label13;

     label08:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean blockHasReferenceBlock> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockGroupDiscardPaddingNs> = 0L;

        goto label13;

     label09:
        goto label13;

     label10:
        $r7 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $r7.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasContentEncryption> = 1;

        goto label13;

     label11:
        r12 = new androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        specialinvoke r12.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack> = r12;

        goto label13;

     label12:
        $r6 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $r6.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasColorInfo> = 1;

        goto label13;

     label13:
        return;
    }

    protected void endMasterElement(int) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0, i2, $i3, $i10, $i13, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i27, i29, i30, $i31, i32, i33;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r1, $r9, $r10, $r13, $r14, $r19, $r23, $r26, r45;
        long l1, $l4, $l6, $l8, $l9, $l11, $l14, $l19, $l25, $l26, $l28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.media3.common.util.LongArray $r2, $r3;
        androidx.media3.extractor.ExtractorOutput $r4, $r7, $r30;
        androidx.media3.extractor.SeekMap $r5;
        android.util.SparseArray $r6, $r31, $r33;
        androidx.media3.common.ParserException $r8, $r12, $r24, $r25, $r32;
        byte $b5, $b7, $b12, $b20;
        byte[] $r11, $r21, $r43;
        androidx.media3.extractor.TrackOutput$CryptoData $r15, $r20;
        androidx.media3.common.DrmInitData$SchemeData[] $r17;
        java.util.UUID $r22;
        java.lang.Object $r27, $r34;
        java.lang.String $r28, $r29, $r36, $r37;
        int[] $r35, $r44;
        androidx.media3.common.util.ParsableByteArray $r38;
        java.nio.ByteBuffer $r39, $r41, $r42;
        java.nio.ByteOrder $r40;
        androidx.media3.common.DrmInitData$SchemeData r46;
        androidx.media3.common.DrmInitData r47;
        java.lang.Throwable r48, r49, r50, r51, r52;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInitialized()>();

        lookupswitch(i0)
        {
            case 160: goto label08;
            case 174: goto label19;
            case 19899: goto label03;
            case 25152: goto label16;
            case 28032: goto label18;
            case 357149030: goto label01;
            case 374648427: goto label22;
            case 475249515: goto label06;
            default: goto label24;
        };

     label01:
        $l4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long timecodeScale>;

        $b5 = $l4 cmp -9223372036854775807L;

        if $b5 != 0 goto label02;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long timecodeScale> = 1000000L;

     label02:
        $l6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationTimecode>;

        $b7 = $l6 cmp -9223372036854775807L;

        if $b7 == 0 goto label24;

        $l8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationTimecode>;

        $l9 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long scaleTimecodeToUs(long)>($l8);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationUs> = $l9;

        goto label24;

     label03:
        $i10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int seekEntryId>;

        if $i10 == -1 goto label04;

        $l11 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long seekEntryPosition>;

        $b12 = $l11 cmp -1L;

        if $b12 != 0 goto label05;

     label04:
        $r25 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Mandatory element SeekID or SeekPosition not found", null);

        r48 = (java.lang.Throwable) $r25;

        throw r48;

     label05:
        $i13 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int seekEntryId>;

        if $i13 != 475249515 goto label24;

        $l14 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long seekEntryPosition>;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long cuesContentPosition> = $l14;

        goto label24;

     label06:
        $z0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sentSeekMap>;

        if $z0 != 0 goto label07;

        $r4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueTimesUs>;

        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueClusterPositions>;

        $r5 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.SeekMap buildSeekMap(androidx.media3.common.util.LongArray,androidx.media3.common.util.LongArray)>($r3, $r2);

        interfaceinvoke $r4.<androidx.media3.extractor.ExtractorOutput: void seekMap(androidx.media3.extractor.SeekMap)>($r5);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sentSeekMap> = 1;

     label07:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueTimesUs> = null;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueClusterPositions> = null;

        goto label24;

     label08:
        $i17 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState>;

        if $i17 == 2 goto label09;

        return;

     label09:
        $r33 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>;

        $i18 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumber>;

        $r34 = virtualinvoke $r33.<android.util.SparseArray: java.lang.Object get(int)>($i18);

        r1 = (androidx.media3.extractor.mkv.MatroskaExtractor$Track) $r34;

        staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: void access$100(androidx.media3.extractor.mkv.MatroskaExtractor$Track)>(r1);

        $l19 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockGroupDiscardPaddingNs>;

        $b20 = $l19 cmp 0L;

        if $b20 <= 0 goto label10;

        $r37 = "A_OPUS";

        $r36 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z5 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>($r36);

        if $z5 == 0 goto label10;

        $r38 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray supplementalData>;

        $r39 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r40 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r41 = virtualinvoke $r39.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r40);

        $l28 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockGroupDiscardPaddingNs>;

        $r42 = virtualinvoke $r41.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l28);

        $r43 = virtualinvoke $r42.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r38.<androidx.media3.common.util.ParsableByteArray: void reset(byte[])>($r43);

     label10:
        i29 = 0;

        i30 = 0;

     label11:
        $i31 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        if i30 >= $i31 goto label12;

        $r35 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i27 = $r35[i30];

        i29 = i29 + $i27;

        i30 = i30 + 1;

        goto label11;

     label12:
        i32 = 0;

     label13:
        $i21 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        if i32 >= $i21 goto label15;

        $l26 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockTimeUs>;

        $i22 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int defaultSampleDurationNs>;

        $i23 = i32 * $i22;

        $i24 = $i23 / 1000;

        $l25 = (long) $i24;

        l1 = $l26 + $l25;

        i33 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags>;

        if i32 != 0 goto label14;

        $z4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean blockHasReferenceBlock>;

        if $z4 != 0 goto label14;

        i33 = i33 | 1;

     label14:
        $r44 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        i2 = $r44[i32];

        i29 = i29 - i2;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void commitSampleToOutput(androidx.media3.extractor.mkv.MatroskaExtractor$Track,long,int,int,int)>(r1, l1, i33, i2, i29);

        i32 = i32 + 1;

        goto label13;

     label15:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState> = 0;

        goto label24;

     label16:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $r13 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $z2 = $r13.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasContentEncryption>;

        if $z2 == 0 goto label24;

        $r14 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r15 = $r14.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>;

        if $r15 != null goto label17;

        $r24 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Encrypted Track found but ContentEncKeyID was not found", null);

        r49 = (java.lang.Throwable) $r24;

        throw r49;

     label17:
        $r23 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        r47 = new androidx.media3.common.DrmInitData;

        $r17 = newarray (androidx.media3.common.DrmInitData$SchemeData)[1];

        r46 = new androidx.media3.common.DrmInitData$SchemeData;

        $r22 = <androidx.media3.common.C: java.util.UUID UUID_NIL>;

        $r19 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r20 = $r19.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>;

        $r21 = $r20.<androidx.media3.extractor.TrackOutput$CryptoData: byte[] encryptionKey>;

        specialinvoke r46.<androidx.media3.common.DrmInitData$SchemeData: void <init>(java.util.UUID,java.lang.String,byte[])>($r22, "video/webm", $r21);

        $r17[0] = r46;

        specialinvoke r47.<androidx.media3.common.DrmInitData: void <init>(androidx.media3.common.DrmInitData$SchemeData[])>($r17);

        $r23.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.common.DrmInitData drmInitData> = r47;

        goto label24;

     label18:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $r9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $z1 = $r9.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasContentEncryption>;

        if $z1 == 0 goto label24;

        $r10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r11 = $r10.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] sampleStrippedBytes>;

        if $r11 == null goto label24;

        $r12 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Combining encryption and compression is not supported", null);

        r50 = (java.lang.Throwable) $r12;

        throw r50;

     label19:
        $r26 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r27 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r26);

        r45 = (androidx.media3.extractor.mkv.MatroskaExtractor$Track) $r27;

        $r28 = r45.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        if $r28 != null goto label20;

        $r32 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("CodecId is missing in TrackEntry element", null);

        r51 = (java.lang.Throwable) $r32;

        throw r51;

     label20:
        $r29 = r45.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z3 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: boolean isCodecSupported(java.lang.String)>($r29);

        if $z3 == 0 goto label21;

        $r30 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        $i15 = r45.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int number>;

        virtualinvoke r45.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: void initializeOutput(androidx.media3.extractor.ExtractorOutput,int)>($r30, $i15);

        $r31 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>;

        $i16 = r45.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int number>;

        virtualinvoke $r31.<android.util.SparseArray: void put(int,java.lang.Object)>($i16, r45);

     label21:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack> = null;

        goto label24;

     label22:
        $r6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>;

        $i3 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        if $i3 != 0 goto label23;

        $r8 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("No valid tracks were found", null);

        r52 = (java.lang.Throwable) $r8;

        throw r52;

     label23:
        $r7 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        interfaceinvoke $r7.<androidx.media3.extractor.ExtractorOutput: void endTracks()>();

        goto label24;

     label24:
        return;
    }

    protected void integerElement(int, long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i28, $i30, $i32, $i33, $i35, $i36, $i39;
        long l1, $l18, $l19, $l31, $l34, $l37;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r67, $r69, $r70, $r72, $r73, $r74, $r75;
        byte $b14, $b20, $b21, $b22, $b23, $b24, $b25, $b26, $b27, $b38;
        java.lang.StringBuilder $r26, $r27, $r28, $r32, $r33, $r34, $r38, $r39, $r40, $r44, $r45, $r46, $r50, $r51, $r52, $r56, $r57, $r58, $r62, $r63, $r64, r76, r77, r78, r79, r80, r81, r82;
        java.lang.String $r29, $r35, $r41, $r47, $r53, $r59, $r65;
        androidx.media3.common.ParserException $r30, $r36, $r42, $r48, $r54, $r60, $r66;
        boolean $z0, $z1, $z2;
        androidx.media3.common.util.LongArray $r68, $r71;
        java.lang.Throwable r83, r84, r85, r86, r87, r88, r89;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        lookupswitch(i0)
        {
            case 131: goto label18;
            case 136: goto label12;
            case 155: goto label36;
            case 159: goto label25;
            case 176: goto label06;
            case 179: goto label33;
            case 186: goto label07;
            case 215: goto label11;
            case 231: goto label35;
            case 238: goto label57;
            case 241: goto label34;
            case 251: goto label27;
            case 16871: goto label21;
            case 16980: goto label30;
            case 17029: goto label02;
            case 17143: goto label01;
            case 18401: goto label31;
            case 18408: goto label32;
            case 20529: goto label28;
            case 20530: goto label29;
            case 21420: goto label04;
            case 21432: goto label37;
            case 21680: goto label08;
            case 21682: goto label10;
            case 21690: goto label09;
            case 21930: goto label15;
            case 21945: goto label45;
            case 21946: goto label44;
            case 21947: goto label43;
            case 21948: goto label49;
            case 21949: goto label50;
            case 21998: goto label20;
            case 22186: goto label22;
            case 22203: goto label23;
            case 25188: goto label26;
            case 30114: goto label24;
            case 30321: goto label51;
            case 2352003: goto label19;
            case 2807729: goto label05;
            default: goto label58;
        };

     label01:
        $b24 = l1 cmp 1L;

        if $b24 == 0 goto label58;

        r76 = new java.lang.StringBuilder;

        specialinvoke r76.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EBMLReadVersion ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r53, null);

        r83 = (java.lang.Throwable) $r54;

        throw r83;

     label02:
        $b25 = l1 cmp 1L;

        if $b25 < 0 goto label03;

        $b26 = l1 cmp 2L;

        if $b26 <= 0 goto label58;

     label03:
        r77 = new java.lang.StringBuilder;

        specialinvoke r77.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DocTypeReadVersion ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r60 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r59, null);

        r84 = (java.lang.Throwable) $r60;

        throw r84;

     label04:
        $l18 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentPosition>;

        $l19 = l1 + $l18;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long seekEntryPosition> = $l19;

        goto label58;

     label05:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long timecodeScale> = l1;

        goto label58;

     label06:
        $r72 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i35 = (int) l1;

        $r72.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int width> = $i35;

        goto label58;

     label07:
        $r70 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i33 = (int) l1;

        $r70.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int height> = $i33;

        goto label58;

     label08:
        $r20 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i17 = (int) l1;

        $r20.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayWidth> = $i17;

        goto label58;

     label09:
        $r18 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i15 = (int) l1;

        $r18.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayHeight> = $i15;

        goto label58;

     label10:
        $r19 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i16 = (int) l1;

        $r19.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayUnit> = $i16;

        goto label58;

     label11:
        $r69 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i32 = (int) l1;

        $r69.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int number> = $i32;

        goto label58;

     label12:
        $r74 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $b38 = l1 cmp 1L;

        if $b38 != 0 goto label13;

        $z1 = 1;

        goto label14;

     label13:
        $z1 = 0;

     label14:
        $r74.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean flagDefault> = $z1;

        goto label58;

     label15:
        $r17 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $b14 = l1 cmp 1L;

        if $b14 != 0 goto label16;

        $z2 = 1;

        goto label17;

     label16:
        $z2 = 0;

     label17:
        $r17.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean flagForced> = $z2;

        goto label58;

     label18:
        $r75 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i39 = (int) l1;

        $r75.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int type> = $i39;

        goto label58;

     label19:
        $r1 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i5 = (int) l1;

        $r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int defaultSampleDurationNs> = $i5;

        goto label58;

     label20:
        $r9 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i8 = (int) l1;

        $r9.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxBlockAdditionId> = $i8;

        goto label58;

     label21:
        $r67 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i28 = (int) l1;

        staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: int access$202(androidx.media3.extractor.mkv.MatroskaExtractor$Track,int)>($r67, $i28);

        goto label58;

     label22:
        $r8 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $r8.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: long codecDelayNs> = l1;

        goto label58;

     label23:
        $r7 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $r7.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: long seekPreRollNs> = l1;

        goto label58;

     label24:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockGroupDiscardPaddingNs> = l1;

        goto label58;

     label25:
        $r73 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i36 = (int) l1;

        $r73.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int channelCount> = $i36;

        goto label58;

     label26:
        $r6 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i7 = (int) l1;

        $r6.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth> = $i7;

        goto label58;

     label27:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean blockHasReferenceBlock> = 1;

        goto label58;

     label28:
        $b21 = l1 cmp 0L;

        if $b21 == 0 goto label58;

        r78 = new java.lang.StringBuilder;

        specialinvoke r78.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ContentEncodingOrder ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r35, null);

        r85 = (java.lang.Throwable) $r36;

        throw r85;

     label29:
        $b20 = l1 cmp 1L;

        if $b20 == 0 goto label58;

        r79 = new java.lang.StringBuilder;

        specialinvoke r79.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ContentEncodingScope ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r29, null);

        r86 = (java.lang.Throwable) $r30;

        throw r86;

     label30:
        $b27 = l1 cmp 3L;

        if $b27 == 0 goto label58;

        r80 = new java.lang.StringBuilder;

        specialinvoke r80.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ContentCompAlgo ");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        $r66 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r65, null);

        r87 = (java.lang.Throwable) $r66;

        throw r87;

     label31:
        $b23 = l1 cmp 5L;

        if $b23 == 0 goto label58;

        r81 = new java.lang.StringBuilder;

        specialinvoke r81.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ContentEncAlgo ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r47, null);

        r88 = (java.lang.Throwable) $r48;

        throw r88;

     label32:
        $b22 = l1 cmp 1L;

        if $b22 == 0 goto label58;

        r82 = new java.lang.StringBuilder;

        specialinvoke r82.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AESSettingsCipherMode ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r41, null);

        r89 = (java.lang.Throwable) $r42;

        throw r89;

     label33:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInCues(int)>(i0);

        $r71 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueTimesUs>;

        $l34 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long scaleTimecodeToUs(long)>(l1);

        virtualinvoke $r71.<androidx.media3.common.util.LongArray: void add(long)>($l34);

        goto label58;

     label34:
        $z0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seenClusterPositionForCurrentCuePoint>;

        if $z0 != 0 goto label58;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInCues(int)>(i0);

        $r68 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueClusterPositions>;

        virtualinvoke $r68.<androidx.media3.common.util.LongArray: void add(long)>(l1);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seenClusterPositionForCurrentCuePoint> = 1;

        goto label58;

     label35:
        $l31 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long scaleTimecodeToUs(long)>(l1);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long clusterTimecodeUs> = $l31;

        goto label58;

     label36:
        $l37 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long scaleTimecodeToUs(long)>(l1);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockDurationUs> = $l37;

        goto label58;

     label37:
        i2 = (int) l1;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        lookupswitch(i2)
        {
            case 0: goto label38;
            case 1: goto label39;
            case 3: goto label40;
            case 15: goto label41;
            default: goto label42;
        };

     label38:
        $r24 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r24.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int stereoMode> = 0;

        goto label58;

     label39:
        $r23 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r23.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int stereoMode> = 2;

        goto label58;

     label40:
        $r22 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r22.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int stereoMode> = 1;

        goto label58;

     label41:
        $r21 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r21.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int stereoMode> = 3;

        goto label58;

     label42:
        goto label58;

     label43:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $r12 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r12.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasColorInfo> = 1;

        $i11 = (int) l1;

        i3 = staticinvoke <androidx.media3.common.ColorInfo: int isoColorPrimariesToColorSpace(int)>($i11);

        if i3 == -1 goto label58;

        $r13 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r13.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorSpace> = i3;

        goto label58;

     label44:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $i12 = (int) l1;

        i4 = staticinvoke <androidx.media3.common.ColorInfo: int isoTransferCharacteristicsToColorTransfer(int)>($i12);

        if i4 == -1 goto label58;

        $r14 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r14.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorTransfer> = i4;

        goto label58;

     label45:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $i13 = (int) l1;

        lookupswitch($i13)
        {
            case 1: goto label46;
            case 2: goto label47;
            default: goto label48;
        };

     label46:
        $r16 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r16.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorRange> = 2;

        goto label58;

     label47:
        $r15 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r15.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorRange> = 1;

        goto label58;

     label48:
        goto label58;

     label49:
        $r11 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i10 = (int) l1;

        $r11.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxContentLuminance> = $i10;

        goto label58;

     label50:
        $r10 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i9 = (int) l1;

        $r10.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxFrameAverageLuminance> = $i9;

        goto label58;

     label51:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $i6 = (int) l1;

        tableswitch($i6)
        {
            case 0: goto label52;
            case 1: goto label53;
            case 2: goto label54;
            case 3: goto label55;
            default: goto label56;
        };

     label52:
        $r5 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r5.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int projectionType> = 0;

        goto label58;

     label53:
        $r4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r4.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int projectionType> = 1;

        goto label58;

     label54:
        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r3.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int projectionType> = 2;

        goto label58;

     label55:
        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int projectionType> = 3;

        goto label58;

     label56:
        goto label58;

     label57:
        $i30 = (int) l1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockAdditionalId> = $i30;

        goto label58;

     label58:
        return;
    }

    protected void floatElement(int, double) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0, $i2;
        double d0;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        long $l1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        lookupswitch(i0)
        {
            case 181: goto label02;
            case 17545: goto label01;
            case 21969: goto label03;
            case 21970: goto label04;
            case 21971: goto label05;
            case 21972: goto label06;
            case 21973: goto label07;
            case 21974: goto label08;
            case 21975: goto label09;
            case 21976: goto label10;
            case 21977: goto label11;
            case 21978: goto label12;
            case 30323: goto label13;
            case 30324: goto label14;
            case 30325: goto label15;
            default: goto label16;
        };

     label01:
        $l1 = (long) d0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationTimecode> = $l1;

        goto label16;

     label02:
        $r14 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $i2 = (int) d0;

        $r14.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int sampleRate> = $i2;

        goto label16;

     label03:
        $r13 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f12 = (float) d0;

        $r13.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityX> = $f12;

        goto label16;

     label04:
        $r12 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f11 = (float) d0;

        $r12.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityY> = $f11;

        goto label16;

     label05:
        $r11 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f10 = (float) d0;

        $r11.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityX> = $f10;

        goto label16;

     label06:
        $r10 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f9 = (float) d0;

        $r10.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityY> = $f9;

        goto label16;

     label07:
        $r9 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f8 = (float) d0;

        $r9.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityX> = $f8;

        goto label16;

     label08:
        $r8 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f7 = (float) d0;

        $r8.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityY> = $f7;

        goto label16;

     label09:
        $r7 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f6 = (float) d0;

        $r7.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityX> = $f6;

        goto label16;

     label10:
        $r6 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f5 = (float) d0;

        $r6.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityY> = $f5;

        goto label16;

     label11:
        $r5 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f4 = (float) d0;

        $r5.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float maxMasteringLuminance> = $f4;

        goto label16;

     label12:
        $r4 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f3 = (float) d0;

        $r4.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float minMasteringLuminance> = $f3;

        goto label16;

     label13:
        $r3 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f2 = (float) d0;

        $r3.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPoseYaw> = $f2;

        goto label16;

     label14:
        $r2 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f1 = (float) d0;

        $r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPosePitch> = $f1;

        goto label16;

     label15:
        $r1 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $f0 = (float) d0;

        $r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPoseRoll> = $f0;

        goto label16;

     label16:
        return;
    }

    protected void stringElement(int, java.lang.String) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0;
        java.lang.String r1, $r5, $r6, $r11;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track $r2, $r4, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r10, r14;
        androidx.media3.common.ParserException $r12;
        java.lang.Throwable r15;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        lookupswitch(i0)
        {
            case 134: goto label3;
            case 17026: goto label1;
            case 21358: goto label2;
            case 2274716: goto label4;
            default: goto label5;
        };

     label1:
        $r5 = "webm";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label5;

        $r6 = "matroska";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label5;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DocType ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r11, null);

        r15 = (java.lang.Throwable) $r12;

        throw r15;

     label2:
        $r4 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $r4.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String name> = r1;

        goto label5;

     label3:
        $r13 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        $r13.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId> = r1;

        goto label5;

     label4:
        $r2 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String access$302(androidx.media3.extractor.mkv.MatroskaExtractor$Track,java.lang.String)>($r2, r1);

        goto label5;

     label5:
        return;
    }

    protected void binaryElement(int, int, androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i30, $i31, $i32, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i49, $i52, $i53, $i54, $i55, $i56, $i57, $i59, $i61, $i63, $i64, $i65, $i68, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i82, $i83, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i97, $i98, i100, i101, i102, i103, i105, i106, i107, i109, i110, i111, i114, $i115, $i117, i120, $i125, i127;
        androidx.media3.extractor.ExtractorInput r1;
        byte[] r2, $r4, $r7, $r8, $r11, $r13, $r15, $r20, $r23, $r34, $r36, $r47, $r50, $r56, $r58, $r60, $r65, $r81, $r83;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r3, $r5, $r6, $r9, $r10, $r18, $r21, $r22, $r24, $r27;
        androidx.media3.common.util.ParsableByteArray $r12, $r14, $r16, $r17, $r33, $r35, $r46, $r49, $r55, $r57, $r59, $r64, $r74, $r80, $r82;
        long $l4, $l28, $l29, $l66, $l67, $l71, $l96, l108, l112, $l121, $l122, $l123, $l124, l128;
        android.util.SparseArray $r25, $r28;
        java.lang.Object $r26, $r29;
        int[] $r30, $r31, $r32, $r37, $r38, $r44, $r48, $r52, $r53, $r54, $r62, $r63, $r66, $r67, $r68, $r69, $r70, $r71;
        byte $b33, $b34, $b35, $b47, $b50, $b51, $b58, $b60, $b69, $b81, b99, $b113, $b116, $b118, $b126;
        short $s36, $s48, $s62, $s70, s104, $s119;
        java.lang.StringBuilder $r40, $r41, $r76, $r77, r85, r86;
        java.lang.String $r42, $r78;
        androidx.media3.common.ParserException $r43, $r51, $r61, $r79;
        androidx.media3.extractor.mkv.VarintReader $r72, $r73;
        boolean $z0, z1;
        androidx.media3.extractor.TrackOutput$CryptoData r84;
        java.lang.Throwable r87, r88, r89, r90;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.media3.extractor.ExtractorInput;

        lookupswitch(i0)
        {
            case 161: goto label07;
            case 163: goto label07;
            case 165: goto label39;
            case 16877: goto label02;
            case 16981: goto label05;
            case 18402: goto label06;
            case 21419: goto label01;
            case 25506: goto label03;
            case 30322: goto label04;
            default: goto label41;
        };

     label01:
        $r12 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray seekEntryIdBytes>;

        $r13 = virtualinvoke $r12.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r13, 0);

        $r14 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray seekEntryIdBytes>;

        $r15 = virtualinvoke $r14.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i3 = 4 - i1;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r15, $i3, i1);

        $r16 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray seekEntryIdBytes>;

        virtualinvoke $r16.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r17 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray seekEntryIdBytes>;

        $l4 = virtualinvoke $r17.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        $i5 = (int) $l4;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int seekEntryId> = $i5;

        goto label42;

     label02:
        $r24 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void handleBlockAddIDExtraData(androidx.media3.extractor.mkv.MatroskaExtractor$Track,androidx.media3.extractor.ExtractorInput,int)>($r24, r1, i1);

        goto label42;

     label03:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $r9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r8 = newarray (byte)[i1];

        $r9.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] codecPrivate> = $r8;

        $r10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r11 = $r10.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] codecPrivate>;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r11, 0, i1);

        goto label42;

     label04:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $r5 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r4 = newarray (byte)[i1];

        $r5.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] projectionData> = $r4;

        $r6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r7 = $r6.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] projectionData>;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r7, 0, i1);

        goto label42;

     label05:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $r21 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r20 = newarray (byte)[i1];

        $r21.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] sampleStrippedBytes> = $r20;

        $r22 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        $r23 = $r22.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] sampleStrippedBytes>;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r23, 0, i1);

        goto label42;

     label06:
        r2 = newarray (byte)[i1];

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>(r2, 0, i1);

        $r18 = virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int)>(i0);

        r84 = new androidx.media3.extractor.TrackOutput$CryptoData;

        specialinvoke r84.<androidx.media3.extractor.TrackOutput$CryptoData: void <init>(int,byte[],int,int)>(1, r2, 0, 0);

        $r18.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput$CryptoData cryptoData> = r84;

        goto label42;

     label07:
        $i9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState>;

        if $i9 != 0 goto label08;

        $r72 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.VarintReader varintReader>;

        $l96 = virtualinvoke $r72.<androidx.media3.extractor.mkv.VarintReader: long readUnsignedVarint(androidx.media3.extractor.ExtractorInput,boolean,boolean,int)>(r1, 0, 1, 8);

        $i97 = (int) $l96;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumber> = $i97;

        $r73 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.VarintReader varintReader>;

        $i98 = virtualinvoke $r73.<androidx.media3.extractor.mkv.VarintReader: int getLastLength()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumberLength> = $i98;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockDurationUs> = -9223372036854775807L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState> = 1;

        $r74 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        virtualinvoke $r74.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(0);

     label08:
        $r28 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>;

        $i10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumber>;

        $r29 = virtualinvoke $r28.<android.util.SparseArray: java.lang.Object get(int)>($i10);

        r3 = (androidx.media3.extractor.mkv.MatroskaExtractor$Track) $r29;

        if r3 != null goto label09;

        $i94 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumberLength>;

        $i95 = i1 - $i94;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>($i95);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState> = 0;

        return;

     label09:
        staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: void access$100(androidx.media3.extractor.mkv.MatroskaExtractor$Track)>(r3);

        $i11 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState>;

        if $i11 != 1 goto label35;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void readScratch(androidx.media3.extractor.ExtractorInput,int)>(r1, 3);

        $r33 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r34 = virtualinvoke $r33.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b33 = $r34[2];

        $b34 = $b33 & 6;

        b99 = $b34 >> 1;

        if b99 != 0 goto label10;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount> = 1;

        $r69 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $r70 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: int[] ensureArrayCapacity(int[],int)>($r69, 1);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes> = $r70;

        $r71 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i91 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumberLength>;

        $i92 = i1 - $i91;

        $i93 = $i92 - 3;

        $r71[0] = $i93;

        goto label29;

     label10:
        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void readScratch(androidx.media3.extractor.ExtractorInput,int)>(r1, 4);

        $r35 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r36 = virtualinvoke $r35.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b35 = $r36[3];

        $s36 = $b35 & 255;

        $i37 = $s36 + 1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount> = $i37;

        $r37 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i38 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        $r38 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: int[] ensureArrayCapacity(int[],int)>($r37, $i38);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes> = $r38;

        if b99 != 2 goto label11;

        $i86 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumberLength>;

        $i87 = i1 - $i86;

        $i89 = $i87 - 4;

        $i88 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        i100 = $i89 / $i88;

        $r68 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i90 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>($r68, 0, $i90, i100);

        goto label29;

     label11:
        if b99 != 1 goto label15;

        i101 = 0;

        i102 = 4;

        i103 = 0;

     label12:
        $i72 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        $i73 = $i72 - 1;

        if i103 >= $i73 goto label14;

        $r63 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $r63[i103] = 0;

     label13:
        i102 = i102 + 1;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void readScratch(androidx.media3.extractor.ExtractorInput,int)>(r1, i102);

        $r64 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r65 = virtualinvoke $r64.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i80 = i102 - 1;

        $b81 = $r65[$i80];

        s104 = $b81 & 255;

        $r66 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i82 = $r66[i103];

        $i83 = $i82 + s104;

        $r66[i103] = $i83;

        if s104 == 255 goto label13;

        $r67 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i85 = $r67[i103];

        i101 = i101 + $i85;

        i103 = i103 + 1;

        goto label12;

     label14:
        $r62 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i74 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        $i79 = $i74 - 1;

        $i75 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumberLength>;

        $i76 = i1 - $i75;

        $i77 = $i76 - i102;

        $i78 = $i77 - i101;

        $r62[$i79] = $i78;

        goto label29;

     label15:
        if b99 != 3 goto label28;

        i105 = 0;

        i106 = 4;

        i107 = 0;

     label16:
        $i39 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        $i40 = $i39 - 1;

        if i107 >= $i40 goto label27;

        $r48 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $r48[i107] = 0;

        i106 = i106 + 1;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void readScratch(androidx.media3.extractor.ExtractorInput,int)>(r1, i106);

        $r49 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r50 = virtualinvoke $r49.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i49 = i106 - 1;

        $b50 = $r50[$i49];

        if $b50 != 0 goto label17;

        $r61 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("No valid varint length mask found", null);

        r87 = (java.lang.Throwable) $r61;

        throw r87;

     label17:
        l108 = 0L;

        i109 = 0;

     label18:
        if i109 >= 8 goto label22;

        $i56 = 7 - i109;

        i2 = 1 << $i56;

        $r55 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r56 = virtualinvoke $r55.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i57 = i106 - 1;

        $b58 = $r56[$i57];

        $i59 = $b58 & i2;

        if $i59 == 0 goto label21;

        i110 = i106 - 1;

        i106 = i106 + i109;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void readScratch(androidx.media3.extractor.ExtractorInput,int)>(r1, i106);

        $r57 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r58 = virtualinvoke $r57.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        i111 = i110 + 1;

        $b60 = $r58[i110];

        $s62 = $b60 & 255;

        $i61 = i2 ^ -1;

        $i63 = $s62 & $i61;

        l108 = (long) $i63;

     label19:
        if i111 >= i106 goto label20;

        l112 = l108 << 8;

        $r59 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r60 = virtualinvoke $r59.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i68 = i111;

        i111 = i111 + 1;

        $b69 = $r60[$i68];

        $s70 = $b69 & 255;

        $l71 = (long) $s70;

        l108 = l112 | $l71;

        goto label19;

     label20:
        if i107 <= 0 goto label22;

        $i64 = i109 * 7;

        $i65 = 6 + $i64;

        $l66 = 1L << $i65;

        $l67 = $l66 - 1L;

        l108 = l108 - $l67;

        goto label22;

     label21:
        i109 = i109 + 1;

        goto label18;

     label22:
        $b113 = l108 cmp -2147483648L;

        if $b113 < 0 goto label23;

        $b51 = l108 cmp 2147483647L;

        if $b51 <= 0 goto label24;

     label23:
        $r51 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("EBML lacing sample size out of range.", null);

        r88 = (java.lang.Throwable) $r51;

        throw r88;

     label24:
        i114 = (int) l108;

        $r53 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i55 = i107;

        if i107 != 0 goto label25;

        $i115 = i114;

        goto label26;

     label25:
        $r52 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i52 = i107 - 1;

        $i53 = $r52[$i52];

        $i115 = $i53 + i114;

     label26:
        $r53[$i55] = $i115;

        $r54 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i54 = $r54[i107];

        i105 = i105 + $i54;

        i107 = i107 + 1;

        goto label16;

     label27:
        $r44 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i41 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        $i46 = $i41 - 1;

        $i42 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumberLength>;

        $i43 = i1 - $i42;

        $i44 = $i43 - i106;

        $i45 = $i44 - i105;

        $r44[$i46] = $i45;

        goto label29;

     label28:
        r85 = new java.lang.StringBuilder;

        specialinvoke r85.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected lacing value: ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b99);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        $r43 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r42, null);

        r89 = (java.lang.Throwable) $r43;

        throw r89;

     label29:
        $r80 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r81 = virtualinvoke $r80.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b116 = $r81[0];

        $i117 = $b116 << 8;

        $r82 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r83 = virtualinvoke $r82.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b118 = $r83[1];

        $s119 = $b118 & 255;

        i120 = $i117 | $s119;

        $l121 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long clusterTimecodeUs>;

        $l122 = (long) i120;

        $l123 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long scaleTimecodeToUs(long)>($l122);

        $l124 = $l121 + $l123;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockTimeUs> = $l124;

        $i125 = r3.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int type>;

        if $i125 == 2 goto label30;

        if i0 != 163 goto label31;

        $r46 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r47 = virtualinvoke $r46.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b47 = $r47[2];

        $s48 = $b47 & 128;

        if $s48 != 128 goto label31;

     label30:
        $z0 = 1;

        goto label32;

     label31:
        $z0 = 0;

     label32:
        z1 = $z0;

        if z1 == 0 goto label33;

        $b126 = 1;

        goto label34;

     label33:
        $b126 = 0;

     label34:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags> = $b126;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState> = 2;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex> = 0;

     label35:
        if i0 != 163 goto label38;

     label36:
        $i21 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex>;

        $i20 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        if $i21 >= $i20 goto label37;

        $r32 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i22 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex>;

        $i23 = $r32[$i22];

        i127 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int writeSampleData(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.mkv.MatroskaExtractor$Track,int,boolean)>(r1, r3, $i23, 0);

        $l29 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockTimeUs>;

        $i25 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex>;

        $i24 = r3.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int defaultSampleDurationNs>;

        $i26 = $i25 * $i24;

        $i27 = $i26 / 1000;

        $l28 = (long) $i27;

        l128 = $l29 + $l28;

        $i30 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags>;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void commitSampleToOutput(androidx.media3.extractor.mkv.MatroskaExtractor$Track,long,int,int,int)>(r3, l128, $i30, i127, 0);

        $i31 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex>;

        $i32 = $i31 + 1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex> = $i32;

        goto label36;

     label37:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState> = 0;

        goto label42;

     label38:
        $i13 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex>;

        $i12 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        if $i13 >= $i12 goto label42;

        $r31 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i16 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex>;

        $r30 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int[] blockSampleSizes>;

        $i14 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex>;

        $i15 = $r30[$i14];

        $i17 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int writeSampleData(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.mkv.MatroskaExtractor$Track,int,boolean)>(r1, r3, $i15, 1);

        $r31[$i16] = $i17;

        $i18 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex>;

        $i19 = $i18 + 1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleIndex> = $i19;

        goto label38;

     label39:
        $i6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockState>;

        if $i6 == 2 goto label40;

        return;

     label40:
        $r25 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: android.util.SparseArray tracks>;

        $i7 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockTrackNumber>;

        $r26 = virtualinvoke $r25.<android.util.SparseArray: java.lang.Object get(int)>($i7);

        $r27 = (androidx.media3.extractor.mkv.MatroskaExtractor$Track) $r26;

        $i8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockAdditionalId>;

        virtualinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void handleBlockAdditionalData(androidx.media3.extractor.mkv.MatroskaExtractor$Track,int,androidx.media3.extractor.ExtractorInput,int)>($r27, $i8, r1, i1);

        goto label42;

     label41:
        r86 = new java.lang.StringBuilder;

        specialinvoke r86.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected id: ");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        $r79 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r78, null);

        r90 = (java.lang.Throwable) $r79;

        throw r90;

     label42:
        return;
    }

    protected void handleBlockAddIDExtraData(androidx.media3.extractor.mkv.MatroskaExtractor$Track, androidx.media3.extractor.ExtractorInput, int) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r1;
        androidx.media3.extractor.ExtractorInput r2;
        int i0, $i1, $i2;
        byte[] $r3, $r4;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        r2 := @parameter1: androidx.media3.extractor.ExtractorInput;

        i0 := @parameter2: int;

        $i1 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: int access$200(androidx.media3.extractor.mkv.MatroskaExtractor$Track)>(r1);

        if $i1 == 1685485123 goto label1;

        $i2 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: int access$200(androidx.media3.extractor.mkv.MatroskaExtractor$Track)>(r1);

        if $i2 != 1685480259 goto label2;

     label1:
        $r3 = newarray (byte)[i0];

        r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] dolbyVisionConfigBytes> = $r3;

        $r4 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] dolbyVisionConfigBytes>;

        interfaceinvoke r2.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r4, 0, i0);

        goto label3;

     label2:
        interfaceinvoke r2.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>(i0);

     label3:
        return;
    }

    protected void handleBlockAdditionalData(androidx.media3.extractor.mkv.MatroskaExtractor$Track, int, androidx.media3.extractor.ExtractorInput, int) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r1;
        int i0, i1;
        androidx.media3.extractor.ExtractorInput r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        androidx.media3.common.util.ParsableByteArray $r5, $r6;
        byte[] $r7;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.media3.extractor.ExtractorInput;

        i1 := @parameter3: int;

        if i0 != 4 goto label1;

        $r4 = "V_VP9";

        $r3 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray supplementalData>;

        virtualinvoke $r5.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(i1);

        $r6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray supplementalData>;

        $r7 = virtualinvoke $r6.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        interfaceinvoke r2.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r7, 0, i1);

        goto label2;

     label1:
        interfaceinvoke r2.<androidx.media3.extractor.ExtractorInput: void skipFully(int)>(i1);

     label2:
        return;
    }

    private void assertInTrackEntry(int) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track $r1;
        java.lang.StringBuilder $r3, $r4, $r5, r8;
        java.lang.String $r6;
        androidx.media3.common.ParserException $r7;
        java.lang.Throwable r9;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        if $r1 != null goto label1;

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be in a TrackEntry");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r6, null);

        r9 = (java.lang.Throwable) $r7;

        throw r9;

     label1:
        return;
    }

    private void assertInCues(int) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0;
        androidx.media3.common.util.LongArray $r1, $r8;
        java.lang.StringBuilder $r3, $r4, $r5, r9;
        java.lang.String $r6;
        androidx.media3.common.ParserException $r7;
        java.lang.Throwable r10;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueTimesUs>;

        if $r1 == null goto label1;

        $r8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.LongArray cueClusterPositions>;

        if $r8 != null goto label2;

     label1:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Element ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be in a Cues");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r6, null);

        r10 = (java.lang.Throwable) $r7;

        throw r10;

     label2:
        return;
    }

    protected androidx.media3.extractor.mkv.MatroskaExtractor$Track getCurrentTrack(int) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void assertInTrackEntry(int)>(i0);

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.mkv.MatroskaExtractor$Track currentTrack>;

        return $r1;
    }

    private void commitSampleToOutput(androidx.media3.extractor.mkv.MatroskaExtractor$Track, long, int, int, int)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r1;
        long l0, $l3, $l5;
        int i1, i2, $i6, $i7, $i8, $i9, i11, $i12, i13, $i14, i15;
        androidx.media3.extractor.TrueHdSampleRechunker $r2, $r27;
        java.lang.String $r3, $r4, $r6, $r21, $r22, $r23, $r24;
        boolean $z0, $z1, $z2;
        byte $b4, $b10;
        androidx.media3.common.util.ParsableByteArray $r5, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r18, $r20;
        byte[] $r7, $r19;
        androidx.media3.extractor.TrackOutput $r11, $r16, $r26, $r28;
        androidx.media3.extractor.TrackOutput$CryptoData $r25, $r29;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i11 := @parameter3: int;

        i2 := @parameter4: int;

        $r2 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        if $r2 == null goto label01;

        $r27 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        $r26 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output>;

        $r25 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>;

        virtualinvoke $r27.<androidx.media3.extractor.TrueHdSampleRechunker: void sampleMetadata(androidx.media3.extractor.TrackOutput,long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>($r26, l0, i1, i11, i2, $r25);

        goto label11;

     label01:
        $r4 = "S_TEXT/UTF8";

        $r3 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label02;

        $r22 = "S_TEXT/ASS";

        $r21 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z1 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z1 != 0 goto label02;

        $r24 = "S_TEXT/WEBVTT";

        $r23 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z2 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z2 == 0 goto label08;

     label02:
        $i12 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        if $i12 <= 1 goto label03;

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MatroskaExtractor", "Skipping subtitle sample in laced block.");

        goto label08;

     label03:
        $l3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockDurationUs>;

        $b4 = $l3 cmp -9223372036854775807L;

        if $b4 != 0 goto label04;

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MatroskaExtractor", "Skipping subtitle sample with no duration.");

        goto label08;

     label04:
        $r6 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $l5 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long blockDurationUs>;

        $r5 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $r7 = virtualinvoke $r5.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: void setSubtitleEndTime(java.lang.String,long,byte[])>($r6, $l5, $r7);

        $r8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        i13 = virtualinvoke $r8.<androidx.media3.common.util.ParsableByteArray: int getPosition()>();

     label05:
        $r9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $i6 = virtualinvoke $r9.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        if i13 >= $i6 goto label07;

        $r18 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $r19 = virtualinvoke $r18.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b10 = $r19[i13];

        if $b10 != 0 goto label06;

        $r20 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        virtualinvoke $r20.<androidx.media3.common.util.ParsableByteArray: void setLimit(int)>(i13);

        goto label07;

     label06:
        i13 = i13 + 1;

        goto label05;

     label07:
        $r11 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output>;

        $r12 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $r10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $i7 = virtualinvoke $r10.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        interfaceinvoke $r11.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r12, $i7);

        $r13 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $i8 = virtualinvoke $r13.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        i11 = i11 + $i8;

     label08:
        $i14 = i1 & 268435456;

        if $i14 == 0 goto label10;

        $i9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockSampleCount>;

        if $i9 <= 1 goto label09;

        $r17 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray supplementalData>;

        virtualinvoke $r17.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(0);

        goto label10;

     label09:
        $r14 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray supplementalData>;

        i15 = virtualinvoke $r14.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        $r16 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output>;

        $r15 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray supplementalData>;

        interfaceinvoke $r16.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int,int)>($r15, i15, 2);

        i11 = i11 + i15;

     label10:
        $r28 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output>;

        $r29 = r1.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>;

        interfaceinvoke $r28.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l0, i1, i11, i2, $r29);

     label11:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean haveOutputSample> = 1;

        return;
    }

    private void readScratch(androidx.media3.extractor.ExtractorInput, int) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.media3.common.util.ParsableByteArray $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;
        byte[] $r5;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $i1 = virtualinvoke $r2.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        if $i1 < i0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $i2 = virtualinvoke $r3.<androidx.media3.common.util.ParsableByteArray: int capacity()>();

        if $i2 >= i0 goto label2;

        $r10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $i6 = virtualinvoke $r9.<androidx.media3.common.util.ParsableByteArray: int capacity()>();

        $i7 = $i6 * 2;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, i0);

        virtualinvoke $r10.<androidx.media3.common.util.ParsableByteArray: void ensureCapacity(int)>($i8);

     label2:
        $r4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r5 = virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $r6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $i3 = virtualinvoke $r6.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        $r7 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $i4 = virtualinvoke $r7.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        $i5 = i0 - $i4;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r5, $i3, $i5);

        $r8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        virtualinvoke $r8.<androidx.media3.common.util.ParsableByteArray: void setLimit(int)>(i0);

        return;
    }

    private int writeSampleData(androidx.media3.extractor.ExtractorInput, androidx.media3.extractor.mkv.MatroskaExtractor$Track, int, boolean) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z13, z14, $z15, $z16, $z17;
        androidx.media3.extractor.TrackOutput r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i35, $i37, $i38, $i40, $i42, $i43, $i44, $i45, $i46, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i65, $i66, $i67, $i68, $i69, $i71, $i72, $i73, $i74, $i75, $i76, $i79, $i80, $i81, $i82, $i85, $i86, $i90, $i91, $i92, i93, i95, i97, i98, $i99, i100, i101, $i102, i103, i104, i105, $i106, i107, $i108, i109;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r19, $r20, $r93, $r94;
        androidx.media3.common.util.ParsableByteArray $r10, $r13, $r14, $r15, $r16, $r17, $r18, $r22, $r25, $r26, $r27, $r28, $r30, $r32, $r34, $r36, $r39, $r40, $r41, $r52, $r54, $r58, $r64, $r66, $r67, $r69, $r71, $r73, $r74, $r75, $r76, $r80, $r82, $r84, $r92;
        androidx.media3.extractor.TrueHdSampleRechunker $r21, $r23;
        byte[] $r24, $r29, $r31, $r33, $r35, $r37, $r38, $r42, $r53, $r65, $r70, $r72, $r81, $r83, $r85, $r87, $r88, $r89, r95;
        byte $b33, $b36, $b39, $b41, $b47, $b48, $b49, $b50, $b78, $b87, $b89;
        java.nio.ByteBuffer $r43, $r44, $r47, $r49, $r51, $r55, $r59, $r61, $r63, $r90, $r91;
        short $s64, $s70, $s77, $s88, $s94, s96;
        androidx.media3.common.ParserException $r86;
        java.lang.Throwable r96;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        i93 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r5 = "S_TEXT/UTF8";

        $r4 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label01;

        $r89 = <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] SUBRIP_PREFIX>;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void writeSubtitleSampleData(androidx.media3.extractor.ExtractorInput,byte[],int)>(r1, $r89, i93);

        $i92 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int finishWriteSampleData()>();

        return $i92;

     label01:
        $r7 = "S_TEXT/ASS";

        $r6 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label02;

        $r88 = <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] SSA_PREFIX>;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void writeSubtitleSampleData(androidx.media3.extractor.ExtractorInput,byte[],int)>(r1, $r88, i93);

        $i91 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int finishWriteSampleData()>();

        return $i91;

     label02:
        $r9 = "S_TEXT/WEBVTT";

        $r8 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label03;

        $r87 = <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] VTT_PREFIX>;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void writeSubtitleSampleData(androidx.media3.extractor.ExtractorInput,byte[],int)>(r1, $r87, i93);

        $i90 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int finishWriteSampleData()>();

        return $i90;

     label03:
        r3 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output>;

        $z4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleEncodingHandled>;

        if $z4 != 0 goto label26;

        $z7 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasContentEncryption>;

        if $z7 == 0 goto label23;

        $i45 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags>;

        $i46 = $i45 & -1073741825;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags> = $i46;

        $z8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleSignalByteRead>;

        if $z8 != 0 goto label05;

        $r80 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r81 = virtualinvoke $r80.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r81, 0, 1);

        $i85 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        $i86 = $i85 + 1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead> = $i86;

        $r82 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r83 = virtualinvoke $r82.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b87 = $r83[0];

        $s88 = $b87 & 128;

        if $s88 != 128 goto label04;

        $r86 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Extension bit is set in signal byte", null);

        r96 = (java.lang.Throwable) $r86;

        throw r96;

     label04:
        $r84 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r85 = virtualinvoke $r84.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b89 = $r85[0];

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: byte sampleSignalByte> = $b89;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleSignalByteRead> = 1;

     label05:
        $b47 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: byte sampleSignalByte>;

        $b48 = $b47 & 1;

        if $b48 != 1 goto label06;

        $z11 = 1;

        goto label07;

     label06:
        $z11 = 0;

     label07:
        z12 = $z11;

        if z12 == 0 goto label22;

        $b49 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: byte sampleSignalByte>;

        $b50 = $b49 & 2;

        if $b50 != 2 goto label08;

        $z13 = 1;

        goto label09;

     label08:
        $z13 = 0;

     label09:
        z14 = $z13;

        $i51 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags>;

        $i52 = $i51 | 1073741824;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags> = $i52;

        $z9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleInitializationVectorRead>;

        if $z9 != 0 goto label12;

        $r69 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray encryptionInitializationVector>;

        $r70 = virtualinvoke $r69.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r70, 0, 8);

        $i75 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        $i76 = $i75 + 8;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead> = $i76;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleInitializationVectorRead> = 1;

        $r71 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r72 = virtualinvoke $r71.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        if z14 == 0 goto label10;

        $s94 = 128;

        goto label11;

     label10:
        $s94 = 0;

     label11:
        $s77 = 8 | $s94;

        $b78 = (byte) $s77;

        $r72[0] = $b78;

        $r73 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        virtualinvoke $r73.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r74 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        interfaceinvoke r3.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int,int)>($r74, 1, 1);

        $i79 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>;

        $i80 = $i79 + 1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten> = $i80;

        $r75 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray encryptionInitializationVector>;

        virtualinvoke $r75.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r76 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray encryptionInitializationVector>;

        interfaceinvoke r3.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int,int)>($r76, 8, 1);

        $i81 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>;

        $i82 = $i81 + 8;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten> = $i82;

     label12:
        if z14 == 0 goto label22;

        $z10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean samplePartitionCountRead>;

        if $z10 != 0 goto label13;

        $r64 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r65 = virtualinvoke $r64.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r65, 0, 1);

        $i72 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        $i73 = $i72 + 1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead> = $i73;

        $r66 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        virtualinvoke $r66.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r67 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $i74 = virtualinvoke $r67.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int samplePartitionCount> = $i74;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean samplePartitionCountRead> = 1;

     label13:
        $i53 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int samplePartitionCount>;

        i95 = $i53 * 4;

        $r40 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        virtualinvoke $r40.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(i95);

        $r41 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r42 = virtualinvoke $r41.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r42, 0, i95);

        $i54 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        $i55 = $i54 + i95;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead> = $i55;

        $i56 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int samplePartitionCount>;

        $i57 = $i56 / 2;

        $i58 = 1 + $i57;

        s96 = (short) $i58;

        $i59 = 6 * s96;

        i0 = 2 + $i59;

        $r43 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        if $r43 == null goto label14;

        $r63 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        $i71 = virtualinvoke $r63.<java.nio.ByteBuffer: int capacity()>();

        if $i71 >= i0 goto label15;

     label14:
        $r44 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer> = $r44;

     label15:
        $r90 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        virtualinvoke $r90.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r91 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        virtualinvoke $r91.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(s96);

        i97 = 0;

        i98 = 0;

     label16:
        $i99 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int samplePartitionCount>;

        if i98 >= $i99 goto label19;

        i1 = i97;

        $r58 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        i97 = virtualinvoke $r58.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        $i67 = i98 % 2;

        if $i67 != 0 goto label17;

        $r61 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        $i69 = i97 - i1;

        $s70 = (short) $i69;

        virtualinvoke $r61.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s70);

        goto label18;

     label17:
        $r59 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        $i68 = i97 - i1;

        virtualinvoke $r59.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i68);

     label18:
        i98 = i98 + 1;

        goto label16;

     label19:
        $i60 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        $i61 = i93 - $i60;

        i100 = $i61 - i97;

        $i62 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int samplePartitionCount>;

        $i63 = $i62 % 2;

        if $i63 != 1 goto label20;

        $r55 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        virtualinvoke $r55.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i100);

        goto label21;

     label20:
        $r47 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        $s64 = (short) i100;

        virtualinvoke $r47.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s64);

        $r49 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        virtualinvoke $r49.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(0);

     label21:
        $r52 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray encryptionSubsampleData>;

        $r51 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: java.nio.ByteBuffer encryptionSubsampleDataBuffer>;

        $r53 = virtualinvoke $r51.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r52.<androidx.media3.common.util.ParsableByteArray: void reset(byte[],int)>($r53, i0);

        $r54 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray encryptionSubsampleData>;

        interfaceinvoke r3.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int,int)>($r54, i0, 1);

        $i65 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>;

        $i66 = $i65 + i0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten> = $i66;

     label22:
        goto label24;

     label23:
        $r24 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] sampleStrippedBytes>;

        if $r24 == null goto label24;

        $r39 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>;

        $r38 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] sampleStrippedBytes>;

        $r37 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] sampleStrippedBytes>;

        $i44 = lengthof $r37;

        virtualinvoke $r39.<androidx.media3.common.util.ParsableByteArray: void reset(byte[],int)>($r38, $i44);

     label24:
        $z15 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean access$400(androidx.media3.extractor.mkv.MatroskaExtractor$Track,boolean)>(r2, z0);

        if $z15 == 0 goto label25;

        $i26 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags>;

        $i27 = $i26 | 268435456;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int blockFlags> = $i27;

        $r25 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray supplementalData>;

        virtualinvoke $r25.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(0);

        $r26 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>;

        $i28 = virtualinvoke $r26.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        $i30 = i93 + $i28;

        $i29 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        i101 = $i30 - $i29;

        $r27 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        virtualinvoke $r27.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(4);

        $r28 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r29 = virtualinvoke $r28.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i31 = i101 >> 24;

        $i32 = $i31 & 255;

        $b33 = (byte) $i32;

        $r29[0] = $b33;

        $r30 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r31 = virtualinvoke $r30.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i34 = i101 >> 16;

        $i35 = $i34 & 255;

        $b36 = (byte) $i35;

        $r31[1] = $b36;

        $r32 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r33 = virtualinvoke $r32.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i37 = i101 >> 8;

        $i38 = $i37 & 255;

        $b39 = (byte) $i38;

        $r33[2] = $b39;

        $r34 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        $r35 = virtualinvoke $r34.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i40 = i101 & 255;

        $b41 = (byte) $i40;

        $r35[3] = $b41;

        $r36 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray scratch>;

        interfaceinvoke r3.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int,int)>($r36, 4, 2);

        $i42 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>;

        $i43 = $i42 + 4;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten> = $i43;

     label25:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleEncodingHandled> = 1;

     label26:
        $r92 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>;

        $i102 = virtualinvoke $r92.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        i103 = i93 + $i102;

        $r93 = "V_MPEG4/ISO/AVC";

        $r94 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z16 = virtualinvoke $r93.<java.lang.String: boolean equals(java.lang.Object)>($r94);

        if $z16 != 0 goto label27;

        $r20 = "V_MPEGH/ISO/HEVC";

        $r19 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z6 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z6 == 0 goto label31;

     label27:
        $r10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray nalLength>;

        r95 = virtualinvoke $r10.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r95[0] = 0;

        r95[1] = 0;

        r95[2] = 0;

        i104 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int nalUnitLengthFieldLength>;

        $i2 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int nalUnitLengthFieldLength>;

        i105 = 4 - $i2;

     label28:
        $i106 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        if $i106 >= i103 goto label30;

        $i6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleCurrentNalBytesRemaining>;

        if $i6 != 0 goto label29;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void writeToTarget(androidx.media3.extractor.ExtractorInput,byte[],int,int)>(r1, r95, i105, i104);

        $i14 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        $i15 = $i14 + i104;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead> = $i15;

        $r15 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray nalLength>;

        virtualinvoke $r15.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r16 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray nalLength>;

        $i16 = virtualinvoke $r16.<androidx.media3.common.util.ParsableByteArray: int readUnsignedIntToInt()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleCurrentNalBytesRemaining> = $i16;

        $r17 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray nalStartCode>;

        virtualinvoke $r17.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r18 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray nalStartCode>;

        interfaceinvoke r3.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r18, 4);

        $i17 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>;

        $i18 = $i17 + 4;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten> = $i18;

        goto label28;

     label29:
        $i7 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleCurrentNalBytesRemaining>;

        i107 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int writeToOutput(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.TrackOutput,int)>(r1, r3, $i7);

        $i8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        $i9 = $i8 + i107;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead> = $i9;

        $i10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>;

        $i11 = $i10 + i107;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten> = $i11;

        $i12 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleCurrentNalBytesRemaining>;

        $i13 = $i12 - i107;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleCurrentNalBytesRemaining> = $i13;

        goto label28;

     label30:
        goto label35;

     label31:
        $r21 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        if $r21 == null goto label34;

        $r22 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>;

        $i25 = virtualinvoke $r22.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        if $i25 != 0 goto label32;

        $z17 = 1;

        goto label33;

     label32:
        $z17 = 0;

     label33:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z17);

        $r23 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        virtualinvoke $r23.<androidx.media3.extractor.TrueHdSampleRechunker: void startSample(androidx.media3.extractor.ExtractorInput)>(r1);

     label34:
        $i108 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        if $i108 >= i103 goto label35;

        $i19 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        $i20 = i103 - $i19;

        i109 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int writeToOutput(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.TrackOutput,int)>(r1, r3, $i20);

        $i21 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead>;

        $i22 = $i21 + i109;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead> = $i22;

        $i23 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>;

        $i24 = $i23 + i109;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten> = $i24;

        goto label34;

     label35:
        $r12 = "A_VORBIS";

        $r11 = r2.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z5 == 0 goto label36;

        $r13 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray vorbisNumPageSamples>;

        virtualinvoke $r13.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r14 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray vorbisNumPageSamples>;

        interfaceinvoke r3.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r14, 4);

        $i4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>;

        $i5 = $i4 + 4;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten> = $i5;

     label36:
        $i3 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int finishWriteSampleData()>();

        return $i3;
    }

    private int finishWriteSampleData()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        int i0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        i0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten>;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor: void resetWriteSampleData()>();

        return i0;
    }

    private void resetWriteSampleData()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.common.util.ParsableByteArray $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesRead> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleBytesWritten> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int sampleCurrentNalBytesRemaining> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleEncodingHandled> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleSignalByteRead> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean samplePartitionCountRead> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: int samplePartitionCount> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: byte sampleSignalByte> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sampleInitializationVectorRead> = 0;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>;

        virtualinvoke $r1.<androidx.media3.common.util.ParsableByteArray: void reset(int)>(0);

        return;
    }

    private void writeSubtitleSampleData(androidx.media3.extractor.ExtractorInput, byte[], int) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        byte[] r2, $r5, $r7, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        androidx.media3.common.util.ParsableByteArray $r3, $r4, $r6, $r8, $r9, $r10;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i2 = lengthof r2;

        i1 = $i2 + i0;

        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $i3 = virtualinvoke $r3.<androidx.media3.common.util.ParsableByteArray: int capacity()>();

        if $i3 >= i1 goto label1;

        $r10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $i6 = i1 + i0;

        $r11 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r2, $i6);

        virtualinvoke $r10.<androidx.media3.common.util.ParsableByteArray: void reset(byte[])>($r11);

        goto label2;

     label1:
        $r4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $r5 = virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i4 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r5, 0, $i4);

     label2:
        $r6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        $r7 = virtualinvoke $r6.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $i5 = lengthof r2;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>($r7, $i5, i0);

        $r8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        virtualinvoke $r8.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        $r9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray subtitleSample>;

        virtualinvoke $r9.<androidx.media3.common.util.ParsableByteArray: void setLimit(int)>(i1);

        return;
    }

    private static void setSubtitleEndTime(java.lang.String, long, byte[])
    {
        java.lang.String r0, r2;
        long l0;
        byte[] r1, r4;
        int $i1, $i4;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r3;
        byte b2, b3;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r1 := @parameter2: byte[];

        r2 = r0;

        b2 = -1;

        $i1 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case 738597099: goto label2;
            case 1045209816: goto label3;
            case 1422270023: goto label1;
            default: goto label4;
        };

     label1:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("S_TEXT/UTF8");

        if $z0 == 0 goto label4;

        b2 = 0;

        goto label4;

     label2:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("S_TEXT/ASS");

        if $z2 == 0 goto label4;

        b2 = 1;

        goto label4;

     label3:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("S_TEXT/WEBVTT");

        if $z1 == 0 goto label4;

        b2 = 2;

     label4:
        tableswitch(b2)
        {
            case 0: goto label5;
            case 1: goto label6;
            case 2: goto label7;
            default: goto label8;
        };

     label5:
        r4 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] formatSubtitleTimecode(long,java.lang.String,long)>(l0, "%02d:%02d:%02d,%03d", 1000L);

        b3 = 19;

        goto label9;

     label6:
        r4 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] formatSubtitleTimecode(long,java.lang.String,long)>(l0, "%01d:%02d:%02d:%02d", 10000L);

        b3 = 21;

        goto label9;

     label7:
        r4 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] formatSubtitleTimecode(long,java.lang.String,long)>(l0, "%02d:%02d:%02d.%03d", 1000L);

        b3 = 25;

        goto label9;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label9:
        $i4 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r1, b3, $i4);

        return;
    }

    private static byte[] formatSubtitleTimecode(long, java.lang.String, long)
    {
        java.lang.String r0, $r8;
        long l0, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, l18, l19, l20, l21;
        byte[] r1;
        int i1, i2, i3, i4;
        byte $b5;
        java.lang.Object[] $r2;
        java.util.Locale $r3;
        java.lang.Integer $r4, $r5, $r6, $r7;
        boolean $z0;

        l18 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $b5 = l18 cmp -9223372036854775807L;

        if $b5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        $l6 = l18 / 3600000000L;

        i1 = (int) $l6;

        $l7 = (long) i1;

        $l8 = $l7 * 3600L;

        $l9 = $l8 * 1000000L;

        l19 = l18 - $l9;

        $l10 = l19 / 60000000L;

        i2 = (int) $l10;

        $l11 = (long) i2;

        $l12 = $l11 * 60L;

        $l13 = $l12 * 1000000L;

        l20 = l19 - $l13;

        $l14 = l20 / 1000000L;

        i3 = (int) $l14;

        $l15 = (long) i3;

        $l16 = $l15 * 1000000L;

        l21 = l20 - $l16;

        $l17 = l21 / l0;

        i4 = (int) $l17;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r2 = newarray (java.lang.Object)[4];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r2[2] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r2[3] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, r0, $r2);

        r1 = staticinvoke <androidx.media3.common.util.Util: byte[] getUtf8Bytes(java.lang.String)>($r8);

        return r1;
    }

    private void writeToTarget(androidx.media3.extractor.ExtractorInput, byte[], int, int) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        byte[] r2;
        int i0, i1, i2, $i3, $i4, $i5;
        androidx.media3.common.util.ParsableByteArray $r3, $r4;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>;

        $i3 = virtualinvoke $r3.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i3);

        $i5 = i0 + i2;

        $i4 = i1 - i2;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: void readFully(byte[],int,int)>(r2, $i5, $i4);

        if i2 <= 0 goto label1;

        $r4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>;

        virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>(r2, i0, i2);

     label1:
        return;
    }

    private int writeToOutput(androidx.media3.extractor.ExtractorInput, androidx.media3.extractor.TrackOutput, int) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.TrackOutput r2;
        int i0, i1, i2;
        androidx.media3.common.util.ParsableByteArray $r3, $r4;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.extractor.TrackOutput;

        i0 := @parameter2: int;

        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>;

        i1 = virtualinvoke $r3.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        if i1 <= 0 goto label1;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        $r4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.common.util.ParsableByteArray sampleStrippedBytes>;

        interfaceinvoke r2.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r4, i2);

        goto label2;

     label1:
        i2 = interfaceinvoke r2.<androidx.media3.extractor.TrackOutput: int sampleData(androidx.media3.common.DataReader,int,boolean)>(r1, i0, 0);

     label2:
        return i2;
    }

    private androidx.media3.extractor.SeekMap buildSeekMap(androidx.media3.common.util.LongArray, androidx.media3.common.util.LongArray)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.common.util.LongArray r1, r2;
        int i0, $i5, $i6, $i7, $i8, $i11, $i15, $i16, $i17, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i36, $i37, i46, i47;
        long $l1, $l3, $l9, $l10, $l12, $l13, $l14, $l18, $l19, $l20, $l33, $l34, $l35, $l38, $l39, $l40, $l41, $l42, $l43, $l44, $l45, l48;
        byte $b2, $b4, $b23;
        androidx.media3.extractor.ChunkIndex $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        androidx.media3.extractor.SeekMap$Unseekable $r8;
        int[] r9;
        long[] r10, r11, r12;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.common.util.LongArray;

        r2 := @parameter1: androidx.media3.common.util.LongArray;

        $l1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentPosition>;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label1;

        $l3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationUs>;

        $b4 = $l3 cmp -9223372036854775807L;

        if $b4 == 0 goto label1;

        if r1 == null goto label1;

        $i5 = virtualinvoke r1.<androidx.media3.common.util.LongArray: int size()>();

        if $i5 == 0 goto label1;

        if r2 == null goto label1;

        $i6 = virtualinvoke r2.<androidx.media3.common.util.LongArray: int size()>();

        $i7 = virtualinvoke r1.<androidx.media3.common.util.LongArray: int size()>();

        if $i6 == $i7 goto label2;

     label1:
        $r8 = new androidx.media3.extractor.SeekMap$Unseekable;

        $l45 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationUs>;

        specialinvoke $r8.<androidx.media3.extractor.SeekMap$Unseekable: void <init>(long)>($l45);

        return $r8;

     label2:
        i0 = virtualinvoke r1.<androidx.media3.common.util.LongArray: int size()>();

        r9 = newarray (int)[i0];

        r10 = newarray (long)[i0];

        r11 = newarray (long)[i0];

        r12 = newarray (long)[i0];

        i46 = 0;

     label3:
        if i46 >= i0 goto label4;

        $l41 = virtualinvoke r1.<androidx.media3.common.util.LongArray: long get(int)>(i46);

        r12[i46] = $l41;

        $l42 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentPosition>;

        $l43 = virtualinvoke r2.<androidx.media3.common.util.LongArray: long get(int)>(i46);

        $l44 = $l42 + $l43;

        r10[i46] = $l44;

        i46 = i46 + 1;

        goto label3;

     label4:
        i47 = 0;

     label5:
        $i8 = i0 - 1;

        if i47 >= $i8 goto label6;

        $i32 = i47 + 1;

        $l34 = r10[$i32];

        $l33 = r10[i47];

        $l35 = $l34 - $l33;

        $i36 = (int) $l35;

        r9[i47] = $i36;

        $i37 = i47 + 1;

        $l39 = r12[$i37];

        $l38 = r12[i47];

        $l40 = $l39 - $l38;

        r11[i47] = $l40;

        i47 = i47 + 1;

        goto label5;

     label6:
        $i16 = i0 - 1;

        $l10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentPosition>;

        $l9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long segmentContentSize>;

        $l13 = $l10 + $l9;

        $i11 = i0 - 1;

        $l12 = r10[$i11];

        $l14 = $l13 - $l12;

        $i15 = (int) $l14;

        r9[$i16] = $i15;

        $i21 = i0 - 1;

        $l19 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long durationUs>;

        $i17 = i0 - 1;

        $l18 = r12[$i17];

        $l20 = $l19 - $l18;

        r11[$i21] = $l20;

        $i22 = i0 - 1;

        l48 = r11[$i22];

        $b23 = l48 cmp 0L;

        if $b23 > 0 goto label7;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Discarding last cue point with unexpected duration: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l48);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MatroskaExtractor", $r7);

        $i24 = lengthof r9;

        $i25 = $i24 - 1;

        r9 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r9, $i25);

        $i26 = lengthof r10;

        $i27 = $i26 - 1;

        r10 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>(r10, $i27);

        $i28 = lengthof r11;

        $i29 = $i28 - 1;

        r11 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>(r11, $i29);

        $i30 = lengthof r12;

        $i31 = $i30 - 1;

        r12 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>(r12, $i31);

     label7:
        $r3 = new androidx.media3.extractor.ChunkIndex;

        specialinvoke $r3.<androidx.media3.extractor.ChunkIndex: void <init>(int[],long[],long[],long[])>(r9, r10, r11, r12);

        return $r3;
    }

    private boolean maybeSeekForCues(androidx.media3.extractor.PositionHolder, long)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.PositionHolder r1;
        long l0, $l1, $l3, $l4;
        boolean $z0, $z1;
        byte $b2;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        r1 := @parameter0: androidx.media3.extractor.PositionHolder;

        l0 := @parameter1: long;

        $z0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seekForCues>;

        if $z0 == 0 goto label1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long seekPositionAfterBuildingCues> = l0;

        $l4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long cuesContentPosition>;

        r1.<androidx.media3.extractor.PositionHolder: long position> = $l4;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean seekForCues> = 0;

        return 1;

     label1:
        $z1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean sentSeekMap>;

        if $z1 == 0 goto label2;

        $l1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long seekPositionAfterBuildingCues>;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label2;

        $l3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long seekPositionAfterBuildingCues>;

        r1.<androidx.media3.extractor.PositionHolder: long position> = $l3;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long seekPositionAfterBuildingCues> = -1L;

        return 1;

     label2:
        return 0;
    }

    private long scaleTimecodeToUs(long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        long l0, $l1, $l3, $l4;
        byte $b2;
        androidx.media3.common.ParserException $r1;
        java.lang.Throwable r2;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        l0 := @parameter0: long;

        $l1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long timecodeScale>;

        $b2 = $l1 cmp -9223372036854775807L;

        if $b2 != 0 goto label1;

        $r1 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Can\'t scale timecode prior to timecodeScale being set.", null);

        r2 = (java.lang.Throwable) $r1;

        throw r2;

     label1:
        $l3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: long timecodeScale>;

        $l4 = staticinvoke <androidx.media3.common.util.Util: long scaleLargeTimestamp(long,long,long)>(l0, $l3, 1000L);

        return $l4;
    }

    private static boolean isCodecSupported(java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32;
        byte b1;

        r0 := @parameter0: java.lang.String;

        r1 = r0;

        b1 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -2095576542: goto label07;
            case -2095575984: goto label05;
            case -1985379776: goto label24;
            case -1784763192: goto label19;
            case -1730367663: goto label13;
            case -1482641358: goto label15;
            case -1482641357: goto label16;
            case -1373388978: goto label10;
            case -933872740: goto label33;
            case -538363189: goto label06;
            case -538363109: goto label08;
            case -425012669: goto label31;
            case -356037306: goto label22;
            case 62923557: goto label14;
            case 62923603: goto label17;
            case 62927045: goto label20;
            case 82318131: goto label03;
            case 82338133: goto label01;
            case 82338134: goto label02;
            case 99146302: goto label32;
            case 444813526: goto label11;
            case 542569478: goto label21;
            case 635596514: goto label27;
            case 725948237: goto label26;
            case 725957860: goto label25;
            case 738597099: goto label29;
            case 855502857: goto label09;
            case 1045209816: goto label30;
            case 1422270023: goto label28;
            case 1809237540: goto label04;
            case 1950749482: goto label18;
            case 1950789798: goto label23;
            case 1951062397: goto label12;
            default: goto label34;
        };

     label01:
        $z15 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_VP8");

        if $z15 == 0 goto label34;

        b1 = 0;

        goto label34;

     label02:
        $z14 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_VP9");

        if $z14 == 0 goto label34;

        b1 = 1;

        goto label34;

     label03:
        $z16 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_AV1");

        if $z16 == 0 goto label34;

        b1 = 2;

        goto label34;

     label04:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG2");

        if $z3 == 0 goto label34;

        b1 = 3;

        goto label34;

     label05:
        $z31 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG4/ISO/SP");

        if $z31 == 0 goto label34;

        b1 = 4;

        goto label34;

     label06:
        $z23 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG4/ISO/ASP");

        if $z23 == 0 goto label34;

        b1 = 5;

        goto label34;

     label07:
        $z32 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG4/ISO/AP");

        if $z32 == 0 goto label34;

        b1 = 6;

        goto label34;

     label08:
        $z22 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG4/ISO/AVC");

        if $z22 == 0 goto label34;

        b1 = 7;

        goto label34;

     label09:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEGH/ISO/HEVC");

        if $z6 == 0 goto label34;

        b1 = 8;

        goto label34;

     label10:
        $z25 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_MS/VFW/FOURCC");

        if $z25 == 0 goto label34;

        b1 = 9;

        goto label34;

     label11:
        $z12 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("V_THEORA");

        if $z12 == 0 goto label34;

        b1 = 10;

        goto label34;

     label12:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_OPUS");

        if $z0 == 0 goto label34;

        b1 = 11;

        goto label34;

     label13:
        $z28 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_VORBIS");

        if $z28 == 0 goto label34;

        b1 = 12;

        goto label34;

     label14:
        $z19 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_AAC");

        if $z19 == 0 goto label34;

        b1 = 13;

        goto label34;

     label15:
        $z27 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_MPEG/L2");

        if $z27 == 0 goto label34;

        b1 = 14;

        goto label34;

     label16:
        $z26 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_MPEG/L3");

        if $z26 == 0 goto label34;

        b1 = 15;

        goto label34;

     label17:
        $z18 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_AC3");

        if $z18 == 0 goto label34;

        b1 = 16;

        goto label34;

     label18:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_EAC3");

        if $z2 == 0 goto label34;

        b1 = 17;

        goto label34;

     label19:
        $z29 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_TRUEHD");

        if $z29 == 0 goto label34;

        b1 = 18;

        goto label34;

     label20:
        $z17 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_DTS");

        if $z17 == 0 goto label34;

        b1 = 19;

        goto label34;

     label21:
        $z11 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_DTS/EXPRESS");

        if $z11 == 0 goto label34;

        b1 = 20;

        goto label34;

     label22:
        $z20 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_DTS/LOSSLESS");

        if $z20 == 0 goto label34;

        b1 = 21;

        goto label34;

     label23:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_FLAC");

        if $z1 == 0 goto label34;

        b1 = 22;

        goto label34;

     label24:
        $z30 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_MS/ACM");

        if $z30 == 0 goto label34;

        b1 = 23;

        goto label34;

     label25:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_PCM/INT/LIT");

        if $z8 == 0 goto label34;

        b1 = 24;

        goto label34;

     label26:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_PCM/INT/BIG");

        if $z9 == 0 goto label34;

        b1 = 25;

        goto label34;

     label27:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("A_PCM/FLOAT/IEEE");

        if $z10 == 0 goto label34;

        b1 = 26;

        goto label34;

     label28:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("S_TEXT/UTF8");

        if $z4 == 0 goto label34;

        b1 = 27;

        goto label34;

     label29:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("S_TEXT/ASS");

        if $z7 == 0 goto label34;

        b1 = 28;

        goto label34;

     label30:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("S_TEXT/WEBVTT");

        if $z5 == 0 goto label34;

        b1 = 29;

        goto label34;

     label31:
        $z21 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("S_VOBSUB");

        if $z21 == 0 goto label34;

        b1 = 30;

        goto label34;

     label32:
        $z13 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("S_HDMV/PGS");

        if $z13 == 0 goto label34;

        b1 = 31;

        goto label34;

     label33:
        $z24 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("S_DVBSUB");

        if $z24 == 0 goto label34;

        b1 = 32;

     label34:
        tableswitch(b1)
        {
            case 0: goto label35;
            case 1: goto label35;
            case 2: goto label35;
            case 3: goto label35;
            case 4: goto label35;
            case 5: goto label35;
            case 6: goto label35;
            case 7: goto label35;
            case 8: goto label35;
            case 9: goto label35;
            case 10: goto label35;
            case 11: goto label35;
            case 12: goto label35;
            case 13: goto label35;
            case 14: goto label35;
            case 15: goto label35;
            case 16: goto label35;
            case 17: goto label35;
            case 18: goto label35;
            case 19: goto label35;
            case 20: goto label35;
            case 21: goto label35;
            case 22: goto label35;
            case 23: goto label35;
            case 24: goto label35;
            case 25: goto label35;
            case 26: goto label35;
            case 27: goto label35;
            case 28: goto label35;
            case 29: goto label35;
            case 30: goto label35;
            case 31: goto label35;
            case 32: goto label35;
            default: goto label36;
        };

     label35:
        return 1;

     label36:
        return 0;
    }

    private static int[] ensureArrayCapacity(int[], int)
    {
        int[] r0, $r1, $r2;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = newarray (int)[i0];

        return $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 < i0 goto label2;

        return r0;

     label2:
        $i2 = lengthof r0;

        $i3 = $i2 * 2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, i0);

        $r1 = newarray (int)[$i4];

        return $r1;
    }

    private void assertInitialized()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor r0;
        androidx.media3.extractor.ExtractorOutput $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.ExtractorOutput extractorOutput>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r1);

        return;
    }

    private static androidx.media3.extractor.Extractor[] lambda$static$0()
    {
        androidx.media3.extractor.Extractor[] $r0;
        androidx.media3.extractor.mkv.MatroskaExtractor $r1;

        $r0 = newarray (androidx.media3.extractor.Extractor)[1];

        $r1 = new androidx.media3.extractor.mkv.MatroskaExtractor;

        specialinvoke $r1.<androidx.media3.extractor.mkv.MatroskaExtractor: void <init>()>();

        $r0[0] = $r1;

        return $r0;
    }

    static byte[] access$500()
    {
        byte[] $r0;

        $r0 = <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] SSA_DIALOGUE_FORMAT>;

        return $r0;
    }

    static java.util.Map access$600()
    {
        java.util.Map $r0;

        $r0 = <androidx.media3.extractor.mkv.MatroskaExtractor: java.util.Map TRACK_NAME_TO_ROTATION_DEGREES>;

        return $r0;
    }

    static java.util.UUID access$700()
    {
        java.util.UUID $r0;

        $r0 = <androidx.media3.extractor.mkv.MatroskaExtractor: java.util.UUID WAVE_SUBFORMAT_PCM>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.HashMap r0, $r7;
        androidx.media3.extractor.ExtractorsFactory $r1;
        byte[] $r2, $r3, $r4, $r5;
        java.util.UUID $r6;
        java.lang.Integer $r8, $r10, $r12, $r14;
        java.util.Map $r16;

        $r1 = dynamicinvoke "createExtractors" <androidx.media3.extractor.ExtractorsFactory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.extractor.Extractor[] __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.Extractor[] lambda$static$0()>, methodtype: androidx.media3.extractor.Extractor[] __METHODTYPE__());

        <androidx.media3.extractor.mkv.MatroskaExtractor: androidx.media3.extractor.ExtractorsFactory FACTORY> = $r1;

        $r2 = newarray (byte)[32];

        $r2[0] = 49;

        $r2[1] = 10;

        $r2[2] = 48;

        $r2[3] = 48;

        $r2[4] = 58;

        $r2[5] = 48;

        $r2[6] = 48;

        $r2[7] = 58;

        $r2[8] = 48;

        $r2[9] = 48;

        $r2[10] = 44;

        $r2[11] = 48;

        $r2[12] = 48;

        $r2[13] = 48;

        $r2[14] = 32;

        $r2[15] = 45;

        $r2[16] = 45;

        $r2[17] = 62;

        $r2[18] = 32;

        $r2[19] = 48;

        $r2[20] = 48;

        $r2[21] = 58;

        $r2[22] = 48;

        $r2[23] = 48;

        $r2[24] = 58;

        $r2[25] = 48;

        $r2[26] = 48;

        $r2[27] = 44;

        $r2[28] = 48;

        $r2[29] = 48;

        $r2[30] = 48;

        $r2[31] = 10;

        <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] SUBRIP_PREFIX> = $r2;

        $r3 = staticinvoke <androidx.media3.common.util.Util: byte[] getUtf8Bytes(java.lang.String)>("Format: Start, End, ReadOrder, Layer, Style, Name, MarginL, MarginR, MarginV, Effect, Text");

        <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] SSA_DIALOGUE_FORMAT> = $r3;

        $r4 = newarray (byte)[32];

        $r4[0] = 68;

        $r4[1] = 105;

        $r4[2] = 97;

        $r4[3] = 108;

        $r4[4] = 111;

        $r4[5] = 103;

        $r4[6] = 117;

        $r4[7] = 101;

        $r4[8] = 58;

        $r4[9] = 32;

        $r4[10] = 48;

        $r4[11] = 58;

        $r4[12] = 48;

        $r4[13] = 48;

        $r4[14] = 58;

        $r4[15] = 48;

        $r4[16] = 48;

        $r4[17] = 58;

        $r4[18] = 48;

        $r4[19] = 48;

        $r4[20] = 44;

        $r4[21] = 48;

        $r4[22] = 58;

        $r4[23] = 48;

        $r4[24] = 48;

        $r4[25] = 58;

        $r4[26] = 48;

        $r4[27] = 48;

        $r4[28] = 58;

        $r4[29] = 48;

        $r4[30] = 48;

        $r4[31] = 44;

        <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] SSA_PREFIX> = $r4;

        $r5 = newarray (byte)[38];

        $r5[0] = 87;

        $r5[1] = 69;

        $r5[2] = 66;

        $r5[3] = 86;

        $r5[4] = 84;

        $r5[5] = 84;

        $r5[6] = 10;

        $r5[7] = 10;

        $r5[8] = 48;

        $r5[9] = 48;

        $r5[10] = 58;

        $r5[11] = 48;

        $r5[12] = 48;

        $r5[13] = 58;

        $r5[14] = 48;

        $r5[15] = 48;

        $r5[16] = 46;

        $r5[17] = 48;

        $r5[18] = 48;

        $r5[19] = 48;

        $r5[20] = 32;

        $r5[21] = 45;

        $r5[22] = 45;

        $r5[23] = 62;

        $r5[24] = 32;

        $r5[25] = 48;

        $r5[26] = 48;

        $r5[27] = 58;

        $r5[28] = 48;

        $r5[29] = 48;

        $r5[30] = 58;

        $r5[31] = 48;

        $r5[32] = 48;

        $r5[33] = 46;

        $r5[34] = 48;

        $r5[35] = 48;

        $r5[36] = 48;

        $r5[37] = 10;

        <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] VTT_PREFIX> = $r5;

        $r6 = new java.util.UUID;

        specialinvoke $r6.<java.util.UUID: void <init>(long,long)>(72057594037932032L, -9223371306706625679L);

        <androidx.media3.extractor.mkv.MatroskaExtractor: java.util.UUID WAVE_SUBFORMAT_PCM> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0 = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("htc_video_rotA-000", $r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(90);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("htc_video_rotA-090", $r10);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(180);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("htc_video_rotA-180", $r12);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(270);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("htc_video_rotA-270", $r14);

        $r16 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r0);

        <androidx.media3.extractor.mkv.MatroskaExtractor: java.util.Map TRACK_NAME_TO_ROTATION_DEGREES> = $r16;

        return;
    }

androidx.media3.extractor.mkv.MatroskaExtractor$1
androidx.media3.extractor.mkv.MatroskaExtractor$Flags
androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor
<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0>
    private void <init>(androidx.media3.extractor.mkv.MatroskaExtractor)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        androidx.media3.extractor.mkv.MatroskaExtractor r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        r1 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getElementType(int)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        int i0, $i1;
        androidx.media3.extractor.mkv.MatroskaExtractor $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0>;

        $i1 = virtualinvoke $r1.<androidx.media3.extractor.mkv.MatroskaExtractor: int getElementType(int)>(i0);

        return $i1;
    }

    public boolean isLevel1Element(int)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        int i0;
        androidx.media3.extractor.mkv.MatroskaExtractor $r1;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0>;

        $z0 = virtualinvoke $r1.<androidx.media3.extractor.mkv.MatroskaExtractor: boolean isLevel1Element(int)>(i0);

        return $z0;
    }

    public void startMasterElement(int, long, long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        int i0;
        long l1, l2;
        androidx.media3.extractor.mkv.MatroskaExtractor $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0>;

        virtualinvoke $r1.<androidx.media3.extractor.mkv.MatroskaExtractor: void startMasterElement(int,long,long)>(i0, l1, l2);

        return;
    }

    public void endMasterElement(int) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        int i0;
        androidx.media3.extractor.mkv.MatroskaExtractor $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0>;

        virtualinvoke $r1.<androidx.media3.extractor.mkv.MatroskaExtractor: void endMasterElement(int)>(i0);

        return;
    }

    public void integerElement(int, long) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        int i0;
        long l1;
        androidx.media3.extractor.mkv.MatroskaExtractor $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0>;

        virtualinvoke $r1.<androidx.media3.extractor.mkv.MatroskaExtractor: void integerElement(int,long)>(i0, l1);

        return;
    }

    public void floatElement(int, double) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        int i0;
        double d0;
        androidx.media3.extractor.mkv.MatroskaExtractor $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0>;

        virtualinvoke $r1.<androidx.media3.extractor.mkv.MatroskaExtractor: void floatElement(int,double)>(i0, d0);

        return;
    }

    public void stringElement(int, java.lang.String) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        int i0;
        java.lang.String r1;
        androidx.media3.extractor.mkv.MatroskaExtractor $r2;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0>;

        virtualinvoke $r2.<androidx.media3.extractor.mkv.MatroskaExtractor: void stringElement(int,java.lang.String)>(i0, r1);

        return;
    }

    public void binaryElement(int, int, androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        int i0, i1;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.mkv.MatroskaExtractor $r2;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.media3.extractor.ExtractorInput;

        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: androidx.media3.extractor.mkv.MatroskaExtractor this$0>;

        virtualinvoke $r2.<androidx.media3.extractor.mkv.MatroskaExtractor: void binaryElement(int,int,androidx.media3.extractor.ExtractorInput)>(i0, i1, r1);

        return;
    }

    void <init>(androidx.media3.extractor.mkv.MatroskaExtractor, androidx.media3.extractor.mkv.MatroskaExtractor$1)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor r0;
        androidx.media3.extractor.mkv.MatroskaExtractor r1;
        androidx.media3.extractor.mkv.MatroskaExtractor$1 r2;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor;

        r1 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor;

        r2 := @parameter1: androidx.media3.extractor.mkv.MatroskaExtractor$1;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$InnerEbmlProcessor: void <init>(androidx.media3.extractor.mkv.MatroskaExtractor)>(r1);

        return;
    }

androidx.media3.extractor.mkv.MatroskaExtractor$Track
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int DISPLAY_UNIT_PIXELS>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int MAX_CHROMATICITY>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int DEFAULT_MAX_CLL>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int DEFAULT_MAX_FALL>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String name>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int number>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int type>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int defaultSampleDurationNs>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxBlockAdditionId>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int blockAddIdType>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasContentEncryption>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] sampleStrippedBytes>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] codecPrivate>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.common.DrmInitData drmInitData>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int width>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int height>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayWidth>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayHeight>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayUnit>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int projectionType>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPoseYaw>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPosePitch>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPoseRoll>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] projectionData>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int stereoMode>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasColorInfo>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorSpace>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorTransfer>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorRange>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxContentLuminance>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxFrameAverageLuminance>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityX>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityY>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityX>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityY>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityX>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityY>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityX>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityY>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float maxMasteringLuminance>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float minMasteringLuminance>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] dolbyVisionConfigBytes>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int channelCount>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int sampleRate>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: long codecDelayNs>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: long seekPreRollNs>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean flagForced>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean flagDefault>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String language>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output>
<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int nalUnitLengthFieldLength>
    protected void <init>()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int width> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int height> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayWidth> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayHeight> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayUnit> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int projectionType> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPoseYaw> = 0.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPosePitch> = 0.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPoseRoll> = 0.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] projectionData> = null;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int stereoMode> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasColorInfo> = 0;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorSpace> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorTransfer> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorRange> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxContentLuminance> = 1000;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxFrameAverageLuminance> = 200;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityX> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityY> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityX> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityY> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityX> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityY> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityX> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityY> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float maxMasteringLuminance> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float minMasteringLuminance> = -1.0F;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int channelCount> = 1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth> = -1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int sampleRate> = 8000;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: long codecDelayNs> = 0L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: long seekPreRollNs> = 0L;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean flagDefault> = 1;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String language> = "eng";

        return;
    }

    public void initializeOutput(androidx.media3.extractor.ExtractorOutput, int) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        androidx.media3.extractor.ExtractorOutput r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i39, $i40, i42, $i50, $i51, $i52, i53, $i54, $i55, $i56, $i57, $i58;
        byte[] r2, $r4, $r32, $r34, $r35, $r37, $r58, $r70, $r73, $r74, $r77, $r82, $r87, $r89, $r92, $r97, $r100, $r101, $r102, $r113, r117, $r122;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49;
        java.lang.String $r3, $r6, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r17, $r20, $r22, $r33, $r36, $r43, $r49, $r55, $r57, $r62, $r68, $r69, $r72, $r76, $r88, $r91, $r96, $r99, r105, r106, r107, $r125, $r129;
        java.util.Map $r7, $r19, $r21;
        androidx.media3.common.ParserException $r16, $r103;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9;
        java.lang.Object $r23, $r93, $r94, r104;
        java.lang.Integer $r24;
        androidx.media3.common.Format$Builder $r28, $r29, r115, $r118, $r119, $r120, $r121, $r123, $r124, $r126, $r127, $r128, $r130, $r131, $r132, $r133, $r135, r151;
        java.lang.StringBuilder $r39, $r40, $r41, $r42, $r45, $r46, $r47, $r48, $r51, $r52, $r53, $r54, $r60, $r61, $r64, $r65, $r66, $r67, r145, r146, r147, r148, r149;
        java.nio.ByteBuffer $r78, $r80, $r81, $r83, $r85, $r86;
        java.nio.ByteOrder $r79, $r84;
        long $l37, $l38;
        short s41;
        byte b43, b44, $b45, b46, $b47, b48, b49;
        java.util.List $r108, r153, r154, r155, r158;
        androidx.media3.extractor.AvcConfig r109;
        androidx.media3.extractor.HevcConfig r110;
        android.util.Pair r111;
        androidx.media3.extractor.AacUtil$Config r112;
        androidx.media3.extractor.DolbyVisionConfig r114;
        androidx.media3.common.ColorInfo r116, r152;
        androidx.media3.common.DrmInitData $r134;
        androidx.media3.common.Format r136;
        androidx.media3.extractor.TrackOutput $r137, $r138;
        androidx.media3.common.util.ParsableByteArray r139, r140, r141, r144, r150;
        java.util.ArrayList r142;
        androidx.media3.extractor.TrueHdSampleRechunker r143;
        java.lang.Throwable r156, r157;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        i0 := @parameter1: int;

        s41 = -1;

        i42 = -1;

        r104 = null;

        r105 = null;

        r106 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        b43 = -1;

        $i1 = virtualinvoke r106.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case -2095576542: goto label07;
            case -2095575984: goto label05;
            case -1985379776: goto label24;
            case -1784763192: goto label19;
            case -1730367663: goto label12;
            case -1482641358: goto label15;
            case -1482641357: goto label16;
            case -1373388978: goto label10;
            case -933872740: goto label33;
            case -538363189: goto label06;
            case -538363109: goto label08;
            case -425012669: goto label31;
            case -356037306: goto label22;
            case 62923557: goto label14;
            case 62923603: goto label17;
            case 62927045: goto label20;
            case 82318131: goto label03;
            case 82338133: goto label01;
            case 82338134: goto label02;
            case 99146302: goto label32;
            case 444813526: goto label11;
            case 542569478: goto label21;
            case 635596514: goto label27;
            case 725948237: goto label26;
            case 725957860: goto label25;
            case 738597099: goto label29;
            case 855502857: goto label09;
            case 1045209816: goto label30;
            case 1422270023: goto label28;
            case 1809237540: goto label04;
            case 1950749482: goto label18;
            case 1950789798: goto label23;
            case 1951062397: goto label13;
            default: goto label34;
        };

     label01:
        $z30 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_VP8");

        if $z30 == 0 goto label34;

        b43 = 0;

        goto label34;

     label02:
        $z29 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_VP9");

        if $z29 == 0 goto label34;

        b43 = 1;

        goto label34;

     label03:
        $z31 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_AV1");

        if $z31 == 0 goto label34;

        b43 = 2;

        goto label34;

     label04:
        $z18 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG2");

        if $z18 == 0 goto label34;

        b43 = 3;

        goto label34;

     label05:
        $z46 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG4/ISO/SP");

        if $z46 == 0 goto label34;

        b43 = 4;

        goto label34;

     label06:
        $z38 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG4/ISO/ASP");

        if $z38 == 0 goto label34;

        b43 = 5;

        goto label34;

     label07:
        $z47 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG4/ISO/AP");

        if $z47 == 0 goto label34;

        b43 = 6;

        goto label34;

     label08:
        $z37 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEG4/ISO/AVC");

        if $z37 == 0 goto label34;

        b43 = 7;

        goto label34;

     label09:
        $z21 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_MPEGH/ISO/HEVC");

        if $z21 == 0 goto label34;

        b43 = 8;

        goto label34;

     label10:
        $z40 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_MS/VFW/FOURCC");

        if $z40 == 0 goto label34;

        b43 = 9;

        goto label34;

     label11:
        $z27 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("V_THEORA");

        if $z27 == 0 goto label34;

        b43 = 10;

        goto label34;

     label12:
        $z43 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_VORBIS");

        if $z43 == 0 goto label34;

        b43 = 11;

        goto label34;

     label13:
        $z0 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_OPUS");

        if $z0 == 0 goto label34;

        b43 = 12;

        goto label34;

     label14:
        $z34 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_AAC");

        if $z34 == 0 goto label34;

        b43 = 13;

        goto label34;

     label15:
        $z42 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_MPEG/L2");

        if $z42 == 0 goto label34;

        b43 = 14;

        goto label34;

     label16:
        $z41 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_MPEG/L3");

        if $z41 == 0 goto label34;

        b43 = 15;

        goto label34;

     label17:
        $z33 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_AC3");

        if $z33 == 0 goto label34;

        b43 = 16;

        goto label34;

     label18:
        $z17 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_EAC3");

        if $z17 == 0 goto label34;

        b43 = 17;

        goto label34;

     label19:
        $z44 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_TRUEHD");

        if $z44 == 0 goto label34;

        b43 = 18;

        goto label34;

     label20:
        $z32 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_DTS");

        if $z32 == 0 goto label34;

        b43 = 19;

        goto label34;

     label21:
        $z26 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_DTS/EXPRESS");

        if $z26 == 0 goto label34;

        b43 = 20;

        goto label34;

     label22:
        $z35 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_DTS/LOSSLESS");

        if $z35 == 0 goto label34;

        b43 = 21;

        goto label34;

     label23:
        $z16 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_FLAC");

        if $z16 == 0 goto label34;

        b43 = 22;

        goto label34;

     label24:
        $z45 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_MS/ACM");

        if $z45 == 0 goto label34;

        b43 = 23;

        goto label34;

     label25:
        $z23 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_PCM/INT/LIT");

        if $z23 == 0 goto label34;

        b43 = 24;

        goto label34;

     label26:
        $z24 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_PCM/INT/BIG");

        if $z24 == 0 goto label34;

        b43 = 25;

        goto label34;

     label27:
        $z25 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("A_PCM/FLOAT/IEEE");

        if $z25 == 0 goto label34;

        b43 = 26;

        goto label34;

     label28:
        $z19 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("S_TEXT/UTF8");

        if $z19 == 0 goto label34;

        b43 = 27;

        goto label34;

     label29:
        $z22 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("S_TEXT/ASS");

        if $z22 == 0 goto label34;

        b43 = 28;

        goto label34;

     label30:
        $z20 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("S_TEXT/WEBVTT");

        if $z20 == 0 goto label34;

        b43 = 29;

        goto label34;

     label31:
        $z36 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("S_VOBSUB");

        if $z36 == 0 goto label34;

        b43 = 30;

        goto label34;

     label32:
        $z28 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("S_HDMV/PGS");

        if $z28 == 0 goto label34;

        b43 = 31;

        goto label34;

     label33:
        $z39 = virtualinvoke r106.<java.lang.String: boolean equals(java.lang.Object)>("S_DVBSUB");

        if $z39 == 0 goto label34;

        b43 = 32;

     label34:
        tableswitch(b43)
        {
            case 0: goto label35;
            case 1: goto label36;
            case 2: goto label37;
            case 3: goto label38;
            case 4: goto label39;
            case 5: goto label39;
            case 6: goto label39;
            case 7: goto label42;
            case 8: goto label43;
            case 9: goto label44;
            case 10: goto label45;
            case 11: goto label46;
            case 12: goto label47;
            case 13: goto label48;
            case 14: goto label49;
            case 15: goto label50;
            case 16: goto label51;
            case 17: goto label52;
            case 18: goto label53;
            case 19: goto label54;
            case 20: goto label54;
            case 21: goto label55;
            case 22: goto label56;
            case 23: goto label57;
            case 24: goto label59;
            case 25: goto label60;
            case 26: goto label63;
            case 27: goto label65;
            case 28: goto label66;
            case 29: goto label67;
            case 30: goto label68;
            case 31: goto label69;
            case 32: goto label70;
            default: goto label71;
        };

     label35:
        r107 = "video/x-vnd.on2.vp8";

        goto label72;

     label36:
        r107 = "video/x-vnd.on2.vp9";

        goto label72;

     label37:
        r107 = "video/av01";

        goto label72;

     label38:
        r107 = "video/mpeg2";

        goto label72;

     label39:
        r107 = "video/mp4v-es";

        $r101 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] codecPrivate>;

        if $r101 != null goto label40;

        $r108 = null;

        goto label41;

     label40:
        $r102 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] codecPrivate>;

        $r108 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r102);

     label41:
        r104 = $r108;

        goto label72;

     label42:
        r107 = "video/avc";

        r139 = new androidx.media3.common.util.ParsableByteArray;

        $r99 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r100 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r99);

        specialinvoke r139.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r100);

        r109 = staticinvoke <androidx.media3.extractor.AvcConfig: androidx.media3.extractor.AvcConfig parse(androidx.media3.common.util.ParsableByteArray)>(r139);

        r104 = r109.<androidx.media3.extractor.AvcConfig: java.util.List initializationData>;

        $i40 = r109.<androidx.media3.extractor.AvcConfig: int nalUnitLengthFieldLength>;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int nalUnitLengthFieldLength> = $i40;

        r105 = r109.<androidx.media3.extractor.AvcConfig: java.lang.String codecs>;

        goto label72;

     label43:
        r107 = "video/hevc";

        r140 = new androidx.media3.common.util.ParsableByteArray;

        $r96 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r97 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r96);

        specialinvoke r140.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r97);

        r110 = staticinvoke <androidx.media3.extractor.HevcConfig: androidx.media3.extractor.HevcConfig parse(androidx.media3.common.util.ParsableByteArray)>(r140);

        r104 = r110.<androidx.media3.extractor.HevcConfig: java.util.List initializationData>;

        $i39 = r110.<androidx.media3.extractor.HevcConfig: int nalUnitLengthFieldLength>;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int nalUnitLengthFieldLength> = $i39;

        r105 = r110.<androidx.media3.extractor.HevcConfig: java.lang.String codecs>;

        goto label72;

     label44:
        r141 = new androidx.media3.common.util.ParsableByteArray;

        $r91 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r92 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r91);

        specialinvoke r141.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r92);

        r111 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: android.util.Pair parseFourCcPrivate(androidx.media3.common.util.ParsableByteArray)>(r141);

        $r93 = r111.<android.util.Pair: java.lang.Object first>;

        r107 = (java.lang.String) $r93;

        $r94 = r111.<android.util.Pair: java.lang.Object second>;

        r104 = (java.util.List) $r94;

        goto label72;

     label45:
        r107 = "video/x-unknown";

        goto label72;

     label46:
        r107 = "audio/vorbis";

        s41 = 8192;

        $r88 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r89 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r88);

        r104 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.util.List parseVorbisCodecPrivate(byte[])>($r89);

        goto label72;

     label47:
        r107 = "audio/opus";

        s41 = 5760;

        r142 = new java.util.ArrayList;

        specialinvoke r142.<java.util.ArrayList: void <init>(int)>(3);

        r104 = r142;

        $r76 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r77 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r76);

        r153 = (java.util.List) r104;

        interfaceinvoke r153.<java.util.List: boolean add(java.lang.Object)>($r77);

        $r78 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r79 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r80 = virtualinvoke $r78.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r79);

        $l37 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: long codecDelayNs>;

        $r81 = virtualinvoke $r80.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l37);

        $r82 = virtualinvoke $r81.<java.nio.ByteBuffer: byte[] array()>();

        r154 = (java.util.List) r104;

        interfaceinvoke r154.<java.util.List: boolean add(java.lang.Object)>($r82);

        $r83 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r84 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r85 = virtualinvoke $r83.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r84);

        $l38 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: long seekPreRollNs>;

        $r86 = virtualinvoke $r85.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l38);

        $r87 = virtualinvoke $r86.<java.nio.ByteBuffer: byte[] array()>();

        r155 = (java.util.List) r104;

        interfaceinvoke r155.<java.util.List: boolean add(java.lang.Object)>($r87);

        goto label72;

     label48:
        r107 = "audio/mp4a-latm";

        $r72 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r73 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r72);

        r104 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r73);

        $r74 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] codecPrivate>;

        r112 = staticinvoke <androidx.media3.extractor.AacUtil: androidx.media3.extractor.AacUtil$Config parseAudioSpecificConfig(byte[])>($r74);

        $i35 = r112.<androidx.media3.extractor.AacUtil$Config: int sampleRateHz>;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int sampleRate> = $i35;

        $i36 = r112.<androidx.media3.extractor.AacUtil$Config: int channelCount>;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int channelCount> = $i36;

        r105 = r112.<androidx.media3.extractor.AacUtil$Config: java.lang.String codecs>;

        goto label72;

     label49:
        r107 = "audio/mpeg-L2";

        s41 = 4096;

        goto label72;

     label50:
        r107 = "audio/mpeg";

        s41 = 4096;

        goto label72;

     label51:
        r107 = "audio/ac3";

        goto label72;

     label52:
        r107 = "audio/eac3";

        goto label72;

     label53:
        r107 = "audio/true-hd";

        r143 = new androidx.media3.extractor.TrueHdSampleRechunker;

        specialinvoke r143.<androidx.media3.extractor.TrueHdSampleRechunker: void <init>()>();

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker> = r143;

        goto label72;

     label54:
        r107 = "audio/vnd.dts";

        goto label72;

     label55:
        r107 = "audio/vnd.dts.hd";

        goto label72;

     label56:
        r107 = "audio/flac";

        $r69 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r70 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r69);

        r104 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r70);

        goto label72;

     label57:
        r107 = "audio/raw";

        r144 = new androidx.media3.common.util.ParsableByteArray;

        $r57 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r58 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r57);

        specialinvoke r144.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r58);

        $z12 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean parseMsAcmCodecPrivate(androidx.media3.common.util.ParsableByteArray)>(r144);

        if $z12 == 0 goto label58;

        $i33 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>;

        i42 = staticinvoke <androidx.media3.common.util.Util: int getPcmEncoding(int)>($i33);

        if i42 != 0 goto label72;

        i42 = -1;

        r107 = "audio/x-unknown";

        r145 = new java.lang.StringBuilder;

        specialinvoke r145.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported PCM bit depth: ");

        $i34 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>;

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Setting mimeType to ");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MatroskaExtractor", $r68);

        goto label72;

     label58:
        r107 = "audio/x-unknown";

        r146 = new java.lang.StringBuilder;

        specialinvoke r146.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke r146.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-PCM MS/ACM is unsupported. Setting mimeType to ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MatroskaExtractor", $r62);

        goto label72;

     label59:
        r107 = "audio/raw";

        $i31 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>;

        i42 = staticinvoke <androidx.media3.common.util.Util: int getPcmEncoding(int)>($i31);

        if i42 != 0 goto label72;

        i42 = -1;

        r107 = "audio/x-unknown";

        r147 = new java.lang.StringBuilder;

        specialinvoke r147.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported little endian PCM bit depth: ");

        $i32 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>;

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Setting mimeType to ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MatroskaExtractor", $r55);

        goto label72;

     label60:
        r107 = "audio/raw";

        $i28 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>;

        if $i28 != 8 goto label61;

        i42 = 3;

        goto label72;

     label61:
        $i29 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>;

        if $i29 != 16 goto label62;

        i42 = 268435456;

        goto label72;

     label62:
        i42 = -1;

        r107 = "audio/x-unknown";

        r148 = new java.lang.StringBuilder;

        specialinvoke r148.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported big endian PCM bit depth: ");

        $i30 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>;

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Setting mimeType to ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MatroskaExtractor", $r49);

        goto label72;

     label63:
        r107 = "audio/raw";

        $i26 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>;

        if $i26 != 32 goto label64;

        i42 = 4;

        goto label72;

     label64:
        i42 = -1;

        r107 = "audio/x-unknown";

        r149 = new java.lang.StringBuilder;

        specialinvoke r149.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke r149.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported floating point PCM bit depth: ");

        $i27 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int audioBitDepth>;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Setting mimeType to ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MatroskaExtractor", $r43);

        goto label72;

     label65:
        r107 = "application/x-subrip";

        goto label72;

     label66:
        r107 = "text/x-ssa";

        $r35 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: byte[] access$500()>();

        $r36 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r37 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r36);

        r104 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>($r35, $r37);

        goto label72;

     label67:
        r107 = "text/vtt";

        goto label72;

     label68:
        r107 = "application/vobsub";

        $r33 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r34 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r33);

        r104 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r34);

        goto label72;

     label69:
        r107 = "application/pgs";

        goto label72;

     label70:
        r107 = "application/dvbsubs";

        r2 = newarray (byte)[4];

        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $r4 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getCodecPrivate(java.lang.String)>($r3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, 4);

        r104 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(r2);

        goto label72;

     label71:
        $r103 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Unrecognized codec identifier.", null);

        r156 = (java.lang.Throwable) $r103;

        throw r156;

     label72:
        $r113 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] dolbyVisionConfigBytes>;

        if $r113 == null goto label73;

        r150 = new androidx.media3.common.util.ParsableByteArray;

        $r32 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] dolbyVisionConfigBytes>;

        specialinvoke r150.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r32);

        r114 = staticinvoke <androidx.media3.extractor.DolbyVisionConfig: androidx.media3.extractor.DolbyVisionConfig parse(androidx.media3.common.util.ParsableByteArray)>(r150);

        if r114 == null goto label73;

        r105 = r114.<androidx.media3.extractor.DolbyVisionConfig: java.lang.String codecs>;

        r107 = "video/dolby-vision";

     label73:
        b44 = 0;

        $z48 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean flagDefault>;

        if $z48 == 0 goto label74;

        $b45 = 1;

        goto label75;

     label74:
        $b45 = 0;

     label75:
        b46 = b44 | $b45;

        $z1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean flagForced>;

        if $z1 == 0 goto label76;

        $b47 = 2;

        goto label77;

     label76:
        $b47 = 0;

     label77:
        b48 = b46 | $b47;

        r151 = new androidx.media3.common.Format$Builder;

        specialinvoke r151.<androidx.media3.common.Format$Builder: void <init>()>();

        r115 = r151;

        $z2 = staticinvoke <androidx.media3.common.MimeTypes: boolean isAudio(java.lang.String)>(r107);

        if $z2 == 0 goto label78;

        b49 = 1;

        $i22 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int channelCount>;

        $r28 = virtualinvoke r115.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>($i22);

        $i23 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int sampleRate>;

        $r29 = virtualinvoke $r28.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>($i23);

        virtualinvoke $r29.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setPcmEncoding(int)>(i42);

        goto label95;

     label78:
        $z3 = staticinvoke <androidx.media3.common.MimeTypes: boolean isVideo(java.lang.String)>(r107);

        if $z3 == 0 goto label92;

        b49 = 2;

        $i2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayUnit>;

        if $i2 != 0 goto label83;

        $i20 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayWidth>;

        if $i20 != -1 goto label79;

        $i50 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int width>;

        goto label80;

     label79:
        $i50 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayWidth>;

     label80:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayWidth> = $i50;

        $i21 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayHeight>;

        if $i21 != -1 goto label81;

        $i51 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int height>;

        goto label82;

     label81:
        $i51 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayHeight>;

     label82:
        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayHeight> = $i51;

     label83:
        f9 = -1.0F;

        $i52 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayWidth>;

        if $i52 == -1 goto label84;

        $i13 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayHeight>;

        if $i13 == -1 goto label84;

        $i15 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int height>;

        $i14 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayWidth>;

        $i16 = $i15 * $i14;

        $f8 = (float) $i16;

        $i18 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int width>;

        $i17 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int displayHeight>;

        $i19 = $i18 * $i17;

        $f7 = (float) $i19;

        f9 = $f8 / $f7;

     label84:
        r116 = null;

        $z49 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean hasColorInfo>;

        if $z49 == 0 goto label85;

        r117 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] getHdrStaticInfo()>();

        r152 = new androidx.media3.common.ColorInfo;

        $i12 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorSpace>;

        $i11 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorRange>;

        $i10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int colorTransfer>;

        specialinvoke r152.<androidx.media3.common.ColorInfo: void <init>(int,int,int,byte[])>($i12, $i11, $i10, r117);

        r116 = r152;

     label85:
        i53 = -1;

        $r17 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String name>;

        if $r17 == null goto label86;

        $r19 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: java.util.Map access$600()>();

        $r20 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String name>;

        $z11 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>($r20);

        if $z11 == 0 goto label86;

        $r21 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: java.util.Map access$600()>();

        $r22 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String name>;

        $r23 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22);

        $r24 = (java.lang.Integer) $r23;

        i53 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

     label86:
        $i54 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int projectionType>;

        if $i54 != 0 goto label91;

        $f0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPoseYaw>;

        $i3 = staticinvoke <java.lang.Float: int compare(float,float)>($f0, 0.0F);

        if $i3 != 0 goto label91;

        $f1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPosePitch>;

        $i4 = staticinvoke <java.lang.Float: int compare(float,float)>($f1, 0.0F);

        if $i4 != 0 goto label91;

        $f2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPoseRoll>;

        $i5 = staticinvoke <java.lang.Float: int compare(float,float)>($f2, 0.0F);

        if $i5 != 0 goto label87;

        i53 = 0;

        goto label91;

     label87:
        $f3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPosePitch>;

        $i6 = staticinvoke <java.lang.Float: int compare(float,float)>($f3, 90.0F);

        if $i6 != 0 goto label88;

        i53 = 90;

        goto label91;

     label88:
        $f4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPosePitch>;

        $i7 = staticinvoke <java.lang.Float: int compare(float,float)>($f4, -180.0F);

        if $i7 == 0 goto label89;

        $f5 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPosePitch>;

        $i8 = staticinvoke <java.lang.Float: int compare(float,float)>($f5, 180.0F);

        if $i8 != 0 goto label90;

     label89:
        i53 = 180;

        goto label91;

     label90:
        $f6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float projectionPosePitch>;

        $i9 = staticinvoke <java.lang.Float: int compare(float,float)>($f6, -90.0F);

        if $i9 != 0 goto label91;

        i53 = 270;

     label91:
        $i55 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int width>;

        $r118 = virtualinvoke r115.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>($i55);

        $i56 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int height>;

        $r119 = virtualinvoke $r118.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>($i56);

        $r120 = virtualinvoke $r119.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setPixelWidthHeightRatio(float)>(f9);

        $r121 = virtualinvoke $r120.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setRotationDegrees(int)>(i53);

        $r122 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] projectionData>;

        $r123 = virtualinvoke $r121.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setProjectionData(byte[])>($r122);

        $i57 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int stereoMode>;

        $r124 = virtualinvoke $r123.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setStereoMode(int)>($i57);

        virtualinvoke $r124.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setColorInfo(androidx.media3.common.ColorInfo)>(r116);

        goto label95;

     label92:
        $r6 = "application/x-subrip";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r107);

        if $z4 != 0 goto label93;

        $r11 = "text/x-ssa";

        $z6 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r107);

        if $z6 != 0 goto label93;

        $r12 = "text/vtt";

        $z7 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r107);

        if $z7 != 0 goto label93;

        $r13 = "application/vobsub";

        $z8 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r107);

        if $z8 != 0 goto label93;

        $r14 = "application/pgs";

        $z9 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r107);

        if $z9 != 0 goto label93;

        $r15 = "application/dvbsubs";

        $z10 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r107);

        if $z10 == 0 goto label94;

     label93:
        b49 = 3;

        goto label95;

     label94:
        $r16 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Unexpected MIME type.", null);

        r157 = (java.lang.Throwable) $r16;

        throw r157;

     label95:
        $r125 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String name>;

        if $r125 == null goto label96;

        $r7 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: java.util.Map access$600()>();

        $r8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String name>;

        $z5 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z5 != 0 goto label96;

        $r9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String name>;

        virtualinvoke r115.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setLabel(java.lang.String)>($r9);

     label96:
        $r126 = virtualinvoke r115.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setId(int)>(i0);

        $r127 = virtualinvoke $r126.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>(r107);

        $r128 = virtualinvoke $r127.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setMaxInputSize(int)>(s41);

        $r129 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String language>;

        $r130 = virtualinvoke $r128.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setLanguage(java.lang.String)>($r129);

        $r131 = virtualinvoke $r130.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSelectionFlags(int)>(b48);

        r158 = (java.util.List) r104;

        $r132 = virtualinvoke $r131.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setInitializationData(java.util.List)>(r158);

        $r133 = virtualinvoke $r132.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setCodecs(java.lang.String)>(r105);

        $r134 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.common.DrmInitData drmInitData>;

        $r135 = virtualinvoke $r133.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setDrmInitData(androidx.media3.common.DrmInitData)>($r134);

        r136 = virtualinvoke $r135.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $i58 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int number>;

        $r137 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>($i58, b49);

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output> = $r137;

        $r138 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output>;

        interfaceinvoke $r138.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>(r136);

        return;
    }

    public void outputPendingSampleMetadata()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        androidx.media3.extractor.TrueHdSampleRechunker $r1, $r4;
        androidx.media3.extractor.TrackOutput$CryptoData $r2;
        androidx.media3.extractor.TrackOutput $r3;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        if $r1 == null goto label1;

        $r4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output>;

        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>;

        virtualinvoke $r4.<androidx.media3.extractor.TrueHdSampleRechunker: void outputPendingSampleMetadata(androidx.media3.extractor.TrackOutput,androidx.media3.extractor.TrackOutput$CryptoData)>($r3, $r2);

     label1:
        return;
    }

    public void reset()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        androidx.media3.extractor.TrueHdSampleRechunker $r1, $r2;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrueHdSampleRechunker trueHdSampleRechunker>;

        virtualinvoke $r2.<androidx.media3.extractor.TrueHdSampleRechunker: void reset()>();

     label1:
        return;
    }

    private boolean samplesHaveSupplementalData(boolean)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        boolean z0, $z1, $z2;
        java.lang.String $r1, $r2;
        int $i0;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        z0 := @parameter0: boolean;

        $r2 = "A_OPUS";

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String codecId>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label1;

        return z0;

     label1:
        $i0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxBlockAdditionId>;

        if $i0 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private byte[] getHdrStaticInfo()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        byte[] r1;
        java.nio.ByteBuffer r2, $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;
        java.nio.ByteOrder $r4;
        int $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32;
        short $s11, $s13, $s15, $s17, $s19, $s21, $s23, $s25, $s27, $s29, $s31, $s33;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        $f0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityX>;

        $b0 = $f0 cmpl -1.0F;

        if $b0 == 0 goto label1;

        $f1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityY>;

        $b1 = $f1 cmpl -1.0F;

        if $b1 == 0 goto label1;

        $f2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityX>;

        $b2 = $f2 cmpl -1.0F;

        if $b2 == 0 goto label1;

        $f3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityY>;

        $b3 = $f3 cmpl -1.0F;

        if $b3 == 0 goto label1;

        $f4 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityX>;

        $b4 = $f4 cmpl -1.0F;

        if $b4 == 0 goto label1;

        $f5 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityY>;

        $b5 = $f5 cmpl -1.0F;

        if $b5 == 0 goto label1;

        $f6 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityX>;

        $b6 = $f6 cmpl -1.0F;

        if $b6 == 0 goto label1;

        $f7 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityY>;

        $b7 = $f7 cmpl -1.0F;

        if $b7 == 0 goto label1;

        $f8 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float maxMasteringLuminance>;

        $b8 = $f8 cmpl -1.0F;

        if $b8 == 0 goto label1;

        $f9 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float minMasteringLuminance>;

        $b9 = $f9 cmpl -1.0F;

        if $b9 != 0 goto label2;

     label1:
        return null;

     label2:
        r1 = newarray (byte)[25];

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r2 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(0);

        $f10 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityX>;

        $f11 = $f10 * 50000.0F;

        $f12 = $f11 + 0.5F;

        $i10 = (int) $f12;

        $s11 = (short) $i10;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s11);

        $f13 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryRChromaticityY>;

        $f14 = $f13 * 50000.0F;

        $f15 = $f14 + 0.5F;

        $i12 = (int) $f15;

        $s13 = (short) $i12;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s13);

        $f16 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityX>;

        $f17 = $f16 * 50000.0F;

        $f18 = $f17 + 0.5F;

        $i14 = (int) $f18;

        $s15 = (short) $i14;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s15);

        $f19 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryGChromaticityY>;

        $f20 = $f19 * 50000.0F;

        $f21 = $f20 + 0.5F;

        $i16 = (int) $f21;

        $s17 = (short) $i16;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s17);

        $f22 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityX>;

        $f23 = $f22 * 50000.0F;

        $f24 = $f23 + 0.5F;

        $i18 = (int) $f24;

        $s19 = (short) $i18;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s19);

        $f25 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float primaryBChromaticityY>;

        $f26 = $f25 * 50000.0F;

        $f27 = $f26 + 0.5F;

        $i20 = (int) $f27;

        $s21 = (short) $i20;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s21);

        $f28 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityX>;

        $f29 = $f28 * 50000.0F;

        $f30 = $f29 + 0.5F;

        $i22 = (int) $f30;

        $s23 = (short) $i22;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s23);

        $f31 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float whitePointChromaticityY>;

        $f32 = $f31 * 50000.0F;

        $f33 = $f32 + 0.5F;

        $i24 = (int) $f33;

        $s25 = (short) $i24;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s25);

        $f34 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float maxMasteringLuminance>;

        $f35 = $f34 + 0.5F;

        $i26 = (int) $f35;

        $s27 = (short) $i26;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s27);

        $f36 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: float minMasteringLuminance>;

        $f37 = $f36 + 0.5F;

        $i28 = (int) $f37;

        $s29 = (short) $i28;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s29);

        $i30 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxContentLuminance>;

        $s31 = (short) $i30;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s31);

        $i32 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int maxFrameAverageLuminance>;

        $s33 = (short) $i32;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s33);

        return r1;
    }

    private static android.util.Pair parseFourCcPrivate(androidx.media3.common.util.ParsableByteArray) throws androidx.media3.common.ParserException
    {
        androidx.media3.common.util.ParsableByteArray r0;
        int i0, $i4, $i5, $i6, $i8, $i10, $i12, $i14, i16;
        byte[] r1, r2;
        byte $b1, $b2, $b3, $b7, $b9, $b11, $b13;
        androidx.media3.common.ParserException $r4, $r10;
        java.util.List $r6;
        java.lang.Throwable $r9, r11, r16, r17;
        long l15;
        android.util.Pair r12, r13, r14, r15;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

     label01:
        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(16);

        l15 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readLittleEndianUnsignedInt()>();

        $b1 = l15 cmp 1482049860L;

        if $b1 != 0 goto label03;

        r12 = new android.util.Pair;

        specialinvoke r12.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("video/divx", null);

     label02:
        return r12;

     label03:
        $b2 = l15 cmp 859189832L;

        if $b2 != 0 goto label05;

        r13 = new android.util.Pair;

        specialinvoke r13.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("video/3gpp", null);

     label04:
        return r13;

     label05:
        $b3 = l15 cmp 826496599L;

        if $b3 != 0 goto label10;

        $i4 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int getPosition()>();

        i0 = $i4 + 20;

        r1 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        i16 = i0;

     label06:
        $i5 = lengthof r1;

        $i6 = $i5 - 4;

        if i16 >= $i6 goto label09;

        $b7 = r1[i16];

        if $b7 != 0 goto label08;

        $i8 = i16 + 1;

        $b9 = r1[$i8];

        if $b9 != 0 goto label08;

        $i10 = i16 + 2;

        $b11 = r1[$i10];

        if $b11 != 1 goto label08;

        $i12 = i16 + 3;

        $b13 = r1[$i12];

        if $b13 != 15 goto label08;

        $i14 = lengthof r1;

        r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, i16, $i14);

        r14 = new android.util.Pair;

        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r2);

        specialinvoke r14.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("video/wvc1", $r6);

     label07:
        return r14;

     label08:
        i16 = i16 + 1;

        goto label06;

     label09:
        $r4 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Failed to find FourCC VC1 initialization data", null);

        r16 = (java.lang.Throwable) $r4;

        throw r16;

     label10:
        goto label12;

     label11:
        $r9 := @caughtexception;

        r11 = $r9;

        $r10 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Error parsing FourCC private data", null);

        r17 = (java.lang.Throwable) $r10;

        throw r17;

     label12:
        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MatroskaExtractor", "Unknown FourCC. Setting mimeType to video/x-unknown");

        r15 = new android.util.Pair;

        specialinvoke r15.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("video/x-unknown", null);

        return r15;

        catch java.lang.ArrayIndexOutOfBoundsException from label01 to label02 with label11;
        catch java.lang.ArrayIndexOutOfBoundsException from label03 to label04 with label11;
        catch java.lang.ArrayIndexOutOfBoundsException from label05 to label07 with label11;
        catch java.lang.ArrayIndexOutOfBoundsException from label08 to label10 with label11;
    }

    private static java.util.List parseVorbisCodecPrivate(byte[]) throws androidx.media3.common.ParserException
    {
        byte[] r0, r1, r2;
        java.util.ArrayList r3, r12;
        byte $b0, $b1, $b3, $b5, $b7, $b9, $b10, $b11;
        short $s2, $s4, $s6, $s8;
        int $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23, i24;
        androidx.media3.common.ParserException $r5, $r6, $r7, $r8, $r10;
        java.lang.Throwable $r9, r11, r13, r14, r15, r16, r17;

        r0 := @parameter0: byte[];

     label01:
        $b0 = r0[0];

        if $b0 == 2 goto label02;

        $r8 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Error parsing vorbis codec private", null);

        r13 = (java.lang.Throwable) $r8;

        throw r13;

     label02:
        i16 = 1;

        i17 = 0;

     label03:
        $b1 = r0[i16];

        $s2 = $b1 & 255;

        if $s2 != 255 goto label04;

        i17 = i17 + 255;

        i16 = i16 + 1;

        goto label03;

     label04:
        i18 = i16 + 1;

        $b3 = r0[i16];

        $s4 = $b3 & 255;

        i19 = i17 + $s4;

        i20 = 0;

     label05:
        $b5 = r0[i18];

        $s6 = $b5 & 255;

        if $s6 != 255 goto label06;

        i20 = i20 + 255;

        i18 = i18 + 1;

        goto label05;

     label06:
        i21 = i18 + 1;

        $b7 = r0[i18];

        $s8 = $b7 & 255;

        i22 = i20 + $s8;

        $b9 = r0[i21];

        if $b9 == 1 goto label07;

        $r7 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Error parsing vorbis codec private", null);

        r14 = (java.lang.Throwable) $r7;

        throw r14;

     label07:
        r1 = newarray (byte)[i19];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i21, r1, 0, i19);

        i23 = i21 + i19;

        $b10 = r0[i23];

        if $b10 == 3 goto label08;

        $r6 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Error parsing vorbis codec private", null);

        r15 = (java.lang.Throwable) $r6;

        throw r15;

     label08:
        i24 = i23 + i22;

        $b11 = r0[i24];

        if $b11 == 5 goto label09;

        $r5 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Error parsing vorbis codec private", null);

        r16 = (java.lang.Throwable) $r5;

        throw r16;

     label09:
        $i12 = lengthof r0;

        $i13 = $i12 - i24;

        r2 = newarray (byte)[$i13];

        $i14 = lengthof r0;

        $i15 = $i14 - i24;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i24, r2, 0, $i15);

        r12 = new java.util.ArrayList;

        specialinvoke r12.<java.util.ArrayList: void <init>(int)>(2);

        r3 = r12;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label10:
        return r3;

     label11:
        $r9 := @caughtexception;

        r11 = $r9;

        $r10 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Error parsing vorbis codec private", null);

        r17 = (java.lang.Throwable) $r10;

        throw r17;

        catch java.lang.ArrayIndexOutOfBoundsException from label01 to label10 with label11;
    }

    private static boolean parseMsAcmCodecPrivate(androidx.media3.common.util.ParsableByteArray) throws androidx.media3.common.ParserException
    {
        androidx.media3.common.util.ParsableByteArray r0;
        long $l0, $l1, $l3, $l4;
        java.util.UUID $r1, $r2;
        byte $b2, $b5;
        java.lang.Throwable $r3, r5, r6;
        androidx.media3.common.ParserException $r4;
        int i6;
        boolean $z0;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

     label1:
        i6 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readLittleEndianUnsignedShort()>();

        if i6 != 1 goto label3;

     label2:
        return 1;

     label3:
        if i6 != 65534 goto label6;

        virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(24);

        $l0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readLong()>();

        $r1 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: java.util.UUID access$700()>();

        $l1 = virtualinvoke $r1.<java.util.UUID: long getMostSignificantBits()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label4;

        $l3 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readLong()>();

        $r2 = staticinvoke <androidx.media3.extractor.mkv.MatroskaExtractor: java.util.UUID access$700()>();

        $l4 = virtualinvoke $r2.<java.util.UUID: long getLeastSignificantBits()>();

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;

     label6:
        return 0;

     label7:
        $r3 := @caughtexception;

        r5 = $r3;

        $r4 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>("Error parsing MS/ACM codec private", null);

        r6 = (java.lang.Throwable) $r4;

        throw r6;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label7;
        catch java.lang.ArrayIndexOutOfBoundsException from label3 to label5 with label7;
    }

    private void assertOutputInitialized()
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        androidx.media3.extractor.TrackOutput $r1;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        $r1 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: androidx.media3.extractor.TrackOutput output>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        return;
    }

    private byte[] getCodecPrivate(java.lang.String) throws androidx.media3.common.ParserException
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        java.lang.String r1, $r7;
        byte[] $r2, $r3;
        java.lang.StringBuilder $r5, $r6, r9;
        androidx.media3.common.ParserException $r8;
        java.lang.Throwable r10;

        r0 := @this: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] codecPrivate>;

        if $r2 != null goto label1;

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing CodecPrivate for codec ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r7, null);

        r10 = (java.lang.Throwable) $r8;

        throw r10;

     label1:
        $r3 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: byte[] codecPrivate>;

        return $r3;
    }

    static void access$100(androidx.media3.extractor.mkv.MatroskaExtractor$Track)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;

        r0 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: void assertOutputInitialized()>();

        return;
    }

    static int access$202(androidx.media3.extractor.mkv.MatroskaExtractor$Track, int)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        int i0;

        r0 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        i0 := @parameter1: int;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int blockAddIdType> = i0;

        return i0;
    }

    static java.lang.String access$302(androidx.media3.extractor.mkv.MatroskaExtractor$Track, java.lang.String)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        java.lang.String r1;

        r0 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        r1 := @parameter1: java.lang.String;

        r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: java.lang.String language> = r1;

        return r1;
    }

    static int access$200(androidx.media3.extractor.mkv.MatroskaExtractor$Track)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        int $i0;

        r0 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        $i0 = r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: int blockAddIdType>;

        return $i0;
    }

    static boolean access$400(androidx.media3.extractor.mkv.MatroskaExtractor$Track, boolean)
    {
        androidx.media3.extractor.mkv.MatroskaExtractor$Track r0;
        boolean z0, $z1;

        r0 := @parameter0: androidx.media3.extractor.mkv.MatroskaExtractor$Track;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<androidx.media3.extractor.mkv.MatroskaExtractor$Track: boolean samplesHaveSupplementalData(boolean)>(z0);

        return $z1;
    }

