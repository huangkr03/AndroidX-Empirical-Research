androidx.media3.exoplayer.hls.WebvttExtractor
<androidx.media3.exoplayer.hls.WebvttExtractor: java.util.regex.Pattern LOCAL_TIMESTAMP>
<androidx.media3.exoplayer.hls.WebvttExtractor: java.util.regex.Pattern MEDIA_TIMESTAMP>
<androidx.media3.exoplayer.hls.WebvttExtractor: int HEADER_MIN_LENGTH>
<androidx.media3.exoplayer.hls.WebvttExtractor: int HEADER_MAX_LENGTH>
<androidx.media3.exoplayer.hls.WebvttExtractor: java.lang.String language>
<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster>
<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.ParsableByteArray sampleDataWrapper>
<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.extractor.ExtractorOutput output>
<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>
<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize>
    public void <init>(java.lang.String, androidx.media3.common.util.TimestampAdjuster)
    {
        androidx.media3.exoplayer.hls.WebvttExtractor r0;
        java.lang.String r1;
        androidx.media3.common.util.TimestampAdjuster r2;
        androidx.media3.common.util.ParsableByteArray $r3;
        byte[] $r4;

        r0 := @this: androidx.media3.exoplayer.hls.WebvttExtractor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.media3.common.util.TimestampAdjuster;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.hls.WebvttExtractor: java.lang.String language> = r1;

        r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster> = r2;

        $r3 = new androidx.media3.common.util.ParsableByteArray;

        specialinvoke $r3.<androidx.media3.common.util.ParsableByteArray: void <init>()>();

        r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.ParsableByteArray sampleDataWrapper> = $r3;

        $r4 = newarray (byte)[1024];

        r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData> = $r4;

        return;
    }

    public boolean sniff(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.exoplayer.hls.WebvttExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        byte[] $r2, $r3, $r6, $r7;
        androidx.media3.common.util.ParsableByteArray $r4, $r5, $r8, $r9;
        boolean $z1, $z3;

        r0 := @this: androidx.media3.exoplayer.hls.WebvttExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $r2 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: boolean peekFully(byte[],int,int,boolean)>($r2, 0, 6, 0);

        $r4 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.ParsableByteArray sampleDataWrapper>;

        $r3 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        virtualinvoke $r4.<androidx.media3.common.util.ParsableByteArray: void reset(byte[],int)>($r3, 6);

        $r5 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.ParsableByteArray sampleDataWrapper>;

        $z1 = staticinvoke <androidx.media3.extractor.text.webvtt.WebvttParserUtil: boolean isWebvttHeaderLine(androidx.media3.common.util.ParsableByteArray)>($r5);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r6 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: boolean peekFully(byte[],int,int,boolean)>($r6, 6, 3, 0);

        $r8 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.ParsableByteArray sampleDataWrapper>;

        $r7 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        virtualinvoke $r8.<androidx.media3.common.util.ParsableByteArray: void reset(byte[],int)>($r7, 9);

        $r9 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.ParsableByteArray sampleDataWrapper>;

        $z3 = staticinvoke <androidx.media3.extractor.text.webvtt.WebvttParserUtil: boolean isWebvttHeaderLine(androidx.media3.common.util.ParsableByteArray)>($r9);

        return $z3;
    }

    public void init(androidx.media3.extractor.ExtractorOutput)
    {
        androidx.media3.exoplayer.hls.WebvttExtractor r0;
        androidx.media3.extractor.ExtractorOutput r1;
        androidx.media3.extractor.SeekMap$Unseekable $r2;

        r0 := @this: androidx.media3.exoplayer.hls.WebvttExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorOutput;

        r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.extractor.ExtractorOutput output> = r1;

        $r2 = new androidx.media3.extractor.SeekMap$Unseekable;

        specialinvoke $r2.<androidx.media3.extractor.SeekMap$Unseekable: void <init>(long)>(-9223372036854775807L);

        interfaceinvoke r1.<androidx.media3.extractor.ExtractorOutput: void seekMap(androidx.media3.extractor.SeekMap)>($r2);

        return;
    }

    public void seek(long, long)
    {
        androidx.media3.exoplayer.hls.WebvttExtractor r0;
        long l0, l1;
        java.lang.IllegalStateException $r1;

        r0 := @this: androidx.media3.exoplayer.hls.WebvttExtractor;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    public void release()
    {
        androidx.media3.exoplayer.hls.WebvttExtractor r0;

        r0 := @this: androidx.media3.exoplayer.hls.WebvttExtractor;

        return;
    }

    public int read(androidx.media3.extractor.ExtractorInput, androidx.media3.extractor.PositionHolder) throws java.io.IOException
    {
        androidx.media3.exoplayer.hls.WebvttExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.extractor.PositionHolder r2;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        androidx.media3.extractor.ExtractorOutput $r3;
        long $l2;
        byte[] $r5, $r6, $r7, $r8, $r10, $r11;

        r0 := @this: androidx.media3.exoplayer.hls.WebvttExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        r2 := @parameter1: androidx.media3.extractor.PositionHolder;

        $r3 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.extractor.ExtractorOutput output>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $l2 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getLength()>();

        i0 = (int) $l2;

        $i4 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize>;

        $r5 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        $i3 = lengthof $r5;

        if $i4 != $i3 goto label3;

        $r7 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        if i0 == -1 goto label1;

        $i10 = i0;

        goto label2;

     label1:
        $r6 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        $i10 = lengthof $r6;

     label2:
        $i8 = $i10 * 3;

        $i9 = $i8 / 2;

        $r8 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r7, $i9);

        r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData> = $r8;

     label3:
        $r10 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        $i11 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize>;

        $r11 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        $i12 = lengthof $r11;

        $i13 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize>;

        $i14 = $i12 - $i13;

        i1 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: int read(byte[],int,int)>($r10, $i11, $i14);

        if i1 == -1 goto label5;

        $i5 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize>;

        $i6 = $i5 + i1;

        r0.<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize> = $i6;

        if i0 == -1 goto label4;

        $i7 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize>;

        if $i7 == i0 goto label5;

     label4:
        return 0;

     label5:
        specialinvoke r0.<androidx.media3.exoplayer.hls.WebvttExtractor: void processSample()>();

        return -1;
    }

    private void processSample() throws androidx.media3.common.ParserException
    {
        androidx.media3.exoplayer.hls.WebvttExtractor r0;
        androidx.media3.common.util.ParsableByteArray r1, $r4, $r11, $r12;
        java.util.regex.Matcher r2, r33, r34;
        long l0, l1, $l2, $l3, $l4, $l8, l9, l10, l11;
        androidx.media3.extractor.TrackOutput r3;
        byte[] $r5, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r6, $r8, $r16, $r18, $r19, $r21, $r25, $r30, r32;
        java.lang.Object $r7, $r17, $r20;
        androidx.media3.common.util.TimestampAdjuster $r9;
        int $i5, $i6, $i7;
        java.util.regex.Pattern $r14, $r15;
        java.lang.StringBuilder $r22, $r23, $r24, $r27, $r28, $r29;
        androidx.media3.common.ParserException $r26, $r31;

        r0 := @this: androidx.media3.exoplayer.hls.WebvttExtractor;

        $r4 = new androidx.media3.common.util.ParsableByteArray;

        $r5 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        specialinvoke $r4.<androidx.media3.common.util.ParsableByteArray: void <init>(byte[])>($r5);

        r1 = $r4;

        staticinvoke <androidx.media3.extractor.text.webvtt.WebvttParserUtil: void validateWebvttHeaderLine(androidx.media3.common.util.ParsableByteArray)>(r1);

        l9 = 0L;

        l10 = 0L;

        r32 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: java.lang.String readLine()>();

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r32);

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r32.<java.lang.String: boolean startsWith(java.lang.String)>("X-TIMESTAMP-MAP");

        if $z1 == 0 goto label4;

        $r14 = <androidx.media3.exoplayer.hls.WebvttExtractor: java.util.regex.Pattern LOCAL_TIMESTAMP>;

        r33 = virtualinvoke $r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r32);

        $z2 = virtualinvoke r33.<java.util.regex.Matcher: boolean find()>();

        if $z2 != 0 goto label2;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X-TIMESTAMP-MAP doesn\'t contain local timestamp: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r30, null);

        throw $r31;

     label2:
        $r15 = <androidx.media3.exoplayer.hls.WebvttExtractor: java.util.regex.Pattern MEDIA_TIMESTAMP>;

        r2 = virtualinvoke $r15.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r32);

        $z3 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z3 != 0 goto label3;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("X-TIMESTAMP-MAP doesn\'t contain media timestamp: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = staticinvoke <androidx.media3.common.ParserException: androidx.media3.common.ParserException createForMalformedContainer(java.lang.String,java.lang.Throwable)>($r25, null);

        throw $r26;

     label3:
        $r16 = virtualinvoke r33.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r17 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r16);

        $r18 = (java.lang.String) $r17;

        l9 = staticinvoke <androidx.media3.extractor.text.webvtt.WebvttParserUtil: long parseTimestampUs(java.lang.String)>($r18);

        $r19 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r20 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r19);

        $r21 = (java.lang.String) $r20;

        $l8 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21);

        l10 = staticinvoke <androidx.media3.common.util.TimestampAdjuster: long ptsToUs(long)>($l8);

     label4:
        r32 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: java.lang.String readLine()>();

        goto label1;

     label5:
        r34 = staticinvoke <androidx.media3.extractor.text.webvtt.WebvttParserUtil: java.util.regex.Matcher findNextCueHeader(androidx.media3.common.util.ParsableByteArray)>(r1);

        if r34 != null goto label6;

        specialinvoke r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.extractor.TrackOutput buildTrackOutput(long)>(0L);

        return;

     label6:
        $r6 = virtualinvoke r34.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r7 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        $r8 = (java.lang.String) $r7;

        l11 = staticinvoke <androidx.media3.extractor.text.webvtt.WebvttParserUtil: long parseTimestampUs(java.lang.String)>($r8);

        $r9 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.TimestampAdjuster timestampAdjuster>;

        $l2 = l11 + l10;

        $l3 = $l2 - l9;

        $l4 = staticinvoke <androidx.media3.common.util.TimestampAdjuster: long usToWrappedPts(long)>($l3);

        l0 = virtualinvoke $r9.<androidx.media3.common.util.TimestampAdjuster: long adjustTsTimestamp(long)>($l4);

        l1 = l0 - l11;

        r3 = specialinvoke r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.extractor.TrackOutput buildTrackOutput(long)>(l1);

        $r11 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.ParsableByteArray sampleDataWrapper>;

        $r10 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: byte[] sampleData>;

        $i5 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize>;

        virtualinvoke $r11.<androidx.media3.common.util.ParsableByteArray: void reset(byte[],int)>($r10, $i5);

        $r12 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.common.util.ParsableByteArray sampleDataWrapper>;

        $i6 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize>;

        interfaceinvoke r3.<androidx.media3.extractor.TrackOutput: void sampleData(androidx.media3.common.util.ParsableByteArray,int)>($r12, $i6);

        $i7 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: int sampleSize>;

        interfaceinvoke r3.<androidx.media3.extractor.TrackOutput: void sampleMetadata(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l0, 1, $i7, 0, null);

        return;
    }

    private androidx.media3.extractor.TrackOutput buildTrackOutput(long)
    {
        androidx.media3.exoplayer.hls.WebvttExtractor r0;
        long l0;
        androidx.media3.extractor.TrackOutput r1;
        androidx.media3.extractor.ExtractorOutput $r2, $r9;
        androidx.media3.common.Format$Builder $r3, $r4, $r6, $r7;
        java.lang.String $r5;
        androidx.media3.common.Format $r8;

        r0 := @this: androidx.media3.exoplayer.hls.WebvttExtractor;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.extractor.ExtractorOutput output>;

        r1 = interfaceinvoke $r2.<androidx.media3.extractor.ExtractorOutput: androidx.media3.extractor.TrackOutput track(int,int)>(0, 3);

        $r3 = new androidx.media3.common.Format$Builder;

        specialinvoke $r3.<androidx.media3.common.Format$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>("text/vtt");

        $r5 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: java.lang.String language>;

        $r6 = virtualinvoke $r4.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setLanguage(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSubsampleOffsetUs(long)>(l0);

        $r8 = virtualinvoke $r7.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        interfaceinvoke r1.<androidx.media3.extractor.TrackOutput: void format(androidx.media3.common.Format)>($r8);

        $r9 = r0.<androidx.media3.exoplayer.hls.WebvttExtractor: androidx.media3.extractor.ExtractorOutput output>;

        interfaceinvoke $r9.<androidx.media3.extractor.ExtractorOutput: void endTracks()>();

        return r1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("LOCAL:([^,]+)");

        <androidx.media3.exoplayer.hls.WebvttExtractor: java.util.regex.Pattern LOCAL_TIMESTAMP> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("MPEGTS:(-?\\d+)");

        <androidx.media3.exoplayer.hls.WebvttExtractor: java.util.regex.Pattern MEDIA_TIMESTAMP> = $r1;

        return;
    }

