androidx.webkit.internal.ServiceWorkerControllerImpl
<androidx.webkit.internal.ServiceWorkerControllerImpl: android.webkit.ServiceWorkerController mFrameworksImpl>
<androidx.webkit.internal.ServiceWorkerControllerImpl: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface mBoundaryInterface>
<androidx.webkit.internal.ServiceWorkerControllerImpl: androidx.webkit.ServiceWorkerWebSettingsCompat mWebSettings>
    public void <init>()
    {
        androidx.webkit.internal.ServiceWorkerControllerImpl r0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        androidx.webkit.internal.WebViewProviderFactory $r3;
        org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface $r4, $r6;
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl $r5, $r9;
        java.lang.reflect.InvocationHandler $r7;
        android.webkit.ServiceWorkerController $r8, $r10;
        android.webkit.ServiceWorkerWebSettings $r11;

        r0 := @this: androidx.webkit.internal.ServiceWorkerControllerImpl;

        specialinvoke r0.<androidx.webkit.ServiceWorkerControllerCompat: void <init>()>();

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_BASIC_USAGE>;

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <android.webkit.ServiceWorkerController: android.webkit.ServiceWorkerController getInstance()>();

        r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: android.webkit.ServiceWorkerController mFrameworksImpl> = $r8;

        r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface mBoundaryInterface> = null;

        $r9 = new androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        $r10 = r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: android.webkit.ServiceWorkerController mFrameworksImpl>;

        $r11 = virtualinvoke $r10.<android.webkit.ServiceWorkerController: android.webkit.ServiceWorkerWebSettings getServiceWorkerWebSettings()>();

        specialinvoke $r9.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: void <init>(android.webkit.ServiceWorkerWebSettings)>($r11);

        r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: androidx.webkit.ServiceWorkerWebSettingsCompat mWebSettings> = $r9;

        goto label3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: android.webkit.ServiceWorkerController mFrameworksImpl> = null;

        $r3 = staticinvoke <androidx.webkit.internal.WebViewGlueCommunicator: androidx.webkit.internal.WebViewProviderFactory getFactory()>();

        $r4 = interfaceinvoke $r3.<androidx.webkit.internal.WebViewProviderFactory: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface getServiceWorkerController()>();

        r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface mBoundaryInterface> = $r4;

        $r5 = new androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        $r6 = r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface mBoundaryInterface>;

        $r7 = interfaceinvoke $r6.<org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface: java.lang.reflect.InvocationHandler getServiceWorkerWebSettings()>();

        specialinvoke $r5.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: void <init>(java.lang.reflect.InvocationHandler)>($r7);

        r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: androidx.webkit.ServiceWorkerWebSettingsCompat mWebSettings> = $r5;

        goto label3;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;

     label3:
        return;
    }

    private android.webkit.ServiceWorkerController getFrameworksImpl()
    {
        androidx.webkit.internal.ServiceWorkerControllerImpl r0;
        android.webkit.ServiceWorkerController $r1, $r2, $r3;

        r0 := @this: androidx.webkit.internal.ServiceWorkerControllerImpl;

        $r1 = r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: android.webkit.ServiceWorkerController mFrameworksImpl>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.webkit.ServiceWorkerController: android.webkit.ServiceWorkerController getInstance()>();

        r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: android.webkit.ServiceWorkerController mFrameworksImpl> = $r3;

     label1:
        $r2 = r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: android.webkit.ServiceWorkerController mFrameworksImpl>;

        return $r2;
    }

    private org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface getBoundaryInterface()
    {
        androidx.webkit.internal.ServiceWorkerControllerImpl r0;
        org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface $r1, $r2, $r4;
        androidx.webkit.internal.WebViewProviderFactory $r3;

        r0 := @this: androidx.webkit.internal.ServiceWorkerControllerImpl;

        $r1 = r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface mBoundaryInterface>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <androidx.webkit.internal.WebViewGlueCommunicator: androidx.webkit.internal.WebViewProviderFactory getFactory()>();

        $r4 = interfaceinvoke $r3.<androidx.webkit.internal.WebViewProviderFactory: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface getServiceWorkerController()>();

        r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface mBoundaryInterface> = $r4;

     label1:
        $r2 = r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface mBoundaryInterface>;

        return $r2;
    }

    public androidx.webkit.ServiceWorkerWebSettingsCompat getServiceWorkerWebSettings()
    {
        androidx.webkit.internal.ServiceWorkerControllerImpl r0;
        androidx.webkit.ServiceWorkerWebSettingsCompat $r1;

        r0 := @this: androidx.webkit.internal.ServiceWorkerControllerImpl;

        $r1 = r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: androidx.webkit.ServiceWorkerWebSettingsCompat mWebSettings>;

        return $r1;
    }

    public void setServiceWorkerClient(androidx.webkit.ServiceWorkerClientCompat)
    {
        androidx.webkit.internal.ServiceWorkerControllerImpl r0;
        androidx.webkit.ServiceWorkerClientCompat r1;
        androidx.webkit.internal.WebViewFeatureInternal r2;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r3;
        org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface $r4;
        androidx.webkit.internal.ServiceWorkerClientAdapter $r5;
        java.lang.reflect.InvocationHandler $r6;
        android.webkit.ServiceWorkerController $r7;
        androidx.webkit.internal.FrameworkServiceWorkerClient $r8;

        r0 := @this: androidx.webkit.internal.ServiceWorkerControllerImpl;

        r1 := @parameter0: androidx.webkit.ServiceWorkerClientCompat;

        r2 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_BASIC_USAGE>;

        $z0 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r7 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: android.webkit.ServiceWorkerController getFrameworksImpl()>();

        $r8 = new androidx.webkit.internal.FrameworkServiceWorkerClient;

        specialinvoke $r8.<androidx.webkit.internal.FrameworkServiceWorkerClient: void <init>(androidx.webkit.ServiceWorkerClientCompat)>(r1);

        virtualinvoke $r7.<android.webkit.ServiceWorkerController: void setServiceWorkerClient(android.webkit.ServiceWorkerClient)>($r8);

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r4 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerControllerImpl: org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface getBoundaryInterface()>();

        $r5 = new androidx.webkit.internal.ServiceWorkerClientAdapter;

        specialinvoke $r5.<androidx.webkit.internal.ServiceWorkerClientAdapter: void <init>(androidx.webkit.ServiceWorkerClientCompat)>(r1);

        $r6 = staticinvoke <org.chromium.support_lib_boundary.util.BoundaryInterfaceReflectionUtil: java.lang.reflect.InvocationHandler createInvocationHandlerFor(java.lang.Object)>($r5);

        interfaceinvoke $r4.<org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface: void setServiceWorkerClient(java.lang.reflect.InvocationHandler)>($r6);

        goto label3;

     label2:
        $r3 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r3;

     label3:
        return;
    }

