androidx.media3.test.utils.FakeAdaptiveMediaSource
<androidx.media3.test.utils.FakeAdaptiveMediaSource: androidx.media3.test.utils.FakeChunkSource$Factory chunkSourceFactory>
    public void <init>(androidx.media3.common.Timeline, androidx.media3.exoplayer.source.TrackGroupArray, androidx.media3.test.utils.FakeChunkSource$Factory)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaSource r0;
        androidx.media3.common.Timeline r1;
        androidx.media3.exoplayer.source.TrackGroupArray r2;
        androidx.media3.test.utils.FakeChunkSource$Factory r3;
        androidx.media3.exoplayer.drm.DrmSessionManager $r4;
        androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory $r5;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaSource;

        r1 := @parameter0: androidx.media3.common.Timeline;

        r2 := @parameter1: androidx.media3.exoplayer.source.TrackGroupArray;

        r3 := @parameter2: androidx.media3.test.utils.FakeChunkSource$Factory;

        $r4 = <androidx.media3.exoplayer.drm.DrmSessionManager: androidx.media3.exoplayer.drm.DrmSessionManager DRM_UNSUPPORTED>;

        $r5 = dynamicinvoke "create" <androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.util.List __METHODTYPE__(androidx.media3.common.Format,androidx.media3.exoplayer.source.MediaSource$MediaPeriodId), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.FakeAdaptiveMediaSource: java.util.List lambda$new$0(androidx.media3.common.Format,androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)>, methodtype: java.util.List __METHODTYPE__(androidx.media3.common.Format,androidx.media3.exoplayer.source.MediaSource$MediaPeriodId));

        specialinvoke r0.<androidx.media3.test.utils.FakeMediaSource: void <init>(androidx.media3.common.Timeline,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.test.utils.FakeMediaPeriod$TrackDataFactory,androidx.media3.exoplayer.source.TrackGroupArray)>(r1, $r4, $r5, r2);

        r0.<androidx.media3.test.utils.FakeAdaptiveMediaSource: androidx.media3.test.utils.FakeChunkSource$Factory chunkSourceFactory> = r3;

        return;
    }

    protected androidx.media3.exoplayer.source.MediaPeriod createMediaPeriod(androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, androidx.media3.exoplayer.source.TrackGroupArray, androidx.media3.exoplayer.upstream.Allocator, androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher, androidx.media3.datasource.TransferListener)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaSource r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.source.TrackGroupArray r2;
        androidx.media3.exoplayer.upstream.Allocator r3;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher r4;
        androidx.media3.exoplayer.drm.DrmSessionManager r5;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r6;
        androidx.media3.datasource.TransferListener r7;
        androidx.media3.common.Timeline$Period r8, $r11;
        androidx.media3.common.Timeline $r9, $r12;
        java.lang.Object $r10, $r13;
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod $r14;
        long $l0;
        androidx.media3.test.utils.FakeChunkSource$Factory $r15;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaSource;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter1: androidx.media3.exoplayer.source.TrackGroupArray;

        r3 := @parameter2: androidx.media3.exoplayer.upstream.Allocator;

        r4 := @parameter3: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher;

        r5 := @parameter4: androidx.media3.exoplayer.drm.DrmSessionManager;

        r6 := @parameter5: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        r7 := @parameter6: androidx.media3.datasource.TransferListener;

        $r9 = virtualinvoke r0.<androidx.media3.test.utils.FakeAdaptiveMediaSource: androidx.media3.common.Timeline getTimeline()>();

        $r10 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r9);

        $r12 = (androidx.media3.common.Timeline) $r10;

        $r13 = r1.<androidx.media3.exoplayer.source.MediaSource$MediaPeriodId: java.lang.Object periodUid>;

        $r11 = new androidx.media3.common.Timeline$Period;

        specialinvoke $r11.<androidx.media3.common.Timeline$Period: void <init>()>();

        r8 = virtualinvoke $r12.<androidx.media3.common.Timeline: androidx.media3.common.Timeline$Period getPeriodByUid(java.lang.Object,androidx.media3.common.Timeline$Period)>($r13, $r11);

        $r14 = new androidx.media3.test.utils.FakeAdaptiveMediaPeriod;

        $r15 = r0.<androidx.media3.test.utils.FakeAdaptiveMediaSource: androidx.media3.test.utils.FakeChunkSource$Factory chunkSourceFactory>;

        $l0 = r8.<androidx.media3.common.Timeline$Period: long durationUs>;

        specialinvoke $r14.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: void <init>(androidx.media3.exoplayer.source.TrackGroupArray,androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher,androidx.media3.exoplayer.upstream.Allocator,androidx.media3.test.utils.FakeChunkSource$Factory,long,androidx.media3.datasource.TransferListener)>(r2, r4, r3, $r15, $l0, r7);

        return $r14;
    }

    public void releaseMediaPeriod(androidx.media3.exoplayer.source.MediaPeriod)
    {
        androidx.media3.test.utils.FakeAdaptiveMediaSource r0;
        androidx.media3.exoplayer.source.MediaPeriod r1;
        androidx.media3.test.utils.FakeAdaptiveMediaPeriod $r2;

        r0 := @this: androidx.media3.test.utils.FakeAdaptiveMediaSource;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod;

        $r2 = (androidx.media3.test.utils.FakeAdaptiveMediaPeriod) r1;

        virtualinvoke $r2.<androidx.media3.test.utils.FakeAdaptiveMediaPeriod: void release()>();

        return;
    }

    private static java.util.List lambda$new$0(androidx.media3.common.Format, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)
    {
        androidx.media3.common.Format r0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        java.lang.RuntimeException $r2;

        r0 := @parameter0: androidx.media3.common.Format;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unused TrackDataFactory");

        throw $r2;
    }

