kotlin.reflect.WildcardTypeImpl
<kotlin.reflect.WildcardTypeImpl: kotlin.reflect.WildcardTypeImpl$Companion Companion>
<kotlin.reflect.WildcardTypeImpl: kotlin.reflect.WildcardTypeImpl STAR>
<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type lowerBound>
<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type upperBound>
    static void <clinit>()
    {
        kotlin.reflect.WildcardTypeImpl$Companion $r0;
        kotlin.reflect.WildcardTypeImpl $r1;

        $r0 = new kotlin.reflect.WildcardTypeImpl$Companion;

        specialinvoke $r0.<kotlin.reflect.WildcardTypeImpl$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <kotlin.reflect.WildcardTypeImpl: kotlin.reflect.WildcardTypeImpl$Companion Companion> = $r0;

        $r1 = new kotlin.reflect.WildcardTypeImpl;

        specialinvoke $r1.<kotlin.reflect.WildcardTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type)>(null, null);

        <kotlin.reflect.WildcardTypeImpl: kotlin.reflect.WildcardTypeImpl STAR> = $r1;

        return;
    }

    public void <init>(java.lang.reflect.Type, java.lang.reflect.Type)
    {
        kotlin.reflect.WildcardTypeImpl $r0;
        java.lang.reflect.Type $r1, $r2;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r2 := @parameter1: java.lang.reflect.Type;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type upperBound> = $r1;

        $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type lowerBound> = $r2;

        return;
    }

    public static final kotlin.reflect.WildcardTypeImpl access$getSTAR$cp()
    {
        kotlin.reflect.WildcardTypeImpl r0;

        r0 = <kotlin.reflect.WildcardTypeImpl: kotlin.reflect.WildcardTypeImpl STAR>;

        return r0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.reflect.WildcardTypeImpl $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.reflect.Type[] $r2, $r4;
        java.lang.reflect.WildcardType $r3;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.reflect.WildcardType;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>();

        $r3 = (java.lang.reflect.WildcardType) $r1;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r2, $r4);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>();

        $r3 = (java.lang.reflect.WildcardType) $r1;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r2, $r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.reflect.Type[] getLowerBounds()
    {
        kotlin.reflect.WildcardTypeImpl $r0;
        java.lang.reflect.Type $r1;
        java.lang.reflect.Type[] $r2;
        java.lang.Object[] $r3;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl;

        $r1 = $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type lowerBound>;

        if $r1 != null goto label1;

        $r2 = newarray (java.lang.reflect.Type)[0];

        $r3 = (java.lang.Object[]) $r2;

        $r2 = (java.lang.reflect.Type[]) $r3;

        return $r2;

     label1:
        $r2 = newarray (java.lang.reflect.Type)[1];

        $r2[0] = $r1;

        return $r2;
    }

    public java.lang.String getTypeName()
    {
        kotlin.reflect.WildcardTypeImpl $r0;
        java.lang.reflect.Type $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        boolean $z0;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl;

        $r1 = $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type lowerBound>;

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("? super ");

        $r1 = $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type lowerBound>;

        $r3 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.String access$typeToString(java.lang.reflect.Type)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        $r1 = $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type upperBound>;

        if $r1 == null goto label2;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, class "Ljava/lang/Object;");

        if $z0 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("? extends ");

        $r1 = $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type upperBound>;

        $r3 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.String access$typeToString(java.lang.reflect.Type)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label2:
        return "?";
    }

    public java.lang.reflect.Type[] getUpperBounds()
    {
        kotlin.reflect.WildcardTypeImpl $r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        java.lang.reflect.Type[] r3;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl;

        $r1 = newarray (java.lang.reflect.Type)[1];

        $r2 = $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type upperBound>;

        if $r2 != null goto label1;

        $r2 = class "Ljava/lang/Object;";

     label1:
        $r1[0] = $r2;

        r3 = (java.lang.reflect.Type[]) $r1;

        return r3;
    }

    public int hashCode()
    {
        kotlin.reflect.WildcardTypeImpl $r0;
        java.lang.reflect.Type[] $r1;
        int $i0, $i1;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl;

        $r1 = virtualinvoke $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()>();

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $r1 = virtualinvoke $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()>();

        $i1 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    public java.lang.String toString()
    {
        kotlin.reflect.WildcardTypeImpl $r0;
        java.lang.String $r1;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl;

        $r1 = virtualinvoke $r0.<kotlin.reflect.WildcardTypeImpl: java.lang.String getTypeName()>();

        return $r1;
    }

kotlin.reflect.WildcardTypeImpl$Companion
    private void <init>()
    {
        kotlin.reflect.WildcardTypeImpl$Companion $r0;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        kotlin.reflect.WildcardTypeImpl$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<kotlin.reflect.WildcardTypeImpl$Companion: void <init>()>();

        return;
    }

    public final kotlin.reflect.WildcardTypeImpl getSTAR()
    {
        kotlin.reflect.WildcardTypeImpl$Companion $r0;
        kotlin.reflect.WildcardTypeImpl $r1;

        $r0 := @this: kotlin.reflect.WildcardTypeImpl$Companion;

        $r1 = staticinvoke <kotlin.reflect.WildcardTypeImpl: kotlin.reflect.WildcardTypeImpl access$getSTAR$cp()>();

        return $r1;
    }

