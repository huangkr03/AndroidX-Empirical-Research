androidx.compose.material.ripple.AndroidRippleIndicationInstance
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: boolean bounded>
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: float radius>
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.State color>
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.State rippleAlpha>
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.material.ripple.RippleContainer rippleContainer>
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.MutableState rippleHostView$delegate>
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.MutableState invalidateTick$delegate>
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: long rippleSize>
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: int rippleRadius>
<androidx.compose.material.ripple.AndroidRippleIndicationInstance: kotlin.jvm.functions.Function0 onInvalidateRipple>
    private void <init>(boolean, float, androidx.compose.runtime.State, androidx.compose.runtime.State, androidx.compose.material.ripple.RippleContainer)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;
        boolean z0;
        float f0;
        androidx.compose.runtime.State r1, r2;
        androidx.compose.material.ripple.RippleContainer r3;
        androidx.compose.runtime.MutableState $r4, $r6;
        java.lang.Boolean $r5;
        androidx.compose.ui.geometry.Size$Companion $r7;
        long $l0;
        androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1 $r8;
        kotlin.jvm.functions.Function0 $r9;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        r1 := @parameter2: androidx.compose.runtime.State;

        r2 := @parameter3: androidx.compose.runtime.State;

        r3 := @parameter4: androidx.compose.material.ripple.RippleContainer;

        specialinvoke r0.<androidx.compose.material.ripple.RippleIndicationInstance: void <init>(boolean,androidx.compose.runtime.State)>(z0, r2);

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: boolean bounded> = z0;

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: float radius> = f0;

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.State color> = r1;

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.State rippleAlpha> = r2;

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.material.ripple.RippleContainer rippleContainer> = r3;

        $r4 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>(null, null, 2, null);

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.MutableState rippleHostView$delegate> = $r4;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r6 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r5, null, 2, null);

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.MutableState invalidateTick$delegate> = $r6;

        $r7 = <androidx.compose.ui.geometry.Size: androidx.compose.ui.geometry.Size$Companion Companion>;

        $l0 = virtualinvoke $r7.<androidx.compose.ui.geometry.Size$Companion: long getZero-NH-jbRc()>();

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: long rippleSize> = $l0;

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: int rippleRadius> = -1;

        $r8 = new androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1;

        specialinvoke $r8.<androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1: void <init>(androidx.compose.material.ripple.AndroidRippleIndicationInstance)>(r0);

        $r9 = (kotlin.jvm.functions.Function0) $r8;

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: kotlin.jvm.functions.Function0 onInvalidateRipple> = $r9;

        return;
    }

    private final androidx.compose.material.ripple.RippleHostView getRippleHostView()
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        androidx.compose.material.ripple.RippleHostView $r4;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        $r2 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.MutableState rippleHostView$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (androidx.compose.material.ripple.RippleHostView) $r3;

        return $r4;
    }

    private final void setRippleHostView(androidx.compose.material.ripple.RippleHostView)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;
        androidx.compose.material.ripple.RippleHostView r1;
        androidx.compose.runtime.MutableState $r2;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        r1 := @parameter0: androidx.compose.material.ripple.RippleHostView;

        $r2 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.MutableState rippleHostView$delegate>;

        interfaceinvoke $r2.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r1);

        return;
    }

    private final boolean getInvalidateTick()
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        $r2 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.MutableState invalidateTick$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private final void setInvalidateTick(boolean)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;
        boolean z0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Boolean r2;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.MutableState invalidateTick$delegate>;

        r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    public void drawIndication(androidx.compose.ui.graphics.drawscope.ContentDrawScope)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;
        androidx.compose.ui.graphics.drawscope.ContentDrawScope $r1;
        float f0, $f1, $f2, $f3, $f4;
        androidx.compose.ui.graphics.Canvas r2;
        long $l0, $l1, $l3, $l5;
        boolean $z4, $z6;
        androidx.compose.runtime.State $r4, $r7;
        java.lang.Object $r5, $r8;
        androidx.compose.ui.graphics.Color $r6;
        androidx.compose.material.ripple.RippleAlpha $r9;
        androidx.compose.ui.graphics.drawscope.DrawScope $r10, $r16;
        androidx.compose.ui.graphics.drawscope.DrawContext $r11;
        androidx.compose.material.ripple.RippleHostView $r12;
        int $i2, $i4;
        android.graphics.Canvas $r13;
        androidx.compose.ui.unit.Density $r14;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        $r1 := @parameter0: androidx.compose.ui.graphics.drawscope.ContentDrawScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $l0 = interfaceinvoke $r1.<androidx.compose.ui.graphics.drawscope.ContentDrawScope: long getSize-NH-jbRc()>();

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: long rippleSize> = $l0;

        $f4 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: float radius>;

        $z4 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f4);

        if $z4 == 0 goto label1;

        $r14 = (androidx.compose.ui.unit.Density) $r1;

        $z6 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: boolean bounded>;

        $l3 = interfaceinvoke $r1.<androidx.compose.ui.graphics.drawscope.ContentDrawScope: long getSize-NH-jbRc()>();

        $f3 = staticinvoke <androidx.compose.material.ripple.RippleAnimationKt: float getRippleEndRadius-cSwnlzA(androidx.compose.ui.unit.Density,boolean,long)>($r14, $z6, $l3);

        $i4 = staticinvoke <kotlin.math.MathKt: int roundToInt(float)>($f3);

        goto label2;

     label1:
        $f1 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: float radius>;

        $i4 = interfaceinvoke $r1.<androidx.compose.ui.graphics.drawscope.ContentDrawScope: int roundToPx-0680j_4(float)>($f1);

     label2:
        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: int rippleRadius> = $i4;

        $r4 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.State color>;

        $r5 = interfaceinvoke $r4.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r6 = (androidx.compose.ui.graphics.Color) $r5;

        $l5 = virtualinvoke $r6.<androidx.compose.ui.graphics.Color: long unbox-impl()>();

        $r7 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.State rippleAlpha>;

        $r8 = interfaceinvoke $r7.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r9 = (androidx.compose.material.ripple.RippleAlpha) $r8;

        f0 = virtualinvoke $r9.<androidx.compose.material.ripple.RippleAlpha: float getPressedAlpha()>();

        interfaceinvoke $r1.<androidx.compose.ui.graphics.drawscope.ContentDrawScope: void drawContent()>();

        $r10 = (androidx.compose.ui.graphics.drawscope.DrawScope) $r1;

        $f2 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: float radius>;

        virtualinvoke r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: void drawStateLayer-H2RKhps(androidx.compose.ui.graphics.drawscope.DrawScope,float,long)>($r10, $f2, $l5);

        $r16 = (androidx.compose.ui.graphics.drawscope.DrawScope) $r1;

        $r11 = interfaceinvoke $r16.<androidx.compose.ui.graphics.drawscope.DrawScope: androidx.compose.ui.graphics.drawscope.DrawContext getDrawContext()>();

        r2 = interfaceinvoke $r11.<androidx.compose.ui.graphics.drawscope.DrawContext: androidx.compose.ui.graphics.Canvas getCanvas()>();

        specialinvoke r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: boolean getInvalidateTick()>();

        $r12 = specialinvoke r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.material.ripple.RippleHostView getRippleHostView()>();

        if $r12 == null goto label3;

        $l1 = interfaceinvoke $r1.<androidx.compose.ui.graphics.drawscope.ContentDrawScope: long getSize-NH-jbRc()>();

        $i2 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: int rippleRadius>;

        virtualinvoke $r12.<androidx.compose.material.ripple.RippleHostView: void updateRippleProperties-biQXAtU(long,int,long,float)>($l1, $i2, $l5, f0);

        $r13 = staticinvoke <androidx.compose.ui.graphics.AndroidCanvas_androidKt: android.graphics.Canvas getNativeCanvas(androidx.compose.ui.graphics.Canvas)>(r2);

        virtualinvoke $r12.<androidx.compose.material.ripple.RippleHostView: void draw(android.graphics.Canvas)>($r13);

        goto label3;

     label3:
        return;
    }

    public void addRipple(androidx.compose.foundation.interaction.PressInteraction$Press, kotlinx.coroutines.CoroutineScope)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0, r5;
        androidx.compose.foundation.interaction.PressInteraction$Press r1;
        kotlinx.coroutines.CoroutineScope r2;
        androidx.compose.material.ripple.RippleContainer $r3;
        androidx.compose.material.ripple.RippleHostView r4;
        androidx.compose.runtime.State $r6, $r9;
        boolean $z2;
        long $l0, $l2;
        int $i1;
        java.lang.Object $r7, $r10;
        androidx.compose.ui.graphics.Color $r8;
        androidx.compose.material.ripple.RippleAlpha $r11;
        float $f0;
        kotlin.jvm.functions.Function0 $r12;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        r1 := @parameter0: androidx.compose.foundation.interaction.PressInteraction$Press;

        r2 := @parameter1: kotlinx.coroutines.CoroutineScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "interaction");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "scope");

        $r3 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.material.ripple.RippleContainer rippleContainer>;

        r5 = r0;

        r4 = virtualinvoke $r3.<androidx.compose.material.ripple.RippleContainer: androidx.compose.material.ripple.RippleHostView getRippleHostView(androidx.compose.material.ripple.AndroidRippleIndicationInstance)>(r0);

        $z2 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: boolean bounded>;

        $l0 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: long rippleSize>;

        $i1 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: int rippleRadius>;

        $r6 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.State color>;

        $r7 = interfaceinvoke $r6.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r8 = (androidx.compose.ui.graphics.Color) $r7;

        $l2 = virtualinvoke $r8.<androidx.compose.ui.graphics.Color: long unbox-impl()>();

        $r9 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.runtime.State rippleAlpha>;

        $r10 = interfaceinvoke $r9.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r11 = (androidx.compose.material.ripple.RippleAlpha) $r10;

        $f0 = virtualinvoke $r11.<androidx.compose.material.ripple.RippleAlpha: float getPressedAlpha()>();

        $r12 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: kotlin.jvm.functions.Function0 onInvalidateRipple>;

        virtualinvoke r4.<androidx.compose.material.ripple.RippleHostView: void addRipple-KOepWvA(androidx.compose.foundation.interaction.PressInteraction$Press,boolean,long,int,long,float,kotlin.jvm.functions.Function0)>(r1, $z2, $l0, $i1, $l2, $f0, $r12);

        specialinvoke r5.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: void setRippleHostView(androidx.compose.material.ripple.RippleHostView)>(r4);

        return;
    }

    public void removeRipple(androidx.compose.foundation.interaction.PressInteraction$Press)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;
        androidx.compose.foundation.interaction.PressInteraction$Press r1;
        androidx.compose.material.ripple.RippleHostView $r2;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        r1 := @parameter0: androidx.compose.foundation.interaction.PressInteraction$Press;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "interaction");

        $r2 = specialinvoke r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.material.ripple.RippleHostView getRippleHostView()>();

        if $r2 == null goto label1;

        virtualinvoke $r2.<androidx.compose.material.ripple.RippleHostView: void removeRipple()>();

        goto label1;

     label1:
        return;
    }

    public void onRemembered()
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        return;
    }

    public void onForgotten()
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        specialinvoke r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: void dispose()>();

        return;
    }

    public void onAbandoned()
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        specialinvoke r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: void dispose()>();

        return;
    }

    private final void dispose()
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;
        androidx.compose.material.ripple.RippleContainer $r1;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        $r1 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: androidx.compose.material.ripple.RippleContainer rippleContainer>;

        virtualinvoke $r1.<androidx.compose.material.ripple.RippleContainer: void disposeRippleIfNeeded(androidx.compose.material.ripple.AndroidRippleIndicationInstance)>(r0);

        return;
    }

    public final void resetHostView()
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        specialinvoke r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: void setRippleHostView(androidx.compose.material.ripple.RippleHostView)>(null);

        return;
    }

    public void <init>(boolean, float, androidx.compose.runtime.State, androidx.compose.runtime.State, androidx.compose.material.ripple.RippleContainer, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance r0;
        boolean z0;
        float f0;
        androidx.compose.runtime.State r1, r2;
        androidx.compose.material.ripple.RippleContainer r3;
        kotlin.jvm.internal.DefaultConstructorMarker $r4;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        r1 := @parameter2: androidx.compose.runtime.State;

        r2 := @parameter3: androidx.compose.runtime.State;

        r3 := @parameter4: androidx.compose.material.ripple.RippleContainer;

        $r4 := @parameter5: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: void <init>(boolean,float,androidx.compose.runtime.State,androidx.compose.runtime.State,androidx.compose.material.ripple.RippleContainer)>(z0, f0, r1, r2, r3);

        return;
    }

    public static final void access$setInvalidateTick(androidx.compose.material.ripple.AndroidRippleIndicationInstance, boolean)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance $r0;
        boolean z0;

        $r0 := @parameter0: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        z0 := @parameter1: boolean;

        specialinvoke $r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: void setInvalidateTick(boolean)>(z0);

        return;
    }

    public static final boolean access$getInvalidateTick(androidx.compose.material.ripple.AndroidRippleIndicationInstance)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        $z0 = specialinvoke $r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance: boolean getInvalidateTick()>();

        return $z0;
    }

androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1
<androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1: androidx.compose.material.ripple.AndroidRippleIndicationInstance this$0>
    void <init>(androidx.compose.material.ripple.AndroidRippleIndicationInstance)
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1 r0;
        androidx.compose.material.ripple.AndroidRippleIndicationInstance $r1;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1;

        $r1 := @parameter0: androidx.compose.material.ripple.AndroidRippleIndicationInstance;

        r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1: androidx.compose.material.ripple.AndroidRippleIndicationInstance this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1 r0;
        androidx.compose.material.ripple.AndroidRippleIndicationInstance $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1;

        $r2 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1: androidx.compose.material.ripple.AndroidRippleIndicationInstance this$0>;

        $r1 = r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1: androidx.compose.material.ripple.AndroidRippleIndicationInstance this$0>;

        $z0 = staticinvoke <androidx.compose.material.ripple.AndroidRippleIndicationInstance: boolean access$getInvalidateTick(androidx.compose.material.ripple.AndroidRippleIndicationInstance)>($r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.compose.material.ripple.AndroidRippleIndicationInstance: void access$setInvalidateTick(androidx.compose.material.ripple.AndroidRippleIndicationInstance,boolean)>($r2, $z1);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1;

        virtualinvoke r0.<androidx.compose.material.ripple.AndroidRippleIndicationInstance$onInvalidateRipple$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

