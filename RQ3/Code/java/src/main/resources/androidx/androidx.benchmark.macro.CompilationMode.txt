androidx.benchmark.macro.CompilationMode
<androidx.benchmark.macro.CompilationMode: androidx.benchmark.macro.CompilationMode$Companion Companion>
<androidx.benchmark.macro.CompilationMode: androidx.benchmark.macro.CompilationMode noop>
<androidx.benchmark.macro.CompilationMode: androidx.benchmark.macro.CompilationMode DEFAULT>
    private void <init>()
    {
        androidx.benchmark.macro.CompilationMode r0;

        r0 := @this: androidx.benchmark.macro.CompilationMode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void resetAndCompile$benchmark_macro_release(java.lang.String, kotlin.jvm.functions.Function0)
    {
        androidx.benchmark.macro.CompilationMode r0;
        java.lang.String r1, $r4, $r5;
        kotlin.jvm.functions.Function0 r2;
        int $i0;
        androidx.benchmark.Arguments $r3;
        boolean $z0;

        r0 := @this: androidx.benchmark.macro.CompilationMode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "warmupBlock");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label2;

        $r3 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z0 = virtualinvoke $r3.<androidx.benchmark.Arguments: boolean getEnableCompilation()>();

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Resetting ", r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r5);

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode: void reinstallPackage(java.lang.String)>(r1);

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode: void writeProfileInstallerSkipFile(java.lang.String)>(r1);

        virtualinvoke r0.<androidx.benchmark.macro.CompilationMode: void compileImpl$benchmark_macro_release(java.lang.String,kotlin.jvm.functions.Function0)>(r1, r2);

        goto label2;

     label1:
        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Compilation is disabled, skipping compilation of ", r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r4);

     label2:
        return;
    }

    private final void reinstallPackage(java.lang.String)
    {
        androidx.benchmark.macro.CompilationMode r0;
        java.lang.String r1, r2, r3, r4, r5, $r10, $r11, $r20, $r27, $r28, $r30, $r32, $r33, $r36, $r37, $r39, $r40, $r43, $r44, $r46, $r56, $r64, $r69, $r71, $r73, $r79, $r81;
        androidx.benchmark.Shell$Output r6, r78, r80;
        java.lang.Object r7, $r77;
        androidx.benchmark.UserspaceTracing $r8, $r48, $r76;
        androidx.benchmark.Shell $r9, $r22, $r31, $r38, $r45, $r72;
        java.lang.CharSequence $r12, $r13, $r29, $r34, $r35, $r41, $r42;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r23, $r24, $r25, $r26, $r49, $r50, $r51, $r52, $r53, $r54, $r57, $r58, $r59, $r60, $r61, $r62, $r65, $r66, $r67, $r68;
        long $l0;
        boolean $z1, $z2, $z3, $z5;
        java.lang.IllegalStateException $r55, $r63;
        int $i5;
        java.lang.Throwable $r70, $r75, r82;

        r0 := @this: androidx.benchmark.macro.CompilationMode;

        r1 := @parameter0: java.lang.String;

        r2 = "reinstallPackage";

        $r8 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void beginSection$default(androidx.benchmark.UserspaceTracing,java.lang.String,long,int,java.lang.Object)>($r8, r2, 0L, 2, null);

     label01:
        $r9 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r10 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("pm path ", r1);

        r3 = staticinvoke <androidx.benchmark.Shell: java.lang.String executeScript$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>($r9, $r10, null, 2, null);

        $r11 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>(r3, "package:", null, 2, null);

        $r12 = (java.lang.CharSequence) $r11;

        $r13 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r12);

        r4 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/data/local/tmp/");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk");

        r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Copying APK to ", r5);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r20);

        $r22 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cp ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = staticinvoke <androidx.benchmark.Shell: androidx.benchmark.Shell$Output executeScriptWithStderr$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>($r22, $r27, null, 2, null);

        $r28 = virtualinvoke r6.<androidx.benchmark.Shell$Output: java.lang.String getStderr()>();

        $r29 = (java.lang.CharSequence) $r28;

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean isBlank(java.lang.CharSequence)>($r29);

        if $z1 != 0 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        if $z5 == 0 goto label04;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to copy apk (");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        $i5 = staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Benchmark", $r69);

        $r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        goto label10;

     label04:
        $r30 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Uninstalling ", r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r30);

        $r31 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r32 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("pm uninstall ", r1);

        r78 = staticinvoke <androidx.benchmark.Shell: androidx.benchmark.Shell$Output executeScriptWithStderr$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>($r31, $r32, null, 2, null);

        $r33 = virtualinvoke r78.<androidx.benchmark.Shell$Output: java.lang.String getStdout()>();

        $r34 = (java.lang.CharSequence) $r33;

        $r35 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.Object: java.lang.String toString()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r36, "Success");

        if $z2 != 0 goto label05;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to uninstall ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r79 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        $r63 = new java.lang.IllegalStateException;

        $r64 = virtualinvoke $r79.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r63.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r64);

        throw $r63;

     label05:
        $r37 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Installing ", r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r37);

        $r38 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r39 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("pm install -t ", r5);

        r80 = staticinvoke <androidx.benchmark.Shell: androidx.benchmark.Shell$Output executeScriptWithStderr$default(androidx.benchmark.Shell,java.lang.String,java.lang.String,int,java.lang.Object)>($r38, $r39, null, 2, null);

        $r40 = virtualinvoke r80.<androidx.benchmark.Shell$Output: java.lang.String getStdout()>();

        $r41 = (java.lang.CharSequence) $r40;

        $r42 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.Object: java.lang.String toString()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r43, "Success");

        if $z3 != 0 goto label06;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to install ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r81 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = new java.lang.IllegalStateException;

        $r56 = virtualinvoke $r81.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r55.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r56);

        throw $r55;

     label06:
        $r44 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Deleting ", r5);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r44);

        $r45 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r46 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("rm ", r5);

        virtualinvoke $r45.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r46);

        goto label09;

     label07:
        $r70 := @caughtexception;

        r82 = $r70;

     label08:
        $r71 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Deleting ", r5);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r71);

        $r72 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r73 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("rm ", r5);

        virtualinvoke $r72.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r73);

        throw r82;

     label09:
        $r77 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label10:
        r7 = $r77;

     label11:
        $r48 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r48, 0L, 1, null);

        goto label14;

     label12:
        $r75 := @caughtexception;

     label13:
        $r76 = <androidx.benchmark.UserspaceTracing: androidx.benchmark.UserspaceTracing INSTANCE>;

        staticinvoke <androidx.benchmark.UserspaceTracing: void endSection$default(androidx.benchmark.UserspaceTracing,long,int,java.lang.Object)>($r76, 0L, 1, null);

        throw $r75;

     label14:
        return;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private final void writeProfileInstallerSkipFile(java.lang.String)
    {
        androidx.benchmark.macro.CompilationMode r0;
        java.lang.String r1, r2, $r3, $r5, $r13, $r14;
        androidx.benchmark.Shell $r4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: androidx.benchmark.macro.CompilationMode;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<androidx.benchmark.macro.CompilationMode: java.lang.String profileInstallerSkipFileOperation(java.lang.String,java.lang.String)>(r1, "WRITE_SKIP_FILE");

        if r2 == null goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                    ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should use the latest version of `androidx.profileinstaller`\n                    for stable benchmarks. (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\"\n                ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimIndent(java.lang.String)>($r13);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Benchmark", $r14);

     label1:
        $r3 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Killing process ", r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r3);

        $r4 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r5 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("am force-stop ", r1);

        virtualinvoke $r4.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r5);

        return;
    }

    private final java.lang.String profileInstallerSkipFileOperation(java.lang.String, java.lang.String)
    {
        androidx.benchmark.macro.CompilationMode r0;
        java.lang.String r1, r2, r3, r4, r5, r6, $r13, $r24, $r25, $r26, $r29, $r31, $r32;
        java.lang.Integer r7;
        java.lang.Class $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        androidx.benchmark.Shell $r15;
        java.lang.CharSequence $r27, $r28;
        int $i1, $i2, $i3;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r30;
        byte b4, b5;

        r0 := @this: androidx.benchmark.macro.CompilationMode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r8 = class "Landroidx/profileinstaller/ProfileInstallReceiver;";

        r3 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        r4 = "androidx.profileinstaller.action.SKIP_FILE";

        r5 = "EXTRA_SKIP_FILE_OPERATION";

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r6 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Profile Installation Skip File Operation: ", r2);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r13);

        $r15 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("am broadcast -a ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -e ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke $r15.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r24);

        $r26 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r25, "Broadcast completed: result=", null, 2, null);

        $r27 = (java.lang.CharSequence) $r26;

        $r28 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.Object: java.lang.String toString()>();

        r7 = staticinvoke <kotlin.text.StringsKt: java.lang.Integer toIntOrNull(java.lang.String)>($r29);

        if r7 == null goto label1;

        z2 = 0;

        $i1 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        if $i1 != 0 goto label2;

     label1:
        $r32 = "The baseline profile skip file broadcast was not received. This most likely means that the `androidx.profileinstaller` library used by the target apk is old. Please use `1.2.0-alpha03` or newer. For more information refer to the release notes at https://developer.android.com/jetpack/androidx/releases/profileinstaller.";

        goto label5;

     label2:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, "WRITE_SKIP_FILE");

        if $z0 == 0 goto label3;

        b4 = 10;

        $i3 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        if $i3 != b4 goto label3;

        $r32 = (java.lang.String) null;

        goto label5;

     label3:
        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, "DELETE_SKIP_FILE");

        if $z1 == 0 goto label4;

        b5 = 11;

        $i2 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        if $i2 != b5 goto label4;

        $r32 = (java.lang.String) null;

        goto label5;

     label4:
        $r30 = new java.lang.RuntimeException;

        $r31 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("unrecognized ProfileInstaller result code: ", r7);

        specialinvoke $r30.<java.lang.RuntimeException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label5:
        return $r32;
    }

    public final void cmdPackageCompile$benchmark_macro_release(java.lang.String, java.lang.String)
    {
        androidx.benchmark.macro.CompilationMode r0;
        java.lang.String r1, r2, $r9;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8;
        androidx.benchmark.Shell $r4;

        r0 := @this: androidx.benchmark.macro.CompilationMode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "compileArgument");

        $r4 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cmd package compile -f -m ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r9);

        return;
    }

<androidx.benchmark.macro.CompilationMode: void compileImpl$benchmark_macro_release(java.lang.String,kotlin.jvm.functions.Function0)>
    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.benchmark.macro.CompilationMode r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.benchmark.macro.CompilationMode;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode: void <init>()>();

        return;
    }

    public static final androidx.benchmark.macro.CompilationMode access$getNoop$cp()
    {
        androidx.benchmark.macro.CompilationMode $r0;

        $r0 = <androidx.benchmark.macro.CompilationMode: androidx.benchmark.macro.CompilationMode noop>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.benchmark.macro.CompilationMode$Companion $r0;
        int $i0, $i1;
        androidx.benchmark.macro.CompilationMode$Full $r1, $r2;
        androidx.benchmark.macro.CompilationMode$Partial $r3;
        androidx.benchmark.macro.BaselineProfileMode $r4;
        androidx.benchmark.macro.CompilationMode$None $r5;
        androidx.benchmark.macro.CompilationMode $r6, $r7;

        $r0 = new androidx.benchmark.macro.CompilationMode$Companion;

        specialinvoke $r0.<androidx.benchmark.macro.CompilationMode$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.benchmark.macro.CompilationMode: androidx.benchmark.macro.CompilationMode$Companion Companion> = $r0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label1;

        $r5 = new androidx.benchmark.macro.CompilationMode$None;

        specialinvoke $r5.<androidx.benchmark.macro.CompilationMode$None: void <init>()>();

        $r6 = (androidx.benchmark.macro.CompilationMode) $r5;

        goto label2;

     label1:
        $r1 = new androidx.benchmark.macro.CompilationMode$Full;

        specialinvoke $r1.<androidx.benchmark.macro.CompilationMode$Full: void <init>()>();

        $r6 = (androidx.benchmark.macro.CompilationMode) $r1;

     label2:
        <androidx.benchmark.macro.CompilationMode: androidx.benchmark.macro.CompilationMode noop> = $r6;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 24 goto label3;

        $r3 = new androidx.benchmark.macro.CompilationMode$Partial;

        $r4 = <androidx.benchmark.macro.BaselineProfileMode: androidx.benchmark.macro.BaselineProfileMode UseIfAvailable>;

        specialinvoke $r3.<androidx.benchmark.macro.CompilationMode$Partial: void <init>(androidx.benchmark.macro.BaselineProfileMode,int)>($r4, 0);

        $r7 = (androidx.benchmark.macro.CompilationMode) $r3;

        goto label4;

     label3:
        $r2 = new androidx.benchmark.macro.CompilationMode$Full;

        specialinvoke $r2.<androidx.benchmark.macro.CompilationMode$Full: void <init>()>();

        $r7 = (androidx.benchmark.macro.CompilationMode) $r2;

     label4:
        <androidx.benchmark.macro.CompilationMode: androidx.benchmark.macro.CompilationMode DEFAULT> = $r7;

        return;
    }

androidx.benchmark.macro.CompilationMode$Companion
    private void <init>()
    {
        androidx.benchmark.macro.CompilationMode$Companion r0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.benchmark.macro.CompilationMode getNoop$benchmark_macro_release()
    {
        androidx.benchmark.macro.CompilationMode$Companion r0;
        androidx.benchmark.macro.CompilationMode $r1;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Companion;

        $r1 = staticinvoke <androidx.benchmark.macro.CompilationMode: androidx.benchmark.macro.CompilationMode access$getNoop$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.benchmark.macro.CompilationMode$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode$Companion: void <init>()>();

        return;
    }

androidx.benchmark.macro.CompilationMode$Full
    public void <init>()
    {
        androidx.benchmark.macro.CompilationMode$Full r0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Full;

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        return;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.macro.CompilationMode$Full r0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Full;

        return "Full";
    }

    public void compileImpl$benchmark_macro_release(java.lang.String, kotlin.jvm.functions.Function0)
    {
        androidx.benchmark.macro.CompilationMode$Full r0;
        java.lang.String r1;
        kotlin.jvm.functions.Function0 r2;
        int $i0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Full;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "warmupBlock");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 24 goto label1;

        virtualinvoke r0.<androidx.benchmark.macro.CompilationMode$Full: void cmdPackageCompile$benchmark_macro_release(java.lang.String,java.lang.String)>(r1, "speed");

     label1:
        return;
    }

androidx.benchmark.macro.CompilationMode$Interpreted
<androidx.benchmark.macro.CompilationMode$Interpreted: androidx.benchmark.macro.CompilationMode$Interpreted INSTANCE>
    private void <init>()
    {
        androidx.benchmark.macro.CompilationMode$Interpreted r0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Interpreted;

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        return;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.macro.CompilationMode$Interpreted r0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Interpreted;

        return "Interpreted";
    }

    public void compileImpl$benchmark_macro_release(java.lang.String, kotlin.jvm.functions.Function0)
    {
        androidx.benchmark.macro.CompilationMode$Interpreted r0;
        java.lang.String r1;
        kotlin.jvm.functions.Function0 r2;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Interpreted;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "warmupBlock");

        return;
    }

    static void <clinit>()
    {
        androidx.benchmark.macro.CompilationMode$Interpreted $r0;

        $r0 = new androidx.benchmark.macro.CompilationMode$Interpreted;

        specialinvoke $r0.<androidx.benchmark.macro.CompilationMode$Interpreted: void <init>()>();

        <androidx.benchmark.macro.CompilationMode$Interpreted: androidx.benchmark.macro.CompilationMode$Interpreted INSTANCE> = $r0;

        return;
    }

androidx.benchmark.macro.CompilationMode$None
    public void <init>()
    {
        androidx.benchmark.macro.CompilationMode$None r0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$None;

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        return;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.macro.CompilationMode$None r0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$None;

        return "None";
    }

    public void compileImpl$benchmark_macro_release(java.lang.String, kotlin.jvm.functions.Function0)
    {
        androidx.benchmark.macro.CompilationMode$None r0;
        java.lang.String r1;
        kotlin.jvm.functions.Function0 r2;

        r0 := @this: androidx.benchmark.macro.CompilationMode$None;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "warmupBlock");

        return;
    }

androidx.benchmark.macro.CompilationMode$Partial
<androidx.benchmark.macro.CompilationMode$Partial: androidx.benchmark.macro.BaselineProfileMode baselineProfileMode>
<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>
    public void <init>(androidx.benchmark.macro.BaselineProfileMode, int)
    {
        androidx.benchmark.macro.CompilationMode$Partial r0;
        androidx.benchmark.macro.BaselineProfileMode r1, $r2, $r3;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r4, $r7;
        java.lang.String $r5, $r8, $r9, $r10;
        java.lang.Integer $r6;
        boolean $z0, $z2;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Partial;

        r1 := @parameter0: androidx.benchmark.macro.BaselineProfileMode;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "baselineProfileMode");

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        r0.<androidx.benchmark.macro.CompilationMode$Partial: androidx.benchmark.macro.BaselineProfileMode baselineProfileMode> = r1;

        r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations> = i0;

        $i1 = r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>;

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        $i3 = virtualinvoke r0.<androidx.benchmark.macro.CompilationMode$Partial: int getWarmupIterations()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r9 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("warmupIterations must be non-negative, was ", $r6);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label3:
        $r3 = r0.<androidx.benchmark.macro.CompilationMode$Partial: androidx.benchmark.macro.BaselineProfileMode baselineProfileMode>;

        $r2 = <androidx.benchmark.macro.BaselineProfileMode: androidx.benchmark.macro.BaselineProfileMode Disable>;

        if $r3 != $r2 goto label4;

        $i2 = r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>;

        if $i2 <= 0 goto label5;

     label4:
        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        if $z2 != 0 goto label7;

        $r10 = "Must set baselineProfileMode != Ignore, or warmup iterations > 0 to define which portion of the app to pre-compile.";

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label7:
        return;
    }

    public void <init>(androidx.benchmark.macro.BaselineProfileMode, int, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.benchmark.macro.CompilationMode$Partial r0;
        int i0, $i1, $i2, i3;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        androidx.benchmark.macro.BaselineProfileMode r2;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Partial;

        r2 := @parameter0: androidx.benchmark.macro.BaselineProfileMode;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r2 = <androidx.benchmark.macro.BaselineProfileMode: androidx.benchmark.macro.BaselineProfileMode Require>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        i3 = 0;

     label2:
        specialinvoke r0.<androidx.benchmark.macro.CompilationMode$Partial: void <init>(androidx.benchmark.macro.BaselineProfileMode,int)>(r2, i3);

        return;
    }

    public final androidx.benchmark.macro.BaselineProfileMode getBaselineProfileMode()
    {
        androidx.benchmark.macro.CompilationMode$Partial r0;
        androidx.benchmark.macro.BaselineProfileMode $r1;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Partial;

        $r1 = r0.<androidx.benchmark.macro.CompilationMode$Partial: androidx.benchmark.macro.BaselineProfileMode baselineProfileMode>;

        return $r1;
    }

    public final int getWarmupIterations()
    {
        androidx.benchmark.macro.CompilationMode$Partial r0;
        int $i0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Partial;

        $i0 = r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>;

        return $i0;
    }

    public java.lang.String toString()
    {
        androidx.benchmark.macro.CompilationMode$Partial r0;
        androidx.benchmark.macro.BaselineProfileMode $r1, $r2, $r3, $r4, $r7;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r16;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Partial;

        $r2 = r0.<androidx.benchmark.macro.CompilationMode$Partial: androidx.benchmark.macro.BaselineProfileMode baselineProfileMode>;

        $r1 = <androidx.benchmark.macro.BaselineProfileMode: androidx.benchmark.macro.BaselineProfileMode Require>;

        if $r2 != $r1 goto label1;

        $i3 = r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>;

        if $i3 != 0 goto label1;

        $r16 = "BaselineProfile";

        goto label3;

     label1:
        $r4 = r0.<androidx.benchmark.macro.CompilationMode$Partial: androidx.benchmark.macro.BaselineProfileMode baselineProfileMode>;

        $r3 = <androidx.benchmark.macro.BaselineProfileMode: androidx.benchmark.macro.BaselineProfileMode Disable>;

        if $r4 != $r3 goto label2;

        $i1 = r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>;

        if $i1 <= 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WarmupProfile(iterations=");

        $i2 = r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Partial(baselineProfile=");

        $r7 = r0.<androidx.benchmark.macro.CompilationMode$Partial: androidx.benchmark.macro.BaselineProfileMode baselineProfileMode>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",iterations=");

        $i0 = r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return $r16;
    }

    private final java.lang.String broadcastBaselineProfileInstall(java.lang.String)
    {
        androidx.benchmark.macro.CompilationMode$Partial r0;
        java.lang.String r1, r2, r3, $r15, $r16, $r17, $r20, $r22;
        java.lang.Integer r4, r5;
        java.lang.Class $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12, $r13, $r14;
        androidx.benchmark.Shell $r8;
        java.lang.CharSequence $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16;
        java.lang.RuntimeException $r21, $r23, $r26, $r28;
        boolean $z0, z1, $z2, $z3, $z4;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Partial;

        r1 := @parameter0: java.lang.String;

        r2 = "androidx.profileinstaller.action.INSTALL_PROFILE";

        $r6 = class "Landroidx/profileinstaller/ProfileInstallReceiver;";

        r3 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("am broadcast -a ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r8.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r15);

        $r17 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r16, "Broadcast completed: result=", null, 2, null);

        $r18 = (java.lang.CharSequence) $r17;

        $r19 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        r4 = staticinvoke <kotlin.text.StringsKt: java.lang.Integer toIntOrNull(java.lang.String)>($r20);

        r5 = r4;

        if r5 != null goto label01;

        $z0 = 1;

        goto label03;

     label01:
        z1 = 0;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        if $z0 == 0 goto label04;

        return "The baseline profile install broadcast was not received. This most likely means that the profileinstaller library is missing from the target apk.";

     label04:
        i9 = 1;

        if r5 != null goto label05;

        goto label06;

     label05:
        $i1 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i1 != i9 goto label06;

        return null;

     label06:
        i10 = 2;

        if r5 != null goto label07;

        goto label08;

     label07:
        $i2 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i2 != i10 goto label08;

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to install baseline profile. This most likely means that the latest version of the profileinstaller library is not being used. Please use the latest profileinstaller library version in the target app.");

        throw $r28;

     label08:
        i11 = 3;

        if r5 != null goto label09;

        goto label10;

     label09:
        $i3 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i3 != i11 goto label10;

        $r26 = new java.lang.RuntimeException;

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.String)>("Baseline profiles aren\'t supported on this device version");

        throw $r26;

     label10:
        i12 = 6;

        if r5 != null goto label11;

        goto label12;

     label11:
        $i4 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i4 != i12 goto label12;

        return "No baseline profile was found in the target apk.";

     label12:
        i13 = 4;

        if r5 != null goto label13;

        goto label14;

     label13:
        $i5 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i5 != i13 goto label14;

        $z2 = 1;

        goto label17;

     label14:
        i14 = 5;

        if r5 != null goto label15;

        goto label16;

     label15:
        $i6 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i6 != i14 goto label16;

        $z2 = 1;

        goto label17;

     label16:
        $z2 = 0;

     label17:
        if $z2 == 0 goto label18;

        $z3 = 1;

        goto label21;

     label18:
        i15 = 7;

        if r5 != null goto label19;

        goto label20;

     label19:
        $i7 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i7 != i15 goto label20;

        $z3 = 1;

        goto label21;

     label20:
        $z3 = 0;

     label21:
        if $z3 == 0 goto label22;

        $z4 = 1;

        goto label25;

     label22:
        i16 = 8;

        if r5 != null goto label23;

        goto label24;

     label23:
        $i8 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i8 != i16 goto label24;

        $z4 = 1;

        goto label25;

     label24:
        $z4 = 0;

     label25:
        if $z4 == 0 goto label26;

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String)>("Baseline Profile wasn\'t successfully installed");

        throw $r23;

     label26:
        $r21 = new java.lang.RuntimeException;

        $r22 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("unrecognized ProfileInstaller result code: ", r4);

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22);

        throw $r21;
    }

    public void compileImpl$benchmark_macro_release(java.lang.String, kotlin.jvm.functions.Function0)
    {
        androidx.benchmark.macro.CompilationMode$Partial r0;
        java.lang.String r1, $r6, $r8, $r16, $r21, $r23, r25, r26;
        kotlin.jvm.functions.Function0 r2;
        int i0, i1, $i5, i6, i7;
        androidx.benchmark.macro.BaselineProfileMode $r3, $r4, $r18, $r19;
        androidx.benchmark.Shell $r5, $r22;
        java.lang.CharSequence $r7;
        boolean $z1, $z2;
        java.lang.RuntimeException $r9, $r20;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Partial;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "warmupBlock");

        $r4 = r0.<androidx.benchmark.macro.CompilationMode$Partial: androidx.benchmark.macro.BaselineProfileMode baselineProfileMode>;

        $r3 = <androidx.benchmark.macro.BaselineProfileMode: androidx.benchmark.macro.BaselineProfileMode Disable>;

        if $r4 == $r3 goto label3;

        r25 = specialinvoke r0.<androidx.benchmark.macro.CompilationMode$Partial: java.lang.String broadcastBaselineProfileInstall(java.lang.String)>(r1);

        if r25 != null goto label1;

        $r21 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Killing process ", r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r21);

        $r22 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r23 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("am force-stop ", r1);

        virtualinvoke $r22.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r23);

        virtualinvoke r0.<androidx.benchmark.macro.CompilationMode$Partial: void cmdPackageCompile$benchmark_macro_release(java.lang.String,java.lang.String)>(r1, "speed-profile");

        goto label3;

     label1:
        $r19 = r0.<androidx.benchmark.macro.CompilationMode$Partial: androidx.benchmark.macro.BaselineProfileMode baselineProfileMode>;

        $r18 = <androidx.benchmark.macro.BaselineProfileMode: androidx.benchmark.macro.BaselineProfileMode Require>;

        if $r19 != $r18 goto label2;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>(r25);

        throw $r20;

     label2:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", r25);

     label3:
        $i5 = r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>;

        if $i5 <= 0 goto label9;

        i6 = r0.<androidx.benchmark.macro.CompilationMode$Partial: int warmupIterations>;

        i7 = 0;

     label4:
        if i7 >= i6 goto label5;

        i0 = i7;

        i7 = i7 + 1;

        i1 = i0;

        interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label4;

     label5:
        staticinvoke <java.lang.Thread: void sleep(long)>(5000L);

        $r5 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("killall -s SIGUSR1 ", r1);

        r26 = virtualinvoke $r5.<androidx.benchmark.Shell: java.lang.String executeCommand(java.lang.String)>($r6);

        $r7 = (java.lang.CharSequence) r26;

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean isBlank(java.lang.CharSequence)>($r7);

        if $z1 != 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        if $z2 == 0 goto label8;

        $r8 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Received dump profile response ", r26);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r8);

        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to dump profile for ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label8:
        virtualinvoke r0.<androidx.benchmark.macro.CompilationMode$Partial: void cmdPackageCompile$benchmark_macro_release(java.lang.String,java.lang.String)>(r1, "speed-profile");

     label9:
        return;
    }

    public void <init>(androidx.benchmark.macro.BaselineProfileMode)
    {
        androidx.benchmark.macro.CompilationMode$Partial r0;
        androidx.benchmark.macro.BaselineProfileMode r1;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Partial;

        r1 := @parameter0: androidx.benchmark.macro.BaselineProfileMode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "baselineProfileMode");

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode$Partial: void <init>(androidx.benchmark.macro.BaselineProfileMode,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, 0, 2, null);

        return;
    }

    public void <init>()
    {
        androidx.benchmark.macro.CompilationMode$Partial r0;

        r0 := @this: androidx.benchmark.macro.CompilationMode$Partial;

        specialinvoke r0.<androidx.benchmark.macro.CompilationMode$Partial: void <init>(androidx.benchmark.macro.BaselineProfileMode,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 0, 3, null);

        return;
    }

