android.databinding.tool.CompilerChef
<android.databinding.tool.CompilerChef: java.lang.String[] VERSION_CODES>
<android.databinding.tool.CompilerChef: android.databinding.tool.writer.JavaFileWriter mFileWriter>
<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>
<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>
<android.databinding.tool.CompilerChef: boolean mEnableV2>
<android.databinding.tool.CompilerChef: android.databinding.tool.CompilerChef mV1CompatChef>
    private void <init>()
    {
        android.databinding.tool.CompilerChef r0;

        r0 := @this: android.databinding.tool.CompilerChef;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setV1CompatChef(android.databinding.tool.CompilerChef)
    {
        android.databinding.tool.CompilerChef r0, r1;

        r0 := @this: android.databinding.tool.CompilerChef;

        r1 := @parameter0: android.databinding.tool.CompilerChef;

        r0.<android.databinding.tool.CompilerChef: android.databinding.tool.CompilerChef mV1CompatChef> = r1;

        return;
    }

    public static android.databinding.tool.CompilerChef createChef(android.databinding.tool.store.ResourceBundle, android.databinding.tool.writer.JavaFileWriter, android.databinding.tool.DataBindingCompilerArgs)
    {
        android.databinding.tool.store.ResourceBundle r0, $r5;
        android.databinding.tool.writer.JavaFileWriter r1;
        android.databinding.tool.DataBindingCompilerArgs r2;
        android.databinding.tool.CompilerChef r3, $r4;
        boolean $z0;

        r0 := @parameter0: android.databinding.tool.store.ResourceBundle;

        r1 := @parameter1: android.databinding.tool.writer.JavaFileWriter;

        r2 := @parameter2: android.databinding.tool.DataBindingCompilerArgs;

        $r4 = new android.databinding.tool.CompilerChef;

        specialinvoke $r4.<android.databinding.tool.CompilerChef: void <init>()>();

        r3 = $r4;

        r3.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle> = r0;

        r3.<android.databinding.tool.CompilerChef: android.databinding.tool.writer.JavaFileWriter mFileWriter> = r1;

        $r5 = r3.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        virtualinvoke $r5.<android.databinding.tool.store.ResourceBundle: void validateMultiResLayouts()>();

        $z0 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isEnableV2()>();

        r3.<android.databinding.tool.CompilerChef: boolean mEnableV2> = $z0;

        specialinvoke r3.<android.databinding.tool.CompilerChef: void pushClassesToAnalyzer()>();

        return r3;
    }

    public android.databinding.tool.store.ResourceBundle getResourceBundle()
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.store.ResourceBundle $r1;

        r0 := @this: android.databinding.tool.CompilerChef;

        $r1 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        return $r1;
    }

    public void ensureDataBinder()
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.LibTypes r1;
        android.databinding.tool.DataBinder $r2, $r4, $r7;
        android.databinding.tool.reflection.ModelAnalyzer $r3;
        boolean $z0;
        android.databinding.tool.store.ResourceBundle $r5;
        android.databinding.tool.writer.JavaFileWriter $r6;

        r0 := @this: android.databinding.tool.CompilerChef;

        $r2 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        if $r2 != null goto label1;

        $r3 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r1 = $r3.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        $r4 = new android.databinding.tool.DataBinder;

        $r5 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        $z0 = r0.<android.databinding.tool.CompilerChef: boolean mEnableV2>;

        specialinvoke $r4.<android.databinding.tool.DataBinder: void <init>(android.databinding.tool.store.ResourceBundle,boolean,android.databinding.tool.LibTypes)>($r5, $z0, r1);

        r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder> = $r4;

        $r7 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        $r6 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.writer.JavaFileWriter mFileWriter>;

        virtualinvoke $r7.<android.databinding.tool.DataBinder: void setFileWriter(android.databinding.tool.writer.JavaFileWriter)>($r6);

     label1:
        return;
    }

    public boolean hasAnythingToGenerate()
    {
        android.databinding.tool.CompilerChef r0;
        java.lang.Object[] $r1;
        android.databinding.tool.store.ResourceBundle $r2, $r3, $r7, $r8;
        java.util.HashMap $r5, $r9;
        java.lang.Integer $r6;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: android.databinding.tool.CompilerChef;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        if $r2 != null goto label1;

        $i2 = -1;

        goto label2;

     label1:
        $r3 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        $r5 = virtualinvoke $r3.<android.databinding.tool.store.ResourceBundle: java.util.HashMap getLayoutBundles()>();

        $i2 = virtualinvoke $r5.<java.util.HashMap: int size()>();

     label2:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[0] = $r6;

        staticinvoke <android.databinding.tool.util.L: void d(java.lang.String,java.lang.Object[])>("checking if we have anything to generate. bundle size: %s", $r1);

        $r7 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        if $r7 == null goto label3;

        $r8 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        $r9 = virtualinvoke $r8.<android.databinding.tool.store.ResourceBundle: java.util.HashMap getLayoutBundles()>();

        $i1 = virtualinvoke $r9.<java.util.HashMap: int size()>();

        if $i1 <= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private void pushClassesToAnalyzer()
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.reflection.ModelAnalyzer r1;
        java.util.Iterator r2, r9, r60, r62, r64;
        java.lang.String r3, r7, r12, r13, $r26, $r31, $r35, $r43, $r46, $r51, $r53, $r54, $r55, $r57, $r58, r66;
        java.util.HashSet r4, r5, $r18, $r19;
        java.util.List r6, $r39, $r40, $r41;
        android.databinding.tool.reflection.InjectedClass r8, $r33, $r48;
        android.databinding.tool.store.ResourceBundle$LayoutFileBundle r10, $r25, $r30;
        java.util.HashMap r11, $r15, $r21, $r38;
        android.databinding.tool.store.ResourceBundle $r14, $r20;
        java.util.Set $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object $r17, $r22, $r24, $r29, $r37, $r50, $r52, $r56;
        java.lang.StringBuilder $r23, $r27, $r28, $r32, $r42, $r44, $r45, $r47;
        android.databinding.tool.LibTypes $r34;
        int $i0;
        android.databinding.tool.store.ResourceBundle$NameTypeLocation r61;
        android.databinding.tool.store.ResourceBundle$VariableDeclaration r63;
        android.databinding.tool.store.ResourceBundle$BindingTargetBundle r65;

        r0 := @this: android.databinding.tool.CompilerChef;

        r1 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        $r14 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        $r15 = virtualinvoke $r14.<android.databinding.tool.store.ResourceBundle: java.util.HashMap getLayoutBundles()>();

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r17 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r17;

        $r18 = new java.util.HashSet;

        specialinvoke $r18.<java.util.HashSet: void <init>()>();

        r4 = $r18;

        $r19 = new java.util.HashSet;

        specialinvoke $r19.<java.util.HashSet: void <init>()>();

        r5 = $r19;

        $r20 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.store.ResourceBundle mResourceBundle>;

        $r21 = virtualinvoke $r20.<android.databinding.tool.store.ResourceBundle: java.util.HashMap getLayoutBundles()>();

        $r22 = virtualinvoke $r21.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (java.util.List) $r22;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r25 = (android.databinding.tool.store.ResourceBundle$LayoutFileBundle) $r24;

        $r26 = virtualinvoke $r25.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.lang.String getBindingClassPackage()>();

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r29 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r30 = (android.databinding.tool.store.ResourceBundle$LayoutFileBundle) $r29;

        $r31 = virtualinvoke $r30.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.lang.String getBindingClassName()>();

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        r7 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = new android.databinding.tool.reflection.InjectedClass;

        $r34 = r1.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        $r35 = virtualinvoke $r34.<android.databinding.tool.LibTypes: java.lang.String getViewDataBinding()>();

        specialinvoke $r33.<android.databinding.tool.reflection.InjectedClass: void <init>(java.lang.String,java.lang.String)>(r7, $r35);

        r8 = $r33;

        virtualinvoke r1.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelClass injectClass(android.databinding.tool.reflection.InjectedClass)>(r8);

        r9 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r37 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.databinding.tool.store.ResourceBundle$LayoutFileBundle) $r37;

        $r38 = new java.util.HashMap;

        specialinvoke $r38.<java.util.HashMap: void <init>()>();

        r11 = $r38;

        $r39 = virtualinvoke r10.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.util.List getImports()>();

        r60 = interfaceinvoke $r39.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r56 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (android.databinding.tool.store.ResourceBundle$NameTypeLocation) $r56;

        $r58 = r61.<android.databinding.tool.store.ResourceBundle$NameTypeLocation: java.lang.String name>;

        $r57 = r61.<android.databinding.tool.store.ResourceBundle$NameTypeLocation: java.lang.String type>;

        virtualinvoke r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r58, $r57);

        goto label03;

     label04:
        $r40 = virtualinvoke r10.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.util.List getVariables()>();

        r62 = interfaceinvoke $r40.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r52 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (android.databinding.tool.store.ResourceBundle$VariableDeclaration) $r52;

        $r53 = r63.<android.databinding.tool.store.ResourceBundle$VariableDeclaration: java.lang.String name>;

        $z7 = virtualinvoke r4.<java.util.HashSet: boolean add(java.lang.Object)>($r53);

        if $z7 == 0 goto label06;

        $r55 = r63.<android.databinding.tool.store.ResourceBundle$VariableDeclaration: java.lang.String name>;

        $r54 = r63.<android.databinding.tool.store.ResourceBundle$VariableDeclaration: java.lang.String type>;

        virtualinvoke r8.<android.databinding.tool.reflection.InjectedClass: void addVariable(java.lang.String,java.lang.String,java.util.Map)>($r55, $r54, r11);

     label06:
        goto label05;

     label07:
        $r41 = virtualinvoke r10.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.util.List getBindingTargetBundles()>();

        r64 = interfaceinvoke $r41.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r50 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        r65 = (android.databinding.tool.store.ResourceBundle$BindingTargetBundle) $r50;

        $r51 = virtualinvoke r65.<android.databinding.tool.store.ResourceBundle$BindingTargetBundle: java.lang.String getId()>();

        if $r51 == null goto label09;

        r12 = virtualinvoke r65.<android.databinding.tool.store.ResourceBundle$BindingTargetBundle: java.lang.String getId()>();

        $z6 = virtualinvoke r5.<java.util.HashSet: boolean add(java.lang.Object)>(r12);

        if $z6 == 0 goto label09;

        r13 = virtualinvoke r65.<android.databinding.tool.store.ResourceBundle$BindingTargetBundle: java.lang.String getInterfaceType()>();

        virtualinvoke r8.<android.databinding.tool.reflection.InjectedClass: void addField(java.lang.String,java.lang.String)>(r12, r13);

     label09:
        goto label08;

     label10:
        $z5 = r0.<android.databinding.tool.CompilerChef: boolean mEnableV2>;

        if $z5 != 0 goto label11;

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i0 <= 1 goto label12;

     label11:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke r10.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.lang.String getBindingClassPackage()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r46 = virtualinvoke r10.<android.databinding.tool.store.ResourceBundle$LayoutFileBundle: java.lang.String createImplClassNameWithConfig()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        r66 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48 = new android.databinding.tool.reflection.InjectedClass;

        specialinvoke $r48.<android.databinding.tool.reflection.InjectedClass: void <init>(java.lang.String,java.lang.String)>(r66, r7);

        virtualinvoke r1.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelClass injectClass(android.databinding.tool.reflection.InjectedClass)>($r48);

     label12:
        goto label02;

     label13:
        goto label01;

     label14:
        return;
    }

    public void writeDataBinderMapper(javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.DataBindingCompilerArgs, java.util.Map, java.util.List)
    {
        android.databinding.tool.CompilerChef r0, $r18;
        javax.'annotation'.processing.ProcessingEnvironment r1;
        android.databinding.tool.DataBindingCompilerArgs r2;
        java.util.Map r3;
        java.util.List r4, $r10;
        android.databinding.tool.LibTypes r5;
        android.databinding.tool.writer.BindingMapperWriter r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9, z10;
        android.databinding.tool.reflection.ModelAnalyzer $r7;
        android.databinding.tool.DataBinder $r9;
        java.lang.StringBuilder $r11, $r13, $r15;
        android.databinding.tool.writer.JavaFileWriter $r12;
        java.lang.String $r14, $r16, $r17, r19, r20;

        r0 := @this: android.databinding.tool.CompilerChef;

        r1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;

        r2 := @parameter1: android.databinding.tool.DataBindingCompilerArgs;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: java.util.List;

        $z0 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isEnableV2()>();

        if $z0 == 0 goto label14;

        $z1 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isApp()>();

        if $z1 == 0 goto label04;

        $z5 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isTestVariant()>();

        if $z5 == 0 goto label01;

        $z6 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isEnabledForTests()>();

        if $z6 == 0 goto label02;

     label01:
        $z7 = 1;

        goto label03;

     label02:
        $z7 = 0;

     label03:
        z8 = $z7;

        goto label05;

     label04:
        z8 = 1;

     label05:
        if z8 == 0 goto label06;

        specialinvoke r0.<android.databinding.tool.CompilerChef: void writeMapperForModule(android.databinding.tool.DataBindingCompilerArgs,java.util.Map)>(r2, r3);

     label06:
        $r18 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.CompilerChef mV1CompatChef>;

        if $r18 == null goto label07;

        specialinvoke r0.<android.databinding.tool.CompilerChef: void writeMapperForV1Compat(android.databinding.tool.DataBindingCompilerArgs,java.util.Map)>(r2, r3);

     label07:
        $z2 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isApp()>();

        if $z2 == 0 goto label10;

        $z4 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isTestVariant()>();

        if $z4 != 0 goto label08;

        $z9 = 1;

        goto label09;

     label08:
        $z9 = 0;

     label09:
        z10 = $z9;

        goto label12;

     label10:
        $z3 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isFeature()>();

        if $z3 != 0 goto label11;

        z10 = virtualinvoke r2.<android.databinding.tool.DataBindingCompilerArgs: boolean isTestVariant()>();

        goto label12;

     label11:
        z10 = 0;

     label12:
        if z10 == 0 goto label13;

        specialinvoke r0.<android.databinding.tool.CompilerChef: void writeMergedMapper(javax.'annotation'.processing.ProcessingEnvironment,android.databinding.tool.DataBindingCompilerArgs,java.util.List)>(r1, r2, r4);

     label13:
        goto label15;

     label14:
        r19 = "android.databinding";

        r20 = "DataBinderMapperImpl";

        virtualinvoke r0.<android.databinding.tool.CompilerChef: void ensureDataBinder()>();

        $r7 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r5 = $r7.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        $r8 = new android.databinding.tool.writer.BindingMapperWriter;

        $r9 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        $r10 = virtualinvoke $r9.<android.databinding.tool.DataBinder: java.util.List getLayoutBinders()>();

        specialinvoke $r8.<android.databinding.tool.writer.BindingMapperWriter: void <init>(java.lang.String,java.lang.String,java.util.List,android.databinding.tool.DataBindingCompilerArgs,android.databinding.tool.LibTypes)>("android.databinding", "DataBinderMapperImpl", $r10, r2, r5);

        r6 = $r8;

        $r12 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.writer.JavaFileWriter mFileWriter>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.databinding.");

        $r14 = virtualinvoke r6.<android.databinding.tool.writer.BindingMapperWriter: java.lang.String getClassName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke r6.<android.databinding.tool.writer.BindingMapperWriter: java.lang.String write(java.util.Map)>(r3);

        virtualinvoke $r12.<android.databinding.tool.writer.JavaFileWriter: void writeToFile(java.lang.String,java.lang.String)>($r16, $r17);

     label15:
        return;
    }

    private void writeMapperForV1Compat(android.databinding.tool.DataBindingCompilerArgs, java.util.Map)
    {
        android.databinding.tool.CompilerChef r0, $r7;
        android.databinding.tool.DataBindingCompilerArgs r1;
        java.util.Map r2;
        android.databinding.tool.LibTypes r3;
        android.databinding.tool.writer.BindingMapperWriter r4, $r6;
        android.databinding.tool.reflection.ModelAnalyzer $r5;
        java.util.List $r8;
        java.lang.StringBuilder $r9, $r11, $r13;
        android.databinding.tool.writer.JavaFileWriter $r10;
        java.lang.String $r12, $r14, $r15;

        r0 := @this: android.databinding.tool.CompilerChef;

        r1 := @parameter0: android.databinding.tool.DataBindingCompilerArgs;

        r2 := @parameter1: java.util.Map;

        $r5 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r3 = $r5.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        $r6 = new android.databinding.tool.writer.BindingMapperWriter;

        $r7 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.CompilerChef mV1CompatChef>;

        $r8 = virtualinvoke $r7.<android.databinding.tool.CompilerChef: java.util.List getLayoutBinders()>();

        specialinvoke $r6.<android.databinding.tool.writer.BindingMapperWriter: void <init>(java.lang.String,java.lang.String,java.util.List,android.databinding.tool.DataBindingCompilerArgs,android.databinding.tool.LibTypes)>("android.databinding", "V1CompatDataBinderMapperImpl", $r8, r1, r3);

        r4 = $r6;

        $r10 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.writer.JavaFileWriter mFileWriter>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.databinding.");

        $r12 = virtualinvoke r4.<android.databinding.tool.writer.BindingMapperWriter: java.lang.String getClassName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke r4.<android.databinding.tool.writer.BindingMapperWriter: java.lang.String write(java.util.Map)>(r2);

        virtualinvoke $r10.<android.databinding.tool.writer.JavaFileWriter: void writeToFile(java.lang.String,java.lang.String)>($r14, $r15);

        return;
    }

    public java.util.List getLayoutBinders()
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.DataBinder $r1;
        java.util.List $r2;

        r0 := @this: android.databinding.tool.CompilerChef;

        $r1 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        $r2 = virtualinvoke $r1.<android.databinding.tool.DataBinder: java.util.List getLayoutBinders()>();

        return $r2;
    }

    private void writeMergedMapper(javax.'annotation'.processing.ProcessingEnvironment, android.databinding.tool.DataBindingCompilerArgs, java.util.List)
    {
        android.databinding.tool.CompilerChef r0, $r19;
        javax.'annotation'.processing.ProcessingEnvironment r1;
        android.databinding.tool.DataBindingCompilerArgs r2;
        java.util.List r3, r4;
        java.util.Set r5;
        java.lang.StringBuilder r6, $r16;
        android.databinding.tool.LibTypes r7;
        android.databinding.tool.writer.MergedBindingMapperWriter r8, $r18;
        com.squareup.javapoet.TypeSpec r9;
        java.lang.Throwable r10, $r29;
        java.util.stream.Stream $r11, $r13;
        java.util.function.Predicate $r12;
        java.util.stream.Collector $r14;
        java.lang.Object $r15;
        android.databinding.tool.reflection.ModelAnalyzer $r17;
        java.lang.String $r20, $r24, $r25;
        com.squareup.javapoet.JavaFile$Builder $r21;
        com.squareup.javapoet.JavaFile $r22;
        android.databinding.tool.writer.JavaFileWriter $r23;
        android.databinding.tool.processing.ScopedException $r30;
        java.lang.Object[] $r31;
        boolean $z0;

        r0 := @this: android.databinding.tool.CompilerChef;

        r1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;

        r2 := @parameter1: android.databinding.tool.DataBindingCompilerArgs;

        r3 := @parameter2: java.util.List;

        $r11 = interfaceinvoke r3.<java.util.List: java.util.stream.Stream stream()>();

        $r12 = dynamicinvoke "test" <java.util.function.Predicate (android.databinding.tool.DataBindingCompilerArgs,javax.'annotation'.processing.ProcessingEnvironment)>(r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <android.databinding.tool.CompilerChef: boolean lambda$writeMergedMapper$0(android.databinding.tool.DataBindingCompilerArgs,javax.'annotation'.processing.ProcessingEnvironment,java.lang.String)>, methodtype: boolean __METHODTYPE__(java.lang.String));

        $r13 = interfaceinvoke $r11.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r12);

        $r14 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r15 = interfaceinvoke $r13.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r14);

        r4 = (java.util.List) $r15;

        r5 = specialinvoke r0.<android.databinding.tool.CompilerChef: java.util.Set loadFeaturePackageIds(android.databinding.tool.DataBindingCompilerArgs)>(r2);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        r6 = $r16;

        $r17 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r7 = $r17.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        $r18 = new android.databinding.tool.writer.MergedBindingMapperWriter;

        $r19 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.CompilerChef mV1CompatChef>;

        if $r19 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke $r18.<android.databinding.tool.writer.MergedBindingMapperWriter: void <init>(java.util.List,android.databinding.tool.DataBindingCompilerArgs,java.util.Set,boolean,android.databinding.tool.LibTypes)>(r4, r2, r5, $z0, r7);

        r8 = $r18;

        r9 = virtualinvoke r8.<android.databinding.tool.writer.MergedBindingMapperWriter: com.squareup.javapoet.TypeSpec write()>();

     label3:
        $r20 = virtualinvoke r8.<android.databinding.tool.writer.MergedBindingMapperWriter: java.lang.String getPkg()>();

        $r21 = staticinvoke <com.squareup.javapoet.JavaFile: com.squareup.javapoet.JavaFile$Builder builder(java.lang.String,com.squareup.javapoet.TypeSpec)>($r20, r9);

        $r22 = virtualinvoke $r21.<com.squareup.javapoet.JavaFile$Builder: com.squareup.javapoet.JavaFile build()>();

        virtualinvoke $r22.<com.squareup.javapoet.JavaFile: void writeTo(java.lang.Appendable)>(r6);

        $r23 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.writer.JavaFileWriter mFileWriter>;

        $r24 = virtualinvoke r8.<android.databinding.tool.writer.MergedBindingMapperWriter: java.lang.String getQualifiedName()>();

        $r25 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<android.databinding.tool.writer.JavaFileWriter: void writeToFile(java.lang.String,java.lang.String)>($r24, $r25);

     label4:
        goto label6;

     label5:
        $r29 := @caughtexception;

        r10 = $r29;

        $r30 = new android.databinding.tool.processing.ScopedException;

        $r31 = newarray (java.lang.Object)[1];

        $r31[0] = r10;

        specialinvoke $r30.<android.databinding.tool.processing.ScopedException: void <init>(java.lang.String,java.lang.Object[])>("cannot generate merged mapper class", $r31);

        staticinvoke <android.databinding.tool.processing.Scope: void defer(android.databinding.tool.processing.ScopedException)>($r30);

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    private java.util.Set loadFeaturePackageIds(android.databinding.tool.DataBindingCompilerArgs)
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.DataBindingCompilerArgs r1;
        java.io.File r2, $r4;
        java.lang.String $r3, $r5;
        boolean $z0;
        android.databinding.tool.store.FeatureInfoList $r6;
        java.util.Set $r7, $r8, $r9;

        r0 := @this: android.databinding.tool.CompilerChef;

        r1 := @parameter0: android.databinding.tool.DataBindingCompilerArgs;

        $r3 = virtualinvoke r1.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getBaseFeatureInfoFolder()>();

        if $r3 != null goto label1;

        $r9 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r9;

     label1:
        $r4 = new java.io.File;

        $r5 = virtualinvoke r1.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getBaseFeatureInfoFolder()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r5, "all_features.json");

        r2 = $r4;

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r8 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r8;

     label2:
        $r6 = staticinvoke <android.databinding.tool.store.FeatureInfoList: android.databinding.tool.store.FeatureInfoList fromFile(java.io.File)>(r2);

        $r7 = virtualinvoke $r6.<android.databinding.tool.store.FeatureInfoList: java.util.Set getPackages()>();

        return $r7;
    }

    private void writeMapperForModule(android.databinding.tool.DataBindingCompilerArgs, java.util.Map)
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.DataBindingCompilerArgs r1;
        java.util.Map r2;
        android.databinding.tool.LibTypes r3;
        android.databinding.tool.writer.BindingMapperWriterV2 r4, $r12;
        com.squareup.javapoet.TypeSpec r5;
        java.lang.StringBuilder r6, $r13;
        java.lang.Throwable r7, $r20, $r24, r28;
        java.io.File $r8;
        java.lang.String $r9, $r10, $r14, $r18, $r19;
        android.databinding.tool.reflection.ModelAnalyzer $r11;
        com.squareup.javapoet.JavaFile$Builder $r15;
        com.squareup.javapoet.JavaFile $r16;
        android.databinding.tool.writer.JavaFileWriter $r17;
        android.databinding.tool.processing.ScopedException $r21, $r25;
        java.lang.Object[] $r22, $r26;
        android.databinding.tool.store.GenClassInfoLog $r23, r27, r29;

        r0 := @this: android.databinding.tool.CompilerChef;

        r1 := @parameter0: android.databinding.tool.DataBindingCompilerArgs;

        r2 := @parameter1: java.util.Map;

     label1:
        $r8 = new java.io.File;

        $r9 = virtualinvoke r1.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getClassLogDir()>();

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9);

        r27 = staticinvoke <android.databinding.tool.store.ResourceBundle: android.databinding.tool.store.GenClassInfoLog loadClassInfoFromFolder(java.io.File)>($r8);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        r28 = $r20;

        $r21 = new android.databinding.tool.processing.ScopedException;

        $r22 = newarray (java.lang.Object)[0];

        specialinvoke $r21.<android.databinding.tool.processing.ScopedException: void <init>(java.lang.String,java.lang.Object[])>("Cannot read class info log", $r22);

        staticinvoke <android.databinding.tool.processing.Scope: void defer(android.databinding.tool.processing.ScopedException)>($r21);

        $r23 = new android.databinding.tool.store.GenClassInfoLog;

        specialinvoke $r23.<android.databinding.tool.store.GenClassInfoLog: void <init>()>();

        r27 = $r23;

     label4:
        $r10 = virtualinvoke r1.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getModulePackage()>();

        r29 = virtualinvoke r27.<android.databinding.tool.store.GenClassInfoLog: android.databinding.tool.store.GenClassInfoLog createPackageInfoLog(java.lang.String)>($r10);

        $r11 = staticinvoke <android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelAnalyzer getInstance()>();

        r3 = $r11.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.LibTypes libTypes>;

        $r12 = new android.databinding.tool.writer.BindingMapperWriterV2;

        specialinvoke $r12.<android.databinding.tool.writer.BindingMapperWriterV2: void <init>(android.databinding.tool.store.GenClassInfoLog,android.databinding.tool.DataBindingCompilerArgs,android.databinding.tool.LibTypes)>(r29, r1, r3);

        r4 = $r12;

        r5 = virtualinvoke r4.<android.databinding.tool.writer.BindingMapperWriterV2: com.squareup.javapoet.TypeSpec write(java.util.Map)>(r2);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        r6 = $r13;

     label5:
        $r14 = virtualinvoke r4.<android.databinding.tool.writer.BindingMapperWriterV2: java.lang.String getPkg()>();

        $r15 = staticinvoke <com.squareup.javapoet.JavaFile: com.squareup.javapoet.JavaFile$Builder builder(java.lang.String,com.squareup.javapoet.TypeSpec)>($r14, r5);

        $r16 = virtualinvoke $r15.<com.squareup.javapoet.JavaFile$Builder: com.squareup.javapoet.JavaFile build()>();

        virtualinvoke $r16.<com.squareup.javapoet.JavaFile: void writeTo(java.lang.Appendable)>(r6);

        $r17 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.writer.JavaFileWriter mFileWriter>;

        $r18 = virtualinvoke r4.<android.databinding.tool.writer.BindingMapperWriterV2: java.lang.String getQualifiedName()>();

        $r19 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<android.databinding.tool.writer.JavaFileWriter: void writeToFile(java.lang.String,java.lang.String)>($r18, $r19);

     label6:
        goto label8;

     label7:
        $r24 := @caughtexception;

        r7 = $r24;

        $r25 = new android.databinding.tool.processing.ScopedException;

        $r26 = newarray (java.lang.Object)[1];

        $r26[0] = r7;

        specialinvoke $r25.<android.databinding.tool.processing.ScopedException: void <init>(java.lang.String,java.lang.Object[])>("cannot generate mapper class", $r26);

        staticinvoke <android.databinding.tool.processing.Scope: void defer(android.databinding.tool.processing.ScopedException)>($r25);

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void addBRVariables(android.databinding.tool.CompilerChef$BindableHolder)
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.CompilerChef$BindableHolder r1;
        java.util.Iterator r2, r4;
        android.databinding.tool.LayoutBinder r3;
        java.lang.String r5, $r12;
        android.databinding.tool.DataBinder $r6;
        java.util.List $r7;
        boolean $z0, $z1;
        java.lang.Object $r8, $r11;
        java.util.HashMap $r9;
        java.util.Set $r10;

        r0 := @this: android.databinding.tool.CompilerChef;

        r1 := @parameter0: android.databinding.tool.CompilerChef$BindableHolder;

        virtualinvoke r0.<android.databinding.tool.CompilerChef: void ensureDataBinder()>();

        $r6 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        $r7 = $r6.<android.databinding.tool.DataBinder: java.util.List mLayoutBinders>;

        r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.databinding.tool.LayoutBinder) $r8;

        $r9 = virtualinvoke r3.<android.databinding.tool.LayoutBinder: java.util.HashMap getUserDefinedVariables()>();

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r11;

        $r12 = virtualinvoke r3.<android.databinding.tool.LayoutBinder: java.lang.String getClassName()>();

        interfaceinvoke r1.<android.databinding.tool.CompilerChef$BindableHolder: void addVariable(java.lang.String,java.lang.String)>(r5, $r12);

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    public void sealModels()
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.DataBinder $r1;

        r0 := @this: android.databinding.tool.CompilerChef;

        virtualinvoke r0.<android.databinding.tool.CompilerChef: void ensureDataBinder()>();

        $r1 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        virtualinvoke $r1.<android.databinding.tool.DataBinder: void sealModels()>();

        return;
    }

    public void writeViewBinderInterfaces(boolean)
    {
        android.databinding.tool.CompilerChef r0;
        boolean z0;
        android.databinding.tool.DataBinder $r1;

        r0 := @this: android.databinding.tool.CompilerChef;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.databinding.tool.CompilerChef: void ensureDataBinder()>();

        $r1 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        virtualinvoke $r1.<android.databinding.tool.DataBinder: void writerBaseClasses(boolean)>(z0);

        return;
    }

    public void writeViewBinders(int)
    {
        android.databinding.tool.CompilerChef r0;
        int i0;
        android.databinding.tool.DataBinder $r1;

        r0 := @this: android.databinding.tool.CompilerChef;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.databinding.tool.CompilerChef: void ensureDataBinder()>();

        $r1 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        virtualinvoke $r1.<android.databinding.tool.DataBinder: void writeBinders(int)>(i0);

        return;
    }

    public void writeComponent()
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.DataBinder $r1;

        r0 := @this: android.databinding.tool.CompilerChef;

        virtualinvoke r0.<android.databinding.tool.CompilerChef: void ensureDataBinder()>();

        $r1 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        virtualinvoke $r1.<android.databinding.tool.DataBinder: void writeComponent()>();

        return;
    }

    public java.util.Set getClassesToBeStripped()
    {
        android.databinding.tool.CompilerChef r0;
        android.databinding.tool.DataBinder $r1;
        java.util.Set $r2;

        r0 := @this: android.databinding.tool.CompilerChef;

        virtualinvoke r0.<android.databinding.tool.CompilerChef: void ensureDataBinder()>();

        $r1 = r0.<android.databinding.tool.CompilerChef: android.databinding.tool.DataBinder mDataBinder>;

        $r2 = virtualinvoke $r1.<android.databinding.tool.DataBinder: java.util.Set getClassesToBeStripped()>();

        return $r2;
    }

    private static boolean lambda$writeMergedMapper$0(android.databinding.tool.DataBindingCompilerArgs, javax.'annotation'.processing.ProcessingEnvironment, java.lang.String)
    {
        android.databinding.tool.DataBindingCompilerArgs r0;
        javax.'annotation'.processing.ProcessingEnvironment r1;
        java.lang.String r2, r3, $r5;
        javax.lang.model.element.TypeElement r4;
        boolean $z0, $z1;
        javax.lang.model.util.Elements $r6;

        r0 := @parameter0: android.databinding.tool.DataBindingCompilerArgs;

        r1 := @parameter1: javax.'annotation'.processing.ProcessingEnvironment;

        r2 := @parameter2: java.lang.String;

        $r5 = virtualinvoke r0.<android.databinding.tool.DataBindingCompilerArgs: java.lang.String getModulePackage()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r3 = staticinvoke <android.databinding.tool.writer.BindingMapperWriterV2: java.lang.String createMapperQName(java.lang.String)>(r2);

        $r6 = interfaceinvoke r1.<javax.'annotation'.processing.ProcessingEnvironment: javax.lang.model.util.Elements getElementUtils()>();

        r4 = interfaceinvoke $r6.<javax.lang.model.util.Elements: javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence)>(r3);

        if r4 == null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[23];

        $r0[0] = "BASE";

        $r0[1] = "BASE_1_1";

        $r0[2] = "CUPCAKE";

        $r0[3] = "DONUT";

        $r0[4] = "ECLAIR";

        $r0[5] = "ECLAIRE_0_1";

        $r0[6] = "ECLAIR_MR1";

        $r0[7] = "FROYO";

        $r0[8] = "GINGERBREAD";

        $r0[9] = "GINGERBREAD_MR1";

        $r0[10] = "HONEYCOMB";

        $r0[11] = "HONEYCOMB_MR1";

        $r0[12] = "HONEYCOMB_MR2";

        $r0[13] = "ICE_CREAM_SANDWICH";

        $r0[14] = "ICE_CREAM_SANDWICH_MR1";

        $r0[15] = "JELLY_BEAN";

        $r0[16] = "JELLY_BEAN_MR1";

        $r0[17] = "JELLY_BEAN_MR2";

        $r0[18] = "KITKAT";

        $r0[19] = "KITKAT_WATCH";

        $r0[20] = "LOLLIPOP";

        $r0[21] = "LOLLIPOP_MR1";

        $r0[22] = "M";

        <android.databinding.tool.CompilerChef: java.lang.String[] VERSION_CODES> = $r0;

        return;
    }

android.databinding.tool.CompilerChef$BindableHolder
<android.databinding.tool.CompilerChef$BindableHolder: void addVariable(java.lang.String,java.lang.String)>
