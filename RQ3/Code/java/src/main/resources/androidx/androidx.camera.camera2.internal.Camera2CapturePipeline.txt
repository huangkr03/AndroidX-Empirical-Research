androidx.camera.camera2.internal.Camera2CapturePipeline
<androidx.camera.camera2.internal.Camera2CapturePipeline: java.lang.String TAG>
<androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AF_CONVERGED_STATE_SET>
<androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AWB_CONVERGED_STATE_SET>
<androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AE_CONVERGED_STATE_SET>
<androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AE_TORCH_AS_FLASH_CONVERGED_STATE_SET>
<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>
<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.camera2.internal.compat.workaround.UseTorchAsFlash mUseTorchAsFlash>
<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.core.impl.Quirks mCameraQuirk>
<androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.Camera2CapturePipeline: boolean mIsLegacyDevice>
<androidx.camera.camera2.internal.Camera2CapturePipeline: int mTemplate>
    void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl, androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat, androidx.camera.core.impl.Quirks, java.util.concurrent.Executor)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl r1;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r2;
        androidx.camera.core.impl.Quirks r3;
        java.util.concurrent.Executor r4;
        java.lang.Integer r5;
        android.hardware.camera2.CameraCharacteristics$Key $r6;
        java.lang.Object $r7;
        int $i0;
        boolean $z0;
        androidx.camera.camera2.internal.compat.workaround.UseTorchAsFlash $r9;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r2 := @parameter1: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat;

        r3 := @parameter2: androidx.camera.core.impl.Quirks;

        r4 := @parameter3: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: int mTemplate> = 1;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl> = r1;

        $r6 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>;

        $r7 = virtualinvoke r2.<androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r6);

        r5 = (java.lang.Integer) $r7;

        if r5 == null goto label1;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: boolean mIsLegacyDevice> = $z0;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.concurrent.Executor mExecutor> = r4;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.core.impl.Quirks mCameraQuirk> = r3;

        $r9 = new androidx.camera.camera2.internal.compat.workaround.UseTorchAsFlash;

        specialinvoke $r9.<androidx.camera.camera2.internal.compat.workaround.UseTorchAsFlash: void <init>(androidx.camera.core.impl.Quirks)>(r3);

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.camera2.internal.compat.workaround.UseTorchAsFlash mUseTorchAsFlash> = $r9;

        return;
    }

    public void setTemplate(int)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline r0;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline;

        i0 := @parameter0: int;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: int mTemplate> = i0;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture submitStillCaptures(java.util.List, int, int, int)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline r0;
        java.util.List r1;
        int i0, i1, i2, $i3;
        androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture r2, $r4;
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r3, $r6;
        androidx.camera.core.impl.Quirks $r5;
        boolean $z0, $z1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r7, $r10, $r15, $r17;
        java.util.concurrent.Executor $r8, $r14;
        androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask $r9;
        com.google.common.util.concurrent.ListenableFuture $r11, $r12;
        androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask $r13;
        androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask $r16;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r4 = new androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.core.impl.Quirks mCameraQuirk>;

        specialinvoke $r4.<androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture: void <init>(androidx.camera.core.impl.Quirks)>($r5);

        r2 = $r4;

        $r6 = new androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        $i3 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: int mTemplate>;

        $r8 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.concurrent.Executor mExecutor>;

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: boolean mIsLegacyDevice>;

        specialinvoke $r6.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: void <init>(int,java.util.concurrent.Executor,androidx.camera.camera2.internal.Camera2CameraControlImpl,boolean,androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture)>($i3, $r8, $r7, $z0, r2);

        r3 = $r6;

        if i0 != 0 goto label1;

        $r16 = new androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask;

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        specialinvoke $r16.<androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask: void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl)>($r17);

        virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: void addTask(androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask)>($r16);

     label1:
        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: boolean isTorchAsFlash(int)>(i2);

        if $z1 == 0 goto label2;

        $r13 = new androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask;

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r14 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.concurrent.Executor mExecutor>;

        specialinvoke $r13.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl,int,java.util.concurrent.Executor)>($r15, i1, $r14);

        virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: void addTask(androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask)>($r13);

        goto label3;

     label2:
        $r9 = new androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask;

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        specialinvoke $r9.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl,int,androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture)>($r10, i1, r2);

        virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: void addTask(androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask)>($r9);

     label3:
        $r11 = virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: com.google.common.util.concurrent.ListenableFuture executeCapture(java.util.List,int)>(r1, i1);

        $r12 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r11);

        return $r12;
    }

    static com.google.common.util.concurrent.ListenableFuture waitForResult(long, androidx.camera.camera2.internal.Camera2CameraControlImpl, androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker)
    {
        long l0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl r0;
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker r1;
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener r2, $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        l0 := @parameter0: long;

        r0 := @parameter1: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r1 := @parameter2: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker;

        $r3 = new androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener;

        specialinvoke $r3.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: void <init>(long,androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker)>(l0, r1);

        r2 = $r3;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void addCaptureResultListener(androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener)>(r2);

        $r4 = virtualinvoke r2.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: com.google.common.util.concurrent.ListenableFuture getFuture()>();

        return $r4;
    }

    static boolean is3AConverged(android.hardware.camera2.TotalCaptureResult, boolean)
    {
        android.hardware.camera2.TotalCaptureResult r0;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z13, $z14, $z15, $z16;
        androidx.camera.camera2.internal.Camera2CameraCaptureResult r1, $r2;
        androidx.camera.core.impl.CameraCaptureMetaData$AfMode $r3, $r4, $r25, $r26;
        android.hardware.camera2.CaptureResult$Key $r5, $r29;
        java.lang.Object $r6, $r30;
        java.lang.Integer $r7, $r31;
        int $i0, $i1;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r15, $r17;
        androidx.camera.core.impl.CameraCaptureMetaData$AeState $r10, $r22, $r24;
        androidx.camera.core.impl.CameraCaptureMetaData$AfState $r13, $r28;
        androidx.camera.core.impl.CameraCaptureMetaData$AwbState $r16, $r20;
        java.lang.String $r18;
        java.util.Set $r19, $r21, $r23, $r27;

        r0 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        z0 := @parameter1: boolean;

        if r0 != null goto label01;

        return 0;

     label01:
        $r2 = new androidx.camera.camera2.internal.Camera2CameraCaptureResult;

        specialinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: void <init>(android.hardware.camera2.CaptureResult)>(r0);

        r1 = $r2;

        $r3 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: androidx.camera.core.impl.CameraCaptureMetaData$AfMode getAfMode()>();

        $r4 = <androidx.camera.core.impl.CameraCaptureMetaData$AfMode: androidx.camera.core.impl.CameraCaptureMetaData$AfMode OFF>;

        if $r3 == $r4 goto label02;

        $r25 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: androidx.camera.core.impl.CameraCaptureMetaData$AfMode getAfMode()>();

        $r26 = <androidx.camera.core.impl.CameraCaptureMetaData$AfMode: androidx.camera.core.impl.CameraCaptureMetaData$AfMode UNKNOWN>;

        if $r25 == $r26 goto label02;

        $r27 = <androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AF_CONVERGED_STATE_SET>;

        $r28 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: androidx.camera.core.impl.CameraCaptureMetaData$AfState getAfState()>();

        $z8 = interfaceinvoke $r27.<java.util.Set: boolean contains(java.lang.Object)>($r28);

        if $z8 == 0 goto label03;

     label02:
        $z9 = 1;

        goto label04;

     label03:
        $z9 = 0;

     label04:
        z1 = $z9;

        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_MODE>;

        $r6 = virtualinvoke r0.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r5);

        $r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label05;

        $z10 = 1;

        goto label06;

     label05:
        $z10 = 0;

     label06:
        z2 = $z10;

        if z0 == 0 goto label10;

        if z2 != 0 goto label07;

        $r23 = <androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AE_TORCH_AS_FLASH_CONVERGED_STATE_SET>;

        $r24 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: androidx.camera.core.impl.CameraCaptureMetaData$AeState getAeState()>();

        $z7 = interfaceinvoke $r23.<java.util.Set: boolean contains(java.lang.Object)>($r24);

        if $z7 == 0 goto label08;

     label07:
        $z11 = 1;

        goto label09;

     label08:
        $z11 = 0;

     label09:
        z12 = $z11;

        goto label14;

     label10:
        if z2 != 0 goto label11;

        $r21 = <androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AE_CONVERGED_STATE_SET>;

        $r22 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: androidx.camera.core.impl.CameraCaptureMetaData$AeState getAeState()>();

        $z6 = interfaceinvoke $r21.<java.util.Set: boolean contains(java.lang.Object)>($r22);

        if $z6 == 0 goto label12;

     label11:
        $z13 = 1;

        goto label13;

     label12:
        $z13 = 0;

     label13:
        z12 = $z13;

     label14:
        $r29 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AWB_MODE>;

        $r30 = virtualinvoke r0.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r29);

        $r31 = (java.lang.Integer) $r30;

        $i1 = virtualinvoke $r31.<java.lang.Integer: int intValue()>();

        if $i1 != 0 goto label15;

        $z14 = 1;

        goto label16;

     label15:
        $z14 = 0;

     label16:
        z3 = $z14;

        if z3 != 0 goto label17;

        $r19 = <androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AWB_CONVERGED_STATE_SET>;

        $r20 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: androidx.camera.core.impl.CameraCaptureMetaData$AwbState getAwbState()>();

        $z5 = interfaceinvoke $r19.<java.util.Set: boolean contains(java.lang.Object)>($r20);

        if $z5 == 0 goto label18;

     label17:
        $z15 = 1;

        goto label19;

     label18:
        $z15 = 0;

     label19:
        z4 = $z15;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkCaptureResult, AE=");

        $r10 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: androidx.camera.core.impl.CameraCaptureMetaData$AeState getAeState()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AF =");

        $r13 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: androidx.camera.core.impl.CameraCaptureMetaData$AfState getAfState()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AWB=");

        $r16 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraCaptureResult: androidx.camera.core.impl.CameraCaptureMetaData$AwbState getAwbState()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", $r18);

        if z1 == 0 goto label20;

        if z12 == 0 goto label20;

        if z4 == 0 goto label20;

        $z16 = 1;

        goto label21;

     label20:
        $z16 = 0;

     label21:
        return $z16;
    }

    static boolean isFlashRequired(int, android.hardware.camera2.TotalCaptureResult)
    {
        int i0, $i1;
        android.hardware.camera2.TotalCaptureResult r0;
        java.lang.Integer r1, $r5;
        android.hardware.camera2.CaptureResult$Key $r2;
        java.lang.Object $r3;
        java.lang.AssertionError $r4;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: android.hardware.camera2.TotalCaptureResult;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label7;
            default: goto label8;
        };

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        $r2 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_STATE>;

        $r3 = virtualinvoke r0.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r2);

        $r5 = (java.lang.Integer) $r3;

        goto label4;

     label3:
        $r5 = null;

     label4:
        r1 = $r5;

        if r1 == null goto label5;

        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i1 != 4 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;

     label7:
        return 0;

     label8:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(int)>(i0);

        throw $r4;
    }

    private boolean isTorchAsFlash(int)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline r0;
        int i0, $i1;
        androidx.camera.camera2.internal.compat.workaround.UseTorchAsFlash $r1;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: androidx.camera.camera2.internal.compat.workaround.UseTorchAsFlash mUseTorchAsFlash>;

        $z0 = virtualinvoke $r1.<androidx.camera.camera2.internal.compat.workaround.UseTorchAsFlash: boolean shouldUseTorchAsFlash()>();

        if $z0 != 0 goto label1;

        $i1 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline: int mTemplate>;

        if $i1 == 3 goto label1;

        if i0 != 1 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    static void <clinit>()
    {
        java.util.EnumSet r0, $r5, $r9, $r14;
        androidx.camera.core.impl.CameraCaptureMetaData$AfState $r1, $r2, $r3, $r4;
        java.util.Set $r6, $r10, $r15, $r16, $r19;
        androidx.camera.core.impl.CameraCaptureMetaData$AwbState $r7, $r8;
        androidx.camera.core.impl.CameraCaptureMetaData$AeState $r11, $r12, $r13, $r17, $r18;

        $r4 = <androidx.camera.core.impl.CameraCaptureMetaData$AfState: androidx.camera.core.impl.CameraCaptureMetaData$AfState PASSIVE_FOCUSED>;

        $r3 = <androidx.camera.core.impl.CameraCaptureMetaData$AfState: androidx.camera.core.impl.CameraCaptureMetaData$AfState PASSIVE_NOT_FOCUSED>;

        $r2 = <androidx.camera.core.impl.CameraCaptureMetaData$AfState: androidx.camera.core.impl.CameraCaptureMetaData$AfState LOCKED_FOCUSED>;

        $r1 = <androidx.camera.core.impl.CameraCaptureMetaData$AfState: androidx.camera.core.impl.CameraCaptureMetaData$AfState LOCKED_NOT_FOCUSED>;

        $r5 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)>($r4, $r3, $r2, $r1);

        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r5);

        <androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AF_CONVERGED_STATE_SET> = $r6;

        $r8 = <androidx.camera.core.impl.CameraCaptureMetaData$AwbState: androidx.camera.core.impl.CameraCaptureMetaData$AwbState CONVERGED>;

        $r7 = <androidx.camera.core.impl.CameraCaptureMetaData$AwbState: androidx.camera.core.impl.CameraCaptureMetaData$AwbState UNKNOWN>;

        $r9 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r8, $r7);

        $r10 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r9);

        <androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AWB_CONVERGED_STATE_SET> = $r10;

        $r13 = <androidx.camera.core.impl.CameraCaptureMetaData$AeState: androidx.camera.core.impl.CameraCaptureMetaData$AeState CONVERGED>;

        $r12 = <androidx.camera.core.impl.CameraCaptureMetaData$AeState: androidx.camera.core.impl.CameraCaptureMetaData$AeState FLASH_REQUIRED>;

        $r11 = <androidx.camera.core.impl.CameraCaptureMetaData$AeState: androidx.camera.core.impl.CameraCaptureMetaData$AeState UNKNOWN>;

        $r14 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>($r13, $r12, $r11);

        $r15 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r14);

        <androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AE_CONVERGED_STATE_SET> = $r15;

        $r16 = <androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AE_CONVERGED_STATE_SET>;

        r0 = staticinvoke <java.util.EnumSet: java.util.EnumSet copyOf(java.util.Collection)>($r16);

        $r17 = <androidx.camera.core.impl.CameraCaptureMetaData$AeState: androidx.camera.core.impl.CameraCaptureMetaData$AeState FLASH_REQUIRED>;

        virtualinvoke r0.<java.util.EnumSet: boolean remove(java.lang.Object)>($r17);

        $r18 = <androidx.camera.core.impl.CameraCaptureMetaData$AeState: androidx.camera.core.impl.CameraCaptureMetaData$AeState UNKNOWN>;

        virtualinvoke r0.<java.util.EnumSet: boolean remove(java.lang.Object)>($r18);

        $r19 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r0);

        <androidx.camera.camera2.internal.Camera2CapturePipeline: java.util.Set AE_TORCH_AS_FLASH_CONVERGED_STATE_SET> = $r19;

        return;
    }

androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask
<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>
<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture mOverrideAeModeForStillCapture>
<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: int mFlashMode>
<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: boolean mIsExecuted>
    void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl, int, androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl r1;
        int i0;
        androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        i0 := @parameter1: int;

        r2 := @parameter2: androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: boolean mIsExecuted> = 0;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl> = r1;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: int mFlashMode> = i0;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture mOverrideAeModeForStillCapture> = r2;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture preCapture(android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask r0;
        android.hardware.camera2.TotalCaptureResult r1;
        com.google.common.util.concurrent.ListenableFuture r2, $r4;
        int $i0;
        boolean $z0;
        java.lang.Boolean $r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r5;
        androidx.camera.core.impl.utils.futures.FutureChain $r6, $r9;
        androidx.arch.core.util.Function $r7;
        java.util.concurrent.Executor $r8;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask;

        r1 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: int mFlashMode>;

        $z0 = staticinvoke <androidx.camera.camera2.internal.Camera2CapturePipeline: boolean isFlashRequired(int,android.hardware.camera2.TotalCaptureResult)>($i0, r1);

        if $z0 == 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", "Trigger AE");

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: boolean mIsExecuted> = 1;

        $r5 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: java.lang.Object lambda$preCapture$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r5);

        $r6 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>(r2);

        $r7 = dynamicinvoke "apply" <androidx.arch.core.util.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: java.lang.Boolean lambda$preCapture$1(java.lang.Void)>, methodtype: java.lang.Boolean __METHODTYPE__(java.lang.Void));

        $r8 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        $r9 = virtualinvoke $r6.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transform(androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r7, $r8);

        return $r9;

     label1:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>($r3);

        return $r4;
    }

    public boolean isCaptureResultNeeded()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: int mFlashMode>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void postCapture()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask r0;
        boolean $z0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r1;
        androidx.camera.camera2.internal.FocusMeteringControl $r2;
        androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: boolean mIsExecuted>;

        if $z0 == 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", "cancel TriggerAePreCapture");

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl getFocusMeteringControl()>();

        virtualinvoke $r2.<androidx.camera.camera2.internal.FocusMeteringControl: void cancelAfAeTrigger(boolean,boolean)>(0, 1);

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture mOverrideAeModeForStillCapture>;

        virtualinvoke $r3.<androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture: void onAePrecaptureFinished()>();

     label1:
        return;
    }

    private static java.lang.Boolean lambda$preCapture$1(java.lang.Void)
    {
        java.lang.Void r0;
        java.lang.Boolean $r1;

        r0 := @parameter0: java.lang.Void;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r1;
    }

    private java.lang.Object lambda$preCapture$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r2;
        androidx.camera.camera2.internal.FocusMeteringControl $r3;
        androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r3 = virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl getFocusMeteringControl()>();

        virtualinvoke $r3.<androidx.camera.camera2.internal.FocusMeteringControl: void triggerAePrecapture(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r1);

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AePreCaptureTask: androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture mOverrideAeModeForStillCapture>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture: void onAePrecaptureStarted()>();

        return "AePreCapture";
    }

androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask
<androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>
<androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask: boolean mIsExecuted>
    void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask: boolean mIsExecuted> = 0;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl> = r1;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture preCapture(android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask r0;
        android.hardware.camera2.TotalCaptureResult r1;
        com.google.common.util.concurrent.ListenableFuture r2;
        java.lang.Integer r3, r4;
        java.lang.Boolean $r5;
        android.hardware.camera2.CaptureResult$Key $r6, $r8;
        java.lang.Object $r7, $r9;
        int $i0, $i1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r10;
        androidx.camera.camera2.internal.FocusMeteringControl $r11;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask;

        r1 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        r2 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>($r5);

        if r1 != null goto label1;

        return r2;

     label1:
        $r6 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_MODE>;

        $r7 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r6);

        r3 = (java.lang.Integer) $r7;

        if r3 != null goto label2;

        return r2;

     label2:
        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label3;
            default: goto label4;
        };

     label3:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", "TriggerAf? AF mode auto");

        $r8 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_STATE>;

        $r9 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r8);

        r4 = (java.lang.Integer) $r9;

        if r4 == null goto label4;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i1 != 0 goto label4;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", "Trigger AF");

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask: boolean mIsExecuted> = 1;

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r11 = virtualinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl getFocusMeteringControl()>();

        virtualinvoke $r11.<androidx.camera.camera2.internal.FocusMeteringControl: void triggerAf(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,boolean)>(null, 0);

        return r2;

     label4:
        return r2;
    }

    public boolean isCaptureResultNeeded()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask r0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask;

        return 1;
    }

    public void postCapture()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask r0;
        boolean $z0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r1;
        androidx.camera.camera2.internal.FocusMeteringControl $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask: boolean mIsExecuted>;

        if $z0 == 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", "cancel TriggerAF");

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$AfTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.FocusMeteringControl getFocusMeteringControl()>();

        virtualinvoke $r2.<androidx.camera.camera2.internal.FocusMeteringControl: void cancelAfAeTrigger(boolean,boolean)>(1, 0);

     label1:
        return;
    }

androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline this$0>
    void <init>(androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1 r0;
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture preCapture(android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1 r0;
        android.hardware.camera2.TotalCaptureResult r1;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask r4;
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline $r6;
        java.util.List $r7;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r8, $r11, $r13;
        androidx.arch.core.util.Function $r9;
        java.util.concurrent.Executor $r10;
        java.lang.Object $r12;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1;

        r1 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline this$0>;

        $r7 = $r6.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.List mTasks>;

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask) $r12;

        $r13 = interfaceinvoke r4.<androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask: com.google.common.util.concurrent.ListenableFuture preCapture(android.hardware.camera2.TotalCaptureResult)>(r1);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        goto label1;

     label2:
        $r8 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.util.Collection)>(r2);

        $r9 = dynamicinvoke "apply" <androidx.arch.core.util.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1: java.lang.Boolean lambda$preCapture$0(java.util.List)>, methodtype: java.lang.Boolean __METHODTYPE__(java.util.List));

        $r10 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        $r11 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r8, $r9, $r10);

        return $r11;
    }

    public boolean isCaptureResultNeeded()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1 r0;
        java.util.Iterator r1;
        androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask r2;
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline $r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline this$0>;

        $r4 = $r3.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.List mTasks>;

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask) $r5;

        $z1 = interfaceinvoke r2.<androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask: boolean isCaptureResultNeeded()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public void postCapture()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1 r0;
        java.util.Iterator r1;
        androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask r2;
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline this$0>;

        $r4 = $r3.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.List mTasks>;

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask) $r5;

        interfaceinvoke r2.<androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask: void postCapture()>();

        goto label1;

     label2:
        return;
    }

    private static java.lang.Boolean lambda$preCapture$0(java.util.List)
    {
        java.util.List r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z0 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>($r1);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r2;
    }

androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline this$0>
    void <init>(androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline, androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2 r0;
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline this$0> = r1;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer> = r2;

        specialinvoke r0.<androidx.camera.core.impl.CameraCaptureCallback: void <init>()>();

        return;
    }

    public void onCaptureCompleted(androidx.camera.core.impl.CameraCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2 r0;
        androidx.camera.core.impl.CameraCaptureResult r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureResult;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        virtualinvoke $r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;
    }

    public void onCaptureFailed(androidx.camera.core.impl.CameraCaptureFailure)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2 r0;
        androidx.camera.core.impl.CameraCaptureFailure r1;
        java.lang.String r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        androidx.camera.core.impl.CameraCaptureFailure$Reason $r5;
        androidx.camera.core.ImageCaptureException $r7;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r8;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2;

        r1 := @parameter0: androidx.camera.core.impl.CameraCaptureFailure;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Capture request failed with reason ");

        $r5 = virtualinvoke r1.<androidx.camera.core.impl.CameraCaptureFailure: androidx.camera.core.impl.CameraCaptureFailure$Reason getReason()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        $r7 = new androidx.camera.core.ImageCaptureException;

        specialinvoke $r7.<androidx.camera.core.ImageCaptureException: void <init>(int,java.lang.String,java.lang.Throwable)>(2, r2, null);

        virtualinvoke $r8.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r7);

        return;
    }

    public void onCaptureCancelled()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2 r0;
        java.lang.String r1;
        androidx.camera.core.ImageCaptureException $r2;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2;

        r1 = "Capture request is cancelled because camera is closed";

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2: androidx.concurrent.futures.CallbackToFutureAdapter$Completer val$completer>;

        $r2 = new androidx.camera.core.ImageCaptureException;

        specialinvoke $r2.<androidx.camera.core.ImageCaptureException: void <init>(int,java.lang.String,java.lang.Throwable)>(3, r1, null);

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r2);

        return;
    }

androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long CHECK_3A_TIMEOUT_IN_NS>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long CHECK_3A_WITH_FLASH_TIMEOUT_IN_NS>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: int mTemplate>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture mOverrideAeModeForStillCapture>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: boolean mIsLegacyDevice>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long mTimeout3A>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.List mTasks>
<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask mPipelineSubTask>
    void <init>(int, java.util.concurrent.Executor, androidx.camera.camera2.internal.Camera2CameraControlImpl, boolean, androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        int i0;
        java.util.concurrent.Executor r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl r2;
        boolean z0;
        androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture r3;
        long $l1;
        java.util.ArrayList $r4;
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1 $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        z0 := @parameter3: boolean;

        r3 := @parameter4: androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l1 = <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long CHECK_3A_TIMEOUT_IN_NS>;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long mTimeout3A> = $l1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.List mTasks> = $r4;

        $r5 = new androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1;

        specialinvoke $r5.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$1: void <init>(androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline)>(r0);

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask mPipelineSubTask> = $r5;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: int mTemplate> = i0;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.concurrent.Executor mExecutor> = r1;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl> = r2;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: boolean mIsLegacyDevice> = z0;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture mOverrideAeModeForStillCapture> = r3;

        return;
    }

    void addTask(androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask r1;
        java.util.List $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.List mTasks>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void setTimeout3A(long)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        long l0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        l0 := @parameter0: long;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long mTimeout3A> = l0;

        return;
    }

    com.google.common.util.concurrent.ListenableFuture executeCapture(java.util.List, int)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        java.util.List r1, $r2;
        int i0;
        boolean $z0, $z1;
        androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask $r4, $r19;
        androidx.camera.core.impl.utils.futures.FutureChain $r5, $r8, $r15, r18;
        androidx.camera.core.impl.utils.futures.AsyncFunction $r6, $r9, $r16;
        java.util.concurrent.Executor $r7, $r10, $r17, $r21;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r11;
        java.lang.Object r12;
        com.google.common.util.concurrent.ListenableFuture $r13, r14, r22;
        java.lang.Runnable $r20;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r12 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.List mTasks>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask mPipelineSubTask>;

        $z1 = interfaceinvoke $r4.<androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask: boolean isCaptureResultNeeded()>();

        if $z1 == 0 goto label1;

        $r11 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r13 = staticinvoke <androidx.camera.camera2.internal.Camera2CapturePipeline: com.google.common.util.concurrent.ListenableFuture waitForResult(long,androidx.camera.camera2.internal.Camera2CameraControlImpl,androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker)>(0L, $r11, null);

        goto label2;

     label1:
        $r13 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

     label2:
        r14 = $r13;

        $r5 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>(r14);

        $r6 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline,int)>(r0, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: com.google.common.util.concurrent.ListenableFuture lambda$executeCapture$0(int,android.hardware.camera2.TotalCaptureResult)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.concurrent.Executor mExecutor>;

        $r8 = virtualinvoke $r5.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r6, $r7);

        $r9 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: com.google.common.util.concurrent.ListenableFuture lambda$executeCapture$2(java.lang.Boolean)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Boolean));

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.concurrent.Executor mExecutor>;

        r12 = virtualinvoke $r8.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r9, $r10);

     label3:
        r22 = (com.google.common.util.concurrent.ListenableFuture) r12;

        $r15 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>(r22);

        $r16 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline,java.util.List,int)>(r0, r1, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: com.google.common.util.concurrent.ListenableFuture lambda$executeCapture$3(java.util.List,int,android.hardware.camera2.TotalCaptureResult)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.concurrent.Executor mExecutor>;

        r18 = virtualinvoke $r15.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r16, $r17);

        $r19 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask mPipelineSubTask>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r19);

        $r20 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask)>($r19) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_INTERFACE" <androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask: void postCapture()>, methodtype: void __METHODTYPE__());

        $r21 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.util.concurrent.Executor mExecutor>;

        interfaceinvoke r18.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r20, $r21);

        return r18;
    }

    com.google.common.util.concurrent.ListenableFuture submitConfigsInternal(java.util.List, int)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        java.util.List r1;
        int i0, $i1;
        java.util.ArrayList r2, r3, $r8, $r9;
        java.util.Iterator r4;
        androidx.camera.core.impl.CaptureConfig r5, $r16;
        androidx.camera.core.impl.CaptureConfig$Builder r6;
        androidx.camera.core.ImageProxy r7;
        boolean z0, $z1, $z2, $z5, $z6, $z7, $z8;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r10, $r17, $r19, $r21, $r24;
        com.google.common.util.concurrent.ListenableFuture $r11, $r15;
        java.lang.Object $r12;
        androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture $r13;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r14;
        androidx.camera.camera2.internal.ZslControl $r18, $r20, $r22, $r25;
        androidx.camera.core.ImageInfo $r23;
        androidx.camera.core.impl.CameraCaptureResult r26;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r3 = $r9;

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.camera.core.impl.CaptureConfig) $r12;

        r6 = staticinvoke <androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder 'from'(androidx.camera.core.impl.CaptureConfig)>(r5);

        r26 = null;

        $i1 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        if $i1 != 5 goto label4;

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r18 = virtualinvoke $r17.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl getZslControl()>();

        $z5 = interfaceinvoke $r18.<androidx.camera.camera2.internal.ZslControl: boolean isZslDisabledByFlashMode()>();

        if $z5 != 0 goto label4;

        $r19 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r20 = virtualinvoke $r19.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl getZslControl()>();

        $z6 = interfaceinvoke $r20.<androidx.camera.camera2.internal.ZslControl: boolean isZslDisabledByUserCaseConfig()>();

        if $z6 != 0 goto label4;

        $r21 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r22 = virtualinvoke $r21.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl getZslControl()>();

        r7 = interfaceinvoke $r22.<androidx.camera.camera2.internal.ZslControl: androidx.camera.core.ImageProxy dequeueImageFromBuffer()>();

        if r7 == null goto label2;

        $r24 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r25 = virtualinvoke $r24.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.ZslControl getZslControl()>();

        $z7 = interfaceinvoke $r25.<androidx.camera.camera2.internal.ZslControl: boolean enqueueImageToImageWriter(androidx.camera.core.ImageProxy)>(r7);

        if $z7 == 0 goto label2;

        $z8 = 1;

        goto label3;

     label2:
        $z8 = 0;

     label3:
        z0 = $z8;

        if z0 == 0 goto label4;

        $r23 = interfaceinvoke r7.<androidx.camera.core.ImageProxy: androidx.camera.core.ImageInfo getImageInfo()>();

        r26 = staticinvoke <androidx.camera.core.impl.CameraCaptureResults: androidx.camera.core.impl.CameraCaptureResult retrieveCameraCaptureResult(androidx.camera.core.ImageInfo)>($r23);

     label4:
        if r26 == null goto label5;

        virtualinvoke r6.<androidx.camera.core.impl.CaptureConfig$Builder: void setCameraCaptureResult(androidx.camera.core.impl.CameraCaptureResult)>(r26);

        goto label6;

     label5:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: void applyStillCaptureTemplate(androidx.camera.core.impl.CaptureConfig$Builder,androidx.camera.core.impl.CaptureConfig)>(r6, r5);

     label6:
        $r13 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture mOverrideAeModeForStillCapture>;

        $z2 = virtualinvoke $r13.<androidx.camera.camera2.internal.compat.workaround.OverrideAeModeForStillCapture: boolean shouldSetAeModeAlwaysFlash(int)>(i0);

        if $z2 == 0 goto label7;

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: void applyAeModeQuirk(androidx.camera.core.impl.CaptureConfig$Builder)>(r6);

     label7:
        $r14 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline,androidx.camera.core.impl.CaptureConfig$Builder)>(r0, r6) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: java.lang.Object lambda$submitConfigsInternal$4(androidx.camera.core.impl.CaptureConfig$Builder,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r15 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r14);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = virtualinvoke r6.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label1;

     label8:
        $r10 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        virtualinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void submitCaptureRequestsInternal(java.util.List)>(r3);

        $r11 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture allAsList(java.util.Collection)>(r2);

        return $r11;
    }

    private void applyStillCaptureTemplate(androidx.camera.core.impl.CaptureConfig$Builder, androidx.camera.core.impl.CaptureConfig)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        androidx.camera.core.impl.CaptureConfig$Builder r1;
        androidx.camera.core.impl.CaptureConfig r2;
        int $i0, $i1, $i2;
        boolean $z0;
        byte b3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$Builder;

        r2 := @parameter1: androidx.camera.core.impl.CaptureConfig;

        b3 = -1;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: int mTemplate>;

        if $i0 != 3 goto label1;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: boolean mIsLegacyDevice>;

        if $z0 != 0 goto label1;

        b3 = 4;

        goto label3;

     label1:
        $i1 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        if $i1 == -1 goto label2;

        $i2 = virtualinvoke r2.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        if $i2 != 5 goto label3;

     label2:
        b3 = 2;

     label3:
        if b3 == -1 goto label4;

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>(b3);

     label4:
        return;
    }

    private void applyAeModeQuirk(androidx.camera.core.impl.CaptureConfig$Builder)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        androidx.camera.core.impl.CaptureConfig$Builder r1;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder r2, r8;
        android.hardware.camera2.CaptureRequest$Key $r4;
        java.lang.Integer $r5;
        androidx.camera.camera2.impl.Camera2ImplConfig $r7;
        androidx.camera.core.impl.Config r9;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$Builder;

        r8 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke r8.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r2 = r8;

        $r4 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke r2.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig$Builder setCaptureRequestOption(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r4, $r5);

        $r7 = virtualinvoke r2.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        r9 = (androidx.camera.core.impl.Config) $r7;

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>(r9);

        return;
    }

    private java.lang.Object lambda$submitConfigsInternal$4(androidx.camera.core.impl.CaptureConfig$Builder, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        androidx.camera.core.impl.CaptureConfig$Builder r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2 $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$Builder;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r3 = new androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2;

        specialinvoke $r3.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline$2: void <init>(androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r2);

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r3);

        return "submitStillCapture";
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$executeCapture$3(java.util.List, int, android.hardware.camera2.TotalCaptureResult) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        java.util.List r1;
        int i0;
        android.hardware.camera2.TotalCaptureResult r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r2 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        $r3 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: com.google.common.util.concurrent.ListenableFuture submitConfigsInternal(java.util.List,int)>(r1, i0);

        return $r3;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$executeCapture$2(java.lang.Boolean) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        java.lang.Boolean r1, $r2;
        boolean $z0;
        com.google.common.util.concurrent.ListenableFuture $r3, $r6;
        long $l0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r4;
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        r1 := @parameter0: java.lang.Boolean;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $l0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long mTimeout3A>;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r5 = dynamicinvoke "check" <androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: boolean lambda$executeCapture$1(android.hardware.camera2.TotalCaptureResult)>, methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        $r6 = staticinvoke <androidx.camera.camera2.internal.Camera2CapturePipeline: com.google.common.util.concurrent.ListenableFuture waitForResult(long,androidx.camera.camera2.internal.Camera2CameraControlImpl,androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker)>($l0, $r4, $r5);

        return $r6;

     label1:
        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        return $r3;
    }

    private static boolean lambda$executeCapture$1(android.hardware.camera2.TotalCaptureResult)
    {
        android.hardware.camera2.TotalCaptureResult r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $z0 = staticinvoke <androidx.camera.camera2.internal.Camera2CapturePipeline: boolean is3AConverged(android.hardware.camera2.TotalCaptureResult,boolean)>(r0, 0);

        return $z0;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$executeCapture$0(int, android.hardware.camera2.TotalCaptureResult) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline r0;
        int i0;
        android.hardware.camera2.TotalCaptureResult r1;
        boolean $z0;
        androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;
        long $l1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.camera2.TotalCaptureResult;

        $z0 = staticinvoke <androidx.camera.camera2.internal.Camera2CapturePipeline: boolean isFlashRequired(int,android.hardware.camera2.TotalCaptureResult)>(i0, r1);

        if $z0 == 0 goto label1;

        $l1 = <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long CHECK_3A_WITH_FLASH_TIMEOUT_IN_NS>;

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: void setTimeout3A(long)>($l1);

     label1:
        $r2 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask mPipelineSubTask>;

        $r3 = interfaceinvoke $r2.<androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask: com.google.common.util.concurrent.ListenableFuture preCapture(android.hardware.camera2.TotalCaptureResult)>(r1);

        return $r3;
    }

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0, $r1;
        long $l0, $l1;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toNanos(long)>(1L);

        <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long CHECK_3A_TIMEOUT_IN_NS> = $l0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(5L);

        <androidx.camera.camera2.internal.Camera2CapturePipeline$Pipeline: long CHECK_3A_WITH_FLASH_TIMEOUT_IN_NS> = $l1;

        return;
    }

androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask
<androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask: com.google.common.util.concurrent.ListenableFuture preCapture(android.hardware.camera2.TotalCaptureResult)>
<androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask: boolean isCaptureResultNeeded()>
<androidx.camera.camera2.internal.Camera2CapturePipeline$PipelineTask: void postCapture()>
androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker
<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker: boolean check(android.hardware.camera2.TotalCaptureResult)>
androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener
<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: long NO_TIMEOUT>
<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>
<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: com.google.common.util.concurrent.ListenableFuture mFuture>
<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: long mTimeLimitNs>
<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker mChecker>
<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: java.lang.Long mTimestampOfFirstUpdateNs>
    void <init>(long, androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener r0;
        long l0;
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: java.lang.Object lambda$new$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r3 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r2);

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: com.google.common.util.concurrent.ListenableFuture mFuture> = $r3;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: java.lang.Long mTimestampOfFirstUpdateNs> = null;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: long mTimeLimitNs> = l0;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker mChecker> = r1;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture getFuture()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: com.google.common.util.concurrent.ListenableFuture mFuture>;

        return $r1;
    }

    public boolean onCaptureResult(android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener r0;
        android.hardware.camera2.TotalCaptureResult r1;
        java.lang.Long r2, r3, $r15;
        android.hardware.camera2.CaptureResult$Key $r4;
        java.lang.Object $r5;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r6, $r8;
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker $r7, $r16;
        boolean $z1;
        long $l0, $l1, $l2, $l3, $l5;
        byte $b4, $b6;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener;

        r1 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $r4 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP>;

        $r5 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r4);

        r2 = (java.lang.Long) $r5;

        if r2 == null goto label1;

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: java.lang.Long mTimestampOfFirstUpdateNs>;

        if $r15 != null goto label1;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: java.lang.Long mTimestampOfFirstUpdateNs> = r2;

     label1:
        r3 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: java.lang.Long mTimestampOfFirstUpdateNs>;

        $l5 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: long mTimeLimitNs>;

        $b6 = 0L cmp $l5;

        if $b6 == 0 goto label2;

        if r3 == null goto label2;

        if r2 == null goto label2;

        $l0 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $l1 = virtualinvoke r3.<java.lang.Long: long longValue()>();

        $l3 = $l0 - $l1;

        $l2 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: long mTimeLimitNs>;

        $b4 = $l3 cmp $l2;

        if $b4 <= 0 goto label2;

        $r8 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        virtualinvoke $r8.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wait for capture result timeout, current:");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" first: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", $r14);

        return 1;

     label2:
        $r16 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker mChecker>;

        if $r16 == null goto label3;

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker mChecker>;

        $z1 = interfaceinvoke $r7.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker: boolean check(android.hardware.camera2.TotalCaptureResult)>(r1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r6 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        virtualinvoke $r6.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(r1);

        return 1;
    }

    private java.lang.Object lambda$new$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter> = r1;

        return "waitFor3AResult";
    }

androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask
<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: long CHECK_3A_WITH_TORCH_TIMEOUT_IN_NS>
<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>
<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: int mFlashMode>
<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: boolean mIsExecuted>
<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: java.util.concurrent.Executor mExecutor>
    void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl, int, java.util.concurrent.Executor)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl r1;
        int i0;
        java.util.concurrent.Executor r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: boolean mIsExecuted> = 0;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl> = r1;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: int mFlashMode> = i0;

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: java.util.concurrent.Executor mExecutor> = r2;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture preCapture(android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask r0;
        android.hardware.camera2.TotalCaptureResult r1;
        com.google.common.util.concurrent.ListenableFuture r2, $r4;
        int $i0;
        boolean $z0, $z1;
        java.lang.Boolean $r3;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r5;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r6;
        androidx.camera.core.impl.utils.futures.FutureChain $r7, $r10, $r13;
        androidx.camera.core.impl.utils.futures.AsyncFunction $r8;
        java.util.concurrent.Executor $r9, $r12;
        androidx.arch.core.util.Function $r11;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask;

        r1 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: int mFlashMode>;

        $z0 = staticinvoke <androidx.camera.camera2.internal.Camera2CapturePipeline: boolean isFlashRequired(int,android.hardware.camera2.TotalCaptureResult)>($i0, r1);

        if $z0 == 0 goto label2;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $z1 = virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraControlImpl: boolean isTorchOn()>();

        if $z1 == 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", "Torch already on, not turn on");

        goto label2;

     label1:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", "Turn on torch");

        r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: boolean mIsExecuted> = 1;

        $r6 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: java.lang.Object lambda$preCapture$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r6);

        $r7 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>(r2);

        $r8 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: com.google.common.util.concurrent.ListenableFuture lambda$preCapture$2(java.lang.Void)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Void));

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: java.util.concurrent.Executor mExecutor>;

        $r10 = virtualinvoke $r7.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r8, $r9);

        $r11 = dynamicinvoke "apply" <androidx.arch.core.util.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: java.lang.Boolean lambda$preCapture$3(android.hardware.camera2.TotalCaptureResult)>, methodtype: java.lang.Boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        $r12 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        $r13 = virtualinvoke $r10.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transform(androidx.arch.core.util.Function,java.util.concurrent.Executor)>($r11, $r12);

        return $r13;

     label2:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>($r3);

        return $r4;
    }

    public boolean isCaptureResultNeeded()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask;

        $i0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: int mFlashMode>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void postCapture()
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask r0;
        boolean $z0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r1;
        androidx.camera.camera2.internal.TorchControl $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: boolean mIsExecuted>;

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.TorchControl getTorchControl()>();

        virtualinvoke $r2.<androidx.camera.camera2.internal.TorchControl: void enableTorchInternal(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,boolean)>(null, 0);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CapturePipeline", "Turn off torch");

     label1:
        return;
    }

    private static java.lang.Boolean lambda$preCapture$3(android.hardware.camera2.TotalCaptureResult)
    {
        android.hardware.camera2.TotalCaptureResult r0;
        java.lang.Boolean $r1;

        r0 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r1;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$preCapture$2(java.lang.Void) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask r0;
        java.lang.Void r1;
        long $l0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r2;
        androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker $r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask;

        r1 := @parameter0: java.lang.Void;

        $l0 = <androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: long CHECK_3A_WITH_TORCH_TIMEOUT_IN_NS>;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r3 = dynamicinvoke "check" <androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: boolean lambda$preCapture$1(android.hardware.camera2.TotalCaptureResult)>, methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        $r4 = staticinvoke <androidx.camera.camera2.internal.Camera2CapturePipeline: com.google.common.util.concurrent.ListenableFuture waitForResult(long,androidx.camera.camera2.internal.Camera2CameraControlImpl,androidx.camera.camera2.internal.Camera2CapturePipeline$ResultListener$Checker)>($l0, $r2, $r3);

        return $r4;
    }

    private static boolean lambda$preCapture$1(android.hardware.camera2.TotalCaptureResult)
    {
        android.hardware.camera2.TotalCaptureResult r0;
        boolean $z0;

        r0 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        $z0 = staticinvoke <androidx.camera.camera2.internal.Camera2CapturePipeline: boolean is3AConverged(android.hardware.camera2.TotalCaptureResult,boolean)>(r0, 1);

        return $z0;
    }

    private java.lang.Object lambda$preCapture$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r2;
        androidx.camera.camera2.internal.TorchControl $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControl>;

        $r3 = virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.internal.TorchControl getTorchControl()>();

        virtualinvoke $r3.<androidx.camera.camera2.internal.TorchControl: void enableTorchInternal(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,boolean)>(r1, 1);

        return "TorchOn";
    }

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        long $l0;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toNanos(long)>(2L);

        <androidx.camera.camera2.internal.Camera2CapturePipeline$TorchTask: long CHECK_3A_WITH_TORCH_TIMEOUT_IN_NS> = $l0;

        return;
    }

