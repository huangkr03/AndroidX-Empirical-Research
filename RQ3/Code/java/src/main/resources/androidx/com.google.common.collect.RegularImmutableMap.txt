com.google.common.collect.RegularImmutableMap
<com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY>
<com.google.common.collect.RegularImmutableMap: long serialVersionUID>
<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues>
<com.google.common.collect.RegularImmutableMap: java.lang.Object hashTable>
<com.google.common.collect.RegularImmutableMap: int size>
    static void <clinit>()
    {
        com.google.common.collect.RegularImmutableMap $r0;
        java.lang.Object[] $r1;

        $r0 = new com.google.common.collect.RegularImmutableMap;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke $r0.<com.google.common.collect.RegularImmutableMap: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r1, 0);

        <com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY> = $r0;

        return;
    }

    private void <init>(java.lang.Object, java.lang.Object[], int)
    {
        com.google.common.collect.RegularImmutableMap $r0;
        java.lang.Object $r1;
        java.lang.Object[] $r2;
        int $i0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

        $i0 := @parameter2: int;

        specialinvoke $r0.<com.google.common.collect.ImmutableMap: void <init>()>();

        $r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object hashTable> = $r1;

        $r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues> = $r2;

        $r0.<com.google.common.collect.RegularImmutableMap: int size> = $i0;

        return;
    }

    static com.google.common.collect.RegularImmutableMap create(int, java.lang.Object[], com.google.common.collect.ImmutableMap$Builder)
    {
        boolean $z0;
        int $i0, $i1;
        java.lang.Object[] $r0, $r6;
        com.google.common.collect.ImmutableMap$Builder $r1;
        com.google.common.collect.ImmutableMap $r2;
        com.google.common.collect.RegularImmutableMap $r3;
        java.lang.Object $r4, $r5;
        com.google.common.collect.ImmutableMap$Builder$DuplicateKey $r7;
        java.lang.Integer $r8;
        java.lang.IllegalArgumentException $r9;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.Object[];

        $r1 := @parameter2: com.google.common.collect.ImmutableMap$Builder;

        if $i0 != 0 goto label1;

        $r2 = <com.google.common.collect.RegularImmutableMap: com.google.common.collect.ImmutableMap EMPTY>;

        $r3 = (com.google.common.collect.RegularImmutableMap) $r2;

        return $r3;

     label1:
        if $i0 != 1 goto label2;

        $r4 = $r0[0];

        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = $r0[1];

        virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r3 = new com.google.common.collect.RegularImmutableMap;

        specialinvoke $r3.<com.google.common.collect.RegularImmutableMap: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r0, 1);

        return $r3;

     label2:
        $i1 = lengthof $r0;

        $i1 = $i1 >> 1;

        staticinvoke <com.google.common.base.Preconditions: int checkPositionIndex(int,int)>($i0, $i1);

        $i1 = staticinvoke <com.google.common.collect.ImmutableSet: int chooseTableSize(int)>($i0);

        $r4 = staticinvoke <com.google.common.collect.RegularImmutableMap: java.lang.Object createHashTable(java.lang.Object[],int,int,int)>($r0, $i0, $i1, 0);

        $r5 = $r4;

        $z0 = $r4 instanceof java.lang.Object[];

        if $z0 == 0 goto label4;

        $r6 = (java.lang.Object[]) $r4;

        $r4 = $r6[2];

        $r7 = (com.google.common.collect.ImmutableMap$Builder$DuplicateKey) $r4;

        if $r1 == null goto label3;

        $r1.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder$DuplicateKey duplicateKey> = $r7;

        $r4 = $r6[0];

        $r5 = $r6[1];

        $r8 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + $i0;

        $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i1);

        $r5 = $r4;

        goto label4;

     label3:
        $r9 = virtualinvoke $r7.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: java.lang.IllegalArgumentException exception()>();

        throw $r9;

     label4:
        $r3 = new com.google.common.collect.RegularImmutableMap;

        specialinvoke $r3.<com.google.common.collect.RegularImmutableMap: void <init>(java.lang.Object,java.lang.Object[],int)>($r5, $r0, $i0);

        return $r3;
    }

    private static java.lang.Object createHashTable(java.lang.Object[], int, int, int)
    {
        java.lang.Object[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i10;
        com.google.common.collect.ImmutableMap$Builder$DuplicateKey $r1;
        java.lang.Object $r2, $r3, $r5;
        byte[] $r4;
        byte $b7;
        short $s8;
        boolean $z0;
        java.lang.Integer $r6;
        short[] $r7;
        char $c9;
        int[] $r8;

        $r0 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r1 = null;

        if $i0 != 1 goto label01;

        $r2 = $r0[$i2];

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = $i2 ^ 1;

        $r3 = $r0[$i0];

        virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r2, $r3);

        return null;

     label01:
        $i3 = $i1 + -1;

        if $i1 > 128 goto label10;

        $r4 = newarray (byte)[$i1];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, -1);

        $i1 = 0;

        $i4 = 0;

     label02:
        if $i1 >= $i0 goto label08;

        $i5 = $i1 + $i1;

        $i6 = $i5 + $i2;

        $i5 = $i4 + $i4;

        $i5 = $i5 + $i2;

        $r2 = $r0[$i6];

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $i6 = $i6 ^ 1;

        $r3 = $r0[$i6];

        virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i6 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i6);

     label03:
        $i6 = $i6 & $i3;

        $b7 = $r4[$i6];

        $s8 = $b7 & 255;

        if $s8 != 255 goto label05;

        $b7 = (byte) $i5;

        $r4[$i6] = $b7;

        if $i4 >= $i1 goto label04;

        $r0[$i5] = $r2;

        $i5 = $i5 ^ 1;

        $r0[$i5] = $r3;

     label04:
        $i4 = $i4 + 1;

        goto label06;

     label05:
        $r5 = $r0[$s8];

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label07;

        $r1 = new com.google.common.collect.ImmutableMap$Builder$DuplicateKey;

        $s8 = $s8 ^ 1;

        $r5 = $r0[$s8];

        virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5);

        $r0[$s8] = $r3;

     label06:
        $i1 = $i1 + 1;

        goto label02;

     label07:
        $i6 = $i6 + 1;

        goto label03;

     label08:
        if $i4 != $i0 goto label09;

        return $r4;

     label09:
        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = $r4;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r0[1] = $r6;

        $r0[2] = $r1;

        return $r0;

     label10:
        if $i1 > 32768 goto label19;

        $r7 = newarray (short)[$i1];

        staticinvoke <java.util.Arrays: void fill(short[],short)>($r7, -1);

        $i1 = 0;

        $i4 = 0;

     label11:
        if $i1 >= $i0 goto label17;

        $i5 = $i1 + $i1;

        $i6 = $i5 + $i2;

        $i5 = $i4 + $i4;

        $i5 = $i5 + $i2;

        $r2 = $r0[$i6];

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $i6 = $i6 ^ 1;

        $r3 = $r0[$i6];

        virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i6 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i6);

     label12:
        $i6 = $i6 & $i3;

        $s8 = $r7[$i6];

        $c9 = (char) $s8;

        if $c9 != 65535 goto label14;

        $s8 = (short) $i5;

        $r7[$i6] = $s8;

        if $i4 >= $i1 goto label13;

        $r0[$i5] = $r2;

        $i5 = $i5 ^ 1;

        $r0[$i5] = $r3;

     label13:
        $i4 = $i4 + 1;

        goto label15;

     label14:
        $r5 = $r0[$c9];

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label16;

        $r1 = new com.google.common.collect.ImmutableMap$Builder$DuplicateKey;

        $c9 = $c9 ^ 1;

        $r5 = $r0[$c9];

        virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5);

        $r0[$c9] = $r3;

     label15:
        $i1 = $i1 + 1;

        goto label11;

     label16:
        $i6 = $i6 + 1;

        goto label12;

     label17:
        if $i4 != $i0 goto label18;

        return $r7;

     label18:
        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = $r7;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r0[1] = $r6;

        $r0[2] = $r1;

        return $r0;

     label19:
        $r8 = newarray (int)[$i1];

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r8, -1);

        $i1 = 0;

        $i4 = 0;

     label20:
        if $i1 >= $i0 goto label26;

        $i5 = $i1 + $i1;

        $i6 = $i5 + $i2;

        $i5 = $i4 + $i4;

        $i5 = $i5 + $i2;

        $r2 = $r0[$i6];

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $i6 = $i6 ^ 1;

        $r3 = $r0[$i6];

        virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <com.google.common.collect.CollectPreconditions: void checkEntryNotNull(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i6 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i6);

     label21:
        $i6 = $i6 & $i3;

        $i10 = $r8[$i6];

        if $i10 != -1 goto label23;

        $r8[$i6] = $i5;

        if $i4 >= $i1 goto label22;

        $r0[$i5] = $r2;

        $i5 = $i5 ^ 1;

        $r0[$i5] = $r3;

     label22:
        $i4 = $i4 + 1;

        goto label24;

     label23:
        $r5 = $r0[$i10];

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label25;

        $r1 = new com.google.common.collect.ImmutableMap$Builder$DuplicateKey;

        $i5 = $i10 ^ 1;

        $r5 = $r0[$i5];

        virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r1.<com.google.common.collect.ImmutableMap$Builder$DuplicateKey: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5);

        $r0[$i5] = $r3;

     label24:
        $i1 = $i1 + 1;

        goto label20;

     label25:
        $i6 = $i6 + 1;

        goto label21;

     label26:
        if $i4 != $i0 goto label27;

        return $r8;

     label27:
        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = $r8;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r0[1] = $r6;

        $r0[2] = $r1;

        return $r0;
    }

    static java.lang.Object get(java.lang.Object, java.lang.Object[], int, int, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1, $r2;
        int $i0, $i1, $i5;
        boolean $z0;
        byte[] $r3;
        byte $b2;
        short $s3;
        short[] $r4;
        char $c4;
        int[] $r5;

        $r2 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 := @parameter4: java.lang.Object;

        if $r1 != null goto label01;

        return null;

     label01:
        if $i0 != 1 goto label02;

        $r2 = $r0[$i1];

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label15;

        $i0 = $i1 ^ 1;

        $r2 = $r0[$i0];

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        return $r2;

     label02:
        if $r2 != null goto label03;

        return null;

     label03:
        $z0 = $r2 instanceof byte[];

        if $z0 == 0 goto label07;

        $r3 = (byte[]) $r2;

        $i0 = lengthof $r3;

        $i0 = $i0 + -1;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i1);

     label04:
        $i1 = $i1 & $i0;

        $b2 = $r3[$i1];

        $s3 = $b2 & 255;

        if $s3 != 255 goto label05;

        return null;

     label05:
        $r2 = $r0[$s3];

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label06;

        $s3 = $s3 ^ 1;

        $r2 = $r0[$s3];

        return $r2;

     label06:
        $i1 = $i1 + 1;

        goto label04;

     label07:
        $z0 = $r2 instanceof short[];

        if $z0 == 0 goto label11;

        $r4 = (short[]) $r2;

        $i0 = lengthof $r4;

        $i0 = $i0 + -1;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i1);

     label08:
        $i1 = $i1 & $i0;

        $s3 = $r4[$i1];

        $c4 = (char) $s3;

        if $c4 != 65535 goto label09;

        return null;

     label09:
        $r2 = $r0[$c4];

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label10;

        $c4 = $c4 ^ 1;

        $r2 = $r0[$c4];

        return $r2;

     label10:
        $i1 = $i1 + 1;

        goto label08;

     label11:
        $r5 = (int[]) $r2;

        $i0 = lengthof $r5;

        $i0 = $i0 + -1;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <com.google.common.collect.Hashing: int smear(int)>($i1);

     label12:
        $i1 = $i1 & $i0;

        $i5 = $r5[$i1];

        if $i5 != -1 goto label13;

        return null;

     label13:
        $r2 = $r0[$i5];

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label14;

        $i0 = $i5 ^ 1;

        $r2 = $r0[$i0];

        return $r2;

     label14:
        $i1 = $i1 + 1;

        goto label12;

     label15:
        return null;
    }

    com.google.common.collect.ImmutableSet createEntrySet()
    {
        com.google.common.collect.RegularImmutableMap $r0;
        com.google.common.collect.RegularImmutableMap$EntrySet $r1;
        java.lang.Object[] $r2;
        int $i0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 = new com.google.common.collect.RegularImmutableMap$EntrySet;

        $r2 = $r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = $r0.<com.google.common.collect.RegularImmutableMap: int size>;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableMap$EntrySet: void <init>(com.google.common.collect.ImmutableMap,java.lang.Object[],int,int)>($r0, $r2, 0, $i0);

        return $r1;
    }

    com.google.common.collect.ImmutableSet createKeySet()
    {
        com.google.common.collect.RegularImmutableMap $r0;
        com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList $r1;
        int $i0;
        java.lang.Object[] $r2;
        com.google.common.collect.RegularImmutableMap$KeySet $r3;

        $r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 = new com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList;

        $r2 = $r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = $r0.<com.google.common.collect.RegularImmutableMap: int size>;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: void <init>(java.lang.Object[],int,int)>($r2, 0, $i0);

        $r3 = new com.google.common.collect.RegularImmutableMap$KeySet;

        specialinvoke $r3.<com.google.common.collect.RegularImmutableMap$KeySet: void <init>(com.google.common.collect.ImmutableMap,com.google.common.collect.ImmutableList)>($r0, $r1);

        return $r3;
    }

    com.google.common.collect.ImmutableCollection createValues()
    {
        com.google.common.collect.RegularImmutableMap $r0;
        com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList $r1;
        java.lang.Object[] $r2;
        int $i0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r1 = new com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList;

        $r2 = $r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = $r0.<com.google.common.collect.RegularImmutableMap: int size>;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: void <init>(java.lang.Object[],int,int)>($r2, 1, $i0);

        return $r1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableMap $r0;
        java.lang.Object $r1, $r3;
        java.lang.Object[] $r2;
        int $i0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap;

        $r3 := @parameter0: java.lang.Object;

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object hashTable>;

        $r2 = $r0.<com.google.common.collect.RegularImmutableMap: java.lang.Object[] alternatingKeysAndValues>;

        $i0 = $r0.<com.google.common.collect.RegularImmutableMap: int size>;

        $r3 = staticinvoke <com.google.common.collect.RegularImmutableMap: java.lang.Object get(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, 0, $r3);

        if $r3 != null goto label1;

        return null;

     label1:
        return $r3;
    }

    boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableMap $r0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap;

        return 0;
    }

    public int size()
    {
        com.google.common.collect.RegularImmutableMap $r0;
        int i0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap;

        i0 = $r0.<com.google.common.collect.RegularImmutableMap: int size>;

        return i0;
    }

com.google.common.collect.RegularImmutableMap$EntrySet$1
<com.google.common.collect.RegularImmutableMap$EntrySet$1: com.google.common.collect.RegularImmutableMap$EntrySet this$0>
    void <init>(com.google.common.collect.RegularImmutableMap$EntrySet)
    {
        com.google.common.collect.RegularImmutableMap$EntrySet$1 $r0;
        com.google.common.collect.RegularImmutableMap$EntrySet $r1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet$1;

        $r1 := @parameter0: com.google.common.collect.RegularImmutableMap$EntrySet;

        $r0.<com.google.common.collect.RegularImmutableMap$EntrySet$1: com.google.common.collect.RegularImmutableMap$EntrySet this$0> = $r1;

        specialinvoke $r0.<com.google.common.collect.ImmutableList: void <init>()>();

        return;
    }

    public volatile java.lang.Object get(int)
    {
        com.google.common.collect.RegularImmutableMap$EntrySet$1 $r0;
        java.util.Map$Entry $r1;
        int $i0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet$1;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<com.google.common.collect.RegularImmutableMap$EntrySet$1: java.util.Map$Entry get(int)>($i0);

        return $r1;
    }

    public java.util.Map$Entry get(int)
    {
        com.google.common.collect.RegularImmutableMap$EntrySet$1 $r0;
        int $i0, $i1;
        com.google.common.collect.RegularImmutableMap$EntrySet $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3, $r4;
        java.util.AbstractMap$SimpleImmutableEntry r5;
        java.util.Map$Entry r6;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet$1;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet$1: com.google.common.collect.RegularImmutableMap$EntrySet this$0>;

        $i1 = staticinvoke <com.google.common.collect.RegularImmutableMap$EntrySet: int access$000(com.google.common.collect.RegularImmutableMap$EntrySet)>($r1);

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, $i1);

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet$1: com.google.common.collect.RegularImmutableMap$EntrySet this$0>;

        $r2 = staticinvoke <com.google.common.collect.RegularImmutableMap$EntrySet: java.lang.Object[] access$100(com.google.common.collect.RegularImmutableMap$EntrySet)>($r1);

        $i0 = $i0 + $i0;

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet$1: com.google.common.collect.RegularImmutableMap$EntrySet this$0>;

        $i1 = staticinvoke <com.google.common.collect.RegularImmutableMap$EntrySet: int access$200(com.google.common.collect.RegularImmutableMap$EntrySet)>($r1);

        $i1 = $i1 + $i0;

        $r3 = $r2[$i1];

        virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet$1: com.google.common.collect.RegularImmutableMap$EntrySet this$0>;

        $r2 = staticinvoke <com.google.common.collect.RegularImmutableMap$EntrySet: java.lang.Object[] access$100(com.google.common.collect.RegularImmutableMap$EntrySet)>($r1);

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet$1: com.google.common.collect.RegularImmutableMap$EntrySet this$0>;

        $i1 = staticinvoke <com.google.common.collect.RegularImmutableMap$EntrySet: int access$200(com.google.common.collect.RegularImmutableMap$EntrySet)>($r1);

        $i1 = $i1 ^ 1;

        $i0 = $i0 + $i1;

        $r4 = $r2[$i0];

        virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        r5 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke r5.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4);

        r6 = (java.util.Map$Entry) r5;

        return r6;
    }

    public boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableMap$EntrySet$1 $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet$1;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public int size()
    {
        com.google.common.collect.RegularImmutableMap$EntrySet$1 $r0;
        int $i0;
        com.google.common.collect.RegularImmutableMap$EntrySet $r1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet$1;

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet$1: com.google.common.collect.RegularImmutableMap$EntrySet this$0>;

        $i0 = staticinvoke <com.google.common.collect.RegularImmutableMap$EntrySet: int access$000(com.google.common.collect.RegularImmutableMap$EntrySet)>($r1);

        return $i0;
    }

com.google.common.collect.RegularImmutableMap$EntrySet
<com.google.common.collect.RegularImmutableMap$EntrySet: java.lang.Object[] alternatingKeysAndValues>
<com.google.common.collect.RegularImmutableMap$EntrySet: int keyOffset>
<com.google.common.collect.RegularImmutableMap$EntrySet: com.google.common.collect.ImmutableMap map>
<com.google.common.collect.RegularImmutableMap$EntrySet: int size>
    void <init>(com.google.common.collect.ImmutableMap, java.lang.Object[], int, int)
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        com.google.common.collect.ImmutableMap $r1;
        java.lang.Object[] $r2;
        int $i0, $i1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap;

        $r2 := @parameter1: java.lang.Object[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        specialinvoke $r0.<com.google.common.collect.ImmutableSet: void <init>()>();

        $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: com.google.common.collect.ImmutableMap map> = $r1;

        $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: java.lang.Object[] alternatingKeysAndValues> = $r2;

        $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: int keyOffset> = $i0;

        $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: int size> = $i1;

        return;
    }

    static int access$000(com.google.common.collect.RegularImmutableMap$EntrySet)
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        int i0;

        $r0 := @parameter0: com.google.common.collect.RegularImmutableMap$EntrySet;

        i0 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: int size>;

        return i0;
    }

    static java.lang.Object[] access$100(com.google.common.collect.RegularImmutableMap$EntrySet)
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        java.lang.Object[] r1;

        $r0 := @parameter0: com.google.common.collect.RegularImmutableMap$EntrySet;

        r1 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: java.lang.Object[] alternatingKeysAndValues>;

        return r1;
    }

    static int access$200(com.google.common.collect.RegularImmutableMap$EntrySet)
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        int i0;

        $r0 := @parameter0: com.google.common.collect.RegularImmutableMap$EntrySet;

        i0 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: int keyOffset>;

        return i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        com.google.common.collect.ImmutableMap $r1;
        java.lang.Object $r2, $r4;
        boolean $z0;
        java.util.Map$Entry $r3;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label1;

        $r3 = (java.util.Map$Entry) $r2;

        $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r2 == null goto label1;

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: com.google.common.collect.ImmutableMap map>;

        $r4 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r4);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    int copyIntoArray(java.lang.Object[], int)
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        int $i0;
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableList $r2;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r2 = virtualinvoke $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: com.google.common.collect.ImmutableList asList()>();

        $i0 = virtualinvoke $r2.<com.google.common.collect.ImmutableList: int copyIntoArray(java.lang.Object[],int)>($r1, $i0);

        return $i0;
    }

    com.google.common.collect.ImmutableList createAsList()
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        com.google.common.collect.RegularImmutableMap$EntrySet$1 $r1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet;

        $r1 = new com.google.common.collect.RegularImmutableMap$EntrySet$1;

        specialinvoke $r1.<com.google.common.collect.RegularImmutableMap$EntrySet$1: void <init>(com.google.common.collect.RegularImmutableMap$EntrySet)>($r0);

        return $r1;
    }

    boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet;

        return 1;
    }

    public com.google.common.collect.UnmodifiableIterator iterator()
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        com.google.common.collect.ImmutableList $r1;
        com.google.common.collect.UnmodifiableIterator $r2;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet;

        $r1 = virtualinvoke $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: com.google.common.collect.ImmutableList asList()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r2;
    }

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        com.google.common.collect.UnmodifiableIterator $r1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet;

        $r1 = virtualinvoke $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public int size()
    {
        com.google.common.collect.RegularImmutableMap$EntrySet $r0;
        int i0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$EntrySet;

        i0 = $r0.<com.google.common.collect.RegularImmutableMap$EntrySet: int size>;

        return i0;
    }

com.google.common.collect.RegularImmutableMap$KeySet
<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.ImmutableList list>
<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.ImmutableMap map>
    void <init>(com.google.common.collect.ImmutableMap, com.google.common.collect.ImmutableList)
    {
        com.google.common.collect.RegularImmutableMap$KeySet $r0;
        com.google.common.collect.ImmutableMap $r1;
        com.google.common.collect.ImmutableList $r2;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeySet;

        $r1 := @parameter0: com.google.common.collect.ImmutableMap;

        $r2 := @parameter1: com.google.common.collect.ImmutableList;

        specialinvoke $r0.<com.google.common.collect.ImmutableSet: void <init>()>();

        $r0.<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.ImmutableMap map> = $r1;

        $r0.<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.ImmutableList list> = $r2;

        return;
    }

    public com.google.common.collect.ImmutableList asList()
    {
        com.google.common.collect.RegularImmutableMap$KeySet $r0;
        com.google.common.collect.ImmutableList r1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeySet;

        r1 = $r0.<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.ImmutableList list>;

        return r1;
    }

    public boolean contains(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableMap$KeySet $r0;
        com.google.common.collect.ImmutableMap $r1;
        java.lang.Object $r2;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeySet;

        $r2 := @parameter0: java.lang.Object;

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.ImmutableMap map>;

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>($r2);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    int copyIntoArray(java.lang.Object[], int)
    {
        com.google.common.collect.RegularImmutableMap$KeySet $r0;
        int $i0;
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableList $r2;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeySet;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $r2 = virtualinvoke $r0.<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.ImmutableList asList()>();

        $i0 = virtualinvoke $r2.<com.google.common.collect.ImmutableList: int copyIntoArray(java.lang.Object[],int)>($r1, $i0);

        return $i0;
    }

    boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableMap$KeySet $r0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeySet;

        return 1;
    }

    public com.google.common.collect.UnmodifiableIterator iterator()
    {
        com.google.common.collect.RegularImmutableMap$KeySet $r0;
        com.google.common.collect.ImmutableList $r1;
        com.google.common.collect.UnmodifiableIterator $r2;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeySet;

        $r1 = virtualinvoke $r0.<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.ImmutableList asList()>();

        $r2 = virtualinvoke $r1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r2;
    }

    public volatile java.util.Iterator iterator()
    {
        com.google.common.collect.RegularImmutableMap$KeySet $r0;
        com.google.common.collect.UnmodifiableIterator $r1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeySet;

        $r1 = virtualinvoke $r0.<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public int size()
    {
        com.google.common.collect.RegularImmutableMap$KeySet $r0;
        int $i0;
        com.google.common.collect.ImmutableMap $r1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeySet;

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$KeySet: com.google.common.collect.ImmutableMap map>;

        $i0 = virtualinvoke $r1.<com.google.common.collect.ImmutableMap: int size()>();

        return $i0;
    }

com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList
<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: java.lang.Object[] alternatingKeysAndValues>
<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: int offset>
<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: int size>
    void <init>(java.lang.Object[], int, int)
    {
        com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList $r0;
        java.lang.Object[] $r1;
        int $i0, $i1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<com.google.common.collect.ImmutableList: void <init>()>();

        $r0.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: java.lang.Object[] alternatingKeysAndValues> = $r1;

        $r0.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: int offset> = $i0;

        $r0.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: int size> = $i1;

        return;
    }

    public java.lang.Object get(int)
    {
        com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList $r0;
        int $i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList;

        $i0 := @parameter0: int;

        $i1 = $r0.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: int size>;

        staticinvoke <com.google.common.base.Preconditions: int checkElementIndex(int,int)>($i0, $i1);

        $r1 = $r0.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: java.lang.Object[] alternatingKeysAndValues>;

        $i1 = $i0 + $i0;

        $i0 = $r0.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: int offset>;

        $i0 = $i1 + $i0;

        $r2 = $r1[$i0];

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        return $r2;
    }

    boolean isPartialView()
    {
        com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList $r0;
        java.lang.NullPointerException r1;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList;

        r1 = new java.lang.NullPointerException;

        specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r1;
    }

    public int size()
    {
        com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList $r0;
        int i0;

        $r0 := @this: com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList;

        i0 = $r0.<com.google.common.collect.RegularImmutableMap$KeysOrValuesAsList: int size>;

        return i0;
    }

