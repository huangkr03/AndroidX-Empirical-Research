io.grpc.okhttp.OkHttpClientTransport
<io.grpc.okhttp.OkHttpClientTransport: java.util.Map ERROR_CODE_TO_STATUS>
<io.grpc.okhttp.OkHttpClientTransport: java.util.logging.Logger log>
<io.grpc.okhttp.OkHttpClientTransport: java.net.InetSocketAddress address>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Attributes attributes>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler clientFrameHandler>
<io.grpc.okhttp.OkHttpClientTransport: com.google.common.util.concurrent.SettableFuture connectedFuture>
<io.grpc.okhttp.OkHttpClientTransport: java.lang.Runnable connectingCallback>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.internal.ConnectionSpec connectionSpec>
<io.grpc.okhttp.OkHttpClientTransport: int connectionUnacknowledgedBytesRead>
<io.grpc.okhttp.OkHttpClientTransport: java.lang.String defaultAuthority>
<io.grpc.okhttp.OkHttpClientTransport: boolean enableKeepAlive>
<io.grpc.okhttp.OkHttpClientTransport: java.util.concurrent.Executor executor>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>
<io.grpc.okhttp.OkHttpClientTransport: boolean goAwaySent>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus>
<io.grpc.okhttp.OkHttpClientTransport: boolean hasStream>
<io.grpc.okhttp.OkHttpClientTransport: javax.net.ssl.HostnameVerifier hostnameVerifier>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.InUseStateAggregator inUseState>
<io.grpc.okhttp.OkHttpClientTransport: int initialWindowSize>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.KeepAliveManager keepAliveManager>
<io.grpc.okhttp.OkHttpClientTransport: long keepAliveTimeNanos>
<io.grpc.okhttp.OkHttpClientTransport: long keepAliveTimeoutNanos>
<io.grpc.okhttp.OkHttpClientTransport: boolean keepAliveWithoutCalls>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.ManagedClientTransport$Listener listener>
<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.InternalLogId logId>
<io.grpc.okhttp.OkHttpClientTransport: int maxConcurrentStreams>
<io.grpc.okhttp.OkHttpClientTransport: int maxInboundMetadataSize>
<io.grpc.okhttp.OkHttpClientTransport: int maxMessageSize>
<io.grpc.okhttp.OkHttpClientTransport: int nextStreamId>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.OutboundFlowController outboundFlow>
<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.Http2Ping ping>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.HttpConnectProxiedSocketAddress proxiedAddr>
<io.grpc.okhttp.OkHttpClientTransport: java.util.Random random>
<io.grpc.okhttp.OkHttpClientTransport: java.util.concurrent.ScheduledExecutorService scheduler>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.InternalChannelz$Security securityInfo>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.SerializingExecutor serializingExecutor>
<io.grpc.okhttp.OkHttpClientTransport: java.net.Socket socket>
<io.grpc.okhttp.OkHttpClientTransport: javax.net.SocketFactory socketFactory>
<io.grpc.okhttp.OkHttpClientTransport: javax.net.ssl.SSLSocketFactory sslSocketFactory>
<io.grpc.okhttp.OkHttpClientTransport: boolean stopped>
<io.grpc.okhttp.OkHttpClientTransport: com.google.common.base.Supplier stopwatchFactory>
<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>
<io.grpc.okhttp.OkHttpClientTransport: java.lang.Runnable tooManyPingsRunnable>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.TransportTracer transportTracer>
<io.grpc.okhttp.OkHttpClientTransport: boolean useGetForSafeMethods>
<io.grpc.okhttp.OkHttpClientTransport: java.lang.String userAgent>
<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.internal.framed.Variant variant>
    static volatile java.net.InetSocketAddress '-$$Nest$fgetaddress'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.net.InetSocketAddress r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.net.InetSocketAddress address>;

        return r1;
    }

    static volatile io.grpc.Attributes '-$$Nest$fgetattributes'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.Attributes r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Attributes attributes>;

        return r1;
    }

    static volatile io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler '-$$Nest$fgetclientFrameHandler'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler clientFrameHandler>;

        return r1;
    }

    static volatile io.grpc.okhttp.internal.ConnectionSpec '-$$Nest$fgetconnectionSpec'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.internal.ConnectionSpec r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.internal.ConnectionSpec connectionSpec>;

        return r1;
    }

    static volatile int '-$$Nest$fgetconnectionUnacknowledgedBytesRead'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        int i0;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int connectionUnacknowledgedBytesRead>;

        return i0;
    }

    static volatile java.util.concurrent.Executor '-$$Nest$fgetexecutor'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.util.concurrent.Executor r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.concurrent.Executor executor>;

        return r1;
    }

    static volatile io.grpc.okhttp.ExceptionHandlingFrameWriter '-$$Nest$fgetframeWriter'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.ExceptionHandlingFrameWriter r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        return r1;
    }

    static volatile io.grpc.Status '-$$Nest$fgetgoAwayStatus'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.Status r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus>;

        return r1;
    }

    static volatile javax.net.ssl.HostnameVerifier '-$$Nest$fgethostnameVerifier'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        javax.net.ssl.HostnameVerifier r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        return r1;
    }

    static volatile int '-$$Nest$fgetinitialWindowSize'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        int i0;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int initialWindowSize>;

        return i0;
    }

    static volatile io.grpc.internal.KeepAliveManager '-$$Nest$fgetkeepAliveManager'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.internal.KeepAliveManager r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.KeepAliveManager keepAliveManager>;

        return r1;
    }

    static volatile io.grpc.internal.ManagedClientTransport$Listener '-$$Nest$fgetlistener'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.internal.ManagedClientTransport$Listener r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.ManagedClientTransport$Listener listener>;

        return r1;
    }

    static volatile java.lang.Object '-$$Nest$fgetlock'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Object r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        return r1;
    }

    static volatile int '-$$Nest$fgetmaxInboundMetadataSize'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        int i0;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int maxInboundMetadataSize>;

        return i0;
    }

    static volatile io.grpc.okhttp.OutboundFlowController '-$$Nest$fgetoutboundFlow'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.OutboundFlowController r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.OutboundFlowController outboundFlow>;

        return r1;
    }

    static volatile io.grpc.internal.Http2Ping '-$$Nest$fgetping'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.internal.Http2Ping r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.Http2Ping ping>;

        return r1;
    }

    static volatile javax.net.SocketFactory '-$$Nest$fgetsocketFactory'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        javax.net.SocketFactory r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: javax.net.SocketFactory socketFactory>;

        return r1;
    }

    static volatile javax.net.ssl.SSLSocketFactory '-$$Nest$fgetsslSocketFactory'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        javax.net.ssl.SSLSocketFactory r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        return r1;
    }

    static volatile java.util.Map '-$$Nest$fgetstreams'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.util.Map r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        return r1;
    }

    static volatile java.lang.Runnable '-$$Nest$fgettooManyPingsRunnable'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Runnable r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Runnable tooManyPingsRunnable>;

        return r1;
    }

    static volatile io.grpc.okhttp.internal.framed.Variant '-$$Nest$fgetvariant'(io.grpc.okhttp.OkHttpClientTransport)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.internal.framed.Variant r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.internal.framed.Variant variant>;

        return r1;
    }

    static volatile void '-$$Nest$fputattributes'(io.grpc.okhttp.OkHttpClientTransport, io.grpc.Attributes)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.Attributes $r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter1: io.grpc.Attributes;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Attributes attributes> = $r1;

        return;
    }

    static volatile void '-$$Nest$fputclientFrameHandler'(io.grpc.okhttp.OkHttpClientTransport, io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler $r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter1: io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler clientFrameHandler> = $r1;

        return;
    }

    static volatile void '-$$Nest$fputconnectionUnacknowledgedBytesRead'(io.grpc.okhttp.OkHttpClientTransport, int)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        int $i0;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $i0 := @parameter1: int;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: int connectionUnacknowledgedBytesRead> = $i0;

        return;
    }

    static volatile void '-$$Nest$fputmaxConcurrentStreams'(io.grpc.okhttp.OkHttpClientTransport, int)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        int $i0;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $i0 := @parameter1: int;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: int maxConcurrentStreams> = $i0;

        return;
    }

    static volatile void '-$$Nest$fputping'(io.grpc.okhttp.OkHttpClientTransport, io.grpc.internal.Http2Ping)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.internal.Http2Ping $r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter1: io.grpc.internal.Http2Ping;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.Http2Ping ping> = $r1;

        return;
    }

    static volatile void '-$$Nest$fputsecurityInfo'(io.grpc.okhttp.OkHttpClientTransport, io.grpc.InternalChannelz$Security)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.InternalChannelz$Security $r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter1: io.grpc.InternalChannelz$Security;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.InternalChannelz$Security securityInfo> = $r1;

        return;
    }

    static volatile void '-$$Nest$fputsocket'(io.grpc.okhttp.OkHttpClientTransport, java.net.Socket)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.net.Socket $r1;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter1: java.net.Socket;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.net.Socket socket> = $r1;

        return;
    }

    static volatile java.net.Socket '-$$Nest$mcreateHttpProxySocket'(io.grpc.okhttp.OkHttpClientTransport, java.net.InetSocketAddress, java.net.InetSocketAddress, java.lang.String, java.lang.String)
    {
        java.net.InetSocketAddress $r0, $r1;
        java.lang.String $r2, $r3;
        java.net.Socket $r4;
        io.grpc.okhttp.OkHttpClientTransport $r5;

        $r5 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $r0 := @parameter1: java.net.InetSocketAddress;

        $r1 := @parameter2: java.net.InetSocketAddress;

        $r2 := @parameter3: java.lang.String;

        $r3 := @parameter4: java.lang.String;

        $r4 = specialinvoke $r5.<io.grpc.okhttp.OkHttpClientTransport: java.net.Socket createHttpProxySocket(java.net.InetSocketAddress,java.net.InetSocketAddress,java.lang.String,java.lang.String)>($r0, $r1, $r2, $r3);

        return $r4;
    }

    static volatile void '-$$Nest$monError'(io.grpc.okhttp.OkHttpClientTransport, io.grpc.okhttp.internal.framed.ErrorCode, java.lang.String)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.internal.framed.ErrorCode $r1;
        java.lang.String $r2;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter1: io.grpc.okhttp.internal.framed.ErrorCode;

        $r2 := @parameter2: java.lang.String;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void onError(io.grpc.okhttp.internal.framed.ErrorCode,java.lang.String)>($r1, $r2);

        return;
    }

    static volatile void '-$$Nest$mstartGoAway'(io.grpc.okhttp.OkHttpClientTransport, int, io.grpc.okhttp.internal.framed.ErrorCode, io.grpc.Status)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        int $i0;
        io.grpc.okhttp.internal.framed.ErrorCode $r1;
        io.grpc.Status $r2;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $i0 := @parameter1: int;

        $r1 := @parameter2: io.grpc.okhttp.internal.framed.ErrorCode;

        $r2 := @parameter3: io.grpc.Status;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void startGoAway(int,io.grpc.okhttp.internal.framed.ErrorCode,io.grpc.Status)>($i0, $r1, $r2);

        return;
    }

    static volatile boolean '-$$Nest$mstartPendingStreams'(io.grpc.okhttp.OkHttpClientTransport)
    {
        boolean $z0;
        io.grpc.okhttp.OkHttpClientTransport $r0;

        $r0 := @parameter0: io.grpc.okhttp.OkHttpClientTransport;

        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean startPendingStreams()>();

        return $z0;
    }

    static volatile java.util.logging.Logger '-$$Nest$sfgetlog'()
    {
        java.util.logging.Logger r0;

        r0 = <io.grpc.okhttp.OkHttpClientTransport: java.util.logging.Logger log>;

        return r0;
    }

    static void <clinit>()
    {
        java.util.Map $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;

        $r0 = staticinvoke <io.grpc.okhttp.OkHttpClientTransport: java.util.Map buildErrorCodeToStatusMap()>();

        <io.grpc.okhttp.OkHttpClientTransport: java.util.Map ERROR_CODE_TO_STATUS> = $r0;

        $r1 = class "Lio/grpc/okhttp/OkHttpClientTransport;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        <io.grpc.okhttp.OkHttpClientTransport: java.util.logging.Logger log> = $r3;

        return;
    }

    private void <init>(io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory, java.net.InetSocketAddress, java.lang.String, java.lang.String, io.grpc.Attributes, com.google.common.base.Supplier, io.grpc.okhttp.internal.framed.Variant, io.grpc.HttpConnectProxiedSocketAddress, java.lang.Runnable)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.String $r1, $r9;
        io.grpc.Attributes $r2;
        com.google.common.base.Supplier $r3;
        io.grpc.okhttp.internal.framed.Variant $r4;
        io.grpc.HttpConnectProxiedSocketAddress $r5;
        java.lang.Runnable $r6;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r7;
        java.net.InetSocketAddress $r8, $r11;
        java.lang.Object $r10, r25;
        int $i0;
        java.util.concurrent.Executor $r12;
        java.util.concurrent.ScheduledExecutorService $r13;
        javax.net.SocketFactory $r14;
        javax.net.ssl.SSLSocketFactory $r15;
        javax.net.ssl.HostnameVerifier $r16;
        io.grpc.okhttp.internal.ConnectionSpec $r17;
        io.grpc.internal.TransportTracer$Factory $r18;
        io.grpc.internal.TransportTracer $r19;
        java.lang.Class $r20;
        io.grpc.InternalLogId $r21;
        io.grpc.Attributes$Builder $r22;
        io.grpc.Attributes$Key $r23;
        boolean $z0;
        java.util.Random r24;
        java.util.HashMap r26;
        java.util.LinkedList r27;
        io.grpc.okhttp.OkHttpClientTransport$1 r28;
        io.grpc.internal.SerializingExecutor r29;
        java.util.Map r30;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r7 := @parameter0: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory;

        $r8 := @parameter1: java.net.InetSocketAddress;

        $r9 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.String;

        $r2 := @parameter4: io.grpc.Attributes;

        $r3 := @parameter5: com.google.common.base.Supplier;

        $r4 := @parameter6: io.grpc.okhttp.internal.framed.Variant;

        $r5 := @parameter7: io.grpc.HttpConnectProxiedSocketAddress;

        $r6 := @parameter8: java.lang.Runnable;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r24 = new java.util.Random;

        specialinvoke r24.<java.util.Random: void <init>()>();

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Random random> = r24;

        r25 = new java.lang.Object;

        specialinvoke r25.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock> = r25;

        r26 = new java.util.HashMap;

        specialinvoke r26.<java.util.HashMap: void <init>()>();

        r30 = (java.util.Map) r26;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams> = r30;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: int maxConcurrentStreams> = 0;

        r27 = new java.util.LinkedList;

        specialinvoke r27.<java.util.LinkedList: void <init>()>();

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams> = r27;

        r28 = new io.grpc.okhttp.OkHttpClientTransport$1;

        specialinvoke r28.<io.grpc.okhttp.OkHttpClientTransport$1: void <init>(io.grpc.okhttp.OkHttpClientTransport)>($r0);

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.InUseStateAggregator inUseState> = r28;

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r8, "address");

        $r11 = (java.net.InetSocketAddress) $r10;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.net.InetSocketAddress address> = $r11;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.String defaultAuthority> = $r9;

        $i0 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: int maxMessageSize>;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: int maxMessageSize> = $i0;

        $i0 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: int flowControlWindow>;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: int initialWindowSize> = $i0;

        $r12 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.Executor executor>;

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r12, "executor");

        $r12 = (java.util.concurrent.Executor) $r10;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.concurrent.Executor executor> = $r12;

        r29 = new io.grpc.internal.SerializingExecutor;

        $r12 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.Executor executor>;

        specialinvoke r29.<io.grpc.internal.SerializingExecutor: void <init>(java.util.concurrent.Executor)>($r12);

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.SerializingExecutor serializingExecutor> = r29;

        $r13 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: java.util.concurrent.ScheduledExecutorService scheduledExecutorService>;

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r13, "scheduledExecutorService");

        $r13 = (java.util.concurrent.ScheduledExecutorService) $r10;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.concurrent.ScheduledExecutorService scheduler> = $r13;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: int nextStreamId> = 3;

        $r14 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.SocketFactory socketFactory>;

        if $r14 != null goto label1;

        $r14 = staticinvoke <javax.net.SocketFactory: javax.net.SocketFactory getDefault()>();

        goto label2;

     label1:
        $r14 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.SocketFactory socketFactory>;

     label2:
        $r0.<io.grpc.okhttp.OkHttpClientTransport: javax.net.SocketFactory socketFactory> = $r14;

        $r15 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r15;

        $r16 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: javax.net.ssl.HostnameVerifier hostnameVerifier> = $r16;

        $r17 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.okhttp.internal.ConnectionSpec connectionSpec>;

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r17, "connectionSpec");

        $r17 = (io.grpc.okhttp.internal.ConnectionSpec) $r10;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.internal.ConnectionSpec connectionSpec> = $r17;

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "stopwatchFactory");

        $r3 = (com.google.common.base.Supplier) $r10;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: com.google.common.base.Supplier stopwatchFactory> = $r3;

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r4, "variant");

        $r4 = (io.grpc.okhttp.internal.framed.Variant) $r10;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.internal.framed.Variant variant> = $r4;

        $r9 = staticinvoke <io.grpc.internal.GrpcUtil: java.lang.String getGrpcUserAgent(java.lang.String,java.lang.String)>("okhttp", $r1);

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.String userAgent> = $r9;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.HttpConnectProxiedSocketAddress proxiedAddr> = $r5;

        $r10 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r6, "tooManyPingsRunnable");

        $r6 = (java.lang.Runnable) $r10;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Runnable tooManyPingsRunnable> = $r6;

        $i0 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: int maxInboundMetadataSize>;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: int maxInboundMetadataSize> = $i0;

        $r18 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: io.grpc.internal.TransportTracer$Factory transportTracerFactory>;

        $r19 = virtualinvoke $r18.<io.grpc.internal.TransportTracer$Factory: io.grpc.internal.TransportTracer create()>();

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.TransportTracer transportTracer> = $r19;

        $r20 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.net.InetSocketAddress: java.lang.String toString()>();

        $r21 = staticinvoke <io.grpc.InternalLogId: io.grpc.InternalLogId allocate(java.lang.Class,java.lang.String)>($r20, $r9);

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.InternalLogId logId> = $r21;

        $r22 = staticinvoke <io.grpc.Attributes: io.grpc.Attributes$Builder newBuilder()>();

        $r23 = <io.grpc.internal.GrpcAttributes: io.grpc.Attributes$Key ATTR_CLIENT_EAG_ATTRS>;

        $r22 = virtualinvoke $r22.<io.grpc.Attributes$Builder: io.grpc.Attributes$Builder set(io.grpc.Attributes$Key,java.lang.Object)>($r23, $r2);

        $r2 = virtualinvoke $r22.<io.grpc.Attributes$Builder: io.grpc.Attributes build()>();

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Attributes attributes> = $r2;

        $z0 = $r7.<io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory: boolean useGetForSafeMethods>;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean useGetForSafeMethods> = $z0;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void initTransportTracer()>();

        return;
    }

    public void <init>(io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory, java.net.InetSocketAddress, java.lang.String, java.lang.String, io.grpc.Attributes, io.grpc.HttpConnectProxiedSocketAddress, java.lang.Runnable)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory $r1;
        java.net.InetSocketAddress $r2;
        java.lang.String $r3, $r4;
        io.grpc.Attributes $r5;
        io.grpc.HttpConnectProxiedSocketAddress $r6;
        java.lang.Runnable $r7;
        com.google.common.base.Supplier $r8;
        io.grpc.okhttp.internal.framed.Http2 $r9;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory;

        $r2 := @parameter1: java.net.InetSocketAddress;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: io.grpc.Attributes;

        $r6 := @parameter5: io.grpc.HttpConnectProxiedSocketAddress;

        $r7 := @parameter6: java.lang.Runnable;

        $r8 = <io.grpc.internal.GrpcUtil: com.google.common.base.Supplier STOPWATCH_SUPPLIER>;

        $r9 = new io.grpc.okhttp.internal.framed.Http2;

        specialinvoke $r9.<io.grpc.okhttp.internal.framed.Http2: void <init>()>();

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void <init>(io.grpc.okhttp.OkHttpChannelBuilder$OkHttpTransportFactory,java.net.InetSocketAddress,java.lang.String,java.lang.String,io.grpc.Attributes,com.google.common.base.Supplier,io.grpc.okhttp.internal.framed.Variant,io.grpc.HttpConnectProxiedSocketAddress,java.lang.Runnable)>($r1, $r2, $r3, $r4, $r5, $r8, $r9, $r6, $r7);

        return;
    }

    private static java.util.Map buildErrorCodeToStatusMap()
    {
        java.util.EnumMap $r0, r4;
        io.grpc.okhttp.internal.framed.ErrorCode $r1;
        io.grpc.Status $r2;
        java.util.Map $r3;

        r4 = new java.util.EnumMap;

        $r0 = r4;

        specialinvoke r4.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lio/grpc/okhttp/internal/framed/ErrorCode;");

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode NO_ERROR>;

        $r2 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("No error: A GRPC status of OK should have been sent");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode PROTOCOL_ERROR>;

        $r2 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Protocol error");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode INTERNAL_ERROR>;

        $r2 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Internal error");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode FLOW_CONTROL_ERROR>;

        $r2 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Flow control error");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode STREAM_CLOSED>;

        $r2 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Stream closed");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode FRAME_TOO_LARGE>;

        $r2 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Frame too large");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode REFUSED_STREAM>;

        $r2 = <io.grpc.Status: io.grpc.Status UNAVAILABLE>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Refused stream");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode CANCEL>;

        $r2 = <io.grpc.Status: io.grpc.Status CANCELLED>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Cancelled");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode COMPRESSION_ERROR>;

        $r2 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Compression error");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode CONNECT_ERROR>;

        $r2 = <io.grpc.Status: io.grpc.Status INTERNAL>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Connect error");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode ENHANCE_YOUR_CALM>;

        $r2 = <io.grpc.Status: io.grpc.Status RESOURCE_EXHAUSTED>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Enhance your calm");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r1 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode INADEQUATE_SECURITY>;

        $r2 = <io.grpc.Status: io.grpc.Status PERMISSION_DENIED>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Inadequate security");

        $r3 = (java.util.Map) $r0;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r3 = (java.util.Map) $r0;

        $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

        return $r3;
    }

    private io.grpc.okhttp.internal.proxy.Request createHttpProxyRequest(java.net.InetSocketAddress, java.lang.String, java.lang.String)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.net.InetSocketAddress $r1;
        java.lang.String $r2, $r3, $r5;
        io.grpc.okhttp.internal.proxy.HttpUrl$Builder $r4;
        int $i0;
        io.grpc.okhttp.internal.proxy.HttpUrl $r6;
        io.grpc.okhttp.internal.proxy.Request$Builder $r7;
        java.lang.StringBuilder $r8;
        io.grpc.okhttp.internal.proxy.Request $r9;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: java.net.InetSocketAddress;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = new io.grpc.okhttp.internal.proxy.HttpUrl$Builder;

        specialinvoke $r4.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: void <init>()>();

        $r4 = virtualinvoke $r4.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: io.grpc.okhttp.internal.proxy.HttpUrl$Builder scheme(java.lang.String)>("https");

        $r5 = virtualinvoke $r1.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        $r4 = virtualinvoke $r4.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: io.grpc.okhttp.internal.proxy.HttpUrl$Builder host(java.lang.String)>($r5);

        $i0 = virtualinvoke $r1.<java.net.InetSocketAddress: int getPort()>();

        $r4 = virtualinvoke $r4.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: io.grpc.okhttp.internal.proxy.HttpUrl$Builder port(int)>($i0);

        $r6 = virtualinvoke $r4.<io.grpc.okhttp.internal.proxy.HttpUrl$Builder: io.grpc.okhttp.internal.proxy.HttpUrl build()>();

        $r7 = new io.grpc.okhttp.internal.proxy.Request$Builder;

        specialinvoke $r7.<io.grpc.okhttp.internal.proxy.Request$Builder: void <init>()>();

        $r7 = virtualinvoke $r7.<io.grpc.okhttp.internal.proxy.Request$Builder: io.grpc.okhttp.internal.proxy.Request$Builder url(io.grpc.okhttp.internal.proxy.HttpUrl)>($r6);

        $r5 = virtualinvoke $r6.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String host()>();

        $i0 = virtualinvoke $r6.<io.grpc.okhttp.internal.proxy.HttpUrl: int port()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<io.grpc.okhttp.internal.proxy.Request$Builder: io.grpc.okhttp.internal.proxy.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r5);

        $r5 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.String userAgent>;

        $r7 = virtualinvoke $r7.<io.grpc.okhttp.internal.proxy.Request$Builder: io.grpc.okhttp.internal.proxy.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r5);

        if $r2 == null goto label1;

        if $r3 == null goto label1;

        $r2 = staticinvoke <io.grpc.okhttp.internal.Credentials: java.lang.String basic(java.lang.String,java.lang.String)>($r2, $r3);

        virtualinvoke $r7.<io.grpc.okhttp.internal.proxy.Request$Builder: io.grpc.okhttp.internal.proxy.Request$Builder header(java.lang.String,java.lang.String)>("Proxy-Authorization", $r2);

     label1:
        $r9 = virtualinvoke $r7.<io.grpc.okhttp.internal.proxy.Request$Builder: io.grpc.okhttp.internal.proxy.Request build()>();

        return $r9;
    }

    private java.net.Socket createHttpProxySocket(java.net.InetSocketAddress, java.net.InetSocketAddress, java.lang.String, java.lang.String) throws io.grpc.StatusException
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.net.InetSocketAddress $r1, $r2;
        java.lang.String $r3, $r4, $r8;
        java.net.InetAddress $r5;
        javax.net.SocketFactory $r6;
        int $i0, $i1;
        java.net.Socket $r7;
        okio.Source $r9;
        okio.Sink $r10;
        okio.BufferedSink $r11, $r17;
        io.grpc.okhttp.internal.proxy.Request $r12;
        io.grpc.okhttp.internal.proxy.HttpUrl $r13;
        java.util.Locale $r14;
        java.lang.Object[] $r15;
        java.lang.Integer $r16;
        io.grpc.okhttp.internal.Headers $r18;
        io.grpc.okhttp.internal.StatusLine $r19;
        boolean $z0;
        okio.Buffer $r20;
        java.lang.Throwable $r21, $r23, $r26;
        java.lang.StringBuilder $r22;
        io.grpc.Status $r24;
        io.grpc.StatusException $r25;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: java.net.InetSocketAddress;

        $r2 := @parameter1: java.net.InetSocketAddress;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

     label01:
        $r5 = virtualinvoke $r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

     label02:
        if $r5 == null goto label05;

        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: javax.net.SocketFactory socketFactory>;

     label03:
        $r5 = virtualinvoke $r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $i0 = virtualinvoke $r2.<java.net.InetSocketAddress: int getPort()>();

        $r7 = virtualinvoke $r6.<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>($r5, $i0);

     label04:
        goto label07;

     label05:
        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: javax.net.SocketFactory socketFactory>;

     label06:
        $r8 = virtualinvoke $r2.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        $i0 = virtualinvoke $r2.<java.net.InetSocketAddress: int getPort()>();

        $r7 = virtualinvoke $r6.<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>($r8, $i0);

     label07:
        virtualinvoke $r7.<java.net.Socket: void setTcpNoDelay(boolean)>(1);

     label08:
        $r9 = staticinvoke <okio.Okio: okio.Source source(java.net.Socket)>($r7);

        $r10 = staticinvoke <okio.Okio: okio.Sink sink(java.net.Socket)>($r7);

        $r11 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r10);

     label09:
        $r12 = specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.internal.proxy.Request createHttpProxyRequest(java.net.InetSocketAddress,java.lang.String,java.lang.String)>($r1, $r3, $r4);

        $r13 = virtualinvoke $r12.<io.grpc.okhttp.internal.proxy.Request: io.grpc.okhttp.internal.proxy.HttpUrl httpUrl()>();

     label10:
        $r14 = <java.util.Locale: java.util.Locale US>;

        $r15 = newarray (java.lang.Object)[2];

     label11:
        $r3 = virtualinvoke $r13.<io.grpc.okhttp.internal.proxy.HttpUrl: java.lang.String host()>();

     label12:
        $r15[0] = $r3;

     label13:
        $i0 = virtualinvoke $r13.<io.grpc.okhttp.internal.proxy.HttpUrl: int port()>();

     label14:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r15[1] = $r16;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r14, "CONNECT %s:%d HTTP/1.1", $r15);

     label15:
        $r17 = interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r3);

        interfaceinvoke $r17.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("\r\n");

        $r18 = virtualinvoke $r12.<io.grpc.okhttp.internal.proxy.Request: io.grpc.okhttp.internal.Headers headers()>();

        $i0 = virtualinvoke $r18.<io.grpc.okhttp.internal.Headers: int size()>();

     label16:
        $i1 = 0;

     label17:
        if $i1 >= $i0 goto label20;

     label18:
        $r18 = virtualinvoke $r12.<io.grpc.okhttp.internal.proxy.Request: io.grpc.okhttp.internal.Headers headers()>();

        $r3 = virtualinvoke $r18.<io.grpc.okhttp.internal.Headers: java.lang.String name(int)>($i1);

        $r17 = interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r3);

        $r17 = interfaceinvoke $r17.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>(": ");

        $r18 = virtualinvoke $r12.<io.grpc.okhttp.internal.proxy.Request: io.grpc.okhttp.internal.Headers headers()>();

        $r3 = virtualinvoke $r18.<io.grpc.okhttp.internal.Headers: java.lang.String value(int)>($i1);

        $r17 = interfaceinvoke $r17.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r3);

        interfaceinvoke $r17.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("\r\n");

     label19:
        $i1 = $i1 + 1;

        goto label17;

     label20:
        interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("\r\n");

        interfaceinvoke $r11.<okio.BufferedSink: void flush()>();

     label21:
        $r3 = staticinvoke <io.grpc.okhttp.OkHttpClientTransport: java.lang.String readUtf8LineStrictUnbuffered(okio.Source)>($r9);

        $r19 = staticinvoke <io.grpc.okhttp.internal.StatusLine: io.grpc.okhttp.internal.StatusLine parse(java.lang.String)>($r3);

     label22:
        $r3 = staticinvoke <io.grpc.okhttp.OkHttpClientTransport: java.lang.String readUtf8LineStrictUnbuffered(okio.Source)>($r9);

     label23:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("");

     label24:
        if $z0 == 0 goto label22;

        $i0 = $r19.<io.grpc.okhttp.internal.StatusLine: int code>;

        if $i0 < 200 goto label25;

        $i0 = $r19.<io.grpc.okhttp.internal.StatusLine: int code>;

        if $i0 >= 300 goto label25;

        return $r7;

     label25:
        $r20 = new okio.Buffer;

     label26:
        specialinvoke $r20.<okio.Buffer: void <init>()>();

     label27:
        virtualinvoke $r7.<java.net.Socket: void shutdownOutput()>();

        interfaceinvoke $r9.<okio.Source: long read(okio.Buffer,long)>($r20, 1024L);

     label28:
        goto label33;

     label29:
        $r21 := @caughtexception;

     label30:
        $r3 = virtualinvoke $r21.<java.io.IOException: java.lang.String toString()>();

     label31:
        $r22 = new java.lang.StringBuilder;

     label32:
        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read body: ");

        $r22 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>($r3);

     label33:
        virtualinvoke $r7.<java.net.Socket: void close()>();

     label34:
        goto label36;

     label35:
        $r23 := @caughtexception;

     label36:
        $r14 = <java.util.Locale: java.util.Locale US>;

        $r15 = newarray (java.lang.Object)[3];

        $i0 = $r19.<io.grpc.okhttp.internal.StatusLine: int code>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r15[0] = $r16;

        $r3 = $r19.<io.grpc.okhttp.internal.StatusLine: java.lang.String message>;

        $r15[1] = $r3;

     label37:
        $r3 = virtualinvoke $r20.<okio.Buffer: java.lang.String readUtf8()>();

     label38:
        $r15[2] = $r3;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r14, "Response returned from proxy was not successful (expected 2xx, got %d %s). Response body:\n%s", $r15);

        $r24 = <io.grpc.Status: io.grpc.Status UNAVAILABLE>;

     label39:
        $r24 = virtualinvoke $r24.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>($r3);

        $r25 = virtualinvoke $r24.<io.grpc.Status: io.grpc.StatusException asException()>();

     label40:
        throw $r25;

     label41:
        $r26 := @caughtexception;

        $r24 = <io.grpc.Status: io.grpc.Status UNAVAILABLE>;

        $r24 = virtualinvoke $r24.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Failed trying to connect with proxy");

        $r24 = virtualinvoke $r24.<io.grpc.Status: io.grpc.Status withCause(java.lang.Throwable)>($r26);

        $r25 = virtualinvoke $r24.<io.grpc.Status: io.grpc.StatusException asException()>();

        goto label42;

     label42:
        throw $r25;

        catch java.io.IOException from label01 to label02 with label41;
        catch java.io.IOException from label03 to label04 with label41;
        catch java.io.IOException from label06 to label07 with label41;
        catch java.io.IOException from label07 to label08 with label41;
        catch java.io.IOException from label09 to label10 with label41;
        catch java.io.IOException from label11 to label12 with label41;
        catch java.io.IOException from label13 to label14 with label41;
        catch java.io.IOException from label15 to label16 with label41;
        catch java.io.IOException from label18 to label19 with label41;
        catch java.io.IOException from label20 to label21 with label41;
        catch java.io.IOException from label23 to label24 with label41;
        catch java.io.IOException from label26 to label27 with label41;
        catch java.io.IOException from label27 to label28 with label29;
        catch java.io.IOException from label30 to label31 with label41;
        catch java.io.IOException from label32 to label33 with label41;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.io.IOException from label37 to label38 with label41;
        catch java.io.IOException from label39 to label40 with label41;
    }

    private java.lang.Throwable getPingFailure()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Object $r1;
        io.grpc.Status $r2;
        io.grpc.StatusException $r3;
        java.lang.Throwable $r4;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus>;

        if $r2 == null goto label3;

        $r3 = virtualinvoke $r2.<io.grpc.Status: io.grpc.StatusException asException()>();

     label2:
        exitmonitor $r1;

        return $r3;

     label3:
        $r2 = <io.grpc.Status: io.grpc.Status UNAVAILABLE>;

        $r2 = virtualinvoke $r2.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Connection closed");

        $r3 = virtualinvoke $r2.<io.grpc.Status: io.grpc.StatusException asException()>();

     label4:
        exitmonitor $r1;

        return $r3;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor $r1;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void initTransportTracer()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Object $r1;
        io.grpc.okhttp.OkHttpClientTransport$2 $r2;
        io.grpc.internal.TransportTracer $r3;
        java.lang.Throwable $r4;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.TransportTracer transportTracer>;

        $r2 = new io.grpc.okhttp.OkHttpClientTransport$2;

        specialinvoke $r2.<io.grpc.okhttp.OkHttpClientTransport$2: void <init>(io.grpc.okhttp.OkHttpClientTransport)>($r0);

        virtualinvoke $r3.<io.grpc.internal.TransportTracer: void setFlowControlWindowReader(io.grpc.internal.TransportTracer$FlowControlReader)>($r2);

     label2:
        exitmonitor $r1;

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor $r1;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void maybeClearInUse(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.OkHttpClientStream $r1;
        boolean $z0;
        java.util.Deque $r2;
        java.util.Map $r3;
        io.grpc.internal.KeepAliveManager $r4;
        io.grpc.internal.InUseStateAggregator $r5;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $z0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean hasStream>;

        if $z0 == 0 goto label1;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        $z0 = interfaceinvoke $r2.<java.util.Deque: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean hasStream> = 0;

        $r4 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.KeepAliveManager keepAliveManager>;

        if $r4 == null goto label1;

        virtualinvoke $r4.<io.grpc.internal.KeepAliveManager: void onTransportIdle()>();

     label1:
        $z0 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientStream: boolean shouldBeCountedForInUse()>();

        if $z0 == 0 goto label2;

        $r5 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.InUseStateAggregator inUseState>;

        virtualinvoke $r5.<io.grpc.internal.InUseStateAggregator: void updateObjectInUse(java.lang.Object,boolean)>($r1, 0);

     label2:
        return;
    }

    private void onError(io.grpc.okhttp.internal.framed.ErrorCode, java.lang.String)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.internal.framed.ErrorCode $r1;
        java.lang.String $r2;
        io.grpc.Status $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: io.grpc.okhttp.internal.framed.ErrorCode;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status toGrpcStatus(io.grpc.okhttp.internal.framed.ErrorCode)>($r1);

        $r3 = virtualinvoke $r3.<io.grpc.Status: io.grpc.Status augmentDescription(java.lang.String)>($r2);

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void startGoAway(int,io.grpc.okhttp.internal.framed.ErrorCode,io.grpc.Status)>(0, $r1, $r3);

        return;
    }

    private static java.lang.String readUtf8LineStrictUnbuffered(okio.Source) throws java.io.IOException
    {
        byte $b0;
        okio.Source $r0;
        okio.Buffer $r1;
        long $l1;
        java.lang.String $r2;
        java.io.EOFException $r3;
        okio.ByteString $r4;
        java.lang.StringBuilder $r5;

        $r0 := @parameter0: okio.Source;

        $r1 = new okio.Buffer;

        specialinvoke $r1.<okio.Buffer: void <init>()>();

     label1:
        $l1 = interfaceinvoke $r0.<okio.Source: long read(okio.Buffer,long)>($r1, 1L);

        $b0 = $l1 cmp -1L;

        if $b0 == 0 goto label2;

        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $l1 = $l1 + -1L;

        $b0 = virtualinvoke $r1.<okio.Buffer: byte getByte(long)>($l1);

        if $b0 != 10 goto label1;

        $r2 = virtualinvoke $r1.<okio.Buffer: java.lang.String readUtf8LineStrict()>();

        return $r2;

     label2:
        $r3 = new java.io.EOFException;

        $r4 = virtualinvoke $r1.<okio.Buffer: okio.ByteString readByteString()>();

        $r2 = virtualinvoke $r4.<okio.ByteString: java.lang.String hex()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n not found: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.EOFException: void <init>(java.lang.String)>($r2);

        goto label3;

     label3:
        throw $r3;
    }

    private void sendConnectionPrefaceAndSettings()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Object $r1;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r2;
        io.grpc.okhttp.internal.framed.Settings $r3;
        int $i0;
        long $l1;
        java.lang.Throwable $r4;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        virtualinvoke $r2.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void connectionPreface()>();

        $r3 = new io.grpc.okhttp.internal.framed.Settings;

        specialinvoke $r3.<io.grpc.okhttp.internal.framed.Settings: void <init>()>();

        $i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int initialWindowSize>;

        staticinvoke <io.grpc.okhttp.OkHttpSettingsUtil: void set(io.grpc.okhttp.internal.framed.Settings,int,int)>($r3, 7, $i0);

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        virtualinvoke $r2.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void settings(io.grpc.okhttp.internal.framed.Settings)>($r3);

        $i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int initialWindowSize>;

        if $i0 <= 65535 goto label2;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $i0 = $i0 + -65535;

        $l1 = (long) $i0;

        virtualinvoke $r2.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void windowUpdate(int,long)>(0, $l1);

     label2:
        exitmonitor $r1;

        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor $r1;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void setInUse(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.OkHttpClientStream $r1;
        boolean $z0;
        io.grpc.internal.KeepAliveManager $r2;
        io.grpc.internal.InUseStateAggregator $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $z0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean hasStream>;

        if $z0 != 0 goto label1;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean hasStream> = 1;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.KeepAliveManager keepAliveManager>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<io.grpc.internal.KeepAliveManager: void onTransportActive()>();

     label1:
        $z0 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientStream: boolean shouldBeCountedForInUse()>();

        if $z0 == 0 goto label2;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.InUseStateAggregator inUseState>;

        virtualinvoke $r3.<io.grpc.internal.InUseStateAggregator: void updateObjectInUse(java.lang.Object,boolean)>($r1, 1);

     label2:
        return;
    }

    private void startGoAway(int, io.grpc.okhttp.internal.framed.ErrorCode, io.grpc.Status)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.Status $r1, $r6;
        java.lang.Object $r2, $r13;
        io.grpc.internal.ClientStreamListener$RpcProgress $r3;
        io.grpc.Metadata $r4;
        int $i0, $i1;
        io.grpc.okhttp.internal.framed.ErrorCode $r5;
        io.grpc.internal.ManagedClientTransport$Listener $r7;
        boolean $z0;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r8;
        byte[] $r9;
        java.util.Map $r10;
        java.util.Set $r11;
        java.util.Iterator $r12;
        java.util.Map$Entry $r14;
        java.lang.Integer $r15;
        io.grpc.okhttp.OkHttpClientStream $r16;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r17;
        java.util.Deque $r18;
        java.lang.Throwable $r19;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $i0 := @parameter0: int;

        $r5 := @parameter1: io.grpc.okhttp.internal.framed.ErrorCode;

        $r1 := @parameter2: io.grpc.Status;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r2;

     label01:
        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus>;

        if $r6 != null goto label02;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus> = $r1;

        $r7 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.ManagedClientTransport$Listener listener>;

        interfaceinvoke $r7.<io.grpc.internal.ManagedClientTransport$Listener: void transportShutdown(io.grpc.Status)>($r1);

     label02:
        if $r5 == null goto label03;

        $z0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean goAwaySent>;

        if $z0 != 0 goto label03;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean goAwaySent> = 1;

        $r8 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $r9 = newarray (byte)[0];

        virtualinvoke $r8.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void goAway(int,io.grpc.okhttp.internal.framed.ErrorCode,byte[])>(0, $r5, $r9);

     label03:
        $r10 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.util.Map$Entry) $r13;

        $r13 = interfaceinvoke $r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (java.lang.Integer) $r13;

        $i1 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        if $i1 <= $i0 goto label04;

        interfaceinvoke $r12.<java.util.Iterator: void remove()>();

        $r13 = interfaceinvoke $r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (io.grpc.okhttp.OkHttpClientStream) $r13;

        $r17 = virtualinvoke $r16.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        $r3 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress REFUSED>;

        $r4 = new io.grpc.Metadata;

        specialinvoke $r4.<io.grpc.Metadata: void <init>()>();

        virtualinvoke $r17.<io.grpc.okhttp.OkHttpClientStream$TransportState: void transportReportStatus(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,boolean,io.grpc.Metadata)>($r1, $r3, 0, $r4);

        $r13 = interfaceinvoke $r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (io.grpc.okhttp.OkHttpClientStream) $r13;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void maybeClearInUse(io.grpc.okhttp.OkHttpClientStream)>($r16);

        goto label04;

     label05:
        $r18 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        $r12 = interfaceinvoke $r18.<java.util.Deque: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (io.grpc.okhttp.OkHttpClientStream) $r13;

        $r17 = virtualinvoke $r16.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        $r3 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress MISCARRIED>;

        $r4 = new io.grpc.Metadata;

        specialinvoke $r4.<io.grpc.Metadata: void <init>()>();

        virtualinvoke $r17.<io.grpc.okhttp.OkHttpClientStream$TransportState: void transportReportStatus(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,boolean,io.grpc.Metadata)>($r1, $r3, 1, $r4);

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void maybeClearInUse(io.grpc.okhttp.OkHttpClientStream)>($r16);

        goto label06;

     label07:
        $r18 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        interfaceinvoke $r18.<java.util.Deque: void clear()>();

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void stopIfNecessary()>();

     label08:
        exitmonitor $r2;

        return;

     label09:
        $r19 := @caughtexception;

     label10:
        exitmonitor $r2;

        goto label11;

     label11:
        throw $r19;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private boolean startPendingStreams()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        int $i0, $i1;
        boolean $z0, $z1;
        java.util.Deque $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        io.grpc.okhttp.OkHttpClientStream $r4;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $z0 = 0;

     label1:
        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        $z1 = interfaceinvoke $r1.<java.util.Deque: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $i1 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int maxConcurrentStreams>;

        if $i1 >= $i0 goto label2;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        $r3 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object poll()>();

        $r4 = (io.grpc.okhttp.OkHttpClientStream) $r3;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void startStream(io.grpc.okhttp.OkHttpClientStream)>($r4);

        $z0 = 1;

        goto label1;

     label2:
        return $z0;
    }

    private void startStream(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.OkHttpClientStream $r1;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r2;
        int $i0;
        boolean $z0;
        java.util.Map $r3;
        java.lang.Integer $r4;
        io.grpc.MethodDescriptor$MethodType $r5, $r6;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r7;
        io.grpc.okhttp.internal.framed.ErrorCode $r8;
        io.grpc.Status $r9;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $r2 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        $i0 = virtualinvoke $r2.<io.grpc.okhttp.OkHttpClientStream$TransportState: int id()>();

        if $i0 != -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "StreamId already assigned");

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int nextStreamId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r1);

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void setInUse(io.grpc.okhttp.OkHttpClientStream)>($r1);

        $r2 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        $i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int nextStreamId>;

        virtualinvoke $r2.<io.grpc.okhttp.OkHttpClientStream$TransportState: void start(int)>($i0);

        $r5 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientStream: io.grpc.MethodDescriptor$MethodType getType()>();

        $r6 = <io.grpc.MethodDescriptor$MethodType: io.grpc.MethodDescriptor$MethodType UNARY>;

        if $r5 == $r6 goto label3;

        $r5 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientStream: io.grpc.MethodDescriptor$MethodType getType()>();

        $r6 = <io.grpc.MethodDescriptor$MethodType: io.grpc.MethodDescriptor$MethodType SERVER_STREAMING>;

        if $r5 != $r6 goto label4;

     label3:
        $z0 = virtualinvoke $r1.<io.grpc.okhttp.OkHttpClientStream: boolean useGet()>();

        if $z0 == 0 goto label5;

     label4:
        $r7 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        virtualinvoke $r7.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void flush()>();

     label5:
        $i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int nextStreamId>;

        if $i0 < 2147483645 goto label6;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: int nextStreamId> = 2147483647;

        $r8 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode NO_ERROR>;

        $r9 = <io.grpc.Status: io.grpc.Status UNAVAILABLE>;

        $r9 = virtualinvoke $r9.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>("Stream ids exhausted");

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void startGoAway(int,io.grpc.okhttp.internal.framed.ErrorCode,io.grpc.Status)>(2147483647, $r8, $r9);

        return;

     label6:
        $i0 = $i0 + 2;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: int nextStreamId> = $i0;

        return;
    }

    private void stopIfNecessary()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        byte[] $r1;
        io.grpc.Status $r2;
        java.util.Map $r3;
        boolean $z0;
        java.util.Deque $r4;
        io.grpc.internal.KeepAliveManager $r5;
        io.grpc.internal.Http2Ping $r6;
        java.lang.Throwable $r7;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r8;
        io.grpc.okhttp.internal.framed.ErrorCode $r9;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus>;

        if $r2 == null goto label6;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label6;

        $r4 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        $z0 = interfaceinvoke $r4.<java.util.Deque: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean stopped>;

        if $z0 == 0 goto label2;

        return;

     label2:
        $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean stopped> = 1;

        $r5 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.KeepAliveManager keepAliveManager>;

        if $r5 == null goto label3;

        virtualinvoke $r5.<io.grpc.internal.KeepAliveManager: void onTransportTermination()>();

     label3:
        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.Http2Ping ping>;

        if $r6 == null goto label4;

        $r7 = specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Throwable getPingFailure()>();

        virtualinvoke $r6.<io.grpc.internal.Http2Ping: void failed(java.lang.Throwable)>($r7);

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.Http2Ping ping> = null;

     label4:
        $z0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean goAwaySent>;

        if $z0 != 0 goto label5;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean goAwaySent> = 1;

        $r8 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $r9 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode NO_ERROR>;

        $r1 = newarray (byte)[0];

        virtualinvoke $r8.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void goAway(int,io.grpc.okhttp.internal.framed.ErrorCode,byte[])>(0, $r9, $r1);

     label5:
        $r8 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        virtualinvoke $r8.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void close()>();

     label6:
        return;
    }

    static io.grpc.Status toGrpcStatus(io.grpc.okhttp.internal.framed.ErrorCode)
    {
        io.grpc.okhttp.internal.framed.ErrorCode $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        io.grpc.Status $r3;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: io.grpc.okhttp.internal.framed.ErrorCode;

        $r1 = <io.grpc.okhttp.OkHttpClientTransport: java.util.Map ERROR_CODE_TO_STATUS>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (io.grpc.Status) $r2;

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r3 = <io.grpc.Status: io.grpc.Status UNKNOWN>;

        $i0 = $r0.<io.grpc.okhttp.internal.framed.ErrorCode: int httpCode>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown http2 error code: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke $r3.<io.grpc.Status: io.grpc.Status withDescription(java.lang.String)>($r5);

        return $r3;
    }

    void enableKeepAlive(boolean, long, long, boolean)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        boolean $z0, $z1;
        long $l0, $l1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $z0 := @parameter0: boolean;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $z1 := @parameter3: boolean;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean enableKeepAlive> = $z0;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: long keepAliveTimeNanos> = $l0;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: long keepAliveTimeoutNanos> = $l1;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean keepAliveWithoutCalls> = $z1;

        return;
    }

    void finishStream(int, io.grpc.Status, io.grpc.internal.ClientStreamListener$RpcProgress, boolean, io.grpc.okhttp.internal.framed.ErrorCode, io.grpc.Metadata)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.Status $r1;
        io.grpc.internal.ClientStreamListener$RpcProgress $r2;
        boolean $z0;
        java.lang.Object $r3, $r8;
        int $i0;
        io.grpc.okhttp.internal.framed.ErrorCode $r4;
        io.grpc.Metadata $r5;
        java.util.Map $r6;
        java.lang.Integer $r7;
        io.grpc.okhttp.OkHttpClientStream $r9;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r10;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r11;
        java.lang.Throwable $r12;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $i0 := @parameter0: int;

        $r1 := @parameter1: io.grpc.Status;

        $r2 := @parameter2: io.grpc.internal.ClientStreamListener$RpcProgress;

        $z0 := @parameter3: boolean;

        $r4 := @parameter4: io.grpc.okhttp.internal.framed.ErrorCode;

        $r5 := @parameter5: io.grpc.Metadata;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r3;

     label01:
        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

        $r9 = (io.grpc.okhttp.OkHttpClientStream) $r8;

        if $r9 == null goto label07;

        if $r4 == null goto label02;

        $r10 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $r4 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode CANCEL>;

        virtualinvoke $r10.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void rstStream(int,io.grpc.okhttp.internal.framed.ErrorCode)>($i0, $r4);

     label02:
        if $r1 == null goto label06;

        $r11 = virtualinvoke $r9.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        if $r5 == null goto label04;

     label03:
        goto label05;

     label04:
        $r5 = new io.grpc.Metadata;

        specialinvoke $r5.<io.grpc.Metadata: void <init>()>();

        goto label03;

     label05:
        virtualinvoke $r11.<io.grpc.okhttp.OkHttpClientStream$TransportState: void transportReportStatus(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,boolean,io.grpc.Metadata)>($r1, $r2, $z0, $r5);

     label06:
        $z0 = specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean startPendingStreams()>();

        if $z0 != 0 goto label07;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void stopIfNecessary()>();

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void maybeClearInUse(io.grpc.okhttp.OkHttpClientStream)>($r9);

     label07:
        exitmonitor $r3;

        return;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor $r3;

        goto label10;

     label10:
        throw $r12;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public io.grpc.okhttp.OutboundFlowController$StreamState[] getActiveStreams()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Object $r1, $r6;
        int $i0, $i1;
        java.util.Map $r2;
        io.grpc.okhttp.OutboundFlowController$StreamState[] $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        io.grpc.okhttp.OkHttpClientStream $r7;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r8;
        io.grpc.okhttp.OutboundFlowController$StreamState $r9;
        java.lang.Throwable $r10;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r3 = newarray (io.grpc.okhttp.OutboundFlowController$StreamState)[$i0];

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $r4 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

        $i1 = 0;

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (io.grpc.okhttp.OkHttpClientStream) $r6;

        $r8 = virtualinvoke $r7.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        $r9 = virtualinvoke $r8.<io.grpc.okhttp.OkHttpClientStream$TransportState: io.grpc.okhttp.OutboundFlowController$StreamState getOutboundFlowState()>();

        $r3[$i1] = $r9;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        exitmonitor $r1;

        return $r3;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor $r1;

        goto label6;

     label6:
        throw $r10;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public io.grpc.Attributes getAttributes()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.Attributes r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Attributes attributes>;

        return r1;
    }

    public io.grpc.InternalLogId getLogId()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.InternalLogId r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.InternalLogId logId>;

        return r1;
    }

    java.lang.String getOverridenHost()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.String $r1;
        java.net.URI $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.String defaultAuthority>;

        $r2 = staticinvoke <io.grpc.internal.GrpcUtil: java.net.URI authorityToUri(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.net.URI: java.lang.String getHost()>();

        if $r1 == null goto label1;

        $r1 = virtualinvoke $r2.<java.net.URI: java.lang.String getHost()>();

        return $r1;

     label1:
        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.String defaultAuthority>;

        return $r1;
    }

    int getOverridenPort()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.String $r1;
        java.net.URI $r2;
        int $i0;
        java.net.InetSocketAddress $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.String defaultAuthority>;

        $r2 = staticinvoke <io.grpc.internal.GrpcUtil: java.net.URI authorityToUri(java.lang.String)>($r1);

        $i0 = virtualinvoke $r2.<java.net.URI: int getPort()>();

        if $i0 == -1 goto label1;

        $i0 = virtualinvoke $r2.<java.net.URI: int getPort()>();

        return $i0;

     label1:
        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.net.InetSocketAddress address>;

        $i0 = virtualinvoke $r3.<java.net.InetSocketAddress: int getPort()>();

        return $i0;
    }

    io.grpc.okhttp.OkHttpClientStream getStream(int)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Object $r1, $r4;
        java.util.Map $r2;
        int $i0;
        java.lang.Integer $r3;
        io.grpc.okhttp.OkHttpClientStream $r5;
        java.lang.Throwable $r6;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $i0 := @parameter0: int;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (io.grpc.okhttp.OkHttpClientStream) $r4;

     label2:
        exitmonitor $r1;

        return $r5;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor $r1;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    boolean isUsingPlaintext()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        javax.net.ssl.SSLSocketFactory $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean mayHaveCreatedStream(int)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Object $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $i0 := @parameter0: int;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r1;

        $i1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int nextStreamId>;

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        $i0 = $i0 & 1;

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        exitmonitor $r1;

        return $z0;
    }

    public volatile io.grpc.internal.ClientStream newStream(io.grpc.MethodDescriptor, io.grpc.Metadata, io.grpc.CallOptions, io.grpc.ClientStreamTracer[])
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.Metadata $r1;
        io.grpc.CallOptions $r2;
        io.grpc.ClientStreamTracer[] $r3;
        io.grpc.okhttp.OkHttpClientStream $r4;
        io.grpc.MethodDescriptor $r5;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r5 := @parameter0: io.grpc.MethodDescriptor;

        $r1 := @parameter1: io.grpc.Metadata;

        $r2 := @parameter2: io.grpc.CallOptions;

        $r3 := @parameter3: io.grpc.ClientStreamTracer[];

        $r4 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.OkHttpClientStream newStream(io.grpc.MethodDescriptor,io.grpc.Metadata,io.grpc.CallOptions,io.grpc.ClientStreamTracer[])>($r5, $r1, $r2, $r3);

        return $r4;
    }

    public io.grpc.okhttp.OkHttpClientStream newStream(io.grpc.MethodDescriptor, io.grpc.Metadata, io.grpc.CallOptions, io.grpc.ClientStreamTracer[])
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.MethodDescriptor $r1;
        io.grpc.Metadata $r2;
        io.grpc.CallOptions $r3;
        io.grpc.ClientStreamTracer[] $r4;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r5;
        io.grpc.okhttp.OutboundFlowController $r6;
        java.lang.Object $r7, $r14;
        int $i0, $i1;
        java.lang.String $r8, $r9;
        io.grpc.internal.TransportTracer $r10;
        io.grpc.okhttp.OkHttpClientStream $r11;
        io.grpc.Attributes $r12;
        io.grpc.internal.StatsTraceContext $r13;
        boolean $z0;
        java.lang.Throwable $r15;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: io.grpc.MethodDescriptor;

        $r2 := @parameter1: io.grpc.Metadata;

        $r3 := @parameter2: io.grpc.CallOptions;

        $r4 := @parameter3: io.grpc.ClientStreamTracer[];

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "method");

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "headers");

        $r12 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Attributes getAttributes()>();

        $r13 = staticinvoke <io.grpc.internal.StatsTraceContext: io.grpc.internal.StatsTraceContext newClientContext(io.grpc.ClientStreamTracer[],io.grpc.Attributes,io.grpc.Metadata)>($r4, $r12, $r2);

        $r14 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r14;

        $r11 = new io.grpc.okhttp.OkHttpClientStream;

        $r5 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.OutboundFlowController outboundFlow>;

        $r7 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        $i0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int maxMessageSize>;

        $i1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int initialWindowSize>;

        $r8 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.String defaultAuthority>;

        $r9 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.String userAgent>;

        $r10 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.TransportTracer transportTracer>;

        $z0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean useGetForSafeMethods>;

     label1:
        specialinvoke $r11.<io.grpc.okhttp.OkHttpClientStream: void <init>(io.grpc.MethodDescriptor,io.grpc.Metadata,io.grpc.okhttp.ExceptionHandlingFrameWriter,io.grpc.okhttp.OkHttpClientTransport,io.grpc.okhttp.OutboundFlowController,java.lang.Object,int,int,java.lang.String,java.lang.String,io.grpc.internal.StatsTraceContext,io.grpc.internal.TransportTracer,io.grpc.CallOptions,boolean)>($r1, $r2, $r5, $r0, $r6, $r7, $i0, $i1, $r8, $r9, $r13, $r10, $r3, $z0);

     label2:
        exitmonitor $r14;

        return $r11;

     label3:
        exitmonitor $r14;

        throw $r15;

     label4:
        $r15 := @caughtexception;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void onException(java.lang.Throwable)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.Status $r1;
        java.lang.Throwable $r2;
        io.grpc.okhttp.internal.framed.ErrorCode $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r2 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "failureCause");

        $r1 = <io.grpc.Status: io.grpc.Status UNAVAILABLE>;

        $r1 = virtualinvoke $r1.<io.grpc.Status: io.grpc.Status withCause(java.lang.Throwable)>($r2);

        $r3 = <io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode INTERNAL_ERROR>;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void startGoAway(int,io.grpc.okhttp.internal.framed.ErrorCode,io.grpc.Status)>(0, $r3, $r1);

        return;
    }

    public void ping(io.grpc.internal.ClientTransport$PingCallback, java.util.concurrent.Executor)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.util.concurrent.Executor $r1;
        java.lang.Object $r2, $r9;
        int $i0, $i1;
        io.grpc.internal.ClientTransport$PingCallback $r3;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r4;
        boolean $z0, $z1;
        java.lang.Throwable $r5;
        io.grpc.internal.Http2Ping $r6;
        long $l2, $l3;
        java.util.Random $r7;
        com.google.common.base.Supplier $r8;
        com.google.common.base.Stopwatch $r10;
        io.grpc.internal.TransportTracer $r11;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r3 := @parameter0: io.grpc.internal.ClientTransport$PingCallback;

        $r1 := @parameter1: java.util.concurrent.Executor;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r2;

     label1:
        $r4 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $z0 = 1;

        if $r4 == null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z1);

        $z1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean stopped>;

        if $z1 == 0 goto label5;

        $r5 = specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Throwable getPingFailure()>();

        staticinvoke <io.grpc.internal.Http2Ping: void notifyFailed(io.grpc.internal.ClientTransport$PingCallback,java.util.concurrent.Executor,java.lang.Throwable)>($r3, $r1, $r5);

     label4:
        exitmonitor $r2;

        return;

     label5:
        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.Http2Ping ping>;

        if $r6 == null goto label6;

        $l2 = 0L;

        $z0 = 0;

        goto label7;

     label6:
        $r7 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Random random>;

        $l3 = virtualinvoke $r7.<java.util.Random: long nextLong()>();

        $l2 = $l3;

        $r8 = $r0.<io.grpc.okhttp.OkHttpClientTransport: com.google.common.base.Supplier stopwatchFactory>;

        $r9 = interfaceinvoke $r8.<com.google.common.base.Supplier: java.lang.Object get()>();

        $r10 = (com.google.common.base.Stopwatch) $r9;

        virtualinvoke $r10.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch start()>();

        $r6 = new io.grpc.internal.Http2Ping;

        specialinvoke $r6.<io.grpc.internal.Http2Ping: void <init>(long,com.google.common.base.Stopwatch)>($l3, $r10);

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.Http2Ping ping> = $r6;

        $r11 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.TransportTracer transportTracer>;

        virtualinvoke $r11.<io.grpc.internal.TransportTracer: void reportKeepAliveSent()>();

     label7:
        if $z0 == 0 goto label8;

        $r4 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        $l3 = $l2 >>> 32;

        $i1 = (int) $l3;

        $i0 = (int) $l2;

        virtualinvoke $r4.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void ping(boolean,int,int)>(0, $i1, $i0);

     label8:
        exitmonitor $r2;

        virtualinvoke $r6.<io.grpc.internal.Http2Ping: void addCallback(io.grpc.internal.ClientTransport$PingCallback,java.util.concurrent.Executor)>($r3, $r1);

        return;

     label9:
        $r5 := @caughtexception;

        exitmonitor $r2;

        throw $r5;

        catch java.lang.Throwable from label1 to label4 with label9;
        catch java.lang.Throwable from label5 to label8 with label9;
    }

    void removePendingStream(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.okhttp.OkHttpClientStream $r1;
        java.util.Deque $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        interfaceinvoke $r2.<java.util.Deque: boolean remove(java.lang.Object)>($r1);

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void maybeClearInUse(io.grpc.okhttp.OkHttpClientStream)>($r1);

        return;
    }

    public void shutdown(io.grpc.Status)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Object $r1;
        io.grpc.Status $r2, $r3;
        io.grpc.internal.ManagedClientTransport$Listener $r4;
        java.lang.Throwable $r5;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r2 := @parameter0: io.grpc.Status;

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus>;

        if $r3 == null goto label3;

     label2:
        exitmonitor $r1;

        return;

     label3:
        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus> = $r2;

        $r4 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.ManagedClientTransport$Listener listener>;

        interfaceinvoke $r4.<io.grpc.internal.ManagedClientTransport$Listener: void transportShutdown(io.grpc.Status)>($r2);

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void stopIfNecessary()>();

     label4:
        exitmonitor $r1;

        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor $r1;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void shutdownNow(io.grpc.Status)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        java.lang.Object $r1, $r6;
        io.grpc.Status $r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.util.Map$Entry $r7;
        io.grpc.okhttp.OkHttpClientStream $r8;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r9;
        io.grpc.Metadata $r10;
        java.util.Deque $r11;
        io.grpc.internal.ClientStreamListener$RpcProgress $r12;
        java.lang.Throwable $r13;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r2 := @parameter0: io.grpc.Status;

        virtualinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void shutdown(io.grpc.Status)>($r2);

        $r1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r6;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (io.grpc.okhttp.OkHttpClientStream) $r6;

        $r9 = virtualinvoke $r8.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        $r10 = new io.grpc.Metadata;

        specialinvoke $r10.<io.grpc.Metadata: void <init>()>();

        virtualinvoke $r9.<io.grpc.okhttp.OkHttpClientStream$TransportState: void transportReportStatus(io.grpc.Status,boolean,io.grpc.Metadata)>($r2, 0, $r10);

        $r6 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (io.grpc.okhttp.OkHttpClientStream) $r6;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void maybeClearInUse(io.grpc.okhttp.OkHttpClientStream)>($r8);

        goto label2;

     label3:
        $r11 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        $r5 = interfaceinvoke $r11.<java.util.Deque: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (io.grpc.okhttp.OkHttpClientStream) $r6;

        $r9 = virtualinvoke $r8.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        $r12 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress MISCARRIED>;

        $r10 = new io.grpc.Metadata;

        specialinvoke $r10.<io.grpc.Metadata: void <init>()>();

        virtualinvoke $r9.<io.grpc.okhttp.OkHttpClientStream$TransportState: void transportReportStatus(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,boolean,io.grpc.Metadata)>($r2, $r12, 1, $r10);

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void maybeClearInUse(io.grpc.okhttp.OkHttpClientStream)>($r8);

        goto label4;

     label5:
        $r11 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        interfaceinvoke $r11.<java.util.Deque: void clear()>();

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void stopIfNecessary()>();

     label6:
        exitmonitor $r1;

        return;

     label7:
        $r13 := @caughtexception;

     label8:
        exitmonitor $r1;

        goto label9;

     label9:
        throw $r13;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.Runnable start(io.grpc.internal.ManagedClientTransport$Listener)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        long $l0, $l1;
        boolean $z0;
        io.grpc.internal.ManagedClientTransport$Listener $r1;
        java.lang.Object $r2;
        io.grpc.internal.KeepAliveManager $r3;
        io.grpc.internal.KeepAliveManager$ClientKeepAlivePinger $r4;
        java.util.concurrent.ScheduledExecutorService $r5;
        io.grpc.internal.SerializingExecutor $r6;
        io.grpc.okhttp.AsyncSink $r7;
        io.grpc.okhttp.internal.framed.Variant $r8;
        okio.BufferedSink $r9;
        io.grpc.okhttp.internal.framed.FrameWriter $r10;
        io.grpc.okhttp.ExceptionHandlingFrameWriter $r11;
        io.grpc.okhttp.OutboundFlowController $r12;
        java.util.concurrent.CountDownLatch $r13;
        io.grpc.okhttp.OkHttpClientTransport$3 $r14;
        io.grpc.okhttp.OkHttpClientTransport$4 $r15;
        java.lang.Throwable $r16, $r17;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 := @parameter0: io.grpc.internal.ManagedClientTransport$Listener;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "listener");

        $r1 = (io.grpc.internal.ManagedClientTransport$Listener) $r2;

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.ManagedClientTransport$Listener listener> = $r1;

        $z0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean enableKeepAlive>;

        if $z0 == 0 goto label1;

        $r3 = new io.grpc.internal.KeepAliveManager;

        $r4 = new io.grpc.internal.KeepAliveManager$ClientKeepAlivePinger;

        specialinvoke $r4.<io.grpc.internal.KeepAliveManager$ClientKeepAlivePinger: void <init>(io.grpc.internal.ConnectionClientTransport)>($r0);

        $r5 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.concurrent.ScheduledExecutorService scheduler>;

        $l1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: long keepAliveTimeNanos>;

        $l0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: long keepAliveTimeoutNanos>;

        $z0 = $r0.<io.grpc.okhttp.OkHttpClientTransport: boolean keepAliveWithoutCalls>;

        specialinvoke $r3.<io.grpc.internal.KeepAliveManager: void <init>(io.grpc.internal.KeepAliveManager$KeepAlivePinger,java.util.concurrent.ScheduledExecutorService,long,long,boolean)>($r4, $r5, $l1, $l0, $z0);

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.KeepAliveManager keepAliveManager> = $r3;

        virtualinvoke $r3.<io.grpc.internal.KeepAliveManager: void onTransportStarted()>();

     label1:
        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.SerializingExecutor serializingExecutor>;

        $r7 = staticinvoke <io.grpc.okhttp.AsyncSink: io.grpc.okhttp.AsyncSink sink(io.grpc.internal.SerializingExecutor,io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler,int)>($r6, $r0, 10000);

        $r8 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.internal.framed.Variant variant>;

        $r9 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r7);

        $r10 = interfaceinvoke $r8.<io.grpc.okhttp.internal.framed.Variant: io.grpc.okhttp.internal.framed.FrameWriter newWriter(okio.BufferedSink,boolean)>($r9, 1);

        $r10 = virtualinvoke $r7.<io.grpc.okhttp.AsyncSink: io.grpc.okhttp.internal.framed.FrameWriter limitControlFramesWriter(io.grpc.okhttp.internal.framed.FrameWriter)>($r10);

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.lang.Object lock>;

        entermonitor $r2;

     label2:
        $r11 = new io.grpc.okhttp.ExceptionHandlingFrameWriter;

        specialinvoke $r11.<io.grpc.okhttp.ExceptionHandlingFrameWriter: void <init>(io.grpc.okhttp.ExceptionHandlingFrameWriter$TransportExceptionHandler,io.grpc.okhttp.internal.framed.FrameWriter)>($r0, $r10);

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter> = $r11;

        $r12 = new io.grpc.okhttp.OutboundFlowController;

        $r11 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.ExceptionHandlingFrameWriter frameWriter>;

        specialinvoke $r12.<io.grpc.okhttp.OutboundFlowController: void <init>(io.grpc.okhttp.OutboundFlowController$Transport,io.grpc.okhttp.internal.framed.FrameWriter)>($r0, $r11);

        $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.okhttp.OutboundFlowController outboundFlow> = $r12;

     label3:
        exitmonitor $r2;

        $r13 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r13.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.SerializingExecutor serializingExecutor>;

        $r14 = new io.grpc.okhttp.OkHttpClientTransport$3;

        specialinvoke $r14.<io.grpc.okhttp.OkHttpClientTransport$3: void <init>(io.grpc.okhttp.OkHttpClientTransport,java.util.concurrent.CountDownLatch,io.grpc.okhttp.AsyncSink)>($r0, $r13, $r7);

        virtualinvoke $r6.<io.grpc.internal.SerializingExecutor: void execute(java.lang.Runnable)>($r14);

     label4:
        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void sendConnectionPrefaceAndSettings()>();

     label5:
        virtualinvoke $r13.<java.util.concurrent.CountDownLatch: void countDown()>();

        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.internal.SerializingExecutor serializingExecutor>;

        $r15 = new io.grpc.okhttp.OkHttpClientTransport$4;

        specialinvoke $r15.<io.grpc.okhttp.OkHttpClientTransport$4: void <init>(io.grpc.okhttp.OkHttpClientTransport)>($r0);

        virtualinvoke $r6.<io.grpc.internal.SerializingExecutor: void execute(java.lang.Runnable)>($r15);

        return null;

     label6:
        $r16 := @caughtexception;

        virtualinvoke $r13.<java.util.concurrent.CountDownLatch: void countDown()>();

        throw $r16;

     label7:
        $r17 := @caughtexception;

        exitmonitor $r2;

        throw $r17;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    void streamReadyToStart(io.grpc.okhttp.OkHttpClientStream)
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        io.grpc.Metadata $r1;
        io.grpc.okhttp.OkHttpClientStream $r2;
        io.grpc.Status $r3;
        io.grpc.okhttp.OkHttpClientStream$TransportState $r4;
        io.grpc.internal.ClientStreamListener$RpcProgress $r5;
        java.util.Map $r6;
        int $i0, $i1;
        java.util.Deque $r7;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r2 := @parameter0: io.grpc.okhttp.OkHttpClientStream;

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus>;

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r2.<io.grpc.okhttp.OkHttpClientStream: io.grpc.okhttp.OkHttpClientStream$TransportState transportState()>();

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.Status goAwayStatus>;

        $r5 = <io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress MISCARRIED>;

        $r1 = new io.grpc.Metadata;

        specialinvoke $r1.<io.grpc.Metadata: void <init>()>();

        virtualinvoke $r4.<io.grpc.okhttp.OkHttpClientStream$TransportState: void transportReportStatus(io.grpc.Status,io.grpc.internal.ClientStreamListener$RpcProgress,boolean,io.grpc.Metadata)>($r3, $r5, 1, $r1);

        return;

     label1:
        $r6 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Map streams>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $i1 = $r0.<io.grpc.okhttp.OkHttpClientTransport: int maxConcurrentStreams>;

        if $i0 < $i1 goto label2;

        $r7 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.util.Deque pendingStreams>;

        interfaceinvoke $r7.<java.util.Deque: boolean add(java.lang.Object)>($r2);

        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void setInUse(io.grpc.okhttp.OkHttpClientStream)>($r2);

        return;

     label2:
        specialinvoke $r0.<io.grpc.okhttp.OkHttpClientTransport: void startStream(io.grpc.okhttp.OkHttpClientStream)>($r2);

        return;
    }

    public java.lang.String toString()
    {
        io.grpc.okhttp.OkHttpClientTransport $r0;
        com.google.common.base.MoreObjects$ToStringHelper $r1;
        io.grpc.InternalLogId $r2;
        long $l0;
        java.net.InetSocketAddress $r3;
        java.lang.String $r4;

        $r0 := @this: io.grpc.okhttp.OkHttpClientTransport;

        $r1 = staticinvoke <com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object)>($r0);

        $r2 = $r0.<io.grpc.okhttp.OkHttpClientTransport: io.grpc.InternalLogId logId>;

        $l0 = virtualinvoke $r2.<io.grpc.InternalLogId: long getId()>();

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,long)>("logId", $l0);

        $r3 = $r0.<io.grpc.okhttp.OkHttpClientTransport: java.net.InetSocketAddress address>;

        $r1 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)>("address", $r3);

        $r4 = virtualinvoke $r1.<com.google.common.base.MoreObjects$ToStringHelper: java.lang.String toString()>();

        return $r4;
    }

