androidx.lifecycle.LifecycleRegistry
<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion>
<androidx.lifecycle.LifecycleRegistry: boolean enforceMainThread>
<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>
<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>
<androidx.lifecycle.LifecycleRegistry: java.lang.ref.WeakReference lifecycleOwner>
<androidx.lifecycle.LifecycleRegistry: int addingObserverCounter>
<androidx.lifecycle.LifecycleRegistry: boolean handlingEvent>
<androidx.lifecycle.LifecycleRegistry: boolean newEventOccurred>
<androidx.lifecycle.LifecycleRegistry: java.util.ArrayList parentStates>
    private void <init>(androidx.lifecycle.LifecycleOwner, boolean)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.LifecycleOwner r1;
        boolean z0;
        androidx.arch.core.internal.FastSafeIterableMap $r2;
        androidx.lifecycle.Lifecycle$State $r3;
        java.util.ArrayList $r4;
        java.lang.ref.WeakReference $r5;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        z0 := @parameter1: boolean;

        specialinvoke r0.<androidx.lifecycle.Lifecycle: void <init>()>();

        r0.<androidx.lifecycle.LifecycleRegistry: boolean enforceMainThread> = z0;

        $r2 = new androidx.arch.core.internal.FastSafeIterableMap;

        specialinvoke $r2.<androidx.arch.core.internal.FastSafeIterableMap: void <init>()>();

        r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap> = $r2;

        $r3 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED>;

        r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.lifecycle.LifecycleRegistry: java.util.ArrayList parentStates> = $r4;

        $r5 = new java.lang.ref.WeakReference;

        specialinvoke $r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        r0.<androidx.lifecycle.LifecycleRegistry: java.lang.ref.WeakReference lifecycleOwner> = $r5;

        return;
    }

    public void <init>(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.LifecycleOwner r1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "provider");

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner,boolean)>(r1, 1);

        return;
    }

    public void markState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$State r1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("markState");

        virtualinvoke r0.<androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)>(r1);

        return;
    }

    public androidx.lifecycle.Lifecycle$State getCurrentState()
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$State $r1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        $r1 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        return $r1;
    }

    public void setCurrentState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$State r1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("setCurrentState");

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)>(r1);

        return;
    }

    public void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$Event r1;
        androidx.lifecycle.Lifecycle$State $r2;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$Event;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "event");

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("handleLifecycleEvent");

        $r2 = virtualinvoke r1.<androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()>();

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)>($r2);

        return;
    }

    private final void moveToState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$State r1, $r2, $r3, $r4, $r5, $r6, $r10, $r18;
        boolean $z0, $z1;
        int $i0;
        androidx.arch.core.internal.FastSafeIterableMap $r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r15;
        java.lang.ref.WeakReference $r13;
        java.lang.Object $r14;
        java.lang.IllegalStateException $r16;
        java.lang.String $r17, $r19;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        $r2 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        if $r2 != r1 goto label1;

        return;

     label1:
        $r4 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        $r3 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED>;

        if $r4 != $r3 goto label2;

        $r18 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if r1 == $r18 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z1 != 0 goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no event down from ");

        $r10 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in component ");

        $r13 = r0.<androidx.lifecycle.LifecycleRegistry: java.lang.ref.WeakReference lifecycleOwner>;

        $r14 = virtualinvoke $r13.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label5:
        r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state> = r1;

        $z0 = r0.<androidx.lifecycle.LifecycleRegistry: boolean handlingEvent>;

        if $z0 != 0 goto label6;

        $i0 = r0.<androidx.lifecycle.LifecycleRegistry: int addingObserverCounter>;

        if $i0 == 0 goto label7;

     label6:
        r0.<androidx.lifecycle.LifecycleRegistry: boolean newEventOccurred> = 1;

        return;

     label7:
        r0.<androidx.lifecycle.LifecycleRegistry: boolean handlingEvent> = 1;

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void sync()>();

        r0.<androidx.lifecycle.LifecycleRegistry: boolean handlingEvent> = 0;

        $r6 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        $r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if $r6 != $r5 goto label8;

        $r7 = new androidx.arch.core.internal.FastSafeIterableMap;

        specialinvoke $r7.<androidx.arch.core.internal.FastSafeIterableMap: void <init>()>();

        r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap> = $r7;

     label8:
        return;
    }

    private final boolean isSynced()
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$State r1, r2, $r12;
        androidx.arch.core.internal.FastSafeIterableMap $r3, $r4, $r8;
        int $i0;
        java.util.Map$Entry $r5, $r9;
        java.lang.Object $r6, $r10;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState $r7, $r11;
        boolean $z0;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        $r3 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $i0 = virtualinvoke $r3.<androidx.arch.core.internal.FastSafeIterableMap: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r4 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $r5 = virtualinvoke $r4.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry eldest()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r6;

        r1 = virtualinvoke $r7.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r8 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $r9 = virtualinvoke $r8.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry newest()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r9);

        $r10 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r10;

        r2 = virtualinvoke $r11.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        if r1 != r2 goto label2;

        $r12 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        if $r12 != r2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private final androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.LifecycleObserver r1;
        java.util.Map$Entry r2;
        androidx.lifecycle.Lifecycle$State r3, r4, $r6, $r9, $r10, $r16, $r19;
        androidx.arch.core.internal.FastSafeIterableMap $r5;
        androidx.lifecycle.LifecycleRegistry$Companion $r7, $r8;
        java.util.ArrayList $r11, $r12, $r17;
        int $i0, $i1;
        java.lang.Object $r13, $r14;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState $r15;
        java.util.Collection $r18;
        boolean $z0, $z1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.LifecycleObserver;

        $r5 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        r2 = virtualinvoke $r5.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry ceil(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $r14 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r14;

        if $r15 == null goto label1;

        $r16 = virtualinvoke $r15.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        goto label2;

     label1:
        $r16 = null;

     label2:
        r3 = $r16;

        $r17 = r0.<androidx.lifecycle.LifecycleRegistry: java.util.ArrayList parentStates>;

        $r18 = (java.util.Collection) $r17;

        $z0 = interfaceinvoke $r18.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        if $z1 == 0 goto label5;

        $r12 = r0.<androidx.lifecycle.LifecycleRegistry: java.util.ArrayList parentStates>;

        $r11 = r0.<androidx.lifecycle.LifecycleRegistry: java.util.ArrayList parentStates>;

        $i0 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r19 = (androidx.lifecycle.Lifecycle$State) $r13;

        goto label6;

     label5:
        $r19 = null;

     label6:
        r4 = $r19;

        $r8 = <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion>;

        $r7 = <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion>;

        $r6 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        $r9 = virtualinvoke $r7.<androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)>($r6, r3);

        $r10 = virtualinvoke $r8.<androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)>($r9, r4);

        return $r10;
    }

    public void addObserver(androidx.lifecycle.LifecycleObserver)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.LifecycleObserver r1;
        androidx.lifecycle.Lifecycle$State r2, $r6, $r7, $r15, $r17, $r22, $r25, r26, $r27;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r3, r4, $r8;
        androidx.lifecycle.LifecycleOwner r5, $r13;
        boolean z0, $z1, $z2, $z3;
        androidx.arch.core.internal.FastSafeIterableMap $r9, $r14;
        java.lang.Object $r10, $r12;
        java.lang.ref.WeakReference $r11;
        int $i0, $i1, $i2, i3, $i4, i5;
        androidx.lifecycle.Lifecycle$Event$Companion $r16;
        androidx.lifecycle.Lifecycle$Event $r18, r29;
        java.lang.IllegalStateException $r19;
        java.lang.StringBuilder $r20, $r21, $r23;
        java.lang.String $r24;
        java.lang.Enum $r28;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.LifecycleObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "observer");

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("addObserver");

        $r7 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        $r6 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if $r7 != $r6 goto label01;

        $r25 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        goto label02;

     label01:
        $r25 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED>;

     label02:
        r2 = $r25;

        $r8 = new androidx.lifecycle.LifecycleRegistry$ObserverWithState;

        specialinvoke $r8.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: void <init>(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State)>(r1, r2);

        r3 = $r8;

        $r9 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $r10 = virtualinvoke $r9.<androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r3);

        r4 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r10;

        if r4 == null goto label03;

        return;

     label03:
        $r11 = r0.<androidx.lifecycle.LifecycleRegistry: java.lang.ref.WeakReference lifecycleOwner>;

        $r12 = virtualinvoke $r11.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r13 = (androidx.lifecycle.LifecycleOwner) $r12;

        if $r13 != null goto label04;

        return;

     label04:
        r5 = $r13;

        $i0 = r0.<androidx.lifecycle.LifecycleRegistry: int addingObserverCounter>;

        if $i0 != 0 goto label05;

        $z2 = r0.<androidx.lifecycle.LifecycleRegistry: boolean handlingEvent>;

        if $z2 == 0 goto label06;

     label05:
        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        z0 = $z3;

        r26 = specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)>(r1);

        i3 = r0.<androidx.lifecycle.LifecycleRegistry: int addingObserverCounter>;

        $i1 = i3 + 1;

        r0.<androidx.lifecycle.LifecycleRegistry: int addingObserverCounter> = $i1;

     label08:
        $r27 = virtualinvoke r3.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r28 = (java.lang.Enum) r26;

        $i4 = virtualinvoke $r27.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r28);

        if $i4 >= 0 goto label10;

        $r14 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $z1 = virtualinvoke $r14.<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label10;

        $r15 = virtualinvoke r3.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>($r15);

        $r16 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion>;

        $r17 = virtualinvoke r3.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r18 = virtualinvoke $r16.<androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)>($r17);

        if $r18 != null goto label09;

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no event up from ");

        $r22 = virtualinvoke r3.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label09:
        r29 = $r18;

        virtualinvoke r3.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>(r5, r29);

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void popParentState()>();

        r26 = specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)>(r1);

        goto label08;

     label10:
        if z0 != 0 goto label11;

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void sync()>();

     label11:
        i5 = r0.<androidx.lifecycle.LifecycleRegistry: int addingObserverCounter>;

        $i2 = i5 + -1;

        r0.<androidx.lifecycle.LifecycleRegistry: int addingObserverCounter> = $i2;

        return;
    }

    private final void popParentState()
    {
        androidx.lifecycle.LifecycleRegistry r0;
        java.util.ArrayList $r1, $r2;
        int $i0, $i1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        $r2 = r0.<androidx.lifecycle.LifecycleRegistry: java.util.ArrayList parentStates>;

        $r1 = r0.<androidx.lifecycle.LifecycleRegistry: java.util.ArrayList parentStates>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        return;
    }

    private final void pushParentState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.Lifecycle$State r1;
        java.util.ArrayList $r2;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        $r2 = r0.<androidx.lifecycle.LifecycleRegistry: java.util.ArrayList parentStates>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeObserver(androidx.lifecycle.LifecycleObserver)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.LifecycleObserver r1;
        androidx.arch.core.internal.FastSafeIterableMap $r2;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.LifecycleObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "observer");

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("removeObserver");

        $r2 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        virtualinvoke $r2.<androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public int getObserverCount()
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.arch.core.internal.FastSafeIterableMap $r1;
        int $i0;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("getObserverCount");

        $r1 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $i0 = virtualinvoke $r1.<androidx.arch.core.internal.FastSafeIterableMap: int size()>();

        return $i0;
    }

    private final void forwardPass(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.LifecycleOwner r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        androidx.lifecycle.LifecycleObserver r4;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r5;
        androidx.lifecycle.Lifecycle$Event r6, $r19;
        androidx.arch.core.internal.FastSafeIterableMap $r7, $r15;
        androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r9, $r10, $r11;
        androidx.lifecycle.Lifecycle$State $r12, $r13, $r16, $r18, $r23;
        java.lang.Enum $r14;
        int $i0;
        androidx.lifecycle.Lifecycle$Event$Companion $r17;
        java.lang.IllegalStateException $r20;
        java.lang.StringBuilder $r21, $r22, $r24;
        java.lang.String $r25;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r7 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $r8 = virtualinvoke $r7.<androidx.arch.core.internal.FastSafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "observerMap.iteratorWithAdditions()");

        r2 = (java.util.Iterator) $r8;

     label1:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $z0 = r0.<androidx.lifecycle.LifecycleRegistry: boolean newEventOccurred>;

        if $z0 != 0 goto label4;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = (androidx.lifecycle.LifecycleObserver) $r10;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r11;

     label2:
        $r12 = virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r13 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        $r14 = (java.lang.Enum) $r13;

        $i0 = virtualinvoke $r12.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r14);

        if $i0 >= 0 goto label1;

        $z1 = r0.<androidx.lifecycle.LifecycleRegistry: boolean newEventOccurred>;

        if $z1 != 0 goto label1;

        $r15 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $z2 = virtualinvoke $r15.<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>(r4);

        if $z2 == 0 goto label1;

        $r16 = virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>($r16);

        $r17 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion>;

        $r18 = virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r19 = virtualinvoke $r17.<androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)>($r18);

        if $r19 != null goto label3;

        $r20 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no event up from ");

        $r23 = virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label3:
        r6 = $r19;

        virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>(r1, r6);

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void popParentState()>();

        goto label2;

     label4:
        return;
    }

    private final void backwardPass(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.LifecycleOwner r1;
        java.util.Iterator r2, $r8;
        java.util.Map$Entry r3;
        androidx.lifecycle.LifecycleObserver r4;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r5;
        androidx.lifecycle.Lifecycle$Event r6, $r18;
        androidx.arch.core.internal.FastSafeIterableMap $r7, $r15;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r9, $r10, $r11;
        androidx.lifecycle.Lifecycle$State $r12, $r13, $r17, $r19, $r23;
        java.lang.Enum $r14;
        int $i0;
        androidx.lifecycle.Lifecycle$Event$Companion $r16;
        java.lang.IllegalStateException $r20;
        java.lang.StringBuilder $r21, $r22, $r24;
        java.lang.String $r25;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r7 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $r8 = virtualinvoke $r7.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Iterator descendingIterator()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "observerMap.descendingIterator()");

        r2 = $r8;

     label1:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $z0 = r0.<androidx.lifecycle.LifecycleRegistry: boolean newEventOccurred>;

        if $z0 != 0 goto label4;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "next()");

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = (androidx.lifecycle.LifecycleObserver) $r10;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r11;

     label2:
        $r12 = virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r13 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        $r14 = (java.lang.Enum) $r13;

        $i0 = virtualinvoke $r12.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r14);

        if $i0 <= 0 goto label1;

        $z1 = r0.<androidx.lifecycle.LifecycleRegistry: boolean newEventOccurred>;

        if $z1 != 0 goto label1;

        $r15 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $z2 = virtualinvoke $r15.<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>(r4);

        if $z2 == 0 goto label1;

        $r16 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion>;

        $r17 = virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r18 = virtualinvoke $r16.<androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event downFrom(androidx.lifecycle.Lifecycle$State)>($r17);

        if $r18 != null goto label3;

        $r20 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no event down from ");

        $r23 = virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label3:
        r6 = $r18;

        $r19 = virtualinvoke r6.<androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()>();

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>($r19);

        virtualinvoke r5.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>(r1, r6);

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void popParentState()>();

        goto label2;

     label4:
        return;
    }

    private final void sync()
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.LifecycleOwner r1, $r5;
        java.util.Map$Entry r2, $r8;
        java.lang.ref.WeakReference $r3;
        java.lang.Object $r4, $r9, $r15;
        androidx.arch.core.internal.FastSafeIterableMap $r6, $r13;
        androidx.lifecycle.Lifecycle$State $r7, $r11, $r14, $r17;
        androidx.lifecycle.LifecycleRegistry$ObserverWithState $r10, $r16;
        java.lang.Enum $r12, $r18;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r19;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        $r3 = r0.<androidx.lifecycle.LifecycleRegistry: java.lang.ref.WeakReference lifecycleOwner>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r5 = (androidx.lifecycle.LifecycleOwner) $r4;

        if $r5 != null goto label1;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("LifecycleOwner of this LifecycleRegistry is already garbage collected. It is too late to change lifecycle state.");

        throw $r19;

     label1:
        r1 = $r5;

     label2:
        $z1 = specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: boolean isSynced()>();

        if $z1 != 0 goto label4;

        r0.<androidx.lifecycle.LifecycleRegistry: boolean newEventOccurred> = 0;

        $r7 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        $r6 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        $r8 = virtualinvoke $r6.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry eldest()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r8);

        $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r9;

        $r11 = virtualinvoke $r10.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r12 = (java.lang.Enum) $r11;

        $i0 = virtualinvoke $r7.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r12);

        if $i0 >= 0 goto label3;

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)>(r1);

     label3:
        $r13 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap observerMap>;

        r2 = virtualinvoke $r13.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry newest()>();

        $z0 = r0.<androidx.lifecycle.LifecycleRegistry: boolean newEventOccurred>;

        if $z0 != 0 goto label2;

        if r2 == null goto label2;

        $r14 = r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State state>;

        $r15 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) $r15;

        $r17 = virtualinvoke $r16.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>();

        $r18 = (java.lang.Enum) $r17;

        $i1 = virtualinvoke $r14.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r18);

        if $i1 <= 0 goto label2;

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)>(r1);

        goto label2;

     label4:
        r0.<androidx.lifecycle.LifecycleRegistry: boolean newEventOccurred> = 0;

        return;
    }

    private final void enforceMainThreadIfNeeded(java.lang.String)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        java.lang.String r1, $r8, $r9;
        boolean $z0, $z1;
        androidx.arch.core.executor.ArchTaskExecutor $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<androidx.lifecycle.LifecycleRegistry: boolean enforceMainThread>;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $z1 = virtualinvoke $r2.<androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()>();

        if $z1 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be called on the main thread");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        return;
    }

    public static final androidx.lifecycle.LifecycleRegistry createUnsafe(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LifecycleOwner r0;
        androidx.lifecycle.LifecycleRegistry$Companion $r1;
        androidx.lifecycle.LifecycleRegistry $r2;

        r0 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r1 = <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.LifecycleRegistry createUnsafe(androidx.lifecycle.LifecycleOwner)>(r0);

        return $r2;
    }

    public static final androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State, androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.Lifecycle$State r0, r1, $r3;
        androidx.lifecycle.LifecycleRegistry$Companion $r2;

        r0 := @parameter0: androidx.lifecycle.Lifecycle$State;

        r1 := @parameter1: androidx.lifecycle.Lifecycle$State;

        $r2 = <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)>(r0, r1);

        return $r3;
    }

    public void <init>(androidx.lifecycle.LifecycleOwner, boolean, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.lifecycle.LifecycleRegistry r0;
        androidx.lifecycle.LifecycleOwner r1;
        boolean z0;
        kotlin.jvm.internal.DefaultConstructorMarker $r2;

        r0 := @this: androidx.lifecycle.LifecycleRegistry;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        z0 := @parameter1: boolean;

        $r2 := @parameter2: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner,boolean)>(r1, z0);

        return;
    }

    static void <clinit>()
    {
        androidx.lifecycle.LifecycleRegistry$Companion $r0;

        $r0 = new androidx.lifecycle.LifecycleRegistry$Companion;

        specialinvoke $r0.<androidx.lifecycle.LifecycleRegistry$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion> = $r0;

        return;
    }

androidx.lifecycle.LifecycleRegistry$Companion
    private void <init>()
    {
        androidx.lifecycle.LifecycleRegistry$Companion r0;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.lifecycle.LifecycleRegistry createUnsafe(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LifecycleRegistry$Companion r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.lifecycle.LifecycleRegistry $r2;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$Companion;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "owner");

        $r2 = new androidx.lifecycle.LifecycleRegistry;

        specialinvoke $r2.<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner,boolean,kotlin.jvm.internal.DefaultConstructorMarker)>(r1, 0, null);

        return $r2;
    }

    public final androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State, androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.LifecycleRegistry$Companion r0;
        androidx.lifecycle.Lifecycle$State r1, r2, $r4;
        java.lang.Enum $r3;
        int $i0;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$Companion;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        r2 := @parameter1: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state1");

        if r2 == null goto label1;

        $r3 = (java.lang.Enum) r1;

        $i0 = virtualinvoke r2.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r3);

        if $i0 >= 0 goto label1;

        $r4 = r2;

        goto label2;

     label1:
        $r4 = r1;

     label2:
        return $r4;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.lifecycle.LifecycleRegistry$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.lifecycle.LifecycleRegistry$Companion: void <init>()>();

        return;
    }

androidx.lifecycle.LifecycleRegistry$ObserverWithState
<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State state>
<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.LifecycleEventObserver lifecycleObserver>
    public void <init>(androidx.lifecycle.LifecycleObserver, androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r0;
        androidx.lifecycle.LifecycleObserver r1;
        androidx.lifecycle.Lifecycle$State r2;
        androidx.lifecycle.LifecycleEventObserver $r3;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$ObserverWithState;

        r1 := @parameter0: androidx.lifecycle.LifecycleObserver;

        r2 := @parameter1: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "initialState");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r1);

        $r3 = staticinvoke <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)>(r1);

        r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.LifecycleEventObserver lifecycleObserver> = $r3;

        r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State state> = r2;

        return;
    }

    public final androidx.lifecycle.Lifecycle$State getState()
    {
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r0;
        androidx.lifecycle.Lifecycle$State $r1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$ObserverWithState;

        $r1 = r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State state>;

        return $r1;
    }

    public final void setState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r0;
        androidx.lifecycle.Lifecycle$State r1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$ObserverWithState;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State state> = r1;

        return;
    }

    public final androidx.lifecycle.LifecycleEventObserver getLifecycleObserver()
    {
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r0;
        androidx.lifecycle.LifecycleEventObserver $r1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$ObserverWithState;

        $r1 = r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.LifecycleEventObserver lifecycleObserver>;

        return $r1;
    }

    public final void setLifecycleObserver(androidx.lifecycle.LifecycleEventObserver)
    {
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r0;
        androidx.lifecycle.LifecycleEventObserver r1;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$ObserverWithState;

        r1 := @parameter0: androidx.lifecycle.LifecycleEventObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.LifecycleEventObserver lifecycleObserver> = r1;

        return;
    }

    public final void dispatchEvent(androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Lifecycle$Event)
    {
        androidx.lifecycle.LifecycleRegistry$ObserverWithState r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.lifecycle.Lifecycle$Event r2;
        androidx.lifecycle.Lifecycle$State r3, $r4, $r6;
        androidx.lifecycle.LifecycleRegistry$Companion $r5;
        androidx.lifecycle.LifecycleEventObserver $r7;

        r0 := @this: androidx.lifecycle.LifecycleRegistry$ObserverWithState;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        r2 := @parameter1: androidx.lifecycle.Lifecycle$Event;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "event");

        r3 = virtualinvoke r2.<androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()>();

        $r5 = <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion>;

        $r4 = r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State state>;

        $r6 = virtualinvoke $r5.<androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)>($r4, r3);

        r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State state> = $r6;

        $r7 = r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.LifecycleEventObserver lifecycleObserver>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r1);

        interfaceinvoke $r7.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>(r1, r2);

        r0.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State state> = r3;

        return;
    }

