androidx.compose.FrameManager
<androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>
<androidx.compose.FrameManager: boolean started>
<androidx.compose.FrameManager: boolean commitPending>
<androidx.compose.FrameManager: boolean reclaimPending>
<androidx.compose.FrameManager: boolean composing>
<androidx.compose.FrameManager: androidx.compose.ObserverMap invalidations>
<androidx.compose.FrameManager: kotlin.jvm.functions.Function0 removeCommitObserver>
<androidx.compose.FrameManager: androidx.compose.ObserverMap immediateMap>
<androidx.compose.FrameManager: androidx.compose.ObserverMap deferredMap>
<androidx.compose.FrameManager: java.lang.Object lock>
<androidx.compose.FrameManager: kotlinx.coroutines.CoroutineScope scheduleScope>
<androidx.compose.FrameManager: kotlin.jvm.functions.Function1 readObserver>
<androidx.compose.FrameManager: kotlin.jvm.functions.Function2 writeObserver>
<androidx.compose.FrameManager: kotlin.jvm.functions.Function2 commitObserver>
<androidx.compose.FrameManager: kotlin.jvm.functions.Function0 reclaimInvalid>
<androidx.compose.FrameManager: java.util.List scheduledCallbacks>
<androidx.compose.FrameManager: kotlinx.coroutines.Job callbackRunner>
    private void <init>()
    {
        androidx.compose.FrameManager r0;

        r0 := @this: androidx.compose.FrameManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean getComposing$compose_runtime_release()
    {
        androidx.compose.FrameManager r0;
        boolean $z0;

        r0 := @this: androidx.compose.FrameManager;

        $z0 = <androidx.compose.FrameManager: boolean composing>;

        return $z0;
    }

    public final void setComposing$compose_runtime_release(boolean)
    {
        androidx.compose.FrameManager r0;
        boolean z0;

        r0 := @this: androidx.compose.FrameManager;

        z0 := @parameter0: boolean;

        <androidx.compose.FrameManager: boolean composing> = z0;

        return;
    }

    public final void ensureStarted()
    {
        androidx.compose.FrameManager r0;
        boolean $z0;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.jvm.functions.Function0 $r2;

        r0 := @this: androidx.compose.FrameManager;

        $z0 = <androidx.compose.FrameManager: boolean started>;

        if $z0 != 0 goto label1;

        <androidx.compose.FrameManager: boolean started> = 1;

        $r1 = <androidx.compose.FrameManager: kotlin.jvm.functions.Function2 commitObserver>;

        $r2 = staticinvoke <androidx.compose.frames.FramesKt: kotlin.jvm.functions.Function0 registerCommitObserver(kotlin.jvm.functions.Function2)>($r1);

        <androidx.compose.FrameManager: kotlin.jvm.functions.Function0 removeCommitObserver> = $r2;

        specialinvoke r0.<androidx.compose.FrameManager: void open()>();

     label1:
        return;
    }

    public final void close$compose_runtime_release()
    {
        androidx.compose.FrameManager r0;
        kotlin.Unit r1;
        androidx.compose.ObserverMap $r2, $r4;
        boolean $z0, z2, z3, z6, z7;
        java.lang.Throwable $r5, r7;
        java.lang.Object r6;
        kotlin.jvm.functions.Function0 r8;

        r0 := @this: androidx.compose.FrameManager;

        r6 = <androidx.compose.FrameManager: java.lang.Object lock>;

        z2 = 0;

        z3 = 0;

        entermonitor r6;

     label1:
        $r2 = <androidx.compose.FrameManager: androidx.compose.ObserverMap invalidations>;

        virtualinvoke $r2.<androidx.compose.ObserverMap: void clear()>();

        r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r6;

        goto label5;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

     label4:
        exitmonitor r6;

        throw r7;

     label5:
        $z0 = staticinvoke <androidx.compose.frames.FramesKt: boolean getInFrame()>();

        if $z0 == 0 goto label6;

        staticinvoke <androidx.compose.frames.FramesKt: void commit()>();

     label6:
        r8 = <androidx.compose.FrameManager: kotlin.jvm.functions.Function0 removeCommitObserver>;

        if r8 != null goto label7;

        goto label8;

     label7:
        z6 = 0;

        z7 = 0;

        interfaceinvoke r8.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label8:
        <androidx.compose.FrameManager: boolean started> = 0;

        $r4 = new androidx.compose.ObserverMap;

        specialinvoke $r4.<androidx.compose.ObserverMap: void <init>()>();

        <androidx.compose.FrameManager: androidx.compose.ObserverMap invalidations> = $r4;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final java.lang.Object composing$compose_runtime_release(kotlin.jvm.functions.Function0)
    {
        androidx.compose.FrameManager r0;
        kotlin.jvm.functions.Function0 r1;
        boolean z1;
        java.lang.Throwable $r2, r4;
        java.lang.Object r3;

        r0 := @this: androidx.compose.FrameManager;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        z1 = virtualinvoke r0.<androidx.compose.FrameManager: boolean getComposing$compose_runtime_release()>();

        virtualinvoke r0.<androidx.compose.FrameManager: void setComposing$compose_runtime_release(boolean)>(1);

     label1:
        r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r0.<androidx.compose.FrameManager: void setComposing$compose_runtime_release(boolean)>(z1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        return r3;

     label3:
        $r2 := @caughtexception;

        r4 = $r2;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        virtualinvoke r0.<androidx.compose.FrameManager: void setComposing$compose_runtime_release(boolean)>(z1);

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final java.lang.Object isolated(kotlin.jvm.functions.Function0)
    {
        androidx.compose.FrameManager r0;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Throwable $r2, r4;
        java.lang.Object r3;

        r0 := @this: androidx.compose.FrameManager;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        virtualinvoke r0.<androidx.compose.FrameManager: void ensureStarted()>();

     label1:
        r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        virtualinvoke r0.<androidx.compose.FrameManager: void close$compose_runtime_release()>();

        return r3;

     label3:
        $r2 := @caughtexception;

        r4 = $r2;

     label4:
        virtualinvoke r0.<androidx.compose.FrameManager: void close$compose_runtime_release()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final java.lang.Object unframed(kotlin.jvm.functions.Function0)
    {
        androidx.compose.FrameManager r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.frames.Frame r2;
        boolean z0, $z1, $z2;
        java.lang.Object $r3, r8, r10;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5, r9;
        java.lang.Throwable $r6, $r7, r11;

        r0 := @this: androidx.compose.FrameManager;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $z1 = staticinvoke <androidx.compose.frames.FramesKt: boolean getInFrame()>();

        if $z1 == 0 goto label6;

        r2 = staticinvoke <androidx.compose.frames.FramesKt: androidx.compose.frames.Frame suspend()>();

     label1:
        r8 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $z2 = staticinvoke <androidx.compose.frames.FramesKt: boolean getInFrame()>();

        if $z2 == 0 goto label2;

        r9 = "An unframed block left a frame uncommitted or aborted";

        z0 = 0;

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke r9.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        $r6 = (java.lang.Throwable) $r4;

        throw $r6;

     label2:
        r10 = r8;

     label3:
        staticinvoke <androidx.compose.frames.FramesKt: void restore(androidx.compose.frames.Frame)>(r2);

        return r10;

     label4:
        $r7 := @caughtexception;

        r11 = $r7;

     label5:
        staticinvoke <androidx.compose.frames.FramesKt: void restore(androidx.compose.frames.Frame)>(r2);

        throw r11;

     label6:
        $r3 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final java.lang.Object framed(kotlin.jvm.functions.Function0)
    {
        androidx.compose.FrameManager r0;
        kotlin.jvm.functions.Function0 r1;
        java.lang.Object r2, $r8;
        boolean $z0;
        java.lang.Throwable $r5, $r6, r9, r10;

        r0 := @this: androidx.compose.FrameManager;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        $z0 = staticinvoke <androidx.compose.frames.FramesKt: boolean getInFrame()>();

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label8;

     label1:
        staticinvoke <androidx.compose.frames.FramesKt: androidx.compose.frames.Frame open(boolean)>(0);

     label2:
        r2 = interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label3:
        staticinvoke <androidx.compose.frames.FramesKt: kotlin.Unit commitHandler()>();

        goto label7;

     label4:
        $r5 := @caughtexception;

        r9 = $r5;

        staticinvoke <androidx.compose.frames.FramesKt: void abortHandler()>();

        throw r9;

     label5:
        $r6 := @caughtexception;

        r10 = $r6;

     label6:
        staticinvoke <androidx.compose.frames.FramesKt: kotlin.Unit commitHandler()>();

        throw r10;

     label7:
        $r8 = r2;

     label8:
        return $r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final void nextFrame()
    {
        androidx.compose.FrameManager r0;
        boolean $z0;

        r0 := @this: androidx.compose.FrameManager;

        $z0 = staticinvoke <androidx.compose.frames.FramesKt: boolean getInFrame()>();

        if $z0 == 0 goto label1;

        staticinvoke <androidx.compose.frames.FramesKt: void commit()>();

        specialinvoke r0.<androidx.compose.FrameManager: void open()>();

     label1:
        return;
    }

    public final void scheduleCleanup$compose_runtime_release()
    {
        androidx.compose.FrameManager r0;
        java.lang.Object r1;
        boolean z1, z2, z5, $z6, $z7, $z8, $z9;
        kotlin.jvm.functions.Function0 $r2;

        r0 := @this: androidx.compose.FrameManager;

        $z6 = <androidx.compose.FrameManager: boolean started>;

        if $z6 == 0 goto label4;

        $z7 = <androidx.compose.FrameManager: boolean reclaimPending>;

        if $z7 != 0 goto label4;

        r1 = <androidx.compose.FrameManager: java.lang.Object lock>;

        z1 = 0;

        z2 = 0;

        entermonitor r1;

        $z8 = <androidx.compose.FrameManager: boolean reclaimPending>;

        if $z8 != 0 goto label1;

        <androidx.compose.FrameManager: boolean reclaimPending> = 1;

        $z9 = 1;

        goto label2;

     label1:
        $z9 = 0;

     label2:
        z5 = $z9;

        exitmonitor r1;

        goto label3;

     label3:
        if z5 == 0 goto label4;

        $r2 = <androidx.compose.FrameManager: kotlin.jvm.functions.Function0 reclaimInvalid>;

        specialinvoke r0.<androidx.compose.FrameManager: void schedule(kotlin.jvm.functions.Function0)>($r2);

     label4:
        return;
    }

    public final void recordRead$compose_runtime_release(java.lang.Object)
    {
        androidx.compose.FrameManager r0;
        java.lang.Object r1;
        kotlin.jvm.functions.Function1 $r2;

        r0 := @this: androidx.compose.FrameManager;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = <androidx.compose.FrameManager: kotlin.jvm.functions.Function1 readObserver>;

        interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        return;
    }

    public final void recordWrite$compose_runtime_release(java.lang.Object, boolean)
    {
        androidx.compose.FrameManager r0;
        java.lang.Object r1, $r7, r10;
        boolean z0, $z1, $z2, z4, z5, $z9, z10, $z11;
        java.util.List r2, r11;
        androidx.compose.InvalidationResult r3;
        int i0, $i1, i2, i3, $i4, $i5;
        androidx.compose.ObserverMap $r4, $r5, $r6;
        int[] $r8;
        java.lang.Throwable $r9, r12;
        java.util.Collection r13;
        androidx.compose.RecomposeScope r14;
        androidx.compose.frames.Frame r15;

        r0 := @this: androidx.compose.FrameManager;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        if z0 != 0 goto label15;

        $z1 = virtualinvoke r0.<androidx.compose.FrameManager: boolean getComposing$compose_runtime_release()>();

        if $z1 == 0 goto label15;

        r10 = <androidx.compose.FrameManager: java.lang.Object lock>;

        z4 = 0;

        z5 = 0;

        entermonitor r10;

     label01:
        $r4 = <androidx.compose.FrameManager: androidx.compose.ObserverMap invalidations>;

        r11 = virtualinvoke $r4.<androidx.compose.ObserverMap: java.util.List getValueOf(java.lang.Object)>(r1);

     label02:
        exitmonitor r10;

        goto label05;

     label03:
        $r9 := @caughtexception;

        r12 = $r9;

     label04:
        exitmonitor r10;

        throw r12;

     label05:
        r2 = r11;

        r13 = (java.util.Collection) r2;

        $z2 = interfaceinvoke r13.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label06;

        $z9 = 1;

        goto label07;

     label06:
        $z9 = 0;

     label07:
        if $z9 == 0 goto label15;

        z10 = 0;

        $z11 = 0;

        i2 = interfaceinvoke r2.<java.util.List: int size()>();

        i3 = 0;

        $i4 = i2 + -1;

        if i2 == -2147483648 goto label12;

        if i3 > $i4 goto label12;

     label08:
        $i5 = i3;

        i3 = i3 + 1;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i5);

        r14 = (androidx.compose.RecomposeScope) $r7;

        r3 = virtualinvoke r14.<androidx.compose.RecomposeScope: androidx.compose.InvalidationResult invalidate()>();

        $r8 = <androidx.compose.FrameManager$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r3.<androidx.compose.InvalidationResult: int ordinal()>();

        i0 = $r8[$i1];

        tableswitch(i0)
        {
            case 1: goto label09;
            case 2: goto label10;
            default: goto label11;
        };

     label09:
        z10 = 1;

        goto label11;

     label10:
        $z11 = 1;

     label11:
        if i3 <= $i4 goto label08;

     label12:
        if z10 != 0 goto label13;

        if $z11 == 0 goto label15;

     label13:
        r15 = staticinvoke <androidx.compose.frames.FramesKt: androidx.compose.frames.Frame currentFrame()>();

        if z10 == 0 goto label14;

        $r6 = <androidx.compose.FrameManager: androidx.compose.ObserverMap deferredMap>;

        virtualinvoke $r6.<androidx.compose.ObserverMap: void add(java.lang.Object,java.lang.Object)>(r15, r1);

     label14:
        if $z11 == 0 goto label15;

        $r5 = <androidx.compose.FrameManager: androidx.compose.ObserverMap immediateMap>;

        virtualinvoke $r5.<androidx.compose.ObserverMap: void add(java.lang.Object,java.lang.Object)>(r15, r1);

     label15:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    private final void open()
    {
        androidx.compose.FrameManager r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.jvm.functions.Function1 $r2;

        r0 := @this: androidx.compose.FrameManager;

        $r2 = <androidx.compose.FrameManager: kotlin.jvm.functions.Function1 readObserver>;

        $r1 = <androidx.compose.FrameManager: kotlin.jvm.functions.Function2 writeObserver>;

        staticinvoke <androidx.compose.frames.FramesKt: androidx.compose.frames.Frame open(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2)>($r2, $r1);

        return;
    }

    public final void synchronize$compose_runtime_release()
    {
        androidx.compose.FrameManager r0;
        java.util.List r1, $r6, $r7;
        boolean z1, $z6, z7;
        java.util.Iterator r2;
        java.lang.Object r3;
        kotlin.jvm.functions.Function0 r4;
        kotlin.Unit r5;
        kotlinx.coroutines.Job $r8, $r12;
        java.lang.Throwable $r10, r13;
        java.lang.Iterable $r11;

        r0 := @this: androidx.compose.FrameManager;

        r1 = <androidx.compose.FrameManager: java.util.List scheduledCallbacks>;

        z1 = 0;

        z7 = 0;

        entermonitor r1;

     label1:
        $r6 = <androidx.compose.FrameManager: java.util.List scheduledCallbacks>;

        $r11 = (java.lang.Iterable) $r6;

        r2 = interfaceinvoke $r11.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label3;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kotlin.jvm.functions.Function0) r3;

        interfaceinvoke r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label2;

     label3:
        $r7 = <androidx.compose.FrameManager: java.util.List scheduledCallbacks>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        $r12 = <androidx.compose.FrameManager: kotlinx.coroutines.Job callbackRunner>;

        if $r12 != null goto label4;

        goto label5;

     label4:
        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r12, null, 1, null);

     label5:
        $r8 = (kotlinx.coroutines.Job) null;

        <androidx.compose.FrameManager: kotlinx.coroutines.Job callbackRunner> = $r8;

        r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label6:
        exitmonitor r1;

        goto label9;

     label7:
        $r10 := @caughtexception;

        r13 = $r10;

     label8:
        exitmonitor r1;

        throw r13;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private final void schedule(kotlin.jvm.functions.Function0)
    {
        androidx.compose.FrameManager r0;
        kotlin.jvm.functions.Function0 r1;
        java.util.List r2, $r4;
        boolean z1, z5;
        kotlin.Unit r3;
        kotlinx.coroutines.Job $r5, $r10;
        androidx.compose.FrameManager$schedule$1$1 $r6;
        kotlin.coroutines.Continuation $r7;
        kotlinx.coroutines.CoroutineScope $r8;
        kotlin.jvm.functions.Function2 $r9;
        java.lang.Throwable $r11, r12;

        r0 := @this: androidx.compose.FrameManager;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        r2 = <androidx.compose.FrameManager: java.util.List scheduledCallbacks>;

        z1 = 0;

        z5 = 0;

        entermonitor r2;

     label1:
        $r4 = <androidx.compose.FrameManager: java.util.List scheduledCallbacks>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = <androidx.compose.FrameManager: kotlinx.coroutines.Job callbackRunner>;

        if $r5 != null goto label2;

        $r8 = <androidx.compose.FrameManager: kotlinx.coroutines.CoroutineScope scheduleScope>;

        $r6 = new androidx.compose.FrameManager$schedule$1$1;

        $r7 = (kotlin.coroutines.Continuation) null;

        specialinvoke $r6.<androidx.compose.FrameManager$schedule$1$1: void <init>(androidx.compose.FrameManager,kotlin.coroutines.Continuation)>(r0, $r7);

        $r9 = (kotlin.jvm.functions.Function2) $r6;

        $r10 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r8, null, null, $r9, 3, null);

        <androidx.compose.FrameManager: kotlinx.coroutines.Job callbackRunner> = $r10;

     label2:
        r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r2;

        goto label6;

     label4:
        $r11 := @caughtexception;

        r12 = $r11;

     label5:
        exitmonitor r2;

        throw r12;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static final androidx.compose.ObserverMap access$getInvalidations$cp$s-1439019616()
    {
        androidx.compose.ObserverMap $r0;

        $r0 = <androidx.compose.FrameManager: androidx.compose.ObserverMap invalidations>;

        return $r0;
    }

    public static final java.lang.Object access$getLock$cp$s-1439019616()
    {
        java.lang.Object $r0;

        $r0 = <androidx.compose.FrameManager: java.lang.Object lock>;

        return $r0;
    }

    public static final boolean access$getCommitPending$cp$s-1439019616()
    {
        boolean $z0;

        $z0 = <androidx.compose.FrameManager: boolean commitPending>;

        return $z0;
    }

    public static final void access$setCommitPending$cp$s-1439019616(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <androidx.compose.FrameManager: boolean commitPending> = z0;

        return;
    }

    public static final void access$schedule(androidx.compose.FrameManager, kotlin.jvm.functions.Function0)
    {
        androidx.compose.FrameManager $r0;
        kotlin.jvm.functions.Function0 r1;

        $r0 := @parameter0: androidx.compose.FrameManager;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        specialinvoke $r0.<androidx.compose.FrameManager: void schedule(kotlin.jvm.functions.Function0)>(r1);

        return;
    }

    public static final androidx.compose.ObserverMap access$getDeferredMap$cp$s-1439019616()
    {
        androidx.compose.ObserverMap $r0;

        $r0 = <androidx.compose.FrameManager: androidx.compose.ObserverMap deferredMap>;

        return $r0;
    }

    public static final androidx.compose.ObserverMap access$getImmediateMap$cp$s-1439019616()
    {
        androidx.compose.ObserverMap $r0;

        $r0 = <androidx.compose.FrameManager: androidx.compose.ObserverMap immediateMap>;

        return $r0;
    }

    public static final boolean access$getReclaimPending$cp$s-1439019616()
    {
        boolean $z0;

        $z0 = <androidx.compose.FrameManager: boolean reclaimPending>;

        return $z0;
    }

    public static final void access$setReclaimPending$cp$s-1439019616(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <androidx.compose.FrameManager: boolean reclaimPending> = z0;

        return;
    }

    public static final void <clinit>()
    {
        boolean z0;
        androidx.compose.FrameManager $r0;
        androidx.compose.ObserverMap $r1, $r2, $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.CoroutineDispatcher $r5;
        kotlinx.coroutines.CompletableJob $r6;
        kotlin.coroutines.CoroutineContext $r7, $r8;
        kotlinx.coroutines.CoroutineScope $r9;
        androidx.compose.FrameManager$readObserver$1 $r10;
        kotlin.jvm.functions.Function1 $r11;
        androidx.compose.FrameManager$writeObserver$1 $r12;
        kotlin.jvm.functions.Function2 $r13, $r15;
        androidx.compose.FrameManager$commitObserver$1 $r14;
        androidx.compose.FrameManager$reclaimInvalid$1 $r16;
        kotlin.jvm.functions.Function0 $r17;
        java.util.ArrayList $r18;
        java.util.List $r19;

        $r0 = new androidx.compose.FrameManager;

        specialinvoke $r0.<androidx.compose.FrameManager: void <init>()>();

        <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE> = $r0;

        $r1 = new androidx.compose.ObserverMap;

        specialinvoke $r1.<androidx.compose.ObserverMap: void <init>()>();

        <androidx.compose.FrameManager: androidx.compose.ObserverMap invalidations> = $r1;

        $r2 = new androidx.compose.ObserverMap;

        specialinvoke $r2.<androidx.compose.ObserverMap: void <init>()>();

        <androidx.compose.FrameManager: androidx.compose.ObserverMap immediateMap> = $r2;

        $r3 = new androidx.compose.ObserverMap;

        specialinvoke $r3.<androidx.compose.ObserverMap: void <init>()>();

        <androidx.compose.FrameManager: androidx.compose.ObserverMap deferredMap> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        <androidx.compose.FrameManager: java.lang.Object lock> = $r4;

        $r5 = staticinvoke <androidx.compose.ActualAndroidKt: kotlinx.coroutines.CoroutineDispatcher mainThreadCompositionDispatcher()>();

        $r6 = staticinvoke <kotlinx.coroutines.SupervisorKt: kotlinx.coroutines.CompletableJob SupervisorJob$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        $r7 = (kotlin.coroutines.CoroutineContext) $r6;

        $r8 = virtualinvoke $r5.<kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r7);

        $r9 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r8);

        <androidx.compose.FrameManager: kotlinx.coroutines.CoroutineScope scheduleScope> = $r9;

        $r10 = new androidx.compose.FrameManager$readObserver$1;

        specialinvoke $r10.<androidx.compose.FrameManager$readObserver$1: void <init>()>();

        $r11 = (kotlin.jvm.functions.Function1) $r10;

        <androidx.compose.FrameManager: kotlin.jvm.functions.Function1 readObserver> = $r11;

        $r12 = new androidx.compose.FrameManager$writeObserver$1;

        specialinvoke $r12.<androidx.compose.FrameManager$writeObserver$1: void <init>()>();

        $r13 = (kotlin.jvm.functions.Function2) $r12;

        <androidx.compose.FrameManager: kotlin.jvm.functions.Function2 writeObserver> = $r13;

        $r14 = new androidx.compose.FrameManager$commitObserver$1;

        specialinvoke $r14.<androidx.compose.FrameManager$commitObserver$1: void <init>()>();

        $r15 = (kotlin.jvm.functions.Function2) $r14;

        <androidx.compose.FrameManager: kotlin.jvm.functions.Function2 commitObserver> = $r15;

        $r16 = new androidx.compose.FrameManager$reclaimInvalid$1;

        specialinvoke $r16.<androidx.compose.FrameManager$reclaimInvalid$1: void <init>()>();

        $r17 = (kotlin.jvm.functions.Function0) $r16;

        <androidx.compose.FrameManager: kotlin.jvm.functions.Function0 reclaimInvalid> = $r17;

        z0 = 0;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        $r19 = (java.util.List) $r18;

        <androidx.compose.FrameManager: java.util.List scheduledCallbacks> = $r19;

        return;
    }

androidx.compose.FrameManager$commitObserver$1$1$1
<androidx.compose.FrameManager$commitObserver$1$1$1: java.util.List $currentInvalidations>
    void <init>(java.util.List)
    {
        androidx.compose.FrameManager$commitObserver$1$1$1 r0;
        java.util.List $r1;

        r0 := @this: androidx.compose.FrameManager$commitObserver$1$1$1;

        $r1 := @parameter0: java.util.List;

        r0.<androidx.compose.FrameManager$commitObserver$1$1$1: java.util.List $currentInvalidations> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.FrameManager$commitObserver$1$1$1 r0;
        java.lang.Iterable $r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        androidx.compose.RecomposeScope r4;
        java.util.List $r5;
        boolean $z2;

        r0 := @this: androidx.compose.FrameManager$commitObserver$1$1$1;

        $r5 = r0.<androidx.compose.FrameManager$commitObserver$1$1$1: java.util.List $currentInvalidations>;

        $r1 = (java.lang.Iterable) $r5;

        r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.compose.RecomposeScope) r3;

        virtualinvoke r4.<androidx.compose.RecomposeScope: androidx.compose.InvalidationResult invalidate()>();

        goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.FrameManager$commitObserver$1$1$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.FrameManager$commitObserver$1$1$1;

        virtualinvoke r0.<androidx.compose.FrameManager$commitObserver$1$1$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.FrameManager$commitObserver$1
    void <init>()
    {
        androidx.compose.FrameManager$commitObserver$1 r0;

        r0 := @this: androidx.compose.FrameManager$commitObserver$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(java.util.Set, androidx.compose.frames.Frame)
    {
        androidx.compose.FrameManager$commitObserver$1 r0;
        java.util.Set r1;
        androidx.compose.frames.Frame r2;
        java.lang.String r3;
        java.util.List r4, r5, r12, r13, r14;
        androidx.compose.ObserverMap r6, $r18, $r20;
        java.lang.Iterable $r7, $r23, r34;
        java.util.Collection r8, r33;
        java.util.Iterator r9, r35;
        java.lang.Object r10, r11, r31, r36;
        androidx.compose.Trace $r15, $r29, $r39;
        androidx.compose.FrameManager $r16, $r17, $r19, $r21, $r26;
        java.util.ArrayList $r22;
        boolean $z5, $z6, $z7, $z8, $z10, z12, z13, $z16, $z17, $z19;
        androidx.compose.FrameManager$commitObserver$1$1$1 $r25;
        kotlin.jvm.functions.Function0 $r27;
        java.lang.Throwable $r28, $r30, r32, r40;
        androidx.compose.RecomposeScope $r37;
        kotlin.Unit r38;

        r0 := @this: androidx.compose.FrameManager$commitObserver$1;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: androidx.compose.frames.Frame;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "committed");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "frame");

        r3 = "Model:commitTransaction";

        $r15 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r15.<androidx.compose.Trace: void beginSection(java.lang.String)>(r3);

     label01:
        $r16 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        r31 = staticinvoke <androidx.compose.FrameManager: java.lang.Object access$getLock$cp$s-1439019616()>();

        z12 = 0;

        z13 = 0;

        entermonitor r31;

     label02:
        $r17 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        $r18 = staticinvoke <androidx.compose.FrameManager: androidx.compose.ObserverMap access$getDeferredMap$cp$s-1439019616()>();

        r4 = virtualinvoke $r18.<androidx.compose.ObserverMap: java.util.List getValueOf(java.lang.Object)>(r2);

        $r19 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        $r20 = staticinvoke <androidx.compose.FrameManager: androidx.compose.ObserverMap access$getImmediateMap$cp$s-1439019616()>();

        r5 = virtualinvoke $r20.<androidx.compose.ObserverMap: java.util.List getValueOf(java.lang.Object)>(r2);

        $r21 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        r6 = staticinvoke <androidx.compose.FrameManager: androidx.compose.ObserverMap access$getInvalidations$cp$s-1439019616()>();

        $r7 = (java.lang.Iterable) r1;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r8 = (java.util.Collection) $r22;

        r9 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label03:
        $z16 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label07;

        r10 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = r10;

        $z8 = interfaceinvoke r5.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z8 == 0 goto label04;

        $z10 = interfaceinvoke r4.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z10 == 0 goto label05;

     label04:
        $z17 = 1;

        goto label06;

     label05:
        $z17 = 0;

     label06:
        if $z17 == 0 goto label03;

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>(r10);

        goto label03;

     label07:
        r12 = (java.util.List) r8;

        $r23 = (java.lang.Iterable) r12;

        r13 = virtualinvoke r6.<androidx.compose.ObserverMap: java.util.List get(java.lang.Iterable)>($r23);

     label08:
        exitmonitor r31;

        goto label11;

     label09:
        $r30 := @caughtexception;

        r32 = $r30;

     label10:
        exitmonitor r31;

        throw r32;

     label11:
        r14 = r13;

        r33 = (java.util.Collection) r14;

        $z5 = interfaceinvoke r33.<java.util.Collection: boolean isEmpty()>();

        if $z5 != 0 goto label12;

        $z19 = 1;

        goto label13;

     label12:
        $z19 = 0;

     label13:
        if $z19 == 0 goto label16;

        $z6 = staticinvoke <androidx.compose.ActualAndroidKt: boolean isMainThread()>();

        if $z6 != 0 goto label14;

        $r26 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        $r25 = new androidx.compose.FrameManager$commitObserver$1$1$1;

        specialinvoke $r25.<androidx.compose.FrameManager$commitObserver$1$1$1: void <init>(java.util.List)>(r14);

        $r27 = (kotlin.jvm.functions.Function0) $r25;

        staticinvoke <androidx.compose.FrameManager: void access$schedule(androidx.compose.FrameManager,kotlin.jvm.functions.Function0)>($r26, $r27);

        goto label16;

     label14:
        r34 = (java.lang.Iterable) r14;

        r35 = interfaceinvoke r34.<java.lang.Iterable: java.util.Iterator iterator()>();

     label15:
        $z7 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label16;

        r36 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        $r37 = (androidx.compose.RecomposeScope) r36;

        virtualinvoke $r37.<androidx.compose.RecomposeScope: androidx.compose.InvalidationResult invalidate()>();

        goto label15;

     label16:
        r38 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label17:
        $r39 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r39.<androidx.compose.Trace: void endSection()>();

        goto label20;

     label18:
        $r28 := @caughtexception;

        r40 = $r28;

     label19:
        $r29 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r29.<androidx.compose.Trace: void endSection()>();

        throw r40;

     label20:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.FrameManager$commitObserver$1 r0;
        java.lang.Object r1, r2;
        androidx.compose.frames.Frame $r3;
        java.util.Set $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.FrameManager$commitObserver$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.util.Set) r1;

        $r3 = (androidx.compose.frames.Frame) r2;

        virtualinvoke r0.<androidx.compose.FrameManager$commitObserver$1: void invoke(java.util.Set,androidx.compose.frames.Frame)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

androidx.compose.FrameManager$readObserver$1
    void <init>()
    {
        androidx.compose.FrameManager$readObserver$1 r0;

        r0 := @this: androidx.compose.FrameManager$readObserver$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Object)
    {
        androidx.compose.FrameManager$readObserver$1 r0;
        java.lang.Object r1, r4;
        androidx.compose.RecomposeScope r2, r3, $r11, r12;
        boolean z0, z1, z4, z7;
        kotlin.Unit r5;
        androidx.compose.FrameManager $r6, $r7;
        androidx.compose.ObserverMap $r8;
        java.lang.Throwable $r9, r13;
        androidx.compose.Composer r10;

        r0 := @this: androidx.compose.FrameManager$readObserver$1;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "read");

        r10 = staticinvoke <androidx.compose.ComposerKt: androidx.compose.Composer getCurrentComposerInternal()>();

        if r10 != null goto label1;

        $r11 = (androidx.compose.RecomposeScope) null;

        goto label2;

     label1:
        $r11 = virtualinvoke r10.<androidx.compose.Composer: androidx.compose.RecomposeScope getCurrentRecomposeScope$compose_runtime_release()>();

     label2:
        r2 = $r11;

        if r2 != null goto label3;

        goto label8;

     label3:
        r12 = r2;

        z0 = 0;

        z1 = 0;

        r3 = r12;

        $r6 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        r4 = staticinvoke <androidx.compose.FrameManager: java.lang.Object access$getLock$cp$s-1439019616()>();

        z4 = 0;

        z7 = 0;

        entermonitor r4;

     label4:
        virtualinvoke r3.<androidx.compose.RecomposeScope: void setUsed(boolean)>(1);

        $r7 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        $r8 = staticinvoke <androidx.compose.FrameManager: androidx.compose.ObserverMap access$getInvalidations$cp$s-1439019616()>();

        virtualinvoke $r8.<androidx.compose.ObserverMap: void add(java.lang.Object,java.lang.Object)>(r1, r3);

        r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label5:
        exitmonitor r4;

        goto label8;

     label6:
        $r9 := @caughtexception;

        r13 = $r9;

     label7:
        exitmonitor r4;

        throw r13;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.FrameManager$readObserver$1 r0;
        java.lang.Object r1;
        kotlin.Unit $r2;

        r0 := @this: androidx.compose.FrameManager$readObserver$1;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<androidx.compose.FrameManager$readObserver$1: void invoke(java.lang.Object)>(r1);

        $r2 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r2;
    }

androidx.compose.FrameManager$reclaimInvalid$1$1$1$1
    void <init>()
    {
        androidx.compose.FrameManager$reclaimInvalid$1$1$1$1 r0;

        r0 := @this: androidx.compose.FrameManager$reclaimInvalid$1$1$1$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final boolean invoke(androidx.compose.RecomposeScope)
    {
        androidx.compose.FrameManager$reclaimInvalid$1$1$1$1 r0;
        androidx.compose.RecomposeScope r1;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.FrameManager$reclaimInvalid$1$1$1$1;

        r1 := @parameter0: androidx.compose.RecomposeScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $z0 = virtualinvoke r1.<androidx.compose.RecomposeScope: boolean getValid()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.FrameManager$reclaimInvalid$1$1$1$1 r0;
        java.lang.Object r1;
        androidx.compose.RecomposeScope $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: androidx.compose.FrameManager$reclaimInvalid$1$1$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.RecomposeScope) r1;

        $z0 = virtualinvoke r0.<androidx.compose.FrameManager$reclaimInvalid$1$1$1$1: boolean invoke(androidx.compose.RecomposeScope)>($r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

androidx.compose.FrameManager$reclaimInvalid$1
    void <init>()
    {
        androidx.compose.FrameManager$reclaimInvalid$1 r0;

        r0 := @this: androidx.compose.FrameManager$reclaimInvalid$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.FrameManager$reclaimInvalid$1 r0;
        java.lang.String r1;
        androidx.compose.FrameManager r2, $r4, $r6, $r7;
        boolean z2, $z4, z6;
        androidx.compose.Trace $r3, $r5, $r12;
        androidx.compose.ObserverMap $r8;
        androidx.compose.FrameManager$reclaimInvalid$1$1$1$1 $r9;
        kotlin.jvm.functions.Function1 $r10;
        java.lang.Throwable $r11, $r13, r15;
        kotlin.Unit $r14, $r16;

        r0 := @this: androidx.compose.FrameManager$reclaimInvalid$1;

        r1 = "Model:reclaimInvalid";

        $r3 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r3.<androidx.compose.Trace: void beginSection(java.lang.String)>(r1);

     label01:
        r2 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        z2 = 0;

        z6 = 0;

        entermonitor r2;

     label02:
        $r4 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        $z4 = staticinvoke <androidx.compose.FrameManager: boolean access$getReclaimPending$cp$s-1439019616()>();

        if $z4 == 0 goto label03;

        $r6 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        staticinvoke <androidx.compose.FrameManager: void access$setReclaimPending$cp$s-1439019616(boolean)>(0);

        $r7 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        $r8 = staticinvoke <androidx.compose.FrameManager: androidx.compose.ObserverMap access$getInvalidations$cp$s-1439019616()>();

        $r9 = new androidx.compose.FrameManager$reclaimInvalid$1$1$1$1;

        specialinvoke $r9.<androidx.compose.FrameManager$reclaimInvalid$1$1$1$1: void <init>()>();

        $r10 = (kotlin.jvm.functions.Function1) $r9;

        virtualinvoke $r8.<androidx.compose.ObserverMap: void clearValues(kotlin.jvm.functions.Function1)>($r10);

     label03:
        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label04:
        exitmonitor r2;

        goto label07;

     label05:
        $r13 := @caughtexception;

        r15 = $r13;

     label06:
        exitmonitor r2;

        throw r15;

     label07:
        $r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        $r5 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r5.<androidx.compose.Trace: void endSection()>();

        goto label11;

     label09:
        $r11 := @caughtexception;

     label10:
        $r12 = <androidx.compose.Trace: androidx.compose.Trace INSTANCE>;

        virtualinvoke $r12.<androidx.compose.Trace: void endSection()>();

        throw $r11;

     label11:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.FrameManager$reclaimInvalid$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.FrameManager$reclaimInvalid$1;

        virtualinvoke r0.<androidx.compose.FrameManager$reclaimInvalid$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.FrameManager$schedule$1$1
<androidx.compose.FrameManager$schedule$1$1: int label>
<androidx.compose.FrameManager$schedule$1$1: kotlinx.coroutines.CoroutineScope p$>
<androidx.compose.FrameManager$schedule$1$1: androidx.compose.FrameManager $this>
    public void <init>(androidx.compose.FrameManager, kotlin.coroutines.Continuation)
    {
        androidx.compose.FrameManager$schedule$1$1 r0;
        androidx.compose.FrameManager $r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.compose.FrameManager$schedule$1$1;

        $r1 := @parameter0: androidx.compose.FrameManager;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        r0.<androidx.compose.FrameManager$schedule$1$1: androidx.compose.FrameManager $this> = $r1;

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.FrameManager$schedule$1$1 r0;
        java.lang.Object $r1, r2;
        int $i0;
        androidx.compose.FrameManager $r3;
        kotlin.Unit $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: androidx.compose.FrameManager$schedule$1$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.FrameManager$schedule$1$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            default: goto label2;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = r0.<androidx.compose.FrameManager$schedule$1$1: androidx.compose.FrameManager $this>;

        virtualinvoke $r3.<androidx.compose.FrameManager: void synchronize$compose_runtime_release()>();

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label2:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r5;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.FrameManager$schedule$1$1 r0, r3, $r4;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r7;
        androidx.compose.FrameManager $r5;
        kotlinx.coroutines.CoroutineScope $r6;

        r0 := @this: androidx.compose.FrameManager$schedule$1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new androidx.compose.FrameManager$schedule$1$1;

        $r5 = r0.<androidx.compose.FrameManager$schedule$1$1: androidx.compose.FrameManager $this>;

        specialinvoke $r4.<androidx.compose.FrameManager$schedule$1$1: void <init>(androidx.compose.FrameManager,kotlin.coroutines.Continuation)>($r5, $r2);

        r3 = $r4;

        $r6 = (kotlinx.coroutines.CoroutineScope) r1;

        r3.<androidx.compose.FrameManager$schedule$1$1: kotlinx.coroutines.CoroutineScope p$> = $r6;

        $r7 = (kotlin.coroutines.Continuation) r3;

        return $r7;
    }

    public final java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.FrameManager$schedule$1$1 r0, $r6;
        java.lang.Object r1, r2, $r7;
        kotlin.coroutines.Continuation r3, $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.FrameManager$schedule$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlin.coroutines.Continuation) r2;

        r3 = virtualinvoke r0.<androidx.compose.FrameManager$schedule$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, $r4);

        $r6 = (androidx.compose.FrameManager$schedule$1$1) r3;

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r7 = virtualinvoke $r6.<androidx.compose.FrameManager$schedule$1$1: java.lang.Object invokeSuspend(java.lang.Object)>($r5);

        return $r7;
    }

androidx.compose.FrameManager$WhenMappings
<androidx.compose.FrameManager$WhenMappings: int[] $EnumSwitchMapping$0>
    public static final void <clinit>()
    {
        int[] r0;
        androidx.compose.InvalidationResult[] $r1;
        int $i0, $i1, $i2;
        androidx.compose.InvalidationResult $r2, $r3;

        $r1 = staticinvoke <androidx.compose.InvalidationResult: androidx.compose.InvalidationResult[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.compose.InvalidationResult: androidx.compose.InvalidationResult DEFERRED>;

        $i1 = virtualinvoke $r2.<androidx.compose.InvalidationResult: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.compose.InvalidationResult: androidx.compose.InvalidationResult IMMINENT>;

        $i2 = virtualinvoke $r3.<androidx.compose.InvalidationResult: int ordinal()>();

        r0[$i2] = 2;

        <androidx.compose.FrameManager$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

androidx.compose.FrameManager$writeObserver$1$1
    void <init>()
    {
        androidx.compose.FrameManager$writeObserver$1$1 r0;

        r0 := @this: androidx.compose.FrameManager$writeObserver$1$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.FrameManager$writeObserver$1$1 r0;
        androidx.compose.FrameManager $r1, $r2;

        r0 := @this: androidx.compose.FrameManager$writeObserver$1$1;

        $r1 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        staticinvoke <androidx.compose.FrameManager: void access$setCommitPending$cp$s-1439019616(boolean)>(0);

        $r2 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        virtualinvoke $r2.<androidx.compose.FrameManager: void nextFrame()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.FrameManager$writeObserver$1$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.FrameManager$writeObserver$1$1;

        virtualinvoke r0.<androidx.compose.FrameManager$writeObserver$1$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.FrameManager$writeObserver$1
    void <init>()
    {
        androidx.compose.FrameManager$writeObserver$1 r0;

        r0 := @this: androidx.compose.FrameManager$writeObserver$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(java.lang.Object, boolean)
    {
        androidx.compose.FrameManager$writeObserver$1 r0;
        java.lang.Object r1;
        boolean z0, $z1;
        androidx.compose.FrameManager $r2, $r3, $r4, $r6;
        androidx.compose.FrameManager$writeObserver$1$1 $r5;
        kotlin.jvm.functions.Function0 $r7;

        r0 := @this: androidx.compose.FrameManager$writeObserver$1;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        $z1 = staticinvoke <androidx.compose.FrameManager: boolean access$getCommitPending$cp$s-1439019616()>();

        if $z1 != 0 goto label1;

        $r4 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        staticinvoke <androidx.compose.FrameManager: void access$setCommitPending$cp$s-1439019616(boolean)>(1);

        $r6 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        $r5 = new androidx.compose.FrameManager$writeObserver$1$1;

        specialinvoke $r5.<androidx.compose.FrameManager$writeObserver$1$1: void <init>()>();

        $r7 = (kotlin.jvm.functions.Function0) $r5;

        staticinvoke <androidx.compose.FrameManager: void access$schedule(androidx.compose.FrameManager,kotlin.jvm.functions.Function0)>($r6, $r7);

     label1:
        $r3 = <androidx.compose.FrameManager: androidx.compose.FrameManager INSTANCE>;

        virtualinvoke $r3.<androidx.compose.FrameManager: void recordWrite$compose_runtime_release(java.lang.Object,boolean)>(r1, z0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.FrameManager$writeObserver$1 r0;
        java.lang.Object r1, r2;
        java.lang.Boolean $r3;
        boolean $z0;
        kotlin.Unit $r4;

        r0 := @this: androidx.compose.FrameManager$writeObserver$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Boolean) r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r0.<androidx.compose.FrameManager$writeObserver$1: void invoke(java.lang.Object,boolean)>(r1, $z0);

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;
    }

