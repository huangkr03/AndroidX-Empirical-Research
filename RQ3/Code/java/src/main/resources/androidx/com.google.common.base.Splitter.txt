com.google.common.base.Splitter
<com.google.common.base.Splitter: int limit>
<com.google.common.base.Splitter: boolean omitEmptyStrings>
<com.google.common.base.Splitter: com.google.common.base.Splitter$Strategy strategy>
<com.google.common.base.Splitter: com.google.common.base.CharMatcher trimmer>
    private void <init>(com.google.common.base.Splitter$Strategy)
    {
        com.google.common.base.Splitter $r0;
        com.google.common.base.Splitter$Strategy $r1;
        com.google.common.base.CharMatcher $r2;

        $r0 := @this: com.google.common.base.Splitter;

        $r1 := @parameter0: com.google.common.base.Splitter$Strategy;

        $r2 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher none()>();

        specialinvoke $r0.<com.google.common.base.Splitter: void <init>(com.google.common.base.Splitter$Strategy,boolean,com.google.common.base.CharMatcher,int)>($r1, 0, $r2, 2147483647);

        return;
    }

    private void <init>(com.google.common.base.Splitter$Strategy, boolean, com.google.common.base.CharMatcher, int)
    {
        com.google.common.base.Splitter $r0;
        com.google.common.base.Splitter$Strategy $r1;
        boolean $z0;
        com.google.common.base.CharMatcher $r2;
        int $i0;

        $r0 := @this: com.google.common.base.Splitter;

        $r1 := @parameter0: com.google.common.base.Splitter$Strategy;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: com.google.common.base.CharMatcher;

        $i0 := @parameter3: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.common.base.Splitter: com.google.common.base.Splitter$Strategy strategy> = $r1;

        $r0.<com.google.common.base.Splitter: boolean omitEmptyStrings> = $z0;

        $r0.<com.google.common.base.Splitter: com.google.common.base.CharMatcher trimmer> = $r2;

        $r0.<com.google.common.base.Splitter: int limit> = $i0;

        return;
    }

    public static com.google.common.base.Splitter on(char)
    {
        char $c0;
        com.google.common.base.CharMatcher $r0;
        com.google.common.base.Splitter $r1;

        $c0 := @parameter0: char;

        $r0 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher is(char)>($c0);

        $r1 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(com.google.common.base.CharMatcher)>($r0);

        return $r1;
    }

    public static com.google.common.base.Splitter on(com.google.common.base.CharMatcher)
    {
        com.google.common.base.CharMatcher $r0;
        com.google.common.base.Splitter $r1;
        com.google.common.base.Splitter$1 $r2;

        $r0 := @parameter0: com.google.common.base.CharMatcher;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r0);

        $r1 = new com.google.common.base.Splitter;

        $r2 = new com.google.common.base.Splitter$1;

        specialinvoke $r2.<com.google.common.base.Splitter$1: void <init>(com.google.common.base.CharMatcher)>($r0);

        specialinvoke $r1.<com.google.common.base.Splitter: void <init>(com.google.common.base.Splitter$Strategy)>($r2);

        return $r1;
    }

    public com.google.common.base.Splitter trimResults()
    {
        com.google.common.base.Splitter $r0;
        com.google.common.base.CharMatcher $r1;

        $r0 := @this: com.google.common.base.Splitter;

        $r1 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher whitespace()>();

        $r0 = virtualinvoke $r0.<com.google.common.base.Splitter: com.google.common.base.Splitter trimResults(com.google.common.base.CharMatcher)>($r1);

        return $r0;
    }

    public com.google.common.base.Splitter trimResults(com.google.common.base.CharMatcher)
    {
        com.google.common.base.Splitter $r0, $r2;
        com.google.common.base.CharMatcher $r1;
        com.google.common.base.Splitter$Strategy $r3;
        boolean $z0;
        int $i0;

        $r0 := @this: com.google.common.base.Splitter;

        $r1 := @parameter0: com.google.common.base.CharMatcher;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = new com.google.common.base.Splitter;

        $r3 = $r0.<com.google.common.base.Splitter: com.google.common.base.Splitter$Strategy strategy>;

        $z0 = $r0.<com.google.common.base.Splitter: boolean omitEmptyStrings>;

        $i0 = $r0.<com.google.common.base.Splitter: int limit>;

        specialinvoke $r2.<com.google.common.base.Splitter: void <init>(com.google.common.base.Splitter$Strategy,boolean,com.google.common.base.CharMatcher,int)>($r3, $z0, $r1, $i0);

        return $r2;
    }

com.google.common.base.Splitter$1$1
<com.google.common.base.Splitter$1$1: com.google.common.base.Splitter$1 this$0>
    void <init>(com.google.common.base.Splitter$1, com.google.common.base.Splitter, java.lang.CharSequence)
    {
        com.google.common.base.Splitter$1$1 $r0;
        com.google.common.base.Splitter$1 $r1;
        com.google.common.base.Splitter $r2;
        java.lang.CharSequence $r3;

        $r0 := @this: com.google.common.base.Splitter$1$1;

        $r1 := @parameter0: com.google.common.base.Splitter$1;

        $r2 := @parameter1: com.google.common.base.Splitter;

        $r3 := @parameter2: java.lang.CharSequence;

        $r0.<com.google.common.base.Splitter$1$1: com.google.common.base.Splitter$1 this$0> = $r1;

        specialinvoke $r0.<com.google.common.base.Splitter$SplittingIterator: void <init>(com.google.common.base.Splitter,java.lang.CharSequence)>($r2, $r3);

        return;
    }

    int separatorEnd(int)
    {
        com.google.common.base.Splitter$1$1 $r0;
        int $i0;

        $r0 := @this: com.google.common.base.Splitter$1$1;

        $i0 := @parameter0: int;

        $i0 = $i0 + 1;

        return $i0;
    }

    int separatorStart(int)
    {
        com.google.common.base.Splitter$1$1 $r0;
        java.lang.CharSequence $r1;
        int $i0;
        com.google.common.base.Splitter$1 $r2;
        com.google.common.base.CharMatcher $r3;

        $r0 := @this: com.google.common.base.Splitter$1$1;

        $i0 := @parameter0: int;

        $r2 = $r0.<com.google.common.base.Splitter$1$1: com.google.common.base.Splitter$1 this$0>;

        $r3 = $r2.<com.google.common.base.Splitter$1: com.google.common.base.CharMatcher val$separatorMatcher>;

        $r1 = $r0.<com.google.common.base.Splitter$1$1: java.lang.CharSequence toSplit>;

        $i0 = virtualinvoke $r3.<com.google.common.base.CharMatcher: int indexIn(java.lang.CharSequence,int)>($r1, $i0);

        return $i0;
    }

com.google.common.base.Splitter$1
<com.google.common.base.Splitter$1: com.google.common.base.CharMatcher val$separatorMatcher>
    void <init>(com.google.common.base.CharMatcher)
    {
        com.google.common.base.Splitter$1 $r0;
        com.google.common.base.CharMatcher $r1;

        $r0 := @this: com.google.common.base.Splitter$1;

        $r1 := @parameter0: com.google.common.base.CharMatcher;

        $r0.<com.google.common.base.Splitter$1: com.google.common.base.CharMatcher val$separatorMatcher> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

com.google.common.base.Splitter$SplittingIterator
<com.google.common.base.Splitter$SplittingIterator: int limit>
<com.google.common.base.Splitter$SplittingIterator: int offset>
<com.google.common.base.Splitter$SplittingIterator: boolean omitEmptyStrings>
<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>
<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>
    protected void <init>(com.google.common.base.Splitter, java.lang.CharSequence)
    {
        com.google.common.base.Splitter$SplittingIterator $r0;
        java.lang.CharSequence $r1;
        com.google.common.base.Splitter $r2;
        com.google.common.base.CharMatcher $r3;
        boolean $z0;
        int $i0;

        $r0 := @this: com.google.common.base.Splitter$SplittingIterator;

        $r2 := @parameter0: com.google.common.base.Splitter;

        $r1 := @parameter1: java.lang.CharSequence;

        specialinvoke $r0.<com.google.common.base.AbstractIterator: void <init>()>();

        $r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = 0;

        $r3 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.CharMatcher access$200(com.google.common.base.Splitter)>($r2);

        $r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer> = $r3;

        $z0 = staticinvoke <com.google.common.base.Splitter: boolean access$300(com.google.common.base.Splitter)>($r2);

        $r0.<com.google.common.base.Splitter$SplittingIterator: boolean omitEmptyStrings> = $z0;

        $i0 = staticinvoke <com.google.common.base.Splitter: int access$400(com.google.common.base.Splitter)>($r2);

        $r0.<com.google.common.base.Splitter$SplittingIterator: int limit> = $i0;

        $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit> = $r1;

        return;
    }

    protected volatile java.lang.Object computeNext()
    {
        com.google.common.base.Splitter$SplittingIterator $r0;
        java.lang.String $r1;

        $r0 := @this: com.google.common.base.Splitter$SplittingIterator;

        $r1 = virtualinvoke $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.String computeNext()>();

        return $r1;
    }

    protected java.lang.String computeNext()
    {
        com.google.common.base.Splitter$SplittingIterator $r0;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r1;
        com.google.common.base.CharMatcher $r2;
        char $c3;
        boolean $z0;
        java.lang.String $r3;
        java.lang.Object $r4;

        $r0 := @this: com.google.common.base.Splitter$SplittingIterator;

        $i1 = $r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

     label01:
        $i2 = $r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        if $i2 == -1 goto label11;

        $i0 = virtualinvoke $r0.<com.google.common.base.Splitter$SplittingIterator: int separatorStart(int)>($i2);

        $i2 = $i0;

        if $i0 != -1 goto label02;

        $r1 = $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = -1;

        goto label03;

     label02:
        $i0 = virtualinvoke $r0.<com.google.common.base.Splitter$SplittingIterator: int separatorEnd(int)>($i0);

        $r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = $i0;

     label03:
        $i0 = $r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        if $i0 != $i1 goto label04;

        $i2 = $i0 + 1;

        $r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = $i2;

        $r1 = $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i2 <= $i0 goto label01;

        $r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = -1;

        goto label01;

     label04:
        if $i1 >= $i2 goto label05;

        $r2 = $r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>;

        $r1 = $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = virtualinvoke $r2.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label05;

        $i1 = $i1 + 1;

        goto label04;

     label05:
        if $i2 <= $i1 goto label06;

        $r2 = $r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>;

        $r1 = $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i0 = $i2 + -1;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke $r2.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label06;

        $i2 = $i0;

        goto label05;

     label06:
        $z0 = $r0.<com.google.common.base.Splitter$SplittingIterator: boolean omitEmptyStrings>;

        if $z0 == 0 goto label07;

        if $i1 != $i2 goto label07;

        $i1 = $r0.<com.google.common.base.Splitter$SplittingIterator: int offset>;

        goto label01;

     label07:
        $i0 = $r0.<com.google.common.base.Splitter$SplittingIterator: int limit>;

        if $i0 != 1 goto label09;

        $r1 = $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $r0.<com.google.common.base.Splitter$SplittingIterator: int offset> = -1;

     label08:
        if $i2 <= $i1 goto label10;

        $r2 = $r0.<com.google.common.base.Splitter$SplittingIterator: com.google.common.base.CharMatcher trimmer>;

        $r1 = $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $i0 = $i2 + -1;

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $z0 = virtualinvoke $r2.<com.google.common.base.CharMatcher: boolean matches(char)>($c3);

        if $z0 == 0 goto label10;

        $i2 = $i0;

        goto label08;

     label09:
        $i0 = $i0 + -1;

        $r0.<com.google.common.base.Splitter$SplittingIterator: int limit> = $i0;

     label10:
        $r1 = $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.CharSequence toSplit>;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i2);

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r3;

     label11:
        $r4 = virtualinvoke $r0.<com.google.common.base.Splitter$SplittingIterator: java.lang.Object endOfData()>();

        $r3 = (java.lang.String) $r4;

        return $r3;
    }

<com.google.common.base.Splitter$SplittingIterator: int separatorEnd(int)>
<com.google.common.base.Splitter$SplittingIterator: int separatorStart(int)>
com.google.common.base.Splitter$Strategy
