okio.OutputStreamSink
<okio.OutputStreamSink: java.io.OutputStream out>
<okio.OutputStreamSink: okio.Timeout timeout>
    public void <init>(java.io.OutputStream, okio.Timeout)
    {
        okio.OutputStreamSink $r0;
        java.io.OutputStream $r1;
        okio.Timeout $r2;

        $r0 := @this: okio.OutputStreamSink;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: okio.Timeout;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "out");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "timeout");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<okio.OutputStreamSink: java.io.OutputStream out> = $r1;

        $r0.<okio.OutputStreamSink: okio.Timeout timeout> = $r2;

        return;
    }

    public void close()
    {
        okio.OutputStreamSink $r0;
        java.io.OutputStream $r1;

        $r0 := @this: okio.OutputStreamSink;

        $r1 = $r0.<okio.OutputStreamSink: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;
    }

    public void flush()
    {
        okio.OutputStreamSink $r0;
        java.io.OutputStream $r1;

        $r0 := @this: okio.OutputStreamSink;

        $r1 = $r0.<okio.OutputStreamSink: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public java.lang.String toString()
    {
        okio.OutputStreamSink $r0;
        java.io.OutputStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: okio.OutputStreamSink;

        $r1 = $r0.<okio.OutputStreamSink: java.io.OutputStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sink(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void write(okio.Buffer, long)
    {
        okio.OutputStreamSink $r0;
        okio.Buffer $r1;
        int $i0, $i4;
        long $l1, $l2, $l5;
        byte $b3;
        okio.Timeout $r2;
        okio.Segment $r3, $r6;
        java.io.OutputStream $r4;
        byte[] $r5;

        $r0 := @this: okio.OutputStreamSink;

        $r1 := @parameter0: okio.Buffer;

        $l1 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source");

        $l2 = virtualinvoke $r1.<okio.Buffer: long size()>();

        staticinvoke <okio._UtilKt: void checkOffsetAndCount(long,long,long)>($l2, 0L, $l1);

     label1:
        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label2;

        $r2 = $r0.<okio.OutputStreamSink: okio.Timeout timeout>;

        virtualinvoke $r2.<okio.Timeout: void throwIfReached()>();

        $r3 = $r1.<okio.Buffer: okio.Segment head>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        $i4 = $r3.<okio.Segment: int limit>;

        $i0 = $r3.<okio.Segment: int pos>;

        $i4 = $i4 - $i0;

        $l2 = (long) $i4;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l1, $l2);

        $i4 = (int) $l2;

        $r4 = $r0.<okio.OutputStreamSink: java.io.OutputStream out>;

        $r5 = $r3.<okio.Segment: byte[] data>;

        $i0 = $r3.<okio.Segment: int pos>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r5, $i0, $i4);

        $i0 = $r3.<okio.Segment: int pos>;

        $i0 = $i0 + $i4;

        $r3.<okio.Segment: int pos> = $i0;

        $l2 = (long) $i4;

        $l1 = $l1 - $l2;

        $l5 = virtualinvoke $r1.<okio.Buffer: long size()>();

        $l2 = $l5 - $l2;

        virtualinvoke $r1.<okio.Buffer: void setSize$third_party_java_src_okio_okio(long)>($l2);

        $i4 = $r3.<okio.Segment: int pos>;

        $i0 = $r3.<okio.Segment: int limit>;

        if $i4 != $i0 goto label1;

        $r6 = virtualinvoke $r3.<okio.Segment: okio.Segment pop()>();

        $r1.<okio.Buffer: okio.Segment head> = $r6;

        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r3);

        goto label1;

     label2:
        return;
    }

