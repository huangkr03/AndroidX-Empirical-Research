kotlin.coroutines.jvm.internal.RestrictedContinuationImpl
    public void <init>(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.jvm.internal.RestrictedContinuationImpl $r0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlin.coroutines.EmptyCoroutineContext $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        $r0 := @this: kotlin.coroutines.jvm.internal.RestrictedContinuationImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        specialinvoke $r0.<kotlin.coroutines.jvm.internal.BaseContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r1);

        if $r1 == null goto label4;

        $r2 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r3 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = "Coroutines with restricted suspension must have EmptyCoroutineContext";

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label4:
        return;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlin.coroutines.jvm.internal.RestrictedContinuationImpl $r0;
        kotlin.coroutines.EmptyCoroutineContext r1;

        $r0 := @this: kotlin.coroutines.jvm.internal.RestrictedContinuationImpl;

        r1 = <kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE>;

        return r1;
    }

