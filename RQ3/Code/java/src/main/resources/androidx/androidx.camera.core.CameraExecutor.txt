androidx.camera.core.CameraExecutor
<androidx.camera.core.CameraExecutor: java.lang.String TAG>
<androidx.camera.core.CameraExecutor: int DEFAULT_CORE_THREADS>
<androidx.camera.core.CameraExecutor: int DEFAULT_MAX_THREADS>
<androidx.camera.core.CameraExecutor: java.lang.Object mExecutorLock>
<androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor>
<androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadFactory THREAD_FACTORY>
    void <init>()
    {
        androidx.camera.core.CameraExecutor r0;
        java.lang.Object $r1;
        java.util.concurrent.ThreadPoolExecutor $r2;

        r0 := @this: androidx.camera.core.CameraExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.CameraExecutor: java.lang.Object mExecutorLock> = $r1;

        $r2 = staticinvoke <androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor createExecutor()>();

        r0.<androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor> = $r2;

        return;
    }

    void init(androidx.camera.core.impl.CameraFactory)
    {
        androidx.camera.core.CameraExecutor r0;
        androidx.camera.core.impl.CameraFactory r1;
        java.util.concurrent.ThreadPoolExecutor r2, $r5, $r7;
        java.lang.Object $r4, r9;
        boolean $z0;
        java.util.Set $r6;
        java.lang.Throwable $r8, r10;
        int i0, i1;

        r0 := @this: androidx.camera.core.CameraExecutor;

        r1 := @parameter0: androidx.camera.core.impl.CameraFactory;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = r0.<androidx.camera.core.CameraExecutor: java.lang.Object mExecutorLock>;

        r9 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>();

        if $z0 == 0 goto label2;

        $r7 = staticinvoke <androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor createExecutor()>();

        r0.<androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor> = $r7;

     label2:
        r2 = r0.<androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor>;

        exitmonitor r9;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r10 = $r8;

        exitmonitor r9;

     label5:
        throw r10;

     label6:
        $r6 = interfaceinvoke r1.<androidx.camera.core.impl.CameraFactory: java.util.Set getAvailableCameraIds()>();

        i0 = interfaceinvoke $r6.<java.util.Set: int size()>();

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(1, i0);

        virtualinvoke r2.<java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)>(i1);

        virtualinvoke r2.<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>(i1);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void deinit()
    {
        androidx.camera.core.CameraExecutor r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.ThreadPoolExecutor $r4, $r5;
        boolean $z0;

        r0 := @this: androidx.camera.core.CameraExecutor;

        $r3 = r0.<androidx.camera.core.CameraExecutor: java.lang.Object mExecutorLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>();

        if $z0 != 0 goto label2;

        $r5 = r0.<androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor>;

        virtualinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void execute(java.lang.Runnable)
    {
        androidx.camera.core.CameraExecutor r0;
        java.lang.Runnable r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r7;
        java.util.concurrent.ThreadPoolExecutor $r6;

        r0 := @this: androidx.camera.core.CameraExecutor;

        r1 := @parameter0: java.lang.Runnable;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = r0.<androidx.camera.core.CameraExecutor: java.lang.Object mExecutorLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor>;

        virtualinvoke $r6.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static java.util.concurrent.ThreadPoolExecutor createExecutor()
    {
        java.util.concurrent.ThreadPoolExecutor r0, $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;
        java.util.concurrent.TimeUnit $r3;
        java.util.concurrent.ThreadFactory $r4;
        java.util.concurrent.RejectedExecutionHandler $r5;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r4 = <androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadFactory THREAD_FACTORY>;

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(1, 1, 0L, $r3, $r2, $r4);

        r0 = $r1;

        $r5 = dynamicinvoke "rejectedExecution" <java.util.concurrent.RejectedExecutionHandler ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.CameraExecutor: void lambda$createExecutor$0(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>, methodtype: void __METHODTYPE__(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor));

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)>($r5);

        return r0;
    }

    private static void lambda$createExecutor$0(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)
    {
        java.lang.Runnable r0;
        java.util.concurrent.ThreadPoolExecutor r1;

        r0 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: java.util.concurrent.ThreadPoolExecutor;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CameraExecutor", "A rejected execution occurred in CameraExecutor!");

        return;
    }

    static void <clinit>()
    {
        androidx.camera.core.CameraExecutor$1 $r0;

        $r0 = new androidx.camera.core.CameraExecutor$1;

        specialinvoke $r0.<androidx.camera.core.CameraExecutor$1: void <init>()>();

        <androidx.camera.core.CameraExecutor: java.util.concurrent.ThreadFactory THREAD_FACTORY> = $r0;

        return;
    }

androidx.camera.core.CameraExecutor$1
<androidx.camera.core.CameraExecutor$1: java.lang.String THREAD_NAME_STEM>
<androidx.camera.core.CameraExecutor$1: java.util.concurrent.atomic.AtomicInteger mThreadId>
    void <init>()
    {
        androidx.camera.core.CameraExecutor$1 r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: androidx.camera.core.CameraExecutor$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<androidx.camera.core.CameraExecutor$1: java.util.concurrent.atomic.AtomicInteger mThreadId> = $r1;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        androidx.camera.core.CameraExecutor$1 r0;
        java.lang.Runnable r1;
        java.lang.Thread r2, $r3;
        java.lang.Object[] $r4;
        java.util.concurrent.atomic.AtomicInteger $r5;
        java.util.Locale $r6;
        int $i0;
        java.lang.Integer $r7;
        java.lang.String $r8;

        r0 := @this: androidx.camera.core.CameraExecutor$1;

        r1 := @parameter0: java.lang.Runnable;

        $r3 = new java.lang.Thread;

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>(r1);

        r2 = $r3;

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.<androidx.camera.core.CameraExecutor$1: java.util.concurrent.atomic.AtomicInteger mThreadId>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "CameraX-core_camera_%d", $r4);

        virtualinvoke r2.<java.lang.Thread: void setName(java.lang.String)>($r8);

        return r2;
    }

