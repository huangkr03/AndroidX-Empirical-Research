androidx.wear.tiles.manager.TileUiClient
<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.TileUiClient$Companion Companion>
<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>
<androidx.wear.tiles.manager.TileUiClient: android.view.ViewGroup parentView>
<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CompletableJob job>
<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CoroutineScope coroutineScope>
<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.checkers.TimelineChecker timelineChecker>
<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.connection.DefaultTileClient tilesConnection>
<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.timeline.TilesTimelineManager timelineManager>
<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.ResourceBuilders$Resources tileResources>
<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.UpdateScheduler updateScheduler>
<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.TileUiClient$updateReceiver$1 updateReceiver>
<androidx.wear.tiles.manager.TileUiClient: boolean isRunning>
<androidx.wear.tiles.manager.TileUiClient: java.lang.String ACTION_REQUEST_TILE_UPDATE>
    public void <init>(android.content.Context, android.content.ComponentName, android.view.ViewGroup)
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        android.content.Context r1, $r12, $r18;
        android.content.ComponentName r2;
        android.view.ViewGroup r3;
        kotlinx.coroutines.CompletableJob $r4, $r6;
        kotlinx.coroutines.MainCoroutineDispatcher $r5;
        kotlin.coroutines.CoroutineContext $r7, $r8;
        kotlinx.coroutines.CoroutineScope $r9, $r13;
        androidx.wear.tiles.checkers.TimelineChecker $r10;
        androidx.wear.tiles.connection.DefaultTileClient $r11;
        java.util.concurrent.ExecutorService $r14;
        kotlinx.coroutines.ExecutorCoroutineDispatcher $r15;
        kotlinx.coroutines.CoroutineDispatcher $r16;
        androidx.wear.tiles.manager.UpdateScheduler $r17;
        java.lang.Object $r19;
        android.app.AlarmManager $r20;
        androidx.wear.tiles.manager.UpdateScheduler$Clock $r21;
        androidx.wear.tiles.manager.TileUiClient$updateReceiver$1 $r22;

        r0 := @this: androidx.wear.tiles.manager.TileUiClient;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.ComponentName;

        r3 := @parameter2: android.view.ViewGroup;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "component");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "parentView");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context> = r1;

        r0.<androidx.wear.tiles.manager.TileUiClient: android.view.ViewGroup parentView> = r3;

        $r4 = staticinvoke <kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job,int,java.lang.Object)>(null, 1, null);

        r0.<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CompletableJob job> = $r4;

        $r5 = staticinvoke <kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()>();

        $r6 = r0.<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CompletableJob job>;

        $r7 = (kotlin.coroutines.CoroutineContext) $r6;

        $r8 = virtualinvoke $r5.<kotlinx.coroutines.MainCoroutineDispatcher: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r7);

        $r9 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)>($r8);

        r0.<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CoroutineScope coroutineScope> = $r9;

        $r10 = new androidx.wear.tiles.checkers.TimelineChecker;

        specialinvoke $r10.<androidx.wear.tiles.checkers.TimelineChecker: void <init>(java.util.List,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null);

        r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.checkers.TimelineChecker timelineChecker> = $r10;

        $r11 = new androidx.wear.tiles.connection.DefaultTileClient;

        $r12 = r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>;

        $r13 = r0.<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CoroutineScope coroutineScope>;

        $r14 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "newSingleThreadExecutor()");

        $r15 = staticinvoke <kotlinx.coroutines.ExecutorsKt: kotlinx.coroutines.ExecutorCoroutineDispatcher 'from'(java.util.concurrent.ExecutorService)>($r14);

        $r16 = (kotlinx.coroutines.CoroutineDispatcher) $r15;

        specialinvoke $r11.<androidx.wear.tiles.connection.DefaultTileClient: void <init>(android.content.Context,android.content.ComponentName,kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.CoroutineDispatcher)>($r12, r2, $r13, $r16);

        r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.connection.DefaultTileClient tilesConnection> = $r11;

        $r17 = new androidx.wear.tiles.manager.UpdateScheduler;

        $r18 = r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>;

        $r19 = virtualinvoke $r18.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AlarmManager;");

        $r20 = (android.app.AlarmManager) $r19;

        $r21 = dynamicinvoke "getElapsedTimeMillis" <androidx.wear.tiles.manager.UpdateScheduler$Clock ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: long __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <android.os.SystemClock: long elapsedRealtime()>, methodtype: long __METHODTYPE__());

        specialinvoke $r17.<androidx.wear.tiles.manager.UpdateScheduler: void <init>(android.app.AlarmManager,androidx.wear.tiles.manager.UpdateScheduler$Clock)>($r20, $r21);

        r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.UpdateScheduler updateScheduler> = $r17;

        $r22 = new androidx.wear.tiles.manager.TileUiClient$updateReceiver$1;

        specialinvoke $r22.<androidx.wear.tiles.manager.TileUiClient$updateReceiver$1: void <init>(androidx.wear.tiles.manager.TileUiClient)>(r0);

        r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.TileUiClient$updateReceiver$1 updateReceiver> = $r22;

        return;
    }

    public final void connect()
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        boolean $z0;
        androidx.wear.tiles.manager.TileUiClient$connect$1 $r1;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.jvm.functions.Function2 $r3;
        androidx.wear.tiles.manager.UpdateScheduler $r5, $r6;
        androidx.wear.tiles.manager.UpdateScheduler$UpdateReceiver $r7;

        r0 := @this: androidx.wear.tiles.manager.TileUiClient;

        $z0 = r0.<androidx.wear.tiles.manager.TileUiClient: boolean isRunning>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CoroutineScope coroutineScope>;

        $r1 = new androidx.wear.tiles.manager.TileUiClient$connect$1;

        specialinvoke $r1.<androidx.wear.tiles.manager.TileUiClient$connect$1: void <init>(androidx.wear.tiles.manager.TileUiClient,kotlin.coroutines.Continuation)>(r0, null);

        $r3 = (kotlin.jvm.functions.Function2) $r1;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r2, null, null, $r3, 3, null);

        $r5 = r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.UpdateScheduler updateScheduler>;

        virtualinvoke $r5.<androidx.wear.tiles.manager.UpdateScheduler: void enableUpdates()>();

        $r6 = r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.UpdateScheduler updateScheduler>;

        $r7 = dynamicinvoke "acceptUpdate" <androidx.wear.tiles.manager.UpdateScheduler$UpdateReceiver (androidx.wear.tiles.manager.TileUiClient)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.wear.tiles.manager.TileUiClient: void connect$lambda-0(androidx.wear.tiles.manager.TileUiClient)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r6.<androidx.wear.tiles.manager.UpdateScheduler: void setUpdateReceiver(androidx.wear.tiles.manager.UpdateScheduler$UpdateReceiver)>($r7);

        specialinvoke r0.<androidx.wear.tiles.manager.TileUiClient: void registerBroadcastReceiver()>();

        r0.<androidx.wear.tiles.manager.TileUiClient: boolean isRunning> = 1;

        return;
    }

    public void close()
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        boolean $z0;
        androidx.wear.tiles.manager.TileUiClient$updateReceiver$1 $r1;
        android.content.BroadcastReceiver $r2;
        android.content.Context $r3;
        kotlinx.coroutines.CompletableJob $r4;
        kotlinx.coroutines.Job $r5;
        androidx.wear.tiles.manager.UpdateScheduler $r6;
        androidx.wear.tiles.timeline.TilesTimelineManager $r7;

        r0 := @this: androidx.wear.tiles.manager.TileUiClient;

        $z0 = r0.<androidx.wear.tiles.manager.TileUiClient: boolean isRunning>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>;

        $r1 = r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.TileUiClient$updateReceiver$1 updateReceiver>;

        $r2 = (android.content.BroadcastReceiver) $r1;

        virtualinvoke $r3.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r2);

        $r4 = r0.<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CompletableJob job>;

        $r5 = (kotlinx.coroutines.Job) $r4;

        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r5, null, 1, null);

        $r6 = r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.UpdateScheduler updateScheduler>;

        virtualinvoke $r6.<androidx.wear.tiles.manager.UpdateScheduler: void disableUpdates()>();

        $r7 = r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.timeline.TilesTimelineManager timelineManager>;

        if $r7 == null goto label2;

        virtualinvoke $r7.<androidx.wear.tiles.timeline.TilesTimelineManager: void close()>();

        goto label2;

     label2:
        r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.timeline.TilesTimelineManager timelineManager> = null;

        r0.<androidx.wear.tiles.manager.TileUiClient: boolean isRunning> = 0;

        return;
    }

    private final java.lang.Object requestTile(androidx.wear.tiles.StateBuilders$State, kotlin.coroutines.Continuation)
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        androidx.wear.tiles.StateBuilders$State r1;
        kotlin.coroutines.Continuation $r2;
        androidx.wear.tiles.manager.TileUiClient$requestTile$2 $r3;
        kotlin.jvm.functions.Function2 $r4;
        java.lang.Object $r5, $r6;
        kotlin.Unit $r7;

        r0 := @this: androidx.wear.tiles.manager.TileUiClient;

        r1 := @parameter0: androidx.wear.tiles.StateBuilders$State;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.wear.tiles.manager.TileUiClient$requestTile$2;

        specialinvoke $r3.<androidx.wear.tiles.manager.TileUiClient$requestTile$2: void <init>(androidx.wear.tiles.StateBuilders$State,androidx.wear.tiles.manager.TileUiClient,kotlin.coroutines.Continuation)>(r1, r0, null);

        $r4 = (kotlin.jvm.functions.Function2) $r3;

        $r5 = staticinvoke <kotlinx.coroutines.CoroutineScopeKt: java.lang.Object coroutineScope(kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation)>($r4, $r2);

        $r6 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r5 != $r6 goto label1;

        return $r5;

     label1:
        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;
    }

    static java.lang.Object requestTile$default(androidx.wear.tiles.manager.TileUiClient, androidx.wear.tiles.StateBuilders$State, kotlin.coroutines.Continuation, int, java.lang.Object)
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        kotlin.coroutines.Continuation r1;
        int i0, $i1;
        java.lang.Object r2, $r3;
        androidx.wear.tiles.StateBuilders$State$Builder $r4;
        androidx.wear.tiles.StateBuilders$State $r5, r6;

        r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        r6 := @parameter1: androidx.wear.tiles.StateBuilders$State;

        r1 := @parameter2: kotlin.coroutines.Continuation;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r4 = new androidx.wear.tiles.StateBuilders$State$Builder;

        specialinvoke $r4.<androidx.wear.tiles.StateBuilders$State$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<androidx.wear.tiles.StateBuilders$State$Builder: androidx.wear.tiles.StateBuilders$State build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "Builder().build()");

        r6 = $r5;

     label1:
        $r3 = specialinvoke r0.<androidx.wear.tiles.manager.TileUiClient: java.lang.Object requestTile(androidx.wear.tiles.StateBuilders$State,kotlin.coroutines.Continuation)>(r6, r1);

        return $r3;
    }

    private final void updateContents(androidx.wear.tiles.LayoutElementBuilders$Layout)
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        androidx.wear.tiles.LayoutElementBuilders$Layout r1;
        androidx.wear.tiles.renderer.TileRenderer r2, $r5;
        android.view.View r3, $r12;
        android.view.ViewGroup $r4, $r11;
        androidx.wear.tiles.ResourceBuilders$Resources $r6;
        android.content.Context $r7, $r8;
        java.util.concurrent.Executor $r9;
        androidx.wear.tiles.renderer.TileRenderer$LoadActionListener $r10;
        android.view.ViewGroup$LayoutParams $r13;
        android.widget.FrameLayout$LayoutParams $r14;

        r0 := @this: androidx.wear.tiles.manager.TileUiClient;

        r1 := @parameter0: androidx.wear.tiles.LayoutElementBuilders$Layout;

        $r4 = r0.<androidx.wear.tiles.manager.TileUiClient: android.view.ViewGroup parentView>;

        virtualinvoke $r4.<android.view.ViewGroup: void removeAllViews()>();

        $r5 = new androidx.wear.tiles.renderer.TileRenderer;

        $r7 = r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>;

        $r6 = r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.ResourceBuilders$Resources tileResources>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6);

        $r8 = r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>;

        $r9 = staticinvoke <androidx.core.content.ContextCompat: java.util.concurrent.Executor getMainExecutor(android.content.Context)>($r8);

        $r10 = dynamicinvoke "onClick" <androidx.wear.tiles.renderer.TileRenderer$LoadActionListener (androidx.wear.tiles.manager.TileUiClient)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.wear.tiles.StateBuilders$State), methodhandle: "REF_INVOKE_STATIC" <androidx.wear.tiles.manager.TileUiClient: void updateContents$lambda-1(androidx.wear.tiles.manager.TileUiClient,androidx.wear.tiles.StateBuilders$State)>, methodtype: void __METHODTYPE__(androidx.wear.tiles.StateBuilders$State));

        specialinvoke $r5.<androidx.wear.tiles.renderer.TileRenderer: void <init>(android.content.Context,androidx.wear.tiles.LayoutElementBuilders$Layout,androidx.wear.tiles.ResourceBuilders$Resources,java.util.concurrent.Executor,androidx.wear.tiles.renderer.TileRenderer$LoadActionListener)>($r7, r1, $r6, $r9, $r10);

        r2 = $r5;

        $r11 = r0.<androidx.wear.tiles.manager.TileUiClient: android.view.ViewGroup parentView>;

        $r12 = virtualinvoke r2.<androidx.wear.tiles.renderer.TileRenderer: android.view.View inflate(android.view.ViewGroup)>($r11);

        if $r12 == null goto label1;

        r3 = $r12;

        $r13 = virtualinvoke r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r13, "null cannot be cast to non-null type android.widget.FrameLayout.LayoutParams");

        $r14 = (android.widget.FrameLayout$LayoutParams) $r13;

        $r14.<android.widget.FrameLayout$LayoutParams: int gravity> = 17;

        goto label1;

     label1:
        return;
    }

    private final void registerBroadcastReceiver()
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        android.content.IntentFilter r1, $r2;
        androidx.wear.tiles.manager.TileUiClient$updateReceiver$1 $r3;
        android.content.BroadcastReceiver $r4;
        android.content.Context $r5;

        r0 := @this: androidx.wear.tiles.manager.TileUiClient;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>(java.lang.String)>("androidx.wear.tiles.action.REQUEST_TILE_UPDATE");

        r1 = $r2;

        $r5 = r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>;

        $r3 = r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.TileUiClient$updateReceiver$1 updateReceiver>;

        $r4 = (android.content.BroadcastReceiver) $r3;

        virtualinvoke $r5.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r4, r1);

        return;
    }

    private final androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters buildDeviceParameters()
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        android.util.DisplayMetrics r1, $r4;
        boolean z0;
        android.content.Context $r2, $r5;
        android.content.res.Resources $r3, $r6;
        android.content.res.Configuration $r7;
        androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder $r8, $r9, $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters $r14;
        byte $b4;

        r0 := @this: androidx.wear.tiles.manager.TileUiClient;

        $r2 = r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "context.resources.displayMetrics");

        r1 = $r4;

        $r5 = r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        z0 = virtualinvoke $r7.<android.content.res.Configuration: boolean isScreenRound()>();

        $r8 = new androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder;

        specialinvoke $r8.<androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder: void <init>()>();

        $i0 = r1.<android.util.DisplayMetrics: int widthPixels>;

        $f1 = (float) $i0;

        $f0 = r1.<android.util.DisplayMetrics: float density>;

        $f2 = $f1 / $f0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f2);

        $r9 = virtualinvoke $r8.<androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder: androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder setScreenWidthDp(int)>($i1);

        $i2 = r1.<android.util.DisplayMetrics: int heightPixels>;

        $f4 = (float) $i2;

        $f3 = r1.<android.util.DisplayMetrics: float density>;

        $f5 = $f4 / $f3;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f5);

        $r10 = virtualinvoke $r9.<androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder: androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder setScreenHeightDp(int)>($i3);

        $f6 = r1.<android.util.DisplayMetrics: float density>;

        $r11 = virtualinvoke $r10.<androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder: androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder setScreenDensity(float)>($f6);

        if z0 == 0 goto label1;

        $b4 = 1;

        goto label2;

     label1:
        $b4 = 2;

     label2:
        $r12 = virtualinvoke $r11.<androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder: androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder setScreenShape(int)>($b4);

        $r13 = virtualinvoke $r12.<androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder: androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder setDevicePlatform(int)>(1);

        $r14 = virtualinvoke $r13.<androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters$Builder: androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters build()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r14, "Builder()\n            .s\u2026_OS)\n            .build()");

        return $r14;
    }

    private static final void connect$lambda-0(androidx.wear.tiles.manager.TileUiClient)
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        androidx.wear.tiles.manager.TileUiClient$connect$2$1 $r1;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.jvm.functions.Function2 $r3;

        r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r2 = r0.<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CoroutineScope coroutineScope>;

        $r1 = new androidx.wear.tiles.manager.TileUiClient$connect$2$1;

        specialinvoke $r1.<androidx.wear.tiles.manager.TileUiClient$connect$2$1: void <init>(androidx.wear.tiles.manager.TileUiClient,kotlin.coroutines.Continuation)>(r0, null);

        $r3 = (kotlin.jvm.functions.Function2) $r1;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r2, null, null, $r3, 3, null);

        return;
    }

    private static final void updateContents$lambda-1(androidx.wear.tiles.manager.TileUiClient, androidx.wear.tiles.StateBuilders$State)
    {
        androidx.wear.tiles.manager.TileUiClient r0;
        androidx.wear.tiles.StateBuilders$State r1;
        androidx.wear.tiles.manager.TileUiClient$updateContents$renderer$1$1 $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        kotlin.jvm.functions.Function2 $r4;

        r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        r1 := @parameter1: androidx.wear.tiles.StateBuilders$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        $r3 = r0.<androidx.wear.tiles.manager.TileUiClient: kotlinx.coroutines.CoroutineScope coroutineScope>;

        $r2 = new androidx.wear.tiles.manager.TileUiClient$updateContents$renderer$1$1;

        specialinvoke $r2.<androidx.wear.tiles.manager.TileUiClient$updateContents$renderer$1$1: void <init>(androidx.wear.tiles.manager.TileUiClient,androidx.wear.tiles.StateBuilders$State,kotlin.coroutines.Continuation)>(r0, r1, null);

        $r4 = (kotlin.jvm.functions.Function2) $r2;

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r3, null, null, $r4, 3, null);

        return;
    }

    public static final java.lang.Object access$requestTile(androidx.wear.tiles.manager.TileUiClient, androidx.wear.tiles.StateBuilders$State, kotlin.coroutines.Continuation)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.StateBuilders$State r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        r1 := @parameter1: androidx.wear.tiles.StateBuilders$State;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.wear.tiles.manager.TileUiClient: java.lang.Object requestTile(androidx.wear.tiles.StateBuilders$State,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters access$buildDeviceParameters(androidx.wear.tiles.manager.TileUiClient)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters $r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        $r1 = specialinvoke $r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.DeviceParametersBuilders$DeviceParameters buildDeviceParameters()>();

        return $r1;
    }

    public static final androidx.wear.tiles.connection.DefaultTileClient access$getTilesConnection$p(androidx.wear.tiles.manager.TileUiClient)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.connection.DefaultTileClient $r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        $r1 = $r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.connection.DefaultTileClient tilesConnection>;

        return $r1;
    }

    public static final void access$setTileResources$p(androidx.wear.tiles.manager.TileUiClient, androidx.wear.tiles.ResourceBuilders$Resources)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.ResourceBuilders$Resources r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        r1 := @parameter1: androidx.wear.tiles.ResourceBuilders$Resources;

        $r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.ResourceBuilders$Resources tileResources> = r1;

        return;
    }

    public static final androidx.wear.tiles.ResourceBuilders$Resources access$getTileResources$p(androidx.wear.tiles.manager.TileUiClient)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.ResourceBuilders$Resources $r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        $r1 = $r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.ResourceBuilders$Resources tileResources>;

        return $r1;
    }

    public static final androidx.wear.tiles.timeline.TilesTimelineManager access$getTimelineManager$p(androidx.wear.tiles.manager.TileUiClient)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.timeline.TilesTimelineManager $r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        $r1 = $r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.timeline.TilesTimelineManager timelineManager>;

        return $r1;
    }

    public static final androidx.wear.tiles.checkers.TimelineChecker access$getTimelineChecker$p(androidx.wear.tiles.manager.TileUiClient)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.checkers.TimelineChecker $r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        $r1 = $r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.checkers.TimelineChecker timelineChecker>;

        return $r1;
    }

    public static final android.content.Context access$getContext$p(androidx.wear.tiles.manager.TileUiClient)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        android.content.Context $r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        $r1 = $r0.<androidx.wear.tiles.manager.TileUiClient: android.content.Context context>;

        return $r1;
    }

    public static final void access$setTimelineManager$p(androidx.wear.tiles.manager.TileUiClient, androidx.wear.tiles.timeline.TilesTimelineManager)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.timeline.TilesTimelineManager r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        r1 := @parameter1: androidx.wear.tiles.timeline.TilesTimelineManager;

        $r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.timeline.TilesTimelineManager timelineManager> = r1;

        return;
    }

    public static final androidx.wear.tiles.manager.UpdateScheduler access$getUpdateScheduler$p(androidx.wear.tiles.manager.TileUiClient)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.manager.UpdateScheduler $r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        $r1 = $r0.<androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.UpdateScheduler updateScheduler>;

        return $r1;
    }

    public static final void access$updateContents(androidx.wear.tiles.manager.TileUiClient, androidx.wear.tiles.LayoutElementBuilders$Layout)
    {
        androidx.wear.tiles.manager.TileUiClient $r0;
        androidx.wear.tiles.LayoutElementBuilders$Layout r1;

        $r0 := @parameter0: androidx.wear.tiles.manager.TileUiClient;

        r1 := @parameter1: androidx.wear.tiles.LayoutElementBuilders$Layout;

        specialinvoke $r0.<androidx.wear.tiles.manager.TileUiClient: void updateContents(androidx.wear.tiles.LayoutElementBuilders$Layout)>(r1);

        return;
    }

    static void <clinit>()
    {
        androidx.wear.tiles.manager.TileUiClient$Companion $r0;

        $r0 = new androidx.wear.tiles.manager.TileUiClient$Companion;

        specialinvoke $r0.<androidx.wear.tiles.manager.TileUiClient$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.wear.tiles.manager.TileUiClient: androidx.wear.tiles.manager.TileUiClient$Companion Companion> = $r0;

        return;
    }

