android.databinding.tool.expr.MethodReferenceExpr
    void <init>(android.databinding.tool.expr.Expr, java.lang.String)
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;
        android.databinding.tool.expr.Expr r1;
        java.lang.String r2;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        r1 := @parameter0: android.databinding.tool.expr.Expr;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.databinding.tool.expr.MethodBaseExpr: void <init>(android.databinding.tool.expr.Expr,java.lang.String)>(r1, r2);

        return;
    }

    protected android.databinding.tool.reflection.ModelClass resolveType(android.databinding.tool.reflection.ModelAnalyzer)
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;
        android.databinding.tool.reflection.ModelAnalyzer r1;
        android.databinding.tool.reflection.ModelClass $r2;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        r1 := @parameter0: android.databinding.tool.reflection.ModelAnalyzer;

        $r2 = virtualinvoke r1.<android.databinding.tool.reflection.ModelAnalyzer: android.databinding.tool.reflection.ModelClass findClass(java.lang.Class)>(class "Ljava/lang/Object;");

        return $r2;
    }

    protected java.lang.String computeUniqueKey()
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;
        java.lang.Object[] $r1;
        android.databinding.tool.expr.Expr $r2;
        java.lang.String $r3, $r4;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = virtualinvoke r0.<android.databinding.tool.expr.MethodReferenceExpr: android.databinding.tool.expr.Expr getTarget()>();

        $r1[0] = $r2;

        $r1[1] = "::";

        $r3 = r0.<android.databinding.tool.expr.MethodReferenceExpr: java.lang.String mName>;

        $r1[2] = $r3;

        $r4 = staticinvoke <android.databinding.tool.expr.MethodReferenceExpr: java.lang.String join(java.lang.Object[])>($r1);

        return $r4;
    }

    public java.lang.String getInvertibleError()
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        return "Listeners do not support two-way binding";
    }

    public boolean isDynamic()
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        return 1;
    }

    public void injectSafeUnboxing(android.databinding.tool.reflection.ModelAnalyzer, android.databinding.tool.expr.ExprModel)
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;
        android.databinding.tool.reflection.ModelAnalyzer r1;
        android.databinding.tool.expr.ExprModel r2;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        r1 := @parameter0: android.databinding.tool.reflection.ModelAnalyzer;

        r2 := @parameter1: android.databinding.tool.expr.ExprModel;

        return;
    }

    public android.databinding.tool.expr.Expr resolveListeners(android.databinding.tool.reflection.ModelClass, android.databinding.tool.expr.Expr)
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;
        android.databinding.tool.reflection.ModelClass r1;
        android.databinding.tool.expr.Expr r2, $r4;
        java.lang.Throwable r3, $r5;
        java.lang.Object[] $r6;
        java.lang.String $r7;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        r1 := @parameter0: android.databinding.tool.reflection.ModelClass;

        r2 := @parameter1: android.databinding.tool.expr.Expr;

     label1:
        $r4 = virtualinvoke r0.<android.databinding.tool.expr.MethodReferenceExpr: android.databinding.tool.expr.Expr resolveListenersAsMethodReference(android.databinding.tool.reflection.ModelClass,android.databinding.tool.expr.Expr)>(r1, r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r3.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r6[0] = $r7;

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.String,java.lang.Object[])>("%s", $r6);

        return r0;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected android.databinding.tool.writer.KCode generateCode()
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;
        java.lang.Object[] $r1;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        staticinvoke <android.databinding.tool.util.Preconditions: void check(boolean,java.lang.String,java.lang.Object[])>(0, "Cannot generate code for unresolved method reference %s", $r1);

        return null;
    }

    public android.databinding.tool.expr.Expr generateInverse(android.databinding.tool.expr.ExprModel, android.databinding.tool.expr.Expr, java.lang.String)
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;
        android.databinding.tool.expr.ExprModel r1;
        android.databinding.tool.expr.Expr r2;
        java.lang.String r3;
        java.lang.Object[] $r4;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        r1 := @parameter0: android.databinding.tool.expr.ExprModel;

        r2 := @parameter1: android.databinding.tool.expr.Expr;

        r3 := @parameter2: java.lang.String;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void check(boolean,java.lang.String,java.lang.Object[])>(0, "Method references do not have an inverse", $r4);

        return r0;
    }

    public android.databinding.tool.expr.Expr cloneToModel(android.databinding.tool.expr.ExprModel)
    {
        android.databinding.tool.expr.MethodReferenceExpr r0, $r5;
        android.databinding.tool.expr.ExprModel r1;
        android.databinding.tool.expr.Expr r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        r1 := @parameter0: android.databinding.tool.expr.ExprModel;

        $r3 = virtualinvoke r0.<android.databinding.tool.expr.MethodReferenceExpr: android.databinding.tool.expr.Expr getTarget()>();

        r2 = virtualinvoke $r3.<android.databinding.tool.expr.Expr: android.databinding.tool.expr.Expr cloneToModel(android.databinding.tool.expr.ExprModel)>(r1);

        $r4 = r0.<android.databinding.tool.expr.MethodReferenceExpr: java.lang.String mName>;

        $r5 = virtualinvoke r1.<android.databinding.tool.expr.ExprModel: android.databinding.tool.expr.MethodReferenceExpr methodReference(android.databinding.tool.expr.Expr,java.lang.String)>(r2, $r4);

        return $r5;
    }

    public java.lang.String toString()
    {
        android.databinding.tool.expr.MethodReferenceExpr r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7;
        android.databinding.tool.expr.Expr $r2;
        java.lang.String $r3, $r6, $r8;

        r0 := @this: android.databinding.tool.expr.MethodReferenceExpr;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<android.databinding.tool.expr.MethodReferenceExpr: android.databinding.tool.expr.Expr getTarget()>();

        $r3 = virtualinvoke $r2.<android.databinding.tool.expr.Expr: java.lang.String toString()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r6 = r0.<android.databinding.tool.expr.MethodReferenceExpr: java.lang.String mName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

