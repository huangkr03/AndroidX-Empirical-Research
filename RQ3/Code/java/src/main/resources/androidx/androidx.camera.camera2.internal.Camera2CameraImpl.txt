androidx.camera.camera2.internal.Camera2CameraImpl
<androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String TAG>
<androidx.camera.camera2.internal.Camera2CameraImpl: int ERROR_NONE>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.compat.CameraManagerCompat mCameraManager>
<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.LiveDataObservable mObservableState>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CameraStateMachine mCameraStateMachine>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback mStateCallback>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal>
<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>
<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>
<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.atomic.AtomicInteger mReleaseRequestCount>
<androidx.camera.camera2.internal.Camera2CameraImpl: com.google.common.util.concurrent.ListenableFuture mUserReleaseFuture>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mUserReleaseNotifier>
<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Map mReleasedCaptureSessions>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability mCameraAvailability>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraStateRegistry mCameraStateRegistry>
<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mConfiguringForClose>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder mCaptureSessionOpenerBuilder>
<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mNotifyStateAttachedSet>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraConfig mCameraConfig>
<androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.Object mLock>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.SessionProcessor mSessionProcessor>
<androidx.camera.camera2.internal.Camera2CameraImpl: boolean mIsActiveResumingMode>
<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.DisplayInfoManager mDisplayInfoManager>
    void <init>(androidx.camera.camera2.internal.compat.CameraManagerCompat, java.lang.String, androidx.camera.camera2.internal.Camera2CameraInfoImpl, androidx.camera.core.impl.CameraStateRegistry, java.util.concurrent.Executor, android.os.Handler, androidx.camera.camera2.internal.DisplayInfoManager) throws androidx.camera.core.CameraUnavailableException
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.compat.CameraManagerCompat r1, $r29, $r52;
        java.lang.String r2;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl r3, $r36, $r38;
        androidx.camera.core.impl.CameraStateRegistry r4, $r49;
        java.util.concurrent.Executor r5, $r18, $r21, $r27, $r33, $r41, $r48, $r51;
        android.os.Handler r6;
        androidx.camera.camera2.internal.DisplayInfoManager r7;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat r8;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r9;
        androidx.camera.core.impl.CameraConfig $r15;
        java.util.concurrent.ScheduledExecutorService $r17, $r20, $r32, $r42;
        androidx.camera.core.impl.CameraInternal$State $r23;
        androidx.camera.core.impl.LiveDataObservable $r24, r53;
        androidx.camera.camera2.internal.CaptureSessionInterface $r28;
        androidx.camera.core.impl.Quirks $r34, $r44, $r45;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r35, r64;
        androidx.camera.camera2.internal.CameraStateMachine $r37, r61;
        androidx.lifecycle.LiveData $r39;
        androidx.camera.camera2.internal.CaptureSessionRepository $r43, r62;
        androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability $r47, $r50, r66;
        java.util.concurrent.atomic.AtomicInteger r54;
        java.util.LinkedHashMap r55;
        java.util.HashSet r56, r57;
        java.lang.Object r58;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r59;
        androidx.camera.core.impl.UseCaseAttachState r60;
        androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal r63;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder r65;
        androidx.camera.core.Camera r67;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.CameraManagerCompat;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: androidx.camera.camera2.internal.Camera2CameraInfoImpl;

        r4 := @parameter3: androidx.camera.core.impl.CameraStateRegistry;

        r5 := @parameter4: java.util.concurrent.Executor;

        r6 := @parameter5: android.os.Handler;

        r7 := @parameter6: androidx.camera.camera2.internal.DisplayInfoManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r9 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState INITIALIZED>;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState> = $r9;

        r53 = new androidx.camera.core.impl.LiveDataObservable;

        specialinvoke r53.<androidx.camera.core.impl.LiveDataObservable: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.LiveDataObservable mObservableState> = r53;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError> = 0;

        r54 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r54.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.atomic.AtomicInteger mReleaseRequestCount> = r54;

        r55 = new java.util.LinkedHashMap;

        specialinvoke r55.<java.util.LinkedHashMap: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Map mReleasedCaptureSessions> = r55;

        r56 = new java.util.HashSet;

        specialinvoke r56.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mConfiguringForClose> = r56;

        r57 = new java.util.HashSet;

        specialinvoke r57.<java.util.HashSet: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mNotifyStateAttachedSet> = r57;

        $r15 = staticinvoke <androidx.camera.core.impl.CameraConfigs: androidx.camera.core.impl.CameraConfig emptyConfig()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraConfig mCameraConfig> = $r15;

        r58 = new java.lang.Object;

        specialinvoke r58.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.Object mLock> = r58;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean mIsActiveResumingMode> = 0;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.compat.CameraManagerCompat mCameraManager> = r1;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraStateRegistry mCameraStateRegistry> = r4;

        $r17 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService newHandlerExecutor(android.os.Handler)>(r6);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService> = $r17;

        $r18 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor newSequentialExecutor(java.util.concurrent.Executor)>(r5);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor> = $r18;

        r59 = new androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        $r21 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r20 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        specialinvoke r59.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: void <init>(androidx.camera.camera2.internal.Camera2CameraImpl,java.util.concurrent.Executor,java.util.concurrent.ScheduledExecutorService)>(r0, $r21, $r20);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback mStateCallback> = r59;

        r60 = new androidx.camera.core.impl.UseCaseAttachState;

        specialinvoke r60.<androidx.camera.core.impl.UseCaseAttachState: void <init>(java.lang.String)>(r2);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState> = r60;

        $r24 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.LiveDataObservable mObservableState>;

        $r23 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State CLOSED>;

        virtualinvoke $r24.<androidx.camera.core.impl.LiveDataObservable: void postValue(java.lang.Object)>($r23);

        r61 = new androidx.camera.camera2.internal.CameraStateMachine;

        specialinvoke r61.<androidx.camera.camera2.internal.CameraStateMachine: void <init>(androidx.camera.core.impl.CameraStateRegistry)>(r4);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CameraStateMachine mCameraStateMachine> = r61;

        r62 = new androidx.camera.camera2.internal.CaptureSessionRepository;

        $r27 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        specialinvoke r62.<androidx.camera.camera2.internal.CaptureSessionRepository: void <init>(java.util.concurrent.Executor)>($r27);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository> = r62;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.DisplayInfoManager mDisplayInfoManager> = r7;

        $r28 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface newCaptureSession()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession> = $r28;

        $r29 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.compat.CameraManagerCompat mCameraManager>;

        r8 = virtualinvoke $r29.<androidx.camera.camera2.internal.compat.CameraManagerCompat: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat getCameraCharacteristicsCompat(java.lang.String)>(r2);

        r64 = new androidx.camera.camera2.internal.Camera2CameraControlImpl;

        $r32 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r33 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        r63 = new androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal;

        specialinvoke r63.<androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal: void <init>(androidx.camera.camera2.internal.Camera2CameraImpl)>(r0);

        $r34 = virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CameraInfoImpl: androidx.camera.core.impl.Quirks getCameraQuirks()>();

        specialinvoke r64.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,java.util.concurrent.ScheduledExecutorService,java.util.concurrent.Executor,androidx.camera.core.impl.CameraControlInternal$ControlUpdateCallback,androidx.camera.core.impl.Quirks)>(r8, $r32, $r33, r63, $r34);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal> = r64;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal> = r3;

        $r36 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal>;

        $r35 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r36.<androidx.camera.camera2.internal.Camera2CameraInfoImpl: void linkWithCameraControl(androidx.camera.camera2.internal.Camera2CameraControlImpl)>($r35);

        $r38 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal>;

        $r37 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CameraStateMachine mCameraStateMachine>;

        $r39 = virtualinvoke $r37.<androidx.camera.camera2.internal.CameraStateMachine: androidx.lifecycle.LiveData getStateLiveData()>();

        virtualinvoke $r38.<androidx.camera.camera2.internal.Camera2CameraInfoImpl: void setCameraStateSource(androidx.lifecycle.LiveData)>($r39);

        goto label1;

     label1:
        r65 = new androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder;

        $r41 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r42 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $r43 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        $r44 = virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CameraInfoImpl: androidx.camera.core.impl.Quirks getCameraQuirks()>();

        $r45 = staticinvoke <androidx.camera.camera2.internal.compat.quirk.DeviceQuirks: androidx.camera.core.impl.Quirks getAll()>();

        specialinvoke r65.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: void <init>(java.util.concurrent.Executor,java.util.concurrent.ScheduledExecutorService,android.os.Handler,androidx.camera.camera2.internal.CaptureSessionRepository,androidx.camera.core.impl.Quirks,androidx.camera.core.impl.Quirks)>($r41, $r42, r6, $r43, $r44, $r45);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder mCaptureSessionOpenerBuilder> = r65;

        r66 = new androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability;

        specialinvoke r66.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: void <init>(androidx.camera.camera2.internal.Camera2CameraImpl,java.lang.String)>(r0, r2);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability mCameraAvailability> = r66;

        $r49 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraStateRegistry mCameraStateRegistry>;

        $r48 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r47 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability mCameraAvailability>;

        r67 = (androidx.camera.core.Camera) r0;

        virtualinvoke $r49.<androidx.camera.core.impl.CameraStateRegistry: void registerCamera(androidx.camera.core.Camera,java.util.concurrent.Executor,androidx.camera.core.impl.CameraStateRegistry$OnOpenAvailableListener)>(r67, $r48, $r47);

        $r52 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.compat.CameraManagerCompat mCameraManager>;

        $r51 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r50 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability mCameraAvailability>;

        virtualinvoke $r52.<androidx.camera.camera2.internal.compat.CameraManagerCompat: void registerAvailabilityCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$AvailabilityCallback)>($r51, $r50);

        return;
    }

    private androidx.camera.camera2.internal.CaptureSessionInterface newCaptureSession()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r11;
        androidx.camera.core.impl.SessionProcessor $r4, $r9;
        androidx.camera.camera2.internal.ProcessingCaptureSession $r5;
        java.util.concurrent.ScheduledExecutorService $r6;
        java.util.concurrent.Executor $r7;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl $r8;
        androidx.camera.camera2.internal.CaptureSession $r10;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.SessionProcessor mSessionProcessor>;

        if $r4 != null goto label3;

        $r10 = new androidx.camera.camera2.internal.CaptureSession;

        specialinvoke $r10.<androidx.camera.camera2.internal.CaptureSession: void <init>()>();

        exitmonitor r1;

     label2:
        return $r10;

     label3:
        $r5 = new androidx.camera.camera2.internal.ProcessingCaptureSession;

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.SessionProcessor mSessionProcessor>;

        $r8 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal>;

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        specialinvoke $r5.<androidx.camera.camera2.internal.ProcessingCaptureSession: void <init>(androidx.camera.core.impl.SessionProcessor,androidx.camera.camera2.internal.Camera2CameraInfoImpl,java.util.concurrent.Executor,java.util.concurrent.ScheduledExecutorService)>($r9, $r8, $r7, $r6);

        exitmonitor r1;

     label4:
        return $r5;

     label5:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void open()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void openInternal()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void openInternal()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r1, $r3, $r5, $r8;
        int[] $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        android.hardware.camera2.CameraDevice $r4;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r10;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r2 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $i0 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            default: goto label5;
        };

     label1:
        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void tryForceOpenCameraDevice(boolean)>(0);

        goto label6;

     label2:
        $r3 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r3);

        $z0 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean isSessionCloseComplete()>();

        if $z0 != 0 goto label6;

        $i2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        if $i2 != 0 goto label6;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        if $r4 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Camera Device should be open if session close is not complete");

        $r5 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r5);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void openCaptureSession()>();

        goto label6;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("open() ignored due to being in state: ");

        $r8 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r10);

     label6:
        return;
    }

    public void close()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void closeInternal()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void closeInternal()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        boolean z0, $z1, $z2;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r1, $r4, $r5, $r7, $r10;
        int[] $r2;
        int $i0, $i1;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback $r3;
        android.hardware.camera2.CameraDevice $r6;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("Closing camera.");

        $r2 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $i0 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 2: goto label3;
            case 3: goto label6;
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label2;
            default: goto label6;
        };

     label1:
        $r5 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r5);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void closeCamera(boolean)>(0);

        goto label7;

     label2:
        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback mStateCallback>;

        z0 = virtualinvoke $r3.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: boolean cancelScheduledReopen()>();

        $r4 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r4);

        if z0 == 0 goto label7;

        $z1 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean isSessionCloseComplete()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z1);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void finishClose()>();

        goto label7;

     label3:
        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        if $r6 != null goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z2);

        $r7 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState INITIALIZED>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r7);

        goto label7;

     label6:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close() ignored due to being in state: ");

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r12);

     label7:
        return;
    }

    private void configAndClose(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        boolean z0;
        androidx.camera.camera2.internal.CaptureSession r1, $r8;
        android.graphics.SurfaceTexture r2, $r10;
        android.view.Surface r3, $r11;
        java.lang.Runnable r4, $r22;
        androidx.camera.core.impl.SessionConfig$Builder r5, $r12;
        androidx.camera.core.impl.ImmediateSurface r6, $r13;
        com.google.common.util.concurrent.ListenableFuture r7;
        java.util.Set $r9;
        androidx.camera.core.impl.SessionConfig $r16;
        android.hardware.camera2.CameraDevice $r17, $r20;
        java.lang.Object $r18;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder $r19;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener $r21;
        java.util.concurrent.Executor $r23;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        z0 := @parameter0: boolean;

        $r8 = new androidx.camera.camera2.internal.CaptureSession;

        specialinvoke $r8.<androidx.camera.camera2.internal.CaptureSession: void <init>()>();

        r1 = $r8;

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mConfiguringForClose>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r1);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void resetCaptureSession(boolean)>(z0);

        $r10 = new android.graphics.SurfaceTexture;

        specialinvoke $r10.<android.graphics.SurfaceTexture: void <init>(int)>(0);

        r2 = $r10;

        virtualinvoke r2.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>(640, 480);

        $r11 = new android.view.Surface;

        specialinvoke $r11.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>(r2);

        r3 = $r11;

        r4 = dynamicinvoke "run" <java.lang.Runnable (android.view.Surface,android.graphics.SurfaceTexture)>(r3, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$configAndClose$0(android.view.Surface,android.graphics.SurfaceTexture)>, methodtype: void __METHODTYPE__());

        $r12 = new androidx.camera.core.impl.SessionConfig$Builder;

        specialinvoke $r12.<androidx.camera.core.impl.SessionConfig$Builder: void <init>()>();

        r5 = $r12;

        $r13 = new androidx.camera.core.impl.ImmediateSurface;

        specialinvoke $r13.<androidx.camera.core.impl.ImmediateSurface: void <init>(android.view.Surface)>(r3);

        r6 = $r13;

        virtualinvoke r5.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addNonRepeatingSurface(androidx.camera.core.impl.DeferrableSurface)>(r6);

        virtualinvoke r5.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setTemplateType(int)>(1);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("Start configAndClose.");

        $r16 = virtualinvoke r5.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig build()>();

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        $r18 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r17);

        $r20 = (android.hardware.camera2.CameraDevice) $r18;

        $r19 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder mCaptureSessionOpenerBuilder>;

        $r21 = virtualinvoke $r19.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener build()>();

        r7 = virtualinvoke r1.<androidx.camera.camera2.internal.CaptureSession: com.google.common.util.concurrent.ListenableFuture open(androidx.camera.core.impl.SessionConfig,android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener)>($r16, $r20, $r21);

        $r22 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,androidx.camera.camera2.internal.CaptureSession,androidx.camera.core.impl.DeferrableSurface,java.lang.Runnable)>(r0, r1, r6, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$configAndClose$1(androidx.camera.camera2.internal.CaptureSession,androidx.camera.core.impl.DeferrableSurface,java.lang.Runnable)>, methodtype: void __METHODTYPE__());

        $r23 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        interfaceinvoke r7.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r22, $r23);

        return;
    }

    void releaseNoOpSession(androidx.camera.camera2.internal.CaptureSession, androidx.camera.core.impl.DeferrableSurface, java.lang.Runnable)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.CaptureSession r1;
        androidx.camera.core.impl.DeferrableSurface r2;
        java.lang.Runnable r3;
        com.google.common.util.concurrent.ListenableFuture r4, $r7, $r9;
        java.util.Set $r5;
        com.google.common.util.concurrent.ListenableFuture[] $r6;
        java.util.List $r8;
        java.util.concurrent.Executor $r10;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSession;

        r2 := @parameter1: androidx.camera.core.impl.DeferrableSurface;

        r3 := @parameter2: java.lang.Runnable;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mConfiguringForClose>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        r4 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: com.google.common.util.concurrent.ListenableFuture releaseSession(androidx.camera.camera2.internal.CaptureSessionInterface,boolean)>(r1, 0);

        virtualinvoke r2.<androidx.camera.core.impl.DeferrableSurface: void close()>();

        $r6 = newarray (com.google.common.util.concurrent.ListenableFuture)[2];

        $r6[0] = r4;

        $r7 = virtualinvoke r2.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r6[1] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r9 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture successfulAsList(java.util.Collection)>($r8);

        $r10 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r9.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r3, $r10);

        return;
    }

    boolean isSessionCloseComplete()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.Map $r1;
        boolean $z0, $z1, $z2;
        java.util.Set $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Map mReleasedCaptureSessions>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mConfiguringForClose>;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    void finishClose()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r1, $r2, $r4, $r5, $r8, $r11, $r12, $r13;
        java.util.Map $r3;
        boolean $z0, $z2;
        androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability $r6;
        androidx.camera.camera2.internal.compat.CameraManagerCompat $r7;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r9, $r10;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r1 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASING>;

        if $r2 == $r1 goto label1;

        $r13 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r12 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING>;

        if $r13 != $r12 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z2);

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Map mReleasedCaptureSessions>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z0);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice> = null;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r4 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING>;

        if $r5 != $r4 goto label4;

        $r11 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState INITIALIZED>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r11);

        goto label5;

     label4:
        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.compat.CameraManagerCompat mCameraManager>;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability mCameraAvailability>;

        virtualinvoke $r7.<androidx.camera.camera2.internal.compat.CameraManagerCompat: void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)>($r6);

        $r8 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASED>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r8);

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mUserReleaseNotifier>;

        if $r9 == null goto label5;

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mUserReleaseNotifier>;

        virtualinvoke $r10.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mUserReleaseNotifier> = null;

     label5:
        return;
    }

    void closeCamera(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        boolean z0, $z1, $z2;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r1, $r2, $r3, $r4, $r5, $r6, $r9;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r13, $r14;
        java.lang.String $r12, $r15;
        androidx.camera.camera2.internal.CaptureSessionInterface $r16;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r1 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING>;

        if $r2 == $r1 goto label1;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r3 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASING>;

        if $r4 == $r3 goto label1;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r5 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING>;

        if $r6 != $r5 goto label2;

        $i2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        if $i2 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("closeCamera should only be called in a CLOSING, RELEASING or REOPENING (with error) state. Current state: ");

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (error: ");

        $i3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        $r12 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getErrorMessage(int)>($i3);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z2, $r15);

        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 <= 23 goto label4;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 29 goto label4;

        $z1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean isLegacyDevice()>();

        if $z1 == 0 goto label4;

        $i1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        if $i1 != 0 goto label4;

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void configAndClose(boolean)>(z0);

        goto label5;

     label4:
        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void resetCaptureSession(boolean)>(z0);

     label5:
        $r16 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>;

        interfaceinvoke $r16.<androidx.camera.camera2.internal.CaptureSessionInterface: void cancelIssuedCaptureRequests()>();

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture release()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.Camera2CameraImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.Object lambda$release$3(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r1);

        return $r2;
    }

    private com.google.common.util.concurrent.ListenableFuture releaseInternal()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        boolean z0, $z1, $z2, $z3;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r2, $r4, $r6, $r8, $r11;
        int[] $r3;
        int $i0, $i1;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback $r5;
        android.hardware.camera2.CameraDevice $r7;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r13;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: com.google.common.util.concurrent.ListenableFuture getOrCreateUserReleaseFuture()>();

        $r3 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $i0 = virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label5;
            case 7: goto label5;
            default: goto label6;
        };

     label1:
        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        if $r7 != null goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z3);

        $r8 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASING>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r8);

        $z2 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean isSessionCloseComplete()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z2);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void finishClose()>();

        goto label7;

     label4:
        $r4 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASING>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r4);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void closeCamera(boolean)>(0);

        goto label7;

     label5:
        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback mStateCallback>;

        z0 = virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: boolean cancelScheduledReopen()>();

        $r6 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASING>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r6);

        if z0 == 0 goto label7;

        $z1 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean isSessionCloseComplete()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z1);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void finishClose()>();

        goto label7;

     label6:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("release() ignored due to being in state: ");

        $r11 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r13);

     label7:
        return r1;
    }

    private com.google.common.util.concurrent.ListenableFuture getOrCreateUserReleaseFuture()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        com.google.common.util.concurrent.ListenableFuture $r1, $r4, $r6, $r7;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r2, $r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: com.google.common.util.concurrent.ListenableFuture mUserReleaseFuture>;

        if $r1 != null goto label2;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r2 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASED>;

        if $r3 == $r2 goto label1;

        $r5 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.Camera2CameraImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.Object lambda$getOrCreateUserReleaseFuture$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r6 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r5);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: com.google.common.util.concurrent.ListenableFuture mUserReleaseFuture> = $r6;

        goto label2;

     label1:
        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: com.google.common.util.concurrent.ListenableFuture mUserReleaseFuture> = $r4;

     label2:
        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: com.google.common.util.concurrent.ListenableFuture mUserReleaseFuture>;

        return $r7;
    }

    com.google.common.util.concurrent.ListenableFuture releaseSession(androidx.camera.camera2.internal.CaptureSessionInterface, boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.CaptureSessionInterface r1;
        boolean z0;
        com.google.common.util.concurrent.ListenableFuture r2;
        java.lang.StringBuilder $r3, $r4, $r7;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r5;
        java.lang.String $r6, $r8;
        java.util.Map $r9;
        androidx.camera.camera2.internal.Camera2CameraImpl$1 $r11;
        java.util.concurrent.Executor $r12;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSessionInterface;

        z0 := @parameter1: boolean;

        interfaceinvoke r1.<androidx.camera.camera2.internal.CaptureSessionInterface: void close()>();

        r2 = interfaceinvoke r1.<androidx.camera.camera2.internal.CaptureSessionInterface: com.google.common.util.concurrent.ListenableFuture release(boolean)>(z0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing session in state ");

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r6 = virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: java.lang.String name()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r8);

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Map mReleasedCaptureSessions>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r11 = new androidx.camera.camera2.internal.Camera2CameraImpl$1;

        specialinvoke $r11.<androidx.camera.camera2.internal.Camera2CameraImpl$1: void <init>(androidx.camera.camera2.internal.Camera2CameraImpl,androidx.camera.camera2.internal.CaptureSessionInterface)>(r0, r1);

        $r12 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>(r2, $r11, $r12);

        return r2;
    }

    public androidx.camera.core.impl.Observable getCameraState()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.LiveDataObservable $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.LiveDataObservable mObservableState>;

        return $r1;
    }

    public void onUseCaseActive(androidx.camera.core.UseCase)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.UseCase r1;
        java.lang.String r2;
        androidx.camera.core.impl.SessionConfig r3;
        androidx.camera.core.impl.UseCaseConfig r4;
        java.util.concurrent.Executor $r6;
        java.lang.Runnable $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.core.UseCase;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getUseCaseId(androidx.camera.core.UseCase)>(r1);

        r3 = virtualinvoke r1.<androidx.camera.core.UseCase: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        r4 = virtualinvoke r1.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>(r0, r2, r3, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$onUseCaseActive$5(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        return;
    }

    public void onUseCaseInactive(androidx.camera.core.UseCase)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.UseCase r1;
        java.lang.String r2;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.core.UseCase;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getUseCaseId(androidx.camera.core.UseCase)>(r1);

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,java.lang.String)>(r0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$onUseCaseInactive$6(java.lang.String)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return;
    }

    public void onUseCaseUpdated(androidx.camera.core.UseCase)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.UseCase r1;
        java.lang.String r2;
        androidx.camera.core.impl.SessionConfig r3;
        androidx.camera.core.impl.UseCaseConfig r4;
        java.util.concurrent.Executor $r6;
        java.lang.Runnable $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.core.UseCase;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getUseCaseId(androidx.camera.core.UseCase)>(r1);

        r3 = virtualinvoke r1.<androidx.camera.core.UseCase: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        r4 = virtualinvoke r1.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>(r0, r2, r3, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$onUseCaseUpdated$7(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        return;
    }

    public void onUseCaseReset(androidx.camera.core.UseCase)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.UseCase r1;
        java.lang.String r2;
        androidx.camera.core.impl.SessionConfig r3;
        androidx.camera.core.impl.UseCaseConfig r4;
        java.util.concurrent.Executor $r6;
        java.lang.Runnable $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.core.UseCase;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getUseCaseId(androidx.camera.core.UseCase)>(r1);

        r3 = virtualinvoke r1.<androidx.camera.core.UseCase: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        r4 = virtualinvoke r1.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>(r0, r2, r3, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$onUseCaseReset$8(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        return;
    }

    boolean isUseCaseAttached(androidx.camera.core.UseCase)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.UseCase r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.lang.Throwable $r6, r9;
        java.lang.RuntimeException $r7;
        java.lang.String r8;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.core.UseCase;

     label1:
        r8 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getUseCaseId(androidx.camera.core.UseCase)>(r1);

        $r2 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.Camera2CameraImpl,java.lang.String)>(r0, r8) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.Object lambda$isUseCaseAttached$10(java.lang.String,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r3 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r2);

        $r4 = interfaceinvoke $r3.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r9 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to check if use case is attached.", r9);

        throw $r7;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public void attachUseCases(java.util.Collection)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.Collection r1, $r9;
        java.util.ArrayList r2, r3, $r5, $r7, $r8;
        java.lang.Throwable r4, $r12;
        boolean $z0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r6, $r13;
        java.util.concurrent.Executor $r10;
        java.lang.Runnable $r11;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.Collection;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r2 = $r5;

        $z0 = interfaceinvoke r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r6.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void incrementUseCount()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void notifyStateAttachedToUseCases(java.util.List)>($r7);

        $r8 = new java.util.ArrayList;

        $r9 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Collection toUseCaseInfos(java.util.Collection)>(r2);

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        r3 = $r8;

     label2:
        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r11 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,java.util.List)>(r0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$attachUseCases$11(java.util.List)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r11);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String,java.lang.Throwable)>("Unable to attach use cases.", r4);

        $r13 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r13.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void decrementUseCount()>();

     label5:
        return;

        catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
    }

    private void tryAttachUseCases(java.util.Collection)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.Collection r1, $r7;
        boolean z0, $z1, $z2, $z3;
        java.util.ArrayList r2, $r8;
        java.util.Iterator r3;
        androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo r4;
        android.util.Size r5;
        androidx.camera.core.impl.UseCaseAttachState $r6, $r21, $r23;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;
        java.lang.String $r11, $r14, $r22, $r24, $r27;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r15, $r16;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r17, $r18, $r19;
        java.lang.Object $r20;
        androidx.camera.core.impl.SessionConfig $r25;
        androidx.camera.core.impl.UseCaseConfig $r26;
        java.lang.Class $r28;
        android.util.Rational $r29, r30;
        int $i0, $i1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.Collection;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r7 = virtualinvoke $r6.<androidx.camera.core.impl.UseCaseAttachState: java.util.Collection getAttachedSessionConfigs()>();

        z0 = interfaceinvoke $r7.<java.util.Collection: boolean isEmpty()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        r30 = null;

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r20 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo) $r20;

        $r21 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r22 = virtualinvoke r4.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.String getUseCaseId()>();

        $z3 = virtualinvoke $r21.<androidx.camera.core.impl.UseCaseAttachState: boolean isUseCaseAttached(java.lang.String)>($r22);

        if $z3 != 0 goto label2;

        $r23 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r24 = virtualinvoke r4.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.String getUseCaseId()>();

        $r25 = virtualinvoke r4.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        $r26 = virtualinvoke r4.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

        virtualinvoke $r23.<androidx.camera.core.impl.UseCaseAttachState: void setUseCaseAttached(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>($r24, $r25, $r26);

        $r27 = virtualinvoke r4.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.String getUseCaseId()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r27);

        $r28 = virtualinvoke r4.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.Class getUseCaseType()>();

        if $r28 != class "Landroidx/camera/core/Preview;" goto label2;

        r5 = virtualinvoke r4.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: android.util.Size getSurfaceResolution()>();

        if r5 == null goto label2;

        $r29 = new android.util.Rational;

        $i0 = virtualinvoke r5.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r5.<android.util.Size: int getHeight()>();

        specialinvoke $r29.<android.util.Rational: void <init>(int,int)>($i0, $i1);

        r30 = $r29;

     label2:
        goto label1;

     label3:
        $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label4;

        return;

     label4:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Use cases [");

        $r11 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", r2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] now ATTACHED");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r14);

        if z0 == 0 goto label5;

        $r18 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r18.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void setActive(boolean)>(1);

        $r19 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r19.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void incrementUseCount()>();

     label5:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void addOrRemoveMeteringRepeatingUseCase()>();

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void updateZslDisabledByUseCaseConfigStatus()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void updateCaptureSessionConfig()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void resetCaptureSession(boolean)>(0);

        $r16 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r15 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        if $r16 != $r15 goto label6;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void openCaptureSession()>();

        goto label7;

     label6:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void openInternal()>();

     label7:
        if r30 == null goto label8;

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r17.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void setPreviewAspectRatio(android.util.Rational)>(r30);

     label8:
        return;
    }

    private java.util.Collection toUseCaseInfos(java.util.Collection)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.Collection r1;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        androidx.camera.core.UseCase r4;
        boolean $z0;
        java.lang.Object $r6;
        androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.Collection;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.core.UseCase) $r6;

        $r7 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo 'from'(androidx.camera.core.UseCase)>(r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return r2;
    }

    public void setExtendedConfig(androidx.camera.core.impl.CameraConfig)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.SessionProcessor r1;
        java.lang.Object r2, $r3;
        androidx.camera.core.impl.CameraConfig r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r4 := @parameter0: androidx.camera.core.impl.CameraConfig;

        if r4 != null goto label1;

        r4 = staticinvoke <androidx.camera.core.impl.CameraConfigs: androidx.camera.core.impl.CameraConfig emptyConfig()>();

     label1:
        r1 = interfaceinvoke r4.<androidx.camera.core.impl.CameraConfig: androidx.camera.core.impl.SessionProcessor getSessionProcessor(androidx.camera.core.impl.SessionProcessor)>(null);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraConfig mCameraConfig> = r4;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.Object mLock>;

        r2 = $r3;

        entermonitor $r3;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.SessionProcessor mSessionProcessor> = r1;

        exitmonitor r2;

        goto label2;

     label2:
        return;
    }

    public androidx.camera.core.impl.CameraConfig getExtendedConfig()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.CameraConfig $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraConfig mCameraConfig>;

        return $r1;
    }

    private void notifyStateAttachedToUseCases(java.util.List)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.List r1;
        java.util.Iterator r2;
        androidx.camera.core.UseCase r3;
        java.lang.String r4;
        java.lang.Object $r5;
        java.util.Set $r6, $r7;
        boolean $z0, $z2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.UseCase) $r5;

        r4 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getUseCaseId(androidx.camera.core.UseCase)>(r3);

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mNotifyStateAttachedSet>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mNotifyStateAttachedSet>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r4);

        virtualinvoke r3.<androidx.camera.core.UseCase: void onStateAttached()>();

        goto label1;

     label3:
        return;
    }

    private void notifyStateDetachedToUseCases(java.util.List)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.List r1;
        java.util.Iterator r2;
        androidx.camera.core.UseCase r3;
        java.lang.String r4;
        java.lang.Object $r5;
        java.util.Set $r6, $r7;
        boolean $z0, $z2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.UseCase) $r5;

        r4 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getUseCaseId(androidx.camera.core.UseCase)>(r3);

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mNotifyStateAttachedSet>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        virtualinvoke r3.<androidx.camera.core.UseCase: void onStateDetached()>();

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Set mNotifyStateAttachedSet>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(r4);

        goto label1;

     label3:
        return;
    }

    public void detachUseCases(java.util.Collection)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.Collection r1, $r6;
        java.util.ArrayList r2, r3, $r4, $r5, $r7;
        boolean $z0;
        java.util.concurrent.Executor $r8;
        java.lang.Runnable $r9;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.Collection;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r2 = $r4;

        $z0 = interfaceinvoke r2.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = new java.util.ArrayList;

        $r6 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Collection toUseCaseInfos(java.util.Collection)>(r2);

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r3 = $r5;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void notifyStateDetachedToUseCases(java.util.List)>($r7);

        $r8 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r9 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,java.util.List)>(r0, r3) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$detachUseCases$12(java.util.List)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r9);

        return;
    }

    private void tryDetachUseCases(java.util.Collection)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.Collection r1, $r12, $r14;
        java.util.ArrayList r2, $r4;
        androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo r3;
        boolean $z0, $z1, $z2, $z3, z5, z6;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r7, $r10, $r24, $r26, $r27;
        androidx.camera.core.impl.UseCaseAttachState $r11, $r13, $r23, $r25;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r15, $r16;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r17, $r18, $r20, $r21;
        androidx.camera.camera2.internal.CaptureSessionInterface $r19;
        java.lang.Object $r22;
        java.lang.Class $r28;
        java.util.Iterator r29;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.Collection;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        z5 = 0;

        r29 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r22 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo) $r22;

        $r23 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r24 = virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.String getUseCaseId()>();

        $z3 = virtualinvoke $r23.<androidx.camera.core.impl.UseCaseAttachState: boolean isUseCaseAttached(java.lang.String)>($r24);

        if $z3 == 0 goto label2;

        $r25 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r26 = virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.String getUseCaseId()>();

        virtualinvoke $r25.<androidx.camera.core.impl.UseCaseAttachState: void removeUseCase(java.lang.String)>($r26);

        $r27 = virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.String getUseCaseId()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r27);

        $r28 = virtualinvoke r3.<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.Class getUseCaseType()>();

        if $r28 != class "Landroidx/camera/core/Preview;" goto label2;

        z5 = 1;

     label2:
        goto label1;

     label3:
        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        return;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Use cases [");

        $r7 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] now DETACHED for camera");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r10);

        if z5 == 0 goto label5;

        $r21 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r21.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void setPreviewAspectRatio(android.util.Rational)>(null);

     label5:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void addOrRemoveMeteringRepeatingUseCase()>();

        $r11 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r12 = virtualinvoke $r11.<androidx.camera.core.impl.UseCaseAttachState: java.util.Collection getAttachedUseCaseConfigs()>();

        $z2 = interfaceinvoke $r12.<java.util.Collection: boolean isEmpty()>();

        if $z2 == 0 goto label6;

        $r20 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r20.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void setZslDisabledByUserCaseConfig(boolean)>(0);

        goto label7;

     label6:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void updateZslDisabledByUseCaseConfigStatus()>();

     label7:
        $r13 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r14 = virtualinvoke $r13.<androidx.camera.core.impl.UseCaseAttachState: java.util.Collection getAttachedSessionConfigs()>();

        z6 = interfaceinvoke $r14.<java.util.Collection: boolean isEmpty()>();

        if z6 == 0 goto label8;

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r17.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void decrementUseCount()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void resetCaptureSession(boolean)>(0);

        $r18 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r18.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void setActive(boolean)>(0);

        $r19 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface newCaptureSession()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession> = $r19;

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void closeInternal()>();

        goto label9;

     label8:
        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void updateCaptureSessionConfig()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void resetCaptureSession(boolean)>(0);

        $r16 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r15 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        if $r16 != $r15 goto label9;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void openCaptureSession()>();

     label9:
        return;
    }

    private void updateZslDisabledByUseCaseConfigStatus()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.Iterator r1;
        androidx.camera.core.impl.UseCaseConfig r2;
        androidx.camera.core.impl.UseCaseAttachState $r3;
        java.util.Collection $r4;
        boolean $z0, $z1, z2;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        z2 = 0;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r4 = virtualinvoke $r3.<androidx.camera.core.impl.UseCaseAttachState: java.util.Collection getAttachedUseCaseConfigs()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.core.impl.UseCaseConfig) $r6;

        $z1 = interfaceinvoke r2.<androidx.camera.core.impl.UseCaseConfig: boolean isZslDisabled(boolean)>(0);

        z2 = z2 | $z1;

        goto label1;

     label2:
        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void setZslDisabledByUserCaseConfig(boolean)>(z2);

        return;
    }

    private void addOrRemoveMeteringRepeatingUseCase()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r1;
        androidx.camera.core.impl.SessionConfig r2;
        androidx.camera.core.impl.CaptureConfig r3;
        int i0, i1;
        androidx.camera.core.impl.UseCaseAttachState $r4;
        java.util.List $r5, $r6, $r7, $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;
        androidx.camera.camera2.internal.MeteringRepeatingSession $r15, $r16;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl $r17;
        androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat $r18;
        androidx.camera.camera2.internal.DisplayInfoManager $r19;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        r1 = virtualinvoke $r4.<androidx.camera.core.impl.UseCaseAttachState: androidx.camera.core.impl.SessionConfig$ValidatingBuilder getAttachedBuilder()>();

        r2 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.SessionConfig build()>();

        r3 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        $r5 = virtualinvoke r3.<androidx.camera.core.impl.CaptureConfig: java.util.List getSurfaces()>();

        i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r8 = virtualinvoke r3.<androidx.camera.core.impl.CaptureConfig: java.util.List getSurfaces()>();

        $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        if $r15 != null goto label1;

        $r16 = new androidx.camera.camera2.internal.MeteringRepeatingSession;

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal>;

        $r18 = virtualinvoke $r17.<androidx.camera.camera2.internal.Camera2CameraInfoImpl: androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat getCameraCharacteristicsCompat()>();

        $r19 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.DisplayInfoManager mDisplayInfoManager>;

        specialinvoke $r16.<androidx.camera.camera2.internal.MeteringRepeatingSession: void <init>(androidx.camera.camera2.internal.compat.CameraCharacteristicsCompat,androidx.camera.camera2.internal.DisplayInfoManager)>($r18, $r19);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession> = $r16;

     label1:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void addMeteringRepeating()>();

        goto label5;

     label2:
        if i1 != 1 goto label3;

        if i0 != 1 goto label3;

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void removeMeteringRepeating()>();

        goto label5;

     label3:
        if i0 < 2 goto label4;

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void removeMeteringRepeating()>();

        goto label5;

     label4:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mMeteringRepeating is ATTACHED, SessionConfig Surfaces: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", CaptureConfig Surfaces: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CameraImpl", $r14);

     label5:
        return;
    }

    private void removeMeteringRepeating()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.MeteringRepeatingSession $r1, $r4, $r7, $r12, $r15, $r18;
        java.lang.StringBuilder $r2, $r6, $r8, $r10, $r14, $r16;
        androidx.camera.core.impl.UseCaseAttachState $r3, $r11;
        java.lang.String $r5, $r9, $r13, $r17;
        int $i0, $i1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $r5 = virtualinvoke $r4.<androidx.camera.camera2.internal.MeteringRepeatingSession: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $i0 = virtualinvoke $r7.<java.lang.Object: int hashCode()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<androidx.camera.core.impl.UseCaseAttachState: void setUseCaseDetached(java.lang.String)>($r9);

        $r11 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $r13 = virtualinvoke $r12.<androidx.camera.camera2.internal.MeteringRepeatingSession: java.lang.String getName()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $i1 = virtualinvoke $r15.<java.lang.Object: int hashCode()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<androidx.camera.core.impl.UseCaseAttachState: void setUseCaseInactive(java.lang.String)>($r17);

        $r18 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        virtualinvoke $r18.<androidx.camera.camera2.internal.MeteringRepeatingSession: void clear()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession> = null;

     label1:
        return;
    }

    private void addMeteringRepeating()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.MeteringRepeatingSession $r1, $r4, $r7, $r10, $r12, $r16, $r19, $r22, $r24;
        java.lang.StringBuilder $r2, $r6, $r8, $r14, $r18, $r20;
        androidx.camera.core.impl.UseCaseAttachState $r3, $r15;
        java.lang.String $r5, $r9, $r17, $r21;
        int $i0, $i1;
        androidx.camera.core.impl.SessionConfig $r11, $r23;
        androidx.camera.core.impl.UseCaseConfig $r13, $r25;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $r5 = virtualinvoke $r4.<androidx.camera.camera2.internal.MeteringRepeatingSession: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $i0 = virtualinvoke $r7.<java.lang.Object: int hashCode()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $r11 = virtualinvoke $r10.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        $r12 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $r13 = virtualinvoke $r12.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

        virtualinvoke $r3.<androidx.camera.core.impl.UseCaseAttachState: void setUseCaseAttached(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>($r9, $r11, $r13);

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $r17 = virtualinvoke $r16.<androidx.camera.camera2.internal.MeteringRepeatingSession: java.lang.String getName()>();

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $i1 = virtualinvoke $r19.<java.lang.Object: int hashCode()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $r23 = virtualinvoke $r22.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        $r24 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.MeteringRepeatingSession mMeteringRepeatingSession>;

        $r25 = virtualinvoke $r24.<androidx.camera.camera2.internal.MeteringRepeatingSession: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>();

        virtualinvoke $r15.<androidx.camera.core.impl.UseCaseAttachState: void setUseCaseActive(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>($r21, $r23, $r25);

     label1:
        return;
    }

    public androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal>;

        return $r1;
    }

    public androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability getCameraAvailability()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability mCameraAvailability>;

        return $r1;
    }

    void tryForceOpenCameraDevice(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        boolean z0, z1;
        androidx.camera.core.impl.CameraStateRegistry $r1;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r2;
        androidx.camera.core.Camera r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("Attempting to force open the camera.");

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraStateRegistry mCameraStateRegistry>;

        r3 = (androidx.camera.core.Camera) r0;

        z1 = virtualinvoke $r1.<androidx.camera.core.impl.CameraStateRegistry: boolean tryOpenCamera(androidx.camera.core.Camera)>(r3);

        if z1 != 0 goto label1;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("No cameras available. Waiting for available camera before opening camera.");

        $r2 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r2);

        return;

     label1:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void openCameraDevice(boolean)>(z0);

        return;
    }

    void tryOpenCameraDevice(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        boolean z0, z1, $z2, $z3, $z4;
        androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability $r1;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r2;
        androidx.camera.core.impl.CameraStateRegistry $r3;
        androidx.camera.core.Camera r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("Attempting to open the camera.");

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability mCameraAvailability>;

        $z2 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: boolean isCameraAvailable()>();

        if $z2 == 0 goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraStateRegistry mCameraStateRegistry>;

        r4 = (androidx.camera.core.Camera) r0;

        $z3 = virtualinvoke $r3.<androidx.camera.core.impl.CameraStateRegistry: boolean tryOpenCamera(androidx.camera.core.Camera)>(r4);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z1 = $z4;

        if z1 != 0 goto label3;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("No cameras available. Waiting for available camera before opening camera.");

        $r2 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r2);

        return;

     label3:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void openCameraDevice(boolean)>(z0);

        return;
    }

    public void setActiveResumingMode(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        boolean z0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,boolean)>(r0, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$setActiveResumingMode$13(boolean)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void openCameraDevice(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        boolean z0;
        java.lang.Throwable r1, $r10;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback $r2, $r9, $r17;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r3, $r16;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl $r4;
        androidx.camera.camera2.internal.compat.CameraManagerCompat $r5;
        java.lang.String $r6, $r13, $r15;
        java.util.concurrent.Executor $r7;
        android.hardware.camera2.CameraDevice$StateCallback $r8;
        java.lang.StringBuilder $r11, $r12, $r14;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback mStateCallback>;

        virtualinvoke $r9.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: void resetReopenMonitor()>();

     label1:
        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback mStateCallback>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: boolean cancelScheduledReopen()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("Opening camera.");

        $r3 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENING>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r3);

     label2:
        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.compat.CameraManagerCompat mCameraManager>;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal>;

        $r6 = virtualinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraInfoImpl: java.lang.String getCameraId()>();

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r8 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice$StateCallback createDeviceStateCallback()>();

        virtualinvoke $r5.<androidx.camera.camera2.internal.compat.CameraManagerCompat: void openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)>($r6, $r7, $r8);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r1 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open camera due to ");

        $r13 = virtualinvoke r1.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r15);

        $r16 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING>;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r16);

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback mStateCallback>;

        virtualinvoke $r17.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: void scheduleCameraReopen()>();

     label5:
        return;

        catch java.lang.SecurityException from label2 to label3 with label4;
    }

    void updateCaptureSessionConfig()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r1;
        androidx.camera.core.impl.SessionConfig r2, r3, $r8, $r11;
        androidx.camera.core.impl.UseCaseAttachState $r4;
        boolean $z0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r5, $r6, $r9, $r10;
        androidx.camera.camera2.internal.CaptureSessionInterface $r7, $r12;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        r1 = virtualinvoke $r4.<androidx.camera.core.impl.UseCaseAttachState: androidx.camera.core.impl.SessionConfig$ValidatingBuilder getActiveAndAttachedBuilder()>();

        $z0 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean isValid()>();

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.SessionConfig build()>();

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        $i0 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: int getTemplateType()>();

        virtualinvoke $r9.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void setTemplate(int)>($i0);

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        $r11 = virtualinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: void add(androidx.camera.core.impl.SessionConfig)>($r11);

        r3 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.SessionConfig build()>();

        $r12 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>;

        interfaceinvoke $r12.<androidx.camera.camera2.internal.CaptureSessionInterface: void setSessionConfig(androidx.camera.core.impl.SessionConfig)>(r3);

        goto label2;

     label1:
        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void resetTemplate()>();

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        $r8 = virtualinvoke $r6.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        interfaceinvoke $r7.<androidx.camera.camera2.internal.CaptureSessionInterface: void setSessionConfig(androidx.camera.core.impl.SessionConfig)>($r8);

     label2:
        return;
    }

    void openCaptureSession()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder r1;
        androidx.camera.camera2.internal.CaptureSessionInterface r2;
        com.google.common.util.concurrent.ListenableFuture r3;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r4, $r5;
        androidx.camera.core.impl.UseCaseAttachState $r6, $r18, $r21;
        boolean $z0, $z1, $z2;
        androidx.camera.core.impl.SessionConfig $r7, $r10;
        androidx.camera.core.impl.Config $r8;
        androidx.camera.core.impl.Config$Option $r9, $r19;
        android.hardware.camera2.CameraDevice $r11, $r14;
        java.lang.Object $r12;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder $r13;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener $r15;
        androidx.camera.camera2.internal.Camera2CameraImpl$2 $r16;
        java.util.concurrent.Executor $r17;
        java.util.Collection $r20, $r22;
        long $l0;
        java.lang.Long $r23;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r4 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        if $r5 != $r4 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z2);

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        r1 = virtualinvoke $r6.<androidx.camera.core.impl.UseCaseAttachState: androidx.camera.core.impl.SessionConfig$ValidatingBuilder getAttachedBuilder()>();

        $z0 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: boolean isValid()>();

        if $z0 != 0 goto label3;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("Unable to create capture session due to conflicting configurations");

        return;

     label3:
        $r7 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.SessionConfig build()>();

        $r8 = virtualinvoke $r7.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        $r9 = <androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.core.impl.Config$Option STREAM_USE_CASE_OPTION>;

        $z1 = interfaceinvoke $r8.<androidx.camera.core.impl.Config: boolean containsOption(androidx.camera.core.impl.Config$Option)>($r9);

        if $z1 != 0 goto label4;

        $r19 = <androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.core.impl.Config$Option STREAM_USE_CASE_OPTION>;

        $r18 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r20 = virtualinvoke $r18.<androidx.camera.core.impl.UseCaseAttachState: java.util.Collection getAttachedUseCaseConfigs()>();

        $r21 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r22 = virtualinvoke $r21.<androidx.camera.core.impl.UseCaseAttachState: java.util.Collection getAttachedSessionConfigs()>();

        $l0 = staticinvoke <androidx.camera.camera2.internal.StreamUseCaseUtil: long getStreamUseCaseFromUseCaseConfigs(java.util.Collection,java.util.Collection)>($r20, $r22);

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: void addImplementationOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r19, $r23);

     label4:
        r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>;

        $r10 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.SessionConfig build()>();

        $r11 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        $r12 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r11);

        $r14 = (android.hardware.camera2.CameraDevice) $r12;

        $r13 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder mCaptureSessionOpenerBuilder>;

        $r15 = virtualinvoke $r13.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener$Builder: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener build()>();

        r3 = interfaceinvoke r2.<androidx.camera.camera2.internal.CaptureSessionInterface: com.google.common.util.concurrent.ListenableFuture open(androidx.camera.core.impl.SessionConfig,android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener)>($r10, $r14, $r15);

        $r16 = new androidx.camera.camera2.internal.Camera2CameraImpl$2;

        specialinvoke $r16.<androidx.camera.camera2.internal.Camera2CameraImpl$2: void <init>(androidx.camera.camera2.internal.Camera2CameraImpl)>(r0);

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>(r3, $r16, $r17);

        return;
    }

    private boolean isLegacyDevice()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl r1;
        androidx.camera.core.impl.CameraInfoInternal $r2;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r2 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraInfoInternal getCameraInfoInternal()>();

        r1 = (androidx.camera.camera2.internal.Camera2CameraInfoImpl) $r2;

        $i0 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraInfoImpl: int getSupportedHardwareLevel()>();

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    androidx.camera.core.impl.SessionConfig findSessionConfigForSurface(androidx.camera.core.impl.DeferrableSurface)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.DeferrableSurface r1;
        java.util.Iterator r2;
        androidx.camera.core.impl.SessionConfig r3;
        androidx.camera.core.impl.UseCaseAttachState $r4;
        java.util.Collection $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.util.List $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r5 = virtualinvoke $r4.<androidx.camera.core.impl.UseCaseAttachState: java.util.Collection getAttachedSessionConfigs()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.SessionConfig) $r6;

        $r7 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $z1 = interfaceinvoke $r7.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    void postSurfaceClosedError(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.SessionConfig r1;
        java.util.concurrent.ScheduledExecutorService r2;
        java.util.List r3;
        androidx.camera.core.impl.SessionConfig$ErrorListener r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        java.lang.Runnable $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        r2 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r3 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getErrorListeners()>();

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (androidx.camera.core.impl.SessionConfig$ErrorListener) $r5;

        $r6 = new java.lang.Throwable;

        specialinvoke $r6.<java.lang.Throwable: void <init>()>();

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String,java.lang.Throwable)>("Posting surface closed", $r6);

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.impl.SessionConfig$ErrorListener,androidx.camera.core.impl.SessionConfig)>(r4, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$postSurfaceClosedError$14(androidx.camera.core.impl.SessionConfig$ErrorListener,androidx.camera.core.impl.SessionConfig)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

     label1:
        return;
    }

    void resetCaptureSession(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        boolean z0, $z1;
        androidx.camera.camera2.internal.CaptureSessionInterface r1, $r4, $r5, $r6, $r7;
        androidx.camera.core.impl.SessionConfig r2;
        java.util.List r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        z0 := @parameter0: boolean;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>;

        if $r4 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z1);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("Resetting Capture Session");

        r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>;

        r2 = interfaceinvoke r1.<androidx.camera.camera2.internal.CaptureSessionInterface: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        r3 = interfaceinvoke r1.<androidx.camera.camera2.internal.CaptureSessionInterface: java.util.List getCaptureConfigs()>();

        $r5 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface newCaptureSession()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession> = $r5;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>;

        interfaceinvoke $r6.<androidx.camera.camera2.internal.CaptureSessionInterface: void setSessionConfig(androidx.camera.core.impl.SessionConfig)>(r2);

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>;

        interfaceinvoke $r7.<androidx.camera.camera2.internal.CaptureSessionInterface: void issueCaptureRequests(java.util.List)>(r3);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: com.google.common.util.concurrent.ListenableFuture releaseSession(androidx.camera.camera2.internal.CaptureSessionInterface,boolean)>(r1, z0);

        return;
    }

    private android.hardware.camera2.CameraDevice$StateCallback createDeviceStateCallback()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.SessionConfig r1;
        java.util.List r2;
        java.util.ArrayList r3, $r6;
        androidx.camera.core.impl.UseCaseAttachState $r4;
        androidx.camera.core.impl.SessionConfig$ValidatingBuilder $r5;
        androidx.camera.camera2.internal.CaptureSessionRepository $r7;
        android.hardware.camera2.CameraDevice$StateCallback $r8, $r10;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback $r9;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r5 = virtualinvoke $r4.<androidx.camera.core.impl.UseCaseAttachState: androidx.camera.core.impl.SessionConfig$ValidatingBuilder getAttachedBuilder()>();

        r1 = virtualinvoke $r5.<androidx.camera.core.impl.SessionConfig$ValidatingBuilder: androidx.camera.core.impl.SessionConfig build()>();

        r2 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getDeviceStateCallbacks()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r3 = $r6;

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        $r8 = virtualinvoke $r7.<androidx.camera.camera2.internal.CaptureSessionRepository: android.hardware.camera2.CameraDevice$StateCallback getCameraStateCallback()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback mStateCallback>;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = staticinvoke <androidx.camera.camera2.internal.CameraDeviceStateCallbacks: android.hardware.camera2.CameraDevice$StateCallback createComboCallback(java.util.List)>(r3);

        return $r10;
    }

    private boolean checkAndAttachRepeatingSurface(androidx.camera.core.impl.CaptureConfig$Builder)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.core.impl.CaptureConfig$Builder r1;
        java.util.Iterator r2, r5;
        androidx.camera.core.impl.SessionConfig r3;
        java.util.List r4;
        androidx.camera.core.impl.DeferrableSurface r6;
        java.util.Set $r7, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        androidx.camera.core.impl.UseCaseAttachState $r8;
        java.util.Collection $r9;
        java.lang.Object $r11, $r13;
        androidx.camera.core.impl.CaptureConfig $r12;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.core.impl.CaptureConfig$Builder;

        $r7 = virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set getSurfaces()>();

        $z0 = interfaceinvoke $r7.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("Camera2CameraImpl", "The capture config builder already has surface inside.");

        return 0;

     label1:
        $r8 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $r9 = virtualinvoke $r8.<androidx.camera.core.impl.UseCaseAttachState: java.util.Collection getActiveAndAttachedSessionConfigs()>();

        r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.SessionConfig) $r11;

        $r12 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        r4 = virtualinvoke $r12.<androidx.camera.core.impl.CaptureConfig: java.util.List getSurfaces()>();

        $z3 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label4;

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.camera.core.impl.DeferrableSurface) $r13;

        virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: void addSurface(androidx.camera.core.impl.DeferrableSurface)>(r6);

        goto label3;

     label4:
        goto label2;

     label5:
        $r10 = virtualinvoke r1.<androidx.camera.core.impl.CaptureConfig$Builder: java.util.Set getSurfaces()>();

        $z2 = interfaceinvoke $r10.<java.util.Set: boolean isEmpty()>();

        if $z2 == 0 goto label6;

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("Camera2CameraImpl", "Unable to find a repeating surface to attach to CaptureConfig");

        return 0;

     label6:
        return 1;
    }

    public androidx.camera.core.impl.CameraControlInternal getCameraControlInternal()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        return $r1;
    }

    void submitCaptureRequests(java.util.List)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.List r1, $r11;
        java.util.ArrayList r2, $r6;
        java.util.Iterator r3;
        androidx.camera.core.impl.CaptureConfig r4, $r12;
        androidx.camera.core.impl.CaptureConfig$Builder r5;
        androidx.camera.camera2.internal.CaptureSessionInterface $r7;
        java.lang.Object $r8;
        int $i0;
        boolean $z1, $z2, $z3, $z4;
        androidx.camera.core.impl.CameraCaptureResult $r9, $r10;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.List;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.core.impl.CaptureConfig) $r8;

        r5 = staticinvoke <androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder 'from'(androidx.camera.core.impl.CaptureConfig)>(r4);

        $i0 = virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        if $i0 != 5 goto label2;

        $r9 = virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.CameraCaptureResult getCameraCaptureResult()>();

        if $r9 == null goto label2;

        $r10 = virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.CameraCaptureResult getCameraCaptureResult()>();

        virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig$Builder: void setCameraCaptureResult(androidx.camera.core.impl.CameraCaptureResult)>($r10);

     label2:
        $r11 = virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig: java.util.List getSurfaces()>();

        $z4 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label3;

        $z1 = virtualinvoke r4.<androidx.camera.core.impl.CaptureConfig: boolean isUseRepeatingSurface()>();

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean checkAndAttachRepeatingSurface(androidx.camera.core.impl.CaptureConfig$Builder)>(r5);

        if $z2 != 0 goto label3;

        goto label1;

     label3:
        $r12 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label4:
        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("Issue capture request");

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CaptureSessionInterface mCaptureSession>;

        interfaceinvoke $r7.<androidx.camera.camera2.internal.CaptureSessionInterface: void issueCaptureRequests(java.util.List)>(r2);

        return;
    }

    public java.lang.String toString()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.lang.Object[] $r1;
        java.util.Locale $r2;
        int $i0;
        java.lang.Integer $r3;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl $r4;
        java.lang.String $r5, $r6;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r1 = newarray (java.lang.Object)[2];

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r3;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal>;

        $r5 = virtualinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraInfoImpl: java.lang.String getCameraId()>();

        $r1[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "Camera@%x[id=%s]", $r1);

        return $r6;
    }

    static java.lang.String getUseCaseId(androidx.camera.core.UseCase)
    {
        androidx.camera.core.UseCase r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        int $i0;

        r0 := @parameter0: androidx.camera.core.UseCase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<androidx.camera.core.UseCase: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    void debugLog(java.lang.String)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.lang.String r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String,java.lang.Throwable)>(r1, null);

        return;
    }

    private void debugLog(java.lang.String, java.lang.Throwable)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.lang.String r1, r3, $r5;
        java.lang.Throwable r2;
        java.lang.Object[] $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String toString()>();

        $r4[0] = $r5;

        $r4[1] = r1;

        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("{%s} %s", $r4);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String,java.lang.Throwable)>("Camera2CameraImpl", r3, r2);

        return;
    }

    void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState,androidx.camera.core.CameraState$StateError)>(r1, null);

        return;
    }

    void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState, androidx.camera.core.CameraState$StateError)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState r1;
        androidx.camera.core.CameraState$StateError r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        r2 := @parameter1: androidx.camera.core.CameraState$StateError;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState,androidx.camera.core.CameraState$StateError,boolean)>(r1, r2, 1);

        return;
    }

    void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState, androidx.camera.core.CameraState$StateError, boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState r1, $r5;
        androidx.camera.core.CameraState$StateError r2;
        boolean z0;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r13, $r14, r20, r21;
        java.lang.String $r9, $r15;
        int[] $r10;
        int $i0, $i1;
        androidx.camera.core.impl.CameraInternal$State r16;
        androidx.camera.core.impl.CameraStateRegistry $r17;
        androidx.camera.core.impl.LiveDataObservable $r18;
        androidx.camera.camera2.internal.CameraStateMachine $r19;
        java.lang.IllegalStateException r22;
        androidx.camera.core.Camera r23;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        r2 := @parameter1: androidx.camera.core.CameraState$StateError;

        z0 := @parameter2: boolean;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transitioning camera internal state: ");

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r9);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState> = r1;

        $r10 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $i0 = virtualinvoke r1.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $i1 = $r10[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label6;
            case 8: goto label7;
            default: goto label8;
        };

     label1:
        r16 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State CLOSED>;

        goto label9;

     label2:
        r16 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State PENDING_OPEN>;

        goto label9;

     label3:
        r16 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State OPENING>;

        goto label9;

     label4:
        r16 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State OPEN>;

        goto label9;

     label5:
        r16 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State CLOSING>;

        goto label9;

     label6:
        r16 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State RELEASING>;

        goto label9;

     label7:
        r16 = <androidx.camera.core.impl.CameraInternal$State: androidx.camera.core.impl.CameraInternal$State RELEASED>;

        goto label9;

     label8:
        r22 = new java.lang.IllegalStateException;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw r22;

     label9:
        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.CameraStateRegistry mCameraStateRegistry>;

        r23 = (androidx.camera.core.Camera) r0;

        virtualinvoke $r17.<androidx.camera.core.impl.CameraStateRegistry: void markCameraState(androidx.camera.core.Camera,androidx.camera.core.impl.CameraInternal$State,boolean)>(r23, r16, z0);

        $r18 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.LiveDataObservable mObservableState>;

        virtualinvoke $r18.<androidx.camera.core.impl.LiveDataObservable: void postValue(java.lang.Object)>(r16);

        $r19 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.CameraStateMachine mCameraStateMachine>;

        virtualinvoke $r19.<androidx.camera.camera2.internal.CameraStateMachine: void updateState(androidx.camera.core.impl.CameraInternal$State,androidx.camera.core.CameraState$StateError)>(r16, r2);

        return;
    }

    static java.lang.String getErrorMessage(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label4;
            case 2: goto label6;
            case 3: goto label3;
            case 4: goto label2;
            case 5: goto label5;
            default: goto label7;
        };

     label1:
        return "ERROR_NONE";

     label2:
        return "ERROR_CAMERA_DEVICE";

     label3:
        return "ERROR_CAMERA_DISABLED";

     label4:
        return "ERROR_CAMERA_IN_USE";

     label5:
        return "ERROR_CAMERA_SERVICE";

     label6:
        return "ERROR_MAX_CAMERAS_IN_USE";

     label7:
        return "UNKNOWN ERROR";
    }

    private static void lambda$postSurfaceClosedError$14(androidx.camera.core.impl.SessionConfig$ErrorListener, androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.core.impl.SessionConfig$ErrorListener r0;
        androidx.camera.core.impl.SessionConfig r1;
        androidx.camera.core.impl.SessionConfig$SessionError $r2;

        r0 := @parameter0: androidx.camera.core.impl.SessionConfig$ErrorListener;

        r1 := @parameter1: androidx.camera.core.impl.SessionConfig;

        $r2 = <androidx.camera.core.impl.SessionConfig$SessionError: androidx.camera.core.impl.SessionConfig$SessionError SESSION_ERROR_SURFACE_NEEDS_RESET>;

        interfaceinvoke r0.<androidx.camera.core.impl.SessionConfig$ErrorListener: void onError(androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.SessionConfig$SessionError)>(r1, $r2);

        return;
    }

    private void lambda$setActiveResumingMode$13(boolean)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        boolean z0;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r1, $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        z0 := @parameter0: boolean;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean mIsActiveResumingMode> = z0;

        if z0 == 0 goto label1;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r1 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN>;

        if $r2 != $r1 goto label1;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void tryForceOpenCameraDevice(boolean)>(0);

     label1:
        return;
    }

    private void lambda$detachUseCases$12(java.util.List)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.List r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void tryDetachUseCases(java.util.Collection)>(r1);

        return;
    }

    private void lambda$attachUseCases$11(java.util.List)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.util.List r1;
        java.lang.Throwable r2, $r4;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r3, $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.util.List;

     label1:
        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void tryAttachUseCases(java.util.Collection)>(r1);

     label2:
        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r3.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void decrementUseCount()>();

        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCameraControlInternal>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void decrementUseCount()>();

        throw r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private java.lang.Object lambda$isUseCaseAttached$10(java.lang.String, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.lang.String r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.lang.Throwable r3, $r6;
        java.util.concurrent.Executor $r4;
        java.lang.Runnable $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

     label1:
        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer,java.lang.String)>(r0, r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$isUseCaseAttached$9(androidx.concurrent.futures.CallbackToFutureAdapter$Completer,java.lang.String)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to check if use case is attached. Camera executor shut down.");

        virtualinvoke r2.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r7);

     label4:
        return "isUseCaseAttached";

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    private void lambda$isUseCaseAttached$9(androidx.concurrent.futures.CallbackToFutureAdapter$Completer, java.lang.String)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.lang.String r2;
        androidx.camera.core.impl.UseCaseAttachState $r3;
        boolean $z0;
        java.lang.Boolean $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        $z0 = virtualinvoke $r3.<androidx.camera.core.impl.UseCaseAttachState: boolean isUseCaseAttached(java.lang.String)>(r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke r1.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>($r4);

        return;
    }

    private void lambda$onUseCaseReset$8(java.lang.String, androidx.camera.core.impl.SessionConfig, androidx.camera.core.impl.UseCaseConfig)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.lang.String r1, $r8;
        androidx.camera.core.impl.SessionConfig r2;
        androidx.camera.core.impl.UseCaseConfig r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        androidx.camera.core.impl.UseCaseAttachState $r9;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r10, $r11;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.SessionConfig;

        r3 := @parameter2: androidx.camera.core.impl.UseCaseConfig;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Use case ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" RESET");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r8);

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        virtualinvoke $r9.<androidx.camera.core.impl.UseCaseAttachState: void updateUseCase(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>(r1, r2, r3);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void resetCaptureSession(boolean)>(0);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void updateCaptureSessionConfig()>();

        $r11 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r10 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        if $r11 != $r10 goto label1;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void openCaptureSession()>();

     label1:
        return;
    }

    private void lambda$onUseCaseUpdated$7(java.lang.String, androidx.camera.core.impl.SessionConfig, androidx.camera.core.impl.UseCaseConfig)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.lang.String r1, $r8;
        androidx.camera.core.impl.SessionConfig r2;
        androidx.camera.core.impl.UseCaseConfig r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        androidx.camera.core.impl.UseCaseAttachState $r9;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.SessionConfig;

        r3 := @parameter2: androidx.camera.core.impl.UseCaseConfig;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Use case ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UPDATED");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r8);

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        virtualinvoke $r9.<androidx.camera.core.impl.UseCaseAttachState: void updateUseCase(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>(r1, r2, r3);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void updateCaptureSessionConfig()>();

        return;
    }

    private void lambda$onUseCaseInactive$6(java.lang.String)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        androidx.camera.core.impl.UseCaseAttachState $r7;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Use case ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INACTIVE");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r6);

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        virtualinvoke $r7.<androidx.camera.core.impl.UseCaseAttachState: void setUseCaseInactive(java.lang.String)>(r1);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void updateCaptureSessionConfig()>();

        return;
    }

    private void lambda$onUseCaseActive$5(java.lang.String, androidx.camera.core.impl.SessionConfig, androidx.camera.core.impl.UseCaseConfig)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        java.lang.String r1, $r8;
        androidx.camera.core.impl.SessionConfig r2;
        androidx.camera.core.impl.UseCaseConfig r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        androidx.camera.core.impl.UseCaseAttachState $r9, $r10;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.camera.core.impl.SessionConfig;

        r3 := @parameter2: androidx.camera.core.impl.UseCaseConfig;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Use case ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ACTIVE");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r8);

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        virtualinvoke $r9.<androidx.camera.core.impl.UseCaseAttachState: void setUseCaseActive(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>(r1, r2, r3);

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.UseCaseAttachState mUseCaseAttachState>;

        virtualinvoke $r10.<androidx.camera.core.impl.UseCaseAttachState: void updateUseCase(java.lang.String,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig)>(r1, r2, r3);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void updateCaptureSessionConfig()>();

        return;
    }

    private java.lang.Object lambda$getOrCreateUserReleaseFuture$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mUserReleaseNotifier>;

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Camera can only be released once, so release completer should be null on creation.");

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mUserReleaseNotifier> = r1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Release[camera=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private java.lang.Object lambda$release$3(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.util.concurrent.atomic.AtomicInteger $r6;
        int $i0;
        java.lang.String $r9;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.Executor mExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl: void lambda$release$2(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Release[request=");

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.concurrent.atomic.AtomicInteger mReleaseRequestCount>;

        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private void lambda$release$2(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: com.google.common.util.concurrent.ListenableFuture releaseInternal()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void propagate(com.google.common.util.concurrent.ListenableFuture,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>($r2, r1);

        return;
    }

    private void lambda$configAndClose$1(androidx.camera.camera2.internal.CaptureSession, androidx.camera.core.impl.DeferrableSurface, java.lang.Runnable)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl r0;
        androidx.camera.camera2.internal.CaptureSession r1;
        androidx.camera.core.impl.DeferrableSurface r2;
        java.lang.Runnable r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSession;

        r2 := @parameter1: androidx.camera.core.impl.DeferrableSurface;

        r3 := @parameter2: java.lang.Runnable;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl: void releaseNoOpSession(androidx.camera.camera2.internal.CaptureSession,androidx.camera.core.impl.DeferrableSurface,java.lang.Runnable)>(r1, r2, r3);

        return;
    }

    private static void lambda$configAndClose$0(android.view.Surface, android.graphics.SurfaceTexture)
    {
        android.view.Surface r0;
        android.graphics.SurfaceTexture r1;

        r0 := @parameter0: android.view.Surface;

        r1 := @parameter1: android.graphics.SurfaceTexture;

        virtualinvoke r0.<android.view.Surface: void release()>();

        virtualinvoke r1.<android.graphics.SurfaceTexture: void release()>();

        return;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$1
<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.CaptureSessionInterface val$captureSession>
<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.Camera2CameraImpl this$0>
    void <init>(androidx.camera.camera2.internal.Camera2CameraImpl, androidx.camera.camera2.internal.CaptureSessionInterface)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$1 r0;
        androidx.camera.camera2.internal.Camera2CameraImpl r1;
        androidx.camera.camera2.internal.CaptureSessionInterface r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$1;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl;

        r2 := @parameter1: androidx.camera.camera2.internal.CaptureSessionInterface;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.Camera2CameraImpl this$0> = r1;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.CaptureSessionInterface val$captureSession> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$1 r0;
        java.lang.Void r1;
        androidx.camera.camera2.internal.Camera2CameraImpl $r2, $r6, $r9, $r10, $r11, $r13, $r15;
        androidx.camera.camera2.internal.CaptureSessionInterface $r3;
        java.util.Map $r4;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r7;
        int[] $r8;
        int $i0, $i1, $i2;
        boolean $z0;
        android.hardware.camera2.CameraDevice $r12, $r14;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$1;

        r1 := @parameter0: java.lang.Void;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r4 = $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: java.util.Map mReleasedCaptureSessions>;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.CaptureSessionInterface val$captureSession>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        $r8 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r7 = $r6.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $i0 = virtualinvoke $r7.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $i1 = $r8[$i0];

        tableswitch($i1)
        {
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label1;
            case 7: goto label2;
            default: goto label3;
        };

     label1:
        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $i2 = $r9.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        if $i2 != 0 goto label2;

        goto label3;

     label2:
        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $z0 = virtualinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean isSessionCloseComplete()>();

        if $z0 == 0 goto label3;

        $r11 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r12 = $r11.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        if $r12 == null goto label3;

        $r13 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r14 = $r13.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        staticinvoke <androidx.camera.camera2.internal.compat.ApiCompat$Api21Impl: void close(android.hardware.camera2.CameraDevice)>($r14);

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r15.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice> = null;

        goto label3;

     label3:
        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$1 r0;
        java.lang.Throwable r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$1;

        r1 := @parameter0: java.lang.Throwable;

        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$1 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$1: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$2
<androidx.camera.camera2.internal.Camera2CameraImpl$2: androidx.camera.camera2.internal.Camera2CameraImpl this$0>
    void <init>(androidx.camera.camera2.internal.Camera2CameraImpl)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$2 r0;
        androidx.camera.camera2.internal.Camera2CameraImpl r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$2;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$2: androidx.camera.camera2.internal.Camera2CameraImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$2 r0;
        java.lang.Void r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$2;

        r1 := @parameter0: java.lang.Void;

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$2 r0;
        java.lang.Throwable r1;
        androidx.camera.core.impl.SessionConfig r2;
        boolean $z0, $z1, $z2, $z3;
        androidx.camera.camera2.internal.Camera2CameraImpl $r3, $r8, $r15, $r20, $r23, $r25, $r27;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r4, $r5, $r21;
        java.lang.StringBuilder $r6, $r7, $r11, $r12, $r14, $r16, $r18;
        androidx.camera.camera2.internal.Camera2CameraInfoImpl $r9;
        java.lang.String $r10, $r13, $r17, $r19;
        androidx.camera.core.CameraState$StateError $r22;
        androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException $r24;
        androidx.camera.core.impl.DeferrableSurface $r26;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$2;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = r1 instanceof androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException;

        if $z0 == 0 goto label2;

        $r25 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$2: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r24 = (androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException) r1;

        $r26 = virtualinvoke $r24.<androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException: androidx.camera.core.impl.DeferrableSurface getDeferrableSurface()>();

        r2 = virtualinvoke $r25.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.core.impl.SessionConfig findSessionConfigForSurface(androidx.camera.core.impl.DeferrableSurface)>($r26);

        if r2 == null goto label1;

        $r27 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$2: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r27.<androidx.camera.camera2.internal.Camera2CameraImpl: void postSurfaceClosedError(androidx.camera.core.impl.SessionConfig)>(r2);

     label1:
        return;

     label2:
        $z1 = r1 instanceof java.util.concurrent.CancellationException;

        if $z1 == 0 goto label3;

        $r23 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$2: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r23.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("Unable to configure camera cancelled");

        return;

     label3:
        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$2: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r5 = $r3.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r4 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        if $r5 != $r4 goto label4;

        $r20 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$2: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r21 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        $r22 = staticinvoke <androidx.camera.core.CameraState$StateError: androidx.camera.core.CameraState$StateError create(int,java.lang.Throwable)>(4, r1);

        virtualinvoke $r20.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState,androidx.camera.core.CameraState$StateError)>($r21, $r22);

     label4:
        $z2 = r1 instanceof android.hardware.camera2.CameraAccessException;

        if $z2 == 0 goto label5;

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$2: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to configure camera due to ");

        $r17 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r19);

        goto label6;

     label5:
        $z3 = r1 instanceof java.util.concurrent.TimeoutException;

        if $z3 == 0 goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to configure camera ");

        $r8 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$2: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r9 = $r8.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraInfoImpl mCameraInfoInternal>;

        $r10 = virtualinvoke $r9.<androidx.camera.camera2.internal.Camera2CameraInfoImpl: java.lang.String getCameraId()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", timeout!");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Camera2CameraImpl", $r13);

     label6:
        return;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$2 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$2: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$3
<androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>
    static void <clinit>()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        java.lang.Throwable $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, r26, r27, r28, r29, r30, r31, r32, r33;

        $r0 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState> = $r1;

     label01:
        $r3 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r2 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState INITIALIZED>;

        $i1 = virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r23 := @caughtexception;

        r26 = $r23;

     label04:
        $r5 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r4 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN>;

        $i2 = virtualinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r25 := @caughtexception;

        r27 = $r25;

     label07:
        $r7 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r6 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING>;

        $i3 = virtualinvoke $r6.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r22 := @caughtexception;

        r28 = $r22;

     label10:
        $r9 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r8 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        $i4 = virtualinvoke $r8.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r21 := @caughtexception;

        r29 = $r21;

     label13:
        $r11 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r10 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENING>;

        $i5 = virtualinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r24 := @caughtexception;

        r30 = $r24;

     label16:
        $r13 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r12 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING>;

        $i6 = virtualinvoke $r12.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $r13[$i6] = 6;

     label17:
        goto label19;

     label18:
        $r20 := @caughtexception;

        r31 = $r20;

     label19:
        $r15 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r14 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASING>;

        $i7 = virtualinvoke $r14.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $r15[$i7] = 7;

     label20:
        goto label22;

     label21:
        $r19 := @caughtexception;

        r32 = $r19;

     label22:
        $r17 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r16 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASED>;

        $i8 = virtualinvoke $r16.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $r17[$i8] = 8;

     label23:
        goto label25;

     label24:
        $r18 := @caughtexception;

        r33 = $r18;

     label25:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label16 to label17 with label18;
        catch java.lang.NoSuchFieldError from label19 to label20 with label21;
        catch java.lang.NoSuchFieldError from label22 to label23 with label24;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability
<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: java.lang.String mCameraId>
<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: boolean mCameraAvailable>
<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: androidx.camera.camera2.internal.Camera2CameraImpl this$0>
    void <init>(androidx.camera.camera2.internal.Camera2CameraImpl, java.lang.String)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability r0;
        androidx.camera.camera2.internal.Camera2CameraImpl r1;
        java.lang.String r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl;

        r2 := @parameter1: java.lang.String;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: androidx.camera.camera2.internal.Camera2CameraImpl this$0> = r1;

        specialinvoke r0.<android.hardware.camera2.CameraManager$AvailabilityCallback: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: boolean mCameraAvailable> = 1;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: java.lang.String mCameraId> = r2;

        return;
    }

    public void onCameraAvailable(java.lang.String)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability r0;
        java.lang.String r1, $r2;
        boolean $z0;
        androidx.camera.camera2.internal.Camera2CameraImpl $r3, $r6;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r4, $r5;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: java.lang.String mCameraId>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: boolean mCameraAvailable> = 1;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r5 = $r3.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r4 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN>;

        if $r5 != $r4 goto label2;

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r6.<androidx.camera.camera2.internal.Camera2CameraImpl: void tryOpenCameraDevice(boolean)>(0);

     label2:
        return;
    }

    public void onCameraUnavailable(java.lang.String)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: java.lang.String mCameraId>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: boolean mCameraAvailable> = 0;

        return;
    }

    public void onOpenAvailable()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability r0;
        androidx.camera.camera2.internal.Camera2CameraImpl $r1, $r4;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r2, $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r3 = $r1.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r2 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN>;

        if $r3 != $r2 goto label1;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraImpl: void tryOpenCameraDevice(boolean)>(0);

     label1:
        return;
    }

    boolean isCameraAvailable()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability r0;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$CameraAvailability: boolean mCameraAvailable>;

        return $z0;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal
<androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal: androidx.camera.camera2.internal.Camera2CameraImpl this$0>
    void <init>(androidx.camera.camera2.internal.Camera2CameraImpl)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal r0;
        androidx.camera.camera2.internal.Camera2CameraImpl r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal: androidx.camera.camera2.internal.Camera2CameraImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onCameraControlUpdateSessionConfig()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal r0;
        androidx.camera.camera2.internal.Camera2CameraImpl $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraImpl: void updateCaptureSessionConfig()>();

        return;
    }

    public void onCameraControlCaptureRequests(java.util.List)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal r0;
        java.util.List r1, $r4;
        androidx.camera.camera2.internal.Camera2CameraImpl $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$ControlUpdateListenerInternal: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r3 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.util.List) $r3;

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: void submitCaptureRequests(java.util.List)>($r4);

        return;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$InternalState
<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState INITIALIZED>
<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN>
<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENING>
<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>
<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING>
<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING>
<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASING>
<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASED>
<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState[] $VALUES>
    public static androidx.camera.camera2.internal.Camera2CameraImpl$InternalState[] values()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.camera2.internal.Camera2CameraImpl$InternalState[]) $r1;

        return $r2;
    }

    public static androidx.camera.camera2.internal.Camera2CameraImpl$InternalState valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/camera2/internal/Camera2CameraImpl$InternalState;", r0);

        $r2 = (androidx.camera.camera2.internal.Camera2CameraImpl$InternalState) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState[] $r8;

        $r0 = new androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        specialinvoke $r0.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: void <init>(java.lang.String,int)>("INITIALIZED", 0);

        <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState INITIALIZED> = $r0;

        $r1 = new androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        specialinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: void <init>(java.lang.String,int)>("PENDING_OPEN", 1);

        <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN> = $r1;

        $r2 = new androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        specialinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: void <init>(java.lang.String,int)>("OPENING", 2);

        <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENING> = $r2;

        $r3 = new androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        specialinvoke $r3.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: void <init>(java.lang.String,int)>("OPENED", 3);

        <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED> = $r3;

        $r4 = new androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        specialinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: void <init>(java.lang.String,int)>("CLOSING", 4);

        <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING> = $r4;

        $r5 = new androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        specialinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: void <init>(java.lang.String,int)>("REOPENING", 5);

        <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING> = $r5;

        $r6 = new androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        specialinvoke $r6.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: void <init>(java.lang.String,int)>("RELEASING", 6);

        <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASING> = $r6;

        $r7 = new androidx.camera.camera2.internal.Camera2CameraImpl$InternalState;

        specialinvoke $r7.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: void <init>(java.lang.String,int)>("RELEASED", 7);

        <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASED> = $r7;

        $r8 = newarray (androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)[8];

        $r9 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState INITIALIZED>;

        $r8[0] = $r9;

        $r10 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN>;

        $r8[1] = $r10;

        $r11 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENING>;

        $r8[2] = $r11;

        $r12 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        $r8[3] = $r12;

        $r13 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING>;

        $r8[4] = $r13;

        $r14 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING>;

        $r8[5] = $r14;

        $r15 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASING>;

        $r8[6] = $r15;

        $r16 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState RELEASED>;

        $r8[7] = $r16;

        <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState[] $VALUES> = $r8;

        return;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: int REOPEN_DELAY_MS>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: int REOPEN_LIMIT_MS>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: int ACTIVE_REOPEN_DELAY_BASE_MS>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: int ACTIVE_REOPEN_LIMIT_MS>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: int INVALID_TIME>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: long mFirstReopenTime>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1>
    void <init>(androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: long mFirstReopenTime> = -1L;

        return;
    }

    int getReopenDelayMs()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor r0;
        long l0;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback $r1;
        boolean $z0;
        byte $b1, $b2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1>;

        $z0 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: boolean shouldActiveResume()>();

        if $z0 != 0 goto label1;

        return 700;

     label1:
        l0 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: long getElapsedTime()>();

        $b1 = l0 cmp 120000L;

        if $b1 > 0 goto label2;

        return 1000;

     label2:
        $b2 = l0 cmp 300000L;

        if $b2 > 0 goto label3;

        return 2000;

     label3:
        return 4000;
    }

    int getReopenLimitMs()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback $r1;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1>;

        $z0 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: boolean shouldActiveResume()>();

        if $z0 != 0 goto label1;

        return 10000;

     label1:
        return 1800000;
    }

    long getElapsedTime()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor r0;
        long l0, $l1, $l3, $l4;
        byte $b2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: long mFirstReopenTime>;

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label1;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: long mFirstReopenTime> = l0;

     label1:
        $l3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: long mFirstReopenTime>;

        $l4 = l0 - $l3;

        return $l4;
    }

    boolean canScheduleCameraReopen()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor r0;
        boolean z0, $z1;
        long $l0, $l2;
        int $i1;
        byte $b3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor;

        $l0 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: long getElapsedTime()>();

        $i1 = virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: int getReopenLimitMs()>();

        $l2 = (long) $i1;

        $b3 = $l0 cmp $l2;

        if $b3 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        if z0 == 0 goto label3;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: void reset()>();

        return 0;

     label3:
        return 1;
    }

    void reset()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor r0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: long mFirstReopenTime> = -1L;

        return;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: boolean mCancelled>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1>
    void <init>(androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback, java.util.concurrent.Executor)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r1;
        java.util.concurrent.Executor r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        r2 := @parameter1: java.util.concurrent.Executor;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: boolean mCancelled> = 0;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: java.util.concurrent.Executor mExecutor> = r2;

        return;
    }

    void cancel()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen r0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: boolean mCancelled> = 1;

        return;
    }

    public void run()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen r0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: java.util.concurrent.Executor mExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: void lambda$run$0()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void lambda$run$0()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen r0;
        boolean $z0, $z1, $z2;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback $r1, $r5, $r6, $r8;
        androidx.camera.camera2.internal.Camera2CameraImpl $r2, $r7, $r9;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r3, $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen;

        $z0 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: boolean mCancelled>;

        if $z0 != 0 goto label4;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1>;

        $r2 = $r1.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r4 = $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r3 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING>;

        if $r4 != $r3 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z2);

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1>;

        $z1 = virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: boolean shouldActiveResume()>();

        if $z1 == 0 goto label3;

        $r8 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1>;

        $r9 = $r8.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r9.<androidx.camera.camera2.internal.Camera2CameraImpl: void tryForceOpenCameraDevice(boolean)>(1);

        goto label4;

     label3:
        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback this$1>;

        $r7 = $r6.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r7.<androidx.camera.camera2.internal.Camera2CameraImpl: void tryOpenCameraDevice(boolean)>(1);

     label4:
        return;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.ScheduledExecutorService mScheduler>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen mScheduledReopenRunnable>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.ScheduledFuture mScheduledReopenHandle>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor mCameraReopenMonitor>
<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>
    void <init>(androidx.camera.camera2.internal.Camera2CameraImpl, java.util.concurrent.Executor, java.util.concurrent.ScheduledExecutorService)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        androidx.camera.camera2.internal.Camera2CameraImpl r1;
        java.util.concurrent.Executor r2;
        java.util.concurrent.ScheduledExecutorService r3;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: java.util.concurrent.ScheduledExecutorService;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0> = r1;

        specialinvoke r0.<android.hardware.camera2.CameraDevice$StateCallback: void <init>()>();

        $r4 = new androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor;

        specialinvoke $r4.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: void <init>(androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback)>(r0);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor mCameraReopenMonitor> = $r4;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.Executor mExecutor> = r2;

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.ScheduledExecutorService mScheduler> = r3;

        return;
    }

    public void onOpened(android.hardware.camera2.CameraDevice)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        android.hardware.camera2.CameraDevice r1, $r13;
        androidx.camera.camera2.internal.Camera2CameraImpl $r2, $r3, $r4, $r5, $r9, $r10, $r11, $r12, $r14, $r18;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r6, $r8, $r19;
        int[] $r7;
        int $i0, $i1;
        boolean $z0;
        java.lang.IllegalStateException $r15;
        java.lang.StringBuilder $r16, $r17, $r20;
        java.lang.String $r21;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("CameraDevice.onOpened()");

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r3.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice> = r1;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r4.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError> = 0;

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: void resetReopenMonitor()>();

        $r7 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r6 = $r5.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $i0 = virtualinvoke $r6.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 3: goto label1;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label1;
            default: goto label3;
        };

     label1:
        $r11 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $z0 = virtualinvoke $r11.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean isSessionCloseComplete()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z0);

        $r12 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r13 = $r12.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        virtualinvoke $r13.<android.hardware.camera2.CameraDevice: void close()>();

        $r14 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r14.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice> = null;

        goto label4;

     label2:
        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r8 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        virtualinvoke $r9.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState)>($r8);

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraImpl: void openCaptureSession()>();

        goto label4;

     label3:
        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onOpened() should not be possible from state: ");

        $r18 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r19 = $r18.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label4:
        return;
    }

    public void onClosed(android.hardware.camera2.CameraDevice)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        android.hardware.camera2.CameraDevice r1, $r4;
        androidx.camera.camera2.internal.Camera2CameraImpl $r2, $r3, $r9, $r12, $r13, $r15, $r17, $r21, $r22, $r26;
        java.lang.StringBuilder $r5, $r6, $r7, $r14, $r16, $r19, $r24, $r25, $r28;
        java.lang.String $r8, $r18, $r20, $r29;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r10, $r27;
        int[] $r11;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r23;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("CameraDevice.onClosed()");

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r4 = $r3.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        if $r4 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected onClose callback on camera device: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, $r8);

        $r11 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r10 = $r9.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $i0 = virtualinvoke $r10.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $i1 = $r11[$i0];

        tableswitch($i1)
        {
            case 3: goto label3;
            case 4: goto label6;
            case 5: goto label6;
            case 6: goto label4;
            case 7: goto label3;
            default: goto label6;
        };

     label3:
        $r21 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $z0 = virtualinvoke $r21.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean isSessionCloseComplete()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z0);

        $r22 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r22.<androidx.camera.camera2.internal.Camera2CameraImpl: void finishClose()>();

        goto label7;

     label4:
        $r12 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $i2 = $r12.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        if $i2 == 0 goto label5;

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera closed due to error: ");

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $i3 = $r17.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        $r18 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getErrorMessage(int)>($i3);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r20);

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: void scheduleCameraReopen()>();

        goto label7;

     label5:
        $r13 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r13.<androidx.camera.camera2.internal.Camera2CameraImpl: void tryOpenCameraDevice(boolean)>(0);

        goto label7;

     label6:
        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera closed while in state: ");

        $r26 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r27 = $r26.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label7:
        return;
    }

    public void onDisconnected(android.hardware.camera2.CameraDevice)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        android.hardware.camera2.CameraDevice r1;
        androidx.camera.camera2.internal.Camera2CameraImpl $r2;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>("CameraDevice.onDisconnected()");

        virtualinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: void onError(android.hardware.camera2.CameraDevice,int)>(r1, 1);

        return;
    }

    public void onError(android.hardware.camera2.CameraDevice, int)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        android.hardware.camera2.CameraDevice r1;
        int i0, $i1, $i2;
        androidx.camera.camera2.internal.Camera2CameraImpl $r2, $r3, $r4, $r10, $r17, $r21, $r25;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r5, $r11, $r18, $r26;
        int[] $r6;
        java.lang.Object[] $r7, $r14;
        java.lang.String $r8, $r9, $r12, $r13, $r15, $r16, $r19, $r20, $r28;
        java.lang.IllegalStateException $r22;
        java.lang.StringBuilder $r23, $r24, $r27;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: android.hardware.camera2.CameraDevice mCameraDevice> = r1;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r3.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError> = i0;

        $r6 = <androidx.camera.camera2.internal.Camera2CameraImpl$3: int[] $SwitchMap$androidx$camera$camera2$internal$Camera2CameraImpl$InternalState>;

        $r4 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r5 = $r4.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $i1 = virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: int ordinal()>();

        $i2 = $r6[$i1];

        tableswitch($i2)
        {
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label1;
            default: goto label3;
        };

     label1:
        $r14 = newarray (java.lang.Object)[3];

        $r15 = virtualinvoke r1.<android.hardware.camera2.CameraDevice: java.lang.String getId()>();

        $r14[0] = $r15;

        $r16 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getErrorMessage(int)>(i0);

        $r14[1] = $r16;

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r18 = $r17.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r19 = virtualinvoke $r18.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: java.lang.String name()>();

        $r14[2] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("CameraDevice.onError(): %s failed with %s while in %s state. Will finish closing camera.", $r14);

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Camera2CameraImpl", $r20);

        $r21 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r21.<androidx.camera.camera2.internal.Camera2CameraImpl: void closeCamera(boolean)>(0);

        goto label4;

     label2:
        $r7 = newarray (java.lang.Object)[3];

        $r8 = virtualinvoke r1.<android.hardware.camera2.CameraDevice: java.lang.String getId()>();

        $r7[0] = $r8;

        $r9 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getErrorMessage(int)>(i0);

        $r7[1] = $r9;

        $r10 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r11 = $r10.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r12 = virtualinvoke $r11.<androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: java.lang.String name()>();

        $r7[2] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("CameraDevice.onError(): %s failed with %s while in %s state. Will attempt recovering from error.", $r7);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CameraImpl", $r13);

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: void handleErrorOnOpen(android.hardware.camera2.CameraDevice,int)>(r1, i0);

        goto label4;

     label3:
        $r22 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onError() should not be possible from state: ");

        $r25 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r26 = $r25.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r22;

     label4:
        return;
    }

    private void handleErrorOnOpen(android.hardware.camera2.CameraDevice, int)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        android.hardware.camera2.CameraDevice r1;
        int i0;
        byte b1, $b2;
        androidx.camera.camera2.internal.Camera2CameraImpl $r2, $r7, $r24, $r27, $r28, $r31;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r3, $r4, $r8, $r25, $r29, $r30, $r32, $r33;
        java.lang.StringBuilder $r5, $r6, $r9, $r15, $r16, $r18, $r19, $r21, $r22;
        java.lang.String $r10, $r12, $r13, $r14, $r17, $r20, $r23;
        java.lang.Object[] $r11;
        androidx.camera.core.CameraState$StateError $r26;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r4 = $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r3 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENING>;

        if $r4 == $r3 goto label1;

        $r28 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r30 = $r28.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r29 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState OPENED>;

        if $r30 == $r29 goto label1;

        $r31 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r33 = $r31.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r32 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING>;

        if $r33 != $r32 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to handle open error from non open state: ");

        $r7 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r8 = $r7.<androidx.camera.camera2.internal.Camera2CameraImpl: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState mState>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, $r10);

        tableswitch(i0)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label4;
            default: goto label5;
        };

     label4:
        $r11 = newarray (java.lang.Object)[2];

        $r12 = virtualinvoke r1.<android.hardware.camera2.CameraDevice: java.lang.String getId()>();

        $r11[0] = $r12;

        $r13 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getErrorMessage(int)>(i0);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Attempt to reopen camera[%s] after error[%s]", $r11);

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("Camera2CameraImpl", $r14);

        specialinvoke r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: void reopenCameraAfterError(int)>(i0);

        goto label8;

     label5:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error observed on open (or opening) camera device ");

        $r17 = virtualinvoke r1.<android.hardware.camera2.CameraDevice: java.lang.String getId()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r20 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getErrorMessage(int)>(i0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" closing camera.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Camera2CameraImpl", $r23);

        if i0 != 3 goto label6;

        $b2 = 5;

        goto label7;

     label6:
        $b2 = 6;

     label7:
        b1 = $b2;

        $r24 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r25 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState CLOSING>;

        $r26 = staticinvoke <androidx.camera.core.CameraState$StateError: androidx.camera.core.CameraState$StateError create(int)>(b1);

        virtualinvoke $r24.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState,androidx.camera.core.CameraState$StateError)>($r25, $r26);

        $r27 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r27.<androidx.camera.camera2.internal.Camera2CameraImpl: void closeCamera(boolean)>(0);

     label8:
        return;
    }

    private void reopenCameraAfterError(int)
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        int i0, $i1;
        androidx.camera.camera2.internal.Camera2CameraImpl $r1, $r2, $r5;
        boolean $z0;
        byte b2;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r3;
        androidx.camera.core.CameraState$StateError $r4;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $i1 = $r1.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Can only reopen camera device after error if the camera device is actually in an error state.");

        lookupswitch(i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label3:
        b2 = 2;

        goto label6;

     label4:
        b2 = 1;

        goto label6;

     label5:
        b2 = 3;

     label6:
        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r3 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState REOPENING>;

        $r4 = staticinvoke <androidx.camera.core.CameraState$StateError: androidx.camera.core.CameraState$StateError create(int)>(b2);

        virtualinvoke $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState,androidx.camera.core.CameraState$StateError)>($r3, $r4);

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        virtualinvoke $r5.<androidx.camera.camera2.internal.Camera2CameraImpl: void closeCamera(boolean)>(0);

        return;
    }

    void scheduleCameraReopen()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen $r1, $r12, $r20, $r28;
        java.util.concurrent.ScheduledFuture $r2, $r30;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor $r3, $r6, $r17, $r26;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r14, $r16, $r18, $r19, $r21, $r22, $r24;
        int $i0, $i1, $i2;
        java.lang.String $r9, $r25;
        androidx.camera.camera2.internal.Camera2CameraImpl$InternalState $r10;
        androidx.camera.camera2.internal.Camera2CameraImpl $r11, $r15, $r23;
        java.util.concurrent.Executor $r13;
        java.util.concurrent.ScheduledExecutorService $r27;
        java.util.concurrent.TimeUnit $r29;
        long $l3;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen mScheduledReopenRunnable>;

        if $r1 != null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z2);

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.ScheduledFuture mScheduledReopenHandle>;

        if $r2 != null goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean)>($z3);

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor mCameraReopenMonitor>;

        $z0 = virtualinvoke $r3.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: boolean canScheduleCameraReopen()>();

        if $z0 == 0 goto label5;

        $r12 = new androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen;

        $r13 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.Executor mExecutor>;

        specialinvoke $r12.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: void <init>(androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback,java.util.concurrent.Executor)>(r0, $r13);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen mScheduledReopenRunnable> = $r12;

        $r15 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting camera re-open in ");

        $r17 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor mCameraReopenMonitor>;

        $i1 = virtualinvoke $r17.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: int getReopenDelayMs()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms: ");

        $r20 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen mScheduledReopenRunnable>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" activeResuming = ");

        $r23 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $z1 = $r23.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean mIsActiveResumingMode>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r25);

        $r27 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.ScheduledExecutorService mScheduler>;

        $r28 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen mScheduledReopenRunnable>;

        $r26 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor mCameraReopenMonitor>;

        $i2 = virtualinvoke $r26.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: int getReopenDelayMs()>();

        $l3 = (long) $i2;

        $r29 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r30 = interfaceinvoke $r27.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r28, $l3, $r29);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.ScheduledFuture mScheduledReopenHandle> = $r30;

        goto label6;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera reopening attempted for ");

        $r6 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor mCameraReopenMonitor>;

        $i0 = virtualinvoke $r6.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: int getReopenLimitMs()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms without success.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("Camera2CameraImpl", $r9);

        $r11 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r10 = <androidx.camera.camera2.internal.Camera2CameraImpl$InternalState: androidx.camera.camera2.internal.Camera2CameraImpl$InternalState PENDING_OPEN>;

        virtualinvoke $r11.<androidx.camera.camera2.internal.Camera2CameraImpl: void setState(androidx.camera.camera2.internal.Camera2CameraImpl$InternalState,androidx.camera.core.CameraState$StateError,boolean)>($r10, null, 0);

     label6:
        return;
    }

    boolean cancelScheduledReopen()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        java.util.concurrent.ScheduledFuture $r1, $r9;
        java.lang.StringBuilder $r2, $r4, $r6;
        androidx.camera.camera2.internal.Camera2CameraImpl $r3;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen $r5, $r8;
        java.lang.String $r7;
        boolean z1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        z1 = 0;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.ScheduledFuture mScheduledReopenHandle>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancelling scheduled re-open: ");

        $r5 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen mScheduledReopenRunnable>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<androidx.camera.camera2.internal.Camera2CameraImpl: void debugLog(java.lang.String)>($r7);

        $r8 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen mScheduledReopenRunnable>;

        virtualinvoke $r8.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen: void cancel()>();

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$ScheduledReopen mScheduledReopenRunnable> = null;

        $r9 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.ScheduledFuture mScheduledReopenHandle>;

        interfaceinvoke $r9.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);

        r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: java.util.concurrent.ScheduledFuture mScheduledReopenHandle> = null;

        z1 = 1;

     label1:
        return z1;
    }

    void resetReopenMonitor()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor $r1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor mCameraReopenMonitor>;

        virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback$CameraReopenMonitor: void reset()>();

        return;
    }

    boolean shouldActiveResume()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback r0;
        androidx.camera.camera2.internal.Camera2CameraImpl $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback;

        $r1 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $z0 = $r1.<androidx.camera.camera2.internal.Camera2CameraImpl: boolean mIsActiveResumingMode>;

        if $z0 == 0 goto label2;

        $r2 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $i0 = $r2.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        if $i0 == 1 goto label1;

        $r3 = r0.<androidx.camera.camera2.internal.Camera2CameraImpl$StateCallback: androidx.camera.camera2.internal.Camera2CameraImpl this$0>;

        $i1 = $r3.<androidx.camera.camera2.internal.Camera2CameraImpl: int mCameraDeviceError>;

        if $i1 != 2 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo
    void <init>()
    {
        androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo r0;

        r0 := @this: androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo create(java.lang.String, java.lang.Class, androidx.camera.core.impl.SessionConfig, androidx.camera.core.impl.UseCaseConfig, android.util.Size)
    {
        java.lang.String r0;
        java.lang.Class r1;
        androidx.camera.core.impl.SessionConfig r2;
        androidx.camera.core.impl.UseCaseConfig r3;
        android.util.Size r4;
        androidx.camera.camera2.internal.AutoValue_Camera2CameraImpl_UseCaseInfo $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: androidx.camera.core.impl.SessionConfig;

        r3 := @parameter3: androidx.camera.core.impl.UseCaseConfig;

        r4 := @parameter4: android.util.Size;

        $r5 = new androidx.camera.camera2.internal.AutoValue_Camera2CameraImpl_UseCaseInfo;

        specialinvoke $r5.<androidx.camera.camera2.internal.AutoValue_Camera2CameraImpl_UseCaseInfo: void <init>(java.lang.String,java.lang.Class,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig,android.util.Size)>(r0, r1, r2, r3, r4);

        return $r5;
    }

    static androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo 'from'(androidx.camera.core.UseCase)
    {
        androidx.camera.core.UseCase r0;
        java.lang.String $r1;
        java.lang.Class $r2;
        androidx.camera.core.impl.SessionConfig $r3;
        androidx.camera.core.impl.UseCaseConfig $r4;
        android.util.Size $r5;
        androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo $r6;

        r0 := @parameter0: androidx.camera.core.UseCase;

        $r1 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl: java.lang.String getUseCaseId(androidx.camera.core.UseCase)>(r0);

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.SessionConfig getSessionConfig()>();

        $r4 = virtualinvoke r0.<androidx.camera.core.UseCase: androidx.camera.core.impl.UseCaseConfig getCurrentConfig()>();

        $r5 = virtualinvoke r0.<androidx.camera.core.UseCase: android.util.Size getAttachedSurfaceResolution()>();

        $r6 = staticinvoke <androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo create(java.lang.String,java.lang.Class,androidx.camera.core.impl.SessionConfig,androidx.camera.core.impl.UseCaseConfig,android.util.Size)>($r1, $r2, $r3, $r4, $r5);

        return $r6;
    }

<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.String getUseCaseId()>
<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: java.lang.Class getUseCaseType()>
<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: androidx.camera.core.impl.SessionConfig getSessionConfig()>
<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: androidx.camera.core.impl.UseCaseConfig getUseCaseConfig()>
<androidx.camera.camera2.internal.Camera2CameraImpl$UseCaseInfo: android.util.Size getSurfaceResolution()>
