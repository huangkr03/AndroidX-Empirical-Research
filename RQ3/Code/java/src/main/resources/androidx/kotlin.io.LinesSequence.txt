kotlin.io.LinesSequence
<kotlin.io.LinesSequence: java.io.BufferedReader reader>
    public void <init>(java.io.BufferedReader)
    {
        kotlin.io.LinesSequence $r0;
        java.io.BufferedReader $r1;

        $r0 := @this: kotlin.io.LinesSequence;

        $r1 := @parameter0: java.io.BufferedReader;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "reader");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.io.LinesSequence: java.io.BufferedReader reader> = $r1;

        return;
    }

    public static final java.io.BufferedReader access$getReader$p(kotlin.io.LinesSequence)
    {
        kotlin.io.LinesSequence $r0;
        java.io.BufferedReader r1;

        $r0 := @parameter0: kotlin.io.LinesSequence;

        r1 = $r0.<kotlin.io.LinesSequence: java.io.BufferedReader reader>;

        return r1;
    }

    public java.util.Iterator iterator()
    {
        kotlin.io.LinesSequence $r0;
        kotlin.io.LinesSequence$iterator$1 $r1;

        $r0 := @this: kotlin.io.LinesSequence;

        $r1 = new kotlin.io.LinesSequence$iterator$1;

        specialinvoke $r1.<kotlin.io.LinesSequence$iterator$1: void <init>(kotlin.io.LinesSequence)>($r0);

        return $r1;
    }

kotlin.io.LinesSequence$iterator$1
<kotlin.io.LinesSequence$iterator$1: boolean done>
<kotlin.io.LinesSequence$iterator$1: java.lang.String nextValue>
<kotlin.io.LinesSequence$iterator$1: kotlin.io.LinesSequence this$0>
    void <init>(kotlin.io.LinesSequence)
    {
        kotlin.io.LinesSequence$iterator$1 $r0;
        kotlin.io.LinesSequence $r1;

        $r0 := @this: kotlin.io.LinesSequence$iterator$1;

        $r1 := @parameter0: kotlin.io.LinesSequence;

        $r0.<kotlin.io.LinesSequence$iterator$1: kotlin.io.LinesSequence this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean hasNext()
    {
        kotlin.io.LinesSequence$iterator$1 $r0;
        java.lang.String $r1;
        boolean $z0;
        kotlin.io.LinesSequence $r2;
        java.io.BufferedReader $r3;

        $r0 := @this: kotlin.io.LinesSequence$iterator$1;

        $r1 = $r0.<kotlin.io.LinesSequence$iterator$1: java.lang.String nextValue>;

        if $r1 != null goto label1;

        $z0 = $r0.<kotlin.io.LinesSequence$iterator$1: boolean done>;

        if $z0 != 0 goto label1;

        $r2 = $r0.<kotlin.io.LinesSequence$iterator$1: kotlin.io.LinesSequence this$0>;

        $r3 = staticinvoke <kotlin.io.LinesSequence: java.io.BufferedReader access$getReader$p(kotlin.io.LinesSequence)>($r2);

        $r1 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>();

        $r0.<kotlin.io.LinesSequence$iterator$1: java.lang.String nextValue> = $r1;

        if $r1 != null goto label1;

        $r0.<kotlin.io.LinesSequence$iterator$1: boolean done> = 1;

     label1:
        $r1 = $r0.<kotlin.io.LinesSequence$iterator$1: java.lang.String nextValue>;

        if $r1 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    public volatile java.lang.Object next()
    {
        kotlin.io.LinesSequence$iterator$1 $r0;
        java.lang.String $r1;

        $r0 := @this: kotlin.io.LinesSequence$iterator$1;

        $r1 = virtualinvoke $r0.<kotlin.io.LinesSequence$iterator$1: java.lang.String next()>();

        return $r1;
    }

    public java.lang.String next()
    {
        kotlin.io.LinesSequence$iterator$1 $r0;
        boolean $z0;
        java.lang.String $r1;
        java.util.NoSuchElementException $r2;

        $r0 := @this: kotlin.io.LinesSequence$iterator$1;

        $z0 = virtualinvoke $r0.<kotlin.io.LinesSequence$iterator$1: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<kotlin.io.LinesSequence$iterator$1: java.lang.String nextValue>;

        $r0.<kotlin.io.LinesSequence$iterator$1: java.lang.String nextValue> = null;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public void remove()
    {
        kotlin.io.LinesSequence$iterator$1 $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.io.LinesSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

