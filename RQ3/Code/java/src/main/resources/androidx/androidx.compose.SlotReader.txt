androidx.compose.SlotReader
<androidx.compose.SlotReader: androidx.compose.SlotTable table>
<androidx.compose.SlotReader: int current>
<androidx.compose.SlotReader: int currentEnd>
<androidx.compose.SlotReader: int nodeIndex>
<androidx.compose.SlotReader: androidx.compose.IntStack startStack>
<androidx.compose.SlotReader: java.lang.Object[] slots>
<androidx.compose.SlotReader: androidx.compose.Group currentGroup>
<androidx.compose.SlotReader: int emptyCount>
<androidx.compose.SlotReader: androidx.compose.IntStack nodeIndexStack>
    public void <init>(androidx.compose.SlotTable)
    {
        androidx.compose.SlotReader r0;
        androidx.compose.SlotTable r1, $r2, $r4, $r7;
        boolean z0, z1, $z3, z4;
        int $i0, $i1, $i2;
        androidx.compose.IntStack $r3, $r6;
        java.lang.Object[] $r5;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9, r11;
        java.lang.Throwable $r10;

        r0 := @this: androidx.compose.SlotReader;

        r1 := @parameter0: androidx.compose.SlotTable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "table");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.SlotReader: androidx.compose.SlotTable table> = r1;

        $r2 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.SlotTable getTable()>();

        $i0 = virtualinvoke $r2.<androidx.compose.SlotTable: int getSize()>();

        r0.<androidx.compose.SlotReader: int currentEnd> = $i0;

        $r3 = new androidx.compose.IntStack;

        specialinvoke $r3.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.SlotReader: androidx.compose.IntStack startStack> = $r3;

        $r4 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.SlotTable getTable()>();

        $r5 = virtualinvoke $r4.<androidx.compose.SlotTable: java.lang.Object[] getSlots$compose_runtime_release()>();

        r0.<androidx.compose.SlotReader: java.lang.Object[] slots> = $r5;

        $r6 = new androidx.compose.IntStack;

        specialinvoke $r6.<androidx.compose.IntStack: void <init>()>();

        r0.<androidx.compose.SlotReader: androidx.compose.IntStack nodeIndexStack> = $r6;

        $r7 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.SlotTable getTable()>();

        $i1 = virtualinvoke $r7.<androidx.compose.SlotTable: int getGapStart$compose_runtime_release()>();

        $i2 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        if $i1 != $i2 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label3;

        r11 = "Gap is not at the end of the slot table";

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        $r10 = (java.lang.Throwable) $r8;

        throw $r10;

     label3:
        return;
    }

    public final androidx.compose.SlotTable getTable()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.SlotTable $r1;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = r0.<androidx.compose.SlotReader: androidx.compose.SlotTable table>;

        return $r1;
    }

    public final int getCurrent()
    {
        androidx.compose.SlotReader r0;
        int $i0;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = r0.<androidx.compose.SlotReader: int current>;

        return $i0;
    }

    public final int getCurrentEnd()
    {
        androidx.compose.SlotReader r0;
        int $i0;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = r0.<androidx.compose.SlotReader: int currentEnd>;

        return $i0;
    }

    public final int getNodeIndex()
    {
        androidx.compose.SlotReader r0;
        int $i0;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = r0.<androidx.compose.SlotReader: int nodeIndex>;

        return $i0;
    }

    public final androidx.compose.IntStack getStartStack$compose_runtime_release()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.IntStack $r1;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = r0.<androidx.compose.SlotReader: androidx.compose.IntStack startStack>;

        return $r1;
    }

    public final boolean isGroup()
    {
        androidx.compose.SlotReader r0;
        int $i0, $i1;
        androidx.compose.Group $r1;
        boolean $z0;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        if $i0 >= $i1 goto label1;

        $r1 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group calculateCurrentGroup()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final androidx.compose.Group getGroup$compose_runtime_release()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.Group $r1;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group assumeGroup()>();

        return $r1;
    }

    public final androidx.compose.Group group$compose_runtime_release(int)
    {
        androidx.compose.SlotReader r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        androidx.compose.Group $r3;

        r0 := @this: androidx.compose.SlotReader;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r2 = $r1[i0];

        $r3 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r2);

        return $r3;
    }

    public final androidx.compose.Group getParentGroup$compose_runtime_release()
    {
        androidx.compose.SlotReader r0;
        java.lang.Object[] $r1;
        int $i0;
        java.lang.Object $r2;
        androidx.compose.Group $r3;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getParentLocation()>();

        $r2 = $r1[$i0];

        $r3 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r2);

        return $r3;
    }

    public final boolean isGroup(int)
    {
        androidx.compose.SlotReader r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: androidx.compose.SlotReader;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r2 = $r1[i0];

        $z0 = $r2 instanceof androidx.compose.Group;

        return $z0;
    }

    public final boolean isNode()
    {
        androidx.compose.SlotReader r0;
        java.lang.Boolean r1, $r3;
        androidx.compose.Group r2;
        boolean $z0, $z1;

        r0 := @this: androidx.compose.SlotReader;

        r2 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group calculateCurrentGroup()>();

        if r2 != null goto label1;

        $r3 = (java.lang.Boolean) null;

        goto label2;

     label1:
        $z0 = virtualinvoke r2.<androidx.compose.Group: boolean isNode()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label2:
        r1 = $r3;

        if r1 != null goto label3;

        $z1 = 0;

        goto label4;

     label3:
        $z1 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

     label4:
        return $z1;
    }

    public final boolean isNode(int)
    {
        androidx.compose.SlotReader r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        androidx.compose.Group $r3;
        boolean $z0;

        r0 := @this: androidx.compose.SlotReader;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r2 = $r1[i0];

        $r3 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r2);

        $z0 = virtualinvoke $r3.<androidx.compose.Group: boolean isNode()>();

        return $z0;
    }

    public final boolean isGroupEnd()
    {
        androidx.compose.SlotReader r0;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: androidx.compose.SlotReader;

        $z0 = virtualinvoke r0.<androidx.compose.SlotReader: boolean getInEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        if $i0 != $i1 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public final boolean getInEmpty()
    {
        androidx.compose.SlotReader r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = r0.<androidx.compose.SlotReader: int emptyCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int getGroupSize()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.Group $r1;
        int $i0;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group assumeGroup()>();

        $i0 = virtualinvoke $r1.<androidx.compose.Group: int getSlots()>();

        return $i0;
    }

    public final int groupSize(int)
    {
        androidx.compose.SlotReader r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        androidx.compose.Group $r3;

        r0 := @this: androidx.compose.SlotReader;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r2 = $r1[i0];

        $r3 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r2);

        $i1 = virtualinvoke $r3.<androidx.compose.Group: int getSlots()>();

        return $i1;
    }

    public final int getGroupEnd()
    {
        androidx.compose.SlotReader r0;
        int $i0;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        return $i0;
    }

    public final int groupEnd(int)
    {
        androidx.compose.SlotReader r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        androidx.compose.Group $r3;

        r0 := @this: androidx.compose.SlotReader;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r2 = $r1[i0];

        $r3 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r2);

        $i1 = virtualinvoke $r3.<androidx.compose.Group: int getSlots()>();

        $i2 = i0 + $i1;

        $i3 = $i2 + 1;

        return $i3;
    }

    public final java.lang.Object getGroupData()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.Group r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        if $i0 >= $i1 goto label2;

        r1 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group calculateCurrentGroup()>();

        if r1 != null goto label1;

        $r2 = null;

        goto label3;

     label1:
        $r2 = virtualinvoke r1.<androidx.compose.Group: java.lang.Object getData()>();

        goto label3;

     label2:
        $r2 = null;

     label3:
        return $r2;
    }

    public final int getGroupKey()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.Group r1;
        int $i0, $i1, $i2;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        if $i0 >= $i1 goto label2;

        r1 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group calculateCurrentGroup()>();

        if r1 == null goto label1;

        $i2 = virtualinvoke r1.<androidx.compose.Group: int getKey()>();

        goto label3;

     label1:
        $i2 = 0;

        goto label3;

     label2:
        $i2 = 0;

     label3:
        return $i2;
    }

    public final java.lang.Object getGroupDataKey()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.Group r1;
        int $i0, $i1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $i1 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        if $i0 >= $i1 goto label2;

        r1 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group calculateCurrentGroup()>();

        if r1 != null goto label1;

        $r2 = null;

        goto label3;

     label1:
        $r2 = virtualinvoke r1.<androidx.compose.Group: java.lang.Object getDataKey()>();

        goto label3;

     label2:
        $r2 = null;

     label3:
        return $r2;
    }

    public final java.lang.Object getGroupNode()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.NodeGroup r1, $r3;
        androidx.compose.Group r2;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.SlotReader;

        r2 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group assumeGroup()>();

        $z0 = r2 instanceof androidx.compose.NodeGroup;

        if $z0 == 0 goto label1;

        $r3 = (androidx.compose.NodeGroup) r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        r1 = $r3;

        if r1 != null goto label3;

        $r4 = null;

        goto label4;

     label3:
        $r4 = virtualinvoke r1.<androidx.compose.NodeGroup: java.lang.Object getNode()>();

     label4:
        return $r4;
    }

    public final int groupKey(int)
    {
        androidx.compose.SlotReader r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        androidx.compose.Group $r3;

        r0 := @this: androidx.compose.SlotReader;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r2 = $r1[i0];

        $r3 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r2);

        $i1 = virtualinvoke $r3.<androidx.compose.Group: int getKey()>();

        return $i1;
    }

    public final int getParentLocation()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.IntStack $r1;
        int $i0;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        $i0 = virtualinvoke $r1.<androidx.compose.IntStack: int peekOr(int)>(0);

        return $i0;
    }

    public final int getParentNodes()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.IntStack $r1, $r3;
        boolean $z0;
        java.lang.Object[] $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        androidx.compose.Group $r5;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        $z0 = virtualinvoke $r1.<androidx.compose.IntStack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r3 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        $i0 = virtualinvoke $r3.<androidx.compose.IntStack: int peek()>();

        $r4 = $r2[$i0];

        $r5 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r5.<androidx.compose.Group: int getNodes()>();

     label2:
        return $i1;
    }

    public final int getParentSlots()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.IntStack $r1, $r3;
        boolean $z0;
        java.lang.Object[] $r2;
        int $i0, $i1;
        java.lang.Object $r4;
        androidx.compose.Group $r5;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        $z0 = virtualinvoke $r1.<androidx.compose.IntStack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r3 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        $i0 = virtualinvoke $r3.<androidx.compose.IntStack: int peek()>();

        $r4 = $r2[$i0];

        $r5 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r4);

        $i1 = virtualinvoke $r5.<androidx.compose.Group: int getSlots()>();

     label2:
        return $i1;
    }

    public final java.lang.Object get(androidx.compose.Anchor)
    {
        androidx.compose.SlotReader r0;
        androidx.compose.Anchor r1;
        int $i0, $i1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.SlotReader;

        r1 := @parameter0: androidx.compose.Anchor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "anchor");

        $i0 = virtualinvoke r1.<androidx.compose.Anchor: int getLoc$compose_runtime_release()>();

        if $i0 < 0 goto label1;

        $r2 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $i1 = virtualinvoke r1.<androidx.compose.Anchor: int getLoc$compose_runtime_release()>();

        $r3 = $r2[$i1];

        goto label2;

     label1:
        $r3 = staticinvoke <androidx.compose.SlotTableKt: java.lang.Object getEMPTY()>();

     label2:
        return $r3;
    }

    public final java.lang.Object get(int)
    {
        androidx.compose.SlotReader r0;
        int i0, $i1;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.compose.SlotReader;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.SlotReader: int emptyCount>;

        if $i1 <= 0 goto label1;

        $r2 = staticinvoke <androidx.compose.SlotTableKt: java.lang.Object getEMPTY()>();

        goto label2;

     label1:
        $r1 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r2 = $r1[i0];

     label2:
        return $r2;
    }

    public final java.lang.Object next()
    {
        androidx.compose.SlotReader r0, r1;
        int i0, $i1, $i2, $i3, $i4;
        androidx.compose.Group $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4, $r5;

        r0 := @this: androidx.compose.SlotReader;

        $i1 = r0.<androidx.compose.SlotReader: int emptyCount>;

        if $i1 <= 0 goto label1;

        $r4 = staticinvoke <androidx.compose.SlotTableKt: java.lang.Object getEMPTY()>();

        return $r4;

     label1:
        $r2 = (androidx.compose.Group) null;

        r0.<androidx.compose.SlotReader: androidx.compose.Group currentGroup> = $r2;

        $i2 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $i3 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        if $i2 >= $i3 goto label2;

        $r3 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        r1 = r0;

        i0 = virtualinvoke r1.<androidx.compose.SlotReader: int getCurrent()>();

        $i4 = i0 + 1;

        r1.<androidx.compose.SlotReader: int current> = $i4;

        $r5 = $r3[i0];

        goto label3;

     label2:
        $r5 = staticinvoke <androidx.compose.SlotTableKt: java.lang.Object getEMPTY()>();

     label3:
        return $r5;
    }

    public final void beginEmpty()
    {
        androidx.compose.SlotReader r0, r1;
        int i0, $i1;

        r0 := @this: androidx.compose.SlotReader;

        r1 = r0;

        i0 = r1.<androidx.compose.SlotReader: int emptyCount>;

        $i1 = i0 + 1;

        r1.<androidx.compose.SlotReader: int emptyCount> = $i1;

        return;
    }

    public final void endEmpty()
    {
        androidx.compose.SlotReader r0, r5;
        int $i0, $i1, i2;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, r4;
        java.lang.Throwable $r3;
        boolean $z1, z2, z3, z4;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = r0.<androidx.compose.SlotReader: int emptyCount>;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z2 = $z1;

        z3 = 0;

        z4 = 0;

        if z2 != 0 goto label3;

        r4 = "Unbalanced begin/end empty";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        $r3 = (java.lang.Throwable) $r1;

        throw $r3;

     label3:
        r5 = r0;

        i2 = r5.<androidx.compose.SlotReader: int emptyCount>;

        $i1 = i2 + -1;

        r5.<androidx.compose.SlotReader: int emptyCount> = $i1;

        return;
    }

    public final void close()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.SlotTable $r1;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.SlotTable getTable()>();

        virtualinvoke $r1.<androidx.compose.SlotTable: void close$compose_runtime_release(androidx.compose.SlotReader)>(r0);

        return;
    }

    public final void startGroup()
    {
        androidx.compose.SlotReader r0;

        r0 := @this: androidx.compose.SlotReader;

        specialinvoke r0.<androidx.compose.SlotReader: void startGroup(int)>(0);

        return;
    }

    public final void startNode()
    {
        androidx.compose.SlotReader r0;

        r0 := @this: androidx.compose.SlotReader;

        specialinvoke r0.<androidx.compose.SlotReader: void startGroup(int)>(1);

        return;
    }

    public final void startDataGroup()
    {
        androidx.compose.SlotReader r0;

        r0 := @this: androidx.compose.SlotReader;

        specialinvoke r0.<androidx.compose.SlotReader: void startGroup(int)>(2);

        return;
    }

    public final int skipGroup()
    {
        androidx.compose.SlotReader r0, r7, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        androidx.compose.Group $r1, r6;
        boolean $z1, $z2, z3, z4, z5;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = r0.<androidx.compose.SlotReader: int emptyCount>;

        if $i0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z3 = $z2;

        z4 = 0;

        z5 = 0;

        if z3 != 0 goto label3;

        r5 = "Cannot skip while in an empty region";

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        $r4 = (java.lang.Throwable) $r2;

        throw $r4;

     label3:
        r6 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group assumeGroup()>();

        r7 = r0;

        $i1 = virtualinvoke r7.<androidx.compose.SlotReader: int getCurrent()>();

        $i2 = virtualinvoke r6.<androidx.compose.Group: int getSlots()>();

        $i3 = $i2 + 1;

        $i4 = $i1 + $i3;

        r7.<androidx.compose.SlotReader: int current> = $i4;

        $r1 = (androidx.compose.Group) null;

        r0.<androidx.compose.SlotReader: androidx.compose.Group currentGroup> = $r1;

        $z1 = virtualinvoke r6.<androidx.compose.Group: boolean isNode()>();

        if $z1 == 0 goto label4;

        $i7 = 1;

        goto label5;

     label4:
        $i7 = virtualinvoke r6.<androidx.compose.Group: int getNodes()>();

     label5:
        i8 = $i7;

        r8 = r0;

        $i5 = virtualinvoke r8.<androidx.compose.SlotReader: int getNodeIndex()>();

        $i6 = $i5 + i8;

        r8.<androidx.compose.SlotReader: int nodeIndex> = $i6;

        return i8;
    }

    public final int skipNode()
    {
        androidx.compose.SlotReader r0;
        int $i0;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int skipGroup()>();

        return $i0;
    }

    public final void skipToGroupEnd()
    {
        androidx.compose.SlotReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        androidx.compose.IntStack $r1, $r3, $r6;
        java.lang.Object[] $r2;
        java.lang.Object $r4;
        androidx.compose.Group $r5, $r7;
        java.lang.IllegalArgumentException $r8, $r11;
        java.lang.String $r9, $r12, r14, r15;
        java.lang.Throwable $r10, $r13;
        boolean $z0, z1, z2, z3, z5, z6, z7;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = r0.<androidx.compose.SlotReader: int emptyCount>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        z1 = $z0;

        z2 = 0;

        z3 = 0;

        if z1 != 0 goto label3;

        r14 = "Cannot skip the enclosing group while in an empty region";

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        $r13 = (java.lang.Throwable) $r11;

        throw $r13;

     label3:
        $r1 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        z5 = virtualinvoke $r1.<androidx.compose.IntStack: boolean isNotEmpty()>();

        z6 = 0;

        z7 = 0;

        if z5 != 0 goto label4;

        r15 = "No enclosing group to skip";

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke r15.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        $r10 = (java.lang.Throwable) $r8;

        throw $r10;

     label4:
        $r2 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r3 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        $i1 = virtualinvoke $r3.<androidx.compose.IntStack: int peek()>();

        $r4 = $r2[$i1];

        $r5 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r4);

        $i2 = virtualinvoke $r5.<androidx.compose.Group: int getNodes()>();

        $r6 = r0.<androidx.compose.SlotReader: androidx.compose.IntStack nodeIndexStack>;

        $i3 = virtualinvoke $r6.<androidx.compose.IntStack: int peek()>();

        $i4 = $i2 + $i3;

        r0.<androidx.compose.SlotReader: int nodeIndex> = $i4;

        $r7 = (androidx.compose.Group) null;

        r0.<androidx.compose.SlotReader: androidx.compose.Group currentGroup> = $r7;

        $i5 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        r0.<androidx.compose.SlotReader: int current> = $i5;

        return;
    }

    public final void reposition(int)
    {
        androidx.compose.SlotReader r0;
        int i0;
        androidx.compose.Group $r1;

        r0 := @this: androidx.compose.SlotReader;

        i0 := @parameter0: int;

        r0.<androidx.compose.SlotReader: int current> = i0;

        $r1 = (androidx.compose.Group) null;

        r0.<androidx.compose.SlotReader: androidx.compose.Group currentGroup> = $r1;

        return;
    }

    public final void endGroup()
    {
        androidx.compose.SlotReader r0;
        boolean z0, $z1, $z2, $z3, z4, z5, z6, z7, z8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10;
        androidx.compose.IntStack $r1, $r2, $r3, $r8;
        java.lang.Object[] $r4, $r6;
        java.lang.Object $r5, $r7;
        androidx.compose.Group $r9, r15, r16;
        java.lang.IllegalArgumentException $r11;
        java.lang.String $r12, r14;
        java.lang.Throwable $r13;

        r0 := @this: androidx.compose.SlotReader;

        $i0 = r0.<androidx.compose.SlotReader: int emptyCount>;

        if $i0 != 0 goto label7;

        $i1 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $i2 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        if $i1 != $i2 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z4 = $z3;

        z5 = 0;

        z6 = 0;

        z7 = 0;

        z8 = 0;

        if z4 != 0 goto label3;

        z0 = 0;

        r14 = "Failed requirement.";

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        $r13 = (java.lang.Throwable) $r11;

        throw $r13;

     label3:
        $r1 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        i8 = virtualinvoke $r1.<androidx.compose.IntStack: int pop()>();

        $r2 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        $z1 = virtualinvoke $r2.<androidx.compose.IntStack: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        return;

     label4:
        $r3 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        i9 = virtualinvoke $r3.<androidx.compose.IntStack: int peekOr(int)>(0);

        $r4 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r5 = $r4[i8];

        r15 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r5);

        $r6 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r7 = $r6[i9];

        r16 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r7);

        $r8 = r0.<androidx.compose.SlotReader: androidx.compose.IntStack nodeIndexStack>;

        $i3 = virtualinvoke $r8.<androidx.compose.IntStack: int pop()>();

        $z2 = virtualinvoke r15.<androidx.compose.Group: boolean isNode()>();

        if $z2 == 0 goto label5;

        $i10 = 1;

        goto label6;

     label5:
        $i10 = virtualinvoke r0.<androidx.compose.SlotReader: int getNodeIndex()>();

     label6:
        $i4 = $i3 + $i10;

        r0.<androidx.compose.SlotReader: int nodeIndex> = $i4;

        $i5 = virtualinvoke r16.<androidx.compose.Group: int getSlots()>();

        $i6 = $i5 + i9;

        $i7 = $i6 + 1;

        r0.<androidx.compose.SlotReader: int currentEnd> = $i7;

        $r9 = (androidx.compose.Group) null;

        r0.<androidx.compose.SlotReader: androidx.compose.Group currentGroup> = $r9;

     label7:
        return;
    }

    public final void endNode()
    {
        androidx.compose.SlotReader r0;

        r0 := @this: androidx.compose.SlotReader;

        virtualinvoke r0.<androidx.compose.SlotReader: void endGroup()>();

        return;
    }

    public final java.util.List extractKeys()
    {
        androidx.compose.SlotReader r0;
        java.util.List r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        androidx.compose.Group r2;
        java.util.ArrayList $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5, $r7;
        androidx.compose.KeyInfo $r6;
        boolean z1;

        r0 := @this: androidx.compose.SlotReader;

        z1 = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.List) $r3;

        $i3 = r0.<androidx.compose.SlotReader: int emptyCount>;

        if $i3 <= 0 goto label1;

        return r1;

     label1:
        i8 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getNodeIndex()>();

        i9 = 0;

     label2:
        $i4 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $i5 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrentEnd()>();

        if $i4 >= $i5 goto label3;

        i1 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $r4 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $r5 = $r4[i1];

        r2 = staticinvoke <androidx.compose.SlotTableKt: androidx.compose.Group access$getAsGroup(java.lang.Object)>($r5);

        $r6 = new androidx.compose.KeyInfo;

        $i6 = virtualinvoke r2.<androidx.compose.Group: int getKey()>();

        $r7 = virtualinvoke r2.<androidx.compose.Group: java.lang.Object getDataKey()>();

        $i7 = virtualinvoke r0.<androidx.compose.SlotReader: int skipGroup()>();

        i2 = i9;

        i9 = i2 + 1;

        specialinvoke $r6.<androidx.compose.KeyInfo: void <init>(int,java.lang.Object,int,int,int,androidx.compose.Group)>($i6, $r7, i1, $i7, i2, r2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label2;

     label3:
        r0.<androidx.compose.SlotReader: int current> = i8;

        r0.<androidx.compose.SlotReader: int nodeIndex> = i0;

        return r1;
    }

    public java.lang.String toString()
    {
        androidx.compose.SlotReader r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1;
        java.lang.String $r7;

        r0 := @this: androidx.compose.SlotReader;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SlotReader(current=");

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", emptyCount=");

        $i1 = r0.<androidx.compose.SlotReader: int emptyCount>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private final void startGroup(int)
    {
        androidx.compose.SlotReader r0, r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        androidx.compose.Group r1, $r4;
        androidx.compose.IntStack $r2, $r3;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, r8;
        java.lang.Throwable $r7;
        boolean $z1, z2, z3, z4;

        r0 := @this: androidx.compose.SlotReader;

        i0 := @parameter0: int;

        $i1 = r0.<androidx.compose.SlotReader: int emptyCount>;

        if $i1 > 0 goto label4;

        $r2 = virtualinvoke r0.<androidx.compose.SlotReader: androidx.compose.IntStack getStartStack$compose_runtime_release()>();

        $i2 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        virtualinvoke $r2.<androidx.compose.IntStack: void push(int)>($i2);

        $r3 = r0.<androidx.compose.SlotReader: androidx.compose.IntStack nodeIndexStack>;

        $i3 = virtualinvoke r0.<androidx.compose.SlotReader: int getNodeIndex()>();

        virtualinvoke $r3.<androidx.compose.IntStack: void push(int)>($i3);

        r0.<androidx.compose.SlotReader: int nodeIndex> = 0;

        r1 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group assumeGroup()>();

        $i4 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        $i5 = virtualinvoke r1.<androidx.compose.Group: int getSlots()>();

        $i6 = $i4 + $i5;

        $i7 = $i6 + 1;

        r0.<androidx.compose.SlotReader: int currentEnd> = $i7;

        $i8 = virtualinvoke r1.<androidx.compose.Group: int getKind()>();

        if $i8 != i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z2 = $z1;

        z3 = 0;

        z4 = 0;

        if z2 != 0 goto label3;

        r8 = "Group kind changed";

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        $r7 = (java.lang.Throwable) $r5;

        throw $r7;

     label3:
        r9 = r0;

        i10 = virtualinvoke r9.<androidx.compose.SlotReader: int getCurrent()>();

        $i9 = i10 + 1;

        r9.<androidx.compose.SlotReader: int current> = $i9;

        $r4 = (androidx.compose.Group) null;

        r0.<androidx.compose.SlotReader: androidx.compose.Group currentGroup> = $r4;

     label4:
        return;
    }

    private final androidx.compose.Group calculateCurrentGroup()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.Group r1, r2, r4, $r6, $r7, r8;
        boolean z0, $z2, z3;
        java.lang.Object[] $r3;
        int $i0;
        java.lang.Object r5;

        r0 := @this: androidx.compose.SlotReader;

        r4 = r0.<androidx.compose.SlotReader: androidx.compose.Group currentGroup>;

        if r4 != null goto label2;

        $r3 = r0.<androidx.compose.SlotReader: java.lang.Object[] slots>;

        $i0 = virtualinvoke r0.<androidx.compose.SlotReader: int getCurrent()>();

        r5 = $r3[$i0];

        $z2 = r5 instanceof androidx.compose.Group;

        if $z2 == 0 goto label1;

        $r6 = (androidx.compose.Group) r5;

        goto label3;

     label1:
        $r6 = null;

        goto label3;

     label2:
        $r6 = r4;

     label3:
        r1 = $r6;

        if r1 != null goto label4;

        $r7 = (androidx.compose.Group) null;

        goto label5;

     label4:
        r8 = r1;

        z3 = 0;

        z0 = 0;

        r2 = r8;

        r0.<androidx.compose.SlotReader: androidx.compose.Group currentGroup> = r2;

        $r7 = r8;

     label5:
        return $r7;
    }

    private final androidx.compose.Group assumeGroup()
    {
        androidx.compose.SlotReader r0;
        androidx.compose.Group r1;
        java.lang.String r2, $r4;
        boolean z0;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r5;

        r0 := @this: androidx.compose.SlotReader;

        r1 = specialinvoke r0.<androidx.compose.SlotReader: androidx.compose.Group calculateCurrentGroup()>();

        if r1 != null goto label1;

        r2 = "Expected a group start";

        z0 = 0;

        $r3 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        $r5 = (java.lang.Throwable) $r3;

        throw $r5;

     label1:
        return r1;
    }

