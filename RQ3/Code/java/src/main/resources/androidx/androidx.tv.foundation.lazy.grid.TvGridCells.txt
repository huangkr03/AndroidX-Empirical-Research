androidx.tv.foundation.lazy.grid.TvGridCells
<androidx.tv.foundation.lazy.grid.TvGridCells: java.util.List calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density,int,int)>
androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive
<androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive: float minSize>
<androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive: int $stable>
    private void <init>(float)
    {
        androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive r0;
        float f0, $f1, $f2, $f3;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, $r3;
        boolean $z1;

        r0 := @this: androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive;

        f0 := @parameter0: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive: float minSize> = f0;

        $f2 = r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive: float minSize>;

        $f1 = (float) 0;

        $f3 = staticinvoke <androidx.compose.ui.unit.Dp: float constructor-impl(float)>($f1);

        $i0 = staticinvoke <androidx.compose.ui.unit.Dp: int compareTo-0680j_4(float,float)>($f2, $f3);

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r3 = "Failed requirement.";

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label3:
        return;
    }

    public java.util.List calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int, int)
    {
        androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive r0;
        androidx.compose.ui.unit.Density $r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        float $f0;
        java.util.List $r2;

        r0 := @this: androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive;

        $r1 := @parameter0: androidx.compose.ui.unit.Density;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $i3 = i0 + i1;

        $f0 = r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive: float minSize>;

        $i4 = interfaceinvoke $r1.<androidx.compose.ui.unit.Density: int roundToPx-0680j_4(float)>($f0);

        $i5 = $i4 + i1;

        $i6 = $i3 / $i5;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i6, 1);

        $r2 = staticinvoke <androidx.tv.foundation.lazy.grid.LazyGridDslKt: java.util.List access$calculateCellsCrossAxisSizeImpl(int,int,int)>(i0, i2, i1);

        return $r2;
    }

    public int hashCode()
    {
        androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive r0;
        float $f0;
        int $i0;

        r0 := @this: androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive;

        $f0 = r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive: float minSize>;

        $i0 = staticinvoke <androidx.compose.ui.unit.Dp: int hashCode-impl(float)>($f0);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        float $f0, $f1;

        r0 := @this: androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive;

        if $z0 == 0 goto label1;

        $f1 = r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive: float minSize>;

        $r2 = (androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive) r1;

        $f0 = $r2.<androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive: float minSize>;

        $z1 = staticinvoke <androidx.compose.ui.unit.Dp: boolean equals-impl0(float,float)>($f1, $f0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void <init>(float, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive r0;
        float f0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive;

        f0 := @parameter0: float;

        $r1 := @parameter1: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Adaptive: void <init>(float)>(f0);

        return;
    }

    static void <clinit>()
    {
        return;
    }

androidx.tv.foundation.lazy.grid.TvGridCells$Fixed
<androidx.tv.foundation.lazy.grid.TvGridCells$Fixed: int count>
<androidx.tv.foundation.lazy.grid.TvGridCells$Fixed: int $stable>
    public void <init>(int)
    {
        androidx.tv.foundation.lazy.grid.TvGridCells$Fixed r0;
        int i0, $i1;
        java.lang.String r1, $r3;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @this: androidx.tv.foundation.lazy.grid.TvGridCells$Fixed;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Fixed: int count> = i0;

        $i1 = r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Fixed: int count>;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        r1 = "Failed requirement.";

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        return;
    }

    public java.util.List calculateCrossAxisCellSizes(androidx.compose.ui.unit.Density, int, int)
    {
        androidx.tv.foundation.lazy.grid.TvGridCells$Fixed r0;
        androidx.compose.ui.unit.Density $r1;
        int i0, i1, $i2;
        java.util.List $r2;

        r0 := @this: androidx.tv.foundation.lazy.grid.TvGridCells$Fixed;

        $r1 := @parameter0: androidx.compose.ui.unit.Density;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $i2 = r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Fixed: int count>;

        $r2 = staticinvoke <androidx.tv.foundation.lazy.grid.LazyGridDslKt: java.util.List access$calculateCellsCrossAxisSizeImpl(int,int,int)>(i0, $i2, i1);

        return $r2;
    }

    public int hashCode()
    {
        androidx.tv.foundation.lazy.grid.TvGridCells$Fixed r0;
        int $i0, $i1;

        r0 := @this: androidx.tv.foundation.lazy.grid.TvGridCells$Fixed;

        $i0 = r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Fixed: int count>;

        $i1 = neg $i0;

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.tv.foundation.lazy.grid.TvGridCells$Fixed r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: androidx.tv.foundation.lazy.grid.TvGridCells$Fixed;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.tv.foundation.lazy.grid.TvGridCells$Fixed;

        if $z0 == 0 goto label1;

        $i1 = r0.<androidx.tv.foundation.lazy.grid.TvGridCells$Fixed: int count>;

        $r2 = (androidx.tv.foundation.lazy.grid.TvGridCells$Fixed) r1;

        $i0 = $r2.<androidx.tv.foundation.lazy.grid.TvGridCells$Fixed: int count>;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void <clinit>()
    {
        return;
    }

