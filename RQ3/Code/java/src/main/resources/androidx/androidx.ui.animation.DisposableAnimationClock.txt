androidx.ui.animation.DisposableAnimationClock
<androidx.ui.animation.DisposableAnimationClock: androidx.animation.AnimationClockObservable clock>
<androidx.ui.animation.DisposableAnimationClock: java.util.concurrent.atomic.AtomicReference allSubscriptions>
    public void <init>(androidx.animation.AnimationClockObservable)
    {
        androidx.ui.animation.DisposableAnimationClock r0;
        androidx.animation.AnimationClockObservable r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        kotlinx.collections.immutable.PersistentSet $r3;

        r0 := @this: androidx.ui.animation.DisposableAnimationClock;

        r1 := @parameter0: androidx.animation.AnimationClockObservable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "clock");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.ui.animation.DisposableAnimationClock: androidx.animation.AnimationClockObservable clock> = r1;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        $r3 = staticinvoke <kotlinx.collections.immutable.ExtensionsKt: kotlinx.collections.immutable.PersistentSet persistentSetOf()>();

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r3);

        r0.<androidx.ui.animation.DisposableAnimationClock: java.util.concurrent.atomic.AtomicReference allSubscriptions> = $r2;

        return;
    }

    public void subscribe(androidx.animation.AnimationClockObserver)
    {
        androidx.ui.animation.DisposableAnimationClock r0;
        androidx.animation.AnimationClockObserver r1;
        kotlinx.collections.immutable.PersistentSet r2, r3, r4, r5, $r10;
        java.util.concurrent.atomic.AtomicReference $r6, $r8;
        java.lang.Object $r7;
        boolean $z0;
        androidx.animation.AnimationClockObservable $r9;

        r0 := @this: androidx.ui.animation.DisposableAnimationClock;

        r1 := @parameter0: androidx.animation.AnimationClockObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "observer");

     label1:
        $r6 = r0.<androidx.ui.animation.DisposableAnimationClock: java.util.concurrent.atomic.AtomicReference allSubscriptions>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r2 = (kotlinx.collections.immutable.PersistentSet) $r7;

        r5 = r2;

        if r5 != null goto label2;

        $r10 = (kotlinx.collections.immutable.PersistentSet) null;

        goto label3;

     label2:
        $r10 = interfaceinvoke r5.<kotlinx.collections.immutable.PersistentSet: kotlinx.collections.immutable.PersistentSet add(java.lang.Object)>(r1);

     label3:
        r4 = $r10;

        if r4 != null goto label4;

        return;

     label4:
        r3 = r4;

        $r8 = r0.<androidx.ui.animation.DisposableAnimationClock: java.util.concurrent.atomic.AtomicReference allSubscriptions>;

        $z0 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r2, r3);

        if $z0 == 0 goto label1;

        $r9 = r0.<androidx.ui.animation.DisposableAnimationClock: androidx.animation.AnimationClockObservable clock>;

        interfaceinvoke $r9.<androidx.animation.AnimationClockObservable: void subscribe(androidx.animation.AnimationClockObserver)>(r1);

        return;
    }

    public void unsubscribe(androidx.animation.AnimationClockObserver)
    {
        androidx.ui.animation.DisposableAnimationClock r0;
        androidx.animation.AnimationClockObserver r1;
        kotlinx.collections.immutable.PersistentSet r2, r7, r8;
        java.util.concurrent.atomic.AtomicReference $r3, $r5;
        java.lang.Object $r4;
        boolean $z0, $z1;
        androidx.animation.AnimationClockObservable $r6;

        r0 := @this: androidx.ui.animation.DisposableAnimationClock;

        r1 := @parameter0: androidx.animation.AnimationClockObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "observer");

     label1:
        $r3 = r0.<androidx.ui.animation.DisposableAnimationClock: java.util.concurrent.atomic.AtomicReference allSubscriptions>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r7 = (kotlinx.collections.immutable.PersistentSet) $r4;

        if r7 != null goto label2;

        return;

     label2:
        r2 = r7;

        r8 = interfaceinvoke r2.<kotlinx.collections.immutable.PersistentSet: kotlinx.collections.immutable.PersistentSet remove(java.lang.Object)>(r1);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, r8);

        if $z0 == 0 goto label3;

        return;

     label3:
        $r5 = r0.<androidx.ui.animation.DisposableAnimationClock: java.util.concurrent.atomic.AtomicReference allSubscriptions>;

        $z1 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r2, r8);

        if $z1 == 0 goto label1;

        $r6 = r0.<androidx.ui.animation.DisposableAnimationClock: androidx.animation.AnimationClockObservable clock>;

        interfaceinvoke $r6.<androidx.animation.AnimationClockObservable: void unsubscribe(androidx.animation.AnimationClockObserver)>(r1);

        return;
    }

    public final void dispose()
    {
        androidx.ui.animation.DisposableAnimationClock r0;
        kotlinx.collections.immutable.PersistentSet r1;
        java.lang.Iterable $r2;
        java.util.Iterator r3;
        java.lang.Object r4, $r7;
        androidx.animation.AnimationClockObserver r5;
        java.util.concurrent.atomic.AtomicReference $r6;
        boolean $z2;
        androidx.animation.AnimationClockObservable $r8;

        r0 := @this: androidx.ui.animation.DisposableAnimationClock;

        $r6 = r0.<androidx.ui.animation.DisposableAnimationClock: java.util.concurrent.atomic.AtomicReference allSubscriptions>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r1 = (kotlinx.collections.immutable.PersistentSet) $r7;

        if r1 != null goto label1;

        goto label3;

     label1:
        $r2 = (java.lang.Iterable) r1;

        r3 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.animation.AnimationClockObserver) r4;

        $r8 = r0.<androidx.ui.animation.DisposableAnimationClock: androidx.animation.AnimationClockObservable clock>;

        interfaceinvoke $r8.<androidx.animation.AnimationClockObservable: void unsubscribe(androidx.animation.AnimationClockObserver)>(r5);

        goto label2;

     label3:
        return;
    }

    public final boolean isDisposed()
    {
        androidx.ui.animation.DisposableAnimationClock r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        kotlinx.collections.immutable.PersistentSet $r3;
        boolean $z0;

        r0 := @this: androidx.ui.animation.DisposableAnimationClock;

        $r1 = r0.<androidx.ui.animation.DisposableAnimationClock: java.util.concurrent.atomic.AtomicReference allSubscriptions>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (kotlinx.collections.immutable.PersistentSet) $r2;

        if $r3 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

