androidx.room.compiler.processing.javac.JavacRoundEnv
<androidx.room.compiler.processing.javac.JavacRoundEnv: androidx.room.compiler.processing.javac.JavacProcessingEnv env>
<androidx.room.compiler.processing.javac.JavacRoundEnv: javax.'annotation'.processing.RoundEnvironment delegate>
<androidx.room.compiler.processing.javac.JavacRoundEnv: kotlin.Lazy rootElements$delegate>
    public void <init>(androidx.room.compiler.processing.javac.JavacProcessingEnv, javax.'annotation'.processing.RoundEnvironment)
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv r0;
        androidx.room.compiler.processing.javac.JavacProcessingEnv r1;
        javax.'annotation'.processing.RoundEnvironment r2;
        androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2 $r3;
        kotlin.jvm.functions.Function0 $r4;
        kotlin.Lazy $r5;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv;

        r1 := @parameter0: androidx.room.compiler.processing.javac.JavacProcessingEnv;

        r2 := @parameter1: javax.'annotation'.processing.RoundEnvironment;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "delegate");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: androidx.room.compiler.processing.javac.JavacProcessingEnv env> = r1;

        r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: javax.'annotation'.processing.RoundEnvironment delegate> = r2;

        $r3 = new androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2;

        specialinvoke $r3.<androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2: void <init>(androidx.room.compiler.processing.javac.JavacRoundEnv)>(r0);

        $r4 = (kotlin.jvm.functions.Function0) $r3;

        $r5 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r4);

        r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: kotlin.Lazy rootElements$delegate> = $r5;

        return;
    }

    public final javax.'annotation'.processing.RoundEnvironment getDelegate()
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv r0;
        javax.'annotation'.processing.RoundEnvironment $r1;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv;

        $r1 = r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: javax.'annotation'.processing.RoundEnvironment delegate>;

        return $r1;
    }

    public java.util.Set getRootElements()
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.Set $r3;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv;

        r1 = r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: kotlin.Lazy rootElements$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.Set) $r2;

        return $r3;
    }

    public boolean isProcessingOver()
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv r0;
        javax.'annotation'.processing.RoundEnvironment $r1;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv;

        $r1 = r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: javax.'annotation'.processing.RoundEnvironment delegate>;

        $z0 = interfaceinvoke $r1.<javax.'annotation'.processing.RoundEnvironment: boolean processingOver()>();

        return $z0;
    }

    public java.util.Set getElementsAnnotatedWith(kotlin.reflect.KClass)
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv r0;
        kotlin.reflect.KClass r1;
        java.util.Set r2, $r7;
        javax.'annotation'.processing.RoundEnvironment $r3;
        java.lang.Class $r4, $r5;
        java.lang.String $r6;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "klass");

        $r3 = r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: javax.'annotation'.processing.RoundEnvironment delegate>;

        $r4 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r1);

        r2 = interfaceinvoke $r3.<javax.'annotation'.processing.RoundEnvironment: java.util.Set getElementsAnnotatedWith(java.lang.Class)>($r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r2, "elements");

        $r5 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getCanonicalName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "klass.java.canonicalName");

        $r7 = specialinvoke r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: java.util.Set wrapAnnotatedElements(java.util.Set,java.lang.String)>(r2, $r6);

        return $r7;
    }

    public java.util.Set getElementsAnnotatedWith(java.lang.String)
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv r0;
        java.lang.String r1;
        javax.lang.model.element.TypeElement r2, $r7;
        java.util.Set r3, $r9, $r10, $r11;
        boolean $z0;
        androidx.room.compiler.processing.javac.JavacProcessingEnv $r4;
        javax.lang.model.util.Elements $r5;
        java.lang.CharSequence $r6;
        javax.'annotation'.processing.RoundEnvironment $r8;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "annotationQualifiedName");

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, "*");

        if $z0 == 0 goto label1;

        $r11 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

        return $r11;

     label1:
        $r4 = r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: androidx.room.compiler.processing.javac.JavacProcessingEnv env>;

        $r5 = virtualinvoke $r4.<androidx.room.compiler.processing.javac.JavacProcessingEnv: javax.lang.model.util.Elements getElementUtils()>();

        $r6 = (java.lang.CharSequence) r1;

        $r7 = interfaceinvoke $r5.<javax.lang.model.util.Elements: javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence)>($r6);

        if $r7 != null goto label2;

        $r10 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>();

        return $r10;

     label2:
        r2 = $r7;

        $r8 = r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: javax.'annotation'.processing.RoundEnvironment delegate>;

        r3 = interfaceinvoke $r8.<javax.'annotation'.processing.RoundEnvironment: java.util.Set getElementsAnnotatedWith(javax.lang.model.element.TypeElement)>(r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "elements");

        $r9 = specialinvoke r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: java.util.Set wrapAnnotatedElements(java.util.Set,java.lang.String)>(r3, r1);

        return $r9;
    }

    private final java.util.Set wrapAnnotatedElements(java.util.Set, java.lang.String)
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv r0;
        java.util.Set r1, $r12;
        java.lang.String r2;
        java.lang.Iterable $r3, $r11;
        java.util.Collection r4, r8;
        java.util.Iterator r5;
        java.lang.Object r6;
        javax.lang.model.element.Element r7;
        java.util.ArrayList $r9;
        int $i0;
        boolean $z3;
        java.util.List $r10;
        androidx.room.compiler.processing.javac.JavacProcessingEnv $r13;
        androidx.room.compiler.processing.XElement $r14;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.String;

        $r3 = (java.lang.Iterable) r1;

        $r9 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10);

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i0);

        r4 = (java.util.Collection) $r9;

        r5 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javax.lang.model.element.Element) r6;

        r8 = r4;

        $r13 = r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: androidx.room.compiler.processing.javac.JavacProcessingEnv env>;

        $r14 = virtualinvoke $r13.<androidx.room.compiler.processing.javac.JavacProcessingEnv: androidx.room.compiler.processing.XElement wrapAnnotatedElement$room_compiler_processing(javax.lang.model.element.Element,java.lang.String)>(r7, r2);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r14);

        goto label1;

     label2:
        $r10 = (java.util.List) r4;

        $r11 = (java.lang.Iterable) $r10;

        $r12 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r11);

        return $r12;
    }

    public static final androidx.room.compiler.processing.javac.JavacProcessingEnv access$getEnv$p(androidx.room.compiler.processing.javac.JavacRoundEnv)
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv $r0;
        androidx.room.compiler.processing.javac.JavacProcessingEnv $r1;

        $r0 := @parameter0: androidx.room.compiler.processing.javac.JavacRoundEnv;

        $r1 = $r0.<androidx.room.compiler.processing.javac.JavacRoundEnv: androidx.room.compiler.processing.javac.JavacProcessingEnv env>;

        return $r1;
    }

androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2
<androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2: androidx.room.compiler.processing.javac.JavacRoundEnv this$0>
    void <init>(androidx.room.compiler.processing.javac.JavacRoundEnv)
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2 r0;
        androidx.room.compiler.processing.javac.JavacRoundEnv $r1;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2;

        $r1 := @parameter0: androidx.room.compiler.processing.javac.JavacRoundEnv;

        r0.<androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2: androidx.room.compiler.processing.javac.JavacRoundEnv this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.Set invoke()
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2 r0;
        java.lang.Iterable $r1, $r14;
        androidx.room.compiler.processing.javac.JavacRoundEnv r2, $r9;
        java.util.Collection r3, r8;
        java.util.Iterator r4;
        java.lang.Object r5;
        javax.lang.model.element.Element r6;
        java.lang.String r7, $r20;
        javax.'annotation'.processing.RoundEnvironment $r10;
        java.util.Set $r11, $r15;
        java.util.ArrayList $r12;
        int $i0;
        boolean $z3, $z4;
        java.util.List $r13;
        androidx.room.compiler.processing.javac.JavacProcessingEnv $r16;
        javax.lang.model.element.TypeElement $r17;
        androidx.room.compiler.processing.javac.JavacTypeElement $r18;
        java.lang.IllegalStateException $r19;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2;

        $r9 = r0.<androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2: androidx.room.compiler.processing.javac.JavacRoundEnv this$0>;

        $r10 = virtualinvoke $r9.<androidx.room.compiler.processing.javac.JavacRoundEnv: javax.'annotation'.processing.RoundEnvironment getDelegate()>();

        $r11 = interfaceinvoke $r10.<javax.'annotation'.processing.RoundEnvironment: java.util.Set getRootElements()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "delegate.rootElements");

        $r1 = (java.lang.Iterable) $r11;

        r2 = r0.<androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2: androidx.room.compiler.processing.javac.JavacRoundEnv this$0>;

        $r12 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r1, 10);

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = (java.util.Collection) $r12;

        r4 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javax.lang.model.element.Element) r5;

        r8 = r3;

        $z4 = staticinvoke <com.google.auto.common.MoreElements: boolean isType(javax.lang.model.element.Element)>(r6);

        if $z4 != 0 goto label2;

        r7 = "Check failed.";

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label2:
        $r16 = staticinvoke <androidx.room.compiler.processing.javac.JavacRoundEnv: androidx.room.compiler.processing.javac.JavacProcessingEnv access$getEnv$p(androidx.room.compiler.processing.javac.JavacRoundEnv)>(r2);

        $r17 = staticinvoke <com.google.auto.common.MoreElements: javax.lang.model.element.TypeElement asType(javax.lang.model.element.Element)>(r6);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "asType(it)");

        $r18 = virtualinvoke $r16.<androidx.room.compiler.processing.javac.JavacProcessingEnv: androidx.room.compiler.processing.javac.JavacTypeElement wrapTypeElement(javax.lang.model.element.TypeElement)>($r17);

        interfaceinvoke r8.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        goto label1;

     label3:
        $r13 = (java.util.List) r3;

        $r14 = (java.lang.Iterable) $r13;

        $r15 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r14);

        return $r15;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2 r0;
        java.util.Set $r1;

        r0 := @this: androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.javac.JavacRoundEnv$rootElements$2: java.util.Set invoke()>();

        return $r1;
    }

