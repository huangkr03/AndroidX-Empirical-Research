androidx.camera.camera2.internal.CaptureSession
<androidx.camera.camera2.internal.CaptureSession: java.lang.String TAG>
<androidx.camera.camera2.internal.CaptureSession: long TIMEOUT_GET_SURFACE_IN_MS>
<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>
<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>
<androidx.camera.camera2.internal.CaptureSession: android.hardware.camera2.CameraCaptureSession$CaptureCallback mCaptureCallback>
<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$StateCallback mCaptureSessionStateCallback>
<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>
<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>
<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>
<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.Config mCameraEventOnRepeatingOptions>
<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.impl.CameraEventCallbacks mCameraEventCallbacks>
<androidx.camera.camera2.internal.CaptureSession: java.util.Map mConfiguredSurfaceMap>
<androidx.camera.camera2.internal.CaptureSession: java.util.List mConfiguredDeferrableSurfaces>
<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>
<androidx.camera.camera2.internal.CaptureSession: com.google.common.util.concurrent.ListenableFuture mReleaseFuture>
<androidx.camera.camera2.internal.CaptureSession: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mReleaseCompleter>
<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.compat.workaround.StillCaptureFlow mStillCaptureFlow>
<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.compat.workaround.TorchStateReset mTorchStateReset>
    void <init>()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.lang.Object $r1;
        java.util.ArrayList $r2;
        androidx.camera.camera2.internal.CaptureSession$1 $r3;
        androidx.camera.core.impl.OptionsBundle $r4;
        androidx.camera.camera2.impl.CameraEventCallbacks $r5;
        java.util.HashMap $r6;
        java.util.List $r7;
        androidx.camera.camera2.internal.CaptureSession$State $r8, $r11;
        androidx.camera.camera2.internal.compat.workaround.StillCaptureFlow $r9;
        androidx.camera.camera2.internal.compat.workaround.TorchStateReset $r10;
        androidx.camera.camera2.internal.CaptureSession$StateCallback $r12;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs> = $r2;

        $r3 = new androidx.camera.camera2.internal.CaptureSession$1;

        specialinvoke $r3.<androidx.camera.camera2.internal.CaptureSession$1: void <init>(androidx.camera.camera2.internal.CaptureSession)>(r0);

        r0.<androidx.camera.camera2.internal.CaptureSession: android.hardware.camera2.CameraCaptureSession$CaptureCallback mCaptureCallback> = $r3;

        $r4 = staticinvoke <androidx.camera.core.impl.OptionsBundle: androidx.camera.core.impl.OptionsBundle emptyBundle()>();

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.Config mCameraEventOnRepeatingOptions> = $r4;

        $r5 = staticinvoke <androidx.camera.camera2.impl.CameraEventCallbacks: androidx.camera.camera2.impl.CameraEventCallbacks createEmptyCallback()>();

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.impl.CameraEventCallbacks mCameraEventCallbacks> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<androidx.camera.camera2.internal.CaptureSession: java.util.Map mConfiguredSurfaceMap> = $r6;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mConfiguredDeferrableSurfaces> = $r7;

        $r8 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State UNINITIALIZED>;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r8;

        $r9 = new androidx.camera.camera2.internal.compat.workaround.StillCaptureFlow;

        specialinvoke $r9.<androidx.camera.camera2.internal.compat.workaround.StillCaptureFlow: void <init>()>();

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.compat.workaround.StillCaptureFlow mStillCaptureFlow> = $r9;

        $r10 = new androidx.camera.camera2.internal.compat.workaround.TorchStateReset;

        specialinvoke $r10.<androidx.camera.camera2.internal.compat.workaround.TorchStateReset: void <init>()>();

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.compat.workaround.TorchStateReset mTorchStateReset> = $r10;

        $r11 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State INITIALIZED>;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r11;

        $r12 = new androidx.camera.camera2.internal.CaptureSession$StateCallback;

        specialinvoke $r12.<androidx.camera.camera2.internal.CaptureSession$StateCallback: void <init>(androidx.camera.camera2.internal.CaptureSession)>(r0);

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$StateCallback mCaptureSessionStateCallback> = $r12;

        return;
    }

    public androidx.camera.core.impl.SessionConfig getSessionConfig()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.lang.Object r1, $r2;
        androidx.camera.core.impl.SessionConfig $r3;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r1 = $r2;

        entermonitor $r2;

        $r3 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        exitmonitor r1;

        return $r3;
    }

    public void setSessionConfig(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        androidx.camera.core.impl.SessionConfig r1, $r11;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r18;
        androidx.camera.camera2.internal.CaptureSession$State $r5, $r15;
        int[] $r6;
        int $i0, $i1;
        java.lang.IllegalStateException $r7, $r12;
        java.util.Map $r8;
        java.util.Set $r9;
        java.util.List $r10;
        boolean $z0;
        java.lang.StringBuilder $r13, $r14, $r16;
        java.lang.String $r17;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $r6 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r5 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r5.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label03;
            case 4: goto label03;
            case 5: goto label04;
            case 6: goto label09;
            case 7: goto label09;
            case 8: goto label09;
            default: goto label10;
        };

     label02:
        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setSessionConfig() should not be possible in state: ");

        $r15 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label03:
        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig> = r1;

        goto label10;

     label04:
        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig> = r1;

        if r1 != null goto label06;

        exitmonitor r2;

     label05:
        return;

     label06:
        $r8 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.Map mConfiguredSurfaceMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        $r10 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $z0 = interfaceinvoke $r9.<java.util.Set: boolean containsAll(java.util.Collection)>($r10);

        if $z0 != 0 goto label08;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureSession", "Does not have the proper configured lists");

        exitmonitor r2;

     label07:
        return;

     label08:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Attempting to submit CaptureRequest after setting");

        $r11 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        virtualinvoke r0.<androidx.camera.camera2.internal.CaptureSession: int issueRepeatingCaptureRequests(androidx.camera.core.impl.SessionConfig)>($r11);

        goto label10;

     label09:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Session configuration cannot be set on a closed/released session.");

        throw $r7;

     label10:
        exitmonitor r2;

     label11:
        goto label14;

     label12:
        $r18 := @caughtexception;

        r3 = $r18;

        exitmonitor r2;

     label13:
        throw r3;

     label14:
        return;

        catch java.lang.Throwable from label01 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public com.google.common.util.concurrent.ListenableFuture open(androidx.camera.core.impl.SessionConfig, android.hardware.camera2.CameraDevice, androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        androidx.camera.core.impl.SessionConfig r1;
        android.hardware.camera2.CameraDevice r2;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener r3, $r14, $r18, $r21;
        java.lang.Object r4, $r8;
        java.util.List r5, $r13;
        androidx.camera.core.impl.utils.futures.FutureChain r6, $r16;
        java.lang.Throwable r7, $r36;
        androidx.camera.camera2.internal.CaptureSession$State $r9, $r11, $r26, $r32;
        int[] $r10;
        int $i0, $i1;
        java.util.ArrayList $r12;
        com.google.common.util.concurrent.ListenableFuture $r15, $r23, $r35;
        androidx.camera.core.impl.utils.futures.AsyncFunction $r17;
        java.util.concurrent.Executor $r19, $r22;
        androidx.camera.camera2.internal.CaptureSession$2 $r20;
        java.lang.StringBuilder $r24, $r25, $r27, $r30, $r31, $r33;
        java.lang.String $r28, $r34;
        java.lang.IllegalStateException $r29;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        r2 := @parameter1: android.hardware.camera2.CameraDevice;

        r3 := @parameter2: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener;

        $r8 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r4 = $r8;

        entermonitor $r8;

     label1:
        $r10 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r9 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r9.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r10[$i0];

        lookupswitch($i1)
        {
            case 2: goto label2;
            default: goto label4;
        };

     label2:
        $r11 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State GET_SURFACE>;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r11;

        r5 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: java.util.List getSurfaces()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(java.util.Collection)>(r5);

        r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mConfiguredDeferrableSurfaces> = $r12;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener> = r3;

        $r14 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mConfiguredDeferrableSurfaces>;

        $r15 = virtualinvoke $r14.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: com.google.common.util.concurrent.ListenableFuture startWithDeferrableSurface(java.util.List,long)>($r13, 5000L);

        $r16 = staticinvoke <androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain 'from'(com.google.common.util.concurrent.ListenableFuture)>($r15);

        $r17 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.camera2.internal.CaptureSession,androidx.camera.core.impl.SessionConfig,android.hardware.camera2.CameraDevice)>(r0, r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.CaptureSession: com.google.common.util.concurrent.ListenableFuture lambda$open$0(androidx.camera.core.impl.SessionConfig,android.hardware.camera2.CameraDevice,java.util.List)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.util.List));

        $r18 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        $r19 = virtualinvoke $r18.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: java.util.concurrent.Executor getExecutor()>();

        r6 = virtualinvoke $r16.<androidx.camera.core.impl.utils.futures.FutureChain: androidx.camera.core.impl.utils.futures.FutureChain transformAsync(androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r17, $r19);

        $r20 = new androidx.camera.camera2.internal.CaptureSession$2;

        specialinvoke $r20.<androidx.camera.camera2.internal.CaptureSession$2: void <init>(androidx.camera.camera2.internal.CaptureSession)>(r0);

        $r21 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        $r22 = virtualinvoke $r21.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: java.util.concurrent.Executor getExecutor()>();

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.FutureCallback,java.util.concurrent.Executor)>(r6, $r20, $r22);

        $r23 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>(r6);

        exitmonitor r4;

     label3:
        return $r23;

     label4:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Open not allowed in state: ");

        $r26 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureSession", $r28);

        $r29 = new java.lang.IllegalStateException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("open() should not allow the state: ");

        $r32 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        $r35 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r29);

        exitmonitor r4;

     label5:
        return $r35;

     label6:
        $r36 := @caughtexception;

        r7 = $r36;

        exitmonitor r4;

     label7:
        throw r7;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private com.google.common.util.concurrent.ListenableFuture openCaptureSession(java.util.List, androidx.camera.core.impl.SessionConfig, android.hardware.camera2.CameraDevice)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.util.List r1, r6, $r18, $r27, $r29, $r45, r76;
        androidx.camera.core.impl.SessionConfig r2;
        android.hardware.camera2.CameraDevice r3;
        java.lang.Object r4, $r10, $r35, $r41, $r43, $r47, $r49;
        androidx.camera.camera2.impl.Camera2ImplConfig r5, $r19;
        androidx.camera.core.impl.CaptureConfig$Builder r7;
        androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat r8;
        java.lang.Throwable r9, $r66, $r67, r80;
        androidx.camera.camera2.internal.CaptureSession$State $r11, $r14, $r55, $r62;
        int[] $r12;
        int $i0, $i1, $i2, $i3, i5;
        java.util.Map $r13, $r36, $r46;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback[] $r15;
        androidx.camera.camera2.internal.CaptureSession$StateCallback $r16;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionStateCallbacks$Adapter $r17;
        androidx.camera.core.impl.Config $r20, $r37, $r39, $r44;
        androidx.camera.camera2.impl.CameraEventCallbacks $r21, $r22, $r23;
        androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback $r24;
        androidx.camera.core.impl.CaptureConfig $r25, r71, $r78;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r26, r72;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener $r28, $r30;
        com.google.common.util.concurrent.ListenableFuture $r31, $r58, $r65, $r68;
        android.hardware.camera2.params.InputConfiguration $r32, $r33;
        androidx.camera.camera2.internal.compat.params.InputConfigurationCompat $r34;
        androidx.camera.core.impl.Config$Option $r38, $r40;
        java.lang.Long $r42;
        long $l4;
        androidx.camera.core.impl.DeferrableSurface $r48;
        android.view.Surface $r50;
        java.lang.IllegalStateException $r52;
        java.lang.StringBuilder $r53, $r54, $r56, $r60, $r61, $r63;
        java.lang.String $r57, $r64, r73;
        java.util.concurrent.CancellationException $r59;
        androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback r69;
        java.util.Iterator r70, r74;
        androidx.camera.core.impl.SessionConfig$OutputConfig r75;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat r77;
        android.hardware.camera2.CaptureRequest r79;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.camera.core.impl.SessionConfig;

        r3 := @parameter2: android.hardware.camera2.CameraDevice;

        $r10 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r4 = $r10;

        entermonitor $r10;

     label01:
        $r12 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r11 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r11.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r12[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label04;
            case 4: goto label18;
            case 5: goto label02;
            default: goto label18;
        };

     label02:
        $r52 = new java.lang.IllegalStateException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("openCaptureSession() should not be possible in state: ");

        $r55 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r57);

        $r58 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r52);

        exitmonitor r4;

     label03:
        return $r58;

     label04:
        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.Map mConfiguredSurfaceMap>;

        interfaceinvoke $r13.<java.util.Map: void clear()>();

        i5 = 0;

     label05:
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if i5 >= $i2 goto label06;

        $r46 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.Map mConfiguredSurfaceMap>;

        $r45 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mConfiguredDeferrableSurfaces>;

        $r47 = interfaceinvoke $r45.<java.util.List: java.lang.Object get(int)>(i5);

        $r48 = (androidx.camera.core.impl.DeferrableSurface) $r47;

        $r49 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r50 = (android.view.Surface) $r49;

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r50);

        i5 = i5 + 1;

        goto label05;

     label06:
        $r14 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENING>;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r14;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Opening capture session.");

        $r15 = newarray (androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback)[2];

        $r16 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$StateCallback mCaptureSessionStateCallback>;

        $r15[0] = $r16;

        $r17 = new androidx.camera.camera2.internal.SynchronizedCaptureSessionStateCallbacks$Adapter;

        $r18 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: java.util.List getSessionStateCallbacks()>();

        specialinvoke $r17.<androidx.camera.camera2.internal.SynchronizedCaptureSessionStateCallbacks$Adapter: void <init>(java.util.List)>($r18);

        $r15[1] = $r17;

        r69 = staticinvoke <androidx.camera.camera2.internal.SynchronizedCaptureSessionStateCallbacks: androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback createComboCallback(androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback[])>($r15);

        $r19 = new androidx.camera.camera2.impl.Camera2ImplConfig;

        $r20 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        specialinvoke $r19.<androidx.camera.camera2.impl.Camera2ImplConfig: void <init>(androidx.camera.core.impl.Config)>($r20);

        r5 = $r19;

        $r21 = staticinvoke <androidx.camera.camera2.impl.CameraEventCallbacks: androidx.camera.camera2.impl.CameraEventCallbacks createEmptyCallback()>();

        $r22 = virtualinvoke r5.<androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.camera2.impl.CameraEventCallbacks getCameraEventCallback(androidx.camera.camera2.impl.CameraEventCallbacks)>($r21);

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.impl.CameraEventCallbacks mCameraEventCallbacks> = $r22;

        $r23 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.impl.CameraEventCallbacks mCameraEventCallbacks>;

        $r24 = virtualinvoke $r23.<androidx.camera.camera2.impl.CameraEventCallbacks: androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback createComboCallback()>();

        r6 = virtualinvoke $r24.<androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback: java.util.List onInitSession()>();

        $r25 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        r7 = staticinvoke <androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder 'from'(androidx.camera.core.impl.CaptureConfig)>($r25);

        r70 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r70.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r43 = interfaceinvoke r70.<java.util.Iterator: java.lang.Object next()>();

        r71 = (androidx.camera.core.impl.CaptureConfig) $r43;

        $r44 = virtualinvoke r71.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        virtualinvoke r7.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r44);

        goto label07;

     label08:
        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        r72 = $r26;

        r73 = virtualinvoke r5.<androidx.camera.camera2.impl.Camera2ImplConfig: java.lang.String getPhysicalCameraId(java.lang.String)>(null);

        $r27 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: java.util.List getOutputConfigs()>();

        r74 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r35 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>();

        r75 = (androidx.camera.core.impl.SessionConfig$OutputConfig) $r35;

        $r36 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.Map mConfiguredSurfaceMap>;

        r8 = specialinvoke r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat getOutputConfigurationCompat(androidx.camera.core.impl.SessionConfig$OutputConfig,java.util.Map,java.lang.String)>(r75, $r36, r73);

        $r37 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        $r38 = <androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.core.impl.Config$Option STREAM_USE_CASE_OPTION>;

        $z2 = interfaceinvoke $r37.<androidx.camera.core.impl.Config: boolean containsOption(androidx.camera.core.impl.Config$Option)>($r38);

        if $z2 == 0 goto label10;

        $r39 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        $r40 = <androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.core.impl.Config$Option STREAM_USE_CASE_OPTION>;

        $r41 = interfaceinvoke $r39.<androidx.camera.core.impl.Config: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option)>($r40);

        $r42 = (java.lang.Long) $r41;

        $l4 = virtualinvoke $r42.<java.lang.Long: long longValue()>();

        virtualinvoke r8.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: void setStreamUseCase(long)>($l4);

     label10:
        interfaceinvoke r72.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label09;

     label11:
        r76 = specialinvoke r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List getUniqueOutputConfigurations(java.util.List)>(r72);

        $r28 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        r77 = virtualinvoke $r28.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat createSessionConfigurationCompat(int,java.util.List,androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback)>(0, r76, r69);

        $i3 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: int getTemplateType()>();

        if $i3 != 5 goto label12;

        $r32 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>();

        if $r32 == null goto label12;

        $r33 = virtualinvoke r2.<androidx.camera.core.impl.SessionConfig: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>();

        $r34 = staticinvoke <androidx.camera.camera2.internal.compat.params.InputConfigurationCompat: androidx.camera.camera2.internal.compat.params.InputConfigurationCompat wrap(java.lang.Object)>($r33);

        virtualinvoke r77.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: void setInputConfiguration(androidx.camera.camera2.internal.compat.params.InputConfigurationCompat)>($r34);

     label12:
        $r78 = virtualinvoke r7.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        r79 = staticinvoke <androidx.camera.camera2.internal.Camera2CaptureRequestBuilder: android.hardware.camera2.CaptureRequest buildWithoutTarget(androidx.camera.core.impl.CaptureConfig,android.hardware.camera2.CameraDevice)>($r78, r3);

        if r79 == null goto label13;

        virtualinvoke r77.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: void setSessionParameters(android.hardware.camera2.CaptureRequest)>(r79);

     label13:
        goto label16;

     label14:
        $r67 := @caughtexception;

        r80 = $r67;

        $r68 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>(r80);

        exitmonitor r4;

     label15:
        return $r68;

     label16:
        $r30 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        $r29 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mConfiguredDeferrableSurfaces>;

        $r31 = virtualinvoke $r30.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: com.google.common.util.concurrent.ListenableFuture openCaptureSession(android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat,java.util.List)>(r3, r77, $r29);

        exitmonitor r4;

     label17:
        return $r31;

     label18:
        $r59 = new java.util.concurrent.CancellationException;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("openCaptureSession() not execute in state: ");

        $r62 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r59.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>($r64);

        $r65 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>($r59);

        exitmonitor r4;

     label19:
        return $r65;

     label20:
        $r66 := @caughtexception;

        r9 = $r66;

        exitmonitor r4;

     label21:
        throw r9;

        catch android.hardware.camera2.CameraAccessException from label12 to label13 with label14;
        catch java.lang.Throwable from label01 to label03 with label20;
        catch java.lang.Throwable from label04 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private java.util.List getUniqueOutputConfigurations(java.util.List)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.util.List r1;
        java.util.ArrayList r2, r3, $r6, $r7;
        java.util.Iterator r4;
        androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat r5;
        java.lang.Object $r8;
        android.view.Surface $r9, $r10;
        boolean $z0, $z3;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: java.util.List;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat) $r8;

        $r9 = virtualinvoke r5.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: android.view.Surface getSurface()>();

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r10 = virtualinvoke r5.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: android.view.Surface getSurface()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label1;

     label3:
        return r3;
    }

    private androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat getOutputConfigurationCompat(androidx.camera.core.impl.SessionConfig$OutputConfig, java.util.Map, java.lang.String)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        androidx.camera.core.impl.SessionConfig$OutputConfig r1;
        java.util.Map r2;
        java.lang.String r3, $r13;
        android.view.Surface r4, r8;
        androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat r5, $r12;
        java.util.Iterator r6;
        androidx.camera.core.impl.DeferrableSurface r7, $r9;
        java.lang.Object $r10, $r16, $r17;
        int $i0;
        java.util.List $r14, $r15;
        boolean $z0, $z1;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig$OutputConfig;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.lang.String;

        $r9 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$OutputConfig: androidx.camera.core.impl.DeferrableSurface getSurface()>();

        $r10 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r4 = (android.view.Surface) $r10;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "Surface in OutputConfig not found in configuredSurfaceMap.");

        $r12 = new androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat;

        $i0 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$OutputConfig: int getSurfaceGroupId()>();

        specialinvoke $r12.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: void <init>(int,android.view.Surface)>($i0, r4);

        r5 = $r12;

        if r3 == null goto label1;

        virtualinvoke r5.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: void setPhysicalCameraId(java.lang.String)>(r3);

        goto label2;

     label1:
        $r13 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$OutputConfig: java.lang.String getPhysicalCameraId()>();

        virtualinvoke r5.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: void setPhysicalCameraId(java.lang.String)>($r13);

     label2:
        $r14 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$OutputConfig: java.util.List getSharedSurfaces()>();

        $z0 = interfaceinvoke $r14.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        virtualinvoke r5.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: void enableSurfaceSharing()>();

        $r15 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig$OutputConfig: java.util.List getSharedSurfaces()>();

        r6 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r16 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (androidx.camera.core.impl.DeferrableSurface) $r16;

        $r17 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (android.view.Surface) $r17;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r8, "Surface in OutputConfig not found in configuredSurfaceMap.");

        virtualinvoke r5.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: void addSurface(android.view.Surface)>(r8);

        goto label3;

     label4:
        return r5;
    }

    public void close()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.lang.Object r1, $r5;
        java.util.List r2, $r12;
        java.lang.Throwable r3, r4, $r28, $r29;
        androidx.camera.camera2.internal.CaptureSession$State $r6, $r16, $r21, $r25, $r33, $r37;
        int[] $r7;
        int $i0, $i1;
        androidx.camera.core.impl.SessionConfig $r8;
        androidx.camera.camera2.impl.CameraEventCallbacks $r10;
        androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback $r11;
        boolean $z1;
        java.lang.StringBuilder $r13, $r15, $r17, $r23, $r24, $r26, $r31, $r32, $r34;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener $r14, $r20, $r30, $r36;
        java.lang.String $r18, $r27, $r35;
        java.lang.IllegalStateException $r22;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        $r5 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $r7 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r6 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r6.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label03;
            case 4: goto label09;
            case 5: goto label05;
            case 6: goto label10;
            case 7: goto label10;
            case 8: goto label10;
            default: goto label10;
        };

     label02:
        $r22 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close() should not be possible in state: ");

        $r25 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw $r22;

     label03:
        $r14 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The Opener shouldn\'t null in state:");

        $r16 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r14, $r18);

        $r20 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        virtualinvoke $r20.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: boolean stop()>();

     label04:
        $r21 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASED>;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r21;

        goto label10;

     label05:
        $r8 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        if $r8 == null goto label09;

        $r10 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.impl.CameraEventCallbacks mCameraEventCallbacks>;

        $r11 = virtualinvoke $r10.<androidx.camera.camera2.impl.CameraEventCallbacks: androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback createComboCallback()>();

        r2 = virtualinvoke $r11.<androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback: java.util.List onDisableSession()>();

        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label09;

     label06:
        $r12 = virtualinvoke r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List setupConfiguredSurface(java.util.List)>(r2);

        virtualinvoke r0.<androidx.camera.camera2.internal.CaptureSession: void issueCaptureRequests(java.util.List)>($r12);

     label07:
        goto label09;

     label08:
        $r28 := @caughtexception;

        r3 = $r28;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CaptureSession", "Unable to issue the request before close the capture session", r3);

     label09:
        $r30 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The Opener shouldn\'t null in state:");

        $r33 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r30, $r35);

        $r36 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        virtualinvoke $r36.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: boolean stop()>();

        $r37 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State CLOSED>;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r37;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig> = null;

        goto label10;

     label10:
        exitmonitor r1;

     label11:
        goto label14;

     label12:
        $r29 := @caughtexception;

        r4 = $r29;

        exitmonitor r1;

     label13:
        throw r4;

     label14:
        return;

        catch java.lang.IllegalStateException from label06 to label07 with label08;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public com.google.common.util.concurrent.ListenableFuture release(boolean)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        boolean z0, $z2;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, r3, $r30, $r31;
        androidx.camera.camera2.internal.CaptureSession$State $r5, $r18, $r23, $r27, $r35, $r39;
        int[] $r6;
        int $i0, $i1;
        com.google.common.util.concurrent.ListenableFuture $r7, $r8, $r10, $r13;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r9;
        androidx.camera.camera2.internal.SynchronizedCaptureSession $r11, $r14, $r32;
        java.lang.StringBuilder $r15, $r17, $r19, $r25, $r26, $r28, $r37, $r38, $r40;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener $r16, $r22, $r36, $r42;
        java.lang.String $r20, $r29, $r41;
        java.lang.IllegalStateException $r24;
        androidx.camera.camera2.impl.CameraEventCallbacks $r33;
        androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback $r34;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        z0 := @parameter0: boolean;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $r6 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r5 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r5.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label13;
            case 3: goto label12;
            case 4: goto label08;
            case 5: goto label03;
            case 6: goto label03;
            case 7: goto label09;
            case 8: goto label14;
            default: goto label14;
        };

     label02:
        $r24 = new java.lang.IllegalStateException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("release() should not be possible in state: ");

        $r27 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label03:
        $r11 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        if $r11 == null goto label08;

        if z0 == 0 goto label07;

     label04:
        $r14 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        interfaceinvoke $r14.<androidx.camera.camera2.internal.SynchronizedCaptureSession: void abortCaptures()>();

     label05:
        goto label07;

     label06:
        $r30 := @caughtexception;

        r2 = $r30;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CaptureSession", "Unable to abort captures.", r2);

     label07:
        $r32 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        interfaceinvoke $r32.<androidx.camera.camera2.internal.SynchronizedCaptureSession: void close()>();

     label08:
        $r33 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.impl.CameraEventCallbacks mCameraEventCallbacks>;

        $r34 = virtualinvoke $r33.<androidx.camera.camera2.impl.CameraEventCallbacks: androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback createComboCallback()>();

        virtualinvoke $r34.<androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback: void onDeInitSession()>();

        $r35 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASING>;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r35;

        $r36 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The Opener shouldn\'t null in state:");

        $r39 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r36, $r41);

        $r42 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        $z2 = virtualinvoke $r42.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: boolean stop()>();

        if $z2 == 0 goto label09;

        virtualinvoke r0.<androidx.camera.camera2.internal.CaptureSession: void finishClose()>();

        goto label14;

     label09:
        $r7 = r0.<androidx.camera.camera2.internal.CaptureSession: com.google.common.util.concurrent.ListenableFuture mReleaseFuture>;

        if $r7 != null goto label10;

        $r9 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.internal.CaptureSession)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.CaptureSession: java.lang.Object lambda$release$1(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r10 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r9);

        r0.<androidx.camera.camera2.internal.CaptureSession: com.google.common.util.concurrent.ListenableFuture mReleaseFuture> = $r10;

     label10:
        $r8 = r0.<androidx.camera.camera2.internal.CaptureSession: com.google.common.util.concurrent.ListenableFuture mReleaseFuture>;

        exitmonitor r1;

     label11:
        return $r8;

     label12:
        $r16 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The Opener shouldn\'t null in state:");

        $r18 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r16, $r20);

        $r22 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        virtualinvoke $r22.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: boolean stop()>();

     label13:
        $r23 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASED>;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r23;

     label14:
        exitmonitor r1;

     label15:
        goto label18;

     label16:
        $r31 := @caughtexception;

        r3 = $r31;

        exitmonitor r1;

     label17:
        throw r3;

     label18:
        $r13 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(null);

        return $r13;

        catch android.hardware.camera2.CameraAccessException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label11 with label16;
        catch java.lang.Throwable from label12 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public void issueCaptureRequests(java.util.List)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.util.List r1, $r8, $r9;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r16;
        androidx.camera.camera2.internal.CaptureSession$State $r5, $r13;
        int[] $r6;
        int $i0, $i1;
        java.lang.IllegalStateException $r7, $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.lang.String $r15;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: java.util.List;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $r6 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r5 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r5.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label03;
            case 4: goto label03;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label05;
            case 8: goto label05;
            default: goto label06;
        };

     label02:
        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("issueCaptureRequests() should not be possible in state: ");

        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label03:
        $r9 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        goto label06;

     label04:
        $r8 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        interfaceinvoke $r8.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        virtualinvoke r0.<androidx.camera.camera2.internal.CaptureSession: void issuePendingCaptureRequest()>();

        goto label06;

     label05:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot issue capture request on a closed/released session.");

        throw $r7;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r2;

     label09:
        throw r3;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.util.List getCaptureConfigs()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.util.List $r4, $r5;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        $r3 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        exitmonitor r1;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    androidx.camera.camera2.internal.CaptureSession$State getState()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.lang.Object r1, $r2;
        androidx.camera.camera2.internal.CaptureSession$State $r3;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r1 = $r2;

        entermonitor $r2;

        $r3 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        exitmonitor r1;

        return $r3;
    }

    void finishClose()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        androidx.camera.camera2.internal.CaptureSession$State $r1, $r2, $r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r4, $r5;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r1 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASED>;

        if $r2 != $r1 goto label1;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Skipping finishClose due to being state RELEASED.");

        return;

     label1:
        $r3 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASED>;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r3;

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession> = null;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mReleaseCompleter>;

        if $r4 == null goto label2;

        $r5 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mReleaseCompleter>;

        virtualinvoke $r5.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mReleaseCompleter> = null;

     label2:
        return;
    }

    int issueRepeatingCaptureRequests(androidx.camera.core.impl.SessionConfig)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        androidx.camera.core.impl.SessionConfig r1;
        java.lang.Object r2, $r7;
        androidx.camera.core.impl.CaptureConfig r3, $r14;
        android.hardware.camera2.CaptureRequest r4;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r5, $r20;
        java.lang.Throwable r6, $r23, $r24, $r30, r36, r38;
        java.util.List $r8, $r11, $r18;
        boolean $z0;
        androidx.camera.camera2.impl.CameraEventCallbacks $r9;
        androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback $r10;
        androidx.camera.core.impl.Config $r12, $r13;
        androidx.camera.camera2.internal.SynchronizedCaptureSession $r15, $r21, $r22;
        android.hardware.camera2.CameraDevice $r16;
        java.util.Map $r17;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback[] $r19;
        int $i0;
        java.lang.StringBuilder $r25, $r26, $r28, $r31, $r32, $r34;
        java.lang.String $r27, $r29, $r33, $r35;
        androidx.camera.core.impl.CaptureConfig$Builder r37;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        $r7 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        if r1 != null goto label03;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Skipping issueRepeatingCaptureRequests for no configuration case.");

        exitmonitor r2;

     label02:
        return -1;

     label03:
        r3 = virtualinvoke r1.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        $r8 = virtualinvoke r3.<androidx.camera.core.impl.CaptureConfig: java.util.List getSurfaces()>();

        $z0 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label09;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Skipping issueRepeatingCaptureRequests for no surface.");

     label04:
        $r22 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        interfaceinvoke $r22.<androidx.camera.camera2.internal.SynchronizedCaptureSession: void stopRepeating()>();

     label05:
        goto label07;

     label06:
        $r30 := @caughtexception;

        r36 = $r30;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access camera: ");

        $r33 = virtualinvoke r36.<android.hardware.camera2.CameraAccessException: java.lang.String getMessage()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureSession", $r35);

        staticinvoke <java.lang.Thread: void dumpStack()>();

     label07:
        exitmonitor r2;

     label08:
        return -1;

     label09:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Issuing request for session.");

        r37 = staticinvoke <androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder 'from'(androidx.camera.core.impl.CaptureConfig)>(r3);

        $r9 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.impl.CameraEventCallbacks mCameraEventCallbacks>;

        $r10 = virtualinvoke $r9.<androidx.camera.camera2.impl.CameraEventCallbacks: androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback createComboCallback()>();

        $r11 = virtualinvoke $r10.<androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback: java.util.List onRepeating()>();

        $r12 = staticinvoke <androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.Config mergeOptions(java.util.List)>($r11);

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.Config mCameraEventOnRepeatingOptions> = $r12;

        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.Config mCameraEventOnRepeatingOptions>;

        virtualinvoke r37.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r13);

        $r14 = virtualinvoke r37.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        $r15 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        $r16 = interfaceinvoke $r15.<androidx.camera.camera2.internal.SynchronizedCaptureSession: android.hardware.camera2.CameraDevice getDevice()>();

        $r17 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.Map mConfiguredSurfaceMap>;

        r4 = staticinvoke <androidx.camera.camera2.internal.Camera2CaptureRequestBuilder: android.hardware.camera2.CaptureRequest build(androidx.camera.core.impl.CaptureConfig,android.hardware.camera2.CameraDevice,java.util.Map)>($r14, $r16, $r17);

        if r4 != null goto label12;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Skipping issuing empty request for session.");

     label10:
        exitmonitor r2;

     label11:
        return -1;

     label12:
        $r18 = virtualinvoke r3.<androidx.camera.core.impl.CaptureConfig: java.util.List getCameraCaptureCallbacks()>();

        $r19 = newarray (android.hardware.camera2.CameraCaptureSession$CaptureCallback)[1];

        $r20 = r0.<androidx.camera.camera2.internal.CaptureSession: android.hardware.camera2.CameraCaptureSession$CaptureCallback mCaptureCallback>;

        $r19[0] = $r20;

        r5 = specialinvoke r0.<androidx.camera.camera2.internal.CaptureSession: android.hardware.camera2.CameraCaptureSession$CaptureCallback createCamera2CaptureCallback(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback[])>($r18, $r19);

        $r21 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        $i0 = interfaceinvoke $r21.<androidx.camera.camera2.internal.SynchronizedCaptureSession: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r4, r5);

     label13:
        exitmonitor r2;

     label14:
        return $i0;

     label15:
        $r24 := @caughtexception;

        r38 = $r24;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access camera: ");

        $r27 = virtualinvoke r38.<android.hardware.camera2.CameraAccessException: java.lang.String getMessage()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureSession", $r29);

        staticinvoke <java.lang.Thread: void dumpStack()>();

        exitmonitor r2;

     label16:
        return -1;

     label17:
        $r23 := @caughtexception;

        r6 = $r23;

        exitmonitor r2;

     label18:
        throw r6;

        catch android.hardware.camera2.CameraAccessException from label04 to label05 with label06;
        catch android.hardware.camera2.CameraAccessException from label09 to label10 with label15;
        catch android.hardware.camera2.CameraAccessException from label12 to label13 with label15;
        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label08 with label17;
        catch java.lang.Throwable from label09 to label11 with label17;
        catch java.lang.Throwable from label12 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    void issuePendingCaptureRequest()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.lang.Throwable r1, $r5;
        java.util.List $r2, $r3, $r4, $r6;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        $r2 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        virtualinvoke r0.<androidx.camera.camera2.internal.CaptureSession: int issueBurstCaptureRequest(java.util.List)>($r3);

     label2:
        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        throw r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    int issueBurstCaptureRequest(java.util.List)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.util.List r1, $r19, $r23, $r24, $r32;
        java.lang.Object r2, $r10, $r16, $r22, $r33, $r39;
        java.util.ArrayList r3, r6, $r12, $r31;
        java.util.Iterator r4, r7, r53;
        androidx.camera.core.impl.CaptureConfig r5, $r27, $r35;
        androidx.camera.core.impl.CameraCaptureCallback r8;
        java.lang.Throwable r9, $r45, $r46, r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, z9, $z10, z11;
        androidx.camera.camera2.internal.CameraBurstCaptureCallback $r11, r52;
        androidx.camera.camera2.internal.compat.workaround.StillCaptureFlow $r13;
        androidx.camera.camera2.internal.compat.workaround.TorchStateReset $r14;
        androidx.camera.camera2.internal.SynchronizedCaptureSession $r15, $r20, $r28;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.camera.camera2.internal.CaptureSession$3 $r17;
        android.hardware.camera2.CaptureRequest $r18, r57;
        androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback $r21;
        androidx.camera.core.impl.Config $r25, $r26, $r36;
        android.hardware.camera2.CameraDevice $r29;
        java.util.Map $r30, $r40;
        androidx.camera.core.impl.SessionConfig $r34, $r56;
        androidx.camera.core.impl.CameraCaptureResult $r37, $r38;
        java.lang.StringBuilder $r41, $r42, $r43, $r47, $r48, $r50;
        java.lang.String $r44, $r49, $r51;
        androidx.camera.core.impl.DeferrableSurface r54;
        androidx.camera.core.impl.CaptureConfig$Builder r55;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: java.util.List;

        $r10 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r10;

        entermonitor $r10;

     label01:
        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        exitmonitor r2;

     label02:
        return -1;

     label03:
        $r11 = new androidx.camera.camera2.internal.CameraBurstCaptureCallback;

        specialinvoke $r11.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: void <init>()>();

        r52 = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r3 = $r12;

        z9 = 0;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Issuing capture request.");

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z10 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label18;

        $r22 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.camera.core.impl.CaptureConfig) $r22;

        $r23 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig: java.util.List getSurfaces()>();

        $z4 = interfaceinvoke $r23.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label05;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Skipping issuing empty capture request.");

        goto label04;

     label05:
        z11 = 1;

        $r24 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig: java.util.List getSurfaces()>();

        r53 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label08;

        $r39 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (androidx.camera.core.impl.DeferrableSurface) $r39;

        $r40 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.Map mConfiguredSurfaceMap>;

        $z8 = interfaceinvoke $r40.<java.util.Map: boolean containsKey(java.lang.Object)>(r54);

        if $z8 != 0 goto label07;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping capture request with invalid surface: ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", $r44);

        z11 = 0;

        goto label08;

     label07:
        goto label06;

     label08:
        if z11 != 0 goto label09;

        goto label04;

     label09:
        $i3 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        if $i3 != 2 goto label10;

        z9 = 1;

     label10:
        r55 = staticinvoke <androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder 'from'(androidx.camera.core.impl.CaptureConfig)>(r5);

        $i4 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig: int getTemplateType()>();

        if $i4 != 5 goto label11;

        $r37 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.CameraCaptureResult getCameraCaptureResult()>();

        if $r37 == null goto label11;

        $r38 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.CameraCaptureResult getCameraCaptureResult()>();

        virtualinvoke r55.<androidx.camera.core.impl.CaptureConfig$Builder: void setCameraCaptureResult(androidx.camera.core.impl.CameraCaptureResult)>($r38);

     label11:
        $r56 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        if $r56 == null goto label12;

        $r34 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        $r35 = virtualinvoke $r34.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        $r36 = virtualinvoke $r35.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        virtualinvoke r55.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r36);

     label12:
        $r25 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.Config mCameraEventOnRepeatingOptions>;

        virtualinvoke r55.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r25);

        $r26 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        virtualinvoke r55.<androidx.camera.core.impl.CaptureConfig$Builder: void addImplementationOptions(androidx.camera.core.impl.Config)>($r26);

        $r27 = virtualinvoke r55.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        $r28 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        $r29 = interfaceinvoke $r28.<androidx.camera.camera2.internal.SynchronizedCaptureSession: android.hardware.camera2.CameraDevice getDevice()>();

        $r30 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.Map mConfiguredSurfaceMap>;

        r57 = staticinvoke <androidx.camera.camera2.internal.Camera2CaptureRequestBuilder: android.hardware.camera2.CaptureRequest build(androidx.camera.core.impl.CaptureConfig,android.hardware.camera2.CameraDevice,java.util.Map)>($r27, $r29, $r30);

        if r57 != null goto label15;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Skipping issuing request without surface.");

     label13:
        exitmonitor r2;

     label14:
        return -1;

     label15:
        $r31 = new java.util.ArrayList;

        specialinvoke $r31.<java.util.ArrayList: void <init>()>();

        r6 = $r31;

        $r32 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig: java.util.List getCameraCaptureCallbacks()>();

        r7 = interfaceinvoke $r32.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z6 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label17;

        $r33 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (androidx.camera.core.impl.CameraCaptureCallback) $r33;

        staticinvoke <androidx.camera.camera2.internal.CaptureCallbackConverter: void toCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback,java.util.List)>(r8, r6);

        goto label16;

     label17:
        virtualinvoke r52.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: void addCamera2Callbacks(android.hardware.camera2.CaptureRequest,java.util.List)>(r57, r6);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r57);

        goto label04;

     label18:
        $z1 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label23;

        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.compat.workaround.StillCaptureFlow mStillCaptureFlow>;

        $z2 = virtualinvoke $r13.<androidx.camera.camera2.internal.compat.workaround.StillCaptureFlow: boolean shouldStopRepeatingBeforeCapture(java.util.List,boolean)>(r3, z9);

        if $z2 == 0 goto label19;

        $r20 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        interfaceinvoke $r20.<androidx.camera.camera2.internal.SynchronizedCaptureSession: void stopRepeating()>();

        $r21 = dynamicinvoke "onCaptureSequenceCompletedOrAborted" <androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback (androidx.camera.camera2.internal.CaptureSession)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(android.hardware.camera2.CameraCaptureSession,int,boolean), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.CaptureSession: void lambda$issueBurstCaptureRequest$2(android.hardware.camera2.CameraCaptureSession,int,boolean)>, methodtype: void __METHODTYPE__(android.hardware.camera2.CameraCaptureSession,int,boolean));

        virtualinvoke r52.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: void setCaptureSequenceCallback(androidx.camera.camera2.internal.CameraBurstCaptureCallback$CaptureSequenceCallback)>($r21);

     label19:
        $r14 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.compat.workaround.TorchStateReset mTorchStateReset>;

        $z3 = virtualinvoke $r14.<androidx.camera.camera2.internal.compat.workaround.TorchStateReset: boolean isTorchResetRequired(java.util.List,boolean)>(r3, z9);

        if $z3 == 0 goto label20;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r16 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r18 = (android.hardware.camera2.CaptureRequest) $r16;

        $r17 = new androidx.camera.camera2.internal.CaptureSession$3;

        specialinvoke $r17.<androidx.camera.camera2.internal.CaptureSession$3: void <init>(androidx.camera.camera2.internal.CaptureSession)>(r0);

        $r19 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r17);

        virtualinvoke r52.<androidx.camera.camera2.internal.CameraBurstCaptureCallback: void addCamera2Callbacks(android.hardware.camera2.CaptureRequest,java.util.List)>($r18, $r19);

     label20:
        $r15 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        $i0 = interfaceinvoke $r15.<androidx.camera.camera2.internal.SynchronizedCaptureSession: int captureBurstRequests(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r3, r52);

     label21:
        exitmonitor r2;

     label22:
        return $i0;

     label23:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Skipping issuing burst request due to no valid request elements");

     label24:
        goto label26;

     label25:
        $r46 := @caughtexception;

        r58 = $r46;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access camera: ");

        $r49 = virtualinvoke r58.<android.hardware.camera2.CameraAccessException: java.lang.String getMessage()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureSession", $r51);

        staticinvoke <java.lang.Thread: void dumpStack()>();

     label26:
        exitmonitor r2;

     label27:
        return -1;

     label28:
        $r45 := @caughtexception;

        r9 = $r45;

        exitmonitor r2;

     label29:
        throw r9;

        catch android.hardware.camera2.CameraAccessException from label03 to label13 with label25;
        catch android.hardware.camera2.CameraAccessException from label15 to label21 with label25;
        catch android.hardware.camera2.CameraAccessException from label23 to label24 with label25;
        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label03 to label14 with label28;
        catch java.lang.Throwable from label15 to label22 with label28;
        catch java.lang.Throwable from label23 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
    }

    void abortCaptures()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, r3, $r13, $r14;
        androidx.camera.camera2.internal.CaptureSession$State $r5, $r6, $r10;
        androidx.camera.camera2.internal.SynchronizedCaptureSession $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $r6 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r5 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENED>;

        if $r6 == $r5 goto label03;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to abort captures. Incorrect state:");

        $r10 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureSession", $r12);

        exitmonitor r1;

     label02:
        return;

     label03:
        $r7 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        interfaceinvoke $r7.<androidx.camera.camera2.internal.SynchronizedCaptureSession: void abortCaptures()>();

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

        r2 = $r13;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CaptureSession", "Unable to abort captures.", r2);

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r1;

     label09:
        throw r3;

     label10:
        return;

        catch android.hardware.camera2.CameraAccessException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void stopRepeating()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, r3, $r13, $r14;
        androidx.camera.camera2.internal.CaptureSession$State $r5, $r6, $r10;
        androidx.camera.camera2.internal.SynchronizedCaptureSession $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r12;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $r6 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r5 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENED>;

        if $r6 == $r5 goto label03;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to stop repeating. Incorrect state:");

        $r10 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureSession", $r12);

        exitmonitor r1;

     label02:
        return;

     label03:
        $r7 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession>;

        interfaceinvoke $r7.<androidx.camera.camera2.internal.SynchronizedCaptureSession: void stopRepeating()>();

     label04:
        goto label06;

     label05:
        $r14 := @caughtexception;

        r2 = $r14;

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String,java.lang.Throwable)>("CaptureSession", "Unable to stop repeating.", r2);

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r1;

     label09:
        throw r3;

     label10:
        return;

        catch android.hardware.camera2.CameraAccessException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void cancelIssuedCaptureRequests()
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.util.Iterator r1, r15;
        androidx.camera.core.impl.CameraCaptureCallback r2;
        java.lang.Object $r3, $r5, $r7, r13;
        java.util.List $r4, $r6, $r9, $r10;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r8, r12;
        java.lang.Throwable $r11, r14;
        androidx.camera.core.impl.CaptureConfig r16;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r12 = null;

        $r3 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r13 = $r3;

        entermonitor $r3;

     label01:
        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label02;

        $r8 = new java.util.ArrayList;

        $r9 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        r12 = $r8;

        $r10 = r0.<androidx.camera.camera2.internal.CaptureSession: java.util.List mCaptureConfigs>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

     label02:
        exitmonitor r13;

     label03:
        goto label06;

     label04:
        $r11 := @caughtexception;

        r14 = $r11;

        exitmonitor r13;

     label05:
        throw r14;

     label06:
        if r12 == null goto label10;

        r15 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r5 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (androidx.camera.core.impl.CaptureConfig) $r5;

        $r6 = virtualinvoke r16.<androidx.camera.core.impl.CaptureConfig: java.util.List getCameraCaptureCallbacks()>();

        r1 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.camera.core.impl.CameraCaptureCallback) $r7;

        virtualinvoke r2.<androidx.camera.core.impl.CameraCaptureCallback: void onCaptureCancelled()>();

        goto label08;

     label09:
        goto label07;

     label10:
        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    private transient android.hardware.camera2.CameraCaptureSession$CaptureCallback createCamera2CaptureCallback(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback[])
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.util.List r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback[] r2;
        java.util.ArrayList r3, $r6;
        java.util.Iterator r4;
        androidx.camera.core.impl.CameraCaptureCallback r5;
        int $i0, $i1, $i2;
        boolean $z0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback $r7, $r9;
        java.lang.Object $r8;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback[];

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $i1 = lengthof r2;

        $i2 = $i0 + $i1;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i2);

        r3 = $r6;

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (androidx.camera.core.impl.CameraCaptureCallback) $r8;

        $r9 = staticinvoke <androidx.camera.camera2.internal.CaptureCallbackConverter: android.hardware.camera2.CameraCaptureSession$CaptureCallback toCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>(r5);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r3, r2);

        $r7 = staticinvoke <androidx.camera.camera2.internal.Camera2CaptureCallbacks: android.hardware.camera2.CameraCaptureSession$CaptureCallback createComboCallback(java.util.List)>(r3);

        return $r7;
    }

    private static androidx.camera.core.impl.Config mergeOptions(java.util.List)
    {
        java.util.List r0;
        androidx.camera.core.impl.MutableOptionsBundle r1;
        java.util.Iterator r2, r5;
        androidx.camera.core.impl.CaptureConfig r3;
        androidx.camera.core.impl.Config r4;
        androidx.camera.core.impl.Config$Option r6, r7;
        java.lang.Object r8, r9, $r10, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r11;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r18, $r19, $r20;
        java.lang.String $r15, $r21;

        r0 := @parameter0: java.util.List;

        r1 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.core.impl.CaptureConfig) $r10;

        r4 = virtualinvoke r3.<androidx.camera.core.impl.CaptureConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

        $r11 = interfaceinvoke r4.<androidx.camera.core.impl.Config: java.util.Set listOptions()>();

        r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (androidx.camera.core.impl.Config$Option) $r12;

        r7 = r6;

        r8 = interfaceinvoke r4.<androidx.camera.core.impl.Config: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>(r7, null);

        $z2 = virtualinvoke r1.<androidx.camera.core.impl.MutableOptionsBundle: boolean containsOption(androidx.camera.core.impl.Config$Option)>(r6);

        if $z2 == 0 goto label4;

        r9 = virtualinvoke r1.<androidx.camera.core.impl.MutableOptionsBundle: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>(r7, null);

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r9, r8);

        if $z3 != 0 goto label3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detect conflicting option ");

        $r15 = virtualinvoke r7.<androidx.camera.core.impl.Config$Option: java.lang.String getId()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", $r21);

     label3:
        goto label5;

     label4:
        virtualinvoke r1.<androidx.camera.core.impl.MutableOptionsBundle: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>(r7, r8);

     label5:
        goto label2;

     label6:
        goto label1;

     label7:
        return r1;
    }

    java.util.List setupConfiguredSurface(java.util.List)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        java.util.List r1, $r12;
        java.util.ArrayList r2, $r8;
        java.util.Iterator r3, r6;
        androidx.camera.core.impl.CaptureConfig r4, $r11, $r13;
        androidx.camera.core.impl.CaptureConfig$Builder r5;
        androidx.camera.core.impl.DeferrableSurface r7;
        boolean $z0, $z1;
        java.lang.Object $r9, $r14;
        androidx.camera.core.impl.SessionConfig $r10;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: java.util.List;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.core.impl.CaptureConfig) $r9;

        r5 = staticinvoke <androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig$Builder 'from'(androidx.camera.core.impl.CaptureConfig)>(r4);

        virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig$Builder: void setTemplateType(int)>(1);

        $r10 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        $r11 = virtualinvoke $r10.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        $r12 = virtualinvoke $r11.<androidx.camera.core.impl.CaptureConfig: java.util.List getSurfaces()>();

        r6 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (androidx.camera.core.impl.DeferrableSurface) $r14;

        virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig$Builder: void addSurface(androidx.camera.core.impl.DeferrableSurface)>(r7);

        goto label2;

     label3:
        $r13 = virtualinvoke r5.<androidx.camera.core.impl.CaptureConfig$Builder: androidx.camera.core.impl.CaptureConfig build()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r13);

        goto label1;

     label4:
        return r2;
    }

    private void lambda$issueBurstCaptureRequest$2(android.hardware.camera2.CameraCaptureSession, int, boolean)
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        android.hardware.camera2.CameraCaptureSession r1;
        int i0;
        boolean z0;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        androidx.camera.camera2.internal.CaptureSession$State $r5, $r6;
        androidx.camera.core.impl.SessionConfig $r7;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r6 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r5 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENED>;

        if $r6 != $r5 goto label2;

        $r7 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        virtualinvoke r0.<androidx.camera.camera2.internal.CaptureSession: int issueRepeatingCaptureRequests(androidx.camera.core.impl.SessionConfig)>($r7);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private java.lang.Object lambda$release$1(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r11;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.camera.camera2.internal.CaptureSession: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mReleaseCompleter>;

        if $r5 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z0, "Release completer expected to be null");

        r0.<androidx.camera.camera2.internal.CaptureSession: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mReleaseCompleter> = r1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Release[session=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r2;

     label4:
        return $r10;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$open$0(androidx.camera.core.impl.SessionConfig, android.hardware.camera2.CameraDevice, java.util.List) throws java.lang.Exception
    {
        androidx.camera.camera2.internal.CaptureSession r0;
        androidx.camera.core.impl.SessionConfig r1;
        android.hardware.camera2.CameraDevice r2;
        java.util.List r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession;

        r1 := @parameter0: androidx.camera.core.impl.SessionConfig;

        r2 := @parameter1: android.hardware.camera2.CameraDevice;

        r3 := @parameter2: java.util.List;

        $r4 = specialinvoke r0.<androidx.camera.camera2.internal.CaptureSession: com.google.common.util.concurrent.ListenableFuture openCaptureSession(java.util.List,androidx.camera.core.impl.SessionConfig,android.hardware.camera2.CameraDevice)>(r3, r1, r2);

        return $r4;
    }

androidx.camera.camera2.internal.CaptureSession$1
<androidx.camera.camera2.internal.CaptureSession$1: androidx.camera.camera2.internal.CaptureSession this$0>
    void <init>(androidx.camera.camera2.internal.CaptureSession)
    {
        androidx.camera.camera2.internal.CaptureSession$1 r0;
        androidx.camera.camera2.internal.CaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$1;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSession;

        r0.<androidx.camera.camera2.internal.CaptureSession$1: androidx.camera.camera2.internal.CaptureSession this$0> = r1;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void <init>()>();

        return;
    }

    public void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.CaptureSession$1 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.TotalCaptureResult r3;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$1;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        return;
    }

androidx.camera.camera2.internal.CaptureSession$2
<androidx.camera.camera2.internal.CaptureSession$2: androidx.camera.camera2.internal.CaptureSession this$0>
    void <init>(androidx.camera.camera2.internal.CaptureSession)
    {
        androidx.camera.camera2.internal.CaptureSession$2 r0;
        androidx.camera.camera2.internal.CaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$2;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSession;

        r0.<androidx.camera.camera2.internal.CaptureSession$2: androidx.camera.camera2.internal.CaptureSession this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess(java.lang.Void)
    {
        androidx.camera.camera2.internal.CaptureSession$2 r0;
        java.lang.Void r1;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$2;

        r1 := @parameter0: java.lang.Void;

        return;
    }

    public void onFailure(java.lang.Throwable)
    {
        androidx.camera.camera2.internal.CaptureSession$2 r0;
        java.lang.Throwable r1, r3, $r18;
        java.lang.Object r2, $r5;
        androidx.camera.camera2.internal.CaptureSession $r4, $r6, $r8, $r13, $r17;
        androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener $r7;
        androidx.camera.camera2.internal.CaptureSession$State $r9, $r14;
        int[] $r10;
        int $i0, $i1;
        boolean $z1;
        java.lang.StringBuilder $r11, $r12, $r15;
        java.lang.String $r16;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$2;

        r1 := @parameter0: java.lang.Throwable;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession$2: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r5 = $r4.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.camera.camera2.internal.CaptureSession$2: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r7 = $r6.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener mSynchronizedCaptureSessionOpener>;

        virtualinvoke $r7.<androidx.camera.camera2.internal.SynchronizedCaptureSessionOpener: boolean stop()>();

        $r10 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r8 = r0.<androidx.camera.camera2.internal.CaptureSession$2: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r9 = $r8.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r9.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r10[$i0];

        tableswitch($i1)
        {
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label2;
            case 7: goto label2;
            default: goto label3;
        };

     label2:
        $z1 = r1 instanceof java.util.concurrent.CancellationException;

        if $z1 != 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opening session with fail ");

        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession$2: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r14 = $r13.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String,java.lang.Throwable)>("CaptureSession", $r16, r1);

        $r17 = r0.<androidx.camera.camera2.internal.CaptureSession$2: androidx.camera.camera2.internal.CaptureSession this$0>;

        virtualinvoke $r17.<androidx.camera.camera2.internal.CaptureSession: void finishClose()>();

        goto label3;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r18 := @caughtexception;

        r3 = $r18;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public volatile void onSuccess(java.lang.Object)
    {
        androidx.camera.camera2.internal.CaptureSession$2 r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<androidx.camera.camera2.internal.CaptureSession$2: void onSuccess(java.lang.Void)>($r2);

        return;
    }

androidx.camera.camera2.internal.CaptureSession$3
<androidx.camera.camera2.internal.CaptureSession$3: androidx.camera.camera2.internal.CaptureSession this$0>
    void <init>(androidx.camera.camera2.internal.CaptureSession)
    {
        androidx.camera.camera2.internal.CaptureSession$3 r0;
        androidx.camera.camera2.internal.CaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$3;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSession;

        r0.<androidx.camera.camera2.internal.CaptureSession$3: androidx.camera.camera2.internal.CaptureSession this$0> = r1;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void <init>()>();

        return;
    }

    public void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.internal.CaptureSession$3 r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.TotalCaptureResult r3;
        java.lang.Object r4, $r8;
        androidx.camera.core.impl.CaptureConfig r5, $r16;
        java.lang.Throwable r6, $r18;
        androidx.camera.camera2.internal.CaptureSession $r7, $r9, $r11, $r13, $r15;
        androidx.camera.core.impl.SessionConfig $r10, $r12;
        androidx.camera.camera2.internal.compat.workaround.TorchStateReset $r14;
        java.util.List $r17;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$3;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        $r7 = r0.<androidx.camera.camera2.internal.CaptureSession$3: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r8 = $r7.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r4 = $r8;

        entermonitor $r8;

     label1:
        $r9 = r0.<androidx.camera.camera2.internal.CaptureSession$3: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r10 = $r9.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        if $r10 != null goto label3;

        exitmonitor r4;

     label2:
        return;

     label3:
        $r11 = r0.<androidx.camera.camera2.internal.CaptureSession$3: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r12 = $r11.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        r5 = virtualinvoke $r12.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.CaptureConfig getRepeatingCaptureConfig()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Submit FLASH_MODE_OFF request");

        $r15 = r0.<androidx.camera.camera2.internal.CaptureSession$3: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession$3: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r14 = $r13.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.compat.workaround.TorchStateReset mTorchStateReset>;

        $r16 = virtualinvoke $r14.<androidx.camera.camera2.internal.compat.workaround.TorchStateReset: androidx.camera.core.impl.CaptureConfig createTorchResetRequest(androidx.camera.core.impl.CaptureConfig)>(r5);

        $r17 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r16);

        virtualinvoke $r15.<androidx.camera.camera2.internal.CaptureSession: void issueCaptureRequests(java.util.List)>($r17);

        exitmonitor r4;

     label4:
        goto label7;

     label5:
        $r18 := @caughtexception;

        r6 = $r18;

        exitmonitor r4;

     label6:
        throw r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

androidx.camera.camera2.internal.CaptureSession$4
<androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>
    static void <clinit>()
    {
        androidx.camera.camera2.internal.CaptureSession$State[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        androidx.camera.camera2.internal.CaptureSession$State $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        java.lang.Throwable $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, r26, r27, r28, r29, r30, r31, r32, r33;

        $r0 = staticinvoke <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State> = $r1;

     label01:
        $r3 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r2 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State UNINITIALIZED>;

        $i1 = virtualinvoke $r2.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $r3[$i1] = 1;

     label02:
        goto label04;

     label03:
        $r22 := @caughtexception;

        r26 = $r22;

     label04:
        $r5 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r4 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State INITIALIZED>;

        $i2 = virtualinvoke $r4.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $r5[$i2] = 2;

     label05:
        goto label07;

     label06:
        $r21 := @caughtexception;

        r27 = $r21;

     label07:
        $r7 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r6 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State GET_SURFACE>;

        $i3 = virtualinvoke $r6.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $r7[$i3] = 3;

     label08:
        goto label10;

     label09:
        $r18 := @caughtexception;

        r28 = $r18;

     label10:
        $r9 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r8 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENING>;

        $i4 = virtualinvoke $r8.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $r9[$i4] = 4;

     label11:
        goto label13;

     label12:
        $r20 := @caughtexception;

        r29 = $r20;

     label13:
        $r11 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r10 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENED>;

        $i5 = virtualinvoke $r10.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $r11[$i5] = 5;

     label14:
        goto label16;

     label15:
        $r24 := @caughtexception;

        r30 = $r24;

     label16:
        $r13 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r12 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State CLOSED>;

        $i6 = virtualinvoke $r12.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $r13[$i6] = 6;

     label17:
        goto label19;

     label18:
        $r25 := @caughtexception;

        r31 = $r25;

     label19:
        $r15 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r14 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASING>;

        $i7 = virtualinvoke $r14.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $r15[$i7] = 7;

     label20:
        goto label22;

     label21:
        $r23 := @caughtexception;

        r32 = $r23;

     label22:
        $r17 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r16 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASED>;

        $i8 = virtualinvoke $r16.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $r17[$i8] = 8;

     label23:
        goto label25;

     label24:
        $r19 := @caughtexception;

        r33 = $r19;

     label25:
        return;

        catch java.lang.NoSuchFieldError from label01 to label02 with label03;
        catch java.lang.NoSuchFieldError from label04 to label05 with label06;
        catch java.lang.NoSuchFieldError from label07 to label08 with label09;
        catch java.lang.NoSuchFieldError from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label15;
        catch java.lang.NoSuchFieldError from label16 to label17 with label18;
        catch java.lang.NoSuchFieldError from label19 to label20 with label21;
        catch java.lang.NoSuchFieldError from label22 to label23 with label24;
    }

androidx.camera.camera2.internal.CaptureSession$State
<androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State UNINITIALIZED>
<androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State INITIALIZED>
<androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State GET_SURFACE>
<androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENING>
<androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENED>
<androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State CLOSED>
<androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASING>
<androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASED>
<androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State[] $VALUES>
    public static androidx.camera.camera2.internal.CaptureSession$State[] values()
    {
        androidx.camera.camera2.internal.CaptureSession$State[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.camera.camera2.internal.CaptureSession$State[]) $r1;

        return $r2;
    }

    public static androidx.camera.camera2.internal.CaptureSession$State valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.camera.camera2.internal.CaptureSession$State $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/camera/camera2/internal/CaptureSession$State;", r0);

        $r2 = (androidx.camera.camera2.internal.CaptureSession$State) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        androidx.camera.camera2.internal.CaptureSession$State r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$State;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.camera2.internal.CaptureSession$State $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        androidx.camera.camera2.internal.CaptureSession$State[] $r8;

        $r0 = new androidx.camera.camera2.internal.CaptureSession$State;

        specialinvoke $r0.<androidx.camera.camera2.internal.CaptureSession$State: void <init>(java.lang.String,int)>("UNINITIALIZED", 0);

        <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State UNINITIALIZED> = $r0;

        $r1 = new androidx.camera.camera2.internal.CaptureSession$State;

        specialinvoke $r1.<androidx.camera.camera2.internal.CaptureSession$State: void <init>(java.lang.String,int)>("INITIALIZED", 1);

        <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State INITIALIZED> = $r1;

        $r2 = new androidx.camera.camera2.internal.CaptureSession$State;

        specialinvoke $r2.<androidx.camera.camera2.internal.CaptureSession$State: void <init>(java.lang.String,int)>("GET_SURFACE", 2);

        <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State GET_SURFACE> = $r2;

        $r3 = new androidx.camera.camera2.internal.CaptureSession$State;

        specialinvoke $r3.<androidx.camera.camera2.internal.CaptureSession$State: void <init>(java.lang.String,int)>("OPENING", 3);

        <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENING> = $r3;

        $r4 = new androidx.camera.camera2.internal.CaptureSession$State;

        specialinvoke $r4.<androidx.camera.camera2.internal.CaptureSession$State: void <init>(java.lang.String,int)>("OPENED", 4);

        <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENED> = $r4;

        $r5 = new androidx.camera.camera2.internal.CaptureSession$State;

        specialinvoke $r5.<androidx.camera.camera2.internal.CaptureSession$State: void <init>(java.lang.String,int)>("CLOSED", 5);

        <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State CLOSED> = $r5;

        $r6 = new androidx.camera.camera2.internal.CaptureSession$State;

        specialinvoke $r6.<androidx.camera.camera2.internal.CaptureSession$State: void <init>(java.lang.String,int)>("RELEASING", 6);

        <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASING> = $r6;

        $r7 = new androidx.camera.camera2.internal.CaptureSession$State;

        specialinvoke $r7.<androidx.camera.camera2.internal.CaptureSession$State: void <init>(java.lang.String,int)>("RELEASED", 7);

        <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASED> = $r7;

        $r8 = newarray (androidx.camera.camera2.internal.CaptureSession$State)[8];

        $r9 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State UNINITIALIZED>;

        $r8[0] = $r9;

        $r10 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State INITIALIZED>;

        $r8[1] = $r10;

        $r11 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State GET_SURFACE>;

        $r8[2] = $r11;

        $r12 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENING>;

        $r8[3] = $r12;

        $r13 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENED>;

        $r8[4] = $r13;

        $r14 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State CLOSED>;

        $r8[5] = $r14;

        $r15 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASING>;

        $r8[6] = $r15;

        $r16 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State RELEASED>;

        $r8[7] = $r16;

        <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State[] $VALUES> = $r8;

        return;
    }

androidx.camera.camera2.internal.CaptureSession$StateCallback
<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>
    void <init>(androidx.camera.camera2.internal.CaptureSession)
    {
        androidx.camera.camera2.internal.CaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.CaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.CaptureSession;

        r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0> = r1;

        specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSession$StateCallback: void <init>()>();

        return;
    }

    public void onConfigured(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.CaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        java.lang.Object r2, $r6;
        java.util.List r3, $r21;
        java.lang.Throwable r4, $r29;
        androidx.camera.camera2.internal.CaptureSession $r5, $r7, $r10, $r12, $r13, $r14, $r16, $r19, $r20, $r25, $r30, $r31, $r33, $r36;
        androidx.camera.camera2.internal.CaptureSession$State $r8, $r11, $r26, $r37;
        int[] $r9;
        int $i0, $i1;
        androidx.camera.core.impl.SessionConfig $r15, $r32;
        androidx.camera.camera2.impl.CameraEventCallbacks $r17;
        androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback $r18;
        boolean $z0;
        java.lang.IllegalStateException $r22;
        java.lang.StringBuilder $r23, $r24, $r27, $r34, $r35, $r38;
        java.lang.String $r28, $r39;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r5 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r6 = $r5.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        $r9 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r7 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r8 = $r7.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r8.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r9[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label03;
            case 5: goto label02;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label02;
            default: goto label07;
        };

     label02:
        $r22 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onConfigured() should not be possible in state: ");

        $r25 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r26 = $r25.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r22;

     label03:
        $r12 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r11 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State OPENED>;

        $r12.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState> = $r11;

        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r13.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession> = r1;

        $r14 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r15 = $r14.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        if $r15 == null goto label04;

        $r16 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r17 = $r16.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.impl.CameraEventCallbacks mCameraEventCallbacks>;

        $r18 = virtualinvoke $r17.<androidx.camera.camera2.impl.CameraEventCallbacks: androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback createComboCallback()>();

        r3 = virtualinvoke $r18.<androidx.camera.camera2.impl.CameraEventCallbacks$ComboCameraEventCallback: java.util.List onEnableSession()>();

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label04;

        $r20 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r19 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r21 = virtualinvoke $r19.<androidx.camera.camera2.internal.CaptureSession: java.util.List setupConfiguredSurface(java.util.List)>(r3);

        virtualinvoke $r20.<androidx.camera.camera2.internal.CaptureSession: int issueBurstCaptureRequest(java.util.List)>($r21);

     label04:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "Attempting to send capture request onConfigured");

        $r30 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r31 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r32 = $r31.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.core.impl.SessionConfig mSessionConfig>;

        virtualinvoke $r30.<androidx.camera.camera2.internal.CaptureSession: int issueRepeatingCaptureRequests(androidx.camera.core.impl.SessionConfig)>($r32);

        $r33 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        virtualinvoke $r33.<androidx.camera.camera2.internal.CaptureSession: void issuePendingCaptureRequest()>();

        goto label07;

     label05:
        $r10 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r10.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.SynchronizedCaptureSession mSynchronizedCaptureSession> = r1;

        goto label07;

     label06:
        interfaceinvoke r1.<androidx.camera.camera2.internal.SynchronizedCaptureSession: void close()>();

     label07:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CameraCaptureSession.onConfigured() mState=");

        $r36 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r37 = $r36.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", $r39);

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r29 := @caughtexception;

        r4 = $r29;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void onReady(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.CaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r22;
        androidx.camera.camera2.internal.CaptureSession $r4, $r6, $r12, $r18;
        androidx.camera.camera2.internal.CaptureSession$State $r7, $r13, $r19;
        int[] $r8;
        int $i0, $i1;
        java.lang.IllegalStateException $r9;
        java.lang.StringBuilder $r10, $r11, $r14, $r16, $r17, $r20;
        java.lang.String $r15, $r21;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r5 = $r4.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r8 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r6 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r7 = $r6.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r7.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r8[$i0];

        lookupswitch($i1)
        {
            case 1: goto label2;
            default: goto label3;
        };

     label2:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onReady() should not be possible in state: ");

        $r12 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r13 = $r12.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label3:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CameraCaptureSession.onReady() ");

        $r18 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r19 = $r18.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", $r21);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r22 := @caughtexception;

        r3 = $r22;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void onSessionFinished(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.CaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r17;
        androidx.camera.camera2.internal.CaptureSession $r4, $r6, $r9, $r13;
        androidx.camera.camera2.internal.CaptureSession$State $r7, $r8, $r14;
        java.lang.IllegalStateException $r10;
        java.lang.StringBuilder $r11, $r12, $r15;
        java.lang.String $r16;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r5 = $r4.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r8 = $r6.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r7 = <androidx.camera.camera2.internal.CaptureSession$State: androidx.camera.camera2.internal.CaptureSession$State UNINITIALIZED>;

        if $r8 != $r7 goto label2;

        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onSessionFinished() should not be possible in state: ");

        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r14 = $r13.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label2:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "onSessionFinished()");

        $r9 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        virtualinvoke $r9.<androidx.camera.camera2.internal.CaptureSession: void finishClose()>();

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r17 := @caughtexception;

        r3 = $r17;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void onConfigureFailed(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.CaptureSession$StateCallback r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r17;
        androidx.camera.camera2.internal.CaptureSession $r4, $r6, $r9, $r13, $r20;
        androidx.camera.camera2.internal.CaptureSession$State $r7, $r14, $r21;
        int[] $r8;
        int $i0, $i1;
        java.lang.IllegalStateException $r10;
        java.lang.StringBuilder $r11, $r12, $r15, $r18, $r19, $r22;
        java.lang.String $r16, $r23;

        r0 := @this: androidx.camera.camera2.internal.CaptureSession$StateCallback;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r4 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r5 = $r4.<androidx.camera.camera2.internal.CaptureSession: java.lang.Object mSessionLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r8 = <androidx.camera.camera2.internal.CaptureSession$4: int[] $SwitchMap$androidx$camera$camera2$internal$CaptureSession$State>;

        $r6 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r7 = $r6.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $i0 = virtualinvoke $r7.<androidx.camera.camera2.internal.CaptureSession$State: int ordinal()>();

        $i1 = $r8[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label4;
            default: goto label5;
        };

     label2:
        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onConfigureFailed() should not be possible in state: ");

        $r13 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r14 = $r13.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label3:
        $r9 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        virtualinvoke $r9.<androidx.camera.camera2.internal.CaptureSession: void finishClose()>();

        goto label5;

     label4:
        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("CaptureSession", "ConfigureFailed callback after change to RELEASED state");

     label5:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CameraCaptureSession.onConfigureFailed() ");

        $r20 = r0.<androidx.camera.camera2.internal.CaptureSession$StateCallback: androidx.camera.camera2.internal.CaptureSession this$0>;

        $r21 = $r20.<androidx.camera.camera2.internal.CaptureSession: androidx.camera.camera2.internal.CaptureSession$State mState>;

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void e(java.lang.String,java.lang.String)>("CaptureSession", $r23);

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r17 := @caughtexception;

        r3 = $r17;

        exitmonitor r2;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

