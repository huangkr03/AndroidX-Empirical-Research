androidx.constraintlayout.solver.SolverVariableValues
<androidx.constraintlayout.solver.SolverVariableValues: boolean DEBUG>
<androidx.constraintlayout.solver.SolverVariableValues: boolean HASH>
<androidx.constraintlayout.solver.SolverVariableValues: float epsilon>
<androidx.constraintlayout.solver.SolverVariableValues: int NONE>
<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>
<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>
<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>
<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>
<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>
<androidx.constraintlayout.solver.SolverVariableValues: float[] values>
<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>
<androidx.constraintlayout.solver.SolverVariableValues: int[] next>
<androidx.constraintlayout.solver.SolverVariableValues: int mCount>
<androidx.constraintlayout.solver.SolverVariableValues: int head>
<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.ArrayRow mRow>
<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache>
    void <init>(androidx.constraintlayout.solver.ArrayRow, androidx.constraintlayout.solver.Cache)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        androidx.constraintlayout.solver.ArrayRow r1;
        androidx.constraintlayout.solver.Cache r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r3, $r4, $r5, $r7, $r8;
        float[] $r6;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        r2 := @parameter1: androidx.constraintlayout.solver.Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int NONE> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE> = 16;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE> = 16;

        $i0 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        $r3 = newarray (int)[$i0];

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys> = $r3;

        $i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        $r4 = newarray (int)[$i1];

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys> = $r4;

        $i2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        $r5 = newarray (int)[$i2];

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables> = $r5;

        $i3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        $r6 = newarray (float)[$i3];

        r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values> = $r6;

        $i4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        $r7 = newarray (int)[$i4];

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous> = $r7;

        $i5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        $r8 = newarray (int)[$i5];

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next> = $r8;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int head> = -1;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.ArrayRow mRow> = r1;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache> = r2;

        virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void clear()>();

        return;
    }

    public int getCurrentSize()
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int $i0;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $i0 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        return $i0;
    }

    public androidx.constraintlayout.solver.SolverVariable getVariable(int)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int i0, i1, $i2, i3, i4;
        int[] $r1, $r3;
        androidx.constraintlayout.solver.Cache $r2;
        androidx.constraintlayout.solver.SolverVariable[] $r4;
        androidx.constraintlayout.solver.SolverVariable $r5;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i0 := @parameter0: int;

        i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        if i1 != 0 goto label1;

        return null;

     label1:
        i3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        if i4 != i0 goto label3;

        if i3 == -1 goto label3;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache>;

        $r4 = $r2.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i2 = $r3[i3];

        $r5 = $r4[$i2];

        return $r5;

     label3:
        $r1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        i3 = $r1[i3];

        if i3 != -1 goto label4;

        goto label5;

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return null;
    }

    public float getVariableValue(int)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int i0, i1, i2, i3;
        int[] $r1;
        float[] $r2;
        float $f0;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i0 := @parameter0: int;

        i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        i2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i3 = 0;

     label1:
        if i3 >= i1 goto label4;

        if i3 != i0 goto label2;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $f0 = $r2[i2];

        return $f0;

     label2:
        $r1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        i2 = $r1[i2];

        if i2 != -1 goto label3;

        goto label4;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 0.0F;
    }

    public boolean contains(androidx.constraintlayout.solver.SolverVariable)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        androidx.constraintlayout.solver.SolverVariable r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $i0 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>(r1);

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexOf(androidx.constraintlayout.solver.SolverVariable)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        androidx.constraintlayout.solver.SolverVariable r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        if $i1 == 0 goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        i0 = r1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $i2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        i11 = i0 % $i2;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        i12 = $r2[i11];

        if i12 != -1 goto label3;

        return -1;

     label3:
        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i3 = $r3[i12];

        if $i3 != i0 goto label4;

        return i12;

     label4:
        $r4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i4 = $r4[i12];

        if $i4 == -1 goto label5;

        $r10 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $r9 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i9 = $r9[i12];

        $i10 = $r10[$i9];

        if $i10 == i0 goto label5;

        $r11 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        i12 = $r11[i12];

        goto label4;

     label5:
        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i5 = $r5[i12];

        if $i5 != -1 goto label6;

        return -1;

     label6:
        $r7 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $r6 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i6 = $r6[i12];

        $i7 = $r7[$i6];

        if $i7 != i0 goto label7;

        $r8 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i8 = $r8[i12];

        return $i8;

     label7:
        return -1;
    }

    public float get(androidx.constraintlayout.solver.SolverVariable)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        androidx.constraintlayout.solver.SolverVariable r1;
        int i0;
        float[] $r2;
        float $f0;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        i0 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>(r1);

        if i0 == -1 goto label1;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $f0 = $r2[i0];

        return $f0;

     label1:
        return 0.0F;
    }

    public void display()
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int i0, i1;
        androidx.constraintlayout.solver.SolverVariable r1;
        java.io.PrintStream $r2, $r3, $r5;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9;
        float $f0;
        java.lang.String $r10;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i0 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("{ ");

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r1 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.SolverVariable getVariable(int)>(i1);

        if r1 != null goto label2;

        goto label3;

     label2:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $f0 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: float getVariableValue(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r10);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>(" }");

        return;
    }

    public java.lang.String toString()
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        androidx.constraintlayout.solver.SolverVariable r1, $r37, $r45;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r38, $r39, $r40, $r46;
        float $f0;
        int[] $r17, $r24, $r34, $r35, $r42, $r43;
        androidx.constraintlayout.solver.Cache $r33, $r41;
        androidx.constraintlayout.solver.SolverVariable[] $r36, $r44;
        java.lang.String r47, r48, r49, r50, r51, r52, r53;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" { ");

        r47 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        i9 = 0;

     label1:
        if i9 >= i0 goto label8;

        r1 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.SolverVariable getVariable(int)>(i9);

        if r1 != null goto label2;

        goto label7;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $f0 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: float getVariableValue(int)>(i9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r48 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>(r1);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r48);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[p: ");

        r49 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $i3 = $r17[i1];

        if $i3 == -1 goto label3;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        $r41 = r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache>;

        $r44 = $r41.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $r43 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $r42 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $i7 = $r42[i1];

        $i8 = $r43[$i7];

        $r45 = $r44[$i8];

        $r46 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        r50 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("none");

        r50 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", n: ");

        r51 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i4 = $r24[i1];

        if $i4 == -1 goto label5;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r33 = r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache>;

        $r36 = $r33.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $r35 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $r34 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i5 = $r34[i1];

        $i6 = $r35[$i5];

        $r37 = $r36[$i6];

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        r52 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("none");

        r52 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r47 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        i9 = i9 + 1;

        goto label1;

     label8:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");

        r53 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return r53;
    }

    public void clear()
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int i0, $i1, $i2, i3, i4, i5;
        androidx.constraintlayout.solver.SolverVariable r1;
        int[] $r2, $r3, $r4;
        androidx.constraintlayout.solver.ArrayRow $r5;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i0 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r1 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.SolverVariable getVariable(int)>(i3);

        if r1 == null goto label2;

        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.ArrayRow mRow>;

        virtualinvoke r1.<androidx.constraintlayout.solver.SolverVariable: void removeFromRow(androidx.constraintlayout.solver.ArrayRow)>($r5);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        i4 = 0;

     label4:
        $i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        if i4 >= $i1 goto label5;

        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $r3[i4] = -1;

        $r4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $r4[i4] = -1;

        i4 = i4 + 1;

        goto label4;

     label5:
        i5 = 0;

     label6:
        $i2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        if i5 >= $i2 goto label7;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        $r2[i5] = -1;

        i5 = i5 + 1;

        goto label6;

     label7:
        r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount> = 0;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int head> = -1;

        return;
    }

    private void increaseSize()
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int i0, $i1, i2;
        int[] $r1, $r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        float[] $r3, $r4;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        $i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        i0 = $i1 * 2;

        $r1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, i0);

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables> = $r2;

        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $r4 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>($r3, i0);

        r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values> = $r4;

        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $r6 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r5, i0);

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous> = $r6;

        $r7 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $r8 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r7, i0);

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next> = $r8;

        $r9 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $r10 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r9, i0);

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys> = $r10;

        i2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

     label1:
        if i2 >= i0 goto label2;

        $r11 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $r11[i2] = -1;

        $r12 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $r12[i2] = -1;

        i2 = i2 + 1;

        goto label1;

     label2:
        r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE> = i0;

        return;
    }

    private void addToHashMap(androidx.constraintlayout.solver.SolverVariable, int)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        androidx.constraintlayout.solver.SolverVariable r1;
        int i0, i1, $i2, $i3, $i4, i5;
        int[] $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        i0 := @parameter1: int;

        $i3 = r1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $i2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        i1 = $i3 % $i2;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        i5 = $r2[i1];

        if i5 != -1 goto label1;

        $r7 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        $r7[i1] = i0;

        goto label3;

     label1:
        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i4 = $r3[i5];

        if $i4 == -1 goto label2;

        $r6 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        i5 = $r6[i5];

        goto label1;

     label2:
        $r4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $r4[i5] = i0;

     label3:
        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $r5[i0] = -1;

        return;
    }

    private void displayHash()
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        int[] $r1, $r7, $r12, $r14, $r15;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r13;
        java.io.PrintStream $r8;
        java.lang.String r16;
        boolean z0;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i5 = 0;

     label1:
        $i0 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        if i5 >= $i0 goto label6;

        $r1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        $i1 = $r1[i5];

        if $i1 == -1 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hash [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] => ");

        r16 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        i6 = $r7[i5];

        z0 = 0;

     label2:
        if z0 != 0 goto label4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i3 = $r12[i6];

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i4 = $r14[i6];

        if $i4 == -1 goto label3;

        $r15 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        i6 = $r15[i6];

        goto label2;

     label3:
        z0 = 1;

        goto label2;

     label4:
        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>(r16);

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        return;
    }

    private void removeFromHashMap(androidx.constraintlayout.solver.SolverVariable)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        androidx.constraintlayout.solver.SolverVariable r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        $i4 = r1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $i3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int HASH_SIZE>;

        i0 = $i4 % $i3;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        i12 = $r2[i0];

        if i12 != -1 goto label1;

        return;

     label1:
        i1 = r1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i5 = $r3[i12];

        if $i5 != i1 goto label2;

        $r14 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] keys>;

        $r13 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i11 = $r13[i12];

        $r14[i0] = $i11;

        $r15 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $r15[i12] = -1;

        goto label4;

     label2:
        $r4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i6 = $r4[i12];

        if $i6 == -1 goto label3;

        $r11 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $r10 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i9 = $r10[i12];

        $i10 = $r11[$i9];

        if $i10 == i1 goto label3;

        $r12 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        i12 = $r12[i12];

        goto label2;

     label3:
        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        i2 = $r5[i12];

        if i2 == -1 goto label4;

        $r6 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i7 = $r6[i2];

        if $i7 != i1 goto label4;

        $r8 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $r7 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $i8 = $r7[i2];

        $r8[i12] = $i8;

        $r9 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] nextKeys>;

        $r9[i2] = -1;

     label4:
        return;
    }

    private void addVariable(int, androidx.constraintlayout.solver.SolverVariable, float)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        androidx.constraintlayout.solver.SolverVariable r1;
        float f0;
        int[] $r2, $r4, $r5;
        float[] $r3;
        androidx.constraintlayout.solver.ArrayRow $r6;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        f0 := @parameter2: float;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i1 = r1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        $r2[i0] = $i1;

        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $r3[i0] = f0;

        $r4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $r4[i0] = -1;

        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $r5[i0] = -1;

        $r6 = r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.ArrayRow mRow>;

        virtualinvoke r1.<androidx.constraintlayout.solver.SolverVariable: void addToRow(androidx.constraintlayout.solver.ArrayRow)>($r6);

        $i2 = r1.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount>;

        $i3 = $i2 + 1;

        r1.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount> = $i3;

        $i4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        $i5 = $i4 + 1;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount> = $i5;

        return;
    }

    private int findEmptySlot()
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int $i0, $i1, i2;
        int[] $r1;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i2 = 0;

     label1:
        $i0 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        if i2 >= $i0 goto label3;

        $r1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i1 = $r1[i2];

        if $i1 != -1 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void insertVariable(int, androidx.constraintlayout.solver.SolverVariable, float)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        androidx.constraintlayout.solver.SolverVariable r1;
        float f0;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.constraintlayout.solver.SolverVariable;

        f0 := @parameter2: float;

        i1 = specialinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: int findEmptySlot()>();

        specialinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void addVariable(int,androidx.constraintlayout.solver.SolverVariable,float)>(i1, r1, f0);

        if i0 == -1 goto label1;

        $r7 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $r7[i1] = i0;

        $r9 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $r8 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i5 = $r8[i0];

        $r9[i1] = $i5;

        $r10 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $r10[i0] = i1;

        goto label3;

     label1:
        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $r2[i1] = -1;

        $i2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        if $i2 <= 0 goto label2;

        $r6 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        $r6[i1] = $i4;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int head> = i1;

        goto label3;

     label2:
        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $r3[i1] = -1;

     label3:
        $r11 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i6 = $r11[i1];

        if $i6 == -1 goto label4;

        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $r4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i3 = $r4[i1];

        $r5[$i3] = i1;

     label4:
        specialinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void addToHashMap(androidx.constraintlayout.solver.SolverVariable,int)>(r1, i1);

        return;
    }

    public void put(androidx.constraintlayout.solver.SolverVariable, float)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        androidx.constraintlayout.solver.SolverVariable r1;
        float f0, $f1, $f2, $f3;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12, i13, i14;
        byte $b2, $b11;
        int[] $r2, $r3, $r4;
        float[] $r5, $r6;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        f0 := @parameter1: float;

        $f1 = <androidx.constraintlayout.solver.SolverVariableValues: float epsilon>;

        $f2 = neg $f1;

        $b2 = f0 cmpl $f2;

        if $b2 <= 0 goto label01;

        $f3 = <androidx.constraintlayout.solver.SolverVariableValues: float epsilon>;

        $b11 = f0 cmpg $f3;

        if $b11 >= 0 goto label01;

        virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: float remove(androidx.constraintlayout.solver.SolverVariable,boolean)>(r1, 1);

        return;

     label01:
        $i3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        if $i3 != 0 goto label02;

        specialinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void addVariable(int,androidx.constraintlayout.solver.SolverVariable,float)>(0, r1, f0);

        specialinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void addToHashMap(androidx.constraintlayout.solver.SolverVariable,int)>(r1, 0);

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int head> = 0;

        goto label10;

     label02:
        i0 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>(r1);

        if i0 == -1 goto label03;

        $r6 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $r6[i0] = f0;

        goto label10;

     label03:
        $i4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        $i6 = $i4 + 1;

        $i5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int SIZE>;

        if $i6 < $i5 goto label04;

        specialinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void increaseSize()>();

     label04:
        i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        i12 = -1;

        i13 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i14 = 0;

     label05:
        if i14 >= i1 goto label09;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i8 = $r2[i13];

        $i7 = r1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        if $i8 != $i7 goto label06;

        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $r5[i13] = f0;

        return;

     label06:
        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i10 = $r3[i13];

        $i9 = r1.<androidx.constraintlayout.solver.SolverVariable: int id>;

        if $i10 >= $i9 goto label07;

        i12 = i13;

     label07:
        $r4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        i13 = $r4[i13];

        if i13 != -1 goto label08;

        goto label09;

     label08:
        i14 = i14 + 1;

        goto label05;

     label09:
        specialinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void insertVariable(int,androidx.constraintlayout.solver.SolverVariable,float)>(i12, r1, f0);

     label10:
        return;
    }

    public int sizeInBytes()
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        return 0;
    }

    public float remove(androidx.constraintlayout.solver.SolverVariable, boolean)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        androidx.constraintlayout.solver.SolverVariable r1;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        float f0;
        float[] $r2;
        int[] $r3, $r4, $r5, $r7, $r8, $r9, $r12, $r13, $r14, $r15;
        androidx.constraintlayout.solver.ArrayRow $r6;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        z0 := @parameter1: boolean;

        i0 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>(r1);

        if i0 != -1 goto label1;

        return 0.0F;

     label1:
        specialinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void removeFromHashMap(androidx.constraintlayout.solver.SolverVariable)>(r1);

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        f0 = $r2[i0];

        $i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        if $i1 != i0 goto label2;

        $r15 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i12 = $r15[i0];

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int head> = $i12;

     label2:
        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $r3[i0] = -1;

        $r4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $i2 = $r4[i0];

        if $i2 == -1 goto label3;

        $r14 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $r12 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $i11 = $r12[i0];

        $r13 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i10 = $r13[i0];

        $r14[$i11] = $i10;

     label3:
        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i3 = $r5[i0];

        if $i3 == -1 goto label4;

        $r9 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $r7 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        $i9 = $r7[i0];

        $r8 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] previous>;

        $i8 = $r8[i0];

        $r9[$i9] = $i8;

     label4:
        $i4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        $i5 = $i4 - 1;

        r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount> = $i5;

        $i6 = r1.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount>;

        $i7 = $i6 - 1;

        r1.<androidx.constraintlayout.solver.SolverVariable: int usageInRowCount> = $i7;

        if z0 == 0 goto label5;

        $r6 = r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.ArrayRow mRow>;

        virtualinvoke r1.<androidx.constraintlayout.solver.SolverVariable: void removeFromRow(androidx.constraintlayout.solver.ArrayRow)>($r6);

     label5:
        return f0;
    }

    public void add(androidx.constraintlayout.solver.SolverVariable, float, boolean)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        androidx.constraintlayout.solver.SolverVariable r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f11;
        boolean z0;
        int i0;
        byte $b1, $b2, $b3, $b4;
        float[] $r2, $r3, $r4, $r5;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.SolverVariable;

        f0 := @parameter1: float;

        z0 := @parameter2: boolean;

        $f1 = <androidx.constraintlayout.solver.SolverVariableValues: float epsilon>;

        $f2 = neg $f1;

        $b1 = f0 cmpl $f2;

        if $b1 <= 0 goto label1;

        $f11 = <androidx.constraintlayout.solver.SolverVariableValues: float epsilon>;

        $b4 = f0 cmpg $f11;

        if $b4 >= 0 goto label1;

        return;

     label1:
        i0 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: int indexOf(androidx.constraintlayout.solver.SolverVariable)>(r1);

        if i0 != -1 goto label2;

        virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void put(androidx.constraintlayout.solver.SolverVariable,float)>(r1, f0);

        goto label3;

     label2:
        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $f3 = $r2[i0];

        $f4 = $f3 + f0;

        $r2[i0] = $f4;

        $r3 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $f7 = $r3[i0];

        $f5 = <androidx.constraintlayout.solver.SolverVariableValues: float epsilon>;

        $f6 = neg $f5;

        $b2 = $f7 cmpl $f6;

        if $b2 <= 0 goto label3;

        $r4 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $f9 = $r4[i0];

        $f8 = <androidx.constraintlayout.solver.SolverVariableValues: float epsilon>;

        $b3 = $f9 cmpg $f8;

        if $b3 >= 0 goto label3;

        $r5 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $r5[i0] = 0.0F;

        virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: float remove(androidx.constraintlayout.solver.SolverVariable,boolean)>(r1, z0);

     label3:
        return;
    }

    public float use(androidx.constraintlayout.solver.ArrayRow, boolean)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0, r2;
        androidx.constraintlayout.solver.ArrayRow r1;
        boolean z0;
        float f0, f1, $f3;
        int i0, $i1, $i2, i3, i4, i5;
        androidx.constraintlayout.solver.SolverVariable r3, $r4, $r5;
        androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables $r6;
        int[] $r7, $r10;
        float[] $r8;
        androidx.constraintlayout.solver.Cache $r9;
        androidx.constraintlayout.solver.SolverVariable[] $r11;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        r1 := @parameter0: androidx.constraintlayout.solver.ArrayRow;

        z0 := @parameter1: boolean;

        $r4 = r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        f0 = virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: float get(androidx.constraintlayout.solver.SolverVariable)>($r4);

        $r5 = r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.SolverVariable variable>;

        virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: float remove(androidx.constraintlayout.solver.SolverVariable,boolean)>($r5, z0);

        $r6 = r1.<androidx.constraintlayout.solver.ArrayRow: androidx.constraintlayout.solver.ArrayRow$ArrayRowVariables variables>;

        r2 = (androidx.constraintlayout.solver.SolverVariableValues) $r6;

        i0 = virtualinvoke r2.<androidx.constraintlayout.solver.SolverVariableValues: int getCurrentSize()>();

        i3 = r2.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i4 = 0;

        i5 = 0;

     label1:
        if i4 >= i0 goto label3;

        $r7 = r2.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i1 = $r7[i5];

        if $i1 == -1 goto label2;

        $r8 = r2.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        f1 = $r8[i5];

        $r9 = r0.<androidx.constraintlayout.solver.SolverVariableValues: androidx.constraintlayout.solver.Cache mCache>;

        $r11 = $r9.<androidx.constraintlayout.solver.Cache: androidx.constraintlayout.solver.SolverVariable[] mIndexedVariables>;

        $r10 = r2.<androidx.constraintlayout.solver.SolverVariableValues: int[] variables>;

        $i2 = $r10[i5];

        r3 = $r11[$i2];

        $f3 = f1 * f0;

        virtualinvoke r0.<androidx.constraintlayout.solver.SolverVariableValues: void add(androidx.constraintlayout.solver.SolverVariable,float,boolean)>(r3, $f3, z0);

        i4 = i4 + 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return f0;
    }

    public void invert()
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        int i0, i1, i2;
        float[] $r1;
        float $f0, $f1;
        int[] $r2;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        i0 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $f0 = $r1[i1];

        $f1 = $f0 * -1.0F;

        $r1[i1] = $f1;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        i1 = $r2[i1];

        if i1 != -1 goto label2;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void divideByAmount(float)
    {
        androidx.constraintlayout.solver.SolverVariableValues r0;
        float f0, $f1, $f2;
        int i0, i1, i2;
        float[] $r1;
        int[] $r2;

        r0 := @this: androidx.constraintlayout.solver.SolverVariableValues;

        f0 := @parameter0: float;

        i0 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int mCount>;

        i1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int head>;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r1 = r0.<androidx.constraintlayout.solver.SolverVariableValues: float[] values>;

        $f1 = $r1[i1];

        $f2 = $f1 / f0;

        $r1[i1] = $f2;

        $r2 = r0.<androidx.constraintlayout.solver.SolverVariableValues: int[] next>;

        i1 = $r2[i1];

        if i1 != -1 goto label2;

        goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    static void <clinit>()
    {
        <androidx.constraintlayout.solver.SolverVariableValues: float epsilon> = 0.001F;

        return;
    }

