androidx.wear.watchface.client.ComplicationSlotState
<androidx.wear.watchface.client.ComplicationSlotState: android.graphics.Rect bounds>
<androidx.wear.watchface.client.ComplicationSlotState: int boundsType>
<androidx.wear.watchface.client.ComplicationSlotState: java.util.List supportedTypes>
<androidx.wear.watchface.client.ComplicationSlotState: androidx.wear.complications.DefaultComplicationDataSourcePolicy defaultDataSourcePolicy>
<androidx.wear.watchface.client.ComplicationSlotState: androidx.wear.complications.data.ComplicationType defaultDataSourceType>
<androidx.wear.watchface.client.ComplicationSlotState: boolean isEnabled>
<androidx.wear.watchface.client.ComplicationSlotState: boolean isInitiallyEnabled>
<androidx.wear.watchface.client.ComplicationSlotState: androidx.wear.complications.data.ComplicationType currentType>
<androidx.wear.watchface.client.ComplicationSlotState: boolean fixedComplicationDataSource>
<androidx.wear.watchface.client.ComplicationSlotState: android.os.Bundle complicationConfigExtras>
    public void <init>(android.graphics.Rect, int, java.util.List, androidx.wear.complications.DefaultComplicationDataSourcePolicy, androidx.wear.complications.data.ComplicationType, boolean, boolean, androidx.wear.complications.data.ComplicationType, boolean, android.os.Bundle)
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        android.graphics.Rect r1;
        int i0;
        java.util.List r2;
        androidx.wear.complications.DefaultComplicationDataSourcePolicy r3;
        androidx.wear.complications.data.ComplicationType r4, r5;
        boolean z0, z1, z2;
        android.os.Bundle r6;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        r1 := @parameter0: android.graphics.Rect;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: androidx.wear.complications.DefaultComplicationDataSourcePolicy;

        r4 := @parameter4: androidx.wear.complications.data.ComplicationType;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        r5 := @parameter7: androidx.wear.complications.data.ComplicationType;

        z2 := @parameter8: boolean;

        r6 := @parameter9: android.os.Bundle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bounds");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "supportedTypes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "defaultDataSourcePolicy");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "defaultDataSourceType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "currentType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "complicationConfigExtras");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.wear.watchface.client.ComplicationSlotState: android.graphics.Rect bounds> = r1;

        r0.<androidx.wear.watchface.client.ComplicationSlotState: int boundsType> = i0;

        r0.<androidx.wear.watchface.client.ComplicationSlotState: java.util.List supportedTypes> = r2;

        r0.<androidx.wear.watchface.client.ComplicationSlotState: androidx.wear.complications.DefaultComplicationDataSourcePolicy defaultDataSourcePolicy> = r3;

        r0.<androidx.wear.watchface.client.ComplicationSlotState: androidx.wear.complications.data.ComplicationType defaultDataSourceType> = r4;

        r0.<androidx.wear.watchface.client.ComplicationSlotState: boolean isEnabled> = z0;

        r0.<androidx.wear.watchface.client.ComplicationSlotState: boolean isInitiallyEnabled> = z1;

        r0.<androidx.wear.watchface.client.ComplicationSlotState: androidx.wear.complications.data.ComplicationType currentType> = r5;

        r0.<androidx.wear.watchface.client.ComplicationSlotState: boolean fixedComplicationDataSource> = z2;

        r0.<androidx.wear.watchface.client.ComplicationSlotState: android.os.Bundle complicationConfigExtras> = r6;

        return;
    }

    public final android.graphics.Rect getBounds()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        android.graphics.Rect $r1;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $r1 = r0.<androidx.wear.watchface.client.ComplicationSlotState: android.graphics.Rect bounds>;

        return $r1;
    }

    public final int getBoundsType()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        int $i0;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $i0 = r0.<androidx.wear.watchface.client.ComplicationSlotState: int boundsType>;

        return $i0;
    }

    public final java.util.List getSupportedTypes()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        java.util.List $r1;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $r1 = r0.<androidx.wear.watchface.client.ComplicationSlotState: java.util.List supportedTypes>;

        return $r1;
    }

    public final androidx.wear.complications.DefaultComplicationDataSourcePolicy getDefaultDataSourcePolicy()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        androidx.wear.complications.DefaultComplicationDataSourcePolicy $r1;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $r1 = r0.<androidx.wear.watchface.client.ComplicationSlotState: androidx.wear.complications.DefaultComplicationDataSourcePolicy defaultDataSourcePolicy>;

        return $r1;
    }

    public final androidx.wear.complications.data.ComplicationType getDefaultDataSourceType()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        androidx.wear.complications.data.ComplicationType $r1;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $r1 = r0.<androidx.wear.watchface.client.ComplicationSlotState: androidx.wear.complications.data.ComplicationType defaultDataSourceType>;

        return $r1;
    }

    public final boolean isEnabled()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        boolean $z0;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $z0 = r0.<androidx.wear.watchface.client.ComplicationSlotState: boolean isEnabled>;

        return $z0;
    }

    public final boolean isInitiallyEnabled()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        boolean $z0;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $z0 = r0.<androidx.wear.watchface.client.ComplicationSlotState: boolean isInitiallyEnabled>;

        return $z0;
    }

    public final androidx.wear.complications.data.ComplicationType getCurrentType()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        androidx.wear.complications.data.ComplicationType $r1;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $r1 = r0.<androidx.wear.watchface.client.ComplicationSlotState: androidx.wear.complications.data.ComplicationType currentType>;

        return $r1;
    }

    public final boolean isFixedComplicationDataSource()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        boolean $z0;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $z0 = r0.<androidx.wear.watchface.client.ComplicationSlotState: boolean fixedComplicationDataSource>;

        return $z0;
    }

    public final android.os.Bundle getComplicationConfigExtras()
    {
        androidx.wear.watchface.client.ComplicationSlotState r0;
        android.os.Bundle $r1;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        $r1 = r0.<androidx.wear.watchface.client.ComplicationSlotState: android.os.Bundle complicationConfigExtras>;

        return $r1;
    }

    public void <init>(androidx.wear.watchface.data.ComplicationStateWireFormat)
    {
        androidx.wear.watchface.client.ComplicationSlotState r0, r4;
        androidx.wear.watchface.data.ComplicationStateWireFormat r1;
        java.util.Collection r2, r20;
        int[] r3, $r18;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i10;
        android.graphics.Rect r5, $r17;
        androidx.wear.complications.data.ComplicationType r6, $r10, $r12;
        java.util.ArrayList $r7;
        androidx.wear.complications.DefaultComplicationDataSourcePolicy $r8;
        androidx.wear.complications.data.ComplicationType$Companion $r9, $r11, $r16;
        boolean $z3, $z4, $z5;
        java.util.List r21, $r22, $r23;
        android.os.Bundle $r24;

        r0 := @this: androidx.wear.watchface.client.ComplicationSlotState;

        r1 := @parameter0: androidx.wear.watchface.data.ComplicationStateWireFormat;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "complicationStateWireFormat");

        $r17 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: android.graphics.Rect getBounds()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "complicationStateWireFormat.bounds");

        $i4 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: int getBoundsType()>();

        $r18 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: int[] getSupportedTypes()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r18, "complicationStateWireFormat.supportedTypes");

        i3 = $i4;

        r5 = $r17;

        r4 = r0;

        $r7 = new java.util.ArrayList;

        $i5 = lengthof $r18;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i5);

        r2 = (java.util.Collection) $r7;

        r3 = $r18;

        i0 = lengthof r3;

        i10 = 0;

     label1:
        if i10 >= i0 goto label2;

        i1 = r3[i10];

        i2 = i1;

        r20 = r2;

        $r16 = <androidx.wear.complications.data.ComplicationType: androidx.wear.complications.data.ComplicationType$Companion Companion>;

        r6 = virtualinvoke $r16.<androidx.wear.complications.data.ComplicationType$Companion: androidx.wear.complications.data.ComplicationType fromWireType(int)>(i2);

        interfaceinvoke r20.<java.util.Collection: boolean add(java.lang.Object)>(r6);

        i10 = i10 + 1;

        goto label1;

     label2:
        r21 = (java.util.List) r2;

        $r8 = new androidx.wear.complications.DefaultComplicationDataSourcePolicy;

        $r22 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: java.util.List getDefaultProvidersToTry()>();

        if $r22 != null goto label3;

        $r23 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

        goto label4;

     label3:
        $r23 = $r22;

     label4:
        $i6 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: int getFallbackSystemProvider()>();

        specialinvoke $r8.<androidx.wear.complications.DefaultComplicationDataSourcePolicy: void <init>(java.util.List,int)>($r23, $i6);

        $r9 = <androidx.wear.complications.data.ComplicationType: androidx.wear.complications.data.ComplicationType$Companion Companion>;

        $i7 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: int getDefaultProviderType()>();

        $r10 = virtualinvoke $r9.<androidx.wear.complications.data.ComplicationType$Companion: androidx.wear.complications.data.ComplicationType fromWireType(int)>($i7);

        $z3 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: boolean isEnabled()>();

        $z4 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: boolean isInitiallyEnabled()>();

        $r11 = <androidx.wear.complications.data.ComplicationType: androidx.wear.complications.data.ComplicationType$Companion Companion>;

        $i8 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: int getCurrentType()>();

        $r12 = virtualinvoke $r11.<androidx.wear.complications.data.ComplicationType$Companion: androidx.wear.complications.data.ComplicationType fromWireType(int)>($i8);

        $z5 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: boolean isFixedComplicationProvider()>();

        $r24 = virtualinvoke r1.<androidx.wear.watchface.data.ComplicationStateWireFormat: android.os.Bundle getComplicationConfigExtras()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r24, "complicationStateWireFor\u2026.complicationConfigExtras");

        specialinvoke r4.<androidx.wear.watchface.client.ComplicationSlotState: void <init>(android.graphics.Rect,int,java.util.List,androidx.wear.complications.DefaultComplicationDataSourcePolicy,androidx.wear.complications.data.ComplicationType,boolean,boolean,androidx.wear.complications.data.ComplicationType,boolean,android.os.Bundle)>(r5, i3, r21, $r8, $r10, $z3, $z4, $r12, $z5, $r24);

        return;
    }

