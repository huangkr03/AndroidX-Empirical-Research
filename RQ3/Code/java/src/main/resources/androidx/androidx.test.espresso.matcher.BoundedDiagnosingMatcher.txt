androidx.test.espresso.matcher.BoundedDiagnosingMatcher
<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: org.hamcrest.Matcher matcher>
    public void <init>(java.lang.Class)
    {
        androidx.test.espresso.matcher.BoundedDiagnosingMatcher r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;
        org.hamcrest.Matcher $r4;

        r0 := @this: androidx.test.espresso.matcher.BoundedDiagnosingMatcher;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.hamcrest.BaseMatcher: void <init>()>();

        $r2 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>($r3);

        r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: org.hamcrest.Matcher matcher> = $r4;

        return;
    }

    public transient void <init>(java.lang.Class, java.lang.Class, java.lang.Class[])
    {
        androidx.test.espresso.matcher.BoundedDiagnosingMatcher r0;
        java.lang.Class[] r1;
        java.util.ArrayList r2, r17;
        int $i0, i1, i2, i3;
        java.lang.Object $r3, $r7, $r11;
        java.lang.Class $r4, $r8, $r12, r14, r15, r16;
        org.hamcrest.Matcher $r5, $r9, $r10, $r13;
        boolean $z2, $z4;
        java.util.List r18, r19, r20;
        java.lang.Iterable r21;

        r0 := @this: androidx.test.espresso.matcher.BoundedDiagnosingMatcher;

        r14 := @parameter0: java.lang.Class;

        r15 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.Class[];

        specialinvoke r0.<org.hamcrest.BaseMatcher: void <init>()>();

        i1 = lengthof r1;

        r17 = new java.util.ArrayList;

        r2 = r17;

        $i0 = i1 + 2;

        specialinvoke r17.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r14);

        $r4 = (java.lang.Class) $r3;

        $r5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>($r4);

        r18 = (java.util.List) r2;

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>($r5);

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r7 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r15);

        $r8 = (java.lang.Class) $r7;

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>($r8);

        r19 = (java.util.List) r2;

        interfaceinvoke r19.<java.util.List: boolean add(java.lang.Object)>($r9);

        $z2 = virtualinvoke r15.<java.lang.Class: boolean isInterface()>();

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkArgument(boolean)>($z2);

        i2 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r16 = r1[i3];

        $r11 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r16);

        $r12 = (java.lang.Class) $r11;

        $r13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>($r12);

        r20 = (java.util.List) r2;

        interfaceinvoke r20.<java.util.List: boolean add(java.lang.Object)>($r13);

        $z4 = virtualinvoke r16.<java.lang.Class: boolean isInterface()>();

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: void checkArgument(boolean)>($z4);

        i3 = i3 + 1;

        goto label1;

     label2:
        r21 = (java.lang.Iterable) r2;

        $r10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher allOf(java.lang.Iterable)>(r21);

        r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: org.hamcrest.Matcher matcher> = $r10;

        return;
    }

    public final void describeMismatch(java.lang.Object, org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.BoundedDiagnosingMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        org.hamcrest.Matcher $r3, $r4;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.BoundedDiagnosingMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        if r1 != null goto label1;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("was null");

        return;

     label1:
        $r3 = r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: org.hamcrest.Matcher matcher>;

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r4 = r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: org.hamcrest.Matcher matcher>;

        interfaceinvoke $r4.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        return;

     label2:
        virtualinvoke r0.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: boolean matchesSafely(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        return;
    }

<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void describeMoreTo(org.hamcrest.Description)>
    public final void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.Description r0, $r3;
        org.hamcrest.StringDescription r1;
        org.hamcrest.Matcher $r2;
        boolean $z0;
        androidx.test.espresso.matcher.BoundedDiagnosingMatcher r5;
        java.lang.String r6;

        r5 := @this: androidx.test.espresso.matcher.BoundedDiagnosingMatcher;

        r0 := @parameter0: org.hamcrest.Description;

        $r2 = r5.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: org.hamcrest.Matcher matcher>;

        interfaceinvoke $r2.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r0);

        r1 = new org.hamcrest.StringDescription;

        specialinvoke r1.<org.hamcrest.StringDescription: void <init>()>();

        virtualinvoke r5.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: void describeMoreTo(org.hamcrest.Description)>(r1);

        r6 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r0.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" and ");

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(r6);

        return;

     label1:
        return;
    }

    public final boolean matches(java.lang.Object)
    {
        java.lang.Object r0;
        org.hamcrest.Matcher $r1;
        boolean $z0, $z1, z2;
        org.hamcrest.Description $r2;
        androidx.test.espresso.matcher.BoundedDiagnosingMatcher r3;

        r3 := @this: androidx.test.espresso.matcher.BoundedDiagnosingMatcher;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label2;

        $r1 = r3.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: org.hamcrest.Matcher matcher>;

        $z0 = interfaceinvoke $r1.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r2 = <org.hamcrest.Description: org.hamcrest.Description NONE>;

        $z1 = virtualinvoke r3.<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: boolean matchesSafely(java.lang.Object,org.hamcrest.Description)>(r0, $r2);

        if $z1 == 0 goto label2;

        z2 = 1;

     label1:
        return z2;

     label2:
        z2 = 0;

        goto label1;
    }

<androidx.test.espresso.matcher.BoundedDiagnosingMatcher: boolean matchesSafely(java.lang.Object,org.hamcrest.Description)>
