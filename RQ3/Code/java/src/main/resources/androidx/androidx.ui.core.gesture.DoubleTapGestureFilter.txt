androidx.ui.core.gesture.DoubleTapGestureFilter
<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlin.coroutines.CoroutineContext coroutineContext>
<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlin.jvm.functions.Function1 onDoubleTap>
<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.unit.Duration doubleTapTimeout>
<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state>
<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlinx.coroutines.Job job>
    public void <init>(kotlin.coroutines.CoroutineContext)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter r0;
        kotlin.coroutines.CoroutineContext r1;
        androidx.ui.unit.Duration $r2;
        androidx.ui.core.gesture.DoubleTapGestureFilter$State $r3;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter;

        r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "coroutineContext");

        specialinvoke r0.<androidx.ui.core.pointerinput.PointerInputFilter: void <init>()>();

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlin.coroutines.CoroutineContext coroutineContext> = r1;

        $r2 = staticinvoke <androidx.ui.core.gesture.ConstantsKt: androidx.ui.unit.Duration getDoubleTapTimeout()>();

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.unit.Duration doubleTapTimeout> = $r2;

        $r3 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle>;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state> = $r3;

        return;
    }

    public final kotlin.coroutines.CoroutineContext getCoroutineContext()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter r0;
        kotlin.coroutines.CoroutineContext $r1;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter;

        $r1 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlin.coroutines.CoroutineContext coroutineContext>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function1 getOnDoubleTap()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter;

        r1 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlin.jvm.functions.Function1 onDoubleTap>;

        if r1 == null goto label1;

        return r1;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("onDoubleTap");

        throw null;
    }

    public final void setOnDoubleTap(kotlin.jvm.functions.Function1)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter r0;
        kotlin.jvm.functions.Function1 r1;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlin.jvm.functions.Function1 onDoubleTap> = r1;

        return;
    }

    public final androidx.ui.unit.Duration getDoubleTapTimeout()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter r0;
        androidx.ui.unit.Duration $r1;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter;

        $r1 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.unit.Duration doubleTapTimeout>;

        return $r1;
    }

    public final void setDoubleTapTimeout(androidx.ui.unit.Duration)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter r0;
        androidx.ui.unit.Duration r1;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter;

        r1 := @parameter0: androidx.ui.unit.Duration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.unit.Duration doubleTapTimeout> = r1;

        return;
    }

    public java.util.List onPointerInput(java.util.List, androidx.ui.core.PointerEventPass, androidx.ui.unit.IntPxSize)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter r0;
        java.util.List r1, r42, $r67;
        androidx.ui.core.PointerEventPass r2, $r7, $r66;
        androidx.ui.unit.IntPxSize r3;
        androidx.ui.core.PointerInputChange r4, r6, $r27, r46, r50, r54, r59, r64;
        java.util.Collection r5, $r8, $r30, $r32, $r39, $r41, r61;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z25, $z26, $z29, $z30, $z33, $z34, $z37, $z38, z41, $z43, z45, $z47;
        androidx.ui.core.gesture.DoubleTapGestureFilter$State $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r31, $r33, $r40;
        java.util.ArrayList $r23;
        int $i0, i1, $i2;
        kotlin.jvm.functions.Function1 $r25;
        java.lang.Object $r26, r45, r49, r53, r58, r63, r68, r69;
        androidx.ui.core.PointerInputData $r28;
        androidx.ui.unit.Duration $r34;
        kotlin.coroutines.CoroutineContext $r35;
        androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3 $r36;
        kotlin.jvm.functions.Function0 $r37;
        kotlinx.coroutines.Job $r38, $r55;
        java.lang.Iterable $r43, $r47, $r51, $r56, $r60;
        java.util.Iterator $r44, $r48, $r52, $r57, $r62;
        androidx.ui.unit.PxPosition $r65;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: androidx.ui.core.PointerEventPass;

        r3 := @parameter2: androidx.ui.unit.IntPxSize;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "changes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "pass");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "bounds");

        r42 = r1;

        $r7 = <androidx.ui.core.PointerEventPass: androidx.ui.core.PointerEventPass PostUp>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r7);

        if $z1 == 0 goto label26;

        $r11 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state>;

        $r10 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, $r10);

        if $z3 == 0 goto label05;

        $r43 = (java.lang.Iterable) r42;

        $z21 = $r43 instanceof java.util.Collection;

        if $z21 == 0 goto label01;

        $r41 = (java.util.Collection) $r43;

        $z23 = interfaceinvoke $r41.<java.util.Collection: boolean isEmpty()>();

        if $z23 == 0 goto label01;

        $z25 = 1;

        goto label04;

     label01:
        $r44 = interfaceinvoke $r43.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z26 = interfaceinvoke $r44.<java.util.Iterator: boolean hasNext()>();

        if $z26 == 0 goto label03;

        r45 = interfaceinvoke $r44.<java.util.Iterator: java.lang.Object next()>();

        r46 = (androidx.ui.core.PointerInputChange) r45;

        $z22 = staticinvoke <androidx.ui.core.PointerInputKt: boolean changedToDown(androidx.ui.core.PointerInputChange)>(r46);

        if $z22 != 0 goto label02;

        $z25 = 0;

        goto label04;

     label03:
        $z25 = 1;

     label04:
        if $z25 == 0 goto label05;

        $r40 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Down>;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state> = $r40;

        goto label26;

     label05:
        $r13 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state>;

        $r12 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Down>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r13, $r12);

        if $z4 == 0 goto label10;

        $r47 = (java.lang.Iterable) r42;

        $z18 = $r47 instanceof java.util.Collection;

        if $z18 == 0 goto label06;

        $r39 = (java.util.Collection) $r47;

        $z20 = interfaceinvoke $r39.<java.util.Collection: boolean isEmpty()>();

        if $z20 == 0 goto label06;

        $z29 = 1;

        goto label09;

     label06:
        $r48 = interfaceinvoke $r47.<java.lang.Iterable: java.util.Iterator iterator()>();

     label07:
        $z30 = interfaceinvoke $r48.<java.util.Iterator: boolean hasNext()>();

        if $z30 == 0 goto label08;

        r49 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>();

        r50 = (androidx.ui.core.PointerInputChange) r49;

        $z19 = staticinvoke <androidx.ui.core.PointerInputKt: boolean changedToUp(androidx.ui.core.PointerInputChange)>(r50);

        if $z19 != 0 goto label07;

        $z29 = 0;

        goto label09;

     label08:
        $z29 = 1;

     label09:
        if $z29 == 0 goto label10;

        $r33 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Up>;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state> = $r33;

        $r34 = virtualinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.unit.Duration getDoubleTapTimeout()>();

        $r35 = virtualinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        $r36 = new androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3;

        specialinvoke $r36.<androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3: void <init>(androidx.ui.core.gesture.DoubleTapGestureFilter)>(r0);

        $r37 = (kotlin.jvm.functions.Function0) $r36;

        $r38 = staticinvoke <androidx.ui.temputils.CoroutineUtilsKt: kotlinx.coroutines.Job delay(androidx.ui.unit.Duration,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function0)>($r34, $r35, $r37);

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlinx.coroutines.Job job> = $r38;

        goto label26;

     label10:
        $r15 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state>;

        $r14 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Up>;

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r15, $r14);

        if $z5 == 0 goto label17;

        $r51 = (java.lang.Iterable) r42;

        $z15 = $r51 instanceof java.util.Collection;

        if $z15 == 0 goto label11;

        $r32 = (java.util.Collection) $r51;

        $z17 = interfaceinvoke $r32.<java.util.Collection: boolean isEmpty()>();

        if $z17 == 0 goto label11;

        $z33 = 1;

        goto label14;

     label11:
        $r52 = interfaceinvoke $r51.<java.lang.Iterable: java.util.Iterator iterator()>();

     label12:
        $z34 = interfaceinvoke $r52.<java.util.Iterator: boolean hasNext()>();

        if $z34 == 0 goto label13;

        r53 = interfaceinvoke $r52.<java.util.Iterator: java.lang.Object next()>();

        r54 = (androidx.ui.core.PointerInputChange) r53;

        $z16 = staticinvoke <androidx.ui.core.PointerInputKt: boolean changedToDown(androidx.ui.core.PointerInputChange)>(r54);

        if $z16 != 0 goto label12;

        $z33 = 0;

        goto label14;

     label13:
        $z33 = 1;

     label14:
        if $z33 == 0 goto label17;

        $r55 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlinx.coroutines.Job job>;

        if $r55 != null goto label15;

        goto label16;

     label15:
        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>($r55, null, 1, null);

     label16:
        $r31 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State SecondDown>;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state> = $r31;

        goto label26;

     label17:
        $r17 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state>;

        $r16 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State SecondDown>;

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r17, $r16);

        if $z6 == 0 goto label24;

        $r56 = (java.lang.Iterable) r42;

        $z10 = $r56 instanceof java.util.Collection;

        if $z10 == 0 goto label18;

        $r30 = (java.util.Collection) $r56;

        $z14 = interfaceinvoke $r30.<java.util.Collection: boolean isEmpty()>();

        if $z14 == 0 goto label18;

        $z37 = 1;

        goto label21;

     label18:
        $r57 = interfaceinvoke $r56.<java.lang.Iterable: java.util.Iterator iterator()>();

     label19:
        $z38 = interfaceinvoke $r57.<java.util.Iterator: boolean hasNext()>();

        if $z38 == 0 goto label20;

        r58 = interfaceinvoke $r57.<java.util.Iterator: java.lang.Object next()>();

        r59 = (androidx.ui.core.PointerInputChange) r58;

        $z13 = staticinvoke <androidx.ui.core.PointerInputKt: boolean changedToUp(androidx.ui.core.PointerInputChange)>(r59);

        if $z13 != 0 goto label19;

        $z37 = 0;

        goto label21;

     label20:
        $z37 = 1;

     label21:
        if $z37 == 0 goto label24;

        $r60 = (java.lang.Iterable) r42;

        $r23 = new java.util.ArrayList;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r60, 10);

        specialinvoke $r23.<java.util.ArrayList: void <init>(int)>($i0);

        r61 = (java.util.Collection) $r23;

        z41 = 0;

        $r62 = interfaceinvoke $r60.<java.lang.Iterable: java.util.Iterator iterator()>();

     label22:
        $z11 = interfaceinvoke $r62.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label23;

        r63 = interfaceinvoke $r62.<java.util.Iterator: java.lang.Object next()>();

        r64 = (androidx.ui.core.PointerInputChange) r63;

        r5 = r61;

        r6 = staticinvoke <androidx.ui.core.PointerInputKt: androidx.ui.core.PointerInputChange consumeDownChange(androidx.ui.core.PointerInputChange)>(r64);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>(r6);

        goto label22;

     label23:
        r42 = (java.util.List) r61;

        $r24 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle>;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state> = $r24;

        $r25 = virtualinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlin.jvm.functions.Function1 getOnDoubleTap()>();

        $r26 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r27 = (androidx.ui.core.PointerInputChange) $r26;

        $r28 = virtualinvoke $r27.<androidx.ui.core.PointerInputChange: androidx.ui.core.PointerInputData getPrevious()>();

        $r65 = virtualinvoke $r28.<androidx.ui.core.PointerInputData: androidx.ui.unit.PxPosition getPosition()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r65);

        interfaceinvoke $r25.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r65);

        goto label26;

     label24:
        $r19 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state>;

        $r18 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Down>;

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r19, $r18);

        if $z7 != 0 goto label25;

        $r22 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state>;

        $r21 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State SecondDown>;

        $z9 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r22, $r21);

        if $z9 == 0 goto label26;

     label25:
        $z8 = staticinvoke <androidx.ui.core.gesture.GestureUtilsKt: boolean anyPointersInBounds(java.util.List,androidx.ui.unit.IntPxSize)>(r42, r3);

        if $z8 != 0 goto label26;

        $r20 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle>;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state> = $r20;

     label26:
        $r66 = <androidx.ui.core.PointerEventPass: androidx.ui.core.PointerEventPass PostDown>;

        $z43 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, $r66);

        if $z43 == 0 goto label31;

        $r67 = r42;

        z45 = 0;

        i1 = 0;

        $r8 = (java.util.Collection) r42;

        $i2 = interfaceinvoke $r8.<java.util.Collection: int size()>();

     label27:
        if i1 >= $i2 goto label29;

        r68 = interfaceinvoke $r67.<java.util.List: java.lang.Object get(int)>(i1);

        r69 = r68;

        r4 = (androidx.ui.core.PointerInputChange) r69;

        $z2 = staticinvoke <androidx.ui.core.PointerInputKt: boolean anyPositionChangeConsumed(androidx.ui.core.PointerInputChange)>(r4);

        if $z2 == 0 goto label28;

        $z47 = 1;

        goto label30;

     label28:
        i1 = i1 + 1;

        goto label27;

     label29:
        $z47 = 0;

     label30:
        if $z47 == 0 goto label31;

        $r9 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle>;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state> = $r9;

     label31:
        return r42;
    }

    public void onCancel()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter r0;
        kotlinx.coroutines.Job r1;
        androidx.ui.core.gesture.DoubleTapGestureFilter$State $r2;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter;

        r1 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: kotlinx.coroutines.Job job>;

        if r1 != null goto label1;

        goto label2;

     label1:
        staticinvoke <kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)>(r1, null, 1, null);

     label2:
        $r2 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle>;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state> = $r2;

        return;
    }

    public static final void access$setState$p(androidx.ui.core.gesture.DoubleTapGestureFilter, androidx.ui.core.gesture.DoubleTapGestureFilter$State)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter r0;
        androidx.ui.core.gesture.DoubleTapGestureFilter$State r1;

        r0 := @parameter0: androidx.ui.core.gesture.DoubleTapGestureFilter;

        r1 := @parameter1: androidx.ui.core.gesture.DoubleTapGestureFilter$State;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter: androidx.ui.core.gesture.DoubleTapGestureFilter$State state> = r1;

        return;
    }

androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher
<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: androidx.ui.core.CustomEventDispatcher customEventDispatcher>
<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: java.util.Set blockedUpEvents>
    public void <init>(androidx.ui.core.CustomEventDispatcher)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher r0;
        androidx.ui.core.CustomEventDispatcher r1;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher;

        r1 := @parameter0: androidx.ui.core.CustomEventDispatcher;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "customEventDispatcher");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: androidx.ui.core.CustomEventDispatcher customEventDispatcher> = r1;

        return;
    }

    public final androidx.ui.core.CustomEventDispatcher getCustomEventDispatcher()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher r0;
        androidx.ui.core.CustomEventDispatcher $r1;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher;

        $r1 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: androidx.ui.core.CustomEventDispatcher customEventDispatcher>;

        return $r1;
    }

    public final void delayUp(java.util.List)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher r0, r11, r14, r20;
        java.util.List r1;
        androidx.ui.core.PointerInputChange r2;
        androidx.ui.core.PointerId r3;
        java.util.LinkedHashSet $r4;
        boolean $z1, z3, z5, z7;
        androidx.ui.core.CustomEventDispatcher $r5, $r6;
        androidx.ui.core.gesture.customevents.DelayUpEvent $r7;
        androidx.ui.core.gesture.customevents.DelayUpMessage $r8;
        androidx.ui.core.CustomEvent $r9;
        long $l0;
        java.lang.Iterable $r10;
        java.util.Set r12, $r19, r21, r22;
        java.util.Collection r13, r17, r18;
        java.util.Iterator r15;
        java.lang.Object r16;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "changes");

        $r10 = (java.lang.Iterable) r1;

        r11 = r0;

        z3 = 0;

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        r12 = (java.util.Set) $r4;

        r13 = (java.util.Collection) r12;

        r14 = r11;

        r15 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.ui.core.PointerInputChange) r16;

        r17 = r13;

        $l0 = virtualinvoke r2.<androidx.ui.core.PointerInputChange: long getId()>();

        r3 = staticinvoke <androidx.ui.core.PointerId: androidx.ui.core.PointerId box-impl(long)>($l0);

        interfaceinvoke r17.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        goto label1;

     label2:
        r18 = r13;

        $r19 = (java.util.Set) r18;

        r20 = r14;

        z5 = 0;

        r21 = $r19;

        z7 = 0;

        $r5 = virtualinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: androidx.ui.core.CustomEventDispatcher getCustomEventDispatcher()>();

        interfaceinvoke $r5.<androidx.ui.core.CustomEventDispatcher: void retainHitPaths(java.util.Set)>(r21);

        $r6 = virtualinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: androidx.ui.core.CustomEventDispatcher getCustomEventDispatcher()>();

        $r7 = new androidx.ui.core.gesture.customevents.DelayUpEvent;

        $r8 = <androidx.ui.core.gesture.customevents.DelayUpMessage: androidx.ui.core.gesture.customevents.DelayUpMessage DelayUp>;

        specialinvoke $r7.<androidx.ui.core.gesture.customevents.DelayUpEvent: void <init>(androidx.ui.core.gesture.customevents.DelayUpMessage,java.util.Set)>($r8, r21);

        $r9 = (androidx.ui.core.CustomEvent) $r7;

        interfaceinvoke $r6.<androidx.ui.core.CustomEventDispatcher: void dispatchCustomEvent(androidx.ui.core.CustomEvent)>($r9);

        r22 = $r19;

        r20.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: java.util.Set blockedUpEvents> = r22;

        return;
    }

    public final void disallowUp()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher r0;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher;

        specialinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: void unBlockUpEvents(boolean)>(1);

        return;
    }

    public final void allowUp()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher r0;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher;

        specialinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: void unBlockUpEvents(boolean)>(0);

        return;
    }

    private final void unBlockUpEvents(boolean)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher r0;
        boolean z0, z1, z2;
        java.util.Set r1, r2, r3, $r10;
        androidx.ui.core.gesture.customevents.DelayUpMessage r4, $r9;
        androidx.ui.core.CustomEventDispatcher $r5, $r8;
        androidx.ui.core.gesture.customevents.DelayUpEvent $r6;
        androidx.ui.core.CustomEvent $r7;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher;

        z0 := @parameter0: boolean;

        r1 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: java.util.Set blockedUpEvents>;

        if r1 != null goto label1;

        goto label4;

     label1:
        r2 = r1;

        z1 = 0;

        z2 = 0;

        r3 = r2;

        if z0 == 0 goto label2;

        $r9 = <androidx.ui.core.gesture.customevents.DelayUpMessage: androidx.ui.core.gesture.customevents.DelayUpMessage DelayedUpConsumed>;

        goto label3;

     label2:
        $r9 = <androidx.ui.core.gesture.customevents.DelayUpMessage: androidx.ui.core.gesture.customevents.DelayUpMessage DelayedUpNotConsumed>;

     label3:
        r4 = $r9;

        $r5 = virtualinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: androidx.ui.core.CustomEventDispatcher getCustomEventDispatcher()>();

        $r6 = new androidx.ui.core.gesture.customevents.DelayUpEvent;

        specialinvoke $r6.<androidx.ui.core.gesture.customevents.DelayUpEvent: void <init>(androidx.ui.core.gesture.customevents.DelayUpMessage,java.util.Set)>(r4, r3);

        $r7 = (androidx.ui.core.CustomEvent) $r6;

        interfaceinvoke $r5.<androidx.ui.core.CustomEventDispatcher: void dispatchCustomEvent(androidx.ui.core.CustomEvent)>($r7);

        $r8 = virtualinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: androidx.ui.core.CustomEventDispatcher getCustomEventDispatcher()>();

        interfaceinvoke $r8.<androidx.ui.core.CustomEventDispatcher: void releaseHitPaths(java.util.Set)>(r3);

     label4:
        $r10 = (java.util.Set) null;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$DelayUpDispatcher: java.util.Set blockedUpEvents> = $r10;

        return;
    }

androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3
<androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3: androidx.ui.core.gesture.DoubleTapGestureFilter $this>
    void <init>(androidx.ui.core.gesture.DoubleTapGestureFilter)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3 r0;
        androidx.ui.core.gesture.DoubleTapGestureFilter $r1;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3;

        $r1 := @parameter0: androidx.ui.core.gesture.DoubleTapGestureFilter;

        r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3: androidx.ui.core.gesture.DoubleTapGestureFilter $this> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3 r0;
        androidx.ui.core.gesture.DoubleTapGestureFilter$State $r1;
        androidx.ui.core.gesture.DoubleTapGestureFilter $r2;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3;

        $r2 = r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3: androidx.ui.core.gesture.DoubleTapGestureFilter $this>;

        $r1 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle>;

        staticinvoke <androidx.ui.core.gesture.DoubleTapGestureFilter: void access$setState$p(androidx.ui.core.gesture.DoubleTapGestureFilter,androidx.ui.core.gesture.DoubleTapGestureFilter$State)>($r2, $r1);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3;

        virtualinvoke r0.<androidx.ui.core.gesture.DoubleTapGestureFilter$onPointerInput$3: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.ui.core.gesture.DoubleTapGestureFilter$State
<androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle>
<androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Down>
<androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Up>
<androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State SecondDown>
<androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$State r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.ui.core.gesture.DoubleTapGestureFilter$State;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static final androidx.ui.core.gesture.DoubleTapGestureFilter$State[] values()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$State[] r0, r1;
        int $i0, $i1;

        r0 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State[] $VALUES>;

        $i0 = lengthof r0;

        r1 = newarray (androidx.ui.core.gesture.DoubleTapGestureFilter$State)[$i0];

        $i1 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1);

        return r1;
    }

    public static final androidx.ui.core.gesture.DoubleTapGestureFilter$State valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.ui.core.gesture.DoubleTapGestureFilter$State $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "value");

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/ui/core/gesture/DoubleTapGestureFilter$State;", r0);

        $r2 = (androidx.ui.core.gesture.DoubleTapGestureFilter$State) $r1;

        return $r2;
    }

    public static final void <clinit>()
    {
        androidx.ui.core.gesture.DoubleTapGestureFilter$State[] r0;
        androidx.ui.core.gesture.DoubleTapGestureFilter$State $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        $r1 = new androidx.ui.core.gesture.DoubleTapGestureFilter$State;

        specialinvoke $r1.<androidx.ui.core.gesture.DoubleTapGestureFilter$State: void <init>(java.lang.String,int)>("Idle", 0);

        <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle> = $r1;

        $r2 = new androidx.ui.core.gesture.DoubleTapGestureFilter$State;

        specialinvoke $r2.<androidx.ui.core.gesture.DoubleTapGestureFilter$State: void <init>(java.lang.String,int)>("Down", 1);

        <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Down> = $r2;

        $r3 = new androidx.ui.core.gesture.DoubleTapGestureFilter$State;

        specialinvoke $r3.<androidx.ui.core.gesture.DoubleTapGestureFilter$State: void <init>(java.lang.String,int)>("Up", 2);

        <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Up> = $r3;

        $r4 = new androidx.ui.core.gesture.DoubleTapGestureFilter$State;

        specialinvoke $r4.<androidx.ui.core.gesture.DoubleTapGestureFilter$State: void <init>(java.lang.String,int)>("SecondDown", 3);

        <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State SecondDown> = $r4;

        r0 = newarray (androidx.ui.core.gesture.DoubleTapGestureFilter$State)[4];

        $r5 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Idle>;

        r0[0] = $r5;

        $r6 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Down>;

        r0[1] = $r6;

        $r7 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State Up>;

        r0[2] = $r7;

        $r8 = <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State SecondDown>;

        r0[3] = $r8;

        <androidx.ui.core.gesture.DoubleTapGestureFilter$State: androidx.ui.core.gesture.DoubleTapGestureFilter$State[] $VALUES> = r0;

        return;
    }

