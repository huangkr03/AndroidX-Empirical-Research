androidx.benchmark.ShellImpl
<androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>
<androidx.benchmark.ShellImpl: android.app.UiAutomation uiAutomation>
<androidx.benchmark.ShellImpl: boolean isSessionRooted>
<androidx.benchmark.ShellImpl: boolean isSuAvailable>
    private void <init>()
    {
        androidx.benchmark.ShellImpl r0;

        r0 := @this: androidx.benchmark.ShellImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean isSessionRooted()
    {
        androidx.benchmark.ShellImpl r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.ShellImpl;

        $z0 = <androidx.benchmark.ShellImpl: boolean isSessionRooted>;

        return $z0;
    }

    public final void setSessionRooted(boolean)
    {
        androidx.benchmark.ShellImpl r0;
        boolean z0;

        r0 := @this: androidx.benchmark.ShellImpl;

        z0 := @parameter0: boolean;

        <androidx.benchmark.ShellImpl: boolean isSessionRooted> = z0;

        return;
    }

    public final boolean isSuAvailable()
    {
        androidx.benchmark.ShellImpl r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.ShellImpl;

        $z0 = <androidx.benchmark.ShellImpl: boolean isSuAvailable>;

        return $z0;
    }

    public final void setSuAvailable(boolean)
    {
        androidx.benchmark.ShellImpl r0;
        boolean z0;

        r0 := @this: androidx.benchmark.ShellImpl;

        z0 := @parameter0: boolean;

        <androidx.benchmark.ShellImpl: boolean isSuAvailable> = z0;

        return;
    }

    public final java.lang.String executeCommand(java.lang.String)
    {
        androidx.benchmark.ShellImpl r0, $r8, $r9;
        java.lang.String r1, r2, r6, $r7, $r14, $r17, r23;
        android.os.ParcelFileDescriptor r3;
        java.io.Closeable r4;
        java.nio.charset.Charset r5;
        boolean $z0, $z1;
        java.lang.Throwable $r10, $r11, $r12, r20, r21, r22, r24;
        android.app.UiAutomation $r13;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r15, r16;
        java.io.InputStream $r18;
        byte[] $r19;

        r0 := @this: androidx.benchmark.ShellImpl;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "cmd");

        $r7 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("executeCommand ", r1);

        r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String take(java.lang.String,int)>($r7, 127);

     label01:
        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>(r2);

        $r13 = staticinvoke <androidx.benchmark.ShellImpl: android.app.UiAutomation access$getUiAutomation$p()>();

        $r8 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $z0 = virtualinvoke $r8.<androidx.benchmark.ShellImpl: boolean isSessionRooted()>();

        if $z0 != 0 goto label02;

        $r9 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $z1 = virtualinvoke $r9.<androidx.benchmark.ShellImpl: boolean isSuAvailable()>();

        if $z1 == 0 goto label02;

        $r14 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("su root ", r1);

        goto label03;

     label02:
        $r14 = r1;

     label03:
        r3 = virtualinvoke $r13.<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>($r14);

        $r15 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke $r15.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r3);

        r4 = (java.io.Closeable) $r15;

     label04:
        r16 = (android.os.ParcelFileDescriptor$AutoCloseInputStream) r4;

        $r17 = new java.lang.String;

        $r18 = (java.io.InputStream) r16;

        $r19 = staticinvoke <kotlin.io.ByteStreamsKt: byte[] readBytes(java.io.InputStream)>($r18);

        r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "defaultCharset()");

        specialinvoke $r17.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r19, r5);

        r6 = $r17;

     label05:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r4, null);

        goto label09;

     label06:
        $r10 := @caughtexception;

        r20 = $r10;

        r21 = r20;

        throw r20;

     label07:
        $r11 := @caughtexception;

        r22 = $r11;

     label08:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r4, r21);

        throw r22;

     label09:
        r23 = r6;

     label10:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label13;

     label11:
        $r12 := @caughtexception;

        r24 = $r12;

     label12:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw r24;

     label13:
        return r23;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public final kotlin.Pair executeScript(java.lang.String, java.lang.String, boolean)
    {
        androidx.benchmark.ShellImpl r0, $r15, $r24, $r25, $r28, $r32, $r53, $r57;
        java.lang.String r1, r2, r3, r6, r7, $r11, $r13, $r17, $r21, $r26, $r29, $r37, $r47, $r54, $r62, $r66, r67, $r68, $r69;
        boolean z0;
        java.io.File r4, r5, r8, $r64;
        kotlin.Pair r9, $r27, r71;
        androidx.benchmark.Outputs $r12;
        java.lang.StringBuilder $r14, $r16, $r18, $r19, $r20, $r31, $r33, $r34, $r35, $r36, $r40, $r41, $r42, $r43, $r45, $r46, $r48, $r49, $r50, $r56, $r58, $r59, $r60, $r61;
        androidx.benchmark.Shell $r23;
        java.lang.Throwable $r51, $r52, r70, r72;

        r0 := @this: androidx.benchmark.ShellImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "script");

        $r11 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("executeScript ", r1);

        r3 = staticinvoke <kotlin.text.StringsKt: java.lang.String take(java.lang.String,int)>($r11, 127);

     label01:
        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>(r3);

        $r12 = <androidx.benchmark.Outputs: androidx.benchmark.Outputs INSTANCE>;

        r4 = virtualinvoke $r12.<androidx.benchmark.Outputs: java.io.File getDirUsableByAppAndShell()>();

        r5 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("temporaryScript", ".sh", r4);

        $r13 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        r6 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("/data/local/tmp/", $r13);

        if r2 != null goto label02;

        $r64 = null;

        goto label03;

     label02:
        $r64 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("temporaryStdin", null, r4);

     label03:
        r8 = $r64;

        if z0 == 0 goto label04;

        $r66 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>(r6, "_stderr");

        goto label05;

     label04:
        $r66 = (java.lang.String) null;

     label05:
        r7 = $r66;

     label06:
        r67 = r1;

        if r8 == null goto label07;

        staticinvoke <kotlin.io.FilesKt: void writeText$default(java.io.File,java.lang.String,java.nio.charset.Charset,int,java.lang.Object)>(r8, r2, null, 2, null);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cat ");

        $r47 = virtualinvoke r8.<java.io.File: java.lang.String getAbsolutePath()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        r67 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        if r7 == null goto label08;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 2> ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        r67 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "writableScriptFile");

        staticinvoke <kotlin.io.FilesKt: void writeText$default(java.io.File,java.lang.String,java.nio.charset.Charset,int,java.lang.Object)>(r5, r67, null, 2, null);

        $r15 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cp ");

        $r17 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>($r21);

        $r23 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        virtualinvoke $r23.<androidx.benchmark.Shell: void chmodExecutable(java.lang.String)>(r6);

        $r24 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r68 = virtualinvoke $r24.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>(r6);

        if r7 != null goto label09;

        $r69 = null;

        goto label10;

     label09:
        $r25 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r26 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("cat ", r7);

        $r69 = virtualinvoke $r25.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>($r26);

     label10:
        $r27 = new kotlin.Pair;

        specialinvoke $r27.<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>($r68, $r69);

        r9 = $r27;

     label11:
        if r8 != null goto label12;

        goto label13;

     label12:
        virtualinvoke r8.<java.io.File: boolean delete()>();

     label13:
        virtualinvoke r5.<java.io.File: boolean delete()>();

        if r7 == null goto label14;

        $r32 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rm ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>($r37);

        goto label15;

     label14:
        $r28 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r29 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("rm ", r6);

        virtualinvoke $r28.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>($r29);

     label15:
        goto label22;

     label16:
        $r52 := @caughtexception;

        r70 = $r52;

     label17:
        if r8 != null goto label18;

        goto label19;

     label18:
        virtualinvoke r8.<java.io.File: boolean delete()>();

     label19:
        virtualinvoke r5.<java.io.File: boolean delete()>();

        if r7 == null goto label20;

        $r57 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rm ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>($r62);

        goto label21;

     label20:
        $r53 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r54 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("rm ", r6);

        virtualinvoke $r53.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>($r54);

     label21:
        throw r70;

     label22:
        r71 = r9;

     label23:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        goto label26;

     label24:
        $r51 := @caughtexception;

        r72 = $r51;

     label25:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw r72;

     label26:
        return r71;

        catch java.lang.Throwable from label06 to label11 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label01 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    public static final android.app.UiAutomation access$getUiAutomation$p()
    {
        android.app.UiAutomation $r0;

        $r0 = <androidx.benchmark.ShellImpl: android.app.UiAutomation uiAutomation>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.benchmark.ShellImpl $r0, $r6, $r7, $r11, $r12;
        android.os.Looper $r1;
        java.lang.Thread $r2, $r3;
        boolean $z0, $z1, $z2, $z3;
        android.app.Instrumentation $r4;
        android.app.UiAutomation $r5;
        java.lang.String $r8, $r18, $r19;
        java.lang.CharSequence $r9, $r10, $r15, $r16;
        kotlin.Pair $r13;
        java.lang.Object $r14;
        java.lang.IllegalArgumentException $r17;

        $r0 = new androidx.benchmark.ShellImpl;

        specialinvoke $r0.<androidx.benchmark.ShellImpl: void <init>()>();

        <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE> = $r0;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r2 = virtualinvoke $r1.<android.os.Looper: java.lang.Thread getThread()>();

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 != 0 goto label3;

        $r19 = "ShellImpl must not be initialized on the UI thread - UiAutomation must not be connected on the main thread!";

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label3:
        $r4 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r5 = virtualinvoke $r4.<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>();

        <androidx.benchmark.ShellImpl: android.app.UiAutomation uiAutomation> = $r5;

        $r6 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r7 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r8 = virtualinvoke $r7.<androidx.benchmark.ShellImpl: java.lang.String executeCommand(java.lang.String)>("id");

        $r10 = (java.lang.CharSequence) $r8;

        $r9 = (java.lang.CharSequence) "uid=0(root)";

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r10, $r9, 0, 2, null);

        <androidx.benchmark.ShellImpl: boolean isSessionRooted> = $z1;

        $r11 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r12 = <androidx.benchmark.ShellImpl: androidx.benchmark.ShellImpl INSTANCE>;

        $r13 = virtualinvoke $r12.<androidx.benchmark.ShellImpl: kotlin.Pair executeScript(java.lang.String,java.lang.String,boolean)>("su root id", null, 0);

        $r14 = virtualinvoke $r13.<kotlin.Pair: java.lang.Object getFirst()>();

        $r16 = (java.lang.CharSequence) $r14;

        $r15 = (java.lang.CharSequence) "uid=0(root)";

        $z2 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r16, $r15, 0, 2, null);

        <androidx.benchmark.ShellImpl: boolean isSuAvailable> = $z2;

        return;
    }

