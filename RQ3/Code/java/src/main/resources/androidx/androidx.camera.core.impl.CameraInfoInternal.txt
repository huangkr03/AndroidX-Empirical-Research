androidx.camera.core.impl.CameraInfoInternal
<androidx.camera.core.impl.CameraInfoInternal: java.lang.Integer getLensFacing()>
<androidx.camera.core.impl.CameraInfoInternal: java.lang.String getCameraId()>
<androidx.camera.core.impl.CameraInfoInternal: void addSessionCaptureCallback(java.util.concurrent.Executor,androidx.camera.core.impl.CameraCaptureCallback)>
<androidx.camera.core.impl.CameraInfoInternal: void removeSessionCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>
<androidx.camera.core.impl.CameraInfoInternal: androidx.camera.core.impl.Quirks getCameraQuirks()>
<androidx.camera.core.impl.CameraInfoInternal: androidx.camera.core.impl.CamcorderProfileProvider getCamcorderProfileProvider()>
<androidx.camera.core.impl.CameraInfoInternal: androidx.camera.core.impl.Timebase getTimebase()>
    public androidx.camera.core.CameraSelector getCameraSelector()
    {
        androidx.camera.core.impl.CameraInfoInternal r0;
        androidx.camera.core.CameraSelector$Builder $r1, $r3;
        androidx.camera.core.CameraFilter $r2;
        androidx.camera.core.CameraSelector $r4;

        r0 := @this: androidx.camera.core.impl.CameraInfoInternal;

        $r1 = new androidx.camera.core.CameraSelector$Builder;

        specialinvoke $r1.<androidx.camera.core.CameraSelector$Builder: void <init>()>();

        $r2 = dynamicinvoke "filter" <androidx.camera.core.CameraFilter (androidx.camera.core.impl.CameraInfoInternal)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.util.List __METHODTYPE__(java.util.List), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.impl.CameraInfoInternal: java.util.List lambda$getCameraSelector$0(java.util.List)>, methodtype: java.util.List __METHODTYPE__(java.util.List));

        $r3 = virtualinvoke $r1.<androidx.camera.core.CameraSelector$Builder: androidx.camera.core.CameraSelector$Builder addCameraFilter(androidx.camera.core.CameraFilter)>($r2);

        $r4 = virtualinvoke $r3.<androidx.camera.core.CameraSelector$Builder: androidx.camera.core.CameraSelector build()>();

        return $r4;
    }

    private java.util.List lambda$getCameraSelector$0(java.util.List)
    {
        androidx.camera.core.impl.CameraInfoInternal r0, r5;
        java.util.List r1, $r14;
        java.lang.String r2, $r11, $r13;
        java.util.Iterator r3;
        androidx.camera.core.CameraInfo r4;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.Object $r12;

        r0 := @this: androidx.camera.core.impl.CameraInfoInternal;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r0.<androidx.camera.core.impl.CameraInfoInternal: java.lang.String getCameraId()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.core.CameraInfo) $r12;

        $z1 = r4 instanceof androidx.camera.core.impl.CameraInfoInternal;

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z1);

        r5 = (androidx.camera.core.impl.CameraInfoInternal) r4;

        $r13 = interfaceinvoke r5.<androidx.camera.core.impl.CameraInfoInternal: java.lang.String getCameraId()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label2;

        $r14 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r4);

        return $r14;

     label2:
        goto label1;

     label3:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find camera with id ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from list of available cameras.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }

