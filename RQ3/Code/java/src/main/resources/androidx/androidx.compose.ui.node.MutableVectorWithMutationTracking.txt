androidx.compose.ui.node.MutableVectorWithMutationTracking
<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector vector>
<androidx.compose.ui.node.MutableVectorWithMutationTracking: kotlin.jvm.functions.Function0 onVectorMutated>
    public void <init>(androidx.compose.runtime.collection.MutableVector, kotlin.jvm.functions.Function0)
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        androidx.compose.runtime.collection.MutableVector r1;
        kotlin.jvm.functions.Function0 r2;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        r1 := @parameter0: androidx.compose.runtime.collection.MutableVector;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "vector");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "onVectorMutated");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector vector> = r1;

        r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: kotlin.jvm.functions.Function0 onVectorMutated> = r2;

        return;
    }

    public final androidx.compose.runtime.collection.MutableVector getVector()
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        androidx.compose.runtime.collection.MutableVector $r1;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        $r1 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector vector>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function0 getOnVectorMutated()
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        kotlin.jvm.functions.Function0 $r1;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        $r1 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: kotlin.jvm.functions.Function0 onVectorMutated>;

        return $r1;
    }

    public final int getSize()
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        androidx.compose.runtime.collection.MutableVector $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        $r1 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector vector>;

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        return $i0;
    }

    public final void clear()
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        androidx.compose.runtime.collection.MutableVector $r1;
        kotlin.jvm.functions.Function0 $r2;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        $r1 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector vector>;

        virtualinvoke $r1.<androidx.compose.runtime.collection.MutableVector: void clear()>();

        $r2 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: kotlin.jvm.functions.Function0 onVectorMutated>;

        interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    public final void add(int, java.lang.Object)
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        int i0;
        java.lang.Object r1;
        androidx.compose.runtime.collection.MutableVector $r2;
        kotlin.jvm.functions.Function0 $r3;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector vector>;

        virtualinvoke $r2.<androidx.compose.runtime.collection.MutableVector: void add(int,java.lang.Object)>(i0, r1);

        $r3 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: kotlin.jvm.functions.Function0 onVectorMutated>;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    public final java.lang.Object removeAt(int)
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        int i0;
        java.lang.Object r1, r2;
        androidx.compose.runtime.collection.MutableVector $r3;
        kotlin.jvm.functions.Function0 $r4;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        i0 := @parameter0: int;

        $r3 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector vector>;

        r1 = virtualinvoke $r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object removeAt(int)>(i0);

        r2 = r1;

        $r4 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: kotlin.jvm.functions.Function0 onVectorMutated>;

        interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return r1;
    }

    public final void forEach(kotlin.jvm.functions.Function1)
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.collection.MutableVector r2;
        int i0, i1;
        java.lang.Object[] r3, $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        r2 = virtualinvoke r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector getVector()>();

        i0 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label2;

        i1 = 0;

        $r4 = virtualinvoke r2.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r4, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r4;

     label1:
        $r5 = r3[i1];

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r5);

        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label2:
        return;
    }

    public final java.util.List asList()
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        androidx.compose.runtime.collection.MutableVector $r1;
        java.util.List $r2;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        $r1 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector vector>;

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.collection.MutableVector: java.util.List asMutableList()>();

        return $r2;
    }

    public final java.lang.Object get(int)
    {
        androidx.compose.ui.node.MutableVectorWithMutationTracking r0;
        int i0;
        androidx.compose.runtime.collection.MutableVector r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        r0 := @this: androidx.compose.ui.node.MutableVectorWithMutationTracking;

        i0 := @parameter0: int;

        r1 = r0.<androidx.compose.ui.node.MutableVectorWithMutationTracking: androidx.compose.runtime.collection.MutableVector vector>;

        $r2 = virtualinvoke r1.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        $r3 = $r2[i0];

        return $r3;
    }

