kotlin.time.DurationUnitKt__DurationUnitJvmKt
    public void <init>()
    {
        kotlin.time.DurationUnitKt__DurationUnitJvmKt $r0;

        $r0 := @this: kotlin.time.DurationUnitKt__DurationUnitJvmKt;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final double convertDurationUnit(double, kotlin.time.DurationUnit, kotlin.time.DurationUnit)
    {
        byte $b0;
        double $d0, $d1;
        kotlin.time.DurationUnit $r0, $r1;
        java.util.concurrent.TimeUnit $r2, $r3;
        long $l1;

        $d0 := @parameter0: double;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        $r1 := @parameter2: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "sourceUnit");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "targetUnit");

        $r2 = virtualinvoke $r1.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()>();

        $r3 = virtualinvoke $r0.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()>();

        $l1 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(1L, $r3);

        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label1;

        $d1 = (double) $l1;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 * $d1;

        return $d0;

     label1:
        $r2 = virtualinvoke $r0.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()>();

        $r3 = virtualinvoke $r1.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()>();

        $l1 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(1L, $r3);

        $d1 = (double) $l1;

        staticinvoke <java.lang.Double: boolean isNaN(double)>($d1);

        $d0 = $d0 / $d1;

        return $d0;
    }

    public static final long convertDurationUnit(long, kotlin.time.DurationUnit, kotlin.time.DurationUnit)
    {
        long $l0;
        kotlin.time.DurationUnit $r0, $r1;
        java.util.concurrent.TimeUnit $r2, $r3;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        $r1 := @parameter2: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "sourceUnit");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "targetUnit");

        $r2 = virtualinvoke $r1.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()>();

        $r3 = virtualinvoke $r0.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()>();

        $l0 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r3);

        return $l0;
    }

    public static final long convertDurationUnitOverflow(long, kotlin.time.DurationUnit, kotlin.time.DurationUnit)
    {
        long $l0;
        kotlin.time.DurationUnit $r0, $r1;
        java.util.concurrent.TimeUnit $r2, $r3;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.time.DurationUnit;

        $r1 := @parameter2: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "sourceUnit");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "targetUnit");

        $r2 = virtualinvoke $r1.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()>();

        $r3 = virtualinvoke $r0.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()>();

        $l0 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r3);

        return $l0;
    }

    public static final kotlin.time.DurationUnit toDurationUnit(java.util.concurrent.TimeUnit)
    {
        int $i0;
        java.util.concurrent.TimeUnit $r0;
        int[] $r1;
        kotlin.time.DurationUnit r2;
        kotlin.NoWhenBranchMatchedException r3;
        java.lang.Throwable r4;

        $r0 := @parameter0: java.util.concurrent.TimeUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.time.DurationUnitKt__DurationUnitJvmKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label8;
            case 2: goto label7;
            case 3: goto label6;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label3;
            case 7: goto label2;
            default: goto label1;
        };

     label1:
        r3 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r3.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        r4 = (java.lang.Throwable) r3;

        throw r4;

     label2:
        r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit DAYS>;

        return r2;

     label3:
        r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit HOURS>;

        return r2;

     label4:
        r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MINUTES>;

        return r2;

     label5:
        r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit SECONDS>;

        return r2;

     label6:
        r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MILLISECONDS>;

        return r2;

     label7:
        r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit MICROSECONDS>;

        return r2;

     label8:
        r2 = <kotlin.time.DurationUnit: kotlin.time.DurationUnit NANOSECONDS>;

        return r2;
    }

    public static final java.util.concurrent.TimeUnit toTimeUnit(kotlin.time.DurationUnit)
    {
        java.util.concurrent.TimeUnit $r0;
        kotlin.time.DurationUnit $r1;

        $r1 := @parameter0: kotlin.time.DurationUnit;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = virtualinvoke $r1.<kotlin.time.DurationUnit: java.util.concurrent.TimeUnit getTimeUnit$kotlin_stdlib()>();

        return $r0;
    }

