kotlin.collections.EmptySet
<kotlin.collections.EmptySet: kotlin.collections.EmptySet INSTANCE>
<kotlin.collections.EmptySet: long serialVersionUID>
    static void <clinit>()
    {
        kotlin.collections.EmptySet $r0;

        $r0 = new kotlin.collections.EmptySet;

        specialinvoke $r0.<kotlin.collections.EmptySet: void <init>()>();

        <kotlin.collections.EmptySet: kotlin.collections.EmptySet INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlin.collections.EmptySet $r0;

        $r0 := @this: kotlin.collections.EmptySet;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private final java.lang.Object readResolve()
    {
        kotlin.collections.EmptySet $r0;

        $r0 := @this: kotlin.collections.EmptySet;

        $r0 = <kotlin.collections.EmptySet: kotlin.collections.EmptySet INSTANCE>;

        return $r0;
    }

    public volatile boolean add(java.lang.Object)
    {
        kotlin.collections.EmptySet $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean add(java.lang.Void)
    {
        kotlin.collections.EmptySet $r0;
        java.lang.Void $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.lang.Void;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        kotlin.collections.EmptySet $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void clear()
    {
        kotlin.collections.EmptySet $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final volatile boolean contains(java.lang.Object)
    {
        kotlin.collections.EmptySet $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.Void $r2;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.lang.Void;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (java.lang.Void) $r1;

        $z0 = virtualinvoke $r0.<kotlin.collections.EmptySet: boolean contains(java.lang.Void)>($r2);

        return $z0;
    }

    public boolean contains(java.lang.Void)
    {
        kotlin.collections.EmptySet $r0;
        java.lang.Void $r1;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.lang.Void;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "element");

        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        kotlin.collections.EmptySet $r0;
        boolean $z0;
        java.util.Collection $r1;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.collections.EmptySet $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.Set $r2;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof java.util.Set;

        if $z0 == 0 goto label1;

        $r2 = (java.util.Set) $r1;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int getSize()
    {
        kotlin.collections.EmptySet $r0;

        $r0 := @this: kotlin.collections.EmptySet;

        return 0;
    }

    public int hashCode()
    {
        kotlin.collections.EmptySet $r0;

        $r0 := @this: kotlin.collections.EmptySet;

        return 0;
    }

    public boolean isEmpty()
    {
        kotlin.collections.EmptySet $r0;

        $r0 := @this: kotlin.collections.EmptySet;

        return 1;
    }

    public java.util.Iterator iterator()
    {
        kotlin.collections.EmptySet $r0;
        kotlin.collections.EmptyIterator r1;
        java.util.Iterator r2;

        $r0 := @this: kotlin.collections.EmptySet;

        r1 = <kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE>;

        r2 = (java.util.Iterator) r1;

        return r2;
    }

    public boolean remove(java.lang.Object)
    {
        kotlin.collections.EmptySet $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        kotlin.collections.EmptySet $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        kotlin.collections.EmptySet $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile int size()
    {
        kotlin.collections.EmptySet $r0;
        int $i0;

        $r0 := @this: kotlin.collections.EmptySet;

        $i0 = virtualinvoke $r0.<kotlin.collections.EmptySet: int getSize()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        kotlin.collections.EmptySet $r0;
        java.lang.Object[] $r1;
        java.util.Collection r2;

        $r0 := @this: kotlin.collections.EmptySet;

        r2 = (java.util.Collection) $r0;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>(r2);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        kotlin.collections.EmptySet $r0;
        java.lang.Object[] $r1;
        java.util.Collection r2;

        $r0 := @this: kotlin.collections.EmptySet;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        r2 = (java.util.Collection) $r0;

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>(r2, $r1);

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlin.collections.EmptySet $r0;

        $r0 := @this: kotlin.collections.EmptySet;

        return "[]";
    }

