androidx.core.provider.SelfDestructiveThread
<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>
<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>
<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>
<androidx.core.provider.SelfDestructiveThread: int mGeneration>
<androidx.core.provider.SelfDestructiveThread: int MSG_INVOKE_RUNNABLE>
<androidx.core.provider.SelfDestructiveThread: int MSG_DESTRUCTION>
<androidx.core.provider.SelfDestructiveThread: android.os.Handler$Callback mCallback>
<androidx.core.provider.SelfDestructiveThread: int mDestructAfterMillisec>
<androidx.core.provider.SelfDestructiveThread: int mPriority>
<androidx.core.provider.SelfDestructiveThread: java.lang.String mThreadName>
    public void <init>(java.lang.String, int, int)
    {
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.Object $r2;
        androidx.core.provider.SelfDestructiveThread$1 $r3;

        r0 := @this: androidx.core.provider.SelfDestructiveThread;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock> = $r2;

        $r3 = new androidx.core.provider.SelfDestructiveThread$1;

        specialinvoke $r3.<androidx.core.provider.SelfDestructiveThread$1: void <init>(androidx.core.provider.SelfDestructiveThread)>(r0);

        r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler$Callback mCallback> = $r3;

        r0.<androidx.core.provider.SelfDestructiveThread: java.lang.String mThreadName> = r1;

        r0.<androidx.core.provider.SelfDestructiveThread: int mPriority> = i0;

        r0.<androidx.core.provider.SelfDestructiveThread: int mDestructAfterMillisec> = i1;

        r0.<androidx.core.provider.SelfDestructiveThread: int mGeneration> = 0;

        return;
    }

    public boolean isRunning()
    {
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Object r1, $r2;
        android.os.HandlerThread $r3;
        boolean $z0;

        r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r2 = r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $r3 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        exitmonitor r1;

        return $z0;
    }

    public int getGeneration()
    {
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Object r1, $r2;
        int $i0;

        r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r2 = r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $i0 = r0.<androidx.core.provider.SelfDestructiveThread: int mGeneration>;

        exitmonitor r1;

        return $i0;
    }

    private void post(java.lang.Runnable)
    {
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Runnable r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r17;
        android.os.HandlerThread $r5, $r10, $r12, $r14;
        android.os.Handler $r6, $r7, $r8, $r13;
        android.os.Message $r9;
        int $i0, $i1, $i2;
        java.lang.String $r11;
        android.os.Looper $r15;
        android.os.Handler$Callback $r16;

        r0 := @this: androidx.core.provider.SelfDestructiveThread;

        r1 := @parameter0: java.lang.Runnable;

        $r4 = r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        if $r5 != null goto label2;

        $r10 = new android.os.HandlerThread;

        $r11 = r0.<androidx.core.provider.SelfDestructiveThread: java.lang.String mThreadName>;

        $i0 = r0.<androidx.core.provider.SelfDestructiveThread: int mPriority>;

        specialinvoke $r10.<android.os.HandlerThread: void <init>(java.lang.String,int)>($r11, $i0);

        r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread> = $r10;

        $r12 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        virtualinvoke $r12.<android.os.HandlerThread: void start()>();

        $r13 = new android.os.Handler;

        $r14 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        $r15 = virtualinvoke $r14.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r16 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler$Callback mCallback>;

        specialinvoke $r13.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r15, $r16);

        r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler> = $r13;

        $i1 = r0.<androidx.core.provider.SelfDestructiveThread: int mGeneration>;

        $i2 = $i1 + 1;

        r0.<androidx.core.provider.SelfDestructiveThread: int mGeneration> = $i2;

     label2:
        $r6 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: void removeMessages(int)>(0);

        $r8 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r7 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r9 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r1);

        virtualinvoke $r8.<android.os.Handler: boolean sendMessage(android.os.Message)>($r9);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r17 := @caughtexception;

        r3 = $r17;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void postAndReply(java.util.concurrent.Callable, androidx.core.provider.SelfDestructiveThread$ReplyCallback)
    {
        androidx.core.provider.SelfDestructiveThread r0;
        java.util.concurrent.Callable r1;
        androidx.core.provider.SelfDestructiveThread$ReplyCallback r2;
        android.os.Handler r3;
        androidx.core.provider.SelfDestructiveThread$2 $r4;

        r0 := @this: androidx.core.provider.SelfDestructiveThread;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: androidx.core.provider.SelfDestructiveThread$ReplyCallback;

        r3 = staticinvoke <androidx.core.provider.CalleeHandler: android.os.Handler create()>();

        $r4 = new androidx.core.provider.SelfDestructiveThread$2;

        specialinvoke $r4.<androidx.core.provider.SelfDestructiveThread$2: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.Callable,android.os.Handler,androidx.core.provider.SelfDestructiveThread$ReplyCallback)>(r0, r1, r3, r2);

        specialinvoke r0.<androidx.core.provider.SelfDestructiveThread: void post(java.lang.Runnable)>($r4);

        return;
    }

    public java.lang.Object postAndWait(java.util.concurrent.Callable, int) throws java.lang.InterruptedException
    {
        androidx.core.provider.SelfDestructiveThread r0;
        java.util.concurrent.Callable r1;
        int i0;
        java.util.concurrent.locks.ReentrantLock r2, $r7;
        java.util.concurrent.locks.Condition r3;
        java.util.concurrent.atomic.AtomicReference r4, $r8;
        java.util.concurrent.atomic.AtomicBoolean r5, $r9;
        java.lang.Throwable r6, $r13, $r14, r16;
        androidx.core.provider.SelfDestructiveThread$3 $r10;
        boolean $z0, $z1;
        long $l1, l3;
        java.util.concurrent.TimeUnit $r11;
        byte $b2;
        java.lang.InterruptedException $r12;
        java.lang.Object r15, r17;

        r0 := @this: androidx.core.provider.SelfDestructiveThread;

        r1 := @parameter0: java.util.concurrent.Callable;

        i0 := @parameter1: int;

        $r7 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r2 = $r7;

        r3 = virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        $r8 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r4 = $r8;

        $r9 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r5 = $r9;

        $r10 = new androidx.core.provider.SelfDestructiveThread$3;

        specialinvoke $r10.<androidx.core.provider.SelfDestructiveThread$3: void <init>(androidx.core.provider.SelfDestructiveThread,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Callable,java.util.concurrent.locks.ReentrantLock,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.locks.Condition)>(r0, r4, r1, r2, r5, r3);

        specialinvoke r0.<androidx.core.provider.SelfDestructiveThread: void post(java.lang.Runnable)>($r10);

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $z0 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label03;

        r15 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

     label02:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r15;

     label03:
        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l1 = (long) i0;

        l3 = virtualinvoke $r11.<java.util.concurrent.TimeUnit: long toNanos(long)>($l1);

     label04:
        l3 = interfaceinvoke r3.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l3);

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

        r16 = $r14;

     label07:
        $z1 = virtualinvoke r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label09;

        r17 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

     label08:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r17;

     label09:
        $b2 = l3 cmp 0L;

        if $b2 > 0 goto label04;

        $r12 = new java.lang.InterruptedException;

        specialinvoke $r12.<java.lang.InterruptedException: void <init>(java.lang.String)>("timeout");

        throw $r12;

     label10:
        $r13 := @caughtexception;

        r6 = $r13;

     label11:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r6;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label08 with label10;
        catch java.lang.Throwable from label09 to label11 with label10;
    }

    void onInvokeRunnable(java.lang.Runnable)
    {
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Runnable r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        android.os.Handler $r5, $r6, $r7;
        android.os.Message $r8;
        int $i0;
        long $l1;

        r0 := @this: androidx.core.provider.SelfDestructiveThread;

        r1 := @parameter0: java.lang.Runnable;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        $r4 = r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(0);

        $r7 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r6 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $r8 = virtualinvoke $r6.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        $i0 = r0.<androidx.core.provider.SelfDestructiveThread: int mDestructAfterMillisec>;

        $l1 = (long) $i0;

        virtualinvoke $r7.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r8, $l1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void onDestruction()
    {
        androidx.core.provider.SelfDestructiveThread r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.os.Handler $r4;
        boolean $z0;
        android.os.HandlerThread $r5;

        r0 := @this: androidx.core.provider.SelfDestructiveThread;

        $r3 = r0.<androidx.core.provider.SelfDestructiveThread: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r4.<android.os.Handler: boolean hasMessages(int)>(1);

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 = r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread>;

        virtualinvoke $r5.<android.os.HandlerThread: boolean quit()>();

        r0.<androidx.core.provider.SelfDestructiveThread: android.os.HandlerThread mThread> = null;

        r0.<androidx.core.provider.SelfDestructiveThread: android.os.Handler mHandler> = null;

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

androidx.core.provider.SelfDestructiveThread$1
<androidx.core.provider.SelfDestructiveThread$1: androidx.core.provider.SelfDestructiveThread this$0>
    void <init>(androidx.core.provider.SelfDestructiveThread)
    {
        androidx.core.provider.SelfDestructiveThread$1 r0;
        androidx.core.provider.SelfDestructiveThread r1;

        r0 := @this: androidx.core.provider.SelfDestructiveThread$1;

        r1 := @parameter0: androidx.core.provider.SelfDestructiveThread;

        r0.<androidx.core.provider.SelfDestructiveThread$1: androidx.core.provider.SelfDestructiveThread this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean handleMessage(android.os.Message)
    {
        androidx.core.provider.SelfDestructiveThread$1 r0;
        android.os.Message r1;
        int $i0;
        java.lang.Object $r2;
        java.lang.Runnable $r3;
        androidx.core.provider.SelfDestructiveThread $r4, $r5;

        r0 := @this: androidx.core.provider.SelfDestructiveThread$1;

        r1 := @parameter0: android.os.Message;

        $i0 = r1.<android.os.Message: int what>;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label1;
            default: goto label3;
        };

     label1:
        $r4 = r0.<androidx.core.provider.SelfDestructiveThread$1: androidx.core.provider.SelfDestructiveThread this$0>;

        $r2 = r1.<android.os.Message: java.lang.Object obj>;

        $r3 = (java.lang.Runnable) $r2;

        virtualinvoke $r4.<androidx.core.provider.SelfDestructiveThread: void onInvokeRunnable(java.lang.Runnable)>($r3);

        return 1;

     label2:
        $r5 = r0.<androidx.core.provider.SelfDestructiveThread$1: androidx.core.provider.SelfDestructiveThread this$0>;

        virtualinvoke $r5.<androidx.core.provider.SelfDestructiveThread: void onDestruction()>();

        return 1;

     label3:
        return 1;
    }

androidx.core.provider.SelfDestructiveThread$2$1
<androidx.core.provider.SelfDestructiveThread$2$1: java.lang.Object val$result>
<androidx.core.provider.SelfDestructiveThread$2$1: androidx.core.provider.SelfDestructiveThread$2 this$1>
    void <init>(androidx.core.provider.SelfDestructiveThread$2, java.lang.Object)
    {
        androidx.core.provider.SelfDestructiveThread$2$1 r0;
        androidx.core.provider.SelfDestructiveThread$2 r1;
        java.lang.Object r2;

        r0 := @this: androidx.core.provider.SelfDestructiveThread$2$1;

        r1 := @parameter0: androidx.core.provider.SelfDestructiveThread$2;

        r2 := @parameter1: java.lang.Object;

        r0.<androidx.core.provider.SelfDestructiveThread$2$1: androidx.core.provider.SelfDestructiveThread$2 this$1> = r1;

        r0.<androidx.core.provider.SelfDestructiveThread$2$1: java.lang.Object val$result> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.core.provider.SelfDestructiveThread$2$1 r0;
        androidx.core.provider.SelfDestructiveThread$2 $r1;
        java.lang.Object $r2;
        androidx.core.provider.SelfDestructiveThread$ReplyCallback $r3;

        r0 := @this: androidx.core.provider.SelfDestructiveThread$2$1;

        $r1 = r0.<androidx.core.provider.SelfDestructiveThread$2$1: androidx.core.provider.SelfDestructiveThread$2 this$1>;

        $r3 = $r1.<androidx.core.provider.SelfDestructiveThread$2: androidx.core.provider.SelfDestructiveThread$ReplyCallback val$reply>;

        $r2 = r0.<androidx.core.provider.SelfDestructiveThread$2$1: java.lang.Object val$result>;

        interfaceinvoke $r3.<androidx.core.provider.SelfDestructiveThread$ReplyCallback: void onReply(java.lang.Object)>($r2);

        return;
    }

androidx.core.provider.SelfDestructiveThread$2
<androidx.core.provider.SelfDestructiveThread$2: java.util.concurrent.Callable val$callable>
<androidx.core.provider.SelfDestructiveThread$2: android.os.Handler val$calleeHandler>
<androidx.core.provider.SelfDestructiveThread$2: androidx.core.provider.SelfDestructiveThread$ReplyCallback val$reply>
<androidx.core.provider.SelfDestructiveThread$2: androidx.core.provider.SelfDestructiveThread this$0>
    void <init>(androidx.core.provider.SelfDestructiveThread, java.util.concurrent.Callable, android.os.Handler, androidx.core.provider.SelfDestructiveThread$ReplyCallback)
    {
        androidx.core.provider.SelfDestructiveThread$2 r0;
        androidx.core.provider.SelfDestructiveThread r1;
        java.util.concurrent.Callable r2;
        android.os.Handler r3;
        androidx.core.provider.SelfDestructiveThread$ReplyCallback r4;

        r0 := @this: androidx.core.provider.SelfDestructiveThread$2;

        r1 := @parameter0: androidx.core.provider.SelfDestructiveThread;

        r2 := @parameter1: java.util.concurrent.Callable;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: androidx.core.provider.SelfDestructiveThread$ReplyCallback;

        r0.<androidx.core.provider.SelfDestructiveThread$2: androidx.core.provider.SelfDestructiveThread this$0> = r1;

        r0.<androidx.core.provider.SelfDestructiveThread$2: java.util.concurrent.Callable val$callable> = r2;

        r0.<androidx.core.provider.SelfDestructiveThread$2: android.os.Handler val$calleeHandler> = r3;

        r0.<androidx.core.provider.SelfDestructiveThread$2: androidx.core.provider.SelfDestructiveThread$ReplyCallback val$reply> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.core.provider.SelfDestructiveThread$2 r0;
        java.util.concurrent.Callable $r1;
        androidx.core.provider.SelfDestructiveThread$2$1 $r2;
        android.os.Handler $r3;
        java.lang.Throwable $r4, r6;
        java.lang.Object r5, r7;

        r0 := @this: androidx.core.provider.SelfDestructiveThread$2;

     label1:
        $r1 = r0.<androidx.core.provider.SelfDestructiveThread$2: java.util.concurrent.Callable val$callable>;

        r5 = interfaceinvoke $r1.<java.util.concurrent.Callable: java.lang.Object call()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

        r5 = null;

     label4:
        r7 = r5;

        $r3 = r0.<androidx.core.provider.SelfDestructiveThread$2: android.os.Handler val$calleeHandler>;

        $r2 = new androidx.core.provider.SelfDestructiveThread$2$1;

        specialinvoke $r2.<androidx.core.provider.SelfDestructiveThread$2$1: void <init>(androidx.core.provider.SelfDestructiveThread$2,java.lang.Object)>(r0, r7);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

androidx.core.provider.SelfDestructiveThread$3
<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicReference val$holder>
<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.Callable val$callable>
<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.ReentrantLock val$lock>
<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicBoolean val$running>
<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.Condition val$cond>
<androidx.core.provider.SelfDestructiveThread$3: androidx.core.provider.SelfDestructiveThread this$0>
    void <init>(androidx.core.provider.SelfDestructiveThread, java.util.concurrent.atomic.AtomicReference, java.util.concurrent.Callable, java.util.concurrent.locks.ReentrantLock, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.locks.Condition)
    {
        androidx.core.provider.SelfDestructiveThread$3 r0;
        androidx.core.provider.SelfDestructiveThread r1;
        java.util.concurrent.atomic.AtomicReference r2;
        java.util.concurrent.Callable r3;
        java.util.concurrent.locks.ReentrantLock r4;
        java.util.concurrent.atomic.AtomicBoolean r5;
        java.util.concurrent.locks.Condition r6;

        r0 := @this: androidx.core.provider.SelfDestructiveThread$3;

        r1 := @parameter0: androidx.core.provider.SelfDestructiveThread;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicReference;

        r3 := @parameter2: java.util.concurrent.Callable;

        r4 := @parameter3: java.util.concurrent.locks.ReentrantLock;

        r5 := @parameter4: java.util.concurrent.atomic.AtomicBoolean;

        r6 := @parameter5: java.util.concurrent.locks.Condition;

        r0.<androidx.core.provider.SelfDestructiveThread$3: androidx.core.provider.SelfDestructiveThread this$0> = r1;

        r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicReference val$holder> = r2;

        r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.Callable val$callable> = r3;

        r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.ReentrantLock val$lock> = r4;

        r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicBoolean val$running> = r5;

        r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.Condition val$cond> = r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.core.provider.SelfDestructiveThread$3 r0;
        java.lang.Throwable r1, r2, $r10, $r12;
        java.util.concurrent.Callable $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Object $r5;
        java.util.concurrent.locks.ReentrantLock $r6, $r9, $r11;
        java.util.concurrent.atomic.AtomicBoolean $r7;
        java.util.concurrent.locks.Condition $r8;

        r0 := @this: androidx.core.provider.SelfDestructiveThread$3;

     label1:
        $r4 = r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicReference val$holder>;

        $r3 = r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.Callable val$callable>;

        $r5 = interfaceinvoke $r3.<java.util.concurrent.Callable: java.lang.Object call()>();

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r5);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r1 = $r12;

     label4:
        $r6 = r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.ReentrantLock val$lock>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label5:
        $r7 = r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.atomic.AtomicBoolean val$running>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        $r8 = r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.Condition val$cond>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Condition: void signal()>();

     label6:
        $r9 = r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.ReentrantLock val$lock>;

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label8;

     label7:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = r0.<androidx.core.provider.SelfDestructiveThread$3: java.util.concurrent.locks.ReentrantLock val$lock>;

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

androidx.core.provider.SelfDestructiveThread$ReplyCallback
<androidx.core.provider.SelfDestructiveThread$ReplyCallback: void onReply(java.lang.Object)>
