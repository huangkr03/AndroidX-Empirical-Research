androidx.media3.test.utils.FakeExoMediaDrm
<androidx.media3.test.utils.FakeExoMediaDrm: androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest FAKE_PROVISION_REQUEST>
<androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList VALID_PROVISION_RESPONSE>
<androidx.media3.test.utils.FakeExoMediaDrm: java.lang.String KEY_STATUS_KEY>
<androidx.media3.test.utils.FakeExoMediaDrm: java.lang.String KEY_STATUS_AVAILABLE>
<androidx.media3.test.utils.FakeExoMediaDrm: java.lang.String KEY_STATUS_UNAVAILABLE>
<androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList VALID_KEY_RESPONSE>
<androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList KEY_DENIED_RESPONSE>
<androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList PROVISIONING_REQUIRED_RESPONSE>
<androidx.media3.test.utils.FakeExoMediaDrm: boolean enforceValidKeyResponses>
<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsRequired>
<androidx.media3.test.utils.FakeExoMediaDrm: int maxConcurrentSessions>
<androidx.media3.test.utils.FakeExoMediaDrm: boolean throwNotProvisionedExceptionFromGetKeyRequest>
<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Map byteProperties>
<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Map stringProperties>
<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set openSessionIds>
<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set sessionIdsWithValidKeys>
<androidx.media3.test.utils.FakeExoMediaDrm: java.util.concurrent.atomic.AtomicInteger sessionIdGenerator>
<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsReceived>
<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>
<androidx.media3.test.utils.FakeExoMediaDrm: androidx.media3.exoplayer.drm.ExoMediaDrm$OnEventListener onEventListener>
    public void <init>()
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        specialinvoke r0.<androidx.media3.test.utils.FakeExoMediaDrm: void <init>(int)>(2147483647);

        return;
    }

    public void <init>(int)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        int i0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        i0 := @parameter0: int;

        specialinvoke r0.<androidx.media3.test.utils.FakeExoMediaDrm: void <init>(boolean,int,boolean,int)>(1, 0, 0, i0);

        return;
    }

    private void <init>(boolean, int, boolean, int)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        boolean z0, z1;
        int i0, i1;
        java.util.HashMap $r1, $r2;
        java.util.HashSet $r3, $r4;
        java.util.concurrent.atomic.AtomicInteger $r5;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        z1 := @parameter2: boolean;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: boolean enforceValidKeyResponses> = z0;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsRequired> = i0;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: int maxConcurrentSessions> = i1;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: boolean throwNotProvisionedExceptionFromGetKeyRequest> = z1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Map byteProperties> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Map stringProperties> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set openSessionIds> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set sessionIdsWithValidKeys> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.concurrent.atomic.AtomicInteger sessionIdGenerator> = $r5;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount> = 1;

        return;
    }

    public void setOnEventListener(androidx.media3.exoplayer.drm.ExoMediaDrm$OnEventListener)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        androidx.media3.exoplayer.drm.ExoMediaDrm$OnEventListener r1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: androidx.media3.exoplayer.drm.ExoMediaDrm$OnEventListener;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: androidx.media3.exoplayer.drm.ExoMediaDrm$OnEventListener onEventListener> = r1;

        return;
    }

    public void setOnKeyStatusChangeListener(androidx.media3.exoplayer.drm.ExoMediaDrm$OnKeyStatusChangeListener)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        androidx.media3.exoplayer.drm.ExoMediaDrm$OnKeyStatusChangeListener r1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: androidx.media3.exoplayer.drm.ExoMediaDrm$OnKeyStatusChangeListener;

        return;
    }

    public void setOnExpirationUpdateListener(androidx.media3.exoplayer.drm.ExoMediaDrm$OnExpirationUpdateListener)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        androidx.media3.exoplayer.drm.ExoMediaDrm$OnExpirationUpdateListener r1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: androidx.media3.exoplayer.drm.ExoMediaDrm$OnExpirationUpdateListener;

        return;
    }

    public byte[] openSession() throws android.media.MediaDrmException
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        byte[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2;
        java.util.Set $r2, $r4;
        java.util.concurrent.atomic.AtomicInteger $r3, $r8;
        com.google.common.collect.ImmutableList $r5;
        android.media.MediaDrmException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r9;
        java.lang.String $r10, $r15;
        android.media.ResourceBusyException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        android.media.NotProvisionedException $r16;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z2);

        $z0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: boolean throwNotProvisionedExceptionFromGetKeyRequest>;

        if $z0 != 0 goto label3;

        $i7 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsReceived>;

        $i6 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsRequired>;

        if $i7 >= $i6 goto label3;

        $r16 = new android.media.NotProvisionedException;

        specialinvoke $r16.<android.media.NotProvisionedException: void <init>(java.lang.String)>("Not provisioned.");

        throw $r16;

     label3:
        $r2 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set openSessionIds>;

        $i1 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $i2 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int maxConcurrentSessions>;

        if $i1 < $i2 goto label4;

        $r11 = new android.media.ResourceBusyException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many sessions open. max=");

        $i5 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int maxConcurrentSessions>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<android.media.ResourceBusyException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label4:
        $r3 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.concurrent.atomic.AtomicInteger sessionIdGenerator>;

        $i3 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        r1 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] buildTestData(int,int)>(10, $i3);

        $r4 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set openSessionIds>;

        $r5 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList toByteList(byte[])>(r1);

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        if $z1 != 0 goto label5;

        $r6 = new android.media.MediaDrmException;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.concurrent.atomic.AtomicInteger sessionIdGenerator>;

        $i4 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r7[0] = $r9;

        $r10 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("Generated sessionId[%s] clashes with already-open session", $r7);

        specialinvoke $r6.<android.media.MediaDrmException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label5:
        return r1;
    }

    public void closeSession(byte[])
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        byte[] r1;
        int $i0;
        java.util.Set $r2;
        com.google.common.collect.ImmutableList $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: byte[];

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        $r2 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set openSessionIds>;

        $r3 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList toByteList(byte[])>(r1);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r3);

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        return;
    }

    public androidx.media3.exoplayer.drm.ExoMediaDrm$KeyRequest getKeyRequest(byte[], java.util.List, int, java.util.HashMap) throws android.media.NotProvisionedException
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        byte[] r1, $r17;
        java.util.List r2;
        int i0, $i2, $i4, $i5;
        java.util.HashMap r3;
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData r4, r24;
        byte b1, $b6;
        java.lang.StringBuilder $r7, $r8, r22;
        java.lang.String $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r10, $r14;
        com.google.common.collect.ImmutableList $r11, $r15;
        java.lang.Object $r20;
        java.lang.UnsupportedOperationException r21;
        android.media.NotProvisionedException r23;
        androidx.media3.exoplayer.drm.ExoMediaDrm$KeyRequest r25;
        java.util.Map r26;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.HashMap;

        $i2 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i2 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z3);

        if i0 == 2 goto label03;

        if i0 != 3 goto label04;

     label03:
        r21 = new java.lang.UnsupportedOperationException;

        specialinvoke r21.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Offline key requests are not supported.");

        throw r21;

     label04:
        if i0 != 1 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognised keyType: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z4, $r9);

        $z0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: boolean throwNotProvisionedExceptionFromGetKeyRequest>;

        if $z0 == 0 goto label07;

        $i5 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsReceived>;

        $i4 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsRequired>;

        if $i5 >= $i4 goto label07;

        r23 = new android.media.NotProvisionedException;

        specialinvoke r23.<android.media.NotProvisionedException: void <init>(java.lang.String)>("Not provisioned.");

        throw r23;

     label07:
        $r10 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set openSessionIds>;

        $r11 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList toByteList(byte[])>(r1);

        $z1 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>($r11);

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r24 = new androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        if r3 == null goto label08;

        $r20 = r3;

        goto label09;

     label08:
        $r20 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();

     label09:
        r26 = (java.util.Map) $r20;

        specialinvoke r24.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: void <init>(java.util.List,int,java.util.Map)>(r2, i0, r26);

        r4 = r24;

        $r14 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set sessionIdsWithValidKeys>;

        $r15 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList toByteList(byte[])>(r1);

        $z2 = interfaceinvoke $r14.<java.util.Set: boolean contains(java.lang.Object)>($r15);

        if $z2 == 0 goto label10;

        $b6 = 1;

        goto label11;

     label10:
        $b6 = 0;

     label11:
        b1 = $b6;

        r25 = new androidx.media3.exoplayer.drm.ExoMediaDrm$KeyRequest;

        $r17 = virtualinvoke r4.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: byte[] toByteArray()>();

        specialinvoke r25.<androidx.media3.exoplayer.drm.ExoMediaDrm$KeyRequest: void <init>(byte[],java.lang.String,int)>($r17, "", b1);

        return r25;
    }

    public byte[] provideKeyResponse(byte[], byte[]) throws android.media.NotProvisionedException, android.media.DeniedByServerException
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        byte[] r1, r2, $r8;
        java.util.List r3, $r7;
        int $i0;
        com.google.common.collect.ImmutableList $r4, $r5, $r9;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.util.Set $r6;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r17;
        java.lang.String $r13, $r16, $r18;
        android.media.NotProvisionedException $r19;
        android.media.DeniedByServerException $r20;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z5);

        r3 = staticinvoke <com.google.common.primitives.Bytes: java.util.List asList(byte[])>(r2);

        $r4 = <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList KEY_DENIED_RESPONSE>;

        $z0 = interfaceinvoke r3.<java.util.List: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r20 = new android.media.DeniedByServerException;

        specialinvoke $r20.<android.media.DeniedByServerException: void <init>(java.lang.String)>("Key request denied");

        throw $r20;

     label3:
        $r5 = <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList PROVISIONING_REQUIRED_RESPONSE>;

        $z1 = interfaceinvoke r3.<java.util.List: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label4;

        $r19 = new android.media.NotProvisionedException;

        specialinvoke $r19.<android.media.NotProvisionedException: void <init>(java.lang.String)>("Provisioning required");

        throw $r19;

     label4:
        $z2 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: boolean enforceValidKeyResponses>;

        if $z2 == 0 goto label5;

        $r9 = <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList VALID_KEY_RESPONSE>;

        $z4 = interfaceinvoke r3.<java.util.List: boolean equals(java.lang.Object)>($r9);

        if $z4 != 0 goto label5;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognised response. scope=");

        $r13 = staticinvoke <androidx.media3.common.util.Util: java.lang.String toHexString(byte[])>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response=");

        $r16 = staticinvoke <androidx.media3.common.util.Util: java.lang.String toHexString(byte[])>(r2);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r10;

     label5:
        $r6 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set sessionIdsWithValidKeys>;

        $r7 = staticinvoke <com.google.common.primitives.Bytes: java.util.List asList(byte[])>(r1);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r8 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        return $r8;
    }

    public androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest getProvisionRequest()
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        int $i0;
        androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest $r1;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r1 = <androidx.media3.test.utils.FakeExoMediaDrm: androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest FAKE_PROVISION_REQUEST>;

        return $r1;
    }

    public void provideProvisionResponse(byte[]) throws android.media.DeniedByServerException
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        byte[] r1;
        int $i0, $i1, $i2;
        java.util.List $r2;
        com.google.common.collect.ImmutableList $r3;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: byte[];

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        $r2 = staticinvoke <com.google.common.primitives.Bytes: java.util.List asList(byte[])>(r1);

        $r3 = <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList VALID_PROVISION_RESPONSE>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $i1 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsReceived>;

        $i2 = $i1 + 1;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsReceived> = $i2;

     label3:
        return;
    }

    public java.util.Map queryKeyStatus(byte[])
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        byte[] r1;
        int $i0;
        java.util.Set $r2, $r5;
        com.google.common.collect.ImmutableList $r3, $r6;
        boolean $z0, $z1, $z2;
        com.google.common.collect.ImmutableMap $r7;
        java.lang.String $r8;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: byte[];

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z2);

        $r2 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set openSessionIds>;

        $r3 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList toByteList(byte[])>(r1);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r5 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set sessionIdsWithValidKeys>;

        $r6 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList toByteList(byte[])>(r1);

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        $r8 = "AVAILABLE";

        goto label4;

     label3:
        $r8 = "UNAVAILABLE";

     label4:
        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>("KEY_STATUS", $r8);

        return $r7;
    }

    public boolean requiresSecureDecoder(byte[], java.lang.String)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        byte[] r1;
        java.lang.String r2;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public void acquire()
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $i1 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        $i2 = $i1 + 1;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount> = $i2;

        return;
    }

    public void release()
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        int $i0, $i1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        $i1 = $i0 - 1;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount> = $i1;

        return;
    }

    public void restoreKeys(byte[], byte[])
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        byte[] r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public android.os.PersistableBundle getMetrics()
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        return null;
    }

    public java.lang.String getPropertyString(java.lang.String)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        java.lang.String r1, r2, $r9;
        int $i0;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r3 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Map stringProperties>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.String) $r4;

        if r2 != null goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized propertyName: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        return r2;
    }

    public byte[] getPropertyByteArray(java.lang.String)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        java.lang.String r1, $r9;
        byte[] r2;
        int $i0;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r3 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Map byteProperties>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (byte[]) $r4;

        if r2 != null goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized propertyName: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        return r2;
    }

    public void setPropertyString(java.lang.String, java.lang.String)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        java.lang.String r1, r2;
        int $i0;
        java.util.Map $r3;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r3 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Map stringProperties>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void setPropertyByteArray(java.lang.String, byte[])
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        java.lang.String r1;
        byte[] r2;
        int $i0;
        java.util.Map $r3;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r3 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Map byteProperties>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public androidx.media3.decoder.CryptoConfig createCryptoConfig(byte[]) throws android.media.MediaCryptoException
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        byte[] r1;
        int $i0;
        java.util.Set $r2;
        com.google.common.collect.ImmutableList $r3;
        boolean $z0, $z1;
        androidx.media3.test.utils.FakeCryptoConfig $r4;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: byte[];

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        $r2 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set openSessionIds>;

        $r3 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList toByteList(byte[])>(r1);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r4 = new androidx.media3.test.utils.FakeCryptoConfig;

        specialinvoke $r4.<androidx.media3.test.utils.FakeCryptoConfig: void <init>()>();

        return $r4;
    }

    public int getCryptoType()
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        return 10000;
    }

    public int getReferenceCount()
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        int $i0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: int referenceCount>;

        return $i0;
    }

    public void triggerEvent(com.google.common.base.Predicate, int, int, byte[])
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        com.google.common.base.Predicate r1;
        int i0, i1;
        byte[] r2, r6;
        androidx.media3.exoplayer.drm.ExoMediaDrm$OnEventListener r3;
        java.util.Iterator r4;
        java.util.List r5;
        java.util.Set $r7;
        boolean $z0, $z1;
        java.lang.Object $r8;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r1 := @parameter0: com.google.common.base.Predicate;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: androidx.media3.exoplayer.drm.ExoMediaDrm$OnEventListener onEventListener>;

        if r3 != null goto label1;

        return;

     label1:
        $r7 = r0.<androidx.media3.test.utils.FakeExoMediaDrm: java.util.Set openSessionIds>;

        r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.List) $r8;

        r6 = staticinvoke <com.google.common.primitives.Bytes: byte[] toArray(java.util.Collection)>(r5);

        $z1 = interfaceinvoke r1.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>(r6);

        if $z1 == 0 goto label3;

        interfaceinvoke r3.<androidx.media3.exoplayer.drm.ExoMediaDrm$OnEventListener: void onEvent(androidx.media3.exoplayer.drm.ExoMediaDrm,byte[],int,int,byte[])>(r0, r6, i0, i1, r2);

     label3:
        goto label2;

     label4:
        return;
    }

    public void resetProvisioning()
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm: int provisionsReceived> = 0;

        return;
    }

    private static com.google.common.collect.ImmutableList toByteList(byte[])
    {
        byte[] r0;
        java.util.List $r1;
        com.google.common.collect.ImmutableList $r2;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <com.google.common.primitives.Bytes: java.util.List asList(byte[])>(r0);

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r1);

        return $r2;
    }

    void <init>(boolean, int, boolean, int, androidx.media3.test.utils.FakeExoMediaDrm$1)
    {
        androidx.media3.test.utils.FakeExoMediaDrm r0;
        boolean z0, z1;
        int i0, i1;
        androidx.media3.test.utils.FakeExoMediaDrm$1 r1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        z1 := @parameter2: boolean;

        i1 := @parameter3: int;

        r1 := @parameter4: androidx.media3.test.utils.FakeExoMediaDrm$1;

        specialinvoke r0.<androidx.media3.test.utils.FakeExoMediaDrm: void <init>(boolean,int,boolean,int)>(z0, i0, z1, i1);

        return;
    }

    static com.google.common.collect.ImmutableList access$100()
    {
        com.google.common.collect.ImmutableList $r0;

        $r0 = <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList PROVISIONING_REQUIRED_RESPONSE>;

        return $r0;
    }

    static com.google.common.collect.ImmutableList access$200()
    {
        com.google.common.collect.ImmutableList $r0;

        $r0 = <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList VALID_KEY_RESPONSE>;

        return $r0;
    }

    static com.google.common.collect.ImmutableList access$300()
    {
        com.google.common.collect.ImmutableList $r0;

        $r0 = <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList KEY_DENIED_RESPONSE>;

        return $r0;
    }

    static void <clinit>()
    {
        androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest $r0;
        int[] $r1, $r3, $r5, $r7, $r9;
        byte[] $r2;
        com.google.common.collect.ImmutableList $r4, $r6, $r8, $r10;

        $r0 = new androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest;

        $r1 = newarray (int)[3];

        $r1[0] = 7;

        $r1[1] = 8;

        $r1[2] = 9;

        $r2 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] createByteArray(int[])>($r1);

        specialinvoke $r0.<androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest: void <init>(byte[],java.lang.String)>($r2, "bar.test");

        <androidx.media3.test.utils.FakeExoMediaDrm: androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest FAKE_PROVISION_REQUEST> = $r0;

        $r3 = newarray (int)[3];

        $r3[0] = 4;

        $r3[1] = 5;

        $r3[2] = 6;

        $r4 = staticinvoke <androidx.media3.test.utils.TestUtil: com.google.common.collect.ImmutableList createByteList(int[])>($r3);

        <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList VALID_PROVISION_RESPONSE> = $r4;

        $r5 = newarray (int)[3];

        $r5[0] = 1;

        $r5[1] = 2;

        $r5[2] = 3;

        $r6 = staticinvoke <androidx.media3.test.utils.TestUtil: com.google.common.collect.ImmutableList createByteList(int[])>($r5);

        <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList VALID_KEY_RESPONSE> = $r6;

        $r7 = newarray (int)[3];

        $r7[0] = 9;

        $r7[1] = 8;

        $r7[2] = 7;

        $r8 = staticinvoke <androidx.media3.test.utils.TestUtil: com.google.common.collect.ImmutableList createByteList(int[])>($r7);

        <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList KEY_DENIED_RESPONSE> = $r8;

        $r9 = newarray (int)[3];

        $r9[0] = 4;

        $r9[1] = 5;

        $r9[2] = 6;

        $r10 = staticinvoke <androidx.media3.test.utils.TestUtil: com.google.common.collect.ImmutableList createByteList(int[])>($r9);

        <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList PROVISIONING_REQUIRED_RESPONSE> = $r10;

        return;
    }

androidx.media3.test.utils.FakeExoMediaDrm$1
androidx.media3.test.utils.FakeExoMediaDrm$Builder
<androidx.media3.test.utils.FakeExoMediaDrm$Builder: boolean enforceValidKeyResponses>
<androidx.media3.test.utils.FakeExoMediaDrm$Builder: int provisionsRequired>
<androidx.media3.test.utils.FakeExoMediaDrm$Builder: boolean throwNotProvisionedExceptionFromGetKeyRequest>
<androidx.media3.test.utils.FakeExoMediaDrm$Builder: int maxConcurrentSessions>
    public void <init>()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$Builder r0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: boolean enforceValidKeyResponses> = 1;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: int provisionsRequired> = 0;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: int maxConcurrentSessions> = 2147483647;

        return;
    }

    public androidx.media3.test.utils.FakeExoMediaDrm$Builder setEnforceValidKeyResponses(boolean)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$Builder r0;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: boolean enforceValidKeyResponses> = z0;

        return r0;
    }

    public androidx.media3.test.utils.FakeExoMediaDrm$Builder setProvisionsRequired(int)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$Builder r0;
        int i0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: int provisionsRequired> = i0;

        return r0;
    }

    public androidx.media3.test.utils.FakeExoMediaDrm$Builder throwNotProvisionedExceptionFromGetKeyRequest()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$Builder r0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$Builder;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: boolean throwNotProvisionedExceptionFromGetKeyRequest> = 1;

        return r0;
    }

    public androidx.media3.test.utils.FakeExoMediaDrm$Builder setMaxConcurrentSessions(int)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$Builder r0;
        int i0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: int maxConcurrentSessions> = i0;

        return r0;
    }

    public androidx.media3.test.utils.FakeExoMediaDrm build()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$Builder r0;
        androidx.media3.test.utils.FakeExoMediaDrm $r1;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$Builder;

        $r1 = new androidx.media3.test.utils.FakeExoMediaDrm;

        $z1 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: boolean enforceValidKeyResponses>;

        $i1 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: int provisionsRequired>;

        $z0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: boolean throwNotProvisionedExceptionFromGetKeyRequest>;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$Builder: int maxConcurrentSessions>;

        specialinvoke $r1.<androidx.media3.test.utils.FakeExoMediaDrm: void <init>(boolean,int,boolean,int,androidx.media3.test.utils.FakeExoMediaDrm$1)>($z1, $i1, $z0, $i0, null);

        return $r1;
    }

androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1
    void <init>()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1 r0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData createFromParcel(android.os.Parcel)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1 r0;
        android.os.Parcel r1;
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData $r2;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = new androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        specialinvoke $r2.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: void <init>(android.os.Parcel)>(r1);

        return $r2;
    }

    public androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData[] newArray(int)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1 r0;
        int i0;
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData[] $r1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1 r0;
        int i0;
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData[] $r1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData[] newArray(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1 r0;
        android.os.Parcel r1;
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData $r2;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData
<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableList schemeDatas>
<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: int type>
<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableMap optionalParameters>
<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: android.os.Parcelable$Creator CREATOR>
    public void <init>(java.util.List, int, java.util.Map)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData r0;
        java.util.List r1;
        int i0;
        java.util.Map r2;
        com.google.common.collect.ImmutableList $r3;
        com.google.common.collect.ImmutableMap $r4;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>(r1);

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableList schemeDatas> = $r3;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: int type> = i0;

        $r4 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>(r2);

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableMap optionalParameters> = $r4;

        return;
    }

    public void <init>(android.os.Parcel)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData r0;
        android.os.Parcel r1;
        com.google.common.collect.ImmutableMap$Builder r2, $r10;
        java.util.List r3, r4, $r8;
        java.util.ArrayList $r5, $r11, $r13;
        java.lang.Class $r6;
        java.lang.ClassLoader $r7;
        com.google.common.collect.ImmutableList $r9;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.Object $r12, $r14, $r16, $r18;
        com.google.common.collect.ImmutableMap $r15;
        java.lang.String $r17, $r19;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = class "Landroidx/media3/common/DrmInitData$SchemeData;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r8 = virtualinvoke r1.<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>($r5, $r7);

        $r9 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r8);

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableList schemeDatas> = $r9;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: int type> = $i0;

        $r10 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r10.<com.google.common.collect.ImmutableMap$Builder: void <init>()>();

        r2 = $r10;

        $r11 = virtualinvoke r1.<android.os.Parcel: java.util.ArrayList createStringArrayList()>();

        $r12 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r11);

        r3 = (java.util.List) $r12;

        $r13 = virtualinvoke r1.<android.os.Parcel: java.util.ArrayList createStringArrayList()>();

        $r14 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r13);

        r4 = (java.util.List) $r14;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i1 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        i3 = 0;

     label3:
        $i4 = interfaceinvoke r3.<java.util.List: int size()>();

        if i3 >= $i4 goto label4;

        $r16 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i3);

        $r17 = (java.lang.String) $r16;

        $r18 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r19 = (java.lang.String) $r18;

        virtualinvoke r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>($r17, $r19);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r15 = virtualinvoke r2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableMap optionalParameters> = $r15;

        return;
    }

    public byte[] toByteArray()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData r0;
        android.os.Parcel r1;
        byte[] r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: void writeToParcel(android.os.Parcel,int)>(r1, 0);

        r2 = virtualinvoke r1.<android.os.Parcel: byte[] marshall()>();

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r2;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData fromByteArray(byte[])
    {
        byte[] r0;
        android.os.Parcel r1;
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData r2;
        java.lang.Throwable r3, $r6;
        int $i0;
        android.os.Parcelable$Creator $r4;
        java.lang.Object $r5;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        $i0 = lengthof r0;

        virtualinvoke r1.<android.os.Parcel: void unmarshall(byte[],int,int)>(r0, 0, $i0);

        virtualinvoke r1.<android.os.Parcel: void setDataPosition(int)>(0);

        $r4 = <androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: android.os.Parcelable$Creator CREATOR>;

        $r5 = interfaceinvoke $r4.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        r2 = (androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData) $r5;

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r2;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        com.google.common.collect.ImmutableList $r3, $r4;
        int $i0, $i1;
        com.google.common.collect.ImmutableMap $r5, $r6;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData) r1;

        $r4 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableList schemeDatas>;

        $r3 = r2.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableList schemeDatas>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 == 0 goto label2;

        $i1 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: int type>;

        $i0 = r2.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: int type>;

        if $i1 != $i0 goto label2;

        $r6 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableMap optionalParameters>;

        $r5 = r2.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableMap optionalParameters>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public int hashCode()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData r0;
        java.lang.Object[] $r1;
        com.google.common.collect.ImmutableList $r2;
        int $i0, $i1;
        java.lang.Integer $r3;
        com.google.common.collect.ImmutableMap $r4;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableList schemeDatas>;

        $r1[0] = $r2;

        $i0 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: int type>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r3;

        $r4 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableMap optionalParameters>;

        $r1[2] = $r4;

        $i1 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i1;
    }

    public int describeContents()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData r0;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData r0;
        android.os.Parcel r1;
        int i0, $i1;
        com.google.common.collect.ImmutableList $r2, $r5, $r8;
        com.google.common.collect.ImmutableMap $r3, $r6;
        com.google.common.collect.ImmutableSet $r4;
        com.google.common.collect.ImmutableCollection $r7;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableList schemeDatas>;

        virtualinvoke r1.<android.os.Parcel: void writeParcelableList(java.util.List,int)>($r2, i0);

        $i1 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: int type>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r3 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableMap optionalParameters>;

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSet keySet()>();

        $r5 = virtualinvoke $r4.<com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()>();

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>($r5);

        $r6 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableMap optionalParameters>;

        $r7 = virtualinvoke $r6.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableCollection values()>();

        $r8 = virtualinvoke $r7.<com.google.common.collect.ImmutableCollection: com.google.common.collect.ImmutableList asList()>();

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>($r8);

        return;
    }

    static void <clinit>()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1 $r0;

        $r0 = new androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1;

        specialinvoke $r0.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData$1: void <init>()>();

        <androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer
<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: com.google.common.collect.ImmutableSet allowedSchemeDatas>
<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: java.util.List receivedProvisionRequests>
<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: java.util.List receivedSchemeDatas>
<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: boolean nextResponseIndicatesProvisioningRequired>
    public static transient androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer allowingSchemeDatas(java.util.List[])
    {
        java.util.List[] r0, r2;
        com.google.common.collect.ImmutableSet$Builder r1;
        int i0, i1;
        java.util.List r3;
        androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer $r4;
        com.google.common.collect.ImmutableSet $r5;
        com.google.common.collect.ImmutableList $r6;

        r0 := @parameter0: java.util.List[];

        r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>(r3);

        virtualinvoke r1.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = new androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer;

        $r5 = virtualinvoke r1.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        specialinvoke $r4.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: void <init>(com.google.common.collect.ImmutableSet)>($r5);

        return $r4;
    }

    public static transient androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer requiringProvisioningThenAllowingSchemeDatas(java.util.List[])
    {
        java.util.List[] r0, r7;
        com.google.common.collect.ImmutableSet$Builder r1;
        int i0, i1;
        java.util.List r2;
        androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer $r3, r8;
        com.google.common.collect.ImmutableSet $r4;
        com.google.common.collect.ImmutableList $r5;

        r0 := @parameter0: java.util.List[];

        r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        r7 = r0;

        i0 = lengthof r7;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r7[i1];

        $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>(r2);

        virtualinvoke r1.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer;

        $r4 = virtualinvoke r1.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        specialinvoke $r3.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: void <init>(com.google.common.collect.ImmutableSet)>($r4);

        r8 = $r3;

        r8.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: boolean nextResponseIndicatesProvisioningRequired> = 1;

        return r8;
    }

    private void <init>(com.google.common.collect.ImmutableSet)
    {
        androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer r0;
        com.google.common.collect.ImmutableSet r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer;

        r1 := @parameter0: com.google.common.collect.ImmutableSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: com.google.common.collect.ImmutableSet allowedSchemeDatas> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: java.util.List receivedProvisionRequests> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: java.util.List receivedSchemeDatas> = $r3;

        return;
    }

    public com.google.common.collect.ImmutableList getReceivedProvisionRequests()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer r0;
        java.util.List $r1;
        com.google.common.collect.ImmutableList $r2;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer;

        $r1 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: java.util.List receivedProvisionRequests>;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r1);

        return $r2;
    }

    public com.google.common.collect.ImmutableList getReceivedSchemeDatas()
    {
        androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer r0;
        java.util.List $r1;
        com.google.common.collect.ImmutableList $r2;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer;

        $r1 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: java.util.List receivedSchemeDatas>;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r1);

        return $r2;
    }

    public byte[] executeProvisionRequest(java.util.UUID, androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest) throws androidx.media3.exoplayer.drm.MediaDrmCallbackException
    {
        androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer r0;
        java.util.UUID r1;
        androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest r2, $r8;
        java.util.List $r3, $r5;
        byte[] $r4, $r7, $r9, $r10, $r12;
        com.google.common.collect.ImmutableList $r6, $r11;
        boolean $z1;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest;

        $r3 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: java.util.List receivedProvisionRequests>;

        $r4 = virtualinvoke r2.<androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest: byte[] getData()>();

        $r5 = staticinvoke <com.google.common.primitives.Bytes: java.util.List asList(byte[])>($r4);

        $r6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>($r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = virtualinvoke r2.<androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest: byte[] getData()>();

        $r8 = <androidx.media3.test.utils.FakeExoMediaDrm: androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest FAKE_PROVISION_REQUEST>;

        $r9 = virtualinvoke $r8.<androidx.media3.exoplayer.drm.ExoMediaDrm$ProvisionRequest: byte[] getData()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r7, $r9);

        if $z1 == 0 goto label1;

        $r11 = <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList VALID_PROVISION_RESPONSE>;

        $r12 = staticinvoke <com.google.common.primitives.Bytes: byte[] toArray(java.util.Collection)>($r11);

        return $r12;

     label1:
        $r10 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        return $r10;
    }

    public byte[] executeKeyRequest(java.util.UUID, androidx.media3.exoplayer.drm.ExoMediaDrm$KeyRequest) throws androidx.media3.exoplayer.drm.MediaDrmCallbackException
    {
        androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer r0;
        java.util.UUID r1;
        androidx.media3.exoplayer.drm.ExoMediaDrm$KeyRequest r2;
        com.google.common.collect.ImmutableList r3, r8;
        byte[] $r4, $r9;
        androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData $r5;
        java.util.List $r6;
        boolean $z1, $z2;
        com.google.common.collect.ImmutableSet $r7;

        r0 := @this: androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: androidx.media3.exoplayer.drm.ExoMediaDrm$KeyRequest;

        $r4 = virtualinvoke r2.<androidx.media3.exoplayer.drm.ExoMediaDrm$KeyRequest: byte[] getData()>();

        $r5 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData fromByteArray(byte[])>($r4);

        r3 = $r5.<androidx.media3.test.utils.FakeExoMediaDrm$KeyRequestData: com.google.common.collect.ImmutableList schemeDatas>;

        $r6 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: java.util.List receivedSchemeDatas>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r3);

        $z1 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: boolean nextResponseIndicatesProvisioningRequired>;

        if $z1 == 0 goto label1;

        r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: boolean nextResponseIndicatesProvisioningRequired> = 0;

        r8 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList access$100()>();

        goto label3;

     label1:
        $r7 = r0.<androidx.media3.test.utils.FakeExoMediaDrm$LicenseServer: com.google.common.collect.ImmutableSet allowedSchemeDatas>;

        $z2 = virtualinvoke $r7.<com.google.common.collect.ImmutableSet: boolean contains(java.lang.Object)>(r3);

        if $z2 == 0 goto label2;

        r8 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList access$200()>();

        goto label3;

     label2:
        r8 = staticinvoke <androidx.media3.test.utils.FakeExoMediaDrm: com.google.common.collect.ImmutableList access$300()>();

     label3:
        $r9 = staticinvoke <com.google.common.primitives.Bytes: byte[] toArray(java.util.Collection)>(r8);

        return $r9;
    }

