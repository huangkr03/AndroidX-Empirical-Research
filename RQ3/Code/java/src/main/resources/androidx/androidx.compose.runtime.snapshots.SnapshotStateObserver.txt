androidx.compose.runtime.snapshots.SnapshotStateObserver
<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function1 onChangedExecutor>
<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function2 applyObserver>
<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function1 readObserver>
<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector observedScopeMaps>
<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.ObserverHandle applyUnsubscribe>
<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused>
<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap currentMap>
<androidx.compose.runtime.snapshots.SnapshotStateObserver: int $stable>
    public void <init>(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0;
        kotlin.jvm.functions.Function1 r1, $r5;
        byte b0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1 $r2;
        kotlin.jvm.functions.Function2 $r3;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1 $r4;
        androidx.compose.runtime.collection.MutableVector $r6;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap[] $r7;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "onChangedExecutor");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function1 onChangedExecutor> = r1;

        $r2 = new androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1;

        specialinvoke $r2.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1: void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r0);

        $r3 = (kotlin.jvm.functions.Function2) $r2;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function2 applyObserver> = $r3;

        $r4 = new androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1;

        specialinvoke $r4.<androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1: void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r0);

        $r5 = (kotlin.jvm.functions.Function1) $r4;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function1 readObserver> = $r5;

        b0 = 16;

        $r6 = new androidx.compose.runtime.collection.MutableVector;

        $r7 = newarray (androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)[b0];

        specialinvoke $r6.<androidx.compose.runtime.collection.MutableVector: void <init>(java.lang.Object[],int)>($r7, 0);

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector observedScopeMaps> = $r6;

        return;
    }

    private final void forEachScopeMap(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.collection.MutableVector r2, r3;
        int i0, i1;
        java.lang.Object[] r4, $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r8;
        kotlin.Unit $r9;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r0);

        entermonitor r2;

     label1:
        r3 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r0);

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r5 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r5;

     label2:
        $r6 = r4[i1];

        interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r6);

        i1 = i1 + 1;

        if i1 < i0 goto label2;

     label3:
        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        exitmonitor r2;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyStart(int)>(1);

        exitmonitor r2;

        staticinvoke <kotlin.jvm.internal.InlineMarker: void finallyEnd(int)>(1);

        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final void observeReads(java.lang.Object, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0;
        java.lang.Object r1, r5, $r8, $r14;
        kotlin.jvm.functions.Function1 r2, $r10, $r11;
        kotlin.jvm.functions.Function0 r3, $r13;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r4, $r19, r21;
        boolean z0;
        androidx.compose.runtime.collection.IdentityArrayIntMap r6, $r9;
        int i0, $i1, $i2;
        androidx.compose.runtime.collection.IdentityArrayMap $r7;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1 $r12;
        androidx.compose.runtime.snapshots.Snapshot $r15;
        java.lang.Throwable $r16, $r17;
        androidx.compose.runtime.collection.MutableVector r18;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r3 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "onValueChangedForScope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "block");

        r18 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector observedScopeMaps>;

        entermonitor r18;

     label01:
        $r19 = specialinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap ensureMap(kotlin.jvm.functions.Function1)>(r2);

     label02:
        exitmonitor r18;

        goto label05;

     label03:
        $r17 := @caughtexception;

     label04:
        exitmonitor r18;

        throw $r17;

     label05:
        r4 = $r19;

        z0 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused>;

        r21 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap currentMap>;

     label06:
        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused> = 0;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap currentMap> = r4;

        r5 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.lang.Object access$getCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r4);

        r6 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayIntMap access$getCurrentScopeReads$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r4);

        i0 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int access$getCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r4);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,java.lang.Object)>(r4, r1);

        $r7 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayMap access$getScopeToValues$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r4);

        $r8 = virtualinvoke $r7.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (androidx.compose.runtime.collection.IdentityArrayIntMap) $r8;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentScopeReads$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,androidx.compose.runtime.collection.IdentityArrayIntMap)>(r4, $r9);

        $i1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int access$getCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r4);

        if $i1 != -1 goto label07;

        $r15 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.Snapshot currentSnapshot()>();

        $i2 = virtualinvoke $r15.<androidx.compose.runtime.snapshots.Snapshot: int getId()>();

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,int)>(r4, $i2);

     label07:
        $r10 = virtualinvoke r4.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 getDerivedStateEnterObserver()>();

        $r11 = virtualinvoke r4.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 getDerivedStateExitObserver()>();

        $r12 = new androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1;

        specialinvoke $r12.<androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1: void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver,kotlin.jvm.functions.Function0)>(r0, r3);

        $r13 = (kotlin.jvm.functions.Function0) $r12;

        staticinvoke <androidx.compose.runtime.SnapshotStateKt: void observeDerivedStateRecalculations(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>($r10, $r11, $r13);

        $r14 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.lang.Object access$getCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r14);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$clearObsoleteStateReads(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,java.lang.Object)>(r4, $r14);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,java.lang.Object)>(r4, r5);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentScopeReads$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,androidx.compose.runtime.collection.IdentityArrayIntMap)>(r4, r6);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,int)>(r4, i0);

     label08:
        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap currentMap> = r21;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused> = z0;

        goto label11;

     label09:
        $r16 := @caughtexception;

     label10:
        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap currentMap> = r21;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused> = z0;

        throw $r16;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public final void withNoObservations(kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0;
        kotlin.jvm.functions.Function0 r1;
        boolean z0;
        java.lang.Throwable r2, $r4;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

        z0 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused>;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused> = 1;

     label1:
        interfaceinvoke r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label2:
        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused> = z0;

        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused> = z0;

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final void clear(java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0, r2;
        java.lang.Object r1, $r8;
        androidx.compose.runtime.collection.MutableVector r3, r4;
        int i0, i1;
        java.lang.Object[] r5, $r7;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r6;
        java.lang.Throwable $r9;
        kotlin.Unit $r10;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        r2 = r0;

        r3 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r2);

        entermonitor r3;

     label1:
        r4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r2);

        i0 = virtualinvoke r4.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r7 = virtualinvoke r4.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r5 = $r7;

     label2:
        $r8 = r5[i1];

        r6 = (androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap) $r8;

        virtualinvoke r6.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void clearScopeObservations(java.lang.Object)>(r1);

        i1 = i1 + 1;

        if i1 < i0 goto label2;

     label3:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r3;

        goto label7;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r3;

        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final void clearIf(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0, r2;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.collection.MutableVector r3, r4;
        int i0, i1;
        java.lang.Object[] r5, $r7;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r6;
        java.lang.Object $r8;
        java.lang.Throwable $r9;
        kotlin.Unit $r10;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "predicate");

        r2 = r0;

        r3 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r2);

        entermonitor r3;

     label1:
        r4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r2);

        i0 = virtualinvoke r4.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r7 = virtualinvoke r4.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r7, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r5 = $r7;

     label2:
        $r8 = r5[i1];

        r6 = (androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap) $r8;

        virtualinvoke r6.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void removeScopeIf(kotlin.jvm.functions.Function1)>(r1);

        i1 = i1 + 1;

        if i1 < i0 goto label2;

     label3:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r3;

        goto label7;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r3;

        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public final void start()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0;
        kotlin.jvm.functions.Function2 $r1;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r2;
        androidx.compose.runtime.snapshots.ObserverHandle $r3;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        $r2 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function2 applyObserver>;

        $r3 = virtualinvoke $r2.<androidx.compose.runtime.snapshots.Snapshot$Companion: androidx.compose.runtime.snapshots.ObserverHandle registerApplyObserver(kotlin.jvm.functions.Function2)>($r1);

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.ObserverHandle applyUnsubscribe> = $r3;

        return;
    }

    public final void stop()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0;
        androidx.compose.runtime.snapshots.ObserverHandle $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.ObserverHandle applyUnsubscribe>;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<androidx.compose.runtime.snapshots.ObserverHandle: void dispose()>();

        goto label1;

     label1:
        return;
    }

    public final void notifyChanges(java.util.Set, androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0;
        java.util.Set r1;
        androidx.compose.runtime.snapshots.Snapshot r2;
        kotlin.jvm.functions.Function2 $r3;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "changes");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "snapshot");

        $r3 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function2 applyObserver>;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public final void clear()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0, r1;
        androidx.compose.runtime.collection.MutableVector r2, r3;
        int i0, i1;
        java.lang.Object[] r4, $r6;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r5;
        java.lang.Object $r7;
        java.lang.Throwable $r8;
        kotlin.Unit $r9;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r1 = r0;

        r2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r1);

        entermonitor r2;

     label1:
        r3 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r1);

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r6 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r6;

     label2:
        $r7 = r4[i1];

        r5 = (androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap) $r7;

        virtualinvoke r5.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void clear()>();

        i1 = i1 + 1;

        if i1 < i0 goto label2;

     label3:
        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r2;

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r2;

        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private final androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap ensureMap(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver r0;
        kotlin.jvm.functions.Function1 r1, $r8, $r10;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r2, r5, $r6, r13;
        java.lang.Object[] r3, $r9;
        java.lang.Object r4, $r7, $r12;
        androidx.compose.runtime.collection.MutableVector r11, $r14;
        int i0, i1;
        boolean $z3, z4;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r11 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector observedScopeMaps>;

        i0 = virtualinvoke r11.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label5;

        i1 = 0;

        $r9 = virtualinvoke r11.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r9, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r3 = $r9;

     label1:
        r4 = r3[i1];

        r5 = (androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap) r4;

        $r10 = virtualinvoke r5.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 getOnChanged()>();

        if $r10 != r1 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        if $z3 == 0 goto label4;

        $r12 = r4;

        goto label6;

     label4:
        i1 = i1 + 1;

        if i1 < i0 goto label1;

     label5:
        $r12 = null;

     label6:
        r2 = (androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap) $r12;

        if r2 != null goto label7;

        $r6 = new androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r1, "null cannot be cast to non-null type kotlin.Function1<kotlin.Any, kotlin.Unit>");

        $r7 = staticinvoke <kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)>(r1, 1);

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        specialinvoke $r6.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void <init>(kotlin.jvm.functions.Function1)>($r8);

        r13 = $r6;

        $r14 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector observedScopeMaps>;

        z4 = 0;

        virtualinvoke $r14.<androidx.compose.runtime.collection.MutableVector: boolean add(java.lang.Object)>(r13);

        return r13;

     label7:
        return r2;
    }

    public static final androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r0;
        androidx.compose.runtime.collection.MutableVector $r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        $r1 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector observedScopeMaps>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function1 access$getReadObserver$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r0;
        kotlin.jvm.functions.Function1 $r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        $r1 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function1 readObserver>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function1 access$getOnChangedExecutor$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r0;
        kotlin.jvm.functions.Function1 $r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        $r1 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function1 onChangedExecutor>;

        return $r1;
    }

    public static final boolean access$isPaused$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r0;
        boolean $z0;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        $z0 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean isPaused>;

        return $z0;
    }

    public static final androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap access$getCurrentMap$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        $r1 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap currentMap>;

        return $r1;
    }

    static void <clinit>()
    {
        <androidx.compose.runtime.snapshots.SnapshotStateObserver: int $stable> = 8;

        return;
    }

androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2
<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>
    void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2 r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2;

        $r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2 r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver r1;
        androidx.compose.runtime.collection.MutableVector r2, r3;
        int i0, i1;
        java.lang.Object[] r4, $r6;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r5;
        java.lang.Object $r7;
        java.lang.Throwable $r8;
        kotlin.Unit $r9;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2;

        r1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>;

        r2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r1);

        entermonitor r2;

     label1:
        r3 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r1);

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label3;

        i1 = 0;

        $r6 = virtualinvoke r3.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r6, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r4 = $r6;

     label2:
        $r7 = r4[i1];

        r5 = (androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap) $r7;

        virtualinvoke r5.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void notifyInvalidatedScopes()>();

        i1 = i1 + 1;

        if i1 < i0 goto label2;

     label3:
        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label4:
        exitmonitor r2;

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r2;

        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1
<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>
    void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1 r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1;

        $r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(java.util.Set, androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1 r0;
        java.util.Set r1;
        androidx.compose.runtime.snapshots.Snapshot r2;
        androidx.compose.runtime.snapshots.SnapshotStateObserver r3, $r8, $r11;
        androidx.compose.runtime.collection.MutableVector r4, r5;
        int i0, i1;
        java.lang.Object[] r6, $r13;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r7;
        kotlin.jvm.functions.Function1 $r9;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2 $r10;
        java.lang.Object $r14;
        boolean $z3, z4, $z6;
        java.lang.Throwable $r15;
        kotlin.Unit $r16;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "applied");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "<anonymous parameter 1>");

        z4 = 0;

        r3 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>;

        r4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r3);

        entermonitor r4;

     label01:
        r5 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r3);

        i0 = virtualinvoke r5.<androidx.compose.runtime.collection.MutableVector: int getSize()>();

        if i0 <= 0 goto label06;

        i1 = 0;

        $r13 = virtualinvoke r5.<androidx.compose.runtime.collection.MutableVector: java.lang.Object[] getContent()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r13, "null cannot be cast to non-null type kotlin.Array<T of androidx.compose.runtime.collection.MutableVector>");

        r6 = $r13;

     label02:
        $r14 = r6[i1];

        r7 = (androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap) $r14;

        $z3 = virtualinvoke r7.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: boolean recordInvalidation(java.util.Set)>(r1);

        if $z3 != 0 goto label03;

        if z4 == 0 goto label04;

     label03:
        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        z4 = $z6;

        i1 = i1 + 1;

        if i1 < i0 goto label02;

     label06:
        $r16 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label07:
        exitmonitor r4;

        goto label10;

     label08:
        $r15 := @caughtexception;

     label09:
        exitmonitor r4;

        throw $r15;

     label10:
        if z4 == 0 goto label11;

        $r8 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>;

        $r9 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function1 access$getOnChangedExecutor$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>($r8);

        $r10 = new androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2;

        $r11 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>;

        specialinvoke $r10.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1$2: void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver)>($r11);

        interfaceinvoke $r9.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r10);

     label11:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1 r0;
        java.lang.Object r1, r2;
        androidx.compose.runtime.snapshots.Snapshot $r3;
        java.util.Set $r4;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.util.Set) r1;

        $r3 = (androidx.compose.runtime.snapshots.Snapshot) r2;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$applyObserver$1: void invoke(java.util.Set,androidx.compose.runtime.snapshots.Snapshot)>($r4, $r3);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap this$0>
    void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1 r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1;

        $r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.runtime.State)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1 r0;
        androidx.compose.runtime.State r1;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r2;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1;

        r1 := @parameter0: androidx.compose.runtime.State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        r2 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap this$0>;

        i0 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int access$getDeriveStateScopeCount$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r2);

        $i1 = i0 + 1;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setDeriveStateScopeCount$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,int)>(r2, $i1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1 r0;
        java.lang.Object r1;
        androidx.compose.runtime.State $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.runtime.State) r1;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1: void invoke(androidx.compose.runtime.State)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap this$0>
    void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1 r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1;

        $r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.compose.runtime.State)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1 r0;
        androidx.compose.runtime.State r1;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r2;
        int i0, $i1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1;

        r1 := @parameter0: androidx.compose.runtime.State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        r2 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap this$0>;

        i0 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int access$getDeriveStateScopeCount$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r2);

        $i1 = i0 + -1;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setDeriveStateScopeCount$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,int)>(r2, $i1);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1 r0;
        java.lang.Object r1;
        androidx.compose.runtime.State $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.runtime.State) r1;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1: void invoke(androidx.compose.runtime.State)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 onChanged>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.lang.Object currentScope>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayIntMap currentScopeReads>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int currentToken>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap valueToScopes>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayMap scopeToValues>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArraySet invalidated>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 derivedStateEnterObserver>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 derivedStateExitObserver>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int deriveStateScopeCount>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap dependencyToDerivedStates>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.util.HashMap recordedDerivedStateValues>
    public void <init>(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        kotlin.jvm.functions.Function1 r1, $r6, $r8;
        androidx.compose.runtime.collection.IdentityScopeMap $r2, $r9;
        androidx.compose.runtime.collection.IdentityArrayMap $r3;
        androidx.compose.runtime.collection.IdentityArraySet $r4;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1 $r5;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1 $r7;
        java.util.HashMap $r10;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "onChanged");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 onChanged> = r1;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int currentToken> = -1;

        $r2 = new androidx.compose.runtime.collection.IdentityScopeMap;

        specialinvoke $r2.<androidx.compose.runtime.collection.IdentityScopeMap: void <init>()>();

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap valueToScopes> = $r2;

        $r3 = new androidx.compose.runtime.collection.IdentityArrayMap;

        specialinvoke $r3.<androidx.compose.runtime.collection.IdentityArrayMap: void <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 1, null);

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayMap scopeToValues> = $r3;

        $r4 = new androidx.compose.runtime.collection.IdentityArraySet;

        specialinvoke $r4.<androidx.compose.runtime.collection.IdentityArraySet: void <init>()>();

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArraySet invalidated> = $r4;

        $r5 = new androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1;

        specialinvoke $r5.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateEnterObserver$1: void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r0);

        $r6 = (kotlin.jvm.functions.Function1) $r5;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 derivedStateEnterObserver> = $r6;

        $r7 = new androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1;

        specialinvoke $r7.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap$derivedStateExitObserver$1: void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r0);

        $r8 = (kotlin.jvm.functions.Function1) $r7;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 derivedStateExitObserver> = $r8;

        $r9 = new androidx.compose.runtime.collection.IdentityScopeMap;

        specialinvoke $r9.<androidx.compose.runtime.collection.IdentityScopeMap: void <init>()>();

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap dependencyToDerivedStates> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.util.HashMap recordedDerivedStateValues> = $r10;

        return;
    }

    public final kotlin.jvm.functions.Function1 getOnChanged()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 onChanged>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function1 getDerivedStateEnterObserver()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 derivedStateEnterObserver>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function1 getDerivedStateExitObserver()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 derivedStateExitObserver>;

        return $r1;
    }

    public final void recordRead(java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        java.lang.Object r1, r2, r4, $r5, $r11;
        androidx.compose.runtime.collection.IdentityArrayIntMap r3, $r14, $r16, r17, r18;
        int i0, $i1, $i2, $i3, i4, $i5;
        boolean $z0;
        androidx.compose.runtime.collection.IdentityScopeMap $r6, $r13;
        androidx.compose.runtime.DerivedState $r7, $r9;
        java.util.HashMap $r8;
        java.util.Map $r10;
        androidx.compose.runtime.collection.IdentityArrayMap $r15;
        java.lang.Object[] r19;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $i1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int deriveStateScopeCount>;

        if $i1 <= 0 goto label1;

        return;

     label1:
        $r5 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.lang.Object currentScope>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5);

        r2 = $r5;

        $r16 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayIntMap currentScopeReads>;

        if $r16 != null goto label2;

        $r14 = new androidx.compose.runtime.collection.IdentityArrayIntMap;

        specialinvoke $r14.<androidx.compose.runtime.collection.IdentityArrayIntMap: void <init>()>();

        r17 = $r14;

        r18 = r17;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayIntMap currentScopeReads> = r18;

        $r15 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayMap scopeToValues>;

        virtualinvoke $r15.<androidx.compose.runtime.collection.IdentityArrayMap: void set(java.lang.Object,java.lang.Object)>(r2, r18);

        $r16 = r17;

     label2:
        r3 = $r16;

        $i2 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int currentToken>;

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.IdentityArrayIntMap: int add(java.lang.Object,int)>(r1, $i2);

        $z0 = r1 instanceof androidx.compose.runtime.DerivedState;

        if $z0 == 0 goto label5;

        $i3 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int currentToken>;

        if i0 == $i3 goto label5;

        $r7 = (androidx.compose.runtime.DerivedState) r1;

        r19 = interfaceinvoke $r7.<androidx.compose.runtime.DerivedState: java.lang.Object[] getDependencies()>();

        i4 = 0;

        $i5 = lengthof r19;

     label3:
        if i4 >= $i5 goto label4;

        r4 = r19[i4];

        if r4 == null goto label4;

        $r13 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap dependencyToDerivedStates>;

        virtualinvoke $r13.<androidx.compose.runtime.collection.IdentityScopeMap: boolean add(java.lang.Object,java.lang.Object)>(r4, r1);

        i4 = i4 + 1;

        goto label3;

     label4:
        $r8 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.util.HashMap recordedDerivedStateValues>;

        $r10 = (java.util.Map) $r8;

        $r9 = (androidx.compose.runtime.DerivedState) r1;

        $r11 = interfaceinvoke $r9.<androidx.compose.runtime.DerivedState: java.lang.Object getCurrentValue()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11);

     label5:
        if i0 != -1 goto label6;

        $r6 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap valueToScopes>;

        virtualinvoke $r6.<androidx.compose.runtime.collection.IdentityScopeMap: boolean add(java.lang.Object,java.lang.Object)>(r1, r2);

     label6:
        return;
    }

    public final void observe(java.lang.Object, kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        java.lang.Object r1, r3, $r6, $r9;
        kotlin.jvm.functions.Function0 r2;
        androidx.compose.runtime.collection.IdentityArrayIntMap r4, $r7;
        int i0, $i1, $i2;
        androidx.compose.runtime.collection.IdentityArrayMap $r5;
        androidx.compose.runtime.snapshots.Snapshot $r10;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "block");

        r3 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.lang.Object access$getCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r0);

        r4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayIntMap access$getCurrentScopeReads$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r0);

        i0 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int access$getCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r0);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,java.lang.Object)>(r0, r1);

        $r5 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayMap access$getScopeToValues$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r0);

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (androidx.compose.runtime.collection.IdentityArrayIntMap) $r6;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentScopeReads$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,androidx.compose.runtime.collection.IdentityArrayIntMap)>(r0, $r7);

        $i1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int access$getCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r0);

        if $i1 != -1 goto label1;

        $r10 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.Snapshot currentSnapshot()>();

        $i2 = virtualinvoke $r10.<androidx.compose.runtime.snapshots.Snapshot: int getId()>();

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,int)>(r0, $i2);

     label1:
        interfaceinvoke r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        $r9 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.lang.Object access$getCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)>(r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r9);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$clearObsoleteStateReads(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,java.lang.Object)>(r0, $r9);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,java.lang.Object)>(r0, r3);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentScopeReads$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,androidx.compose.runtime.collection.IdentityArrayIntMap)>(r0, r4);

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void access$setCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap,int)>(r0, i0);

        return;
    }

    private final void clearObsoleteStateReads(java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        java.lang.Object r1, r3, r4, $r8;
        androidx.compose.runtime.collection.IdentityArrayIntMap r2, $r5;
        int i0, i1, $i2, i3, i4, i5, i6, i7;
        boolean z2, z3, $z5;
        java.lang.Object[] $r6, $r7, $r10;
        int[] $r9, $r11;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter0: java.lang.Object;

        $r5 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayIntMap currentScopeReads>;

        if $r5 == null goto label10;

        r2 = $r5;

        i3 = 0;

        i4 = 0;

        i5 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayIntMap: int getSize()>();

     label01:
        if i4 >= i5 goto label07;

        $r7 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayIntMap: java.lang.Object[] getKeys()>();

        $r8 = $r7[i4];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r8, "null cannot be cast to non-null type kotlin.Any");

        r3 = $r8;

        $r9 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayIntMap: int[] getValues()>();

        i0 = $r9[i4];

        i1 = i0;

        r4 = r3;

        $i2 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int currentToken>;

        if i1 == $i2 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z2 = $z5;

        z3 = z2;

        if z3 == 0 goto label04;

        specialinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void removeObservation(java.lang.Object,java.lang.Object)>(r1, r4);

     label04:
        if z2 != 0 goto label06;

        if i3 == i4 goto label05;

        $r10 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayIntMap: java.lang.Object[] getKeys()>();

        $r10[i3] = r3;

        $r11 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayIntMap: int[] getValues()>();

        $r11[i3] = i0;

     label05:
        i3 = i3 + 1;

     label06:
        i4 = i4 + 1;

        goto label01;

     label07:
        i6 = i3;

        i7 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayIntMap: int getSize()>();

     label08:
        if i6 >= i7 goto label09;

        $r6 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayIntMap: java.lang.Object[] getKeys()>();

        $r6[i6] = null;

        i6 = i6 + 1;

        goto label08;

     label09:
        virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayIntMap: void setSize(int)>(i3);

        goto label10;

     label10:
        return;
    }

    public final void clearScopeObservations(java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        java.lang.Object r1, r4, $r6, $r9;
        androidx.compose.runtime.collection.IdentityArrayIntMap r2, r3, $r7;
        int i0, $i1, i2;
        androidx.compose.runtime.collection.IdentityArrayMap $r5;
        java.lang.Object[] $r8;
        int[] $r10;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "scope");

        $r5 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayMap scopeToValues>;

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (androidx.compose.runtime.collection.IdentityArrayIntMap) $r6;

        if $r7 != null goto label1;

        return;

     label1:
        r2 = $r7;

        r3 = r2;

        i2 = 0;

        i0 = virtualinvoke r3.<androidx.compose.runtime.collection.IdentityArrayIntMap: int getSize()>();

     label2:
        if i2 >= i0 goto label3;

        $r8 = virtualinvoke r3.<androidx.compose.runtime.collection.IdentityArrayIntMap: java.lang.Object[] getKeys()>();

        $r9 = $r8[i2];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r9, "null cannot be cast to non-null type kotlin.Any");

        $r10 = virtualinvoke r3.<androidx.compose.runtime.collection.IdentityArrayIntMap: int[] getValues()>();

        $i1 = $r10[i2];

        r4 = $r9;

        specialinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void removeObservation(java.lang.Object,java.lang.Object)>(r1, r4);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    public final void removeScopeIf(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.compose.runtime.collection.IdentityArrayMap r2;
        java.lang.Object r3, r4, r6, r7, r9, $r13, $r20, $r22;
        androidx.compose.runtime.collection.IdentityArrayIntMap r5, r8;
        boolean z2, $z6;
        int i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        java.lang.Object[] $r10, $r11, $r12, $r14, $r17, $r18, $r19, $r21;
        java.lang.Boolean $r15, $r16;
        int[] $r23;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "predicate");

        r2 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayMap scopeToValues>;

        i3 = 0;

        i4 = 0;

        i5 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: int getSize$runtime_release()>();

     label1:
        if i4 >= i5 goto label6;

        $r12 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object[] getKeys$runtime_release()>();

        $r13 = $r12[i4];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r13, "null cannot be cast to non-null type Key of androidx.compose.runtime.collection.IdentityArrayMap");

        r3 = $r13;

        $r14 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object[] getValues$runtime_release()>();

        r4 = $r14[i4];

        r5 = (androidx.compose.runtime.collection.IdentityArrayIntMap) r4;

        r6 = r3;

        r7 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r6);

        $r15 = (java.lang.Boolean) r7;

        z2 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        if z2 == 0 goto label3;

        r8 = r5;

        i6 = 0;

        i0 = virtualinvoke r8.<androidx.compose.runtime.collection.IdentityArrayIntMap: int getSize()>();

     label2:
        if i6 >= i0 goto label3;

        $r21 = virtualinvoke r8.<androidx.compose.runtime.collection.IdentityArrayIntMap: java.lang.Object[] getKeys()>();

        $r22 = $r21[i6];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r22, "null cannot be cast to non-null type kotlin.Any");

        $r23 = virtualinvoke r8.<androidx.compose.runtime.collection.IdentityArrayIntMap: int[] getValues()>();

        $i2 = $r23[i6];

        r9 = $r22;

        specialinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void removeObservation(java.lang.Object,java.lang.Object)>(r6, r9);

        i6 = i6 + 1;

        goto label2;

     label3:
        $r16 = (java.lang.Boolean) r7;

        $z6 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

        if $z6 != 0 goto label5;

        if i3 == i4 goto label4;

        $r17 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object[] getKeys$runtime_release()>();

        $r17[i3] = r3;

        $r18 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object[] getValues$runtime_release()>();

        $r19 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object[] getValues$runtime_release()>();

        $r20 = $r19[i4];

        $r18[i3] = $r20;

     label4:
        i3 = i3 + 1;

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        $i1 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: int getSize$runtime_release()>();

        if $i1 <= i3 goto label9;

        i7 = i3;

        i8 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: int getSize$runtime_release()>();

     label7:
        if i7 >= i8 goto label8;

        $r10 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object[] getKeys$runtime_release()>();

        $r10[i7] = null;

        $r11 = virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: java.lang.Object[] getValues$runtime_release()>();

        $r11[i7] = null;

        i7 = i7 + 1;

        goto label7;

     label8:
        virtualinvoke r2.<androidx.compose.runtime.collection.IdentityArrayMap: void setSize$runtime_release(int)>(i3);

     label9:
        return;
    }

    private final void removeObservation(java.lang.Object, java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        java.lang.Object r1, r2;
        androidx.compose.runtime.collection.IdentityScopeMap $r3, $r4, $r5;
        boolean $z1, $z2;
        java.util.HashMap $r6;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap valueToScopes>;

        virtualinvoke $r3.<androidx.compose.runtime.collection.IdentityScopeMap: boolean remove(java.lang.Object,java.lang.Object)>(r2, r1);

        $z1 = r2 instanceof androidx.compose.runtime.DerivedState;

        if $z1 == 0 goto label1;

        $r4 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap valueToScopes>;

        $z2 = virtualinvoke $r4.<androidx.compose.runtime.collection.IdentityScopeMap: boolean contains(java.lang.Object)>(r2);

        if $z2 != 0 goto label1;

        $r5 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap dependencyToDerivedStates>;

        virtualinvoke $r5.<androidx.compose.runtime.collection.IdentityScopeMap: void removeScope(java.lang.Object)>(r2);

        $r6 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.util.HashMap recordedDerivedStateValues>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    public final void clear()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        androidx.compose.runtime.collection.IdentityScopeMap $r1, $r3;
        androidx.compose.runtime.collection.IdentityArrayMap $r2;
        java.util.HashMap $r4;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap valueToScopes>;

        virtualinvoke $r1.<androidx.compose.runtime.collection.IdentityScopeMap: void clear()>();

        $r2 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayMap scopeToValues>;

        virtualinvoke $r2.<androidx.compose.runtime.collection.IdentityArrayMap: void clear()>();

        $r3 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap dependencyToDerivedStates>;

        virtualinvoke $r3.<androidx.compose.runtime.collection.IdentityScopeMap: void clear()>();

        $r4 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.util.HashMap recordedDerivedStateValues>;

        virtualinvoke $r4.<java.util.HashMap: void clear()>();

        return;
    }

    public final boolean recordInvalidation(java.util.Set)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        java.util.Set r1;
        java.util.Iterator r2;
        java.lang.Object r3, r4, r8, $r11, $r13, r21;
        androidx.compose.runtime.SnapshotMutationPolicy r5, $r18;
        androidx.compose.runtime.collection.IdentityScopeMap r6, $r9, r15, r19;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;
        androidx.compose.runtime.collection.IdentityArraySet r7, $r10, $r14, r16, r20;
        boolean $z3, $z4, $z6, z8;
        java.util.HashMap $r12;
        androidx.compose.runtime.DerivedState r17;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter0: java.util.Set;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "changes");

        z8 = 0;

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label9;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r9 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap dependencyToDerivedStates>;

        $z4 = virtualinvoke $r9.<androidx.compose.runtime.collection.IdentityScopeMap: boolean contains(java.lang.Object)>(r3);

        if $z4 == 0 goto label6;

        r15 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap dependencyToDerivedStates>;

        i2 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: int access$find(androidx.compose.runtime.collection.IdentityScopeMap,java.lang.Object)>(r15, r3);

        if i2 < 0 goto label6;

        r16 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet access$scopeSetAt(androidx.compose.runtime.collection.IdentityScopeMap,int)>(r15, i2);

        i3 = 0;

        i4 = virtualinvoke r16.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label2:
        if i3 >= i4 goto label6;

        $r11 = virtualinvoke r16.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i3);

        r17 = (androidx.compose.runtime.DerivedState) $r11;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>(r17, "null cannot be cast to non-null type androidx.compose.runtime.DerivedState<kotlin.Any?>");

        $r12 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.util.HashMap recordedDerivedStateValues>;

        r4 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r17);

        $r18 = interfaceinvoke r17.<androidx.compose.runtime.DerivedState: androidx.compose.runtime.SnapshotMutationPolicy getPolicy()>();

        if $r18 != null goto label3;

        $r18 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.SnapshotMutationPolicy structuralEqualityPolicy()>();

     label3:
        r5 = $r18;

        $r13 = interfaceinvoke r17.<androidx.compose.runtime.DerivedState: java.lang.Object getCurrentValue()>();

        $z6 = interfaceinvoke r5.<androidx.compose.runtime.SnapshotMutationPolicy: boolean equivalent(java.lang.Object,java.lang.Object)>($r13, r4);

        if $z6 != 0 goto label5;

        r6 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap valueToScopes>;

        i0 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: int access$find(androidx.compose.runtime.collection.IdentityScopeMap,java.lang.Object)>(r6, r17);

        if i0 < 0 goto label5;

        r7 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet access$scopeSetAt(androidx.compose.runtime.collection.IdentityScopeMap,int)>(r6, i0);

        i5 = 0;

        i1 = virtualinvoke r7.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label4:
        if i5 >= i1 goto label5;

        r8 = virtualinvoke r7.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i5);

        $r14 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArraySet invalidated>;

        virtualinvoke $r14.<androidx.compose.runtime.collection.IdentityArraySet: boolean add(java.lang.Object)>(r8);

        z8 = 1;

        i5 = i5 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label2;

     label6:
        r19 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityScopeMap valueToScopes>;

        i6 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: int access$find(androidx.compose.runtime.collection.IdentityScopeMap,java.lang.Object)>(r19, r3);

        if i6 < 0 goto label8;

        r20 = staticinvoke <androidx.compose.runtime.collection.IdentityScopeMap: androidx.compose.runtime.collection.IdentityArraySet access$scopeSetAt(androidx.compose.runtime.collection.IdentityScopeMap,int)>(r19, i6);

        i7 = 0;

        i8 = virtualinvoke r20.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label7:
        if i7 >= i8 goto label8;

        r21 = virtualinvoke r20.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i7);

        $r10 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArraySet invalidated>;

        virtualinvoke $r10.<androidx.compose.runtime.collection.IdentityArraySet: boolean add(java.lang.Object)>(r21);

        z8 = 1;

        i7 = i7 + 1;

        goto label7;

     label8:
        goto label1;

     label9:
        return z8;
    }

    public final void notifyInvalidatedScopes()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap r0;
        androidx.compose.runtime.collection.IdentityArraySet r1, $r3;
        kotlin.jvm.functions.Function1 r2;
        int i0, i1;
        java.lang.Object $r4;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArraySet invalidated>;

        r2 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: kotlin.jvm.functions.Function1 onChanged>;

        i1 = 0;

        i0 = virtualinvoke r1.<androidx.compose.runtime.collection.IdentityArraySet: int size()>();

     label1:
        if i1 >= i0 goto label2;

        $r4 = virtualinvoke r1.<androidx.compose.runtime.collection.IdentityArraySet: java.lang.Object get(int)>(i1);

        interfaceinvoke r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArraySet invalidated>;

        virtualinvoke $r3.<androidx.compose.runtime.collection.IdentityArraySet: void clear()>();

        return;
    }

    public static final java.lang.Object access$getCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        $r1 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.lang.Object currentScope>;

        return $r1;
    }

    public static final androidx.compose.runtime.collection.IdentityArrayIntMap access$getCurrentScopeReads$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        androidx.compose.runtime.collection.IdentityArrayIntMap $r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        $r1 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayIntMap currentScopeReads>;

        return $r1;
    }

    public static final int access$getCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        $i0 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int currentToken>;

        return $i0;
    }

    public static final void access$setCurrentScope$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap, java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        java.lang.Object r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter1: java.lang.Object;

        $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: java.lang.Object currentScope> = r1;

        return;
    }

    public static final void access$setCurrentScopeReads$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap, androidx.compose.runtime.collection.IdentityArrayIntMap)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        androidx.compose.runtime.collection.IdentityArrayIntMap r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter1: androidx.compose.runtime.collection.IdentityArrayIntMap;

        $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayIntMap currentScopeReads> = r1;

        return;
    }

    public static final androidx.compose.runtime.collection.IdentityArrayMap access$getScopeToValues$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        androidx.compose.runtime.collection.IdentityArrayMap $r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        $r1 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: androidx.compose.runtime.collection.IdentityArrayMap scopeToValues>;

        return $r1;
    }

    public static final void access$setCurrentToken$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap, int)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        i0 := @parameter1: int;

        $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int currentToken> = i0;

        return;
    }

    public static final void access$clearObsoleteStateReads(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap, java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        java.lang.Object r1;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        r1 := @parameter1: java.lang.Object;

        specialinvoke $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void clearObsoleteStateReads(java.lang.Object)>(r1);

        return;
    }

    public static final int access$getDeriveStateScopeCount$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        int $i0;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        $i0 = $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int deriveStateScopeCount>;

        return $i0;
    }

    public static final void access$setDeriveStateScopeCount$p(androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap, int)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r0;
        int i0;

        $r0 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap;

        i0 := @parameter1: int;

        $r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: int deriveStateScopeCount> = i0;

        return;
    }

androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1
<androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>
<androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1: kotlin.jvm.functions.Function0 $block>
    void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver, kotlin.jvm.functions.Function0)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1 r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r1;
        kotlin.jvm.functions.Function0 $r2;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1;

        $r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        $r2 := @parameter1: kotlin.jvm.functions.Function0;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0> = $r1;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1: kotlin.jvm.functions.Function0 $block> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1 r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r1;
        androidx.compose.runtime.snapshots.Snapshot$Companion $r2;
        kotlin.jvm.functions.Function1 $r3;
        kotlin.jvm.functions.Function0 $r4;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1;

        $r2 = <androidx.compose.runtime.snapshots.Snapshot: androidx.compose.runtime.snapshots.Snapshot$Companion Companion>;

        $r1 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>;

        $r3 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: kotlin.jvm.functions.Function1 access$getReadObserver$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>($r1);

        $r4 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1: kotlin.jvm.functions.Function0 $block>;

        virtualinvoke $r2.<androidx.compose.runtime.snapshots.Snapshot$Companion: java.lang.Object observe(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>($r3, null, $r4);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$observeReads$1$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1
<androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>
    void <init>(androidx.compose.runtime.snapshots.SnapshotStateObserver)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1 r0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver $r1;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1;

        $r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotStateObserver;

        r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1 r0;
        java.lang.Object r1;
        androidx.compose.runtime.collection.MutableVector r2, r4;
        androidx.compose.runtime.snapshots.SnapshotStateObserver r3, $r5, $r6;
        boolean $z0;
        androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap $r7;
        java.lang.Throwable $r8;
        kotlin.Unit $r9;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        $r5 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>;

        $z0 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: boolean access$isPaused$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>($r5);

        if $z0 != 0 goto label5;

        $r6 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>;

        r2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.collection.MutableVector access$getObservedScopeMaps$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>($r6);

        r3 = r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1: androidx.compose.runtime.snapshots.SnapshotStateObserver this$0>;

        r4 = r2;

        entermonitor r4;

     label1:
        $r7 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateObserver: androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap access$getCurrentMap$p(androidx.compose.runtime.snapshots.SnapshotStateObserver)>(r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7);

        virtualinvoke $r7.<androidx.compose.runtime.snapshots.SnapshotStateObserver$ObservedScopeMap: void recordRead(java.lang.Object)>(r1);

        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label2:
        exitmonitor r4;

        goto label5;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r4;

        throw $r8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1 r0;
        java.lang.Object r1;
        kotlin.Unit $r2;

        r0 := @this: androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.SnapshotStateObserver$readObserver$1: void invoke(java.lang.Object)>(r1);

        $r2 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r2;
    }

