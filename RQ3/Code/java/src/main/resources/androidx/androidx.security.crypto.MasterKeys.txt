androidx.security.crypto.MasterKeys
<androidx.security.crypto.MasterKeys: int KEY_SIZE>
<androidx.security.crypto.MasterKeys: java.lang.String ANDROID_KEYSTORE>
<androidx.security.crypto.MasterKeys: java.lang.String KEYSTORE_PATH_URI>
<androidx.security.crypto.MasterKeys: java.lang.String MASTER_KEY_ALIAS>
<androidx.security.crypto.MasterKeys: android.security.keystore.KeyGenParameterSpec AES256_GCM_SPEC>
    private void <init>()
    {
        androidx.security.crypto.MasterKeys r0;

        r0 := @this: androidx.security.crypto.MasterKeys;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static android.security.keystore.KeyGenParameterSpec createAES256GCMKeyGenParameterSpec(java.lang.String)
    {
        java.lang.String r0;
        android.security.keystore.KeyGenParameterSpec$Builder r1, $r2, $r4, $r6;
        java.lang.String[] $r3, $r5;
        android.security.keystore.KeyGenParameterSpec $r7;

        r0 := @parameter0: java.lang.String;

        $r2 = new android.security.keystore.KeyGenParameterSpec$Builder;

        specialinvoke $r2.<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(java.lang.String,int)>(r0, 3);

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "GCM";

        $r4 = virtualinvoke $r2.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setBlockModes(java.lang.String[])>($r3);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "NoPadding";

        $r6 = virtualinvoke $r4.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setEncryptionPaddings(java.lang.String[])>($r5);

        r1 = virtualinvoke $r6.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeySize(int)>(256);

        $r7 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()>();

        return $r7;
    }

    public static java.lang.String getOrCreate(android.security.keystore.KeyGenParameterSpec) throws java.security.GeneralSecurityException, java.io.IOException
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: android.security.keystore.KeyGenParameterSpec;

        staticinvoke <androidx.security.crypto.MasterKeys: void validate(android.security.keystore.KeyGenParameterSpec)>(r0);

        $r1 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

        $z0 = staticinvoke <androidx.security.crypto.MasterKeys: boolean keyExists(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        staticinvoke <androidx.security.crypto.MasterKeys: void generateKey(android.security.keystore.KeyGenParameterSpec)>(r0);

     label1:
        $r2 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

        return $r2;
    }

    static void validate(android.security.keystore.KeyGenParameterSpec)
    {
        android.security.keystore.KeyGenParameterSpec r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String[] $r1, $r2, $r3, $r4, $r9, $r21;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r5, $r6, $r13, $r18, $r25;
        java.lang.StringBuilder $r7, $r8, $r11, $r14, $r15, $r16, $r19, $r20, $r23, $r26, $r27, $r28, $r29;
        java.lang.String $r10, $r12, $r17, $r22, $r24, $r30;

        r0 := @parameter0: android.security.keystore.KeyGenParameterSpec;

        $i0 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: int getKeySize()>();

        if $i0 == 256 goto label1;

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid key size, want 256 bits got ");

        $i4 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: int getKeySize()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r25;

     label1:
        $r1 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getBlockModes()>();

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "GCM";

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r1, $r2);

        if $z0 != 0 goto label2;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid block mode, want GCM got ");

        $r21 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getBlockModes()>();

        $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r21);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label2:
        $i1 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: int getPurposes()>();

        if $i1 == 3 goto label3;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid purposes mode, want PURPOSE_ENCRYPT | PURPOSE_DECRYPT got ");

        $i3 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: int getPurposes()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label3:
        $r3 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getEncryptionPaddings()>();

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "NoPadding";

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        if $z1 != 0 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid padding mode, want NoPadding got ");

        $r9 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getEncryptionPaddings()>();

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label4:
        $z2 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: boolean isUserAuthenticationRequired()>();

        if $z2 == 0 goto label5;

        $i2 = virtualinvoke r0.<android.security.keystore.KeyGenParameterSpec: int getUserAuthenticationValidityDurationSeconds()>();

        if $i2 >= 1 goto label5;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("per-operation authentication is not supported (UserAuthenticationValidityDurationSeconds must be >0)");

        throw $r5;

     label5:
        return;
    }

    private static void generateKey(android.security.keystore.KeyGenParameterSpec) throws java.security.GeneralSecurityException
    {
        android.security.keystore.KeyGenParameterSpec r0;
        javax.crypto.KeyGenerator r1;

        r0 := @parameter0: android.security.keystore.KeyGenParameterSpec;

        r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)>("AES", "AndroidKeyStore");

        virtualinvoke r1.<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec)>(r0);

        virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        return;
    }

    private static boolean keyExists(java.lang.String) throws java.security.GeneralSecurityException, java.io.IOException
    {
        java.lang.String r0;
        java.security.KeyStore r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r1.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $z0 = virtualinvoke r1.<java.security.KeyStore: boolean containsAlias(java.lang.String)>(r0);

        return $z0;
    }

    static void <clinit>()
    {
        android.security.keystore.KeyGenParameterSpec $r0;

        $r0 = staticinvoke <androidx.security.crypto.MasterKeys: android.security.keystore.KeyGenParameterSpec createAES256GCMKeyGenParameterSpec(java.lang.String)>("_androidx_security_master_key_");

        <androidx.security.crypto.MasterKeys: android.security.keystore.KeyGenParameterSpec AES256_GCM_SPEC> = $r0;

        return;
    }

