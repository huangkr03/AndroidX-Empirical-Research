androidx.benchmark.macro.FrameTimingMetric
    public void <init>()
    {
        androidx.benchmark.macro.FrameTimingMetric r0;

        r0 := @this: androidx.benchmark.macro.FrameTimingMetric;

        specialinvoke r0.<androidx.benchmark.macro.Metric: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        return;
    }

    public void configure$benchmark_macro_release(java.lang.String)
    {
        androidx.benchmark.macro.FrameTimingMetric r0;
        java.lang.String r1;

        r0 := @this: androidx.benchmark.macro.FrameTimingMetric;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        return;
    }

    public void start$benchmark_macro_release()
    {
        androidx.benchmark.macro.FrameTimingMetric r0;

        r0 := @this: androidx.benchmark.macro.FrameTimingMetric;

        return;
    }

    public void stop$benchmark_macro_release()
    {
        androidx.benchmark.macro.FrameTimingMetric r0;

        r0 := @this: androidx.benchmark.macro.FrameTimingMetric;

        return;
    }

    public androidx.benchmark.macro.IterationResult getMetrics$benchmark_macro_release(androidx.benchmark.macro.Metric$CaptureInfo, java.lang.String)
    {
        androidx.benchmark.macro.FrameTimingMetric r0;
        androidx.benchmark.macro.Metric$CaptureInfo r1;
        java.lang.String r2, r4, $r13, $r50;
        java.util.Map r3, $r21, $r37, $r42, r43, r44, r49, r52, r55, r56, r62;
        java.lang.Iterable $r5, r45, r57;
        java.util.Collection r6, r9;
        java.util.Iterator r7, r39, r46, r58;
        java.lang.Object r8, r10, $r22, $r27, $r30, $r31, $r33, $r34, r47, r53, r59;
        long l0;
        java.util.List r11;
        androidx.benchmark.macro.perfetto.FrameTimingQuery $r12;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.LinkedHashMap $r14, $r16, $r18, r38;
        java.util.Set $r15, $r17, $r19;
        boolean $z3, $z4, $z5, $z8, $z10, z12, z17, z19;
        androidx.benchmark.macro.IterationResult $r20;
        java.util.ArrayList $r23;
        java.lang.Number $r25;
        double $d0;
        java.lang.Double $r26;
        androidx.benchmark.macro.perfetto.FrameTimingQuery$SubMetric $r28, $r32, $r36, r41;
        java.util.Map$Entry r40, r48, r51, r60, r61;

        r0 := @this: androidx.benchmark.macro.FrameTimingMetric;

        r1 := @parameter0: androidx.benchmark.macro.Metric$CaptureInfo;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "captureInfo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "tracePath");

        $r12 = <androidx.benchmark.macro.perfetto.FrameTimingQuery: androidx.benchmark.macro.perfetto.FrameTimingQuery INSTANCE>;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        $r13 = virtualinvoke r1.<androidx.benchmark.macro.Metric$CaptureInfo: java.lang.String getTargetPackageName()>();

        $r37 = virtualinvoke $r12.<androidx.benchmark.macro.perfetto.FrameTimingQuery: java.util.Map getFrameSubMetrics(java.lang.String,int,java.lang.String)>(r2, $i1, $r13);

        $r14 = new java.util.LinkedHashMap;

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>();

        r38 = $r14;

        $r15 = interfaceinvoke $r37.<java.util.Map: java.util.Set entrySet()>();

        r39 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z8 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label05;

        $r30 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.util.Map$Entry) $r30;

        $r31 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getKey()>();

        r41 = (androidx.benchmark.macro.perfetto.FrameTimingQuery$SubMetric) $r31;

        $r32 = <androidx.benchmark.macro.perfetto.FrameTimingQuery$SubMetric: androidx.benchmark.macro.perfetto.FrameTimingQuery$SubMetric FrameDurationCpuNs>;

        if r41 == $r32 goto label02;

        $r36 = <androidx.benchmark.macro.perfetto.FrameTimingQuery$SubMetric: androidx.benchmark.macro.perfetto.FrameTimingQuery$SubMetric FrameOverrunNs>;

        if r41 != $r36 goto label03;

     label02:
        $z10 = 1;

        goto label04;

     label03:
        $z10 = 0;

     label04:
        if $z10 == 0 goto label01;

        $r33 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r34 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r38.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r34);

        goto label01;

     label05:
        $r42 = (java.util.Map) r38;

        r43 = $r42;

        $r16 = new java.util.LinkedHashMap;

        $i2 = interfaceinvoke $r42.<java.util.Map: int size()>();

        $i3 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i2);

        specialinvoke $r16.<java.util.LinkedHashMap: void <init>(int)>($i3);

        r44 = (java.util.Map) $r16;

        z12 = 0;

        $r17 = interfaceinvoke r43.<java.util.Map: java.util.Set entrySet()>();

        r45 = (java.lang.Iterable) $r17;

        r46 = interfaceinvoke r45.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        r47 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r48 = (java.util.Map$Entry) r47;

        r49 = r44;

        $r27 = interfaceinvoke r48.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r28 = <androidx.benchmark.macro.perfetto.FrameTimingQuery$SubMetric: androidx.benchmark.macro.perfetto.FrameTimingQuery$SubMetric FrameDurationCpuNs>;

        if $r27 != $r28 goto label07;

        $r50 = "frameDurationCpuMs";

        goto label08;

     label07:
        $r50 = "frameOverrunMs";

     label08:
        r51 = (java.util.Map$Entry) r47;

        r4 = $r50;

        r52 = r49;

        r53 = interfaceinvoke r51.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r52.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r53);

        goto label06;

     label09:
        r55 = r44;

        $r18 = new java.util.LinkedHashMap;

        $i4 = interfaceinvoke r44.<java.util.Map: int size()>();

        $i5 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i4);

        specialinvoke $r18.<java.util.LinkedHashMap: void <init>(int)>($i5);

        r56 = (java.util.Map) $r18;

        z17 = 0;

        $r19 = interfaceinvoke r55.<java.util.Map: java.util.Set entrySet()>();

        r57 = (java.lang.Iterable) $r19;

        r58 = interfaceinvoke r57.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label13;

        r59 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r60 = (java.util.Map$Entry) r59;

        z19 = 0;

        r61 = (java.util.Map$Entry) r59;

        r10 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getKey()>();

        r62 = r56;

        $r22 = interfaceinvoke r61.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = (java.lang.Iterable) $r22;

        $r23 = new java.util.ArrayList;

        $i6 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r5, 10);

        specialinvoke $r23.<java.util.ArrayList: void <init>(int)>($i6);

        r6 = (java.util.Collection) $r23;

        r7 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label11:
        $z5 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label12;

        r8 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r25 = (java.lang.Number) r8;

        l0 = virtualinvoke $r25.<java.lang.Number: long longValue()>();

        r9 = r6;

        $d0 = staticinvoke <androidx.benchmark.macro.MetricKt: double access$nsToDoubleMs(long)>(l0);

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke r9.<java.util.Collection: boolean add(java.lang.Object)>($r26);

        goto label11;

     label12:
        r11 = (java.util.List) r6;

        interfaceinvoke r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r11);

        goto label10;

     label13:
        r3 = r56;

        $r20 = new androidx.benchmark.macro.IterationResult;

        $r21 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        specialinvoke $r20.<androidx.benchmark.macro.IterationResult: void <init>(java.util.Map,java.util.Map,kotlin.ranges.LongRange)>($r21, r3, null);

        return $r20;
    }

