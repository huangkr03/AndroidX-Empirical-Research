androidx.room.SQLiteCopyOpenHelperFactory
<androidx.room.SQLiteCopyOpenHelperFactory: java.lang.String mCopyFromAssetPath>
<androidx.room.SQLiteCopyOpenHelperFactory: java.io.File mCopyFromFile>
<androidx.room.SQLiteCopyOpenHelperFactory: java.util.concurrent.Callable mCopyFromInputStream>
<androidx.room.SQLiteCopyOpenHelperFactory: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mDelegate>
    public void <init>(java.lang.String, java.io.File, java.util.concurrent.Callable, androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)
    {
        androidx.room.SQLiteCopyOpenHelperFactory r0;
        java.lang.String r1;
        java.io.File r2;
        java.util.concurrent.Callable r3;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory r4;

        r0 := @this: androidx.room.SQLiteCopyOpenHelperFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.util.concurrent.Callable;

        r4 := @parameter3: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "mDelegate");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.room.SQLiteCopyOpenHelperFactory: java.lang.String mCopyFromAssetPath> = r1;

        r0.<androidx.room.SQLiteCopyOpenHelperFactory: java.io.File mCopyFromFile> = r2;

        r0.<androidx.room.SQLiteCopyOpenHelperFactory: java.util.concurrent.Callable mCopyFromInputStream> = r3;

        r0.<androidx.room.SQLiteCopyOpenHelperFactory: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mDelegate> = r4;

        return;
    }

    public androidx.sqlite.db.SupportSQLiteOpenHelper create(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)
    {
        androidx.room.SQLiteCopyOpenHelperFactory r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration r1;
        androidx.room.SQLiteCopyOpenHelper $r2;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r3;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory $r4;
        android.content.Context $r5;
        java.lang.String $r6;
        java.io.File $r7;
        java.util.concurrent.Callable $r8;
        int $i0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r9, $r10;

        r0 := @this: androidx.room.SQLiteCopyOpenHelperFactory;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "configuration");

        $r2 = new androidx.room.SQLiteCopyOpenHelper;

        $r5 = r1.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: android.content.Context context>;

        $r6 = r0.<androidx.room.SQLiteCopyOpenHelperFactory: java.lang.String mCopyFromAssetPath>;

        $r7 = r0.<androidx.room.SQLiteCopyOpenHelperFactory: java.io.File mCopyFromFile>;

        $r8 = r0.<androidx.room.SQLiteCopyOpenHelperFactory: java.util.concurrent.Callable mCopyFromInputStream>;

        $r3 = r1.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        $i0 = $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Callback: int version>;

        $r4 = r0.<androidx.room.SQLiteCopyOpenHelperFactory: androidx.sqlite.db.SupportSQLiteOpenHelper$Factory mDelegate>;

        $r9 = interfaceinvoke $r4.<androidx.sqlite.db.SupportSQLiteOpenHelper$Factory: androidx.sqlite.db.SupportSQLiteOpenHelper create(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)>(r1);

        specialinvoke $r2.<androidx.room.SQLiteCopyOpenHelper: void <init>(android.content.Context,java.lang.String,java.io.File,java.util.concurrent.Callable,int,androidx.sqlite.db.SupportSQLiteOpenHelper)>($r5, $r6, $r7, $r8, $i0, $r9);

        $r10 = (androidx.sqlite.db.SupportSQLiteOpenHelper) $r2;

        return $r10;
    }

