androidx.profileinstaller.ProfileInstaller
<androidx.profileinstaller.ProfileInstaller: java.lang.String TAG>
<androidx.profileinstaller.ProfileInstaller: java.lang.String PROFILE_BASE_DIR>
<androidx.profileinstaller.ProfileInstaller: java.lang.String PROFILE_FILE>
<androidx.profileinstaller.ProfileInstaller: java.lang.String PROFILE_SOURCE_LOCATION>
<androidx.profileinstaller.ProfileInstaller: java.lang.String PROFILE_META_LOCATION>
<androidx.profileinstaller.ProfileInstaller: java.lang.String PROFILE_INSTALLER_SKIP_FILE_NAME>
<androidx.profileinstaller.ProfileInstaller: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback EMPTY_DIAGNOSTICS>
<androidx.profileinstaller.ProfileInstaller: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback LOG_DIAGNOSTICS>
<androidx.profileinstaller.ProfileInstaller: int DIAGNOSTIC_CURRENT_PROFILE_EXISTS>
<androidx.profileinstaller.ProfileInstaller: int DIAGNOSTIC_CURRENT_PROFILE_DOES_NOT_EXIST>
<androidx.profileinstaller.ProfileInstaller: int DIAGNOSTIC_REF_PROFILE_EXISTS>
<androidx.profileinstaller.ProfileInstaller: int DIAGNOSTIC_REF_PROFILE_DOES_NOT_EXIST>
<androidx.profileinstaller.ProfileInstaller: int RESULT_INSTALL_SUCCESS>
<androidx.profileinstaller.ProfileInstaller: int RESULT_ALREADY_INSTALLED>
<androidx.profileinstaller.ProfileInstaller: int RESULT_UNSUPPORTED_ART_VERSION>
<androidx.profileinstaller.ProfileInstaller: int RESULT_NOT_WRITABLE>
<androidx.profileinstaller.ProfileInstaller: int RESULT_DESIRED_FORMAT_UNSUPPORTED>
<androidx.profileinstaller.ProfileInstaller: int RESULT_BASELINE_PROFILE_NOT_FOUND>
<androidx.profileinstaller.ProfileInstaller: int RESULT_IO_EXCEPTION>
<androidx.profileinstaller.ProfileInstaller: int RESULT_PARSE_EXCEPTION>
<androidx.profileinstaller.ProfileInstaller: int RESULT_META_FILE_REQUIRED_BUT_NOT_FOUND>
<androidx.profileinstaller.ProfileInstaller: int RESULT_INSTALL_SKIP_FILE_SUCCESS>
<androidx.profileinstaller.ProfileInstaller: int RESULT_DELETE_SKIP_FILE_SUCCESS>
    private void <init>()
    {
        androidx.profileinstaller.ProfileInstaller r0;

        r0 := @this: androidx.profileinstaller.ProfileInstaller;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void result(java.util.concurrent.Executor, androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback, int, java.lang.Object)
    {
        java.util.concurrent.Executor r0;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r1;
        int i0;
        java.lang.Object r2;
        java.lang.Runnable $r3;

        r0 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>(r1, i0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.profileinstaller.ProfileInstaller: void lambda$result$0(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    static void diagnostic(java.util.concurrent.Executor, androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback, int, java.lang.Object)
    {
        java.util.concurrent.Executor r0;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r1;
        int i0;
        java.lang.Object r2;
        java.lang.Runnable $r3;

        r0 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>(r1, i0, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.profileinstaller.ProfileInstaller: void lambda$diagnostic$1(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    static boolean hasAlreadyWrittenProfileForThisInstall(android.content.pm.PackageInfo, java.io.File, androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)
    {
        android.content.pm.PackageInfo r0;
        java.io.File r1, r3, $r6;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r2;
        long l0, $l1;
        java.lang.Throwable r4, r5, $r9, $r10, $r11, r13;
        boolean $z0, $z1, z2;
        java.io.DataInputStream $r7, r12;
        java.io.FileInputStream $r8;
        byte $b2;

        r0 := @parameter0: android.content.pm.PackageInfo;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "profileinstaller_profileWrittenFor_lastUpdateTime.dat");

        r3 = $r6;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r7 = new java.io.DataInputStream;

        $r8 = new java.io.FileInputStream;

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>(r3);

        specialinvoke $r7.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r8);

        r12 = $r7;

     label02:
        l0 = virtualinvoke r12.<java.io.DataInputStream: long readLong()>();

     label03:
        virtualinvoke r12.<java.io.DataInputStream: void close()>();

        goto label09;

     label04:
        $r11 := @caughtexception;

        r4 = $r11;

     label05:
        virtualinvoke r12.<java.io.DataInputStream: void close()>();

     label06:
        goto label08;

     label07:
        $r9 := @caughtexception;

        r5 = $r9;

        virtualinvoke r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r5);

     label08:
        throw r4;

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

        r13 = $r10;

        return 0;

     label11:
        $l1 = r0.<android.content.pm.PackageInfo: long lastUpdateTime>;

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label12;

        $z1 = 1;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        z2 = $z1;

        if z2 == 0 goto label14;

        interfaceinvoke r2.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(2, null);

     label14:
        return z2;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.io.IOException from label01 to label09 with label10;
    }

    static void noteProfileWrittenFor(android.content.pm.PackageInfo, java.io.File)
    {
        android.content.pm.PackageInfo r0;
        java.io.File r1, r2, $r5;
        java.lang.Throwable r3, r4, $r8, $r9, $r10, r12;
        java.io.DataOutputStream $r6, r11;
        java.io.FileOutputStream $r7;
        long $l0;

        r0 := @parameter0: android.content.pm.PackageInfo;

        r1 := @parameter1: java.io.File;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "profileinstaller_profileWrittenFor_lastUpdateTime.dat");

        r2 = $r5;

     label01:
        $r6 = new java.io.DataOutputStream;

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r6.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r7);

        r11 = $r6;

     label02:
        $l0 = r0.<android.content.pm.PackageInfo: long lastUpdateTime>;

        virtualinvoke r11.<java.io.DataOutputStream: void writeLong(long)>($l0);

     label03:
        virtualinvoke r11.<java.io.DataOutputStream: void close()>();

        goto label09;

     label04:
        $r8 := @caughtexception;

        r3 = $r8;

     label05:
        virtualinvoke r11.<java.io.DataOutputStream: void close()>();

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        r4 = $r10;

        virtualinvoke r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r4);

     label08:
        throw r3;

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        r12 = $r9;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.io.IOException from label01 to label09 with label10;
    }

    static boolean deleteProfileWrittenFor(java.io.File)
    {
        java.io.File r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "profileinstaller_profileWrittenFor_lastUpdateTime.dat");

        r1 = $r2;

        $z0 = virtualinvoke r1.<java.io.File: boolean delete()>();

        return $z0;
    }

    private static void transcodeAndWrite(android.content.res.AssetManager, java.lang.String, android.content.pm.PackageInfo, java.io.File, java.lang.String, java.util.concurrent.Executor, androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)
    {
        android.content.res.AssetManager r0;
        java.lang.String r1, r4;
        android.content.pm.PackageInfo r2;
        java.io.File r3, r7, $r9, $r10;
        java.util.concurrent.Executor r5;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r6;
        androidx.profileinstaller.DeviceProfileWriter r8, $r11, $r12, $r13;
        boolean z0, $z1;
        int $i0;

        r0 := @parameter0: android.content.res.AssetManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.pm.PackageInfo;

        r3 := @parameter3: java.io.File;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.util.concurrent.Executor;

        r6 := @parameter6: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 19 goto label1;

        staticinvoke <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>(r5, r6, 3, null);

        return;

     label1:
        $r9 = new java.io.File;

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String,java.lang.String)>("/data/misc/profiles/cur/0", r1);

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "primary.prof");

        r7 = $r9;

        $r11 = new androidx.profileinstaller.DeviceProfileWriter;

        specialinvoke $r11.<androidx.profileinstaller.DeviceProfileWriter: void <init>(android.content.res.AssetManager,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,java.lang.String,java.lang.String,java.lang.String,java.io.File)>(r0, r5, r6, r4, "dexopt/baseline.prof", "dexopt/baseline.profm", r7);

        r8 = $r11;

        $z1 = virtualinvoke r8.<androidx.profileinstaller.DeviceProfileWriter: boolean deviceAllowsProfileInstallerAotWrites()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        $r12 = virtualinvoke r8.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter read()>();

        $r13 = virtualinvoke $r12.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()>();

        z0 = virtualinvoke $r13.<androidx.profileinstaller.DeviceProfileWriter: boolean write()>();

        if z0 == 0 goto label3;

        staticinvoke <androidx.profileinstaller.ProfileInstaller: void noteProfileWrittenFor(android.content.pm.PackageInfo,java.io.File)>(r2, r3);

     label3:
        return;
    }

    public static void writeProfile(android.content.Context)
    {
        android.content.Context r0;
        java.util.concurrent.Executor $r1;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = dynamicinvoke "execute" <java.util.concurrent.Executor ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(java.lang.Runnable), methodhandle: "REF_INVOKE_INTERFACE" <java.lang.Runnable: void run()>, methodtype: void __METHODTYPE__(java.lang.Runnable));

        $r2 = <androidx.profileinstaller.ProfileInstaller: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback EMPTY_DIAGNOSTICS>;

        staticinvoke <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>(r0, $r1, $r2);

        return;
    }

    public static void writeProfile(android.content.Context, java.util.concurrent.Executor, androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)
    {
        android.content.Context r0;
        java.util.concurrent.Executor r1;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        staticinvoke <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)>(r0, r1, r2, 0);

        return;
    }

    static void writeProfile(android.content.Context, java.util.concurrent.Executor, androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback, boolean)
    {
        android.content.Context r0, r3;
        java.util.concurrent.Executor r1;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r2;
        boolean z0, $z1;
        java.lang.String r4, r7, $r11, $r14, $r16, $r19, $r21;
        android.content.pm.ApplicationInfo r5;
        android.content.res.AssetManager r6;
        android.content.pm.PackageManager r8;
        android.content.pm.PackageInfo r9;
        java.io.File $r10, r24;
        java.lang.StringBuilder $r12, $r13, $r15, $r17, $r18, $r20;
        java.lang.Throwable $r22, r23;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        z0 := @parameter3: boolean;

        r3 = virtualinvoke r0.<android.content.Context: android.content.Context getApplicationContext()>();

        r4 = virtualinvoke r3.<android.content.Context: java.lang.String getPackageName()>();

        r5 = virtualinvoke r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        r6 = virtualinvoke r3.<android.content.Context: android.content.res.AssetManager getAssets()>();

        $r10 = new java.io.File;

        $r11 = r5.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11);

        r7 = virtualinvoke $r10.<java.io.File: java.lang.String getName()>();

        r8 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        r9 = virtualinvoke r8.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r4, 0);

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

        r23 = $r22;

        interfaceinvoke r2.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(7, r23);

        return;

     label4:
        r24 = virtualinvoke r0.<android.content.Context: java.io.File getFilesDir()>();

        if z0 != 0 goto label5;

        $z1 = staticinvoke <androidx.profileinstaller.ProfileInstaller: boolean hasAlreadyWrittenProfileForThisInstall(android.content.pm.PackageInfo,java.io.File,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>(r9, r24, r2);

        if $z1 != 0 goto label6;

     label5:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installing profile for ");

        $r14 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ProfileInstaller", $r16);

        staticinvoke <androidx.profileinstaller.ProfileInstaller: void transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>(r6, r4, r9, r24, r7, r1, r2);

        goto label7;

     label6:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping profile installation for ");

        $r19 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ProfileInstaller", $r21);

     label7:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    static void writeSkipFile(android.content.Context, java.util.concurrent.Executor, androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)
    {
        android.content.Context r0, r3;
        java.util.concurrent.Executor r1;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r2;
        java.lang.String r4;
        android.content.pm.PackageManager r5;
        android.content.pm.PackageInfo r6;
        java.lang.Throwable $r7, r8;
        java.io.File r9;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        r3 = virtualinvoke r0.<android.content.Context: android.content.Context getApplicationContext()>();

        r4 = virtualinvoke r3.<android.content.Context: java.lang.String getPackageName()>();

        r5 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        r6 = virtualinvoke r5.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r4, 0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r8 = $r7;

        staticinvoke <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>(r1, r2, 7, r8);

        return;

     label4:
        r9 = virtualinvoke r0.<android.content.Context: java.io.File getFilesDir()>();

        staticinvoke <androidx.profileinstaller.ProfileInstaller: void noteProfileWrittenFor(android.content.pm.PackageInfo,java.io.File)>(r6, r9);

        staticinvoke <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>(r1, r2, 10, null);

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    static void deleteSkipFile(android.content.Context, java.util.concurrent.Executor, androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)
    {
        android.content.Context r0;
        java.util.concurrent.Executor r1;
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r2;
        java.io.File r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        r3 = virtualinvoke r0.<android.content.Context: java.io.File getFilesDir()>();

        staticinvoke <androidx.profileinstaller.ProfileInstaller: boolean deleteProfileWrittenFor(java.io.File)>(r3);

        staticinvoke <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>(r1, r2, 11, null);

        return;
    }

    private static void lambda$diagnostic$1(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback, int, java.lang.Object)
    {
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r0;
        int i0;
        java.lang.Object r1;

        r0 := @parameter0: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        interfaceinvoke r0.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onDiagnosticReceived(int,java.lang.Object)>(i0, r1);

        return;
    }

    private static void lambda$result$0(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback, int, java.lang.Object)
    {
        androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback r0;
        int i0;
        java.lang.Object r1;

        r0 := @parameter0: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        interfaceinvoke r0.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(i0, r1);

        return;
    }

    static void <clinit>()
    {
        androidx.profileinstaller.ProfileInstaller$1 $r0;
        androidx.profileinstaller.ProfileInstaller$2 $r1;

        $r0 = new androidx.profileinstaller.ProfileInstaller$1;

        specialinvoke $r0.<androidx.profileinstaller.ProfileInstaller$1: void <init>()>();

        <androidx.profileinstaller.ProfileInstaller: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback EMPTY_DIAGNOSTICS> = $r0;

        $r1 = new androidx.profileinstaller.ProfileInstaller$2;

        specialinvoke $r1.<androidx.profileinstaller.ProfileInstaller$2: void <init>()>();

        <androidx.profileinstaller.ProfileInstaller: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback LOG_DIAGNOSTICS> = $r1;

        return;
    }

androidx.profileinstaller.ProfileInstaller$1
    void <init>()
    {
        androidx.profileinstaller.ProfileInstaller$1 r0;

        r0 := @this: androidx.profileinstaller.ProfileInstaller$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onDiagnosticReceived(int, java.lang.Object)
    {
        androidx.profileinstaller.ProfileInstaller$1 r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: androidx.profileinstaller.ProfileInstaller$1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        return;
    }

    public void onResultReceived(int, java.lang.Object)
    {
        androidx.profileinstaller.ProfileInstaller$1 r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: androidx.profileinstaller.ProfileInstaller$1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        return;
    }

androidx.profileinstaller.ProfileInstaller$2
<androidx.profileinstaller.ProfileInstaller$2: java.lang.String TAG>
    void <init>()
    {
        androidx.profileinstaller.ProfileInstaller$2 r0;

        r0 := @this: androidx.profileinstaller.ProfileInstaller$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onDiagnosticReceived(int, java.lang.Object)
    {
        androidx.profileinstaller.ProfileInstaller$2 r0;
        int i0;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: androidx.profileinstaller.ProfileInstaller$2;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 = "";

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        r2 = "DIAGNOSTIC_CURRENT_PROFILE_EXISTS";

        goto label5;

     label2:
        r2 = "DIAGNOSTIC_CURRENT_PROFILE_DOES_NOT_EXIST";

        goto label5;

     label3:
        r2 = "DIAGNOSTIC_REF_PROFILE_EXISTS";

        goto label5;

     label4:
        r2 = "DIAGNOSTIC_REF_PROFILE_DOES_NOT_EXIST";

     label5:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ProfileInstaller", r2);

        return;
    }

    public void onResultReceived(int, java.lang.Object)
    {
        androidx.profileinstaller.ProfileInstaller$2 r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: androidx.profileinstaller.ProfileInstaller$2;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r3 = "";

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label11;
            case 10: goto label09;
            case 11: goto label10;
            default: goto label11;
        };

     label01:
        r3 = "RESULT_INSTALL_SUCCESS";

        goto label11;

     label02:
        r3 = "RESULT_ALREADY_INSTALLED";

        goto label11;

     label03:
        r3 = "RESULT_UNSUPPORTED_ART_VERSION";

        goto label11;

     label04:
        r3 = "RESULT_NOT_WRITABLE";

        goto label11;

     label05:
        r3 = "RESULT_DESIRED_FORMAT_UNSUPPORTED";

        goto label11;

     label06:
        r3 = "RESULT_BASELINE_PROFILE_NOT_FOUND";

        goto label11;

     label07:
        r3 = "RESULT_IO_EXCEPTION";

        goto label11;

     label08:
        r3 = "RESULT_PARSE_EXCEPTION";

        goto label11;

     label09:
        r3 = "RESULT_INSTALL_SKIP_FILE_SUCCESS";

        goto label11;

     label10:
        r3 = "RESULT_DELETE_SKIP_FILE_SUCCESS";

     label11:
        tableswitch(i0)
        {
            case 6: goto label12;
            case 7: goto label12;
            case 8: goto label12;
            default: goto label13;
        };

     label12:
        $r2 = (java.lang.Throwable) r1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ProfileInstaller", r3, $r2);

        goto label14;

     label13:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ProfileInstaller", r3);

     label14:
        return;
    }

androidx.profileinstaller.ProfileInstaller$DiagnosticCode
androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback
<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onDiagnosticReceived(int,java.lang.Object)>
<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>
androidx.profileinstaller.ProfileInstaller$ResultCode
