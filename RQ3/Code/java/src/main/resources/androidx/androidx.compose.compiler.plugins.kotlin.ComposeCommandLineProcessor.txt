androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor
<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.lang.String pluginId>
<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.util.List pluginOptions>
<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.lang.String PLUGIN_ID>
<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption LIVE_LITERALS_ENABLED_OPTION>
<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption SOURCE_INFORMATION_ENABLED_OPTION>
<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion Companion>
    public java.lang.String getPluginId()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor r0;
        java.lang.String $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.lang.String pluginId>;

        return $r1;
    }

    public java.util.List getPluginOptions()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor r0;
        java.util.List $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor;

        $r1 = r0.<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.util.List pluginOptions>;

        return $r1;
    }

    public volatile java.util.Collection getPluginOptions()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor r0;
        java.util.List $r1;
        java.util.Collection $r2;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor;

        $r1 = virtualinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.util.List getPluginOptions()>();

        $r2 = (java.util.Collection) $r1;

        return $r2;
    }

    public void processOption(org.jetbrains.kotlin.compiler.plugin.AbstractCliOption, java.lang.String, org.jetbrains.kotlin.config.CompilerConfiguration)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor r0;
        org.jetbrains.kotlin.compiler.plugin.AbstractCliOption r1, r4;
        java.lang.String r2, $r10, $r12;
        org.jetbrains.kotlin.config.CompilerConfiguration r3;
        org.jetbrains.kotlin.compiler.plugin.CliOption $r5, $r6;
        boolean $z0, $z1, $z2, $z3;
        org.jetbrains.kotlin.compiler.plugin.CliOptionProcessingException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.Throwable $r13;
        androidx.compose.compiler.plugins.kotlin.ComposeConfiguration $r14, $r17;
        org.jetbrains.kotlin.config.CompilerConfigurationKey $r15, $r18;
        java.lang.Boolean $r16, $r19;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor;

        r1 := @parameter0: org.jetbrains.kotlin.compiler.plugin.AbstractCliOption;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.jetbrains.kotlin.config.CompilerConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "option");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "configuration");

        r4 = r1;

        $r5 = <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption LIVE_LITERALS_ENABLED_OPTION>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r4, $r5);

        if $z0 == 0 goto label1;

        $r17 = <androidx.compose.compiler.plugins.kotlin.ComposeConfiguration: androidx.compose.compiler.plugins.kotlin.ComposeConfiguration INSTANCE>;

        $r18 = virtualinvoke $r17.<androidx.compose.compiler.plugins.kotlin.ComposeConfiguration: org.jetbrains.kotlin.config.CompilerConfigurationKey getLIVE_LITERALS_ENABLED_KEY()>();

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, "true");

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        virtualinvoke r3.<org.jetbrains.kotlin.config.CompilerConfiguration: void put(org.jetbrains.kotlin.config.CompilerConfigurationKey,java.lang.Object)>($r18, $r19);

        goto label3;

     label1:
        $r6 = <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption SOURCE_INFORMATION_ENABLED_OPTION>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r4, $r6);

        if $z1 == 0 goto label2;

        $r14 = <androidx.compose.compiler.plugins.kotlin.ComposeConfiguration: androidx.compose.compiler.plugins.kotlin.ComposeConfiguration INSTANCE>;

        $r15 = virtualinvoke $r14.<androidx.compose.compiler.plugins.kotlin.ComposeConfiguration: org.jetbrains.kotlin.config.CompilerConfigurationKey getSOURCE_INFORMATION_ENABLED_KEY()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r2, "true");

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r3.<org.jetbrains.kotlin.config.CompilerConfiguration: void put(org.jetbrains.kotlin.config.CompilerConfigurationKey,java.lang.Object)>($r15, $r16);

        goto label3;

     label2:
        $r7 = new org.jetbrains.kotlin.compiler.plugin.CliOptionProcessingException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown option: ");

        $r10 = interfaceinvoke r1.<org.jetbrains.kotlin.compiler.plugin.AbstractCliOption: java.lang.String getOptionName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.jetbrains.kotlin.compiler.plugin.CliOptionProcessingException: void <init>(java.lang.String,java.lang.Throwable,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r12, null, 2, null);

        $r13 = (java.lang.Throwable) $r7;

        throw $r13;

     label3:
        return;
    }

    public void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor r0;
        java.lang.String $r1;
        org.jetbrains.kotlin.compiler.plugin.CliOption[] $r2;
        org.jetbrains.kotlin.compiler.plugin.CliOption $r3, $r4;
        java.util.List $r5;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.lang.String PLUGIN_ID>;

        r0.<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.lang.String pluginId> = $r1;

        $r2 = newarray (org.jetbrains.kotlin.compiler.plugin.CliOption)[2];

        $r3 = <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption LIVE_LITERALS_ENABLED_OPTION>;

        $r2[0] = $r3;

        $r4 = <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption SOURCE_INFORMATION_ENABLED_OPTION>;

        $r2[1] = $r4;

        $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r2);

        r0.<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.util.List pluginOptions> = $r5;

        return;
    }

    static void <clinit>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion $r0;
        org.jetbrains.kotlin.compiler.plugin.CliOption $r1, $r2;

        $r0 = new androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion;

        specialinvoke $r0.<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion Companion> = $r0;

        <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.lang.String PLUGIN_ID> = "androidx.compose.compiler.plugins.kotlin";

        $r1 = new org.jetbrains.kotlin.compiler.plugin.CliOption;

        specialinvoke $r1.<org.jetbrains.kotlin.compiler.plugin.CliOption: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>("liveLiterals", "<true|false>", "Enable Live Literals code generation", 0, 0);

        <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption LIVE_LITERALS_ENABLED_OPTION> = $r1;

        $r2 = new org.jetbrains.kotlin.compiler.plugin.CliOption;

        specialinvoke $r2.<org.jetbrains.kotlin.compiler.plugin.CliOption: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>("sourceInformation", "<true|false>", "Include source information in generated code", 0, 0);

        <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption SOURCE_INFORMATION_ENABLED_OPTION> = $r2;

        return;
    }

    public void processOption(org.jetbrains.kotlin.compiler.plugin.CliOption, java.lang.String, org.jetbrains.kotlin.config.CompilerConfiguration)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor r0;
        org.jetbrains.kotlin.compiler.plugin.CliOption r1;
        java.lang.String r2;
        org.jetbrains.kotlin.config.CompilerConfiguration r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor;

        r1 := @parameter0: org.jetbrains.kotlin.compiler.plugin.CliOption;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.jetbrains.kotlin.config.CompilerConfiguration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "option");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "configuration");

        staticinvoke <org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor$DefaultImpls: void processOption(org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor,org.jetbrains.kotlin.compiler.plugin.CliOption,java.lang.String,org.jetbrains.kotlin.config.CompilerConfiguration)>(r0, r1, r2, r3);

        return;
    }

    public void appendList(org.jetbrains.kotlin.config.CompilerConfiguration, org.jetbrains.kotlin.config.CompilerConfigurationKey, java.lang.Object)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor r0;
        org.jetbrains.kotlin.config.CompilerConfiguration $r1;
        org.jetbrains.kotlin.config.CompilerConfigurationKey r2;
        java.lang.Object r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor;

        $r1 := @parameter0: org.jetbrains.kotlin.config.CompilerConfiguration;

        r2 := @parameter1: org.jetbrains.kotlin.config.CompilerConfigurationKey;

        r3 := @parameter2: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$appendList");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "option");

        staticinvoke <org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor$DefaultImpls: void appendList(org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor,org.jetbrains.kotlin.config.CompilerConfiguration,org.jetbrains.kotlin.config.CompilerConfigurationKey,java.lang.Object)>(r0, $r1, r2, r3);

        return;
    }

    public void appendList(org.jetbrains.kotlin.config.CompilerConfiguration, org.jetbrains.kotlin.config.CompilerConfigurationKey, java.util.List)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor r0;
        org.jetbrains.kotlin.config.CompilerConfiguration $r1;
        org.jetbrains.kotlin.config.CompilerConfigurationKey r2;
        java.util.List r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor;

        $r1 := @parameter0: org.jetbrains.kotlin.config.CompilerConfiguration;

        r2 := @parameter1: org.jetbrains.kotlin.config.CompilerConfigurationKey;

        r3 := @parameter2: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$appendList");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "option");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "values");

        staticinvoke <org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor$DefaultImpls: void appendList(org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor,org.jetbrains.kotlin.config.CompilerConfiguration,org.jetbrains.kotlin.config.CompilerConfigurationKey,java.util.List)>(r0, $r1, r2, r3);

        return;
    }

    public void applyOptionsFrom(org.jetbrains.kotlin.config.CompilerConfiguration, java.util.Map, java.util.Collection)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor r0;
        org.jetbrains.kotlin.config.CompilerConfiguration $r1;
        java.util.Map r2;
        java.util.Collection r3;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor;

        $r1 := @parameter0: org.jetbrains.kotlin.config.CompilerConfiguration;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$applyOptionsFrom");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "map");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "pluginOptions");

        staticinvoke <org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor$DefaultImpls: void applyOptionsFrom(org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor,org.jetbrains.kotlin.config.CompilerConfiguration,java.util.Map,java.util.Collection)>(r0, $r1, r2, r3);

        return;
    }

    public static final java.lang.String access$getPLUGIN_ID$cp()
    {
        java.lang.String $r0;

        $r0 = <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.lang.String PLUGIN_ID>;

        return $r0;
    }

    public static final org.jetbrains.kotlin.compiler.plugin.CliOption access$getLIVE_LITERALS_ENABLED_OPTION$cp()
    {
        org.jetbrains.kotlin.compiler.plugin.CliOption $r0;

        $r0 = <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption LIVE_LITERALS_ENABLED_OPTION>;

        return $r0;
    }

    public static final org.jetbrains.kotlin.compiler.plugin.CliOption access$getSOURCE_INFORMATION_ENABLED_OPTION$cp()
    {
        org.jetbrains.kotlin.compiler.plugin.CliOption $r0;

        $r0 = <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption SOURCE_INFORMATION_ENABLED_OPTION>;

        return $r0;
    }

androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion
    public final java.lang.String getPLUGIN_ID()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion r0;
        java.lang.String $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion;

        $r1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: java.lang.String access$getPLUGIN_ID$cp()>();

        return $r1;
    }

    public final org.jetbrains.kotlin.compiler.plugin.CliOption getLIVE_LITERALS_ENABLED_OPTION()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion r0;
        org.jetbrains.kotlin.compiler.plugin.CliOption $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion;

        $r1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption access$getLIVE_LITERALS_ENABLED_OPTION$cp()>();

        return $r1;
    }

    public final org.jetbrains.kotlin.compiler.plugin.CliOption getSOURCE_INFORMATION_ENABLED_OPTION()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion r0;
        org.jetbrains.kotlin.compiler.plugin.CliOption $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion;

        $r1 = staticinvoke <androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor: org.jetbrains.kotlin.compiler.plugin.CliOption access$getSOURCE_INFORMATION_ENABLED_OPTION$cp()>();

        return $r1;
    }

    private void <init>()
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion r0;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.compiler.plugins.kotlin.ComposeCommandLineProcessor$Companion: void <init>()>();

        return;
    }

