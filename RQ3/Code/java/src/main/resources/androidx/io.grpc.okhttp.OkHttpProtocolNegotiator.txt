io.grpc.okhttp.OkHttpProtocolNegotiator
<io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform DEFAULT_PLATFORM>
<io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.OkHttpProtocolNegotiator NEGOTIATOR>
<io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger logger>
<io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform platform>
    static volatile java.util.logging.Logger '-$$Nest$sfgetlogger'()
    {
        java.util.logging.Logger r0;

        r0 = <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger logger>;

        return r0;
    }

    static volatile java.lang.String[] '-$$Nest$smprotocolIds'(java.util.List)
    {
        java.lang.String[] $r0;
        java.util.List $r1;

        $r1 := @parameter0: java.util.List;

        $r0 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.lang.String[] protocolIds(java.util.List)>($r1);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        io.grpc.okhttp.internal.Platform $r3;
        java.lang.ClassLoader $r4;
        io.grpc.okhttp.OkHttpProtocolNegotiator $r5;

        $r0 = class "Lio/grpc/okhttp/OkHttpProtocolNegotiator;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger logger> = $r2;

        $r3 = staticinvoke <io.grpc.okhttp.internal.Platform: io.grpc.okhttp.internal.Platform get()>();

        <io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform DEFAULT_PLATFORM> = $r3;

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.OkHttpProtocolNegotiator createNegotiator(java.lang.ClassLoader)>($r4);

        <io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.OkHttpProtocolNegotiator NEGOTIATOR> = $r5;

        return;
    }

    void <init>(io.grpc.okhttp.internal.Platform)
    {
        io.grpc.okhttp.OkHttpProtocolNegotiator $r0;
        java.lang.Object $r1;
        io.grpc.okhttp.internal.Platform $r2;

        $r0 := @this: io.grpc.okhttp.OkHttpProtocolNegotiator;

        $r2 := @parameter0: io.grpc.okhttp.internal.Platform;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "platform");

        $r2 = (io.grpc.okhttp.internal.Platform) $r1;

        $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform platform> = $r2;

        return;
    }

    static io.grpc.okhttp.OkHttpProtocolNegotiator createNegotiator(java.lang.ClassLoader)
    {
        java.lang.ClassLoader $r0;
        boolean $z0;
        java.lang.Throwable $r1, $r4;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r3;
        io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator $r5;
        io.grpc.okhttp.internal.Platform $r6;
        io.grpc.okhttp.OkHttpProtocolNegotiator $r7;

        $r0 := @parameter0: java.lang.ClassLoader;

        $z0 = 1;

     label1:
        virtualinvoke $r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("com.android.org.conscrypt.OpenSSLSocketImpl");

     label2:
        goto label7;

     label3:
        $r1 := @caughtexception;

        $r2 = <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r2.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "io.grpc.okhttp.OkHttpProtocolNegotiator", "createNegotiator", "Unable to find Conscrypt. Skipping", $r1);

     label4:
        virtualinvoke $r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        $r2 = <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r2.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "io.grpc.okhttp.OkHttpProtocolNegotiator", "createNegotiator", "Unable to find any OpenSSLSocketImpl. Skipping", $r4);

        $z0 = 0;

     label7:
        if $z0 == 0 goto label8;

        $r5 = new io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator;

        $r6 = <io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform DEFAULT_PLATFORM>;

        specialinvoke $r5.<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: void <init>(io.grpc.okhttp.internal.Platform)>($r6);

        return $r5;

     label8:
        $r7 = new io.grpc.okhttp.OkHttpProtocolNegotiator;

        $r6 = <io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform DEFAULT_PLATFORM>;

        specialinvoke $r7.<io.grpc.okhttp.OkHttpProtocolNegotiator: void <init>(io.grpc.okhttp.internal.Platform)>($r6);

        return $r7;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
    }

    public static io.grpc.okhttp.OkHttpProtocolNegotiator get()
    {
        io.grpc.okhttp.OkHttpProtocolNegotiator r0;

        r0 = <io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.OkHttpProtocolNegotiator NEGOTIATOR>;

        return r0;
    }

    static boolean isValidHostName(java.lang.String)
    {
        boolean $z0;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("_");

        if $z0 != 0 goto label1;

        staticinvoke <io.grpc.internal.GrpcUtil: java.lang.String checkAuthority(java.lang.String)>($r0);

        return 1;

     label1:
        return 0;
    }

    private static java.lang.String[] protocolIds(java.util.List)
    {
        java.util.ArrayList $r0, r8;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        io.grpc.okhttp.internal.Protocol $r4;
        java.lang.String $r5;
        java.lang.String[] $r6;
        java.lang.Object[] $r7;

        $r1 := @parameter0: java.util.List;

        r8 = new java.util.ArrayList;

        $r0 = r8;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (io.grpc.okhttp.internal.Protocol) $r3;

        $r5 = virtualinvoke $r4.<io.grpc.okhttp.internal.Protocol: java.lang.String toString()>();

        $r1 = (java.util.List) $r0;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        $r6 = newarray (java.lang.String)[0];

        $r1 = (java.util.List) $r0;

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r6 = (java.lang.String[]) $r7;

        return $r6;
    }

    protected void configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        io.grpc.okhttp.OkHttpProtocolNegotiator $r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List $r3;
        io.grpc.okhttp.internal.Platform $r4;

        $r0 := @this: io.grpc.okhttp.OkHttpProtocolNegotiator;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.List;

        $r4 = $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform platform>;

        virtualinvoke $r4.<io.grpc.okhttp.internal.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r1, $r2, $r3);

        return;
    }

    public java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        io.grpc.okhttp.OkHttpProtocolNegotiator $r0;
        io.grpc.okhttp.internal.Platform $r1;
        java.lang.String $r2;
        javax.net.ssl.SSLSocket $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpProtocolNegotiator;

        $r3 := @parameter0: javax.net.ssl.SSLSocket;

        $r1 = $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform platform>;

        $r2 = virtualinvoke $r1.<io.grpc.okhttp.internal.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r3);

        return $r2;
    }

    public java.lang.String negotiate(javax.net.ssl.SSLSocket, java.lang.String, java.util.List) throws java.io.IOException
    {
        io.grpc.okhttp.OkHttpProtocolNegotiator $r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List $r3;
        io.grpc.okhttp.internal.Platform $r4;
        java.lang.StringBuilder $r5, r7;
        java.lang.Throwable $r6;
        java.lang.RuntimeException r8;

        $r0 := @this: io.grpc.okhttp.OkHttpProtocolNegotiator;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.List;

        if $r3 == null goto label1;

        virtualinvoke $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r1, $r2, $r3);

     label1:
        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r2 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r1);

     label2:
        if $r2 == null goto label3;

        $r4 = $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform platform>;

        virtualinvoke $r4.<io.grpc.okhttp.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r1);

        return $r2;

     label3:
        r8 = new java.lang.RuntimeException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        r7 = new java.lang.StringBuilder;

        $r5 = r7;

     label4:
        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TLS ALPN negotiation failed with protocols: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

     label5:
        $r6 = (java.lang.Throwable) r8;

     label6:
        throw $r6;

     label7:
        $r6 := @caughtexception;

        $r4 = $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator: io.grpc.okhttp.internal.Platform platform>;

        virtualinvoke $r4.<io.grpc.okhttp.internal.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r1);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod GET_ALPN_SELECTED_PROTOCOL>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method GET_APPLICATION_PROTOCOL>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method GET_APPLICATION_PROTOCOLS>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod GET_NPN_SELECTED_PROTOCOL>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_ALPN_PROTOCOLS>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SET_APPLICATION_PROTOCOLS>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_HOSTNAME>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_NPN_PROTOCOLS>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SET_SERVER_NAMES>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_USE_SESSION_TICKETS>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Constructor SNI_HOST_NAME>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SSL_SOCKETS_IS_SUPPORTED_SOCKET>
<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SSL_SOCKETS_SET_USE_SESSION_TICKET>
    static void <clinit>()
    {
        io.grpc.okhttp.internal.OptionalMethod $r0;
        java.lang.Class[] $r1;
        java.lang.Class $r2, $r10;
        java.lang.reflect.Constructor $r3, $r24;
        java.lang.reflect.Method $r4, $r5, $r6, $r7, $r8, $r9, $r11;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r25, $r26, $r27, $r28;
        java.util.logging.Logger $r21;
        java.util.logging.Level $r22;

        $r0 = new io.grpc.okhttp.internal.OptionalMethod;

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r1[0] = $r2;

        $r3 = null;

        specialinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setUseSessionTickets", $r1);

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_USE_SESSION_TICKETS> = $r0;

        $r0 = new io.grpc.okhttp.internal.OptionalMethod;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/String;";

        specialinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setHostname", $r1);

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_HOSTNAME> = $r0;

        $r0 = new io.grpc.okhttp.internal.OptionalMethod;

        $r1 = newarray (java.lang.Class)[0];

        specialinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(class "[B", "getAlpnSelectedProtocol", $r1);

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod GET_ALPN_SELECTED_PROTOCOL> = $r0;

        $r0 = new io.grpc.okhttp.internal.OptionalMethod;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "[B";

        specialinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setAlpnProtocols", $r1);

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_ALPN_PROTOCOLS> = $r0;

        $r0 = new io.grpc.okhttp.internal.OptionalMethod;

        $r1 = newarray (java.lang.Class)[0];

        specialinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(class "[B", "getNpnSelectedProtocol", $r1);

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod GET_NPN_SELECTED_PROTOCOL> = $r0;

        $r0 = new io.grpc.okhttp.internal.OptionalMethod;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "[B";

        specialinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(null, "setNpnProtocols", $r1);

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_NPN_PROTOCOLS> = $r0;

        $r2 = class "Ljavax/net/ssl/SSLParameters;";

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "[Ljava/lang/String;";

     label01:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setApplicationProtocols", $r1);

     label02:
        $r1 = newarray (java.lang.Class)[0];

     label03:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getApplicationProtocols", $r1);

     label04:
        $r2 = class "Ljavax/net/ssl/SSLSocket;";

        $r1 = newarray (java.lang.Class)[0];

     label05:
        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getApplicationProtocol", $r1);

     label06:
        $r7 = $r6;

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.net.ssl.SSLSockets");

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljavax/net/ssl/SSLSocket;";

     label07:
        $r8 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isSupportedSocket", $r1);

     label08:
        $r9 = $r8;

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljavax/net/ssl/SSLSocket;";

        $r10 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r1[1] = $r10;

     label09:
        $r11 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setUseSessionTickets", $r1);

     label10:
        goto label25;

     label11:
        $r12 := @caughtexception;

        goto label21;

     label12:
        $r13 := @caughtexception;

        $r12 = $r13;

        goto label24;

     label13:
        $r14 := @caughtexception;

        $r8 = null;

        $r12 = $r14;

        goto label21;

     label14:
        $r15 := @caughtexception;

        $r8 = null;

        $r12 = $r15;

        goto label24;

     label15:
        $r16 := @caughtexception;

        $r6 = null;

        goto label20;

     label16:
        $r17 := @caughtexception;

        $r6 = null;

        goto label23;

     label17:
        $r18 := @caughtexception;

        $r16 = $r18;

        $r5 = null;

        $r6 = null;

        goto label20;

     label18:
        $r19 := @caughtexception;

        $r17 = $r19;

        $r5 = null;

        $r6 = null;

        goto label23;

     label19:
        $r20 := @caughtexception;

        $r16 = $r20;

        $r5 = null;

        $r4 = null;

        $r6 = null;

     label20:
        $r8 = null;

        $r12 = $r16;

     label21:
        $r21 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger '-$$Nest$sfgetlogger'()>();

        $r22 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke $r21.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r22, "io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator", "<clinit>", "Failed to find Android 10.0+ APIs", $r12);

        $r11 = null;

        $r7 = $r6;

        $r9 = $r8;

        goto label25;

     label22:
        $r23 := @caughtexception;

        $r17 = $r23;

        $r5 = null;

        $r4 = null;

        $r6 = null;

     label23:
        $r8 = null;

        $r12 = $r17;

     label24:
        $r21 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger '-$$Nest$sfgetlogger'()>();

        $r22 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke $r21.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r22, "io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator", "<clinit>", "Failed to find Android 10.0+ APIs", $r12);

        $r11 = null;

        $r7 = $r6;

        $r9 = $r8;

     label25:
        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SET_APPLICATION_PROTOCOLS> = $r4;

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method GET_APPLICATION_PROTOCOLS> = $r5;

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method GET_APPLICATION_PROTOCOL> = $r7;

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SSL_SOCKETS_IS_SUPPORTED_SOCKET> = $r9;

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SSL_SOCKETS_SET_USE_SESSION_TICKET> = $r11;

        $r2 = class "Ljavax/net/ssl/SSLParameters;";

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/util/List;";

     label26:
        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setServerNames", $r1);

     label27:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("javax.net.ssl.SNIHostName");

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/String;";

     label28:
        $r24 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

     label29:
        $r3 = $r24;

        goto label34;

     label30:
        $r25 := @caughtexception;

        $r12 = $r25;

        goto label33;

     label31:
        $r26 := @caughtexception;

        $r12 = $r26;

        goto label36;

     label32:
        $r27 := @caughtexception;

        $r12 = $r27;

        $r4 = null;

     label33:
        $r21 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger '-$$Nest$sfgetlogger'()>();

        $r22 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke $r21.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r22, "io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator", "<clinit>", "Failed to find Android 7.0+ APIs", $r12);

     label34:
        goto label37;

     label35:
        $r28 := @caughtexception;

        $r12 = $r28;

        $r4 = null;

     label36:
        $r21 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger '-$$Nest$sfgetlogger'()>();

        $r22 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke $r21.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r22, "io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator", "<clinit>", "Failed to find Android 7.0+ APIs", $r12);

     label37:
        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SET_SERVER_NAMES> = $r4;

        <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Constructor SNI_HOST_NAME> = $r3;

        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label22;
        catch java.lang.NoSuchMethodException from label01 to label02 with label19;
        catch java.lang.ClassNotFoundException from label03 to label04 with label18;
        catch java.lang.NoSuchMethodException from label03 to label04 with label17;
        catch java.lang.ClassNotFoundException from label05 to label06 with label16;
        catch java.lang.NoSuchMethodException from label05 to label06 with label15;
        catch java.lang.ClassNotFoundException from label07 to label08 with label14;
        catch java.lang.NoSuchMethodException from label07 to label08 with label13;
        catch java.lang.ClassNotFoundException from label09 to label10 with label12;
        catch java.lang.NoSuchMethodException from label09 to label10 with label11;
        catch java.lang.ClassNotFoundException from label26 to label27 with label35;
        catch java.lang.NoSuchMethodException from label26 to label27 with label32;
        catch java.lang.ClassNotFoundException from label28 to label29 with label31;
        catch java.lang.NoSuchMethodException from label28 to label29 with label30;
    }

    void <init>(io.grpc.okhttp.internal.Platform)
    {
        io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator $r0;
        io.grpc.okhttp.internal.Platform $r1;

        $r0 := @this: io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator;

        $r1 := @parameter0: io.grpc.okhttp.internal.Platform;

        specialinvoke $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator: void <init>(io.grpc.okhttp.internal.Platform)>($r1);

        return;
    }

    protected void configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator $r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List $r3, $r14;
        java.lang.String[] $r4, $r19;
        javax.net.ssl.SSLParameters $r5;
        java.lang.Boolean $r6, $r10;
        boolean $z0;
        java.lang.reflect.Method $r7;
        java.lang.Object[] $r8, $r13;
        java.lang.Object $r9;
        io.grpc.okhttp.internal.OptionalMethod $r11;
        java.lang.reflect.Constructor $r12;
        java.lang.Throwable $r15, $r16, $r24, $r25;
        java.util.logging.Logger $r17;
        java.util.logging.Level $r18;
        byte[] $r20;
        io.grpc.okhttp.internal.Platform $r21;
        io.grpc.okhttp.internal.Platform$TlsExtensionType $r22, $r23;
        java.lang.RuntimeException r26;
        java.lang.reflect.InvocationTargetException r27;

        $r0 := @this: io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.List;

        $r4 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.lang.String[] '-$$Nest$smprotocolIds'(java.util.List)>($r3);

        $r5 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        if $r2 == null goto label16;

        $z0 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: boolean isValidHostName(java.lang.String)>($r2);

        if $z0 == 0 goto label16;

        $r7 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SSL_SOCKETS_IS_SUPPORTED_SOCKET>;

        if $r7 == null goto label07;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r1;

     label01:
        $r9 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

     label02:
        $r10 = (java.lang.Boolean) $r9;

     label03:
        $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

     label04:
        if $z0 == 0 goto label07;

        $r7 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SSL_SOCKETS_SET_USE_SESSION_TICKET>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = $r1;

        $r8[1] = $r6;

     label05:
        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

     label06:
        goto label09;

     label07:
        $r11 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_USE_SESSION_TICKETS>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r6;

     label08:
        virtualinvoke $r11.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r8);

     label09:
        $r7 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SET_SERVER_NAMES>;

        if $r7 == null goto label14;

        $r12 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Constructor SNI_HOST_NAME>;

        if $r12 == null goto label14;

        $r8 = newarray (java.lang.Object)[1];

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = $r2;

     label10:
        $r9 = virtualinvoke $r12.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r13);

     label11:
        $r14 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r9);

        $r8[0] = $r14;

     label12:
        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r8);

     label13:
        goto label16;

     label14:
        $r11 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_HOSTNAME>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r2;

     label15:
        virtualinvoke $r11.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r8);

     label16:
        $r7 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method GET_APPLICATION_PROTOCOL>;

        if $r7 == null goto label27;

        $r8 = newarray (java.lang.Object)[0];

     label17:
        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r8);

     label18:
        $r7 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method SET_APPLICATION_PROTOCOLS>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r4;

     label19:
        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r8);

     label20:
        $z0 = 1;

        goto label28;

     label21:
        $r15 := @caughtexception;

        r27 = (java.lang.reflect.InvocationTargetException) $r15;

     label22:
        $r16 = virtualinvoke r27.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

     label23:
        $z0 = $r16 instanceof java.lang.UnsupportedOperationException;

        if $z0 == 0 goto label26;

        $r17 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger '-$$Nest$sfgetlogger'()>();

        $r18 = <java.util.logging.Level: java.util.logging.Level FINER>;

     label24:
        virtualinvoke $r17.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r18, "io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator", "configureTlsExtensions", "setApplicationProtocol unsupported, will try old methods");

     label25:
        goto label27;

     label26:
        throw $r15;

     label27:
        $z0 = 0;

     label28:
        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>($r5);

     label29:
        if $z0 == 0 goto label35;

        $r7 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method GET_APPLICATION_PROTOCOLS>;

        if $r7 == null goto label35;

     label30:
        $r5 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLParameters getSSLParameters()>();

     label31:
        $r8 = newarray (java.lang.Object)[0];

     label32:
        $r9 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r8);

     label33:
        $r19 = (java.lang.String[]) $r9;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r19);

        if $z0 != 0 goto label34;

        goto label35;

     label34:
        return;

     label35:
        $r8 = newarray (java.lang.Object)[1];

        $r20 = staticinvoke <io.grpc.okhttp.internal.Platform: byte[] concatLengthPrefixed(java.util.List)>($r3);

        $r8[0] = $r20;

        $r21 = $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.Platform platform>;

        $r22 = virtualinvoke $r21.<io.grpc.okhttp.internal.Platform: io.grpc.okhttp.internal.Platform$TlsExtensionType getTlsExtensionType()>();

        $r23 = <io.grpc.okhttp.internal.Platform$TlsExtensionType: io.grpc.okhttp.internal.Platform$TlsExtensionType ALPN_AND_NPN>;

        if $r22 != $r23 goto label36;

        $r11 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_ALPN_PROTOCOLS>;

        virtualinvoke $r11.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r8);

     label36:
        $r21 = $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.Platform platform>;

        $r22 = virtualinvoke $r21.<io.grpc.okhttp.internal.Platform: io.grpc.okhttp.internal.Platform$TlsExtensionType getTlsExtensionType()>();

        $r23 = <io.grpc.okhttp.internal.Platform$TlsExtensionType: io.grpc.okhttp.internal.Platform$TlsExtensionType NONE>;

        if $r22 == $r23 goto label37;

        $r11 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod SET_NPN_PROTOCOLS>;

        virtualinvoke $r11.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r8);

        return;

     label37:
        r26 = new java.lang.RuntimeException;

        specialinvoke r26.<java.lang.RuntimeException: void <init>(java.lang.String)>("We can not do TLS handshake on this Android version, please install the Google Play Services Dynamic Security Provider to use TLS");

        $r15 = (java.lang.Throwable) r26;

        throw $r15;

     label38:
        $r16 := @caughtexception;

        r26 = new java.lang.RuntimeException;

        specialinvoke r26.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r16);

        $r15 = (java.lang.Throwable) r26;

        throw $r15;

     label39:
        $r24 := @caughtexception;

        r26 = new java.lang.RuntimeException;

        specialinvoke r26.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r24);

        $r15 = (java.lang.Throwable) r26;

        throw $r15;

     label40:
        $r25 := @caughtexception;

        r26 = new java.lang.RuntimeException;

        specialinvoke r26.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r25);

        $r15 = (java.lang.Throwable) r26;

        throw $r15;

        catch java.lang.IllegalAccessException from label01 to label02 with label40;
        catch java.lang.IllegalAccessException from label03 to label04 with label40;
        catch java.lang.IllegalAccessException from label05 to label06 with label40;
        catch java.lang.IllegalAccessException from label08 to label09 with label40;
        catch java.lang.IllegalAccessException from label10 to label11 with label40;
        catch java.lang.IllegalAccessException from label12 to label13 with label40;
        catch java.lang.IllegalAccessException from label15 to label16 with label40;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label39;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label39;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label39;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label39;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label39;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label39;
        catch java.lang.reflect.InvocationTargetException from label15 to label16 with label39;
        catch java.lang.InstantiationException from label01 to label02 with label38;
        catch java.lang.InstantiationException from label03 to label04 with label38;
        catch java.lang.InstantiationException from label05 to label06 with label38;
        catch java.lang.InstantiationException from label08 to label09 with label38;
        catch java.lang.InstantiationException from label10 to label11 with label38;
        catch java.lang.InstantiationException from label12 to label13 with label38;
        catch java.lang.InstantiationException from label15 to label16 with label38;
        catch java.lang.reflect.InvocationTargetException from label17 to label18 with label21;
        catch java.lang.reflect.InvocationTargetException from label19 to label20 with label21;
        catch java.lang.IllegalAccessException from label17 to label18 with label40;
        catch java.lang.IllegalAccessException from label19 to label20 with label40;
        catch java.lang.InstantiationException from label17 to label18 with label38;
        catch java.lang.InstantiationException from label19 to label20 with label38;
        catch java.lang.IllegalAccessException from label22 to label23 with label40;
        catch java.lang.IllegalAccessException from label24 to label25 with label40;
        catch java.lang.IllegalAccessException from label26 to label27 with label40;
        catch java.lang.IllegalAccessException from label28 to label29 with label40;
        catch java.lang.IllegalAccessException from label30 to label31 with label40;
        catch java.lang.IllegalAccessException from label32 to label33 with label40;
        catch java.lang.reflect.InvocationTargetException from label22 to label23 with label39;
        catch java.lang.reflect.InvocationTargetException from label24 to label25 with label39;
        catch java.lang.reflect.InvocationTargetException from label26 to label27 with label39;
        catch java.lang.reflect.InvocationTargetException from label28 to label29 with label39;
        catch java.lang.reflect.InvocationTargetException from label30 to label31 with label39;
        catch java.lang.reflect.InvocationTargetException from label32 to label33 with label39;
        catch java.lang.InstantiationException from label22 to label23 with label38;
        catch java.lang.InstantiationException from label24 to label25 with label38;
        catch java.lang.InstantiationException from label26 to label27 with label38;
        catch java.lang.InstantiationException from label28 to label29 with label38;
        catch java.lang.InstantiationException from label30 to label31 with label38;
        catch java.lang.InstantiationException from label32 to label33 with label38;
    }

    public java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator $r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.String $r5, r19;
        java.lang.Throwable $r6, $r7, $r16, $r17;
        boolean $z0;
        java.util.logging.Logger $r8;
        java.util.logging.Level $r9;
        io.grpc.okhttp.internal.Platform $r10;
        io.grpc.okhttp.internal.Platform$TlsExtensionType $r11, $r12;
        io.grpc.okhttp.internal.OptionalMethod $r13;
        byte[] $r14;
        java.nio.charset.Charset $r15;
        java.lang.RuntimeException r18;
        java.lang.reflect.InvocationTargetException r20;

        $r0 := @this: io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.reflect.Method GET_APPLICATION_PROTOCOL>;

        if $r2 == null goto label06;

        $r3 = newarray (java.lang.Object)[0];

     label01:
        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r3);

     label02:
        $r5 = (java.lang.String) $r4;

        return $r5;

     label03:
        $r6 := @caughtexception;

        r20 = (java.lang.reflect.InvocationTargetException) $r6;

        $r7 = virtualinvoke r20.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r7 instanceof java.lang.UnsupportedOperationException;

        if $z0 == 0 goto label04;

        $r8 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger '-$$Nest$sfgetlogger'()>();

        $r9 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r9, "io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator", "getSelectedProtocol", "Socket unsupported for getApplicationProtocol, will try old methods");

        goto label06;

     label04:
        r18 = new java.lang.RuntimeException;

        specialinvoke r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        $r6 = (java.lang.Throwable) r18;

        throw $r6;

     label05:
        $r7 := @caughtexception;

        r18 = new java.lang.RuntimeException;

        specialinvoke r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        $r6 = (java.lang.Throwable) r18;

        throw $r6;

     label06:
        $r10 = $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.Platform platform>;

        $r11 = virtualinvoke $r10.<io.grpc.okhttp.internal.Platform: io.grpc.okhttp.internal.Platform$TlsExtensionType getTlsExtensionType()>();

        $r12 = <io.grpc.okhttp.internal.Platform$TlsExtensionType: io.grpc.okhttp.internal.Platform$TlsExtensionType ALPN_AND_NPN>;

        if $r11 != $r12 goto label12;

        $r13 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod GET_ALPN_SELECTED_PROTOCOL>;

        $r3 = newarray (java.lang.Object)[0];

     label07:
        $r4 = virtualinvoke $r13.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r3);

     label08:
        $r14 = (byte[]) $r4;

        if $r14 == null goto label12;

        r19 = new java.lang.String;

        $r15 = <io.grpc.okhttp.internal.Util: java.nio.charset.Charset UTF_8>;

     label09:
        specialinvoke r19.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r14, $r15);

     label10:
        return r19;

     label11:
        $r16 := @caughtexception;

        $r8 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger '-$$Nest$sfgetlogger'()>();

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator", "getSelectedProtocol", "Failed calling getAlpnSelectedProtocol()", $r16);

     label12:
        $r10 = $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.Platform platform>;

        $r11 = virtualinvoke $r10.<io.grpc.okhttp.internal.Platform: io.grpc.okhttp.internal.Platform$TlsExtensionType getTlsExtensionType()>();

        $r12 = <io.grpc.okhttp.internal.Platform$TlsExtensionType: io.grpc.okhttp.internal.Platform$TlsExtensionType NONE>;

        if $r11 == $r12 goto label18;

        $r13 = <io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: io.grpc.okhttp.internal.OptionalMethod GET_NPN_SELECTED_PROTOCOL>;

        $r3 = newarray (java.lang.Object)[0];

     label13:
        $r4 = virtualinvoke $r13.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[])>($r1, $r3);

     label14:
        $r14 = (byte[]) $r4;

        if $r14 == null goto label18;

        r19 = new java.lang.String;

        $r15 = <io.grpc.okhttp.internal.Util: java.nio.charset.Charset UTF_8>;

     label15:
        specialinvoke r19.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r14, $r15);

     label16:
        return r19;

     label17:
        $r17 := @caughtexception;

        $r8 = staticinvoke <io.grpc.okhttp.OkHttpProtocolNegotiator: java.util.logging.Logger '-$$Nest$sfgetlogger'()>();

        $r9 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r8.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator", "getSelectedProtocol", "Failed calling getNpnSelectedProtocol()", $r17);

     label18:
        return null;

        catch java.lang.IllegalAccessException from label01 to label02 with label05;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label03;
        catch java.lang.Exception from label07 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label13 to label14 with label17;
        catch java.lang.Exception from label15 to label16 with label17;
    }

    public java.lang.String negotiate(javax.net.ssl.SSLSocket, java.lang.String, java.util.List) throws java.io.IOException
    {
        io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator $r0;
        java.lang.String $r1, $r4;
        java.util.List $r2;
        javax.net.ssl.SSLSocket $r3;

        $r0 := @this: io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator;

        $r3 := @parameter0: javax.net.ssl.SSLSocket;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.util.List;

        $r4 = virtualinvoke $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator$AndroidNegotiator: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r3);

        if $r4 != null goto label1;

        $r1 = specialinvoke $r0.<io.grpc.okhttp.OkHttpProtocolNegotiator: java.lang.String negotiate(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r3, $r1, $r2);

        return $r1;

     label1:
        return $r4;
    }

