kotlin.collections.ArrayAsCollection
<kotlin.collections.ArrayAsCollection: boolean isVarargs>
<kotlin.collections.ArrayAsCollection: java.lang.Object[] values>
    public void <init>(java.lang.Object[], boolean)
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.Object[] $r1;
        boolean $z0;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 := @parameter0: java.lang.Object[];

        $z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "values");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.collections.ArrayAsCollection: java.lang.Object[] values> = $r1;

        $r0.<kotlin.collections.ArrayAsCollection: boolean isVarargs> = $z0;

        return;
    }

    public boolean add(java.lang.Object)
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void clear()
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean contains(java.lang.Object)
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.Object[] $r1;
        boolean $z0;
        java.lang.Object $r2;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r2 := @parameter0: java.lang.Object;

        $r1 = $r0.<kotlin.collections.ArrayAsCollection: java.lang.Object[] values>;

        $z0 = staticinvoke <kotlin.collections.ArraysKt: boolean contains(java.lang.Object[],java.lang.Object)>($r1, $r2);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.util.Collection $r1;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.Iterable r4;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        $z1 = 1;

        if $z0 == 0 goto label2;

     label1:
        goto label4;

     label2:
        r4 = (java.lang.Iterable) $r1;

        $r2 = interfaceinvoke r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = virtualinvoke $r0.<kotlin.collections.ArrayAsCollection: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $z1 = 0;

     label4:
        return $z1;
    }

    public int getSize()
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.Object[] $r1;
        int $i0;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 = $r0.<kotlin.collections.ArrayAsCollection: java.lang.Object[] values>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public final java.lang.Object[] getValues()
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.Object[] r1;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        r1 = $r0.<kotlin.collections.ArrayAsCollection: java.lang.Object[] values>;

        return r1;
    }

    public boolean isEmpty()
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.Object[] $r1;
        int $i0;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 = $r0.<kotlin.collections.ArrayAsCollection: java.lang.Object[] values>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isVarargs()
    {
        kotlin.collections.ArrayAsCollection $r0;
        boolean z0;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        z0 = $r0.<kotlin.collections.ArrayAsCollection: boolean isVarargs>;

        return z0;
    }

    public java.util.Iterator iterator()
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.util.Iterator $r1;
        java.lang.Object[] $r2;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r2 = $r0.<kotlin.collections.ArrayAsCollection: java.lang.Object[] values>;

        $r1 = staticinvoke <kotlin.jvm.internal.ArrayIteratorKt: java.util.Iterator iterator(java.lang.Object[])>($r2);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.Object $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean retainAll(java.util.Collection)
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.util.Collection $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile int size()
    {
        kotlin.collections.ArrayAsCollection $r0;
        int $i0;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $i0 = virtualinvoke $r0.<kotlin.collections.ArrayAsCollection: int getSize()>();

        return $i0;
    }

    public final java.lang.Object[] toArray()
    {
        kotlin.collections.ArrayAsCollection $r0;
        boolean $z0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 = $r0.<kotlin.collections.ArrayAsCollection: java.lang.Object[] values>;

        $z0 = $r0.<kotlin.collections.ArrayAsCollection: boolean isVarargs>;

        $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object[] copyToArrayOfAny(java.lang.Object[],boolean)>($r1, $z0);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        kotlin.collections.ArrayAsCollection $r0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.collections.ArrayAsCollection;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r0, $r1);

        return $r1;
    }

