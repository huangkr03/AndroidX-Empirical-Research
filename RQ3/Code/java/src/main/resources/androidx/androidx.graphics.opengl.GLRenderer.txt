androidx.graphics.opengl.GLRenderer
<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLRenderer$Companion Companion>
<androidx.graphics.opengl.GLRenderer: kotlin.jvm.functions.Function0 mEglSpecFactory>
<androidx.graphics.opengl.GLRenderer: kotlin.jvm.functions.Function1 mEglConfigFactory>
<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>
<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets>
<androidx.graphics.opengl.GLRenderer: java.util.HashSet mEglContextCallback>
<androidx.graphics.opengl.GLRenderer: java.util.concurrent.atomic.AtomicInteger sToken>
    public void <init>(kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLRenderer r0;
        kotlin.jvm.functions.Function0 r1;
        kotlin.jvm.functions.Function1 r2;
        java.util.ArrayList $r3;
        java.util.HashSet $r4;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "eglSpecFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "eglConfigFactory");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.graphics.opengl.GLRenderer: kotlin.jvm.functions.Function0 mEglSpecFactory> = r1;

        r0.<androidx.graphics.opengl.GLRenderer: kotlin.jvm.functions.Function1 mEglConfigFactory> = r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<androidx.graphics.opengl.GLRenderer: java.util.HashSet mEglContextCallback> = $r4;

        return;
    }

    public void <init>(kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.graphics.opengl.GLRenderer r0;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        androidx.graphics.opengl.GLRenderer$2 $r2;
        androidx.graphics.opengl.GLRenderer$1 $r3;
        kotlin.jvm.functions.Function0 r4;
        kotlin.jvm.functions.Function1 r5;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r4 := @parameter0: kotlin.jvm.functions.Function0;

        r5 := @parameter1: kotlin.jvm.functions.Function1;

        i0 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r3 = <androidx.graphics.opengl.GLRenderer$1: androidx.graphics.opengl.GLRenderer$1 INSTANCE>;

        r4 = (kotlin.jvm.functions.Function0) $r3;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r2 = <androidx.graphics.opengl.GLRenderer$2: androidx.graphics.opengl.GLRenderer$2 INSTANCE>;

        r5 = (kotlin.jvm.functions.Function1) $r2;

     label2:
        specialinvoke r0.<androidx.graphics.opengl.GLRenderer: void <init>(kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1)>(r4, r5);

        return;
    }

    public final void detach(androidx.graphics.opengl.GLRenderer$RenderTarget, boolean, kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        boolean z0, $z1;
        kotlin.jvm.functions.Function1 r2;
        java.util.ArrayList $r3, $r5;
        androidx.graphics.opengl.GLThread $r4;
        int $i0;
        java.lang.Runnable $r6;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        z0 := @parameter1: boolean;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        $r3 = r0.<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r4 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if $r4 == null goto label1;

        $i0 = virtualinvoke r1.<androidx.graphics.opengl.GLRenderer$RenderTarget: int getToken$graphics_core_release()>();

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.graphics.opengl.GLRenderer$RenderTarget,kotlin.jvm.functions.Function1)>(r1, r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLRenderer: void detach$lambda$0(androidx.graphics.opengl.GLRenderer$RenderTarget,kotlin.jvm.functions.Function1)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r4.<androidx.graphics.opengl.GLThread: void detachSurface(int,boolean,java.lang.Runnable)>($i0, z0, $r6);

        goto label1;

     label1:
        $r5 = r0.<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets>;

        virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

     label2:
        return;
    }

    public static void detach$default(androidx.graphics.opengl.GLRenderer, androidx.graphics.opengl.GLRenderer$RenderTarget, boolean, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        boolean z0;
        int i0, $i1;
        java.lang.Object r2;
        kotlin.jvm.functions.Function1 r3;

        r0 := @parameter0: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter1: androidx.graphics.opengl.GLRenderer$RenderTarget;

        z0 := @parameter2: boolean;

        r3 := @parameter3: kotlin.jvm.functions.Function1;

        i0 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer: void detach(androidx.graphics.opengl.GLRenderer$RenderTarget,boolean,kotlin.jvm.functions.Function1)>(r1, z0, r3);

        return;
    }

    public final boolean isRunning()
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLThread $r1;
        boolean $z0;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        $r1 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void start(java.lang.String)
    {
        androidx.graphics.opengl.GLRenderer r0, r4;
        java.lang.String r1;
        androidx.graphics.opengl.GLThread r2, $r5, $r7;
        androidx.graphics.opengl.GLThread$Companion $r6;
        kotlin.jvm.functions.Function1 $r8;
        kotlin.jvm.functions.Function0 $r9;
        java.util.HashSet $r10, $r12;
        boolean $z1;
        java.util.ArrayList $r11;
        java.util.Collection $r13;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "name");

        $r5 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if $r5 != null goto label2;

        $r6 = <androidx.graphics.opengl.GLThread: androidx.graphics.opengl.GLThread$Companion Companion>;

        virtualinvoke $r6.<androidx.graphics.opengl.GLThread$Companion: void log$graphics_core_release(java.lang.String)>("starting thread...");

        $r7 = new androidx.graphics.opengl.GLThread;

        $r9 = r0.<androidx.graphics.opengl.GLRenderer: kotlin.jvm.functions.Function0 mEglSpecFactory>;

        $r8 = r0.<androidx.graphics.opengl.GLRenderer: kotlin.jvm.functions.Function1 mEglConfigFactory>;

        specialinvoke $r7.<androidx.graphics.opengl.GLThread: void <init>(java.lang.String,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1)>(r1, $r9, $r8);

        r2 = $r7;

        r4 = r0;

        virtualinvoke r2.<androidx.graphics.opengl.GLThread: void start()>();

        $r10 = r0.<androidx.graphics.opengl.GLRenderer: java.util.HashSet mEglContextCallback>;

        $z1 = virtualinvoke $r10.<java.util.HashSet: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r11 = new java.util.ArrayList;

        $r12 = r0.<androidx.graphics.opengl.GLRenderer: java.util.HashSet mEglContextCallback>;

        $r13 = (java.util.Collection) $r12;

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>($r13);

        virtualinvoke r2.<androidx.graphics.opengl.GLThread: void addEGLCallbacks(java.util.ArrayList)>($r11);

     label1:
        r4.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread> = r2;

     label2:
        return;
    }

    public static void start$default(androidx.graphics.opengl.GLRenderer, java.lang.String, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @parameter0: androidx.graphics.opengl.GLRenderer;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r2 = "GLThread";

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer: void start(java.lang.String)>(r2);

        return;
    }

    public final void requestRender(androidx.graphics.opengl.GLRenderer$RenderTarget, kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        kotlin.jvm.functions.Function1 r2;
        int i0;
        java.lang.Runnable r3, $r5;
        androidx.graphics.opengl.GLThread $r4;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        i0 = virtualinvoke r1.<androidx.graphics.opengl.GLRenderer$RenderTarget: int getToken$graphics_core_release()>();

        if r2 == null goto label1;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (kotlin.jvm.functions.Function1,androidx.graphics.opengl.GLRenderer$RenderTarget)>(r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLRenderer: void requestRender$lambda$2(kotlin.jvm.functions.Function1,androidx.graphics.opengl.GLRenderer$RenderTarget)>, methodtype: void __METHODTYPE__());

        goto label2;

     label1:
        $r5 = (java.lang.Runnable) null;

     label2:
        r3 = $r5;

        $r4 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if $r4 == null goto label3;

        virtualinvoke $r4.<androidx.graphics.opengl.GLThread: void requestRender(int,java.lang.Runnable)>(i0, r3);

        goto label3;

     label3:
        return;
    }

    public static void requestRender$default(androidx.graphics.opengl.GLRenderer, androidx.graphics.opengl.GLRenderer$RenderTarget, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        int i0, $i1;
        java.lang.Object r2;
        kotlin.jvm.functions.Function1 r3;

        r0 := @parameter0: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter1: androidx.graphics.opengl.GLRenderer$RenderTarget;

        r3 := @parameter2: kotlin.jvm.functions.Function1;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r3 = null;

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer: void requestRender(androidx.graphics.opengl.GLRenderer$RenderTarget,kotlin.jvm.functions.Function1)>(r1, r3);

        return;
    }

    public final void resize(androidx.graphics.opengl.GLRenderer$RenderTarget, int, int, kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        int i0, i1, i2;
        kotlin.jvm.functions.Function1 r2;
        java.lang.Runnable r3, $r5;
        androidx.graphics.opengl.GLThread $r4;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        i2 = virtualinvoke r1.<androidx.graphics.opengl.GLRenderer$RenderTarget: int getToken$graphics_core_release()>();

        if r2 == null goto label1;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (kotlin.jvm.functions.Function1,androidx.graphics.opengl.GLRenderer$RenderTarget)>(r2, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLRenderer: void resize$lambda$3(kotlin.jvm.functions.Function1,androidx.graphics.opengl.GLRenderer$RenderTarget)>, methodtype: void __METHODTYPE__());

        goto label2;

     label1:
        $r5 = (java.lang.Runnable) null;

     label2:
        r3 = $r5;

        $r4 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if $r4 == null goto label3;

        virtualinvoke $r4.<androidx.graphics.opengl.GLThread: void resizeSurface(int,int,int,java.lang.Runnable)>(i2, i0, i1, r3);

        goto label3;

     label3:
        return;
    }

    public static void resize$default(androidx.graphics.opengl.GLRenderer, androidx.graphics.opengl.GLRenderer$RenderTarget, int, int, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        int i0, i1, i2, $i3;
        java.lang.Object r2;
        kotlin.jvm.functions.Function1 r3;

        r0 := @parameter0: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter1: androidx.graphics.opengl.GLRenderer$RenderTarget;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: kotlin.jvm.functions.Function1;

        i2 := @parameter5: int;

        r2 := @parameter6: java.lang.Object;

        $i3 = i2 & 8;

        if $i3 == 0 goto label1;

        r3 = null;

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer: void resize(androidx.graphics.opengl.GLRenderer$RenderTarget,int,int,kotlin.jvm.functions.Function1)>(r1, i0, i1, r3);

        return;
    }

    public final void stop(boolean, kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLRenderer r0;
        boolean z0;
        kotlin.jvm.functions.Function1 r1;
        java.util.ArrayList r2, $r4, $r5, $r8;
        androidx.graphics.opengl.GLThread$Companion $r3;
        java.util.Collection $r6;
        androidx.graphics.opengl.GLThread $r7;
        java.lang.Runnable $r9;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        z0 := @parameter0: boolean;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r3 = <androidx.graphics.opengl.GLThread: androidx.graphics.opengl.GLThread$Companion Companion>;

        virtualinvoke $r3.<androidx.graphics.opengl.GLThread$Companion: void log$graphics_core_release(java.lang.String)>("stopping thread...");

        $r4 = new java.util.ArrayList;

        $r5 = r0.<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets>;

        $r6 = (java.util.Collection) $r5;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r2 = $r4;

        $r7 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if $r7 == null goto label1;

        $r9 = dynamicinvoke "run" <java.lang.Runnable (java.util.ArrayList,kotlin.jvm.functions.Function1,androidx.graphics.opengl.GLRenderer)>(r2, r1, r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLRenderer: void stop$lambda$4(java.util.ArrayList,kotlin.jvm.functions.Function1,androidx.graphics.opengl.GLRenderer)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r7.<androidx.graphics.opengl.GLThread: void tearDown(boolean,java.lang.Runnable)>(z0, $r9);

        goto label1;

     label1:
        r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread> = null;

        $r8 = r0.<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets>;

        virtualinvoke $r8.<java.util.ArrayList: void clear()>();

        return;
    }

    public static void stop$default(androidx.graphics.opengl.GLRenderer, boolean, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer r0;
        boolean z0;
        int i0, $i1;
        java.lang.Object r1;
        kotlin.jvm.functions.Function1 r2;

        r0 := @parameter0: androidx.graphics.opengl.GLRenderer;

        z0 := @parameter1: boolean;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r2 = null;

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer: void stop(boolean,kotlin.jvm.functions.Function1)>(z0, r2);

        return;
    }

    public final void registerEGLContextCallback(androidx.graphics.opengl.GLRenderer$EGLContextCallback)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$EGLContextCallback r1;
        java.util.HashSet $r2;
        androidx.graphics.opengl.GLThread $r3;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$EGLContextCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        $r2 = r0.<androidx.graphics.opengl.GLRenderer: java.util.HashSet mEglContextCallback>;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if $r3 == null goto label1;

        virtualinvoke $r3.<androidx.graphics.opengl.GLThread: void addEGLCallback(androidx.graphics.opengl.GLRenderer$EGLContextCallback)>(r1);

        goto label1;

     label1:
        return;
    }

    public final void unregisterEGLContextCallback(androidx.graphics.opengl.GLRenderer$EGLContextCallback)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$EGLContextCallback r1;
        java.util.HashSet $r2;
        androidx.graphics.opengl.GLThread $r3;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$EGLContextCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        $r2 = r0.<androidx.graphics.opengl.GLRenderer: java.util.HashSet mEglContextCallback>;

        virtualinvoke $r2.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if $r3 == null goto label1;

        virtualinvoke $r3.<androidx.graphics.opengl.GLThread: void removeEGLCallback(androidx.graphics.opengl.GLRenderer$EGLContextCallback)>(r1);

        goto label1;

     label1:
        return;
    }

    public final androidx.graphics.opengl.GLRenderer$RenderTarget attach(android.view.Surface, int, int, androidx.graphics.opengl.GLRenderer$RenderCallback)
    {
        androidx.graphics.opengl.GLRenderer r0;
        android.view.Surface r1;
        int i0, i1, i2;
        androidx.graphics.opengl.GLRenderer$RenderCallback r2;
        androidx.graphics.opengl.GLThread r3;
        androidx.graphics.opengl.GLRenderer$RenderTarget r4, r5, $r8;
        java.lang.IllegalStateException $r6;
        java.util.concurrent.atomic.AtomicInteger $r7;
        java.util.ArrayList $r9;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: androidx.graphics.opengl.GLRenderer$RenderCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "surface");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "renderer");

        r3 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if r3 == null goto label1;

        $r7 = <androidx.graphics.opengl.GLRenderer: java.util.concurrent.atomic.AtomicInteger sToken>;

        i2 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        virtualinvoke r3.<androidx.graphics.opengl.GLThread: void attachSurface(int,android.view.Surface,int,int,androidx.graphics.opengl.GLRenderer$RenderCallback)>(i2, r1, i0, i1, r2);

        $r8 = new androidx.graphics.opengl.GLRenderer$RenderTarget;

        specialinvoke $r8.<androidx.graphics.opengl.GLRenderer$RenderTarget: void <init>(int,androidx.graphics.opengl.GLRenderer,kotlin.jvm.functions.Function0,int,kotlin.jvm.internal.DefaultConstructorMarker)>(i2, r0, null, 4, null);

        r4 = $r8;

        r5 = r4;

        $r9 = r0.<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        return r4;

     label1:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("GLThread not started, did you forget to call start?");

        throw $r6;
    }

    public final androidx.graphics.opengl.GLRenderer$RenderTarget createRenderTarget(int, int, androidx.graphics.opengl.GLRenderer$RenderCallback)
    {
        androidx.graphics.opengl.GLRenderer r0;
        int i0, i1, i2;
        androidx.graphics.opengl.GLRenderer$RenderCallback r1;
        androidx.graphics.opengl.GLThread r2;
        androidx.graphics.opengl.GLRenderer$RenderTarget r3, r4, $r7;
        java.lang.IllegalStateException $r5;
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.util.ArrayList $r8;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: androidx.graphics.opengl.GLRenderer$RenderCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "renderer");

        r2 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if r2 == null goto label1;

        $r6 = <androidx.graphics.opengl.GLRenderer: java.util.concurrent.atomic.AtomicInteger sToken>;

        i2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        virtualinvoke r2.<androidx.graphics.opengl.GLThread: void attachSurface(int,android.view.Surface,int,int,androidx.graphics.opengl.GLRenderer$RenderCallback)>(i2, null, i0, i1, r1);

        $r7 = new androidx.graphics.opengl.GLRenderer$RenderTarget;

        specialinvoke $r7.<androidx.graphics.opengl.GLRenderer$RenderTarget: void <init>(int,androidx.graphics.opengl.GLRenderer,kotlin.jvm.functions.Function0,int,kotlin.jvm.internal.DefaultConstructorMarker)>(i2, r0, null, 4, null);

        r3 = $r7;

        r4 = r3;

        $r8 = r0.<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        return r3;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("GLThread not started, did you forget to call start?");

        throw $r5;
    }

    public final androidx.graphics.opengl.GLRenderer$RenderTarget attach(android.view.SurfaceView, androidx.graphics.opengl.GLRenderer$RenderCallback)
    {
        androidx.graphics.opengl.GLRenderer r0;
        android.view.SurfaceView r1;
        androidx.graphics.opengl.GLRenderer$RenderCallback r2;
        androidx.graphics.opengl.GLThread r3;
        int i0, $i1, $i2;
        android.view.SurfaceHolder r4;
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r5, $r8;
        java.lang.IllegalStateException $r6;
        java.util.concurrent.atomic.AtomicInteger $r7;
        android.view.SurfaceHolder$Callback $r9;
        android.view.Surface $r10, $r11, $r12;
        boolean $z1;
        java.util.ArrayList $r13;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r14, $r15;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: android.view.SurfaceView;

        r2 := @parameter1: androidx.graphics.opengl.GLRenderer$RenderCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "surfaceView");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "renderer");

        r3 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if r3 == null goto label2;

        $r7 = <androidx.graphics.opengl.GLRenderer: java.util.concurrent.atomic.AtomicInteger sToken>;

        i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        r4 = virtualinvoke r1.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r8 = new androidx.graphics.opengl.GLRenderer$attach$callback$1;

        specialinvoke $r8.<androidx.graphics.opengl.GLRenderer$attach$callback$1: void <init>(int,androidx.graphics.opengl.GLRenderer,android.view.SurfaceHolder,androidx.graphics.opengl.GLThread,androidx.graphics.opengl.GLRenderer$RenderCallback)>(i0, r0, r4, r3, r2);

        r5 = $r8;

        $r9 = (android.view.SurfaceHolder$Callback) r5;

        interfaceinvoke r4.<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>($r9);

        $r10 = interfaceinvoke r4.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        if $r10 == null goto label1;

        $r11 = interfaceinvoke r4.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        $z1 = virtualinvoke $r11.<android.view.Surface: boolean isValid()>();

        if $z1 == 0 goto label1;

        $r12 = interfaceinvoke r4.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        $i1 = virtualinvoke r1.<android.view.SurfaceView: int getWidth()>();

        $i2 = virtualinvoke r1.<android.view.SurfaceView: int getHeight()>();

        virtualinvoke r3.<androidx.graphics.opengl.GLThread: void attachSurface(int,android.view.Surface,int,int,androidx.graphics.opengl.GLRenderer$RenderCallback)>(i0, $r12, $i1, $i2, r2);

     label1:
        $r13 = r0.<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets>;

        $r14 = virtualinvoke r5.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget getRenderTarget()>();

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        $r15 = virtualinvoke r5.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget getRenderTarget()>();

        return $r15;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("GLThread not started, did you forget to call start?");

        throw $r6;
    }

    public final androidx.graphics.opengl.GLRenderer$RenderTarget attach(android.view.TextureView, androidx.graphics.opengl.GLRenderer$RenderCallback)
    {
        androidx.graphics.opengl.GLRenderer r0;
        android.view.TextureView r1;
        androidx.graphics.opengl.GLRenderer$RenderCallback r2;
        androidx.graphics.opengl.GLThread r3;
        int i0, $i1, $i2;
        java.util.concurrent.CountDownLatch r4, $r8;
        androidx.graphics.opengl.GLRenderer$RenderTarget r5, $r9;
        java.lang.IllegalStateException $r6;
        java.util.concurrent.atomic.AtomicInteger $r7;
        androidx.graphics.opengl.GLRenderer$attach$renderTarget$1 $r10;
        kotlin.jvm.functions.Function0 $r11;
        androidx.graphics.opengl.GLRenderer$attach$2 $r12;
        android.view.TextureView$SurfaceTextureListener $r13;
        boolean $z0;
        java.util.ArrayList $r14;
        android.view.Surface $r15;
        android.graphics.SurfaceTexture $r16;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: android.view.TextureView;

        r2 := @parameter1: androidx.graphics.opengl.GLRenderer$RenderCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "textureView");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "renderer");

        r3 = r0.<androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLThread mGLThread>;

        if r3 == null goto label2;

        $r7 = <androidx.graphics.opengl.GLRenderer: java.util.concurrent.atomic.AtomicInteger sToken>;

        i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r8 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r8.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r4 = $r8;

        $r9 = new androidx.graphics.opengl.GLRenderer$RenderTarget;

        $r10 = new androidx.graphics.opengl.GLRenderer$attach$renderTarget$1;

        specialinvoke $r10.<androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: void <init>(android.view.TextureView,java.util.concurrent.CountDownLatch)>(r1, r4);

        $r11 = (kotlin.jvm.functions.Function0) $r10;

        specialinvoke $r9.<androidx.graphics.opengl.GLRenderer$RenderTarget: void <init>(int,androidx.graphics.opengl.GLRenderer,kotlin.jvm.functions.Function0)>(i0, r0, $r11);

        r5 = $r9;

        $r12 = new androidx.graphics.opengl.GLRenderer$attach$2;

        specialinvoke $r12.<androidx.graphics.opengl.GLRenderer$attach$2: void <init>(androidx.graphics.opengl.GLThread,int,androidx.graphics.opengl.GLRenderer$RenderCallback,androidx.graphics.opengl.GLRenderer$RenderTarget,java.util.concurrent.CountDownLatch)>(r3, i0, r2, r5, r4);

        $r13 = (android.view.TextureView$SurfaceTextureListener) $r12;

        virtualinvoke r1.<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)>($r13);

        $z0 = virtualinvoke r1.<android.view.TextureView: boolean isAvailable()>();

        if $z0 == 0 goto label1;

        $r15 = new android.view.Surface;

        $r16 = virtualinvoke r1.<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()>();

        specialinvoke $r15.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>($r16);

        $i1 = virtualinvoke r1.<android.view.TextureView: int getWidth()>();

        $i2 = virtualinvoke r1.<android.view.TextureView: int getHeight()>();

        virtualinvoke r3.<androidx.graphics.opengl.GLThread: void attachSurface(int,android.view.Surface,int,int,androidx.graphics.opengl.GLRenderer$RenderCallback)>(i0, $r15, $i1, $i2, r2);

     label1:
        $r14 = r0.<androidx.graphics.opengl.GLRenderer: java.util.ArrayList mRenderTargets>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        return r5;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("GLThread not started, did you forget to call start?");

        throw $r6;
    }

    public final void detach(androidx.graphics.opengl.GLRenderer$RenderTarget, boolean)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        boolean z0;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        staticinvoke <androidx.graphics.opengl.GLRenderer: void detach$default(androidx.graphics.opengl.GLRenderer,androidx.graphics.opengl.GLRenderer$RenderTarget,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, r1, z0, null, 4, null);

        return;
    }

    public final void start()
    {
        androidx.graphics.opengl.GLRenderer r0;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        staticinvoke <androidx.graphics.opengl.GLRenderer: void start$default(androidx.graphics.opengl.GLRenderer,java.lang.String,int,java.lang.Object)>(r0, null, 1, null);

        return;
    }

    public final void requestRender(androidx.graphics.opengl.GLRenderer$RenderTarget)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        staticinvoke <androidx.graphics.opengl.GLRenderer: void requestRender$default(androidx.graphics.opengl.GLRenderer,androidx.graphics.opengl.GLRenderer$RenderTarget,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, r1, null, 2, null);

        return;
    }

    public final void resize(androidx.graphics.opengl.GLRenderer$RenderTarget, int, int)
    {
        androidx.graphics.opengl.GLRenderer r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        int i0, i1;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "target");

        staticinvoke <androidx.graphics.opengl.GLRenderer: void resize$default(androidx.graphics.opengl.GLRenderer,androidx.graphics.opengl.GLRenderer$RenderTarget,int,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, r1, i0, i1, null, 8, null);

        return;
    }

    public final void stop(boolean)
    {
        androidx.graphics.opengl.GLRenderer r0;
        boolean z0;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        z0 := @parameter0: boolean;

        staticinvoke <androidx.graphics.opengl.GLRenderer: void stop$default(androidx.graphics.opengl.GLRenderer,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, z0, null, 2, null);

        return;
    }

    private static final void detach$lambda$0(androidx.graphics.opengl.GLRenderer$RenderTarget, kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlin.jvm.functions.Function0 $r2;

        $r0 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$target");

        virtualinvoke $r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: void release$graphics_core_release()>();

        $r2 = virtualinvoke $r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: kotlin.jvm.functions.Function0 getOnDetach$graphics_core_release()>();

        interfaceinvoke $r2.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        if $r1 == null goto label1;

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

        goto label1;

     label1:
        return;
    }

    private static final void requestRender$lambda$2(kotlin.jvm.functions.Function1, androidx.graphics.opengl.GLRenderer$RenderTarget)
    {
        kotlin.jvm.functions.Function1 $r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: androidx.graphics.opengl.GLRenderer$RenderTarget;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$target");

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        return;
    }

    private static final void resize$lambda$3(kotlin.jvm.functions.Function1, androidx.graphics.opengl.GLRenderer$RenderTarget)
    {
        kotlin.jvm.functions.Function1 $r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r1;

        $r0 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: androidx.graphics.opengl.GLRenderer$RenderTarget;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$target");

        interfaceinvoke $r0.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r1);

        return;
    }

    private static final void stop$lambda$4(java.util.ArrayList, kotlin.jvm.functions.Function1, androidx.graphics.opengl.GLRenderer)
    {
        java.util.ArrayList $r0;
        kotlin.jvm.functions.Function1 $r1;
        androidx.graphics.opengl.GLRenderer r2;
        java.util.Iterator r3;
        androidx.graphics.opengl.GLRenderer$RenderTarget r4;
        boolean $z0;
        java.lang.Object $r6;
        kotlin.jvm.functions.Function0 $r7;

        $r0 := @parameter0: java.util.ArrayList;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        r2 := @parameter2: androidx.graphics.opengl.GLRenderer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$renderTargets");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "this$0");

        r3 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.graphics.opengl.GLRenderer$RenderTarget) $r6;

        virtualinvoke r4.<androidx.graphics.opengl.GLRenderer$RenderTarget: void release$graphics_core_release()>();

        $r7 = virtualinvoke r4.<androidx.graphics.opengl.GLRenderer$RenderTarget: kotlin.jvm.functions.Function0 getOnDetach$graphics_core_release()>();

        interfaceinvoke $r7.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label1;

     label2:
        if $r1 == null goto label3;

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r2);

        goto label3;

     label3:
        return;
    }

    public void <init>()
    {
        androidx.graphics.opengl.GLRenderer r0;

        r0 := @this: androidx.graphics.opengl.GLRenderer;

        specialinvoke r0.<androidx.graphics.opengl.GLRenderer: void <init>(kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, null, 3, null);

        return;
    }

    static void <clinit>()
    {
        androidx.graphics.opengl.GLRenderer$Companion $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        $r0 = new androidx.graphics.opengl.GLRenderer$Companion;

        specialinvoke $r0.<androidx.graphics.opengl.GLRenderer$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.graphics.opengl.GLRenderer: androidx.graphics.opengl.GLRenderer$Companion Companion> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <androidx.graphics.opengl.GLRenderer: java.util.concurrent.atomic.AtomicInteger sToken> = $r1;

        return;
    }

androidx.graphics.opengl.GLRenderer$1
<androidx.graphics.opengl.GLRenderer$1: androidx.graphics.opengl.GLRenderer$1 INSTANCE>
    void <init>()
    {
        androidx.graphics.opengl.GLRenderer$1 r0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final androidx.graphics.opengl.egl.EGLSpec invoke()
    {
        androidx.graphics.opengl.GLRenderer$1 r0;
        androidx.graphics.opengl.egl.EGLSpec $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$1;

        $r1 = <androidx.graphics.opengl.egl.EGLSpec: androidx.graphics.opengl.egl.EGLSpec V14>;

        return $r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.graphics.opengl.GLRenderer$1 r0;
        androidx.graphics.opengl.egl.EGLSpec $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$1;

        $r1 = virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$1: androidx.graphics.opengl.egl.EGLSpec invoke()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.graphics.opengl.GLRenderer$1 $r0;

        $r0 = new androidx.graphics.opengl.GLRenderer$1;

        specialinvoke $r0.<androidx.graphics.opengl.GLRenderer$1: void <init>()>();

        <androidx.graphics.opengl.GLRenderer$1: androidx.graphics.opengl.GLRenderer$1 INSTANCE> = $r0;

        return;
    }

androidx.graphics.opengl.GLRenderer$2
<androidx.graphics.opengl.GLRenderer$2: androidx.graphics.opengl.GLRenderer$2 INSTANCE>
    void <init>()
    {
        androidx.graphics.opengl.GLRenderer$2 r0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final android.opengl.EGLConfig invoke(androidx.graphics.opengl.egl.EGLManager)
    {
        androidx.graphics.opengl.GLRenderer$2 r0;
        androidx.graphics.opengl.egl.EGLManager $r1;
        androidx.graphics.opengl.egl.EGLConfigAttributes $r2;
        android.opengl.EGLConfig $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: androidx.graphics.opengl.GLRenderer$2;

        $r1 := @parameter0: androidx.graphics.opengl.egl.EGLManager;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$null");

        $r2 = <androidx.graphics.opengl.egl.EGLConfigAttributes: androidx.graphics.opengl.egl.EGLConfigAttributes RGBA_8888>;

        $r3 = virtualinvoke $r1.<androidx.graphics.opengl.egl.EGLManager: android.opengl.EGLConfig loadConfig(androidx.graphics.opengl.egl.EGLConfigAttributes)>($r2);

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to obtain config for 8 bit EGL configuration");

        throw $r4;

     label1:
        return $r3;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer$2 r0;
        java.lang.Object r1;
        androidx.graphics.opengl.egl.EGLManager $r2;
        android.opengl.EGLConfig $r3;

        r0 := @this: androidx.graphics.opengl.GLRenderer$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.graphics.opengl.egl.EGLManager) r1;

        $r3 = virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$2: android.opengl.EGLConfig invoke(androidx.graphics.opengl.egl.EGLManager)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.graphics.opengl.GLRenderer$2 $r0;

        $r0 = new androidx.graphics.opengl.GLRenderer$2;

        specialinvoke $r0.<androidx.graphics.opengl.GLRenderer$2: void <init>()>();

        <androidx.graphics.opengl.GLRenderer$2: androidx.graphics.opengl.GLRenderer$2 INSTANCE> = $r0;

        return;
    }

androidx.graphics.opengl.GLRenderer$attach$2
<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLThread $thread>
<androidx.graphics.opengl.GLRenderer$attach$2: int $token>
<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLRenderer$RenderCallback $renderer>
<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLRenderer$RenderTarget $renderTarget>
<androidx.graphics.opengl.GLRenderer$attach$2: java.util.concurrent.CountDownLatch $detachLatch>
    void <init>(androidx.graphics.opengl.GLThread, int, androidx.graphics.opengl.GLRenderer$RenderCallback, androidx.graphics.opengl.GLRenderer$RenderTarget, java.util.concurrent.CountDownLatch)
    {
        androidx.graphics.opengl.GLRenderer$attach$2 r0;
        androidx.graphics.opengl.GLThread $r1;
        int $i0;
        androidx.graphics.opengl.GLRenderer$RenderCallback $r2;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r3;
        java.util.concurrent.CountDownLatch $r4;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$2;

        $r1 := @parameter0: androidx.graphics.opengl.GLThread;

        $i0 := @parameter1: int;

        $r2 := @parameter2: androidx.graphics.opengl.GLRenderer$RenderCallback;

        $r3 := @parameter3: androidx.graphics.opengl.GLRenderer$RenderTarget;

        $r4 := @parameter4: java.util.concurrent.CountDownLatch;

        r0.<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLThread $thread> = $r1;

        r0.<androidx.graphics.opengl.GLRenderer$attach$2: int $token> = $i0;

        r0.<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLRenderer$RenderCallback $renderer> = $r2;

        r0.<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLRenderer$RenderTarget $renderTarget> = $r3;

        r0.<androidx.graphics.opengl.GLRenderer$attach$2: java.util.concurrent.CountDownLatch $detachLatch> = $r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSurfaceTextureAvailable(android.graphics.SurfaceTexture, int, int)
    {
        androidx.graphics.opengl.GLRenderer$attach$2 r0;
        android.graphics.SurfaceTexture r1;
        int i0, i1, $i2;
        android.view.Surface $r2;
        androidx.graphics.opengl.GLThread $r3;
        androidx.graphics.opengl.GLRenderer$RenderCallback $r4;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$2;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "surfaceTexture");

        $r3 = r0.<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLThread $thread>;

        $i2 = r0.<androidx.graphics.opengl.GLRenderer$attach$2: int $token>;

        $r2 = new android.view.Surface;

        specialinvoke $r2.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>(r1);

        $r4 = r0.<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLRenderer$RenderCallback $renderer>;

        virtualinvoke $r3.<androidx.graphics.opengl.GLThread: void attachSurface(int,android.view.Surface,int,int,androidx.graphics.opengl.GLRenderer$RenderCallback)>($i2, $r2, i0, i1, $r4);

        return;
    }

    public void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture, int, int)
    {
        androidx.graphics.opengl.GLRenderer$attach$2 r0;
        android.graphics.SurfaceTexture r1;
        int i0, i1;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r2, $r3;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$2;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "texture");

        $r2 = r0.<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLRenderer$RenderTarget $renderTarget>;

        staticinvoke <androidx.graphics.opengl.GLRenderer$RenderTarget: void resize$default(androidx.graphics.opengl.GLRenderer$RenderTarget,int,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r2, i0, i1, null, 4, null);

        $r3 = r0.<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLRenderer$RenderTarget $renderTarget>;

        staticinvoke <androidx.graphics.opengl.GLRenderer$RenderTarget: void requestRender$default(androidx.graphics.opengl.GLRenderer$RenderTarget,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r3, null, 1, null);

        return;
    }

    public boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)
    {
        androidx.graphics.opengl.GLRenderer$attach$2 r0;
        android.graphics.SurfaceTexture r1;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r2;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$2;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $r2 = r0.<androidx.graphics.opengl.GLRenderer$attach$2: androidx.graphics.opengl.GLRenderer$RenderTarget $renderTarget>;

        staticinvoke <androidx.graphics.opengl.GLRenderer$RenderTarget: void detach$default(androidx.graphics.opengl.GLRenderer$RenderTarget,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r2, 1, null, 2, null);

        $r3 = r0.<androidx.graphics.opengl.GLRenderer$attach$2: java.util.concurrent.CountDownLatch $detachLatch>;

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: void await()>();

        return 1;
    }

    public void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)
    {
        androidx.graphics.opengl.GLRenderer$attach$2 r0;
        android.graphics.SurfaceTexture r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$2;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        return;
    }

androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1
<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: androidx.graphics.opengl.GLRenderer$attach$callback$1 this$0>
<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: android.view.SurfaceHolder $holder>
    void <init>(androidx.graphics.opengl.GLRenderer$attach$callback$1, android.view.SurfaceHolder)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1 r0;
        androidx.graphics.opengl.GLRenderer$attach$callback$1 $r1;
        android.view.SurfaceHolder $r2;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1;

        $r1 := @parameter0: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        $r2 := @parameter1: android.view.SurfaceHolder;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: androidx.graphics.opengl.GLRenderer$attach$callback$1 this$0> = $r1;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: android.view.SurfaceHolder $holder> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1 r0;
        androidx.graphics.opengl.GLRenderer$attach$callback$1 $r1, $r2, $r5, $r7;
        android.view.SurfaceHolder$Callback $r3;
        android.view.SurfaceHolder $r4;
        java.util.concurrent.CountDownLatch $r6, $r8;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1;

        $r1 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: androidx.graphics.opengl.GLRenderer$attach$callback$1 this$0>;

        virtualinvoke $r1.<androidx.graphics.opengl.GLRenderer$attach$callback$1: void setAttached(boolean)>(0);

        $r4 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: android.view.SurfaceHolder $holder>;

        $r2 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: androidx.graphics.opengl.GLRenderer$attach$callback$1 this$0>;

        $r3 = (android.view.SurfaceHolder$Callback) $r2;

        interfaceinvoke $r4.<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>($r3);

        $r5 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: androidx.graphics.opengl.GLRenderer$attach$callback$1 this$0>;

        $r6 = virtualinvoke $r5.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch getRenderLatch()>();

        if $r6 == null goto label1;

        virtualinvoke $r6.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label1;

     label1:
        $r7 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: androidx.graphics.opengl.GLRenderer$attach$callback$1 this$0>;

        $r8 = virtualinvoke $r7.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch getDetachLatch()>();

        virtualinvoke $r8.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1;

        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1
<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1: java.util.concurrent.CountDownLatch $latch>
    void <init>(java.util.concurrent.CountDownLatch)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1 r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1;

        $r1 := @parameter0: java.util.concurrent.CountDownLatch;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1: java.util.concurrent.CountDownLatch $latch> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.graphics.opengl.GLRenderer$RenderTarget)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1 r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        java.util.concurrent.CountDownLatch $r2;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1: java.util.concurrent.CountDownLatch $latch>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1 r0;
        java.lang.Object r1;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.graphics.opengl.GLRenderer$RenderTarget) r1;

        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1: void invoke(androidx.graphics.opengl.GLRenderer$RenderTarget)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1
<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1: java.lang.Runnable $drawingFinished>
    void <init>(java.lang.Runnable)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1 r0;
        java.lang.Runnable $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1;

        $r1 := @parameter0: java.lang.Runnable;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1: java.lang.Runnable $drawingFinished> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.graphics.opengl.GLRenderer$RenderTarget)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1 r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1;

        r1 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1: java.lang.Runnable $drawingFinished>;

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1 r0;
        java.lang.Object r1;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.graphics.opengl.GLRenderer$RenderTarget) r1;

        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1: void invoke(androidx.graphics.opengl.GLRenderer$RenderTarget)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.graphics.opengl.GLRenderer$attach$callback$1
<androidx.graphics.opengl.GLRenderer$attach$callback$1: boolean isAttached>
<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch renderLatch>
<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch detachLatch>
<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget renderTarget>
<androidx.graphics.opengl.GLRenderer$attach$callback$1: int $token>
<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLThread $thread>
<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderCallback $renderer>
    void <init>(int, androidx.graphics.opengl.GLRenderer, android.view.SurfaceHolder, androidx.graphics.opengl.GLThread, androidx.graphics.opengl.GLRenderer$RenderCallback)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        int $i0;
        androidx.graphics.opengl.GLRenderer $r1;
        android.view.SurfaceHolder $r2;
        androidx.graphics.opengl.GLThread $r3;
        androidx.graphics.opengl.GLRenderer$RenderCallback $r4;
        java.util.concurrent.CountDownLatch $r5;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r6;
        androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1 $r7;
        kotlin.jvm.functions.Function0 $r8;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        $i0 := @parameter0: int;

        $r1 := @parameter1: androidx.graphics.opengl.GLRenderer;

        $r2 := @parameter2: android.view.SurfaceHolder;

        $r3 := @parameter3: androidx.graphics.opengl.GLThread;

        $r4 := @parameter4: androidx.graphics.opengl.GLRenderer$RenderCallback;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: int $token> = $i0;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLThread $thread> = $r3;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderCallback $renderer> = $r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch detachLatch> = $r5;

        $r6 = new androidx.graphics.opengl.GLRenderer$RenderTarget;

        $r7 = new androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1;

        specialinvoke $r7.<androidx.graphics.opengl.GLRenderer$attach$callback$1$renderTarget$1: void <init>(androidx.graphics.opengl.GLRenderer$attach$callback$1,android.view.SurfaceHolder)>(r0, $r2);

        $r8 = (kotlin.jvm.functions.Function0) $r7;

        specialinvoke $r6.<androidx.graphics.opengl.GLRenderer$RenderTarget: void <init>(int,androidx.graphics.opengl.GLRenderer,kotlin.jvm.functions.Function0)>($i0, $r1, $r8);

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget renderTarget> = $r6;

        return;
    }

    public final boolean isAttached()
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        boolean $z0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        $z0 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: boolean isAttached>;

        return $z0;
    }

    public final void setAttached(boolean)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        boolean z0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        z0 := @parameter0: boolean;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: boolean isAttached> = z0;

        return;
    }

    public final java.util.concurrent.CountDownLatch getRenderLatch()
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        $r1 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch renderLatch>;

        return $r1;
    }

    public final void setRenderLatch(java.util.concurrent.CountDownLatch)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        java.util.concurrent.CountDownLatch r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch renderLatch> = r1;

        return;
    }

    public final java.util.concurrent.CountDownLatch getDetachLatch()
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        $r1 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch detachLatch>;

        return $r1;
    }

    public final androidx.graphics.opengl.GLRenderer$RenderTarget getRenderTarget()
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        $r1 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget renderTarget>;

        return $r1;
    }

    public void surfaceRedrawNeeded(android.view.SurfaceHolder)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        android.view.SurfaceHolder r1;
        java.util.concurrent.CountDownLatch r2, r3, r4, $r5, $r6;
        long $l0;
        byte $b1;
        androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1 $r7;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r8;
        kotlin.jvm.functions.Function1 $r9;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        r1 := @parameter0: android.view.SurfaceHolder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $r5 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch detachLatch>;

        $l0 = virtualinvoke $r5.<java.util.concurrent.CountDownLatch: long getCount()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $r6 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r6.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r3 = $r6;

        r4 = r3;

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch renderLatch> = r4;

        r2 = r3;

        $r8 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget renderTarget>;

        $r7 = new androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1;

        specialinvoke $r7.<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeeded$1: void <init>(java.util.concurrent.CountDownLatch)>(r2);

        $r9 = (kotlin.jvm.functions.Function1) $r7;

        virtualinvoke $r8.<androidx.graphics.opengl.GLRenderer$RenderTarget: void requestRender(kotlin.jvm.functions.Function1)>($r9);

        virtualinvoke r2.<java.util.concurrent.CountDownLatch: void await()>();

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch renderLatch> = null;

     label1:
        return;
    }

    public void surfaceRedrawNeededAsync(android.view.SurfaceHolder, java.lang.Runnable)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        android.view.SurfaceHolder r1;
        java.lang.Runnable r2;
        androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1 $r3;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r4;
        kotlin.jvm.functions.Function1 $r5;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        r1 := @parameter0: android.view.SurfaceHolder;

        r2 := @parameter1: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "holder");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "drawingFinished");

        $r4 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget renderTarget>;

        $r3 = new androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1;

        specialinvoke $r3.<androidx.graphics.opengl.GLRenderer$attach$callback$1$surfaceRedrawNeededAsync$1: void <init>(java.lang.Runnable)>(r2);

        $r5 = (kotlin.jvm.functions.Function1) $r3;

        virtualinvoke $r4.<androidx.graphics.opengl.GLRenderer$RenderTarget: void requestRender(kotlin.jvm.functions.Function1)>($r5);

        return;
    }

    public void surfaceCreated(android.view.SurfaceHolder)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        android.view.SurfaceHolder r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        r1 := @parameter0: android.view.SurfaceHolder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "holder");

        return;
    }

    public void surfaceChanged(android.view.SurfaceHolder, int, int, int)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        android.view.SurfaceHolder r1;
        int i0, i1, i2, $i3;
        boolean $z0;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r2, $r3;
        androidx.graphics.opengl.GLThread $r4;
        android.view.Surface $r5;
        androidx.graphics.opengl.GLRenderer$RenderCallback $r6;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        r1 := @parameter0: android.view.SurfaceHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "holder");

        $z0 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: boolean isAttached>;

        if $z0 != 0 goto label1;

        $r4 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLThread $thread>;

        $i3 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: int $token>;

        $r5 = interfaceinvoke r1.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        $r6 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderCallback $renderer>;

        virtualinvoke $r4.<androidx.graphics.opengl.GLThread: void attachSurface(int,android.view.Surface,int,int,androidx.graphics.opengl.GLRenderer$RenderCallback)>($i3, $r5, i1, i2, $r6);

        r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: boolean isAttached> = 1;

        goto label2;

     label1:
        $r2 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget renderTarget>;

        staticinvoke <androidx.graphics.opengl.GLRenderer$RenderTarget: void resize$default(androidx.graphics.opengl.GLRenderer$RenderTarget,int,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r2, i1, i2, null, 4, null);

     label2:
        $r3 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget renderTarget>;

        staticinvoke <androidx.graphics.opengl.GLRenderer$RenderTarget: void requestRender$default(androidx.graphics.opengl.GLRenderer$RenderTarget,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r3, null, 1, null);

        return;
    }

    public void surfaceDestroyed(android.view.SurfaceHolder)
    {
        androidx.graphics.opengl.GLRenderer$attach$callback$1 r0;
        android.view.SurfaceHolder r1;
        androidx.graphics.opengl.GLRenderer$RenderTarget $r2;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$callback$1;

        r1 := @parameter0: android.view.SurfaceHolder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "holder");

        $r2 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: androidx.graphics.opengl.GLRenderer$RenderTarget renderTarget>;

        staticinvoke <androidx.graphics.opengl.GLRenderer$RenderTarget: void detach$default(androidx.graphics.opengl.GLRenderer$RenderTarget,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r2, 1, null, 2, null);

        $r3 = r0.<androidx.graphics.opengl.GLRenderer$attach$callback$1: java.util.concurrent.CountDownLatch detachLatch>;

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: void await()>();

        return;
    }

androidx.graphics.opengl.GLRenderer$attach$renderTarget$1
<androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: android.view.TextureView $textureView>
<androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: java.util.concurrent.CountDownLatch $detachLatch>
    void <init>(android.view.TextureView, java.util.concurrent.CountDownLatch)
    {
        androidx.graphics.opengl.GLRenderer$attach$renderTarget$1 r0;
        android.view.TextureView $r1;
        java.util.concurrent.CountDownLatch $r2;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$renderTarget$1;

        $r1 := @parameter0: android.view.TextureView;

        $r2 := @parameter1: java.util.concurrent.CountDownLatch;

        r0.<androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: android.view.TextureView $textureView> = $r1;

        r0.<androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: java.util.concurrent.CountDownLatch $detachLatch> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.graphics.opengl.GLRenderer$attach$renderTarget$1 r0;
        android.view.TextureView $r1, $r4;
        android.os.Handler $r2;
        java.util.concurrent.CountDownLatch $r3;
        java.lang.Runnable $r5;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$renderTarget$1;

        $r1 = r0.<androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: android.view.TextureView $textureView>;

        $r2 = virtualinvoke $r1.<android.view.TextureView: android.os.Handler getHandler()>();

        if $r2 == null goto label1;

        $r4 = r0.<androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: android.view.TextureView $textureView>;

        $r5 = dynamicinvoke "run" <java.lang.Runnable (android.view.TextureView)>($r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: void invoke$lambda$0(android.view.TextureView)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        goto label1;

     label1:
        $r3 = r0.<androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: java.util.concurrent.CountDownLatch $detachLatch>;

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    private static final void invoke$lambda$0(android.view.TextureView)
    {
        android.view.TextureView $r0;

        $r0 := @parameter0: android.view.TextureView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$textureView");

        virtualinvoke $r0.<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)>(null);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.graphics.opengl.GLRenderer$attach$renderTarget$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$attach$renderTarget$1;

        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$attach$renderTarget$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.graphics.opengl.GLRenderer$Companion
    private void <init>()
    {
        androidx.graphics.opengl.GLRenderer$Companion r0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.graphics.opengl.GLRenderer$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.graphics.opengl.GLRenderer$Companion: void <init>()>();

        return;
    }

androidx.graphics.opengl.GLRenderer$EGLContextCallback
<androidx.graphics.opengl.GLRenderer$EGLContextCallback: void onEGLContextCreated(androidx.graphics.opengl.egl.EGLManager)>
<androidx.graphics.opengl.GLRenderer$EGLContextCallback: void onEGLContextDestroyed(androidx.graphics.opengl.egl.EGLManager)>
androidx.graphics.opengl.GLRenderer$RenderCallback$DefaultImpls
    public static android.opengl.EGLSurface onSurfaceCreated(androidx.graphics.opengl.GLRenderer$RenderCallback, androidx.graphics.opengl.egl.EGLSpec, android.opengl.EGLConfig, android.view.Surface, int, int)
    {
        androidx.graphics.opengl.GLRenderer$RenderCallback $r0;
        androidx.graphics.opengl.egl.EGLSpec r1;
        android.opengl.EGLConfig r2;
        android.view.Surface r3;
        int i0, i1;
        android.opengl.EGLSurface $r4;

        $r0 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderCallback;

        r1 := @parameter1: androidx.graphics.opengl.egl.EGLSpec;

        r2 := @parameter2: android.opengl.EGLConfig;

        r3 := @parameter3: android.view.Surface;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "spec");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "config");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "surface");

        $r4 = interfaceinvoke r1.<androidx.graphics.opengl.egl.EGLSpec: android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLConfig,android.view.Surface,androidx.graphics.opengl.egl.EGLConfigAttributes)>(r2, r3, null);

        return $r4;
    }

androidx.graphics.opengl.GLRenderer$RenderCallback
<androidx.graphics.opengl.GLRenderer$RenderCallback: android.opengl.EGLSurface onSurfaceCreated(androidx.graphics.opengl.egl.EGLSpec,android.opengl.EGLConfig,android.view.Surface,int,int)>
<androidx.graphics.opengl.GLRenderer$RenderCallback: void onDrawFrame(androidx.graphics.opengl.egl.EGLManager)>
androidx.graphics.opengl.GLRenderer$RenderTarget$1
<androidx.graphics.opengl.GLRenderer$RenderTarget$1: androidx.graphics.opengl.GLRenderer$RenderTarget$1 INSTANCE>
    void <init>()
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget$1 r0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget$1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget$1 r0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget$1;

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget$1;

        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$RenderTarget$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget$1 $r0;

        $r0 = new androidx.graphics.opengl.GLRenderer$RenderTarget$1;

        specialinvoke $r0.<androidx.graphics.opengl.GLRenderer$RenderTarget$1: void <init>()>();

        <androidx.graphics.opengl.GLRenderer$RenderTarget$1: androidx.graphics.opengl.GLRenderer$RenderTarget$1 INSTANCE> = $r0;

        return;
    }

androidx.graphics.opengl.GLRenderer$RenderTarget
<androidx.graphics.opengl.GLRenderer$RenderTarget: int token>
<androidx.graphics.opengl.GLRenderer$RenderTarget: kotlin.jvm.functions.Function0 onDetach>
<androidx.graphics.opengl.GLRenderer$RenderTarget: androidx.graphics.opengl.GLRenderer mManager>
    public void <init>(int, androidx.graphics.opengl.GLRenderer, kotlin.jvm.functions.Function0)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        int i0;
        androidx.graphics.opengl.GLRenderer r1;
        kotlin.jvm.functions.Function0 r2;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.graphics.opengl.GLRenderer;

        r2 := @parameter2: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "glManager");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "onDetach");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: int token> = i0;

        r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: kotlin.jvm.functions.Function0 onDetach> = r2;

        r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: androidx.graphics.opengl.GLRenderer mManager> = r1;

        return;
    }

    public void <init>(int, androidx.graphics.opengl.GLRenderer, kotlin.jvm.functions.Function0, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        int i0, i1, $i2;
        androidx.graphics.opengl.GLRenderer r1;
        kotlin.jvm.internal.DefaultConstructorMarker r2;
        androidx.graphics.opengl.GLRenderer$RenderTarget$1 $r3;
        kotlin.jvm.functions.Function0 r4;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.graphics.opengl.GLRenderer;

        r4 := @parameter2: kotlin.jvm.functions.Function0;

        i1 := @parameter3: int;

        r2 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i2 = i1 & 4;

        if $i2 == 0 goto label1;

        $r3 = <androidx.graphics.opengl.GLRenderer$RenderTarget$1: androidx.graphics.opengl.GLRenderer$RenderTarget$1 INSTANCE>;

        r4 = (kotlin.jvm.functions.Function0) $r3;

     label1:
        specialinvoke r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: void <init>(int,androidx.graphics.opengl.GLRenderer,kotlin.jvm.functions.Function0)>(i0, r1, r4);

        return;
    }

    public final int getToken$graphics_core_release()
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        int $i0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        $i0 = r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: int token>;

        return $i0;
    }

    public final kotlin.jvm.functions.Function0 getOnDetach$graphics_core_release()
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        kotlin.jvm.functions.Function0 $r1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        $r1 = r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: kotlin.jvm.functions.Function0 onDetach>;

        return $r1;
    }

    public final void release$graphics_core_release()
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: androidx.graphics.opengl.GLRenderer mManager> = null;

        return;
    }

    public final void requestRender(kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        kotlin.jvm.functions.Function1 r1;
        androidx.graphics.opengl.GLRenderer $r2;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 = r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: androidx.graphics.opengl.GLRenderer mManager>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<androidx.graphics.opengl.GLRenderer: void requestRender(androidx.graphics.opengl.GLRenderer$RenderTarget,kotlin.jvm.functions.Function1)>(r0, r1);

        goto label1;

     label1:
        return;
    }

    public static void requestRender$default(androidx.graphics.opengl.GLRenderer$RenderTarget, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        int i0, $i1;
        java.lang.Object r1;
        kotlin.jvm.functions.Function1 r2;

        r0 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r2 = null;

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: void requestRender(kotlin.jvm.functions.Function1)>(r2);

        return;
    }

    public final boolean isAttached()
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        androidx.graphics.opengl.GLRenderer $r1;
        boolean $z0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        $r1 = r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: androidx.graphics.opengl.GLRenderer mManager>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void resize(int, int, kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        int i0, i1;
        kotlin.jvm.functions.Function1 r1;
        androidx.graphics.opengl.GLRenderer $r2;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: kotlin.jvm.functions.Function1;

        $r2 = r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: androidx.graphics.opengl.GLRenderer mManager>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<androidx.graphics.opengl.GLRenderer: void resize(androidx.graphics.opengl.GLRenderer$RenderTarget,int,int,kotlin.jvm.functions.Function1)>(r0, i0, i1, r1);

        goto label1;

     label1:
        return;
    }

    public static void resize$default(androidx.graphics.opengl.GLRenderer$RenderTarget, int, int, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        int i0, i1, i2, $i3;
        java.lang.Object r1;
        kotlin.jvm.functions.Function1 r2;

        r0 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: kotlin.jvm.functions.Function1;

        i2 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        $i3 = i2 & 4;

        if $i3 == 0 goto label1;

        r2 = null;

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: void resize(int,int,kotlin.jvm.functions.Function1)>(i0, i1, r2);

        return;
    }

    public final void detach(boolean, kotlin.jvm.functions.Function1)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        boolean z0;
        kotlin.jvm.functions.Function1 r1;
        androidx.graphics.opengl.GLRenderer $r2;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        z0 := @parameter0: boolean;

        r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 = r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: androidx.graphics.opengl.GLRenderer mManager>;

        if $r2 == null goto label1;

        virtualinvoke $r2.<androidx.graphics.opengl.GLRenderer: void detach(androidx.graphics.opengl.GLRenderer$RenderTarget,boolean,kotlin.jvm.functions.Function1)>(r0, z0, r1);

        goto label1;

     label1:
        return;
    }

    public static void detach$default(androidx.graphics.opengl.GLRenderer$RenderTarget, boolean, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        boolean z0;
        int i0, $i1;
        java.lang.Object r1;
        kotlin.jvm.functions.Function1 r2;

        r0 := @parameter0: androidx.graphics.opengl.GLRenderer$RenderTarget;

        z0 := @parameter1: boolean;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r2 = null;

     label1:
        virtualinvoke r0.<androidx.graphics.opengl.GLRenderer$RenderTarget: void detach(boolean,kotlin.jvm.functions.Function1)>(z0, r2);

        return;
    }

    public final void requestRender()
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        staticinvoke <androidx.graphics.opengl.GLRenderer$RenderTarget: void requestRender$default(androidx.graphics.opengl.GLRenderer$RenderTarget,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, null, 1, null);

        return;
    }

    public final void resize(int, int)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        int i0, i1;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <androidx.graphics.opengl.GLRenderer$RenderTarget: void resize$default(androidx.graphics.opengl.GLRenderer$RenderTarget,int,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, i0, i1, null, 4, null);

        return;
    }

    public final void detach(boolean)
    {
        androidx.graphics.opengl.GLRenderer$RenderTarget r0;
        boolean z0;

        r0 := @this: androidx.graphics.opengl.GLRenderer$RenderTarget;

        z0 := @parameter0: boolean;

        staticinvoke <androidx.graphics.opengl.GLRenderer$RenderTarget: void detach$default(androidx.graphics.opengl.GLRenderer$RenderTarget,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r0, z0, null, 2, null);

        return;
    }

