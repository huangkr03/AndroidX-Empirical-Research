androidx.work.impl.utils.IdGenerator
<androidx.work.impl.utils.IdGenerator: androidx.work.impl.WorkDatabase workDatabase>
    public void <init>(androidx.work.impl.WorkDatabase)
    {
        androidx.work.impl.utils.IdGenerator r0;
        androidx.work.impl.WorkDatabase r1;

        r0 := @this: androidx.work.impl.utils.IdGenerator;

        r1 := @parameter0: androidx.work.impl.WorkDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "workDatabase");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.impl.utils.IdGenerator: androidx.work.impl.WorkDatabase workDatabase> = r1;

        return;
    }

    public final int nextJobSchedulerIdWithRange(int, int)
    {
        androidx.work.impl.utils.IdGenerator r0;
        int i0, i1, $i2;
        androidx.work.impl.WorkDatabase $r1;
        java.util.concurrent.Callable $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        r0 := @this: androidx.work.impl.utils.IdGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.work.impl.utils.IdGenerator: androidx.work.impl.WorkDatabase workDatabase>;

        $r2 = dynamicinvoke "call" <java.util.concurrent.Callable (androidx.work.impl.utils.IdGenerator,int,int)>(r0, i0, i1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.work.impl.utils.IdGenerator: java.lang.Integer nextJobSchedulerIdWithRange$lambda$0(androidx.work.impl.utils.IdGenerator,int,int)>, methodtype: java.lang.Integer __METHODTYPE__());

        $r3 = virtualinvoke $r1.<androidx.work.impl.WorkDatabase: java.lang.Object runInTransaction(java.util.concurrent.Callable)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "workDatabase.runInTransa\u2026            id\n        })");

        $r4 = (java.lang.Number) $r3;

        $i2 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i2;
    }

    public final int nextAlarmManagerId()
    {
        androidx.work.impl.utils.IdGenerator r0;
        androidx.work.impl.WorkDatabase $r1;
        java.util.concurrent.Callable $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        int $i0;

        r0 := @this: androidx.work.impl.utils.IdGenerator;

        $r1 = r0.<androidx.work.impl.utils.IdGenerator: androidx.work.impl.WorkDatabase workDatabase>;

        $r2 = dynamicinvoke "call" <java.util.concurrent.Callable (androidx.work.impl.utils.IdGenerator)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.work.impl.utils.IdGenerator: java.lang.Integer nextAlarmManagerId$lambda$1(androidx.work.impl.utils.IdGenerator)>, methodtype: java.lang.Integer __METHODTYPE__());

        $r3 = virtualinvoke $r1.<androidx.work.impl.WorkDatabase: java.lang.Object runInTransaction(java.util.concurrent.Callable)>($r2);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "workDatabase.runInTransa\u2026ANAGER_ID_KEY)\n        })");

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;
    }

    private static final java.lang.Integer nextJobSchedulerIdWithRange$lambda$0(androidx.work.impl.utils.IdGenerator, int, int)
    {
        androidx.work.impl.utils.IdGenerator r0;
        int $i0, $i1, $i2, i3;
        androidx.work.impl.WorkDatabase $r1, $r3;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @parameter0: androidx.work.impl.utils.IdGenerator;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.work.impl.utils.IdGenerator: androidx.work.impl.WorkDatabase workDatabase>;

        i3 = staticinvoke <androidx.work.impl.utils.IdGeneratorKt: int access$nextId(androidx.work.impl.WorkDatabase,java.lang.String)>($r1, "next_job_scheduler_id");

        if $i0 > i3 goto label2;

        if i3 > $i1 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label4;

        i3 = $i0;

        $r3 = r0.<androidx.work.impl.utils.IdGenerator: androidx.work.impl.WorkDatabase workDatabase>;

        $i2 = i3 + 1;

        staticinvoke <androidx.work.impl.utils.IdGeneratorKt: void access$updatePreference(androidx.work.impl.WorkDatabase,java.lang.String,int)>($r3, "next_job_scheduler_id", $i2);

     label4:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        return $r2;
    }

    private static final java.lang.Integer nextAlarmManagerId$lambda$1(androidx.work.impl.utils.IdGenerator)
    {
        androidx.work.impl.utils.IdGenerator r0;
        androidx.work.impl.WorkDatabase $r1;
        int $i0;
        java.lang.Integer $r2;

        r0 := @parameter0: androidx.work.impl.utils.IdGenerator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r1 = r0.<androidx.work.impl.utils.IdGenerator: androidx.work.impl.WorkDatabase workDatabase>;

        $i0 = staticinvoke <androidx.work.impl.utils.IdGeneratorKt: int access$nextId(androidx.work.impl.WorkDatabase,java.lang.String)>($r1, "next_alarm_manager_id");

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

