androidx.constraintlayout.helper.widget.CircularFlow
<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String TAG>
<androidx.constraintlayout.helper.widget.CircularFlow: androidx.constraintlayout.widget.ConstraintLayout mContainer>
<androidx.constraintlayout.helper.widget.CircularFlow: int mViewCenter>
<androidx.constraintlayout.helper.widget.CircularFlow: int DEFAULT_RADIUS>
<androidx.constraintlayout.helper.widget.CircularFlow: float DEFAULT_ANGLE>
<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>
<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>
<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>
<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>
<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceAngles>
<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceRadius>
<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Float mReferenceDefaultAngle>
<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Integer mReferenceDefaultRadius>
    public void <init>(android.content.Context)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.content.Context r1;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<androidx.constraintlayout.widget.VirtualLayout: void <init>(android.content.Context)>(r1);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<androidx.constraintlayout.widget.VirtualLayout: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<androidx.constraintlayout.widget.VirtualLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        return;
    }

    public int[] getRadius()
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        int $i0;
        int[] $r1, $r2;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        $r1 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $i0 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        $r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0);

        return $r2;
    }

    public float[] getAngles()
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        int $i0;
        float[] $r1, $r2;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        $r1 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $i0 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        $r2 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>($r1, $i0);

        return $r2;
    }

    protected void init(android.util.AttributeSet)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.util.AttributeSet r1;
        android.content.res.TypedArray r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        android.content.Context $r3;
        int[] $r4;
        java.lang.Integer $r5, $r6;
        float $f0, $f1, $f2;
        java.lang.Float $r7, $r8;
        java.lang.String $r9, $r10, $r11, $r12;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.util.AttributeSet;

        specialinvoke r0.<androidx.constraintlayout.widget.VirtualLayout: void init(android.util.AttributeSet)>(r1);

        if r1 == null goto label8;

        $r3 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: android.content.Context getContext()>();

        $r4 = <androidx.constraintlayout.widget.R$styleable: int[] ConstraintLayout_Layout>;

        r2 = virtualinvoke $r3.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>(r1, $r4);

        i0 = virtualinvoke r2.<android.content.res.TypedArray: int getIndexCount()>();

        i11 = 0;

     label1:
        if i11 >= i0 goto label7;

        i1 = virtualinvoke r2.<android.content.res.TypedArray: int getIndex(int)>(i11);

        $i2 = <androidx.constraintlayout.widget.R$styleable: int ConstraintLayout_Layout_circularflow_viewCenter>;

        if i1 != $i2 goto label2;

        $i10 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i1, 0);

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mViewCenter> = $i10;

        goto label6;

     label2:
        $i3 = <androidx.constraintlayout.widget.R$styleable: int ConstraintLayout_Layout_circularflow_angles>;

        if i1 != $i3 goto label3;

        $r11 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.String getString(int)>(i1);

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceAngles> = $r11;

        $r12 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceAngles>;

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void setAngles(java.lang.String)>($r12);

        goto label6;

     label3:
        $i4 = <androidx.constraintlayout.widget.R$styleable: int ConstraintLayout_Layout_circularflow_radiusInDP>;

        if i1 != $i4 goto label4;

        $r9 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.String getString(int)>(i1);

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceRadius> = $r9;

        $r10 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceRadius>;

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void setRadius(java.lang.String)>($r10);

        goto label6;

     label4:
        $i5 = <androidx.constraintlayout.widget.R$styleable: int ConstraintLayout_Layout_circularflow_defaultAngle>;

        if i1 != $i5 goto label5;

        $f0 = <androidx.constraintlayout.helper.widget.CircularFlow: float DEFAULT_ANGLE>;

        $f1 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(i1, $f0);

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Float mReferenceDefaultAngle> = $r7;

        $r8 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Float mReferenceDefaultAngle>;

        $f2 = virtualinvoke $r8.<java.lang.Float: float floatValue()>();

        virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void setDefaultAngle(float)>($f2);

        goto label6;

     label5:
        $i6 = <androidx.constraintlayout.widget.R$styleable: int ConstraintLayout_Layout_circularflow_defaultRadius>;

        if i1 != $i6 goto label6;

        $i7 = <androidx.constraintlayout.helper.widget.CircularFlow: int DEFAULT_RADIUS>;

        $i8 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i1, $i7);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Integer mReferenceDefaultRadius> = $r5;

        $r6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Integer mReferenceDefaultRadius>;

        $i9 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void setDefaultRadius(int)>($i9);

     label6:
        i11 = i11 + 1;

        goto label1;

     label7:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

     label8:
        return;
    }

    public void onAttachedToWindow()
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        java.lang.String $r1, $r2, $r8, $r10;
        java.lang.Float $r3, $r6;
        java.lang.Integer $r4, $r5;
        int $i0;
        float $f0;
        int[] $r7;
        float[] $r9;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        specialinvoke r0.<androidx.constraintlayout.widget.VirtualLayout: void onAttachedToWindow()>();

        $r1 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceAngles>;

        if $r1 == null goto label1;

        $r9 = newarray (float)[1];

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles> = $r9;

        $r10 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceAngles>;

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void setAngles(java.lang.String)>($r10);

     label1:
        $r2 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceRadius>;

        if $r2 == null goto label2;

        $r7 = newarray (int)[1];

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius> = $r7;

        $r8 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.String mReferenceRadius>;

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void setRadius(java.lang.String)>($r8);

     label2:
        $r3 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Float mReferenceDefaultAngle>;

        if $r3 == null goto label3;

        $r6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Float mReferenceDefaultAngle>;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void setDefaultAngle(float)>($f0);

     label3:
        $r4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Integer mReferenceDefaultRadius>;

        if $r4 == null goto label4;

        $r5 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Integer mReferenceDefaultRadius>;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void setDefaultRadius(int)>($i0);

     label4:
        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void anchorReferences()>();

        return;
    }

    private void anchorReferences()
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.view.View r1;
        androidx.constraintlayout.widget.ConstraintLayout$LayoutParams r2;
        android.view.ViewParent $r3;
        androidx.constraintlayout.widget.ConstraintLayout $r4, $r6;
        int $i0, $i1, $i2, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, $i20;
        int[] $r5, $r7, $r34, $r35, $r36, $r37, $r38, $r39;
        java.lang.Integer $r8, $r12, $r21, $r33;
        java.lang.StringBuilder $r10, $r15, $r19, $r24, r42, r43;
        java.util.HashMap $r11, $r20;
        java.lang.Object $r13, $r22;
        java.lang.String $r14, $r16, $r23, $r25;
        java.lang.Float $r17, $r26;
        float $f0, f1;
        byte $b6;
        float[] $r27, $r28, $r29, $r30, $r31, $r32, $r40;
        android.view.ViewGroup$LayoutParams $r41, r44;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        $r3 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: android.view.ViewParent getParent()>();

        $r4 = (androidx.constraintlayout.widget.ConstraintLayout) $r3;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: androidx.constraintlayout.widget.ConstraintLayout mContainer> = $r4;

        i18 = 0;

     label01:
        $i0 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCount>;

        if i18 >= $i0 goto label12;

        $r6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: androidx.constraintlayout.widget.ConstraintLayout mContainer>;

        $r5 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mIds>;

        $i1 = $r5[i18];

        r1 = virtualinvoke $r6.<androidx.constraintlayout.widget.ConstraintLayout: android.view.View getViewById(int)>($i1);

        if r1 != null goto label02;

        goto label11;

     label02:
        i19 = <androidx.constraintlayout.helper.widget.CircularFlow: int DEFAULT_RADIUS>;

        f1 = <androidx.constraintlayout.helper.widget.CircularFlow: float DEFAULT_ANGLE>;

        $r7 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        if $r7 == null goto label03;

        $r38 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $i17 = lengthof $r38;

        if i18 >= $i17 goto label03;

        $r39 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        i19 = $r39[i18];

        goto label06;

     label03:
        $r8 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Integer mReferenceDefaultRadius>;

        if $r8 == null goto label05;

        $r33 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Integer mReferenceDefaultRadius>;

        $i12 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        if $i12 == -1 goto label05;

        $i13 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        $i14 = $i13 + 1;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius> = $i14;

        $r34 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        if $r34 != null goto label04;

        $r37 = newarray (int)[1];

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius> = $r37;

     label04:
        $r35 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] getRadius()>();

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius> = $r35;

        $r36 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $i15 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        $i16 = $i15 - 1;

        $r36[$i16] = i19;

        goto label06;

     label05:
        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added radius to view with id: ");

        $r11 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.util.HashMap mMap>;

        $i2 = virtualinvoke r1.<android.view.View: int getId()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r13 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r12);

        $r14 = (java.lang.String) $r13;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CircularFlow", $r16);

     label06:
        $r40 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        if $r40 == null goto label07;

        $r31 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $i11 = lengthof $r31;

        if i18 >= $i11 goto label07;

        $r32 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        f1 = $r32[i18];

        goto label10;

     label07:
        $r17 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Float mReferenceDefaultAngle>;

        if $r17 == null goto label09;

        $r26 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.lang.Float mReferenceDefaultAngle>;

        $f0 = virtualinvoke $r26.<java.lang.Float: float floatValue()>();

        $b6 = $f0 cmpl -1.0F;

        if $b6 == 0 goto label09;

        $i7 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        $i8 = $i7 + 1;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle> = $i8;

        $r27 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        if $r27 != null goto label08;

        $r30 = newarray (float)[1];

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles> = $r30;

     label08:
        $r28 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] getAngles()>();

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles> = $r28;

        $r29 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $i9 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        $i10 = $i9 - 1;

        $r29[$i10] = f1;

        goto label10;

     label09:
        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added angle to view with id: ");

        $r20 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: java.util.HashMap mMap>;

        $i4 = virtualinvoke r1.<android.view.View: int getId()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r22 = virtualinvoke $r20.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r21);

        $r23 = (java.lang.String) $r22;

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CircularFlow", $r25);

     label10:
        $r41 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (androidx.constraintlayout.widget.ConstraintLayout$LayoutParams) $r41;

        r2.<androidx.constraintlayout.widget.ConstraintLayout$LayoutParams: float circleAngle> = f1;

        $i20 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mViewCenter>;

        r2.<androidx.constraintlayout.widget.ConstraintLayout$LayoutParams: int circleConstraint> = $i20;

        r2.<androidx.constraintlayout.widget.ConstraintLayout$LayoutParams: int circleRadius> = i19;

        r44 = (android.view.ViewGroup$LayoutParams) r2;

        virtualinvoke r1.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r44);

     label11:
        i18 = i18 + 1;

        goto label01;

     label12:
        virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void applyLayoutFeatures()>();

        return;
    }

    public void addViewToCircularFlow(android.view.View, int, float)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.view.View r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        float f0, $f1, $f2, $f3;
        boolean $z0;
        float[] $r2, $r3;
        int[] $r4, $r6;
        android.content.Context $r5;
        android.content.res.Resources $r7;
        android.util.DisplayMetrics $r8;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        $i1 = virtualinvoke r1.<android.view.View: int getId()>();

        $z0 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: boolean containsId(int)>($i1);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void addView(android.view.View)>(r1);

        $i2 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        $i3 = $i2 + 1;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle> = $i3;

        $r2 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] getAngles()>();

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles> = $r2;

        $r3 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $i4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        $i5 = $i4 - 1;

        $r3[$i5] = f0;

        $i6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        $i7 = $i6 + 1;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius> = $i7;

        $r4 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] getRadius()>();

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius> = $r4;

        $r6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $i8 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        $i9 = $i8 - 1;

        $f1 = (float) i0;

        $r5 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: android.content.Context myContext>;

        $r7 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f2 = $r8.<android.util.DisplayMetrics: float density>;

        $f3 = $f1 * $f2;

        $i10 = (int) $f3;

        $r6[$i9] = $i10;

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void anchorReferences()>();

        return;
    }

    public void updateRadius(android.view.View, int)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.view.View r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        int[] $r2, $r3, $r5;
        android.content.Context $r4;
        float $f0, $f1, $f2;
        android.content.res.Resources $r6;
        android.util.DisplayMetrics $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: boolean isUpdatable(android.view.View)>(r1);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("It was not possible to update radius to view with id: ");

        $i5 = virtualinvoke r1.<android.view.View: int getId()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CircularFlow", $r11);

        return;

     label1:
        $i2 = virtualinvoke r1.<android.view.View: int getId()>();

        i1 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int indexFromId(int)>($i2);

        $r2 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $i3 = lengthof $r2;

        if i1 <= $i3 goto label2;

        return;

     label2:
        $r3 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] getRadius()>();

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius> = $r3;

        $r5 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $f0 = (float) i0;

        $r4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: android.content.Context myContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = $r7.<android.util.DisplayMetrics: float density>;

        $f2 = $f0 * $f1;

        $i4 = (int) $f2;

        $r5[i1] = $i4;

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void anchorReferences()>();

        return;
    }

    public void updateAngle(android.view.View, float)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.view.View r1;
        float f0;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        float[] $r2, $r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        $z0 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: boolean isUpdatable(android.view.View)>(r1);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("It was not possible to update angle to view with id: ");

        $i3 = virtualinvoke r1.<android.view.View: int getId()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CircularFlow", $r8);

        return;

     label1:
        $i1 = virtualinvoke r1.<android.view.View: int getId()>();

        i0 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int indexFromId(int)>($i1);

        $r2 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $i2 = lengthof $r2;

        if i0 <= $i2 goto label2;

        return;

     label2:
        $r3 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] getAngles()>();

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles> = $r3;

        $r4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $r4[i0] = f0;

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void anchorReferences()>();

        return;
    }

    public void updateReference(android.view.View, int, float)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.view.View r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        float f0, $f1, $f2, $f3;
        boolean $z0;
        float[] $r2, $r9, $r10;
        int[] $r3, $r4, $r6;
        android.content.Context $r5;
        android.content.res.Resources $r7;
        android.util.DisplayMetrics $r8;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        $z0 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: boolean isUpdatable(android.view.View)>(r1);

        if $z0 != 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("It was not possible to update radius and angle to view with id: ");

        $i6 = virtualinvoke r1.<android.view.View: int getId()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CircularFlow", $r14);

        return;

     label1:
        $i2 = virtualinvoke r1.<android.view.View: int getId()>();

        i1 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int indexFromId(int)>($i2);

        $r2 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] getAngles()>();

        $i3 = lengthof $r2;

        if $i3 <= i1 goto label2;

        $r9 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] getAngles()>();

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles> = $r9;

        $r10 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $r10[i1] = f0;

     label2:
        $r3 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] getRadius()>();

        $i4 = lengthof $r3;

        if $i4 <= i1 goto label3;

        $r4 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] getRadius()>();

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius> = $r4;

        $r6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $f1 = (float) i0;

        $r5 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: android.content.Context myContext>;

        $r7 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f2 = $r8.<android.util.DisplayMetrics: float density>;

        $f3 = $f1 * $f2;

        $i5 = (int) $f3;

        $r6[i1] = $i5;

     label3:
        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void anchorReferences()>();

        return;
    }

    public void setDefaultAngle(float)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        float f0;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        f0 := @parameter0: float;

        <androidx.constraintlayout.helper.widget.CircularFlow: float DEFAULT_ANGLE> = f0;

        return;
    }

    public void setDefaultRadius(int)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        int i0;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        i0 := @parameter0: int;

        <androidx.constraintlayout.helper.widget.CircularFlow: int DEFAULT_RADIUS> = i0;

        return;
    }

    public int removeView(android.view.View)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.view.View r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        androidx.constraintlayout.widget.ConstraintSet r2, $r3;
        androidx.constraintlayout.widget.ConstraintLayout $r4, $r5;
        float[] $r6, $r10, $r11;
        int[] $r7, $r8, $r9;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.view.View;

        i0 = specialinvoke r0.<androidx.constraintlayout.widget.VirtualLayout: int removeView(android.view.View)>(r1);

        if i0 != -1 goto label1;

        return i0;

     label1:
        $r3 = new androidx.constraintlayout.widget.ConstraintSet;

        specialinvoke $r3.<androidx.constraintlayout.widget.ConstraintSet: void <init>()>();

        r2 = $r3;

        $r4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: androidx.constraintlayout.widget.ConstraintLayout mContainer>;

        virtualinvoke r2.<androidx.constraintlayout.widget.ConstraintSet: void clone(androidx.constraintlayout.widget.ConstraintLayout)>($r4);

        $i1 = virtualinvoke r1.<android.view.View: int getId()>();

        virtualinvoke r2.<androidx.constraintlayout.widget.ConstraintSet: void clear(int,int)>($i1, 8);

        $r5 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: androidx.constraintlayout.widget.ConstraintLayout mContainer>;

        virtualinvoke r2.<androidx.constraintlayout.widget.ConstraintSet: void applyTo(androidx.constraintlayout.widget.ConstraintLayout)>($r5);

        $r6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $i2 = lengthof $r6;

        if i0 >= $i2 goto label2;

        $r10 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $r11 = specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] removeAngle(float[],int)>($r10, i0);

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles> = $r11;

        $i6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        $i7 = $i6 - 1;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle> = $i7;

     label2:
        $r7 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $i3 = lengthof $r7;

        if i0 >= $i3 goto label3;

        $r8 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $r9 = specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] removeRadius(int[],int)>($r8, i0);

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius> = $r9;

        $i4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        $i5 = $i4 - 1;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius> = $i5;

     label3:
        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void anchorReferences()>();

        return i0;
    }

    private float[] removeAngle(float[], int)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        float[] r1, $r2;
        int i0, $i1;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        if r1 == null goto label1;

        if i0 < 0 goto label1;

        $i1 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        if i0 < $i1 goto label2;

     label1:
        return r1;

     label2:
        $r2 = staticinvoke <androidx.constraintlayout.helper.widget.CircularFlow: float[] removeElementFromArray(float[],int)>(r1, i0);

        return $r2;
    }

    private int[] removeRadius(int[], int)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        int[] r1, $r2;
        int i0, $i1;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        if r1 == null goto label1;

        if i0 < 0 goto label1;

        $i1 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        if i0 < $i1 goto label2;

     label1:
        return r1;

     label2:
        $r2 = staticinvoke <androidx.constraintlayout.helper.widget.CircularFlow: int[] removeElementFromArray(int[],int)>(r1, i0);

        return $r2;
    }

    private void setAngles(java.lang.String)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        java.lang.String r1, $r2, $r3, $r4, $r5;
        int i0, i1;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return;

     label1:
        i1 = 0;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle> = 0;

     label2:
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(44, i1);

        if i0 != -1 goto label3;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void addAngle(java.lang.String)>($r5);

        goto label4;

     label3:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i0);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void addAngle(java.lang.String)>($r3);

        i1 = i0 + 1;

        goto label2;

     label4:
        return;
    }

    private void setRadius(java.lang.String)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        java.lang.String r1, $r2, $r3, $r4, $r5;
        int i0, i1;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return;

     label1:
        i1 = 0;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius> = 0;

     label2:
        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(44, i1);

        if i0 != -1 goto label3;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void addRadius(java.lang.String)>($r5);

        goto label4;

     label3:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i0);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        specialinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: void addRadius(java.lang.String)>($r3);

        i1 = i0 + 1;

        goto label2;

     label4:
        return;
    }

    private void addAngle(java.lang.String)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        java.lang.String r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.content.Context $r2;
        float[] $r3, $r4, $r5, $r6, $r7, $r8;
        float $f0;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: android.content.Context myContext>;

        if $r2 != null goto label3;

        return;

     label3:
        $r3 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        if $r3 != null goto label4;

        return;

     label4:
        $i1 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        $i3 = $i1 + 1;

        $r4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $i2 = lengthof $r4;

        if $i3 <= $i2 goto label5;

        $r7 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $r6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $i8 = lengthof $r6;

        $i9 = $i8 + 1;

        $r8 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>($r7, $i9);

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles> = $r8;

     label5:
        $r5 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: float[] mAngles>;

        $i4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        $f0 = (float) $i5;

        $r5[$i4] = $f0;

        $i6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle>;

        $i7 = $i6 + 1;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountAngle> = $i7;

        return;
    }

    private void addRadius(java.lang.String)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        java.lang.String r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.content.Context $r2, $r6;
        int[] $r3, $r4, $r5, $r9, $r10, $r11;
        float $f0, $f1, $f2;
        android.content.res.Resources $r7;
        android.util.DisplayMetrics $r8;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: android.content.Context myContext>;

        if $r2 != null goto label3;

        return;

     label3:
        $r3 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        if $r3 != null goto label4;

        return;

     label4:
        $i1 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        $i3 = $i1 + 1;

        $r4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $i2 = lengthof $r4;

        if $i3 <= $i2 goto label5;

        $r10 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $r9 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $i9 = lengthof $r9;

        $i10 = $i9 + 1;

        $r11 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r10, $i10);

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius> = $r11;

     label5:
        $r5 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int[] mRadius>;

        $i4 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        $f0 = (float) $i5;

        $r6 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: android.content.Context myContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = $r8.<android.util.DisplayMetrics: float density>;

        $f2 = $f0 * $f1;

        $i6 = (int) $f2;

        $r5[$i4] = $i6;

        $i7 = r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius>;

        $i8 = $i7 + 1;

        r0.<androidx.constraintlayout.helper.widget.CircularFlow: int mCountRadius> = $i8;

        return;
    }

    public static int[] removeElementFromArray(int[], int)
    {
        int[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        r1 = newarray (int)[$i2];

        i6 = 0;

        i7 = 0;

     label1:
        $i3 = lengthof r0;

        if i6 >= $i3 goto label4;

        if i6 != i0 goto label2;

        goto label3;

     label2:
        $i4 = i7;

        i7 = i7 + 1;

        $i5 = r0[i6];

        r1[$i4] = $i5;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        return r1;
    }

    public static float[] removeElementFromArray(float[], int)
    {
        float[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        float $f0;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        r1 = newarray (float)[$i2];

        i5 = 0;

        i6 = 0;

     label1:
        $i3 = lengthof r0;

        if i5 >= $i3 goto label4;

        if i5 != i0 goto label2;

        goto label3;

     label2:
        $i4 = i6;

        i6 = i6 + 1;

        $f0 = r0[i5];

        r1[$i4] = $f0;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return r1;
    }

    public boolean isUpdatable(android.view.View)
    {
        androidx.constraintlayout.helper.widget.CircularFlow r0;
        android.view.View r1;
        int i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: androidx.constraintlayout.helper.widget.CircularFlow;

        r1 := @parameter0: android.view.View;

        $i1 = virtualinvoke r1.<android.view.View: int getId()>();

        $z0 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: boolean containsId(int)>($i1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r1.<android.view.View: int getId()>();

        i0 = virtualinvoke r0.<androidx.constraintlayout.helper.widget.CircularFlow: int indexFromId(int)>($i2);

        if i0 == -1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    static void <clinit>()
    {
        <androidx.constraintlayout.helper.widget.CircularFlow: int DEFAULT_RADIUS> = 0;

        <androidx.constraintlayout.helper.widget.CircularFlow: float DEFAULT_ANGLE> = 0.0F;

        return;
    }

