com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion Companion>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.common.flogger.FluentLogger logger>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel _diagnosticsChannel>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: kotlin.jvm.functions.Function2 diagnosticsChannelFactory>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: io.grpc.ManagedChannel managedChannel>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: kotlin.jvm.functions.Function1 managedChannelBuilderFactory>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: int serverPort>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>
    static void <clinit>()
    {
        com.google.common.flogger.FluentLogger $r0;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion $r1;

        $r1 = new com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion;

        specialinvoke $r1.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion Companion> = $r1;

        $r0 = staticinvoke <com.google.common.flogger.FluentLogger: com.google.common.flogger.FluentLogger forEnclosingClass()>();

        <com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.common.flogger.FluentLogger logger> = $r0;

        return;
    }

    public void <init>(int, kotlin.jvm.functions.Function1, com.google.testing.platform.lib.coroutines.scope.JobScope)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        int $i0;
        kotlin.jvm.functions.Function1 $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion $r3;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1 $r4;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $i0 := @parameter0: int;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: com.google.testing.platform.lib.coroutines.scope.JobScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "managedChannelBuilderFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "workerScope");

        $r4 = new com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1;

        $r3 = <com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion Companion>;

        specialinvoke $r4.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1: void <init>(java.lang.Object)>($r3);

        specialinvoke $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: void <init>(int,kotlin.jvm.functions.Function1,com.google.testing.platform.lib.coroutines.scope.JobScope,kotlin.jvm.functions.Function2)>($i0, $r1, $r2, $r4);

        return;
    }

    public void <init>(int, kotlin.jvm.functions.Function1, com.google.testing.platform.lib.coroutines.scope.JobScope, kotlin.jvm.functions.Function2)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        int $i0;
        kotlin.jvm.functions.Function1 $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;
        kotlin.jvm.functions.Function2 $r3;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $i0 := @parameter0: int;

        $r1 := @parameter1: kotlin.jvm.functions.Function1;

        $r2 := @parameter2: com.google.testing.platform.lib.coroutines.scope.JobScope;

        $r3 := @parameter3: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "managedChannelBuilderFactory");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "workerScope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "diagnosticsChannelFactory");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: int serverPort> = $i0;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: kotlin.jvm.functions.Function1 managedChannelBuilderFactory> = $r1;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope> = $r2;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: kotlin.jvm.functions.Function2 diagnosticsChannelFactory> = $r3;

        return;
    }

    public kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlinx.coroutines.ChildHandle $r1;
        kotlinx.coroutines.ChildJob $r2;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r3;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 := @parameter0: kotlinx.coroutines.ChildJob;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "child");

        $r3 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r1 = interfaceinvoke $r3.<com.google.testing.platform.lib.coroutines.scope.JobScope: kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)>($r2);

        return $r1;
    }

    public void cancel(java.util.concurrent.CancellationException)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        java.util.concurrent.CancellationException $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 := @parameter0: java.util.concurrent.CancellationException;

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        interfaceinvoke $r2.<com.google.testing.platform.lib.coroutines.scope.JobScope: void cancel(java.util.concurrent.CancellationException)>($r1);

        return;
    }

    public boolean complete()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        boolean $z0;
        com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel _diagnosticsChannel>;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel: boolean complete()>();

     label1:
        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $z0 = interfaceinvoke $r2.<com.google.testing.platform.lib.coroutines.scope.JobScope: boolean complete()>();

        return $z0;
    }

    public boolean completeExceptionally(java.lang.Throwable)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        boolean $z0;
        java.lang.Throwable $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "exception");

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $z0 = interfaceinvoke $r2.<com.google.testing.platform.lib.coroutines.scope.JobScope: boolean completeExceptionally(java.lang.Throwable)>($r1);

        return $z0;
    }

    public void connect()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        io.grpc.ManagedChannel $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.Object $r5;
        io.grpc.ManagedChannelBuilder $r6;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1 $r7;
        com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub $r8;
        kotlin.jvm.functions.Function2 $r9;
        com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel $r10;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: io.grpc.ManagedChannel managedChannel>;

        if $r1 != null goto label1;

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: kotlin.jvm.functions.Function1 managedChannelBuilderFactory>;

        $i0 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: int serverPort>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("localhost:");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        $r6 = (io.grpc.ManagedChannelBuilder) $r5;

        $r7 = new com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1;

        specialinvoke $r7.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1: void <init>(com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl)>($r0);

        $r6 = virtualinvoke $r6.<io.grpc.ManagedChannelBuilder: io.grpc.ManagedChannelBuilder executor(java.util.concurrent.Executor)>($r7);

        $r6 = virtualinvoke $r6.<io.grpc.ManagedChannelBuilder: io.grpc.ManagedChannelBuilder keepAliveWithoutCalls(boolean)>(1);

        $r6 = virtualinvoke $r6.<io.grpc.ManagedChannelBuilder: io.grpc.ManagedChannelBuilder usePlaintext()>();

        $r1 = virtualinvoke $r6.<io.grpc.ManagedChannelBuilder: io.grpc.ManagedChannel build()>();

     label1:
        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: io.grpc.ManagedChannel managedChannel> = $r1;

        $r8 = staticinvoke <com.google.testing.platform.proto.api.android.TestOrchestratorGrpc: com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub newStub(io.grpc.Channel)>($r1);

        $r9 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: kotlin.jvm.functions.Function2 diagnosticsChannelFactory>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "stub");

        $r5 = interfaceinvoke $r9.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r0, $r8);

        $r10 = (com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel) $r5;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel _diagnosticsChannel> = $r10;

        return;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r3;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "operation");

        $r3 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r2 = interfaceinvoke $r3.<com.google.testing.platform.lib.coroutines.scope.JobScope: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)>($r2, $r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlin.coroutines.CoroutineContext$Element $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r3;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "key");

        $r3 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r1 = interfaceinvoke $r3.<com.google.testing.platform.lib.coroutines.scope.JobScope: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        return $r1;
    }

    public java.util.concurrent.CancellationException getCancellationException()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        java.util.concurrent.CancellationException $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r1 = interfaceinvoke $r2.<com.google.testing.platform.lib.coroutines.scope.JobScope: java.util.concurrent.CancellationException getCancellationException()>();

        return $r1;
    }

    public kotlin.sequences.Sequence getChildren()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlin.sequences.Sequence $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r1 = interfaceinvoke $r2.<com.google.testing.platform.lib.coroutines.scope.JobScope: kotlin.sequences.Sequence getChildren()>();

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext getCoroutineContext()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlin.coroutines.CoroutineContext $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r1 = interfaceinvoke $r2.<com.google.testing.platform.lib.coroutines.scope.JobScope: kotlin.coroutines.CoroutineContext getCoroutineContext()>();

        return $r1;
    }

    public com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel getDiagnosticsChannel()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalStateException $r4;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel _diagnosticsChannel>;

        if $r1 == null goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r1.<com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel: boolean isActive()>();

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r1 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel _diagnosticsChannel>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1);

        return $r1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("javaClass");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not connected, call connect before\n          |accessing the stream channel.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimMargin$default(java.lang.String,java.lang.String,int,java.lang.Object)>($r3, null, 1, null);

        $r4 = new java.lang.IllegalStateException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public kotlin.coroutines.CoroutineContext$Key getKey()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlin.coroutines.CoroutineContext$Key $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r1 = interfaceinvoke $r2.<com.google.testing.platform.lib.coroutines.scope.JobScope: kotlin.coroutines.CoroutineContext$Key getKey()>();

        return $r1;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlinx.coroutines.DisposableHandle $r1;
        kotlin.jvm.functions.Function1 $r2;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r3;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "handler");

        $r3 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r1 = interfaceinvoke $r3.<com.google.testing.platform.lib.coroutines.scope.JobScope: kotlinx.coroutines.DisposableHandle invokeOnCompletion(kotlin.jvm.functions.Function1)>($r2);

        return $r1;
    }

    public kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean, boolean, kotlin.jvm.functions.Function1)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        boolean $z0, $z1;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.coroutines.DisposableHandle $r2;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r3;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $z1 := @parameter0: boolean;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "handler");

        $r3 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r2 = interfaceinvoke $r3.<com.google.testing.platform.lib.coroutines.scope.JobScope: kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean,boolean,kotlin.jvm.functions.Function1)>($z1, $z0, $r1);

        return $r2;
    }

    public boolean isActive()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        boolean $z0;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r1;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $z0 = interfaceinvoke $r1.<com.google.testing.platform.lib.coroutines.scope.JobScope: boolean isActive()>();

        return $z0;
    }

    public boolean isCancelled()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        boolean $z0;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r1;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $z0 = interfaceinvoke $r1.<com.google.testing.platform.lib.coroutines.scope.JobScope: boolean isCancelled()>();

        return $z0;
    }

    public boolean isCompleted()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        boolean $z0;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r1;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $z0 = interfaceinvoke $r1.<com.google.testing.platform.lib.coroutines.scope.JobScope: boolean isCompleted()>();

        return $z0;
    }

    public java.lang.Object join(kotlin.coroutines.Continuation)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlin.coroutines.Continuation $r1;
        boolean $z0, $z1;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1 $r2;
        int $i0;
        java.lang.Object $r3, $r4, $r6;
        java.lang.IllegalStateException $r5;
        com.google.common.flogger.FluentLogger $r7;
        com.google.common.flogger.LoggingApi $r8;
        com.google.common.flogger.FluentLogger$Api $r9;
        com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel $r10;
        io.grpc.ManagedChannel $r11;
        java.lang.Boolean $r12;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r13;
        kotlin.Unit r14;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = $r1 instanceof com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1;

        if $z0 == 0 goto label01;

        $r2 = (com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1) $r1;

        $i0 = $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label>;

        $i0 = $i0 & -2147483648;

        if $i0 == 0 goto label01;

        $i0 = $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label>;

        $i0 = $i0 - -2147483648;

        $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label> = $i0;

        goto label02;

     label01:
        $r2 = new com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1;

        specialinvoke $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: void <init>(com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl,kotlin.coroutines.Continuation)>($r0, $r1);

     label02:
        $r3 = $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object result>;

        $r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label>;

        $z0 = 0;

        lookupswitch($i0)
        {
            case 0: goto label10;
            case 1: goto label09;
            case 2: goto label07;
            case 3: goto label05;
            case 4: goto label04;
            default: goto label03;
        };

     label03:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r5;

     label04:
        $r4 = $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object L$0>;

        $r0 = (com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl) $r4;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        goto label20;

     label05:
        $r6 = $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object L$0>;

        $r0 = (com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label06:
        goto label17;

     label07:
        $r6 = $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object L$0>;

        $r0 = (com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label08:
        goto label13;

     label09:
        $r6 = $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object L$0>;

        $r0 = (com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        goto label12;

     label10:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        $r7 = <com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.common.flogger.FluentLogger logger>;

        $r8 = virtualinvoke $r7.<com.google.common.flogger.FluentLogger: com.google.common.flogger.LoggingApi atFinest()>();

        $r9 = (com.google.common.flogger.FluentLogger$Api) $r8;

        staticinvoke <com.google.common.flogger.agent.SiteInjectedLoggingApi: void log(com.google.common.flogger.LoggingApi,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>($r9, "Joining stream channel.", "com/google/testing/platform/android/core/orchestration/strategy/TestDiagnosticsGrpcWorkerImpl", "join", 94, "TestDiagnosticsGrpcWorkerImpl.kt");

        $r10 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel _diagnosticsChannel>;

        if $r10 == null goto label12;

        $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object L$0> = $r0;

        $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label> = 1;

        $r3 = interfaceinvoke $r10.<com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel: java.lang.Object join(kotlin.coroutines.Continuation)>($r2);

        if $r3 == $r4 goto label11;

        goto label12;

     label11:
        return $r4;

     label12:
        $r7 = <com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.common.flogger.FluentLogger logger>;

        $r8 = virtualinvoke $r7.<com.google.common.flogger.FluentLogger: com.google.common.flogger.LoggingApi atFinest()>();

        $r9 = (com.google.common.flogger.FluentLogger$Api) $r8;

        staticinvoke <com.google.common.flogger.agent.SiteInjectedLoggingApi: void log(com.google.common.flogger.LoggingApi,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>($r9, "Shutting Down GRPC ManagedChannel.", "com/google/testing/platform/android/core/orchestration/strategy/TestDiagnosticsGrpcWorkerImpl", "join", 96, "TestDiagnosticsGrpcWorkerImpl.kt");

        $r11 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: io.grpc.ManagedChannel managedChannel>;

        if $r11 == null goto label16;

        $r11 = virtualinvoke $r11.<io.grpc.ManagedChannel: io.grpc.ManagedChannel shutdown()>();

        if $r11 == null goto label16;

        $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object L$0> = $r0;

        $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label> = 2;

        $r6 = staticinvoke <com.google.testing.platform.android.core.orchestration.strategy.ManagedChannelExtKt: java.lang.Object suspendUntilTermination(io.grpc.ManagedChannel,long,kotlin.coroutines.Continuation)>($r11, 2000L, $r2);

        $r3 = $r6;

        if $r6 == $r4 goto label15;

        goto label08;

     label13:
        $r12 = (java.lang.Boolean) $r3;

        $z1 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label14;

        $z0 = 1;

        goto label16;

     label14:
        goto label16;

     label15:
        return $r4;

     label16:
        if $z0 == 0 goto label19;

        $r11 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: io.grpc.ManagedChannel managedChannel>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r11);

        $r11 = virtualinvoke $r11.<io.grpc.ManagedChannel: io.grpc.ManagedChannel shutdownNow()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "managedChannel!!.shutdownNow()");

        $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object L$0> = $r0;

        $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label> = 3;

        $r6 = staticinvoke <com.google.testing.platform.android.core.orchestration.strategy.ManagedChannelExtKt: java.lang.Object suspendUntilTermination(io.grpc.ManagedChannel,long,kotlin.coroutines.Continuation)>($r11, 1000L, $r2);

        $r3 = $r6;

        if $r6 == $r4 goto label18;

        goto label06;

     label17:
        $r12 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label19;

        $r7 = <com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.common.flogger.FluentLogger logger>;

        $r8 = virtualinvoke $r7.<com.google.common.flogger.FluentLogger: com.google.common.flogger.LoggingApi atFinest()>();

        $r9 = (com.google.common.flogger.FluentLogger$Api) $r8;

        staticinvoke <com.google.common.flogger.agent.SiteInjectedLoggingApi: void log(com.google.common.flogger.LoggingApi,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>($r9, "Grpc Channel unable to shutdown forcefully, ensure connection is being closed.", "com/google/testing/platform/android/core/orchestration/strategy/TestDiagnosticsGrpcWorkerImpl", "join", 99, "TestDiagnosticsGrpcWorkerImpl.kt");

        goto label19;

     label18:
        return $r4;

     label19:
        $r7 = <com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.common.flogger.FluentLogger logger>;

        $r8 = virtualinvoke $r7.<com.google.common.flogger.FluentLogger: com.google.common.flogger.LoggingApi atFinest()>();

        $r9 = (com.google.common.flogger.FluentLogger$Api) $r8;

        staticinvoke <com.google.common.flogger.agent.SiteInjectedLoggingApi: void log(com.google.common.flogger.LoggingApi,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>($r9, "GrpcManagedChannel Shutdown Finished.", "com/google/testing/platform/android/core/orchestration/strategy/TestDiagnosticsGrpcWorkerImpl", "join", 104, "TestDiagnosticsGrpcWorkerImpl.kt");

        $r13 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object L$0> = $r0;

        $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label> = 4;

        $r3 = interfaceinvoke $r13.<com.google.testing.platform.lib.coroutines.scope.JobScope: java.lang.Object join(kotlin.coroutines.Continuation)>($r2);

        if $r3 != $r4 goto label20;

        return $r4;

     label20:
        $r7 = <com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.common.flogger.FluentLogger logger>;

        $r8 = virtualinvoke $r7.<com.google.common.flogger.FluentLogger: com.google.common.flogger.LoggingApi atFinest()>();

        $r9 = (com.google.common.flogger.FluentLogger$Api) $r8;

        staticinvoke <com.google.common.flogger.agent.SiteInjectedLoggingApi: void log(com.google.common.flogger.LoggingApi,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>($r9, "Worker Joined.", "com/google/testing/platform/android/core/orchestration/strategy/TestDiagnosticsGrpcWorkerImpl", "join", 106, "TestDiagnosticsGrpcWorkerImpl.kt");

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: io.grpc.ManagedChannel managedChannel> = null;

        r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r14;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r3;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "key");

        $r3 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r1 = interfaceinvoke $r3.<com.google.testing.platform.lib.coroutines.scope.JobScope: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)>($r2);

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        kotlin.coroutines.CoroutineContext $r1;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "context");

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $r1 = interfaceinvoke $r2.<com.google.testing.platform.lib.coroutines.scope.JobScope: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r1);

        return $r1;
    }

    public boolean start()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r0;
        boolean $z0;
        com.google.testing.platform.lib.coroutines.scope.JobScope $r1;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r1 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: com.google.testing.platform.lib.coroutines.scope.JobScope workerScope>;

        $z0 = interfaceinvoke $r1.<com.google.testing.platform.lib.coroutines.scope.JobScope: boolean start()>();

        return $z0;
    }

com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1
    void <init>(java.lang.Object)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1 $r0;
        java.lang.Object $r1;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke $r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(2, $r1, class "Lcom/google/testing/platform/android/core/orchestration/strategy/TestDiagnosticsGrpcWorkerImpl$Companion;", "newDiagnosticsWorker", "newDiagnosticsWorker(Lkotlinx/coroutines/CoroutineScope;Lcom/google/testing/platform/proto/api/android/TestOrchestratorGrpc$TestOrchestratorStub;)Lcom/google/testing/platform/lib/grpc/stream/GrpcStreamChannel;", 0);

        return;
    }

    public final com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel invoke(kotlinx.coroutines.CoroutineScope, com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1 $r0;
        com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub $r1;
        com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        java.lang.Object $r4;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion $r5;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1;

        $r3 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 := @parameter1: com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "p0");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "p1");

        $r4 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1: java.lang.Object receiver>;

        $r5 = (com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion) $r4;

        $r2 = virtualinvoke $r5.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion: com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel newDiagnosticsWorker(kotlinx.coroutines.CoroutineScope,com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub)>($r3, $r1);

        return $r2;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1 $r0;
        com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel $r1;
        java.lang.Object $r2, $r3;
        kotlinx.coroutines.CoroutineScope $r4;
        com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub $r5;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1;

        $r2 := @parameter0: java.lang.Object;

        $r3 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) $r2;

        $r5 = (com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub) $r3;

        $r1 = virtualinvoke $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$1: com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel invoke(kotlinx.coroutines.CoroutineScope,com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub)>($r4, $r5);

        return $r1;
    }

com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1: com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub $stub>
    void <init>(com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1 $r0;
        com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub $r1;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1;

        $r1 := @parameter0: com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1: com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub $stub> = $r1;

        specialinvoke $r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final io.grpc.stub.StreamObserver invoke(io.grpc.stub.StreamObserver)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1 $r0;
        io.grpc.stub.StreamObserver $r1;
        com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1;

        $r1 := @parameter0: io.grpc.stub.StreamObserver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "it");

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1: com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub $stub>;

        $r1 = virtualinvoke $r2.<com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub: io.grpc.stub.StreamObserver diagnosticsWorker(io.grpc.stub.StreamObserver)>($r1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "stub.diagnosticsWorker(it)");

        return $r1;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1 $r0;
        io.grpc.stub.StreamObserver $r1;
        java.lang.Object $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1;

        $r2 := @parameter0: java.lang.Object;

        $r1 = (io.grpc.stub.StreamObserver) $r2;

        $r1 = virtualinvoke $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1: io.grpc.stub.StreamObserver invoke(io.grpc.stub.StreamObserver)>($r1);

        return $r1;
    }

com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion
    private void <init>()
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion $r0;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion $r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion: void <init>()>();

        return;
    }

    public final com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel newDiagnosticsWorker(kotlinx.coroutines.CoroutineScope, com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion $r0;
        com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub $r1;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1 $r2;
        com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion;

        $r4 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r1 := @parameter1: com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r4, "scope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "stub");

        $r2 = new com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1;

        specialinvoke $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$Companion$newDiagnosticsWorker$1: void <init>(com.google.testing.platform.proto.api.android.TestOrchestratorGrpc$TestOrchestratorStub)>($r1);

        $r3 = staticinvoke <com.google.testing.platform.lib.grpc.stream.GrpcStreamChannelKt: com.google.testing.platform.lib.grpc.stream.GrpcStreamChannel StubGrpcStreamChannel$default(kotlinx.coroutines.CoroutineScope,kotlinx.coroutines.channels.Channel,kotlinx.coroutines.channels.Channel,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r4, null, null, $r2, 6, null);

        return $r3;
    }

com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: java.lang.Runnable $it>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: int label>
    void <init>(java.lang.Runnable, kotlin.coroutines.Continuation)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1 $r0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Runnable $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1;

        $r2 := @parameter0: java.lang.Runnable;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: java.lang.Runnable $it> = $r2;

        specialinvoke $r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r1);

        return;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1 $r0, $r4;
        kotlin.coroutines.Continuation $r1;
        java.lang.Runnable $r2;
        java.lang.Object $r3;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r4 = new com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1;

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: java.lang.Runnable $it>;

        specialinvoke $r4.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: void <init>(java.lang.Runnable,kotlin.coroutines.Continuation)>($r2, $r1);

        return $r4;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1 $r0;
        java.lang.Object $r1, $r2;
        kotlinx.coroutines.CoroutineScope $r3;
        kotlin.coroutines.Continuation $r4;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (kotlinx.coroutines.CoroutineScope) $r1;

        $r4 = (kotlin.coroutines.Continuation) $r2;

        $r1 = virtualinvoke $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r3, $r4);

        return $r1;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1 $r0;
        kotlinx.coroutines.CoroutineScope $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.Unit $r3;
        java.lang.Object $r4;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r2 = virtualinvoke $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r2);

        $r0 = (com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1) $r2;

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r4 = virtualinvoke $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: java.lang.Object invokeSuspend(java.lang.Object)>($r3);

        return $r4;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1 $r0;
        java.lang.Object $r1;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.Runnable $r3;
        kotlin.Unit r4;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: int label>;

        lookupswitch($i0)
        {
            case 0: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r3 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: java.lang.Runnable $it>;

        interfaceinvoke $r3.<java.lang.Runnable: void run()>();

        r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return r4;
    }

com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl this$0>
    void <init>(com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1 $r0;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r1;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1;

        $r1 := @parameter0: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void execute(java.lang.Runnable)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1 $r0;
        java.lang.Runnable $r1;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r2;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1 $r3;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl this$0>;

        $r3 = new com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1;

        specialinvoke $r3.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$connect$1$1: void <init>(java.lang.Runnable,kotlin.coroutines.Continuation)>($r1, null);

        staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r2, null, null, $r3, 3, null);

        return;
    }

com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object L$0>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object result>
<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl this$0>
    void <init>(com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl, kotlin.coroutines.Continuation)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1 $r0;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r1;
        kotlin.coroutines.Continuation $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1;

        $r1 := @parameter0: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl this$0> = $r1;

        specialinvoke $r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1 $r0;
        java.lang.Object $r1;
        int $i0;
        com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl $r2;

        $r0 := @this: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1;

        $r1 := @parameter0: java.lang.Object;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: java.lang.Object result> = $r1;

        $i0 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label>;

        $i0 = $i0 | -2147483648;

        $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: int label> = $i0;

        $r2 = $r0.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl$join$1: com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl this$0>;

        $r1 = virtualinvoke $r2.<com.google.testing.platform.android.core.orchestration.strategy.TestDiagnosticsGrpcWorkerImpl: java.lang.Object join(kotlin.coroutines.Continuation)>($r0);

        return $r1;
    }

