androidx.camera.core.processing.SettableSurface
<androidx.camera.core.processing.SettableSurface: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture>
<androidx.camera.core.processing.SettableSurface: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>
<androidx.camera.core.processing.SettableSurface: android.graphics.Matrix mSensorToBufferTransform>
<androidx.camera.core.processing.SettableSurface: boolean mHasEmbeddedTransform>
<androidx.camera.core.processing.SettableSurface: android.graphics.Rect mCropRect>
<androidx.camera.core.processing.SettableSurface: boolean mMirroring>
<androidx.camera.core.processing.SettableSurface: int mTargets>
<androidx.camera.core.processing.SettableSurface: int mRotationDegrees>
<androidx.camera.core.processing.SettableSurface: androidx.camera.core.processing.SurfaceOutputImpl mConsumerToNotify>
<androidx.camera.core.processing.SettableSurface: boolean mHasProvider>
<androidx.camera.core.processing.SettableSurface: boolean mHasConsumer>
<androidx.camera.core.processing.SettableSurface: androidx.camera.core.SurfaceRequest mProviderSurfaceRequest>
    public void <init>(int, android.util.Size, int, android.graphics.Matrix, boolean, android.graphics.Rect, int, boolean)
    {
        androidx.camera.core.processing.SettableSurface r0;
        int i0, i1, i2;
        android.util.Size r1;
        android.graphics.Matrix r2;
        boolean z0, z1;
        android.graphics.Rect r3;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r4;
        com.google.common.util.concurrent.ListenableFuture $r5;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.Size;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Matrix;

        z0 := @parameter4: boolean;

        r3 := @parameter5: android.graphics.Rect;

        i2 := @parameter6: int;

        z1 := @parameter7: boolean;

        specialinvoke r0.<androidx.camera.core.impl.DeferrableSurface: void <init>(android.util.Size,int)>(r1, i1);

        r0.<androidx.camera.core.processing.SettableSurface: boolean mHasProvider> = 0;

        r0.<androidx.camera.core.processing.SettableSurface: boolean mHasConsumer> = 0;

        r0.<androidx.camera.core.processing.SettableSurface: int mTargets> = i0;

        r0.<androidx.camera.core.processing.SettableSurface: android.graphics.Matrix mSensorToBufferTransform> = r2;

        r0.<androidx.camera.core.processing.SettableSurface: boolean mHasEmbeddedTransform> = z0;

        r0.<androidx.camera.core.processing.SettableSurface: android.graphics.Rect mCropRect> = r3;

        r0.<androidx.camera.core.processing.SettableSurface: int mRotationDegrees> = i2;

        r0.<androidx.camera.core.processing.SettableSurface: boolean mMirroring> = z1;

        $r4 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.core.processing.SettableSurface,android.util.Size)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.SettableSurface: java.lang.Object lambda$new$0(android.util.Size,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r5 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r4);

        r0.<androidx.camera.core.processing.SettableSurface: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture> = $r5;

        return;
    }

    protected com.google.common.util.concurrent.ListenableFuture provideSurface()
    {
        androidx.camera.core.processing.SettableSurface r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $r1 = r0.<androidx.camera.core.processing.SettableSurface: com.google.common.util.concurrent.ListenableFuture mSurfaceFuture>;

        return $r1;
    }

    public void setProvider(com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.camera.core.processing.SettableSurface r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        boolean $z0, $z1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r2;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z0 = r0.<androidx.camera.core.processing.SettableSurface: boolean mHasProvider>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Provider can only be linked once.");

        r0.<androidx.camera.core.processing.SettableSurface: boolean mHasProvider> = 1;

        $r2 = r0.<androidx.camera.core.processing.SettableSurface: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        staticinvoke <androidx.camera.core.impl.utils.futures.Futures: void propagate(com.google.common.util.concurrent.ListenableFuture,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r1, $r2);

        return;
    }

    public void setProvider(androidx.camera.core.impl.DeferrableSurface) throws androidx.camera.core.impl.DeferrableSurface$SurfaceClosedException
    {
        androidx.camera.core.processing.SettableSurface r0;
        androidx.camera.core.impl.DeferrableSurface r1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r3;
        java.lang.Runnable $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        r1 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r2 = virtualinvoke r1.<androidx.camera.core.impl.DeferrableSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: void setProvider(com.google.common.util.concurrent.ListenableFuture)>($r2);

        virtualinvoke r1.<androidx.camera.core.impl.DeferrableSurface: void incrementUseCount()>();

        $r3 = virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: com.google.common.util.concurrent.ListenableFuture getTerminationFuture()>();

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.impl.DeferrableSurface)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.camera.core.processing.SettableSurface: void lambda$setProvider$1(androidx.camera.core.impl.DeferrableSurface)>, methodtype: void __METHODTYPE__());

        $r5 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r3.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r5);

        return;
    }

    public androidx.camera.core.SurfaceRequest createSurfaceRequest(androidx.camera.core.impl.CameraInternal)
    {
        androidx.camera.core.processing.SettableSurface r0;
        androidx.camera.core.impl.CameraInternal r1;
        androidx.camera.core.SurfaceRequest $r2;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        r1 := @parameter0: androidx.camera.core.impl.CameraInternal;

        $r2 = virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: androidx.camera.core.SurfaceRequest createSurfaceRequest(androidx.camera.core.impl.CameraInternal,android.util.Range)>(r1, null);

        return $r2;
    }

    public androidx.camera.core.SurfaceRequest createSurfaceRequest(androidx.camera.core.impl.CameraInternal, android.util.Range)
    {
        androidx.camera.core.processing.SettableSurface r0;
        androidx.camera.core.impl.CameraInternal r1;
        android.util.Range r2;
        androidx.camera.core.SurfaceRequest r3, $r4;
        android.util.Size $r5;
        androidx.camera.core.impl.DeferrableSurface $r6;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        r1 := @parameter0: androidx.camera.core.impl.CameraInternal;

        r2 := @parameter1: android.util.Range;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $r4 = new androidx.camera.core.SurfaceRequest;

        $r5 = virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: android.util.Size getSize()>();

        specialinvoke $r4.<androidx.camera.core.SurfaceRequest: void <init>(android.util.Size,androidx.camera.core.impl.CameraInternal,boolean,android.util.Range)>($r5, r1, 1, r2);

        r3 = $r4;

        $r6 = virtualinvoke r3.<androidx.camera.core.SurfaceRequest: androidx.camera.core.impl.DeferrableSurface getDeferrableSurface()>();

        virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: void setProvider(androidx.camera.core.impl.DeferrableSurface)>($r6);

        goto label1;

     label1:
        r0.<androidx.camera.core.processing.SettableSurface: androidx.camera.core.SurfaceRequest mProviderSurfaceRequest> = r3;

        specialinvoke r0.<androidx.camera.core.processing.SettableSurface: void notifyTransformationInfoUpdate()>();

        return r3;
    }

    public com.google.common.util.concurrent.ListenableFuture createSurfaceOutputFuture(androidx.camera.core.SurfaceOutput$GlTransformOptions, android.util.Size, android.graphics.Rect, int, boolean)
    {
        androidx.camera.core.processing.SettableSurface r0;
        androidx.camera.core.SurfaceOutput$GlTransformOptions r1;
        android.util.Size r2;
        android.graphics.Rect r3;
        int i0;
        boolean z0, $z1, $z2;
        com.google.common.util.concurrent.ListenableFuture $r4, $r7;
        androidx.camera.core.impl.utils.futures.AsyncFunction $r5;
        java.util.concurrent.ScheduledExecutorService $r6;
        java.util.concurrent.Executor r8;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        r1 := @parameter0: androidx.camera.core.SurfaceOutput$GlTransformOptions;

        r2 := @parameter1: android.util.Size;

        r3 := @parameter2: android.graphics.Rect;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $z1 = r0.<androidx.camera.core.processing.SettableSurface: boolean mHasConsumer>;

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkState(boolean,java.lang.String)>($z2, "Consumer can only be linked once.");

        r0.<androidx.camera.core.processing.SettableSurface: boolean mHasConsumer> = 1;

        $r4 = virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: com.google.common.util.concurrent.ListenableFuture getSurface()>();

        $r5 = dynamicinvoke "apply" <androidx.camera.core.impl.utils.futures.AsyncFunction (androidx.camera.core.processing.SettableSurface,androidx.camera.core.SurfaceOutput$GlTransformOptions,android.util.Size,android.graphics.Rect,int,boolean)>(r0, r1, r2, r3, i0, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.SettableSurface: com.google.common.util.concurrent.ListenableFuture lambda$createSurfaceOutputFuture$2(androidx.camera.core.SurfaceOutput$GlTransformOptions,android.util.Size,android.graphics.Rect,int,boolean,android.view.Surface)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(android.view.Surface));

        $r6 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        r8 = (java.util.concurrent.Executor) $r6;

        $r7 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture transformAsync(com.google.common.util.concurrent.ListenableFuture,androidx.camera.core.impl.utils.futures.AsyncFunction,java.util.concurrent.Executor)>($r4, $r5, r8);

        return $r7;
    }

    public final void close()
    {
        androidx.camera.core.processing.SettableSurface r0;
        java.util.concurrent.ScheduledExecutorService $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        specialinvoke r0.<androidx.camera.core.impl.DeferrableSurface: void close()>();

        $r1 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.ScheduledExecutorService mainThreadExecutor()>();

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.processing.SettableSurface)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.SettableSurface: void lambda$close$3()>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.ScheduledExecutorService: void execute(java.lang.Runnable)>($r2);

        return;
    }

    public int getTargets()
    {
        androidx.camera.core.processing.SettableSurface r0;
        int $i0;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $i0 = r0.<androidx.camera.core.processing.SettableSurface: int mTargets>;

        return $i0;
    }

    public android.util.Size getSize()
    {
        androidx.camera.core.processing.SettableSurface r0;
        android.util.Size $r1;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $r1 = virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: android.util.Size getPrescribedSize()>();

        return $r1;
    }

    public int getFormat()
    {
        androidx.camera.core.processing.SettableSurface r0;
        int $i0;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $i0 = virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: int getPrescribedStreamFormat()>();

        return $i0;
    }

    public android.graphics.Matrix getSensorToBufferTransform()
    {
        androidx.camera.core.processing.SettableSurface r0;
        android.graphics.Matrix $r1;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $r1 = r0.<androidx.camera.core.processing.SettableSurface: android.graphics.Matrix mSensorToBufferTransform>;

        return $r1;
    }

    public boolean hasEmbeddedTransform()
    {
        androidx.camera.core.processing.SettableSurface r0;
        boolean $z0;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $z0 = r0.<androidx.camera.core.processing.SettableSurface: boolean mHasEmbeddedTransform>;

        return $z0;
    }

    public android.graphics.Rect getCropRect()
    {
        androidx.camera.core.processing.SettableSurface r0;
        android.graphics.Rect $r1;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $r1 = r0.<androidx.camera.core.processing.SettableSurface: android.graphics.Rect mCropRect>;

        return $r1;
    }

    public int getRotationDegrees()
    {
        androidx.camera.core.processing.SettableSurface r0;
        int $i0;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $i0 = r0.<androidx.camera.core.processing.SettableSurface: int mRotationDegrees>;

        return $i0;
    }

    public void setRotationDegrees(int)
    {
        androidx.camera.core.processing.SettableSurface r0;
        int i0, $i1;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        i0 := @parameter0: int;

        staticinvoke <androidx.camera.core.impl.utils.Threads: void checkMainThread()>();

        $i1 = r0.<androidx.camera.core.processing.SettableSurface: int mRotationDegrees>;

        if $i1 != i0 goto label1;

        return;

     label1:
        r0.<androidx.camera.core.processing.SettableSurface: int mRotationDegrees> = i0;

        specialinvoke r0.<androidx.camera.core.processing.SettableSurface: void notifyTransformationInfoUpdate()>();

        return;
    }

    private void notifyTransformationInfoUpdate()
    {
        androidx.camera.core.processing.SettableSurface r0;
        androidx.camera.core.SurfaceRequest $r1, $r3;
        int $i0;
        android.graphics.Rect $r2;
        androidx.camera.core.SurfaceRequest$TransformationInfo $r4;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $r1 = r0.<androidx.camera.core.processing.SettableSurface: androidx.camera.core.SurfaceRequest mProviderSurfaceRequest>;

        if $r1 == null goto label1;

        $r3 = r0.<androidx.camera.core.processing.SettableSurface: androidx.camera.core.SurfaceRequest mProviderSurfaceRequest>;

        $r2 = r0.<androidx.camera.core.processing.SettableSurface: android.graphics.Rect mCropRect>;

        $i0 = r0.<androidx.camera.core.processing.SettableSurface: int mRotationDegrees>;

        $r4 = staticinvoke <androidx.camera.core.SurfaceRequest$TransformationInfo: androidx.camera.core.SurfaceRequest$TransformationInfo of(android.graphics.Rect,int,int)>($r2, $i0, -1);

        virtualinvoke $r3.<androidx.camera.core.SurfaceRequest: void updateTransformationInfo(androidx.camera.core.SurfaceRequest$TransformationInfo)>($r4);

     label1:
        return;
    }

    public boolean getMirroring()
    {
        androidx.camera.core.processing.SettableSurface r0;
        boolean $z0;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $z0 = r0.<androidx.camera.core.processing.SettableSurface: boolean mMirroring>;

        return $z0;
    }

    private void lambda$close$3()
    {
        androidx.camera.core.processing.SettableSurface r0;
        androidx.camera.core.processing.SurfaceOutputImpl $r1, $r2;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        $r1 = r0.<androidx.camera.core.processing.SettableSurface: androidx.camera.core.processing.SurfaceOutputImpl mConsumerToNotify>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.camera.core.processing.SettableSurface: androidx.camera.core.processing.SurfaceOutputImpl mConsumerToNotify>;

        virtualinvoke $r2.<androidx.camera.core.processing.SurfaceOutputImpl: void requestClose()>();

        r0.<androidx.camera.core.processing.SettableSurface: androidx.camera.core.processing.SurfaceOutputImpl mConsumerToNotify> = null;

     label1:
        return;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$createSurfaceOutputFuture$2(androidx.camera.core.SurfaceOutput$GlTransformOptions, android.util.Size, android.graphics.Rect, int, boolean, android.view.Surface) throws java.lang.Exception
    {
        androidx.camera.core.processing.SettableSurface r0;
        androidx.camera.core.SurfaceOutput$GlTransformOptions r1;
        android.util.Size r2, $r8;
        android.graphics.Rect r3;
        int i0, $i1, $i2;
        boolean z0;
        android.view.Surface r4;
        androidx.camera.core.processing.SurfaceOutputImpl r5, $r7;
        com.google.common.util.concurrent.ListenableFuture $r9, $r12;
        java.lang.Runnable $r10;
        java.util.concurrent.Executor $r11;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        r1 := @parameter0: androidx.camera.core.SurfaceOutput$GlTransformOptions;

        r2 := @parameter1: android.util.Size;

        r3 := @parameter2: android.graphics.Rect;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        r4 := @parameter5: android.view.Surface;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: void incrementUseCount()>();

        goto label1;

     label1:
        $r7 = new androidx.camera.core.processing.SurfaceOutputImpl;

        $i1 = virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: int getTargets()>();

        $i2 = virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: int getFormat()>();

        $r8 = virtualinvoke r0.<androidx.camera.core.processing.SettableSurface: android.util.Size getSize()>();

        specialinvoke $r7.<androidx.camera.core.processing.SurfaceOutputImpl: void <init>(android.view.Surface,int,int,android.util.Size,androidx.camera.core.SurfaceOutput$GlTransformOptions,android.util.Size,android.graphics.Rect,int,boolean)>(r4, $i1, $i2, $r8, r1, r2, r3, i0, z0);

        r5 = $r7;

        $r9 = virtualinvoke r5.<androidx.camera.core.processing.SurfaceOutputImpl: com.google.common.util.concurrent.ListenableFuture getCloseFuture()>();

        $r10 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.processing.SettableSurface)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.camera.core.impl.DeferrableSurface: void decrementUseCount()>, methodtype: void __METHODTYPE__());

        $r11 = staticinvoke <androidx.camera.core.impl.utils.executor.CameraXExecutors: java.util.concurrent.Executor directExecutor()>();

        interfaceinvoke $r9.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r10, $r11);

        r0.<androidx.camera.core.processing.SettableSurface: androidx.camera.core.processing.SurfaceOutputImpl mConsumerToNotify> = r5;

        $r12 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)>(r5);

        return $r12;
    }

    private static void lambda$setProvider$1(androidx.camera.core.impl.DeferrableSurface)
    {
        androidx.camera.core.impl.DeferrableSurface r0;

        r0 := @parameter0: androidx.camera.core.impl.DeferrableSurface;

        virtualinvoke r0.<androidx.camera.core.impl.DeferrableSurface: void decrementUseCount()>();

        virtualinvoke r0.<androidx.camera.core.impl.DeferrableSurface: void close()>();

        return;
    }

    private java.lang.Object lambda$new$0(android.util.Size, androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.core.processing.SettableSurface r0;
        android.util.Size r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        int $i0;
        java.lang.String $r8;

        r0 := @this: androidx.camera.core.processing.SettableSurface;

        r1 := @parameter0: android.util.Size;

        r2 := @parameter1: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.core.processing.SettableSurface: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter> = r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SettableFuture size: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hashCode: ");

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

