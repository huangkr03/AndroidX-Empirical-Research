okio._UtilKt
<okio._UtilKt: int DEFAULT__ByteString_size>
<okio._UtilKt: okio.Buffer$UnsafeCursor DEFAULT__new_UnsafeCursor>
    static void <clinit>()
    {
        okio.Buffer$UnsafeCursor $r0;

        $r0 = new okio.Buffer$UnsafeCursor;

        specialinvoke $r0.<okio.Buffer$UnsafeCursor: void <init>()>();

        <okio._UtilKt: okio.Buffer$UnsafeCursor DEFAULT__new_UnsafeCursor> = $r0;

        <okio._UtilKt: int DEFAULT__ByteString_size> = -1234567890;

        return;
    }

    public static final boolean arrayRangeEquals(byte[], int, byte[], int, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        byte[] $r0, $r1;
        byte $b5, $b6;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r0 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "a");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "b");

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label3;

        $i4 = $i3 + $i0;

        $b5 = $r1[$i4];

        $i4 = $i3 + $i1;

        $b6 = $r0[$i4];

        if $b5 == $b6 goto label2;

        return 0;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static final void checkOffsetAndCount(long, long, long)
    {
        long $l0, $l1, $l3, $l4;
        byte $b2;
        java.lang.ArrayIndexOutOfBoundsException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $l3 := @parameter0: long;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $l4 = $l0 | $l1;

        $b2 = $l4 cmp 0L;

        if $b2 < 0 goto label1;

        $b2 = $l0 cmp $l3;

        if $b2 > 0 goto label1;

        $l4 = $l3 - $l0;

        $b2 = $l4 cmp $l1;

        if $b2 < 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" offset=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" byteCount=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final int resolveDefaultParameter(okio.ByteString, int)
    {
        int $i0, $i1;
        okio.ByteString $r0;

        $r0 := @parameter0: okio.ByteString;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $i1 = <okio._UtilKt: int DEFAULT__ByteString_size>;

        if $i0 != $i1 goto label1;

        $i0 = virtualinvoke $r0.<okio.ByteString: int size()>();

     label1:
        return $i0;
    }

    public static final java.lang.String toHexString(int)
    {
        char[] $r0, $r1;
        int $i0, $i1, $i3;
        char $c2;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        if $i0 != 0 goto label1;

        return "0";

     label1:
        $r0 = newarray (char)[8];

        $r1 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $i1 = $i0 >> 28;

        $i1 = $i1 & 15;

        $c2 = $r1[$i1];

        $i1 = 0;

        $r0[0] = $c2;

        $r1 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $i3 = $i0 >> 24;

        $i3 = $i3 & 15;

        $c2 = $r1[$i3];

        $r0[1] = $c2;

        $r1 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $i3 = $i0 >> 20;

        $i3 = $i3 & 15;

        $c2 = $r1[$i3];

        $r0[2] = $c2;

        $r1 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $i3 = $i0 >> 16;

        $i3 = $i3 & 15;

        $c2 = $r1[$i3];

        $r0[3] = $c2;

        $r1 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $i3 = $i0 >> 12;

        $i3 = $i3 & 15;

        $c2 = $r1[$i3];

        $r0[4] = $c2;

        $r1 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $i3 = $i0 >> 8;

        $i3 = $i3 & 15;

        $c2 = $r1[$i3];

        $r0[5] = $c2;

        $r1 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $i3 = $i0 >> 4;

        $i3 = $i3 & 15;

        $c2 = $r1[$i3];

        $r0[6] = $c2;

        $r1 = staticinvoke <okio.internal._ByteStringKt: char[] getHEX_DIGIT_CHARS()>();

        $i0 = $i0 & 15;

        $c2 = $r1[$i0];

        $r0[7] = $c2;

     label2:
        if $i1 >= 8 goto label3;

        $c2 = $r0[$i1];

        if $c2 != 48 goto label3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r2 = staticinvoke <kotlin.text.StringsKt: java.lang.String concatToString(char[],int,int)>($r0, $i1, 8);

        return $r2;
    }

