kotlin.ranges.RangesKt___RangesKt
    public void <init>()
    {
        kotlin.ranges.RangesKt___RangesKt $r0;

        $r0 := @this: kotlin.ranges.RangesKt___RangesKt;

        specialinvoke $r0.<kotlin.ranges.RangesKt__RangesKt: void <init>()>();

        return;
    }

    public static final boolean byteRangeContains(kotlin.ranges.ClosedRange, double)
    {
        kotlin.ranges.ClosedRange $r0;
        double $d0;
        java.lang.Byte $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $d0 := @parameter1: double;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Byte toByteExactOrNull(double)>($d0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean byteRangeContains(kotlin.ranges.ClosedRange, float)
    {
        kotlin.ranges.ClosedRange $r0;
        float $f0;
        java.lang.Byte $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Byte toByteExactOrNull(float)>($f0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean byteRangeContains(kotlin.ranges.ClosedRange, int)
    {
        kotlin.ranges.ClosedRange $r0;
        int $i0;
        java.lang.Byte $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Byte toByteExactOrNull(int)>($i0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean byteRangeContains(kotlin.ranges.ClosedRange, long)
    {
        kotlin.ranges.ClosedRange $r0;
        long $l0;
        java.lang.Byte $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Byte toByteExactOrNull(long)>($l0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean byteRangeContains(kotlin.ranges.ClosedRange, short)
    {
        kotlin.ranges.ClosedRange $r0;
        short $s0;
        java.lang.Byte $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Byte toByteExactOrNull(short)>($s0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final byte coerceAtLeast(byte, byte)
    {
        byte $b0, $b1;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        if $b0 >= $b1 goto label1;

        return $b1;

     label1:
        return $b0;
    }

    public static final double coerceAtLeast(double, double)
    {
        double $d0, $d1;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return $d1;

     label1:
        return $d0;
    }

    public static final float coerceAtLeast(float, float)
    {
        float $f0, $f1;
        byte $b0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $b0 = $f0 cmpg $f1;

        if $b0 >= 0 goto label1;

        return $f1;

     label1:
        return $f0;
    }

    public static final int coerceAtLeast(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= $i1 goto label1;

        return $i1;

     label1:
        return $i0;
    }

    public static final long coerceAtLeast(long, long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label1;

        return $l1;

     label1:
        return $l0;
    }

    public static final java.lang.Comparable coerceAtLeast(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "minimumValue");

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);

        if $i0 >= 0 goto label1;

        return $r1;

     label1:
        return $r0;
    }

    public static final short coerceAtLeast(short, short)
    {
        short $s0, $s1;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        if $s0 >= $s1 goto label1;

        return $s1;

     label1:
        return $s0;
    }

    public static final byte coerceAtMost(byte, byte)
    {
        byte $b0, $b1;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        if $b0 <= $b1 goto label1;

        return $b1;

     label1:
        return $b0;
    }

    public static final double coerceAtMost(double, double)
    {
        double $d0, $d1;
        byte $b0;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $b0 = $d0 cmpl $d1;

        if $b0 <= 0 goto label1;

        return $d1;

     label1:
        return $d0;
    }

    public static final float coerceAtMost(float, float)
    {
        float $f0, $f1;
        byte $b0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $b0 = $f0 cmpl $f1;

        if $b0 <= 0 goto label1;

        return $f1;

     label1:
        return $f0;
    }

    public static final int coerceAtMost(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 <= $i1 goto label1;

        return $i1;

     label1:
        return $i0;
    }

    public static final long coerceAtMost(long, long)
    {
        long $l0, $l1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label1;

        return $l1;

     label1:
        return $l0;
    }

    public static final java.lang.Comparable coerceAtMost(java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "maximumValue");

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);

        if $i0 <= 0 goto label1;

        return $r1;

     label1:
        return $r0;
    }

    public static final short coerceAtMost(short, short)
    {
        short $s0, $s1;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        if $s0 <= $s1 goto label1;

        return $s1;

     label1:
        return $s0;
    }

    public static final byte coerceIn(byte, byte, byte)
    {
        byte $b0, $b1, $b2;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $b2 := @parameter2: byte;

        if $b1 > $b2 goto label3;

        if $b0 >= $b1 goto label1;

        return $b1;

     label1:
        if $b0 <= $b2 goto label2;

        return $b2;

     label2:
        return $b0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final double coerceIn(double, double, double)
    {
        double $d0, $d1, $d2;
        byte $b0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $b0 = $d1 cmpl $d2;

        if $b0 > 0 goto label3;

        $b0 = $d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return $d1;

     label1:
        $b0 = $d0 cmpl $d2;

        if $b0 <= 0 goto label2;

        return $d2;

     label2:
        return $d0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final float coerceIn(float, float, float)
    {
        float $f0, $f1, $f2;
        byte $b0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $b0 = $f1 cmpl $f2;

        if $b0 > 0 goto label3;

        $b0 = $f0 cmpg $f1;

        if $b0 >= 0 goto label1;

        return $f1;

     label1:
        $b0 = $f0 cmpl $f2;

        if $b0 <= 0 goto label2;

        return $f2;

     label2:
        return $f0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final int coerceIn(int, int, int)
    {
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i1 > $i2 goto label3;

        if $i0 >= $i1 goto label1;

        return $i1;

     label1:
        if $i0 <= $i2 goto label2;

        return $i2;

     label2:
        return $i0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final int coerceIn(int, kotlin.ranges.ClosedRange)
    {
        int $i0, $i1;
        kotlin.ranges.ClosedRange $r0;
        boolean $z0;
        java.lang.Integer $r1;
        kotlin.ranges.ClosedFloatingPointRange $r2;
        java.lang.Comparable $r3;
        java.lang.Number $r4;
        java.lang.StringBuilder $r5, r7;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r8;

        $i0 := @parameter0: int;

        $r0 := @parameter1: kotlin.ranges.ClosedRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "range");

        $z0 = $r0 instanceof kotlin.ranges.ClosedFloatingPointRange;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2 = (kotlin.ranges.ClosedFloatingPointRange) $r0;

        $r3 = (java.lang.Comparable) $r1;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Comparable coerceIn(java.lang.Comparable,kotlin.ranges.ClosedFloatingPointRange)>($r3, $r2);

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;

     label1:
        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $r4 = (java.lang.Number) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        if $i0 >= $i1 goto label2;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;

     label2:
        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $r4 = (java.lang.Number) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        if $i0 <= $i1 goto label4;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $r4 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;

     label3:
        r8 = new java.lang.IllegalArgumentException;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw r8;

     label4:
        return $i0;
    }

    public static final long coerceIn(long, long, long)
    {
        long $l0, $l1, $l2;
        byte $b3;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $l2 := @parameter2: long;

        $b3 = $l1 cmp $l2;

        if $b3 > 0 goto label3;

        $b3 = $l0 cmp $l1;

        if $b3 >= 0 goto label1;

        return $l1;

     label1:
        $b3 = $l0 cmp $l2;

        if $b3 <= 0 goto label2;

        return $l2;

     label2:
        return $l0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    public static final long coerceIn(long, kotlin.ranges.ClosedRange)
    {
        long $l0, $l1;
        kotlin.ranges.ClosedRange $r0;
        boolean $z0;
        java.lang.Long $r1;
        kotlin.ranges.ClosedFloatingPointRange $r2;
        java.lang.Comparable $r3;
        java.lang.Number $r4;
        byte $b2;
        java.lang.StringBuilder $r5, r7;
        java.lang.String $r6;
        java.lang.IllegalArgumentException r8;

        $l0 := @parameter0: long;

        $r0 := @parameter1: kotlin.ranges.ClosedRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "range");

        $z0 = $r0 instanceof kotlin.ranges.ClosedFloatingPointRange;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2 = (kotlin.ranges.ClosedFloatingPointRange) $r0;

        $r3 = (java.lang.Comparable) $r1;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Comparable coerceIn(java.lang.Comparable,kotlin.ranges.ClosedFloatingPointRange)>($r3, $r2);

        $r4 = (java.lang.Number) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        return $l0;

     label1:
        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $r4 = (java.lang.Number) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label3;

        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $r4 = (java.lang.Number) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

     label2:
        goto label4;

     label3:
        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $r4 = (java.lang.Number) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $b2 = $l0 cmp $l1;

        if $b2 > 0 goto label5;

        goto label2;

     label4:
        return $l0;

     label5:
        $r3 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $r4 = (java.lang.Number) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        return $l0;

     label6:
        r8 = new java.lang.IllegalArgumentException;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        goto label7;

     label7:
        throw r8;
    }

    public static final java.lang.Comparable coerceIn(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)
    {
        java.lang.Comparable $r0, $r1, $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: java.lang.Comparable;

        $r2 := @parameter2: java.lang.Comparable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $r1 == null goto label3;

        if $r2 == null goto label3;

        $i0 = interfaceinvoke $r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i0 > 0 goto label2;

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);

        if $i0 >= 0 goto label1;

        return $r1;

     label1:
        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i0 <= 0 goto label5;

        return $r2;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        if $r1 == null goto label4;

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r1);

        if $i0 >= 0 goto label4;

        return $r1;

     label4:
        if $r2 == null goto label5;

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i0 <= 0 goto label5;

        return $r2;

     label5:
        return $r0;
    }

    public static final java.lang.Comparable coerceIn(java.lang.Comparable, kotlin.ranges.ClosedFloatingPointRange)
    {
        java.lang.Comparable $r0, $r2;
        kotlin.ranges.ClosedFloatingPointRange $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: kotlin.ranges.ClosedFloatingPointRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $z0 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r2 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getStart()>();

        $z0 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: boolean lessThanOrEquals(java.lang.Comparable,java.lang.Comparable)>($r0, $r2);

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getStart()>();

        $z0 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: boolean lessThanOrEquals(java.lang.Comparable,java.lang.Comparable)>($r2, $r0);

        if $z0 != 0 goto label1;

        $r0 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getStart()>();

        return $r0;

     label1:
        $r2 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getEndInclusive()>();

        $z0 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: boolean lessThanOrEquals(java.lang.Comparable,java.lang.Comparable)>($r2, $r0);

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getEndInclusive()>();

        $z0 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: boolean lessThanOrEquals(java.lang.Comparable,java.lang.Comparable)>($r0, $r2);

        if $z0 != 0 goto label3;

        $r0 = interfaceinvoke $r1.<kotlin.ranges.ClosedFloatingPointRange: java.lang.Comparable getEndInclusive()>();

        return $r0;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        return $r0;
    }

    public static final java.lang.Comparable coerceIn(java.lang.Comparable, kotlin.ranges.ClosedRange)
    {
        java.lang.Comparable $r0, $r3;
        kotlin.ranges.ClosedRange $r1;
        boolean $z0;
        kotlin.ranges.ClosedFloatingPointRange $r2;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @parameter0: java.lang.Comparable;

        $r1 := @parameter1: kotlin.ranges.ClosedRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "range");

        $z0 = $r1 instanceof kotlin.ranges.ClosedFloatingPointRange;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.ranges.ClosedFloatingPointRange) $r1;

        $r0 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Comparable coerceIn(java.lang.Comparable,kotlin.ranges.ClosedFloatingPointRange)>($r0, $r2);

        return $r0;

     label1:
        $z0 = interfaceinvoke $r1.<kotlin.ranges.ClosedRange: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r3 = interfaceinvoke $r1.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r3);

        if $i0 >= 0 goto label2;

        $r0 = interfaceinvoke $r1.<kotlin.ranges.ClosedRange: java.lang.Comparable getStart()>();

        return $r0;

     label2:
        $r3 = interfaceinvoke $r1.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        $i0 = interfaceinvoke $r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r3);

        if $i0 <= 0 goto label4;

        $r0 = interfaceinvoke $r1.<kotlin.ranges.ClosedRange: java.lang.Comparable getEndInclusive()>();

        return $r0;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label4:
        return $r0;
    }

    public static final short coerceIn(short, short, short)
    {
        short $s0, $s1, $s2;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $s2 := @parameter2: short;

        if $s1 > $s2 goto label3;

        if $s0 >= $s1 goto label1;

        return $s1;

     label1:
        if $s0 <= $s2 goto label2;

        return $s2;

     label2:
        return $s0;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot coerce value to an empty range: maximum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r0;
    }

    private static final boolean contains(kotlin.ranges.CharRange, java.lang.Character)
    {
        kotlin.ranges.CharRange $r0;
        java.lang.Character $r1;
        char $c0;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.CharRange;

        $r1 := @parameter1: java.lang.Character;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $r1 == null goto label1;

        $c0 = virtualinvoke $r1.<java.lang.Character: char charValue()>();

        $z0 = virtualinvoke $r0.<kotlin.ranges.CharRange: boolean contains(char)>($c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static final boolean contains(kotlin.ranges.IntRange, java.lang.Integer)
    {
        kotlin.ranges.IntRange $r0;
        java.lang.Integer $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: kotlin.ranges.IntRange;

        $r1 := @parameter1: java.lang.Integer;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntRange: boolean contains(int)>($i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static final boolean contains(kotlin.ranges.LongRange, java.lang.Long)
    {
        java.lang.Long $r0;
        kotlin.ranges.LongRange $r1;
        long $l0;
        boolean $z0;

        $r1 := @parameter0: kotlin.ranges.LongRange;

        $r0 := @parameter1: java.lang.Long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        if $r0 == null goto label1;

        $l0 = virtualinvoke $r0.<java.lang.Long: long longValue()>();

        $z0 = virtualinvoke $r1.<kotlin.ranges.LongRange: boolean contains(long)>($l0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static final boolean doubleRangeContains(kotlin.ranges.ClosedRange, byte)
    {
        kotlin.ranges.ClosedRange $r0;
        byte $b0;
        double $d0;
        java.lang.Double $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $d0 = (double) $b0;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean doubleRangeContains(kotlin.ranges.ClosedRange, float)
    {
        kotlin.ranges.ClosedRange $r0;
        float $f0;
        double $d0;
        java.lang.Double $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $d0 = (double) $f0;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean doubleRangeContains(kotlin.ranges.ClosedRange, int)
    {
        kotlin.ranges.ClosedRange $r0;
        int $i0;
        double $d0;
        java.lang.Double $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $d0 = (double) $i0;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean doubleRangeContains(kotlin.ranges.ClosedRange, long)
    {
        kotlin.ranges.ClosedRange $r0;
        long $l0;
        double $d0;
        java.lang.Double $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $d0 = (double) $l0;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean doubleRangeContains(kotlin.ranges.ClosedRange, short)
    {
        kotlin.ranges.ClosedRange $r0;
        short $s0;
        double $d0;
        java.lang.Double $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $d0 = (double) $s0;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final kotlin.ranges.CharProgression downTo(char, char)
    {
        char $c0, $c1;
        kotlin.ranges.CharProgression$Companion $r0;
        kotlin.ranges.CharProgression $r1;

        $c1 := @parameter0: char;

        $c0 := @parameter1: char;

        $r0 = <kotlin.ranges.CharProgression: kotlin.ranges.CharProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.CharProgression$Companion: kotlin.ranges.CharProgression fromClosedRange(char,char,int)>($c1, $c0, -1);

        return $r1;
    }

    public static final kotlin.ranges.IntProgression downTo(byte, byte)
    {
        byte $b0, $b1;
        kotlin.ranges.IntProgression$Companion $r0;
        kotlin.ranges.IntProgression $r1;

        $b1 := @parameter0: byte;

        $b0 := @parameter1: byte;

        $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($b1, $b0, -1);

        return $r1;
    }

    public static final kotlin.ranges.IntProgression downTo(byte, int)
    {
        int $i0;
        kotlin.ranges.IntProgression$Companion $r0;
        kotlin.ranges.IntProgression $r1;
        byte $b1;

        $b1 := @parameter0: byte;

        $i0 := @parameter1: int;

        $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($b1, $i0, -1);

        return $r1;
    }

    public static final kotlin.ranges.IntProgression downTo(byte, short)
    {
        short $s0;
        kotlin.ranges.IntProgression$Companion $r0;
        kotlin.ranges.IntProgression $r1;
        byte $b1;

        $b1 := @parameter0: byte;

        $s0 := @parameter1: short;

        $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($b1, $s0, -1);

        return $r1;
    }

    public static final kotlin.ranges.IntProgression downTo(int, byte)
    {
        byte $b0;
        kotlin.ranges.IntProgression$Companion $r0;
        kotlin.ranges.IntProgression $r1;
        int $i1;

        $i1 := @parameter0: int;

        $b0 := @parameter1: byte;

        $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($i1, $b0, -1);

        return $r1;
    }

    public static final kotlin.ranges.IntProgression downTo(int, int)
    {
        int $i0, $i1;
        kotlin.ranges.IntProgression$Companion $r0;
        kotlin.ranges.IntProgression $r1;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($i1, $i0, -1);

        return $r1;
    }

    public static final kotlin.ranges.IntProgression downTo(int, short)
    {
        short $s0;
        kotlin.ranges.IntProgression$Companion $r0;
        kotlin.ranges.IntProgression $r1;
        int $i1;

        $i1 := @parameter0: int;

        $s0 := @parameter1: short;

        $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($i1, $s0, -1);

        return $r1;
    }

    public static final kotlin.ranges.IntProgression downTo(short, byte)
    {
        byte $b0;
        kotlin.ranges.IntProgression$Companion $r0;
        kotlin.ranges.IntProgression $r1;
        short $s1;

        $s1 := @parameter0: short;

        $b0 := @parameter1: byte;

        $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($s1, $b0, -1);

        return $r1;
    }

    public static final kotlin.ranges.IntProgression downTo(short, int)
    {
        int $i0;
        kotlin.ranges.IntProgression$Companion $r0;
        kotlin.ranges.IntProgression $r1;
        short $s1;

        $s1 := @parameter0: short;

        $i0 := @parameter1: int;

        $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($s1, $i0, -1);

        return $r1;
    }

    public static final kotlin.ranges.IntProgression downTo(short, short)
    {
        short $s0, $s1;
        kotlin.ranges.IntProgression$Companion $r0;
        kotlin.ranges.IntProgression $r1;

        $s1 := @parameter0: short;

        $s0 := @parameter1: short;

        $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($s1, $s0, -1);

        return $r1;
    }

    public static final kotlin.ranges.LongProgression downTo(byte, long)
    {
        long $l0, $l1;
        kotlin.ranges.LongProgression$Companion $r0;
        kotlin.ranges.LongProgression $r1;
        byte $b2;

        $b2 := @parameter0: byte;

        $l0 := @parameter1: long;

        $r0 = <kotlin.ranges.LongProgression: kotlin.ranges.LongProgression$Companion Companion>;

        $l1 = (long) $b2;

        $r1 = virtualinvoke $r0.<kotlin.ranges.LongProgression$Companion: kotlin.ranges.LongProgression fromClosedRange(long,long,long)>($l1, $l0, -1L);

        return $r1;
    }

    public static final kotlin.ranges.LongProgression downTo(int, long)
    {
        long $l0, $l1;
        kotlin.ranges.LongProgression$Companion $r0;
        kotlin.ranges.LongProgression $r1;
        int $i2;

        $i2 := @parameter0: int;

        $l0 := @parameter1: long;

        $r0 = <kotlin.ranges.LongProgression: kotlin.ranges.LongProgression$Companion Companion>;

        $l1 = (long) $i2;

        $r1 = virtualinvoke $r0.<kotlin.ranges.LongProgression$Companion: kotlin.ranges.LongProgression fromClosedRange(long,long,long)>($l1, $l0, -1L);

        return $r1;
    }

    public static final kotlin.ranges.LongProgression downTo(long, byte)
    {
        byte $b0;
        kotlin.ranges.LongProgression$Companion $r0;
        long $l1, $l2;
        kotlin.ranges.LongProgression $r1;

        $l2 := @parameter0: long;

        $b0 := @parameter1: byte;

        $r0 = <kotlin.ranges.LongProgression: kotlin.ranges.LongProgression$Companion Companion>;

        $l1 = (long) $b0;

        $r1 = virtualinvoke $r0.<kotlin.ranges.LongProgression$Companion: kotlin.ranges.LongProgression fromClosedRange(long,long,long)>($l2, $l1, -1L);

        return $r1;
    }

    public static final kotlin.ranges.LongProgression downTo(long, int)
    {
        int $i0;
        kotlin.ranges.LongProgression$Companion $r0;
        long $l1, $l2;
        kotlin.ranges.LongProgression $r1;

        $l2 := @parameter0: long;

        $i0 := @parameter1: int;

        $r0 = <kotlin.ranges.LongProgression: kotlin.ranges.LongProgression$Companion Companion>;

        $l1 = (long) $i0;

        $r1 = virtualinvoke $r0.<kotlin.ranges.LongProgression$Companion: kotlin.ranges.LongProgression fromClosedRange(long,long,long)>($l2, $l1, -1L);

        return $r1;
    }

    public static final kotlin.ranges.LongProgression downTo(long, long)
    {
        long $l0, $l1;
        kotlin.ranges.LongProgression$Companion $r0;
        kotlin.ranges.LongProgression $r1;

        $l1 := @parameter0: long;

        $l0 := @parameter1: long;

        $r0 = <kotlin.ranges.LongProgression: kotlin.ranges.LongProgression$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.LongProgression$Companion: kotlin.ranges.LongProgression fromClosedRange(long,long,long)>($l1, $l0, -1L);

        return $r1;
    }

    public static final kotlin.ranges.LongProgression downTo(long, short)
    {
        short $s0;
        kotlin.ranges.LongProgression$Companion $r0;
        long $l1, $l2;
        kotlin.ranges.LongProgression $r1;

        $l2 := @parameter0: long;

        $s0 := @parameter1: short;

        $r0 = <kotlin.ranges.LongProgression: kotlin.ranges.LongProgression$Companion Companion>;

        $l1 = (long) $s0;

        $r1 = virtualinvoke $r0.<kotlin.ranges.LongProgression$Companion: kotlin.ranges.LongProgression fromClosedRange(long,long,long)>($l2, $l1, -1L);

        return $r1;
    }

    public static final kotlin.ranges.LongProgression downTo(short, long)
    {
        long $l0, $l1;
        kotlin.ranges.LongProgression$Companion $r0;
        kotlin.ranges.LongProgression $r1;
        short $s2;

        $s2 := @parameter0: short;

        $l0 := @parameter1: long;

        $r0 = <kotlin.ranges.LongProgression: kotlin.ranges.LongProgression$Companion Companion>;

        $l1 = (long) $s2;

        $r1 = virtualinvoke $r0.<kotlin.ranges.LongProgression$Companion: kotlin.ranges.LongProgression fromClosedRange(long,long,long)>($l1, $l0, -1L);

        return $r1;
    }

    public static final char first(kotlin.ranges.CharProgression)
    {
        kotlin.ranges.CharProgression $r0;
        boolean $z0;
        char $c0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.CharProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.CharProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharProgression: char getFirst()>();

        return $c0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final int first(kotlin.ranges.IntProgression)
    {
        kotlin.ranges.IntProgression $r0;
        boolean $z0;
        int $i0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.IntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getFirst()>();

        return $i0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final long first(kotlin.ranges.LongProgression)
    {
        kotlin.ranges.LongProgression $r0;
        boolean $z0;
        long $l0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.LongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $l0 = virtualinvoke $r0.<kotlin.ranges.LongProgression: long getFirst()>();

        return $l0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final java.lang.Character firstOrNull(kotlin.ranges.CharProgression)
    {
        kotlin.ranges.CharProgression $r0;
        boolean $z0;
        char $c0;
        java.lang.Character $r1;

        $r0 := @parameter0: kotlin.ranges.CharProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.CharProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $c0 = virtualinvoke $r0.<kotlin.ranges.CharProgression: char getFirst()>();

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        return $r1;
    }

    public static final java.lang.Integer firstOrNull(kotlin.ranges.IntProgression)
    {
        kotlin.ranges.IntProgression $r0;
        boolean $z0;
        int $i0;
        java.lang.Integer $r1;

        $r0 := @parameter0: kotlin.ranges.IntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getFirst()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static final java.lang.Long firstOrNull(kotlin.ranges.LongProgression)
    {
        kotlin.ranges.LongProgression $r0;
        boolean $z0;
        long $l0;
        java.lang.Long $r1;

        $r0 := @parameter0: kotlin.ranges.LongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = virtualinvoke $r0.<kotlin.ranges.LongProgression: long getFirst()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static final boolean floatRangeContains(kotlin.ranges.ClosedRange, byte)
    {
        kotlin.ranges.ClosedRange $r0;
        byte $b0;
        float $f0;
        java.lang.Float $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $f0 = (float) $b0;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean floatRangeContains(kotlin.ranges.ClosedRange, double)
    {
        kotlin.ranges.ClosedRange $r0;
        double $d0;
        float $f0;
        java.lang.Float $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $d0 := @parameter1: double;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $f0 = (float) $d0;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean floatRangeContains(kotlin.ranges.ClosedRange, int)
    {
        kotlin.ranges.ClosedRange $r0;
        int $i0;
        float $f0;
        java.lang.Float $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $f0 = (float) $i0;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean floatRangeContains(kotlin.ranges.ClosedRange, long)
    {
        kotlin.ranges.ClosedRange $r0;
        long $l0;
        float $f0;
        java.lang.Float $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $f0 = (float) $l0;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean floatRangeContains(kotlin.ranges.ClosedRange, short)
    {
        kotlin.ranges.ClosedRange $r0;
        short $s0;
        float $f0;
        java.lang.Float $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $f0 = (float) $s0;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean intRangeContains(kotlin.ranges.ClosedRange, byte)
    {
        kotlin.ranges.ClosedRange $r0;
        byte $b0;
        java.lang.Integer $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean intRangeContains(kotlin.ranges.ClosedRange, double)
    {
        kotlin.ranges.ClosedRange $r0;
        double $d0;
        java.lang.Integer $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $d0 := @parameter1: double;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Integer toIntExactOrNull(double)>($d0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean intRangeContains(kotlin.ranges.ClosedRange, float)
    {
        kotlin.ranges.ClosedRange $r0;
        float $f0;
        java.lang.Integer $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Integer toIntExactOrNull(float)>($f0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean intRangeContains(kotlin.ranges.ClosedRange, long)
    {
        kotlin.ranges.ClosedRange $r0;
        long $l0;
        java.lang.Integer $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Integer toIntExactOrNull(long)>($l0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean intRangeContains(kotlin.ranges.ClosedRange, short)
    {
        kotlin.ranges.ClosedRange $r0;
        short $s0;
        java.lang.Integer $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final char last(kotlin.ranges.CharProgression)
    {
        kotlin.ranges.CharProgression $r0;
        boolean $z0;
        char $c0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.CharProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.CharProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharProgression: char getLast()>();

        return $c0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final int last(kotlin.ranges.IntProgression)
    {
        kotlin.ranges.IntProgression $r0;
        boolean $z0;
        int $i0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.IntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getLast()>();

        return $i0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final long last(kotlin.ranges.LongProgression)
    {
        kotlin.ranges.LongProgression $r0;
        boolean $z0;
        long $l0;
        java.util.NoSuchElementException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: kotlin.ranges.LongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongProgression: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $l0 = virtualinvoke $r0.<kotlin.ranges.LongProgression: long getLast()>();

        return $l0;

     label1:
        $r1 = new java.util.NoSuchElementException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Progression ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw $r1;
    }

    public static final java.lang.Character lastOrNull(kotlin.ranges.CharProgression)
    {
        kotlin.ranges.CharProgression $r0;
        boolean $z0;
        char $c0;
        java.lang.Character $r1;

        $r0 := @parameter0: kotlin.ranges.CharProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.CharProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $c0 = virtualinvoke $r0.<kotlin.ranges.CharProgression: char getLast()>();

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        return $r1;
    }

    public static final java.lang.Integer lastOrNull(kotlin.ranges.IntProgression)
    {
        kotlin.ranges.IntProgression $r0;
        boolean $z0;
        int $i0;
        java.lang.Integer $r1;

        $r0 := @parameter0: kotlin.ranges.IntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getLast()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static final java.lang.Long lastOrNull(kotlin.ranges.LongProgression)
    {
        kotlin.ranges.LongProgression $r0;
        boolean $z0;
        long $l0;
        java.lang.Long $r1;

        $r0 := @parameter0: kotlin.ranges.LongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongProgression: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = virtualinvoke $r0.<kotlin.ranges.LongProgression: long getLast()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static final boolean longRangeContains(kotlin.ranges.ClosedRange, byte)
    {
        kotlin.ranges.ClosedRange $r0;
        byte $b0;
        long $l1;
        java.lang.Long $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $l1 = (long) $b0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean longRangeContains(kotlin.ranges.ClosedRange, double)
    {
        kotlin.ranges.ClosedRange $r0;
        double $d0;
        java.lang.Long $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $d0 := @parameter1: double;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Long toLongExactOrNull(double)>($d0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean longRangeContains(kotlin.ranges.ClosedRange, float)
    {
        kotlin.ranges.ClosedRange $r0;
        float $f0;
        java.lang.Long $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Long toLongExactOrNull(float)>($f0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean longRangeContains(kotlin.ranges.ClosedRange, int)
    {
        kotlin.ranges.ClosedRange $r0;
        int $i0;
        long $l1;
        java.lang.Long $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean longRangeContains(kotlin.ranges.ClosedRange, short)
    {
        kotlin.ranges.ClosedRange $r0;
        short $s0;
        long $l1;
        java.lang.Long $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $s0 := @parameter1: short;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $l1 = (long) $s0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    private static final char random(kotlin.ranges.CharRange)
    {
        char $c0;
        kotlin.ranges.CharRange $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: kotlin.ranges.CharRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $c0 = staticinvoke <kotlin.ranges.RangesKt: char random(kotlin.ranges.CharRange,kotlin.random.Random)>($r0, $r1);

        return $c0;
    }

    public static final char random(kotlin.ranges.CharRange, kotlin.random.Random)
    {
        kotlin.ranges.CharRange $r0;
        kotlin.random.Random $r1;
        char $c0, $c1;
        int $i2;
        java.lang.Throwable $r2;
        java.lang.String $r3;
        java.util.NoSuchElementException r4;
        java.lang.IllegalArgumentException r5;

        $r0 := @parameter0: kotlin.ranges.CharRange;

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

     label1:
        $c0 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getFirst()>();

        $c1 = virtualinvoke $r0.<kotlin.ranges.CharRange: char getLast()>();

     label2:
        $i2 = $c1 + 1;

     label3:
        $i2 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int,int)>($c0, $i2);

     label4:
        $c0 = (char) $i2;

        return $c0;

     label5:
        $r2 := @caughtexception;

        r4 = new java.util.NoSuchElementException;

        r5 = (java.lang.IllegalArgumentException) $r2;

        $r3 = virtualinvoke r5.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke r4.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r3);

        throw r4;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    private static final int random(kotlin.ranges.IntRange)
    {
        int $i0;
        kotlin.ranges.IntRange $r0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int random(kotlin.ranges.IntRange,kotlin.random.Random)>($r0, $r1);

        return $i0;
    }

    public static final int random(kotlin.ranges.IntRange, kotlin.random.Random)
    {
        kotlin.ranges.IntRange $r0;
        kotlin.random.Random $r1;
        int $i0;

        $r0 := @parameter0: kotlin.ranges.IntRange;

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $i0 = staticinvoke <kotlin.random.RandomKt: int nextInt(kotlin.random.Random,kotlin.ranges.IntRange)>($r1, $r0);

        return $i0;
    }

    private static final long random(kotlin.ranges.LongRange)
    {
        kotlin.ranges.LongRange $r0;
        long $l0;
        kotlin.random.Random$Default $r1;

        $r0 := @parameter0: kotlin.ranges.LongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $l0 = staticinvoke <kotlin.ranges.RangesKt: long random(kotlin.ranges.LongRange,kotlin.random.Random)>($r0, $r1);

        return $l0;
    }

    public static final long random(kotlin.ranges.LongRange, kotlin.random.Random)
    {
        kotlin.ranges.LongRange $r0;
        kotlin.random.Random $r1;
        long $l0;

        $r0 := @parameter0: kotlin.ranges.LongRange;

        $r1 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "random");

        $l0 = staticinvoke <kotlin.random.RandomKt: long nextLong(kotlin.random.Random,kotlin.ranges.LongRange)>($r1, $r0);

        return $l0;
    }

    private static final java.lang.Character randomOrNull(kotlin.ranges.CharRange)
    {
        java.lang.Character $r0;
        kotlin.ranges.CharRange $r1;
        kotlin.random.Random$Default $r2;

        $r1 := @parameter0: kotlin.ranges.CharRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Character randomOrNull(kotlin.ranges.CharRange,kotlin.random.Random)>($r1, $r2);

        return $r0;
    }

    public static final java.lang.Character randomOrNull(kotlin.ranges.CharRange, kotlin.random.Random)
    {
        kotlin.random.Random $r0;
        kotlin.ranges.CharRange $r1;
        boolean $z0;
        char $c0, $c1;
        int $i2;
        java.lang.Character $r2;

        $r1 := @parameter0: kotlin.ranges.CharRange;

        $r0 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "random");

        $z0 = virtualinvoke $r1.<kotlin.ranges.CharRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $c0 = virtualinvoke $r1.<kotlin.ranges.CharRange: char getFirst()>();

        $c1 = virtualinvoke $r1.<kotlin.ranges.CharRange: char getLast()>();

        $i2 = $c1 + 1;

        $i2 = virtualinvoke $r0.<kotlin.random.Random: int nextInt(int,int)>($c0, $i2);

        $c0 = (char) $i2;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        return $r2;
    }

    private static final java.lang.Integer randomOrNull(kotlin.ranges.IntRange)
    {
        java.lang.Integer $r0;
        kotlin.ranges.IntRange $r1;
        kotlin.random.Random$Default $r2;

        $r1 := @parameter0: kotlin.ranges.IntRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Integer randomOrNull(kotlin.ranges.IntRange,kotlin.random.Random)>($r1, $r2);

        return $r0;
    }

    public static final java.lang.Integer randomOrNull(kotlin.ranges.IntRange, kotlin.random.Random)
    {
        kotlin.random.Random $r0;
        kotlin.ranges.IntRange $r1;
        boolean $z0;
        int $i0;
        java.lang.Integer $r2;

        $r1 := @parameter0: kotlin.ranges.IntRange;

        $r0 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "random");

        $z0 = virtualinvoke $r1.<kotlin.ranges.IntRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = staticinvoke <kotlin.random.RandomKt: int nextInt(kotlin.random.Random,kotlin.ranges.IntRange)>($r0, $r1);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r2;
    }

    private static final java.lang.Long randomOrNull(kotlin.ranges.LongRange)
    {
        java.lang.Long $r0;
        kotlin.ranges.LongRange $r1;
        kotlin.random.Random$Default $r2;

        $r1 := @parameter0: kotlin.ranges.LongRange;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = <kotlin.random.Random: kotlin.random.Random$Default Default>;

        $r0 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Long randomOrNull(kotlin.ranges.LongRange,kotlin.random.Random)>($r1, $r2);

        return $r0;
    }

    public static final java.lang.Long randomOrNull(kotlin.ranges.LongRange, kotlin.random.Random)
    {
        kotlin.random.Random $r0;
        kotlin.ranges.LongRange $r1;
        boolean $z0;
        long $l0;
        java.lang.Long $r2;

        $r1 := @parameter0: kotlin.ranges.LongRange;

        $r0 := @parameter1: kotlin.random.Random;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "random");

        $z0 = virtualinvoke $r1.<kotlin.ranges.LongRange: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <kotlin.random.RandomKt: long nextLong(kotlin.random.Random,kotlin.ranges.LongRange)>($r0, $r1);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }

    public static final kotlin.ranges.CharProgression reversed(kotlin.ranges.CharProgression)
    {
        kotlin.ranges.CharProgression $r0;
        kotlin.ranges.CharProgression$Companion $r1;
        char $c0, $c1;
        int $i2;

        $r0 := @parameter0: kotlin.ranges.CharProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.ranges.CharProgression: kotlin.ranges.CharProgression$Companion Companion>;

        $c0 = virtualinvoke $r0.<kotlin.ranges.CharProgression: char getLast()>();

        $c1 = virtualinvoke $r0.<kotlin.ranges.CharProgression: char getFirst()>();

        $i2 = virtualinvoke $r0.<kotlin.ranges.CharProgression: int getStep()>();

        $i2 = neg $i2;

        $r0 = virtualinvoke $r1.<kotlin.ranges.CharProgression$Companion: kotlin.ranges.CharProgression fromClosedRange(char,char,int)>($c0, $c1, $i2);

        return $r0;
    }

    public static final kotlin.ranges.IntProgression reversed(kotlin.ranges.IntProgression)
    {
        kotlin.ranges.IntProgression $r0;
        kotlin.ranges.IntProgression$Companion $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: kotlin.ranges.IntProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $i0 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getLast()>();

        $i1 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getFirst()>();

        $i2 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getStep()>();

        $i2 = neg $i2;

        $r0 = virtualinvoke $r1.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($i0, $i1, $i2);

        return $r0;
    }

    public static final kotlin.ranges.LongProgression reversed(kotlin.ranges.LongProgression)
    {
        kotlin.ranges.LongProgression$Companion $r0;
        kotlin.ranges.LongProgression $r1;
        long $l0, $l1, $l2;

        $r1 := @parameter0: kotlin.ranges.LongProgression;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r0 = <kotlin.ranges.LongProgression: kotlin.ranges.LongProgression$Companion Companion>;

        $l0 = virtualinvoke $r1.<kotlin.ranges.LongProgression: long getLast()>();

        $l1 = virtualinvoke $r1.<kotlin.ranges.LongProgression: long getFirst()>();

        $l2 = virtualinvoke $r1.<kotlin.ranges.LongProgression: long getStep()>();

        $l2 = neg $l2;

        $r1 = virtualinvoke $r0.<kotlin.ranges.LongProgression$Companion: kotlin.ranges.LongProgression fromClosedRange(long,long,long)>($l0, $l1, $l2);

        return $r1;
    }

    public static final boolean shortRangeContains(kotlin.ranges.ClosedRange, byte)
    {
        kotlin.ranges.ClosedRange $r0;
        byte $b0;
        java.lang.Short $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $b0 := @parameter1: byte;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($b0);

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;
    }

    public static final boolean shortRangeContains(kotlin.ranges.ClosedRange, double)
    {
        kotlin.ranges.ClosedRange $r0;
        double $d0;
        java.lang.Short $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $d0 := @parameter1: double;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Short toShortExactOrNull(double)>($d0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean shortRangeContains(kotlin.ranges.ClosedRange, float)
    {
        kotlin.ranges.ClosedRange $r0;
        float $f0;
        java.lang.Short $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $f0 := @parameter1: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Short toShortExactOrNull(float)>($f0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean shortRangeContains(kotlin.ranges.ClosedRange, int)
    {
        kotlin.ranges.ClosedRange $r0;
        int $i0;
        java.lang.Short $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Short toShortExactOrNull(int)>($i0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final boolean shortRangeContains(kotlin.ranges.ClosedRange, long)
    {
        kotlin.ranges.ClosedRange $r0;
        long $l0;
        java.lang.Short $r1;
        boolean $z0;
        java.lang.Comparable r2;

        $r0 := @parameter0: kotlin.ranges.ClosedRange;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.ranges.RangesKt: java.lang.Short toShortExactOrNull(long)>($l0);

        if $r1 == null goto label1;

        r2 = (java.lang.Comparable) $r1;

        $z0 = interfaceinvoke $r0.<kotlin.ranges.ClosedRange: boolean contains(java.lang.Comparable)>(r2);

        return $z0;

     label1:
        return 0;
    }

    public static final kotlin.ranges.CharProgression step(kotlin.ranges.CharProgression, int)
    {
        kotlin.ranges.CharProgression $r0;
        int $i0, $i3;
        boolean $z0;
        java.lang.Integer $r1;
        kotlin.ranges.CharProgression$Companion $r2;
        char $c1, $c2;

        $r0 := @parameter0: kotlin.ranges.CharProgression;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <kotlin.ranges.RangesKt: void checkStepIsPositive(boolean,java.lang.Number)>($z0, $r1);

        $r2 = <kotlin.ranges.CharProgression: kotlin.ranges.CharProgression$Companion Companion>;

        $c1 = virtualinvoke $r0.<kotlin.ranges.CharProgression: char getFirst()>();

        $c2 = virtualinvoke $r0.<kotlin.ranges.CharProgression: char getLast()>();

        $i3 = virtualinvoke $r0.<kotlin.ranges.CharProgression: int getStep()>();

        if $i3 <= 0 goto label3;

        goto label4;

     label3:
        $i0 = neg $i0;

     label4:
        $r0 = virtualinvoke $r2.<kotlin.ranges.CharProgression$Companion: kotlin.ranges.CharProgression fromClosedRange(char,char,int)>($c1, $c2, $i0);

        return $r0;
    }

    public static final kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression, int)
    {
        kotlin.ranges.IntProgression $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Integer $r1;
        kotlin.ranges.IntProgression$Companion $r2;

        $r0 := @parameter0: kotlin.ranges.IntProgression;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <kotlin.ranges.RangesKt: void checkStepIsPositive(boolean,java.lang.Number)>($z0, $r1);

        $r2 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion>;

        $i1 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getFirst()>();

        $i2 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getLast()>();

        $i3 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getStep()>();

        if $i3 <= 0 goto label3;

        goto label4;

     label3:
        $i0 = neg $i0;

     label4:
        $r0 = virtualinvoke $r2.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($i1, $i2, $i0);

        return $r0;
    }

    public static final kotlin.ranges.LongProgression step(kotlin.ranges.LongProgression, long)
    {
        kotlin.ranges.LongProgression$Companion $r0;
        kotlin.ranges.LongProgression $r1;
        long $l0, $l2, $l3, $l4;
        byte $b1;
        boolean $z0;
        java.lang.Long $r2;

        $r1 := @parameter0: kotlin.ranges.LongProgression;

        $l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        staticinvoke <kotlin.ranges.RangesKt: void checkStepIsPositive(boolean,java.lang.Number)>($z0, $r2);

        $r0 = <kotlin.ranges.LongProgression: kotlin.ranges.LongProgression$Companion Companion>;

        $l2 = virtualinvoke $r1.<kotlin.ranges.LongProgression: long getFirst()>();

        $l3 = virtualinvoke $r1.<kotlin.ranges.LongProgression: long getLast()>();

        $l4 = virtualinvoke $r1.<kotlin.ranges.LongProgression: long getStep()>();

        $b1 = $l4 cmp 0L;

        if $b1 <= 0 goto label3;

        goto label4;

     label3:
        $l0 = neg $l0;

     label4:
        $r1 = virtualinvoke $r0.<kotlin.ranges.LongProgression$Companion: kotlin.ranges.LongProgression fromClosedRange(long,long,long)>($l2, $l3, $l0);

        return $r1;
    }

    public static final java.lang.Byte toByteExactOrNull(double)
    {
        java.lang.Byte $r0;
        double $d0;
        boolean $z0;
        byte $b0;
        int $i1;

        $d0 := @parameter0: double;

        $z0 = 0;

        $b0 = $d0 cmpg 127.0;

        if $b0 > 0 goto label1;

        $b0 = $d0 cmpg -128.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $i1 = (int) $d0;

        $b0 = (byte) $i1;

        $r0 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        return $r0;

     label2:
        return null;
    }

    public static final java.lang.Byte toByteExactOrNull(float)
    {
        java.lang.Byte $r0;
        float $f0;
        boolean $z0;
        byte $b0;
        int $i1;

        $f0 := @parameter0: float;

        $z0 = 0;

        $b0 = $f0 cmpg 127.0F;

        if $b0 > 0 goto label1;

        $b0 = $f0 cmpg -128.0F;

        if $b0 < 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $i1 = (int) $f0;

        $b0 = (byte) $i1;

        $r0 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        return $r0;

     label2:
        return null;
    }

    public static final java.lang.Byte toByteExactOrNull(int)
    {
        int $i0;
        kotlin.ranges.IntRange $r0;
        boolean $z0;
        byte $b1;
        java.lang.Byte $r1;

        $i0 := @parameter0: int;

        $r0 = new kotlin.ranges.IntRange;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>(-128, 127);

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntRange: boolean contains(int)>($i0);

        if $z0 == 0 goto label1;

        $b1 = (byte) $i0;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);

        return $r1;

     label1:
        return null;
    }

    public static final java.lang.Byte toByteExactOrNull(long)
    {
        int $i0;
        long $l1;
        kotlin.ranges.LongRange $r0;
        boolean $z0;
        byte $b2;
        java.lang.Byte $r1;

        $l1 := @parameter0: long;

        $r0 = new kotlin.ranges.LongRange;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>(-128L, 127L);

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongRange: boolean contains(long)>($l1);

        if $z0 == 0 goto label1;

        $i0 = (int) $l1;

        $b2 = (byte) $i0;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        return $r1;

     label1:
        return null;
    }

    public static final java.lang.Byte toByteExactOrNull(short)
    {
        short $s0;
        kotlin.ranges.IntRange $r0;
        boolean $z0;
        byte $b1;
        java.lang.Byte $r1;

        $s0 := @parameter0: short;

        $r0 = new kotlin.ranges.IntRange;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>(-128, 127);

        $z0 = staticinvoke <kotlin.ranges.RangesKt: boolean intRangeContains(kotlin.ranges.ClosedRange,short)>($r0, $s0);

        if $z0 == 0 goto label1;

        $b1 = (byte) $s0;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);

        return $r1;

     label1:
        return null;
    }

    public static final java.lang.Integer toIntExactOrNull(double)
    {
        java.lang.Integer $r0;
        double $d0;
        boolean $z0;
        byte $b0;
        int $i1;

        $d0 := @parameter0: double;

        $z0 = 0;

        $b0 = $d0 cmpg 2.147483647E9;

        if $b0 > 0 goto label1;

        $b0 = $d0 cmpg -2.147483648E9;

        if $b0 < 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $i1 = (int) $d0;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r0;

     label2:
        return null;
    }

    public static final java.lang.Integer toIntExactOrNull(float)
    {
        java.lang.Integer $r0;
        float $f0;
        boolean $z0;
        byte $b0;
        int $i1;

        $f0 := @parameter0: float;

        $z0 = 0;

        $b0 = $f0 cmpg 2.14748365E9F;

        if $b0 > 0 goto label1;

        $b0 = $f0 cmpg -2.14748365E9F;

        if $b0 < 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $i1 = (int) $f0;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r0;

     label2:
        return null;
    }

    public static final java.lang.Integer toIntExactOrNull(long)
    {
        int $i0;
        long $l1;
        kotlin.ranges.LongRange $r0;
        boolean $z0;
        java.lang.Integer $r1;

        $l1 := @parameter0: long;

        $r0 = new kotlin.ranges.LongRange;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>(-2147483648L, 2147483647L);

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongRange: boolean contains(long)>($l1);

        if $z0 == 0 goto label1;

        $i0 = (int) $l1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;

     label1:
        return null;
    }

    public static final java.lang.Long toLongExactOrNull(double)
    {
        java.lang.Long $r0;
        double $d0;
        boolean $z0;
        byte $b0;
        long $l1;

        $d0 := @parameter0: double;

        $z0 = 0;

        $b0 = $d0 cmpg 9.223372036854776E18;

        if $b0 > 0 goto label1;

        $b0 = $d0 cmpg -9.223372036854776E18;

        if $b0 < 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $l1 = (long) $d0;

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r0;

     label2:
        return null;
    }

    public static final java.lang.Long toLongExactOrNull(float)
    {
        java.lang.Long $r0;
        float $f0;
        boolean $z0;
        byte $b0;
        long $l1;

        $f0 := @parameter0: float;

        $z0 = 0;

        $b0 = $f0 cmpg 9.223372E18F;

        if $b0 > 0 goto label1;

        $b0 = $f0 cmpg -9.223372E18F;

        if $b0 < 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $l1 = (long) $f0;

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r0;

     label2:
        return null;
    }

    public static final java.lang.Short toShortExactOrNull(double)
    {
        java.lang.Short $r0;
        double $d0;
        boolean $z0;
        byte $b0;
        int $i1;
        short $s2;

        $d0 := @parameter0: double;

        $z0 = 0;

        $b0 = $d0 cmpg 32767.0;

        if $b0 > 0 goto label1;

        $b0 = $d0 cmpg -32768.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $i1 = (int) $d0;

        $s2 = (short) $i1;

        $r0 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s2);

        return $r0;

     label2:
        return null;
    }

    public static final java.lang.Short toShortExactOrNull(float)
    {
        java.lang.Short $r0;
        float $f0;
        boolean $z0;
        byte $b0;
        int $i1;
        short $s2;

        $f0 := @parameter0: float;

        $z0 = 0;

        $b0 = $f0 cmpg 32767.0F;

        if $b0 > 0 goto label1;

        $b0 = $f0 cmpg -32768.0F;

        if $b0 < 0 goto label1;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label2;

        $i1 = (int) $f0;

        $s2 = (short) $i1;

        $r0 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s2);

        return $r0;

     label2:
        return null;
    }

    public static final java.lang.Short toShortExactOrNull(int)
    {
        int $i0;
        kotlin.ranges.IntRange $r0;
        boolean $z0;
        short $s1;
        java.lang.Short $r1;

        $i0 := @parameter0: int;

        $r0 = new kotlin.ranges.IntRange;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>(-32768, 32767);

        $z0 = virtualinvoke $r0.<kotlin.ranges.IntRange: boolean contains(int)>($i0);

        if $z0 == 0 goto label1;

        $s1 = (short) $i0;

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        return $r1;

     label1:
        return null;
    }

    public static final java.lang.Short toShortExactOrNull(long)
    {
        int $i0;
        long $l1;
        kotlin.ranges.LongRange $r0;
        boolean $z0;
        short $s2;
        java.lang.Short $r1;

        $l1 := @parameter0: long;

        $r0 = new kotlin.ranges.LongRange;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>(-32768L, 32767L);

        $z0 = virtualinvoke $r0.<kotlin.ranges.LongRange: boolean contains(long)>($l1);

        if $z0 == 0 goto label1;

        $i0 = (int) $l1;

        $s2 = (short) $i0;

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s2);

        return $r1;

     label1:
        return null;
    }

    public static final kotlin.ranges.CharRange until(char, char)
    {
        char $c0, $c1;
        int $i2;
        kotlin.ranges.CharRange$Companion $r0;
        kotlin.ranges.CharRange $r1;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($c1, 0);

        if $i2 > 0 goto label1;

        $r0 = <kotlin.ranges.CharRange: kotlin.ranges.CharRange$Companion Companion>;

        $r1 = virtualinvoke $r0.<kotlin.ranges.CharRange$Companion: kotlin.ranges.CharRange getEMPTY()>();

        return $r1;

     label1:
        $r1 = new kotlin.ranges.CharRange;

        $i2 = $c1 + -1;

        $c1 = (char) $i2;

        specialinvoke $r1.<kotlin.ranges.CharRange: void <init>(char,char)>($c0, $c1);

        return $r1;
    }

    public static final kotlin.ranges.IntRange until(byte, byte)
    {
        byte $b0, $b1;
        kotlin.ranges.IntRange $r0;
        int $i2;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $r0 = new kotlin.ranges.IntRange;

        $i2 = $b1 + -1;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>($b0, $i2);

        return $r0;
    }

    public static final kotlin.ranges.IntRange until(byte, int)
    {
        kotlin.ranges.IntRange $r0;
        byte $b0;
        int $i1;
        kotlin.ranges.IntRange$Companion $r1;

        $b0 := @parameter0: byte;

        $i1 := @parameter1: int;

        if $i1 > -2147483648 goto label1;

        $r1 = <kotlin.ranges.IntRange: kotlin.ranges.IntRange$Companion Companion>;

        $r0 = virtualinvoke $r1.<kotlin.ranges.IntRange$Companion: kotlin.ranges.IntRange getEMPTY()>();

        return $r0;

     label1:
        $r0 = new kotlin.ranges.IntRange;

        $i1 = $i1 + -1;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>($b0, $i1);

        return $r0;
    }

    public static final kotlin.ranges.IntRange until(byte, short)
    {
        byte $b0;
        kotlin.ranges.IntRange $r0;
        short $s1;
        int $i2;

        $b0 := @parameter0: byte;

        $s1 := @parameter1: short;

        $r0 = new kotlin.ranges.IntRange;

        $i2 = $s1 + -1;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>($b0, $i2);

        return $r0;
    }

    public static final kotlin.ranges.IntRange until(int, byte)
    {
        int $i0, $i2;
        kotlin.ranges.IntRange $r0;
        byte $b1;

        $i0 := @parameter0: int;

        $b1 := @parameter1: byte;

        $r0 = new kotlin.ranges.IntRange;

        $i2 = $b1 + -1;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i2);

        return $r0;
    }

    public static final kotlin.ranges.IntRange until(int, int)
    {
        kotlin.ranges.IntRange $r0;
        int $i0, $i1;
        kotlin.ranges.IntRange$Companion $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 > -2147483648 goto label1;

        $r1 = <kotlin.ranges.IntRange: kotlin.ranges.IntRange$Companion Companion>;

        $r0 = virtualinvoke $r1.<kotlin.ranges.IntRange$Companion: kotlin.ranges.IntRange getEMPTY()>();

        return $r0;

     label1:
        $r0 = new kotlin.ranges.IntRange;

        $i1 = $i1 + -1;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i1);

        return $r0;
    }

    public static final kotlin.ranges.IntRange until(int, short)
    {
        int $i0, $i2;
        kotlin.ranges.IntRange $r0;
        short $s1;

        $i0 := @parameter0: int;

        $s1 := @parameter1: short;

        $r0 = new kotlin.ranges.IntRange;

        $i2 = $s1 + -1;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i2);

        return $r0;
    }

    public static final kotlin.ranges.IntRange until(short, byte)
    {
        short $s0;
        kotlin.ranges.IntRange $r0;
        byte $b1;
        int $i2;

        $s0 := @parameter0: short;

        $b1 := @parameter1: byte;

        $r0 = new kotlin.ranges.IntRange;

        $i2 = $b1 + -1;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>($s0, $i2);

        return $r0;
    }

    public static final kotlin.ranges.IntRange until(short, int)
    {
        kotlin.ranges.IntRange $r0;
        short $s0;
        int $i1;
        kotlin.ranges.IntRange$Companion $r1;

        $s0 := @parameter0: short;

        $i1 := @parameter1: int;

        if $i1 > -2147483648 goto label1;

        $r1 = <kotlin.ranges.IntRange: kotlin.ranges.IntRange$Companion Companion>;

        $r0 = virtualinvoke $r1.<kotlin.ranges.IntRange$Companion: kotlin.ranges.IntRange getEMPTY()>();

        return $r0;

     label1:
        $r0 = new kotlin.ranges.IntRange;

        $i1 = $i1 + -1;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>($s0, $i1);

        return $r0;
    }

    public static final kotlin.ranges.IntRange until(short, short)
    {
        short $s0, $s1;
        kotlin.ranges.IntRange $r0;
        int $i2;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $r0 = new kotlin.ranges.IntRange;

        $i2 = $s1 + -1;

        specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>($s0, $i2);

        return $r0;
    }

    public static final kotlin.ranges.LongRange until(byte, long)
    {
        long $l0, $l3;
        byte $b1, $b2;
        kotlin.ranges.LongRange $r0;
        kotlin.ranges.LongRange$Companion $r1;

        $b2 := @parameter0: byte;

        $l3 := @parameter1: long;

        $b1 = $l3 cmp -9223372036854775808L;

        if $b1 > 0 goto label1;

        $r1 = <kotlin.ranges.LongRange: kotlin.ranges.LongRange$Companion Companion>;

        $r0 = virtualinvoke $r1.<kotlin.ranges.LongRange$Companion: kotlin.ranges.LongRange getEMPTY()>();

        return $r0;

     label1:
        $r0 = new kotlin.ranges.LongRange;

        $l0 = (long) $b2;

        $l3 = $l3 + -1L;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>($l0, $l3);

        return $r0;
    }

    public static final kotlin.ranges.LongRange until(int, long)
    {
        long $l0, $l3;
        byte $b1;
        kotlin.ranges.LongRange $r0;
        int $i2;
        kotlin.ranges.LongRange$Companion $r1;

        $i2 := @parameter0: int;

        $l3 := @parameter1: long;

        $b1 = $l3 cmp -9223372036854775808L;

        if $b1 > 0 goto label1;

        $r1 = <kotlin.ranges.LongRange: kotlin.ranges.LongRange$Companion Companion>;

        $r0 = virtualinvoke $r1.<kotlin.ranges.LongRange$Companion: kotlin.ranges.LongRange getEMPTY()>();

        return $r0;

     label1:
        $r0 = new kotlin.ranges.LongRange;

        $l0 = (long) $i2;

        $l3 = $l3 + -1L;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>($l0, $l3);

        return $r0;
    }

    public static final kotlin.ranges.LongRange until(long, byte)
    {
        long $l0, $l2;
        byte $b1;
        kotlin.ranges.LongRange $r0;

        $l0 := @parameter0: long;

        $b1 := @parameter1: byte;

        $r0 = new kotlin.ranges.LongRange;

        $l2 = (long) $b1;

        $l2 = $l2 + -1L;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>($l0, $l2);

        return $r0;
    }

    public static final kotlin.ranges.LongRange until(long, int)
    {
        long $l0, $l2;
        int $i1;
        kotlin.ranges.LongRange $r0;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $r0 = new kotlin.ranges.LongRange;

        $l2 = (long) $i1;

        $l2 = $l2 + -1L;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>($l0, $l2);

        return $r0;
    }

    public static final kotlin.ranges.LongRange until(long, long)
    {
        byte $b0;
        kotlin.ranges.LongRange $r0;
        long $l1, $l2;
        kotlin.ranges.LongRange$Companion $r1;

        $l1 := @parameter0: long;

        $l2 := @parameter1: long;

        $b0 = $l2 cmp -9223372036854775808L;

        if $b0 > 0 goto label1;

        $r1 = <kotlin.ranges.LongRange: kotlin.ranges.LongRange$Companion Companion>;

        $r0 = virtualinvoke $r1.<kotlin.ranges.LongRange$Companion: kotlin.ranges.LongRange getEMPTY()>();

        return $r0;

     label1:
        $r0 = new kotlin.ranges.LongRange;

        $l2 = $l2 + -1L;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>($l1, $l2);

        return $r0;
    }

    public static final kotlin.ranges.LongRange until(long, short)
    {
        long $l0, $l2;
        short $s1;
        kotlin.ranges.LongRange $r0;

        $l0 := @parameter0: long;

        $s1 := @parameter1: short;

        $r0 = new kotlin.ranges.LongRange;

        $l2 = (long) $s1;

        $l2 = $l2 + -1L;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>($l0, $l2);

        return $r0;
    }

    public static final kotlin.ranges.LongRange until(short, long)
    {
        long $l0, $l3;
        byte $b1;
        kotlin.ranges.LongRange $r0;
        short $s2;
        kotlin.ranges.LongRange$Companion $r1;

        $s2 := @parameter0: short;

        $l3 := @parameter1: long;

        $b1 = $l3 cmp -9223372036854775808L;

        if $b1 > 0 goto label1;

        $r1 = <kotlin.ranges.LongRange: kotlin.ranges.LongRange$Companion Companion>;

        $r0 = virtualinvoke $r1.<kotlin.ranges.LongRange$Companion: kotlin.ranges.LongRange getEMPTY()>();

        return $r0;

     label1:
        $r0 = new kotlin.ranges.LongRange;

        $l0 = (long) $s2;

        $l3 = $l3 + -1L;

        specialinvoke $r0.<kotlin.ranges.LongRange: void <init>(long,long)>($l0, $l3);

        return $r0;
    }

