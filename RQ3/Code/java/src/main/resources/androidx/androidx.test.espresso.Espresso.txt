androidx.test.espresso.Espresso
<androidx.test.espresso.Espresso: java.lang.String TAG>
<androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE>
<androidx.test.espresso.Espresso: androidx.test.espresso.base.IdlingResourceRegistry baseRegistry>
<androidx.test.espresso.Espresso: androidx.test.platform.tracing.Tracing tracer>
<androidx.test.espresso.Espresso: int TIMEOUT_SECONDS>
<androidx.test.espresso.Espresso: org.hamcrest.Matcher OVERFLOW_BUTTON_MATCHER>
    static volatile androidx.test.espresso.BaseLayerComponent '-$$Nest$sfgetBASE'()
    {
        androidx.test.espresso.BaseLayerComponent $r0;

        $r0 = <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE>;

        return $r0;
    }

    public static androidx.test.espresso.DataInteraction onData(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        androidx.test.espresso.DataInteraction r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        r1 = new androidx.test.espresso.DataInteraction;

        specialinvoke r1.<androidx.test.espresso.DataInteraction: void <init>(org.hamcrest.Matcher)>(r0);

        return r1;
    }

    public static androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)
    {
        androidx.test.espresso.BaseLayerComponent r0;
        androidx.test.espresso.ViewInteractionModule r1;
        androidx.test.platform.tracing.Tracing $r2;
        androidx.test.espresso.ViewInteractionComponent $r3;
        java.lang.Throwable $r4, $r5, r11, r12;
        org.hamcrest.Matcher r6;
        java.lang.Object[] r7;
        java.lang.String r8;
        androidx.test.platform.tracing.Tracer$Span r9;
        androidx.test.espresso.ViewInteraction r10;

        r6 := @parameter0: org.hamcrest.Matcher;

        r7 = newarray (java.lang.Object)[1];

        r7[0] = r6;

        r8 = staticinvoke <androidx.test.espresso.util.TracingUtil: java.lang.String getSpanName(java.lang.String,java.lang.String,java.lang.Object[])>("Espresso", "onView", r7);

        $r2 = <androidx.test.espresso.Espresso: androidx.test.platform.tracing.Tracing tracer>;

        r9 = virtualinvoke $r2.<androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)>(r8);

     label1:
        r0 = <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE>;

        r1 = new androidx.test.espresso.ViewInteractionModule;

        specialinvoke r1.<androidx.test.espresso.ViewInteractionModule: void <init>(org.hamcrest.Matcher)>(r6);

        $r3 = interfaceinvoke r0.<androidx.test.espresso.BaseLayerComponent: androidx.test.espresso.ViewInteractionComponent plus(androidx.test.espresso.ViewInteractionModule)>(r1);

        r10 = interfaceinvoke $r3.<androidx.test.espresso.ViewInteractionComponent: androidx.test.espresso.ViewInteraction viewInteraction()>();

     label2:
        if r9 == null goto label3;

        interfaceinvoke r9.<androidx.test.platform.tracing.Tracer$Span: void close()>();

     label3:
        return r10;

     label4:
        $r5 := @caughtexception;

        r11 = $r5;

        if r9 == null goto label6;

     label5:
        interfaceinvoke r9.<androidx.test.platform.tracing.Tracer$Span: void close()>();

     label6:
        throw r11;

     label7:
        $r4 := @caughtexception;

        r12 = $r4;

        staticinvoke <androidx.test.espresso.Espresso$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r11, r12);

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static java.lang.Object onIdle(java.util.concurrent.Callable)
    {
        java.util.concurrent.FutureTask r0, r26;
        androidx.test.platform.tracing.Tracing $r1;
        androidx.test.espresso.BaseLayerComponent $r2, $r3;
        androidx.test.internal.platform.os.ControlledLooper $r4;
        java.lang.Throwable $r6, $r7, $r8, $r10, $r11, $r12, r19, r20, r22, r24, r30, r33, r34;
        androidx.test.espresso.AppNotIdleException $r9;
        java.util.concurrent.Callable r13;
        androidx.test.platform.tracing.Tracer$Span r14;
        java.util.concurrent.Executor r15;
        androidx.test.espresso.Espresso$1 r16, r25;
        androidx.test.espresso.core.internal.deps.guava.util.concurrent.ListenableFutureTask r17;
        java.lang.Object r18;
        java.lang.RuntimeException r21, r23, r27, r28;
        boolean z0;
        java.lang.Runnable r29;
        java.util.concurrent.ExecutionException r31, r32;

        r13 := @parameter0: java.util.concurrent.Callable;

        $r1 = <androidx.test.espresso.Espresso: androidx.test.platform.tracing.Tracing tracer>;

        r14 = virtualinvoke $r1.<androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)>("Espresso.onIdle");

     label01:
        staticinvoke <androidx.test.internal.util.Checks: void checkNotMainThread()>();

        $r2 = <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE>;

        r15 = interfaceinvoke $r2.<androidx.test.espresso.BaseLayerComponent: java.util.concurrent.Executor mainThreadExecutor()>();

     label02:
        r25 = new androidx.test.espresso.Espresso$1;

        r16 = r25;

        specialinvoke r25.<androidx.test.espresso.Espresso$1: void <init>()>();

     label03:
        r17 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.util.concurrent.ListenableFutureTask: androidx.test.espresso.core.internal.deps.guava.util.concurrent.ListenableFutureTask create(java.lang.Runnable,java.lang.Object)>(r16, null);

        r26 = new java.util.concurrent.FutureTask;

        r0 = r26;

        specialinvoke r26.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r13);

        r29 = (java.lang.Runnable) r0;

        virtualinvoke r17.<androidx.test.espresso.core.internal.deps.guava.util.concurrent.ListenableFutureTask: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r29, r15);

        interfaceinvoke r15.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r17);

        $r3 = <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE>;

        $r4 = interfaceinvoke $r3.<androidx.test.espresso.BaseLayerComponent: androidx.test.internal.platform.os.ControlledLooper controlledLooper()>();

        interfaceinvoke $r4.<androidx.test.internal.platform.os.ControlledLooper: void drainMainThreadUntilIdle()>();

     label04:
        virtualinvoke r17.<androidx.test.espresso.core.internal.deps.guava.util.concurrent.ListenableFutureTask: java.lang.Object get()>();

        r18 = virtualinvoke r0.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label05:
        if r14 == null goto label06;

        interfaceinvoke r14.<androidx.test.platform.tracing.Tracer$Span: void close()>();

     label06:
        return r18;

     label07:
        $r12 := @caughtexception;

        r19 = $r12;

        if r14 == null goto label09;

     label08:
        interfaceinvoke r14.<androidx.test.platform.tracing.Tracer$Span: void close()>();

     label09:
        throw r19;

     label10:
        $r11 := @caughtexception;

        r20 = $r11;

     label11:
        r27 = new java.lang.RuntimeException;

        r21 = r27;

        specialinvoke r27.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r20);

        r30 = (java.lang.Throwable) r21;

        throw r30;

     label12:
        $r6 := @caughtexception;

        r22 = $r6;

     label13:
        r31 = (java.util.concurrent.ExecutionException) r22;

        $r7 = virtualinvoke r31.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        z0 = $r7 instanceof androidx.test.espresso.AppNotIdleException;

     label14:
        if z0 == 0 goto label16;

     label15:
        r32 = (java.util.concurrent.ExecutionException) r22;

        $r8 = virtualinvoke r32.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $r9 = (androidx.test.espresso.AppNotIdleException) $r8;

        r33 = (java.lang.Throwable) $r9;

        throw r33;

     label16:
        r28 = new java.lang.RuntimeException;

        r23 = r28;

        specialinvoke r28.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r22);

        r34 = (java.lang.Throwable) r23;

        throw r34;

     label17:
        $r10 := @caughtexception;

        r24 = $r10;

        staticinvoke <androidx.test.espresso.Espresso$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r19, r24);

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.InterruptedException from label04 to label05 with label10;
        catch java.util.concurrent.ExecutionException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label11 to label12 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
        catch java.lang.Throwable from label15 to label17 with label07;
    }

    public static java.util.List getIdlingResources()
    {
        androidx.test.espresso.base.IdlingResourceRegistry $r0;
        java.util.List $r1;

        $r0 = <androidx.test.espresso.Espresso: androidx.test.espresso.base.IdlingResourceRegistry baseRegistry>;

        $r1 = virtualinvoke $r0.<androidx.test.espresso.base.IdlingResourceRegistry: java.util.List getResources()>();

        return $r1;
    }

    static volatile org.hamcrest.Matcher '-$$Nest$sfgetOVERFLOW_BUTTON_MATCHER'()
    {
        org.hamcrest.Matcher $r0;

        $r0 = <androidx.test.espresso.Espresso: org.hamcrest.Matcher OVERFLOW_BUTTON_MATCHER>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        androidx.test.espresso.BaseLayerComponent $r2, $r3, $r5;
        androidx.test.espresso.base.IdlingResourceRegistry $r4;
        androidx.test.platform.tracing.Tracing $r6;
        org.hamcrest.Matcher $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.hamcrest.core.AnyOf $r14;

        $r0 = class "Landroidx/test/espresso/Espresso;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <androidx.test.espresso.Espresso: java.lang.String TAG> = $r1;

        $r2 = staticinvoke <androidx.test.espresso.GraphHolder: androidx.test.espresso.BaseLayerComponent baseLayer()>();

        <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE> = $r2;

        $r3 = <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE>;

        $r4 = interfaceinvoke $r3.<androidx.test.espresso.BaseLayerComponent: androidx.test.espresso.base.IdlingResourceRegistry idlingResourceRegistry()>();

        <androidx.test.espresso.Espresso: androidx.test.espresso.base.IdlingResourceRegistry baseRegistry> = $r4;

        $r5 = <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE>;

        $r6 = interfaceinvoke $r5.<androidx.test.espresso.BaseLayerComponent: androidx.test.platform.tracing.Tracing tracer()>();

        <androidx.test.espresso.Espresso: androidx.test.platform.tracing.Tracing tracer> = $r6;

        $r7 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isDisplayed()>();

        $r8 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withContentDescription(java.lang.String)>("More options");

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r7, $r8);

        $r10 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isDisplayed()>();

        $r11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher endsWith(java.lang.String)>("OverflowMenuButton");

        $r12 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withClassName(org.hamcrest.Matcher)>($r11);

        $r13 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r10, $r12);

        $r14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r9, $r13);

        <androidx.test.espresso.Espresso: org.hamcrest.Matcher OVERFLOW_BUTTON_MATCHER> = $r14;

        return;
    }

    private void <init>()
    {
        androidx.test.espresso.Espresso r0;

        r0 := @this: androidx.test.espresso.Espresso;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void closeSoftKeyboard()
    {
        androidx.test.espresso.ViewAction[] r0;
        androidx.test.platform.tracing.Tracing $r1;
        org.hamcrest.Matcher $r2;
        androidx.test.espresso.ViewAction $r3;
        java.lang.Throwable $r5, $r6, r9, r10;
        androidx.test.platform.tracing.Tracer$Span r7;
        androidx.test.espresso.ViewInteraction r8;

        $r1 = <androidx.test.espresso.Espresso: androidx.test.platform.tracing.Tracing tracer>;

        r7 = virtualinvoke $r1.<androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)>("Espresso.closeSoftKeyboard");

     label1:
        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isRoot()>();

        r8 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r2);

        r0 = newarray (androidx.test.espresso.ViewAction)[1];

     label2:
        $r3 = staticinvoke <androidx.test.espresso.action.ViewActions: androidx.test.espresso.ViewAction closeSoftKeyboard()>();

        r0[0] = $r3;

        virtualinvoke r8.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r0);

     label3:
        if r7 == null goto label4;

        interfaceinvoke r7.<androidx.test.platform.tracing.Tracer$Span: void close()>();

        return;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        r9 = $r5;

        if r7 == null goto label7;

     label6:
        interfaceinvoke r7.<androidx.test.platform.tracing.Tracer$Span: void close()>();

     label7:
        throw r9;

     label8:
        $r6 := @caughtexception;

        r10 = $r6;

        staticinvoke <androidx.test.espresso.Espresso$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r9, r10);

        goto label7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    static void lambda$waitUntilNextFrame$0(java.util.concurrent.CountDownLatch, long)
    {
        java.util.concurrent.CountDownLatch r0;
        long l0;

        r0 := @parameter0: java.util.concurrent.CountDownLatch;

        l0 := @parameter1: long;

        virtualinvoke r0.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    static void lambda$waitUntilNextFrame$1(java.util.concurrent.CountDownLatch)
    {
        java.util.concurrent.CountDownLatch r0;
        android.view.Choreographer r1;
        androidx.test.espresso.Espresso$$ExternalSyntheticLambda2 r2;

        r0 := @parameter0: java.util.concurrent.CountDownLatch;

        r1 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        r2 = new androidx.test.espresso.Espresso$$ExternalSyntheticLambda2;

        specialinvoke r2.<androidx.test.espresso.Espresso$$ExternalSyntheticLambda2: void <init>(java.util.concurrent.CountDownLatch)>(r0);

        virtualinvoke r1.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>(r2);

        return;
    }

    public static void onIdle()
    {
        androidx.test.espresso.Espresso$2 r0;

        r0 = new androidx.test.espresso.Espresso$2;

        specialinvoke r0.<androidx.test.espresso.Espresso$2: void <init>()>();

        staticinvoke <androidx.test.espresso.Espresso: java.lang.Object onIdle(java.util.concurrent.Callable)>(r0);

        return;
    }

    public static void openActionBarOverflowOrOptionsMenu(android.content.Context)
    {
        androidx.test.espresso.Espresso$TransitionBridgingViewAction r0;
        androidx.test.platform.tracing.Tracing $r1;
        android.content.pm.ApplicationInfo $r2;
        org.hamcrest.Matcher $r3, $r6, $r8, $r11;
        androidx.test.espresso.ViewAction $r4, $r9, $r12;
        java.lang.Throwable $r14, $r15, r26, r27;
        android.content.Context r16;
        androidx.test.platform.tracing.Tracer$Span r17;
        int i0;
        androidx.test.espresso.ViewInteraction r18, r20, r22, r24;
        androidx.test.espresso.ViewAction[] r19, r21, r23, r25;
        boolean z0;

        r16 := @parameter0: android.content.Context;

        $r1 = <androidx.test.espresso.Espresso: androidx.test.platform.tracing.Tracing tracer>;

        r17 = virtualinvoke $r1.<androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)>("Espresso.openActionBarOverflowOrOptionsMenu");

     label01:
        staticinvoke <androidx.test.espresso.Espresso: void waitUntilNextFrame(int)>(2);

        $r2 = virtualinvoke r16.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i0 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label02:
        if i0 >= 11 goto label08;

     label03:
        $r11 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isRoot()>();

        r18 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r11);

        r19 = newarray (androidx.test.espresso.ViewAction)[1];

     label04:
        $r12 = staticinvoke <androidx.test.espresso.action.ViewActions: androidx.test.espresso.ViewAction pressMenuKey()>();

        r19[0] = $r12;

        virtualinvoke r18.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r19);

     label05:
        staticinvoke <androidx.test.espresso.Espresso: void waitUntilNextFrame(int)>(2);

     label06:
        if r17 == null goto label07;

        interfaceinvoke r17.<androidx.test.platform.tracing.Tracer$Span: void close()>();

        return;

     label07:
        return;

     label08:
        z0 = staticinvoke <androidx.test.espresso.Espresso: boolean hasVirtualOverflowButton(android.content.Context)>(r16);

     label09:
        if z0 == 0 goto label13;

     label10:
        $r6 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isRoot()>();

        r20 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r6);

        r21 = newarray (androidx.test.espresso.ViewAction)[1];

     label11:
        r0 = new androidx.test.espresso.Espresso$TransitionBridgingViewAction;

        specialinvoke r0.<androidx.test.espresso.Espresso$TransitionBridgingViewAction: void <init>(androidx.test.espresso.Espresso$TransitionBridgingViewAction-IA)>(null);

        r21[0] = r0;

        virtualinvoke r20.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r21);

        $r8 = <androidx.test.espresso.Espresso: org.hamcrest.Matcher OVERFLOW_BUTTON_MATCHER>;

        r22 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r8);

        r23 = newarray (androidx.test.espresso.ViewAction)[1];

     label12:
        $r9 = staticinvoke <androidx.test.espresso.action.ViewActions: androidx.test.espresso.ViewAction click()>();

        r23[0] = $r9;

        virtualinvoke r22.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r23);

        goto label05;

     label13:
        $r3 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isRoot()>();

        r24 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r3);

        r25 = newarray (androidx.test.espresso.ViewAction)[1];

     label14:
        $r4 = staticinvoke <androidx.test.espresso.action.ViewActions: androidx.test.espresso.ViewAction pressMenuKey()>();

        r25[0] = $r4;

        virtualinvoke r24.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r25);

        goto label05;

     label15:
        $r14 := @caughtexception;

        r26 = $r14;

        if r17 == null goto label17;

     label16:
        interfaceinvoke r17.<androidx.test.platform.tracing.Tracer$Span: void close()>();

     label17:
        throw r26;

     label18:
        $r15 := @caughtexception;

        r27 = $r15;

        staticinvoke <androidx.test.espresso.Espresso$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r26, r27);

        goto label17;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label04 to label06 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label14 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    public static void openContextualActionModeOverflowMenu()
    {
        androidx.test.espresso.Espresso$TransitionBridgingViewAction r0;
        androidx.test.platform.tracing.Tracing $r1;
        org.hamcrest.Matcher $r2, $r4;
        androidx.test.espresso.ViewAction $r5, $r6;
        java.lang.Throwable $r8, $r9, r15, r16;
        androidx.test.platform.tracing.Tracer$Span r10;
        androidx.test.espresso.ViewInteraction r11, r13;
        androidx.test.espresso.ViewAction[] r12, r14;

        $r1 = <androidx.test.espresso.Espresso: androidx.test.platform.tracing.Tracing tracer>;

        r10 = virtualinvoke $r1.<androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)>("Espresso.openContextualActionModeOverflowMenu");

     label1:
        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isRoot()>();

        r11 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r2);

        r12 = newarray (androidx.test.espresso.ViewAction)[1];

     label2:
        r0 = new androidx.test.espresso.Espresso$TransitionBridgingViewAction;

        specialinvoke r0.<androidx.test.espresso.Espresso$TransitionBridgingViewAction: void <init>(androidx.test.espresso.Espresso$TransitionBridgingViewAction-IA)>(null);

        r12[0] = r0;

        virtualinvoke r11.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r12);

        $r4 = <androidx.test.espresso.Espresso: org.hamcrest.Matcher OVERFLOW_BUTTON_MATCHER>;

        r13 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r4);

        r14 = newarray (androidx.test.espresso.ViewAction)[1];

     label3:
        $r5 = staticinvoke <androidx.test.espresso.action.ViewActions: androidx.test.espresso.ViewAction pressBack()>();

        $r6 = staticinvoke <androidx.test.espresso.action.ViewActions: androidx.test.espresso.ViewAction click(androidx.test.espresso.ViewAction)>($r5);

        r14[0] = $r6;

        virtualinvoke r13.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r14);

     label4:
        if r10 == null goto label5;

        interfaceinvoke r10.<androidx.test.platform.tracing.Tracer$Span: void close()>();

        return;

     label5:
        return;

     label6:
        $r9 := @caughtexception;

        r15 = $r9;

        if r10 == null goto label8;

     label7:
        interfaceinvoke r10.<androidx.test.platform.tracing.Tracer$Span: void close()>();

     label8:
        throw r15;

     label9:
        $r8 := @caughtexception;

        r16 = $r8;

        staticinvoke <androidx.test.espresso.Espresso$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r15, r16);

        goto label8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public static void pressBack()
    {
        androidx.test.espresso.ViewAction[] r0;
        androidx.test.platform.tracing.Tracing $r1;
        org.hamcrest.Matcher $r2;
        androidx.test.espresso.ViewAction $r3;
        java.lang.Throwable $r5, $r6, r9, r10;
        androidx.test.platform.tracing.Tracer$Span r7;
        androidx.test.espresso.ViewInteraction r8;

        $r1 = <androidx.test.espresso.Espresso: androidx.test.platform.tracing.Tracing tracer>;

        r7 = virtualinvoke $r1.<androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)>("Espresso.pressBack");

     label1:
        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isRoot()>();

        r8 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r2);

        r0 = newarray (androidx.test.espresso.ViewAction)[1];

     label2:
        $r3 = staticinvoke <androidx.test.espresso.action.ViewActions: androidx.test.espresso.ViewAction pressBack()>();

        r0[0] = $r3;

        virtualinvoke r8.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r0);

     label3:
        if r7 == null goto label4;

        interfaceinvoke r7.<androidx.test.platform.tracing.Tracer$Span: void close()>();

        return;

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        r9 = $r6;

        if r7 == null goto label7;

     label6:
        interfaceinvoke r7.<androidx.test.platform.tracing.Tracer$Span: void close()>();

     label7:
        throw r9;

     label8:
        $r5 := @caughtexception;

        r10 = $r5;

        staticinvoke <androidx.test.espresso.Espresso$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r9, r10);

        goto label7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public static void pressBackUnconditionally()
    {
        androidx.test.espresso.ViewAction[] r0;
        androidx.test.platform.tracing.Tracing $r1;
        org.hamcrest.Matcher $r2;
        androidx.test.espresso.ViewAction $r3;
        java.lang.Throwable $r5, $r6, r9, r10;
        androidx.test.platform.tracing.Tracer$Span r7;
        androidx.test.espresso.ViewInteraction r8;

        $r1 = <androidx.test.espresso.Espresso: androidx.test.platform.tracing.Tracing tracer>;

        r7 = virtualinvoke $r1.<androidx.test.platform.tracing.Tracing: androidx.test.platform.tracing.Tracer$Span beginSpan(java.lang.String)>("Espresso.pressBackUnconditionally");

     label1:
        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isRoot()>();

        r8 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.ViewInteraction onView(org.hamcrest.Matcher)>($r2);

        r0 = newarray (androidx.test.espresso.ViewAction)[1];

     label2:
        $r3 = staticinvoke <androidx.test.espresso.action.ViewActions: androidx.test.espresso.ViewAction pressBackUnconditionally()>();

        r0[0] = $r3;

        virtualinvoke r8.<androidx.test.espresso.ViewInteraction: androidx.test.espresso.ViewInteraction perform(androidx.test.espresso.ViewAction[])>(r0);

     label3:
        if r7 == null goto label4;

        interfaceinvoke r7.<androidx.test.platform.tracing.Tracer$Span: void close()>();

        return;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        r9 = $r5;

        if r7 == null goto label7;

     label6:
        interfaceinvoke r7.<androidx.test.platform.tracing.Tracer$Span: void close()>();

     label7:
        throw r9;

     label8:
        $r6 := @caughtexception;

        r10 = $r6;

        staticinvoke <androidx.test.espresso.Espresso$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>(r9, r10);

        goto label7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public static void registerLooperAsIdlingResource(android.os.Looper)
    {
        android.os.Looper r0;

        r0 := @parameter0: android.os.Looper;

        staticinvoke <androidx.test.espresso.Espresso: void registerLooperAsIdlingResource(android.os.Looper,boolean)>(r0, 0);

        return;
    }

    public static void registerLooperAsIdlingResource(android.os.Looper, boolean)
    {
        android.os.Looper r0;
        boolean z0;
        androidx.test.espresso.IdlingRegistry $r1, $r3, $r5;
        androidx.test.espresso.base.IdlingResourceRegistry $r2;
        java.util.Collection $r4, $r6;
        java.lang.Iterable r7, r8;

        r0 := @parameter0: android.os.Looper;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        virtualinvoke $r1.<androidx.test.espresso.IdlingRegistry: void registerLooperAsIdlingResource(android.os.Looper)>(r0);

        $r2 = <androidx.test.espresso.Espresso: androidx.test.espresso.base.IdlingResourceRegistry baseRegistry>;

        $r3 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r4 = virtualinvoke $r3.<androidx.test.espresso.IdlingRegistry: java.util.Collection getResources()>();

        $r5 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r6 = virtualinvoke $r5.<androidx.test.espresso.IdlingRegistry: java.util.Collection getLoopers()>();

        r7 = (java.lang.Iterable) $r4;

        r8 = (java.lang.Iterable) $r6;

        virtualinvoke $r2.<androidx.test.espresso.base.IdlingResourceRegistry: void sync(java.lang.Iterable,java.lang.Iterable)>(r7, r8);

        return;
    }

    public static void setFailureHandler(androidx.test.espresso.FailureHandler)
    {
        androidx.test.espresso.FailureHandler r0, $r4;
        androidx.test.espresso.BaseLayerComponent $r1;
        androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder $r2;
        java.lang.Object $r3;

        r0 := @parameter0: androidx.test.espresso.FailureHandler;

        $r1 = <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE>;

        $r2 = interfaceinvoke $r1.<androidx.test.espresso.BaseLayerComponent: androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder failureHolder()>();

        $r3 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = (androidx.test.espresso.FailureHandler) $r3;

        virtualinvoke $r2.<androidx.test.espresso.base.BaseLayerModule$FailureHandlerHolder: void update(androidx.test.espresso.FailureHandler)>($r4);

        return;
    }

    private static void waitUntilNextFrame(int)
    {
        int i0, $i1, i3;
        java.util.concurrent.CountDownLatch r0;
        android.app.Instrumentation r1;
        androidx.test.espresso.Espresso$$ExternalSyntheticLambda1 r2;
        androidx.test.espresso.BaseLayerComponent $r3;
        androidx.test.internal.platform.os.ControlledLooper $r4;
        java.util.concurrent.TimeUnit $r5;
        java.lang.Throwable $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 >= 16 goto label1;

        return;

     label1:
        i3 = 0;

     label2:
        if i3 >= i0 goto label5;

        r0 = new java.util.concurrent.CountDownLatch;

        specialinvoke r0.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r1 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        r2 = new androidx.test.espresso.Espresso$$ExternalSyntheticLambda1;

        specialinvoke r2.<androidx.test.espresso.Espresso$$ExternalSyntheticLambda1: void <init>(java.util.concurrent.CountDownLatch)>(r0);

        virtualinvoke r1.<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)>(r2);

        $r3 = <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent BASE>;

        $r4 = interfaceinvoke $r3.<androidx.test.espresso.BaseLayerComponent: androidx.test.internal.platform.os.ControlledLooper controlledLooper()>();

        interfaceinvoke $r4.<androidx.test.internal.platform.os.ControlledLooper: void drainMainThreadUntilIdle()>();

     label3:
        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke r0.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(5L, $r5);

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        $r7 = <androidx.test.espresso.Espresso: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r7, "Waited for the next frame to start but never happened.");

        return;

        catch java.lang.InterruptedException from label3 to label4 with label6;
    }

    private static boolean hasVirtualOverflowButton(android.content.Context)
    {
        int $i0, $i1;
        android.view.ViewConfiguration $r0;
        boolean $z0, z1, z2;
        android.content.Context r1;

        r1 := @parameter0: android.content.Context;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 14 goto label3;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 11 goto label2;

        z1 = 1;

     label1:
        return z1;

     label2:
        z1 = 0;

        goto label1;

     label3:
        $r0 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        $z0 = virtualinvoke $r0.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z0 != 0 goto label5;

        z2 = 1;

     label4:
        return z2;

     label5:
        z2 = 0;

        goto label4;
    }

    public static transient boolean registerIdlingResources(androidx.test.espresso.IdlingResource[])
    {
        androidx.test.espresso.IdlingRegistry $r0, $r2, $r4;
        boolean $z0, z1;
        int $i0;
        androidx.test.espresso.base.IdlingResourceRegistry $r1;
        java.util.Collection $r3, $r5;
        androidx.test.espresso.IdlingResource[] r6;
        java.lang.Iterable r7, r8;

        r6 := @parameter0: androidx.test.espresso.IdlingResource[];

        $r0 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $z0 = virtualinvoke $r0.<androidx.test.espresso.IdlingRegistry: boolean register(androidx.test.espresso.IdlingResource[])>(r6);

        if $z0 == 0 goto label1;

        $r1 = <androidx.test.espresso.Espresso: androidx.test.espresso.base.IdlingResourceRegistry baseRegistry>;

        $r2 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r3 = virtualinvoke $r2.<androidx.test.espresso.IdlingRegistry: java.util.Collection getResources()>();

        $r4 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r5 = virtualinvoke $r4.<androidx.test.espresso.IdlingRegistry: java.util.Collection getLoopers()>();

        r7 = (java.lang.Iterable) $r3;

        r8 = (java.lang.Iterable) $r5;

        virtualinvoke $r1.<androidx.test.espresso.base.IdlingResourceRegistry: void sync(java.lang.Iterable,java.lang.Iterable)>(r7, r8);

        return 1;

     label1:
        $i0 = lengthof r6;

        if $i0 != 0 goto label3;

        z1 = 1;

     label2:
        return z1;

     label3:
        z1 = 0;

        goto label2;
    }

    public static transient boolean unregisterIdlingResources(androidx.test.espresso.IdlingResource[])
    {
        androidx.test.espresso.IdlingRegistry $r0, $r2, $r4;
        boolean $z0, z1;
        int $i0;
        androidx.test.espresso.base.IdlingResourceRegistry $r1;
        java.util.Collection $r3, $r5;
        androidx.test.espresso.IdlingResource[] r6;
        java.lang.Iterable r7, r8;

        r6 := @parameter0: androidx.test.espresso.IdlingResource[];

        $r0 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $z0 = virtualinvoke $r0.<androidx.test.espresso.IdlingRegistry: boolean unregister(androidx.test.espresso.IdlingResource[])>(r6);

        if $z0 == 0 goto label1;

        $r1 = <androidx.test.espresso.Espresso: androidx.test.espresso.base.IdlingResourceRegistry baseRegistry>;

        $r2 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r3 = virtualinvoke $r2.<androidx.test.espresso.IdlingRegistry: java.util.Collection getResources()>();

        $r4 = staticinvoke <androidx.test.espresso.IdlingRegistry: androidx.test.espresso.IdlingRegistry getInstance()>();

        $r5 = virtualinvoke $r4.<androidx.test.espresso.IdlingRegistry: java.util.Collection getLoopers()>();

        r7 = (java.lang.Iterable) $r3;

        r8 = (java.lang.Iterable) $r5;

        virtualinvoke $r1.<androidx.test.espresso.base.IdlingResourceRegistry: void sync(java.lang.Iterable,java.lang.Iterable)>(r7, r8);

        return 1;

     label1:
        $i0 = lengthof r6;

        if $i0 != 0 goto label3;

        z1 = 1;

     label2:
        return z1;

     label3:
        z1 = 0;

        goto label2;
    }

androidx.test.espresso.Espresso$$ExternalSyntheticBackport0
    public static void m(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable r0, r1, $r4;
        java.lang.Class[] r2;
        java.lang.Class r5;
        java.lang.String r6;
        java.lang.reflect.Method r7;
        java.lang.Object[] r8;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Throwable;

     label1:
        r5 = class "Ljava/lang/Throwable;";

        r6 = "addSuppressed";

        r2 = newarray (java.lang.Class)[1];

     label2:
        r2[0] = class "Ljava/lang/Throwable;";

        r7 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r6, r2);

        r8 = newarray (java.lang.Object)[1];

        r8[0] = r1;

        virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r8);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

androidx.test.espresso.Espresso$$ExternalSyntheticLambda1
<androidx.test.espresso.Espresso$$ExternalSyntheticLambda1: java.util.concurrent.CountDownLatch f$0>
    public void <init>(java.util.concurrent.CountDownLatch)
    {
        androidx.test.espresso.Espresso$$ExternalSyntheticLambda1 r0;
        java.util.concurrent.CountDownLatch r1;

        r0 := @this: androidx.test.espresso.Espresso$$ExternalSyntheticLambda1;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.Espresso$$ExternalSyntheticLambda1: java.util.concurrent.CountDownLatch f$0> = r1;

        return;
    }

    public final void run()
    {
        androidx.test.espresso.Espresso$$ExternalSyntheticLambda1 r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: androidx.test.espresso.Espresso$$ExternalSyntheticLambda1;

        $r1 = r0.<androidx.test.espresso.Espresso$$ExternalSyntheticLambda1: java.util.concurrent.CountDownLatch f$0>;

        staticinvoke <androidx.test.espresso.Espresso: void lambda$waitUntilNextFrame$1(java.util.concurrent.CountDownLatch)>($r1);

        return;
    }

androidx.test.espresso.Espresso$$ExternalSyntheticLambda2
<androidx.test.espresso.Espresso$$ExternalSyntheticLambda2: java.util.concurrent.CountDownLatch f$0>
    public void <init>(java.util.concurrent.CountDownLatch)
    {
        androidx.test.espresso.Espresso$$ExternalSyntheticLambda2 r0;
        java.util.concurrent.CountDownLatch r1;

        r0 := @this: androidx.test.espresso.Espresso$$ExternalSyntheticLambda2;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.espresso.Espresso$$ExternalSyntheticLambda2: java.util.concurrent.CountDownLatch f$0> = r1;

        return;
    }

    public final void doFrame(long)
    {
        androidx.test.espresso.Espresso$$ExternalSyntheticLambda2 r0;
        long l0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: androidx.test.espresso.Espresso$$ExternalSyntheticLambda2;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.test.espresso.Espresso$$ExternalSyntheticLambda2: java.util.concurrent.CountDownLatch f$0>;

        staticinvoke <androidx.test.espresso.Espresso: void lambda$waitUntilNextFrame$0(java.util.concurrent.CountDownLatch,long)>($r1, l0);

        return;
    }

androidx.test.espresso.Espresso$1
    void <init>()
    {
        androidx.test.espresso.Espresso$1 r0;

        r0 := @this: androidx.test.espresso.Espresso$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.test.espresso.Espresso$1 r0;
        androidx.test.espresso.BaseLayerComponent $r1;
        androidx.test.espresso.UiController $r2;

        r0 := @this: androidx.test.espresso.Espresso$1;

        $r1 = staticinvoke <androidx.test.espresso.Espresso: androidx.test.espresso.BaseLayerComponent '-$$Nest$sfgetBASE'()>();

        $r2 = interfaceinvoke $r1.<androidx.test.espresso.BaseLayerComponent: androidx.test.espresso.UiController uiController()>();

        interfaceinvoke $r2.<androidx.test.espresso.UiController: void loopMainThreadUntilIdle()>();

        return;
    }

androidx.test.espresso.Espresso$2
    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.espresso.Espresso$2 r0;
        java.lang.Void $r1;

        r0 := @this: androidx.test.espresso.Espresso$2;

        $r1 = virtualinvoke r0.<androidx.test.espresso.Espresso$2: java.lang.Void call()>();

        return $r1;
    }

    public java.lang.Void call() throws java.lang.Exception
    {
        androidx.test.espresso.Espresso$2 r0;

        r0 := @this: androidx.test.espresso.Espresso$2;

        return null;
    }

    void <init>()
    {
        androidx.test.espresso.Espresso$2 r0;

        r0 := @this: androidx.test.espresso.Espresso$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.Espresso$TransitionBridgingViewAction-IA
androidx.test.espresso.Espresso$TransitionBridgingViewAction
    public java.lang.String getDescription()
    {
        androidx.test.espresso.Espresso$TransitionBridgingViewAction r0;

        r0 := @this: androidx.test.espresso.Espresso$TransitionBridgingViewAction;

        return "Handle transition between action bar and action bar context.";
    }

    public org.hamcrest.Matcher getConstraints()
    {
        androidx.test.espresso.Espresso$TransitionBridgingViewAction r0;
        org.hamcrest.Matcher $r1;

        r0 := @this: androidx.test.espresso.Espresso$TransitionBridgingViewAction;

        $r1 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher isRoot()>();

        return $r1;
    }

    private void <init>()
    {
        androidx.test.espresso.Espresso$TransitionBridgingViewAction r0;

        r0 := @this: androidx.test.espresso.Espresso$TransitionBridgingViewAction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(androidx.test.espresso.Espresso$TransitionBridgingViewAction-IA)
    {
        androidx.test.espresso.Espresso$TransitionBridgingViewAction r0;
        androidx.test.espresso.Espresso$TransitionBridgingViewAction-IA r1;

        r0 := @this: androidx.test.espresso.Espresso$TransitionBridgingViewAction;

        r1 := @parameter0: androidx.test.espresso.Espresso$TransitionBridgingViewAction-IA;

        specialinvoke r0.<androidx.test.espresso.Espresso$TransitionBridgingViewAction: void <init>()>();

        return;
    }

    public void perform(androidx.test.espresso.UiController, android.view.View)
    {
        androidx.test.espresso.Espresso$TransitionBridgingViewAction r0;
        androidx.test.espresso.UiController r1;
        android.view.View r2;
        boolean $z0;
        int i0;

        r0 := @this: androidx.test.espresso.Espresso$TransitionBridgingViewAction;

        r1 := @parameter0: androidx.test.espresso.UiController;

        r2 := @parameter1: android.view.View;

        i0 = 0;

     label1:
        $z0 = specialinvoke r0.<androidx.test.espresso.Espresso$TransitionBridgingViewAction: boolean isTransitioningBetweenActionBars(android.view.View)>(r2);

        if $z0 == 0 goto label2;

        if i0 >= 100 goto label2;

        i0 = i0 + 1;

        interfaceinvoke r1.<androidx.test.espresso.UiController: void loopMainThreadForAtLeast(long)>(50L);

        goto label1;

     label2:
        return;
    }

    private boolean isTransitioningBetweenActionBars(android.view.View)
    {
        java.lang.Iterable $r0;
        org.hamcrest.Matcher $r1;
        boolean $z0, $z1, z2;
        androidx.test.espresso.Espresso$TransitionBridgingViewAction r2;
        android.view.View r3, r6;
        java.util.Iterator r4;
        int i0;
        java.lang.Object r5;

        r2 := @this: androidx.test.espresso.Espresso$TransitionBridgingViewAction;

        r3 := @parameter0: android.view.View;

        $r0 = staticinvoke <androidx.test.espresso.util.TreeIterables: java.lang.Iterable breadthFirstViewTraversal(android.view.View)>(r3);

        r4 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        i0 = 0;

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.view.View) r5;

        $r1 = staticinvoke <androidx.test.espresso.Espresso: org.hamcrest.Matcher '-$$Nest$sfgetOVERFLOW_BUTTON_MATCHER'()>();

        $z0 = interfaceinvoke $r1.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r6);

        if $z0 == 0 goto label1;

        i0 = i0 + 1;

        goto label1;

     label2:
        if i0 <= 1 goto label4;

        z2 = 1;

     label3:
        return z2;

     label4:
        z2 = 0;

        goto label3;
    }

