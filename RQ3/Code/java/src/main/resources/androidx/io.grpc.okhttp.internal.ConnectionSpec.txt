io.grpc.okhttp.internal.ConnectionSpec
<io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.CipherSuite[] APPROVED_CIPHER_SUITES>
<io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.ConnectionSpec CLEARTEXT>
<io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.ConnectionSpec COMPATIBLE_TLS>
<io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.ConnectionSpec MODERN_TLS>
<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>
<io.grpc.okhttp.internal.ConnectionSpec: boolean supportsTlsExtensions>
<io.grpc.okhttp.internal.ConnectionSpec: boolean tls>
<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions>
    static volatile java.lang.String[] '-$$Nest$fgetcipherSuites'(io.grpc.okhttp.internal.ConnectionSpec)
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        java.lang.String[] r1;

        $r0 := @parameter0: io.grpc.okhttp.internal.ConnectionSpec;

        r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>;

        return r1;
    }

    static volatile java.lang.String[] '-$$Nest$fgettlsVersions'(io.grpc.okhttp.internal.ConnectionSpec)
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        java.lang.String[] r1;

        $r0 := @parameter0: io.grpc.okhttp.internal.ConnectionSpec;

        r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions>;

        return r1;
    }

    static void <clinit>()
    {
        io.grpc.okhttp.internal.CipherSuite[] $r0;
        io.grpc.okhttp.internal.CipherSuite $r1;
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r2;
        io.grpc.okhttp.internal.TlsVersion[] $r3;
        io.grpc.okhttp.internal.TlsVersion $r4;
        io.grpc.okhttp.internal.ConnectionSpec $r5;

        $r0 = newarray (io.grpc.okhttp.internal.CipherSuite)[16];

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_AES_128_GCM_SHA256>;

        $r0[0] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_AES_256_GCM_SHA384>;

        $r0[1] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_CHACHA20_POLY1305_SHA256>;

        $r0[2] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256>;

        $r0[3] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256>;

        $r0[4] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384>;

        $r0[5] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384>;

        $r0[6] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256>;

        $r0[7] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256>;

        $r0[8] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA>;

        $r0[9] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA>;

        $r0[10] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256>;

        $r0[11] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384>;

        $r0[12] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA>;

        $r0[13] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA>;

        $r0[14] = $r1;

        $r1 = <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA>;

        $r0[15] = $r1;

        <io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.CipherSuite[] APPROVED_CIPHER_SUITES> = $r0;

        $r2 = new io.grpc.okhttp.internal.ConnectionSpec$Builder;

        specialinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: void <init>(boolean)>(1);

        $r2 = virtualinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder cipherSuites(io.grpc.okhttp.internal.CipherSuite[])>($r0);

        $r3 = newarray (io.grpc.okhttp.internal.TlsVersion)[2];

        $r4 = <io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion TLS_1_3>;

        $r3[0] = $r4;

        $r4 = <io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion TLS_1_2>;

        $r3[1] = $r4;

        $r2 = virtualinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder tlsVersions(io.grpc.okhttp.internal.TlsVersion[])>($r3);

        $r2 = virtualinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1);

        $r5 = virtualinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec build()>();

        <io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.ConnectionSpec MODERN_TLS> = $r5;

        $r2 = new io.grpc.okhttp.internal.ConnectionSpec$Builder;

        specialinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: void <init>(io.grpc.okhttp.internal.ConnectionSpec)>($r5);

        $r3 = newarray (io.grpc.okhttp.internal.TlsVersion)[4];

        $r4 = <io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion TLS_1_3>;

        $r3[0] = $r4;

        $r4 = <io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion TLS_1_2>;

        $r3[1] = $r4;

        $r4 = <io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion TLS_1_1>;

        $r3[2] = $r4;

        $r4 = <io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion TLS_1_0>;

        $r3[3] = $r4;

        $r2 = virtualinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder tlsVersions(io.grpc.okhttp.internal.TlsVersion[])>($r3);

        $r2 = virtualinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1);

        $r5 = virtualinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec build()>();

        <io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.ConnectionSpec COMPATIBLE_TLS> = $r5;

        $r2 = new io.grpc.okhttp.internal.ConnectionSpec$Builder;

        specialinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: void <init>(boolean)>(0);

        $r5 = virtualinvoke $r2.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec build()>();

        <io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.ConnectionSpec CLEARTEXT> = $r5;

        return;
    }

    private void <init>(io.grpc.okhttp.internal.ConnectionSpec$Builder)
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r1;
        boolean $z0;
        java.lang.String[] $r2;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        $r1 := @parameter0: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean '-$$Nest$fgettls'(io.grpc.okhttp.internal.ConnectionSpec$Builder)>($r1);

        $r0.<io.grpc.okhttp.internal.ConnectionSpec: boolean tls> = $z0;

        $r2 = staticinvoke <io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] '-$$Nest$fgetcipherSuites'(io.grpc.okhttp.internal.ConnectionSpec$Builder)>($r1);

        $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites> = $r2;

        $r2 = staticinvoke <io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] '-$$Nest$fgettlsVersions'(io.grpc.okhttp.internal.ConnectionSpec$Builder)>($r1);

        $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions> = $r2;

        $z0 = staticinvoke <io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean '-$$Nest$fgetsupportsTlsExtensions'(io.grpc.okhttp.internal.ConnectionSpec$Builder)>($r1);

        $r0.<io.grpc.okhttp.internal.ConnectionSpec: boolean supportsTlsExtensions> = $z0;

        return;
    }

    void <init>(io.grpc.okhttp.internal.ConnectionSpec$Builder, io.grpc.okhttp.internal.ConnectionSpec-IA)
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r1;
        io.grpc.okhttp.internal.ConnectionSpec-IA $r2;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        $r1 := @parameter0: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $r2 := @parameter1: io.grpc.okhttp.internal.ConnectionSpec-IA;

        specialinvoke $r0.<io.grpc.okhttp.internal.ConnectionSpec: void <init>(io.grpc.okhttp.internal.ConnectionSpec$Builder)>($r1);

        return;
    }

    private io.grpc.okhttp.internal.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket, boolean)
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        int $i0, $i1;
        javax.net.ssl.SSLSocket $r1;
        boolean $z0;
        java.lang.String[] $r2, $r3, $r6;
        java.lang.Object[] $r4;
        java.util.List $r5;
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r7;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 := @parameter1: boolean;

        $r2 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $r3 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>;

        $r4 = staticinvoke <io.grpc.okhttp.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "Ljava/lang/String;", $r3, $r2);

        $r2 = (java.lang.String[]) $r4;

        goto label2;

     label1:
        $r2 = null;

     label2:
        if $z0 == 0 goto label5;

        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>();

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>("TLS_FALLBACK_SCSV");

        if $z0 == 0 goto label5;

        if $r2 == null goto label3;

        goto label4;

     label3:
        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

     label4:
        $i0 = lengthof $r2;

        $i1 = $i0 + 1;

        $r3 = newarray (java.lang.String)[$i1];

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, 0, $i0);

        $i0 = $i1 + -1;

        $r3[$i0] = "TLS_FALLBACK_SCSV";

        $r2 = $r3;

        goto label5;

     label5:
        $r3 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>();

        $r6 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions>;

        $r4 = staticinvoke <io.grpc.okhttp.internal.Util: java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[])>(class "Ljava/lang/String;", $r6, $r3);

        $r3 = (java.lang.String[]) $r4;

        $r7 = new io.grpc.okhttp.internal.ConnectionSpec$Builder;

        specialinvoke $r7.<io.grpc.okhttp.internal.ConnectionSpec$Builder: void <init>(io.grpc.okhttp.internal.ConnectionSpec)>($r0);

        $r7 = virtualinvoke $r7.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2);

        $r7 = virtualinvoke $r7.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r3);

        $r0 = virtualinvoke $r7.<io.grpc.okhttp.internal.ConnectionSpec$Builder: io.grpc.okhttp.internal.ConnectionSpec build()>();

        return $r0;
    }

    public void apply(javax.net.ssl.SSLSocket, boolean)
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String[] $r2;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 := @parameter1: boolean;

        $r0 = specialinvoke $r0.<io.grpc.okhttp.internal.ConnectionSpec: io.grpc.okhttp.internal.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0);

        $r2 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions>;

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r2);

        $r2 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r2 == null goto label1;

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>($r2);

     label1:
        return;
    }

    public java.util.List cipherSuites()
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        int $i0, $i1;
        java.lang.String[] $r1;
        io.grpc.okhttp.internal.CipherSuite[] $r2;
        java.lang.String $r3;
        io.grpc.okhttp.internal.CipherSuite $r4;
        java.util.List $r5;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        $r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r1;

        $r2 = newarray (io.grpc.okhttp.internal.CipherSuite)[$i0];

        $i1 = 0;

     label2:
        $r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>;

        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label3;

        $r3 = $r1[$i1];

        $r4 = staticinvoke <io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite forJavaName(java.lang.String)>($r3);

        $r2[$i1] = $r4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r5 = staticinvoke <io.grpc.okhttp.internal.Util: java.util.List immutableList(java.lang.Object[])>($r2);

        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0, $r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        java.lang.String[] $r3, $r4;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof io.grpc.okhttp.internal.ConnectionSpec;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if $r1 != $r0 goto label2;

        return 1;

     label2:
        $r2 = (io.grpc.okhttp.internal.ConnectionSpec) $r1;

        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: boolean tls>;

        $z1 = $r2.<io.grpc.okhttp.internal.ConnectionSpec: boolean tls>;

        if $z0 == $z1 goto label3;

        return 0;

     label3:
        if $z0 == 0 goto label6;

        $r3 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>;

        $r4 = $r2.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $r3 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions>;

        $r4 = $r2.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: boolean supportsTlsExtensions>;

        $z1 = $r2.<io.grpc.okhttp.internal.ConnectionSpec: boolean supportsTlsExtensions>;

        if $z0 == $z1 goto label6;

        return 0;

     label6:
        return 1;
    }

    public int hashCode()
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        boolean $z0;
        java.lang.String[] $r1;
        int $i0, $i1;
        byte $b2;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: boolean tls>;

        if $z0 == 0 goto label3;

        $r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] cipherSuites>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i0 = $i0 + 527;

        $i0 = $i0 * 31;

        $r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: boolean supportsTlsExtensions>;

        if $z0 == 0 goto label1;

        $b2 = 0;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        $i0 = $i0 + $b2;

        return $i0;

     label3:
        return 17;
    }

    public boolean supportsTlsExtensions()
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        boolean z0;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: boolean supportsTlsExtensions>;

        return z0;
    }

    public java.util.List tlsVersions()
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        int $i0, $i1;
        java.lang.String[] $r1;
        io.grpc.okhttp.internal.TlsVersion[] $r2;
        java.lang.String $r3;
        io.grpc.okhttp.internal.TlsVersion $r4;
        java.util.List $r5;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        $r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions>;

        $i0 = lengthof $r1;

        $r2 = newarray (io.grpc.okhttp.internal.TlsVersion)[$i0];

        $i1 = 0;

     label1:
        $r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] tlsVersions>;

        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label2;

        $r3 = $r1[$i1];

        $r4 = staticinvoke <io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion forJavaName(java.lang.String)>($r3);

        $r2[$i1] = $r4;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r5 = staticinvoke <io.grpc.okhttp.internal.Util: java.util.List immutableList(java.lang.Object[])>($r2);

        return $r5;
    }

    public java.lang.String toString()
    {
        io.grpc.okhttp.internal.ConnectionSpec $r0;
        boolean $z0;
        java.util.List $r1;
        java.lang.String $r2, $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec;

        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: boolean tls>;

        if $z0 == 0 goto label3;

        $r1 = virtualinvoke $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.util.List cipherSuites()>();

        if $r1 != null goto label1;

        $r2 = "[use default]";

        goto label2;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        $r1 = virtualinvoke $r0.<io.grpc.okhttp.internal.ConnectionSpec: java.util.List tlsVersions()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec: boolean supportsTlsExtensions>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ConnectionSpec(cipherSuites=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", tlsVersions=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", supportsTlsExtensions=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label3:
        return "ConnectionSpec()";
    }

io.grpc.okhttp.internal.ConnectionSpec$Builder
<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] cipherSuites>
<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean supportsTlsExtensions>
<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean tls>
<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] tlsVersions>
    static volatile java.lang.String[] '-$$Nest$fgetcipherSuites'(io.grpc.okhttp.internal.ConnectionSpec$Builder)
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        java.lang.String[] r1;

        $r0 := @parameter0: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] cipherSuites>;

        return r1;
    }

    static volatile boolean '-$$Nest$fgetsupportsTlsExtensions'(io.grpc.okhttp.internal.ConnectionSpec$Builder)
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        boolean z0;

        $r0 := @parameter0: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean supportsTlsExtensions>;

        return z0;
    }

    static volatile boolean '-$$Nest$fgettls'(io.grpc.okhttp.internal.ConnectionSpec$Builder)
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        boolean z0;

        $r0 := @parameter0: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean tls>;

        return z0;
    }

    static volatile java.lang.String[] '-$$Nest$fgettlsVersions'(io.grpc.okhttp.internal.ConnectionSpec$Builder)
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        java.lang.String[] r1;

        $r0 := @parameter0: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        r1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] tlsVersions>;

        return r1;
    }

    public void <init>(io.grpc.okhttp.internal.ConnectionSpec)
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        io.grpc.okhttp.internal.ConnectionSpec $r1;
        boolean $z0;
        java.lang.String[] $r2;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $r1 := @parameter0: io.grpc.okhttp.internal.ConnectionSpec;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $z0 = $r1.<io.grpc.okhttp.internal.ConnectionSpec: boolean tls>;

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean tls> = $z0;

        $r2 = staticinvoke <io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] '-$$Nest$fgetcipherSuites'(io.grpc.okhttp.internal.ConnectionSpec)>($r1);

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] cipherSuites> = $r2;

        $r2 = staticinvoke <io.grpc.okhttp.internal.ConnectionSpec: java.lang.String[] '-$$Nest$fgettlsVersions'(io.grpc.okhttp.internal.ConnectionSpec)>($r1);

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] tlsVersions> = $r2;

        $z0 = $r1.<io.grpc.okhttp.internal.ConnectionSpec: boolean supportsTlsExtensions>;

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean supportsTlsExtensions> = $z0;

        return;
    }

    public void <init>(boolean)
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean tls> = $z0;

        return;
    }

    public io.grpc.okhttp.internal.ConnectionSpec build()
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        io.grpc.okhttp.internal.ConnectionSpec $r1;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $r1 = new io.grpc.okhttp.internal.ConnectionSpec;

        specialinvoke $r1.<io.grpc.okhttp.internal.ConnectionSpec: void <init>(io.grpc.okhttp.internal.ConnectionSpec$Builder,io.grpc.okhttp.internal.ConnectionSpec-IA)>($r0, null);

        return $r1;
    }

    public transient io.grpc.okhttp.internal.ConnectionSpec$Builder cipherSuites(io.grpc.okhttp.internal.CipherSuite[])
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        io.grpc.okhttp.internal.CipherSuite[] $r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.String[] $r2;
        io.grpc.okhttp.internal.CipherSuite $r3;
        java.lang.String $r4;
        java.lang.IllegalStateException $r5;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $r1 := @parameter0: io.grpc.okhttp.internal.CipherSuite[];

        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean tls>;

        if $z0 == 0 goto label3;

        $i0 = lengthof $r1;

        $r2 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r3 = $r1[$i0];

        $r4 = $r3.<io.grpc.okhttp.internal.CipherSuite: java.lang.String javaName>;

        $r2[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] cipherSuites> = $r2;

        return $r0;

     label3:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no cipher suites for cleartext connections");

        goto label4;

     label4:
        throw $r5;
    }

    public transient io.grpc.okhttp.internal.ConnectionSpec$Builder cipherSuites(java.lang.String[])
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        java.lang.Object $r1;
        java.lang.String[] $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $r2 := @parameter0: java.lang.String[];

        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean tls>;

        if $z0 == 0 goto label2;

        if $r2 != null goto label1;

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] cipherSuites> = null;

        return $r0;

     label1:
        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.String[]) $r1;

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] cipherSuites> = $r2;

        return $r0;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no cipher suites for cleartext connections");

        throw $r3;
    }

    public io.grpc.okhttp.internal.ConnectionSpec$Builder supportsTlsExtensions(boolean)
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r1;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $z0 := @parameter0: boolean;

        $z1 = $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean tls>;

        if $z1 == 0 goto label1;

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean supportsTlsExtensions> = $z0;

        return $r0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no TLS extensions for cleartext connections");

        throw $r1;
    }

    public transient io.grpc.okhttp.internal.ConnectionSpec$Builder tlsVersions(io.grpc.okhttp.internal.TlsVersion[])
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        io.grpc.okhttp.internal.TlsVersion[] $r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.String[] $r2;
        io.grpc.okhttp.internal.TlsVersion $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.IllegalStateException $r6;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $r1 := @parameter0: io.grpc.okhttp.internal.TlsVersion[];

        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean tls>;

        if $z0 == 0 goto label4;

        $i0 = lengthof $r1;

        if $i0 == 0 goto label3;

        $i0 = lengthof $r1;

        $r2 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r3 = $r1[$i0];

        $r4 = $r3.<io.grpc.okhttp.internal.TlsVersion: java.lang.String javaName>;

        $r2[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] tlsVersions> = $r2;

        return $r0;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one TlsVersion is required");

        throw $r5;

     label4:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no TLS versions for cleartext connections");

        goto label5;

     label5:
        throw $r6;
    }

    public transient io.grpc.okhttp.internal.ConnectionSpec$Builder tlsVersions(java.lang.String[])
    {
        io.grpc.okhttp.internal.ConnectionSpec$Builder $r0;
        java.lang.Object $r1;
        java.lang.String[] $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        $r0 := @this: io.grpc.okhttp.internal.ConnectionSpec$Builder;

        $r2 := @parameter0: java.lang.String[];

        $z0 = $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: boolean tls>;

        if $z0 == 0 goto label2;

        if $r2 != null goto label1;

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] tlsVersions> = null;

        return $r0;

     label1:
        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.String[]) $r1;

        $r0.<io.grpc.okhttp.internal.ConnectionSpec$Builder: java.lang.String[] tlsVersions> = $r2;

        return $r0;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no TLS versions for cleartext connections");

        throw $r3;
    }

