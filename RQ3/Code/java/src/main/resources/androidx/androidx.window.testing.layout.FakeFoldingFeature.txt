androidx.window.testing.layout.FakeFoldingFeature
<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect bounds>
<androidx.window.testing.layout.FakeFoldingFeature: boolean isSeparating>
<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType occlusionType>
<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$Orientation orientation>
<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$State state>
    public void <init>(android.graphics.Rect, boolean, androidx.window.layout.FoldingFeature$OcclusionType, androidx.window.layout.FoldingFeature$Orientation, androidx.window.layout.FoldingFeature$State)
    {
        androidx.window.testing.layout.FakeFoldingFeature r0;
        android.graphics.Rect r1, $r5, $r6, $r9, $r12;
        boolean z0, $z1, $z3;
        androidx.window.layout.FoldingFeature$OcclusionType r2;
        androidx.window.layout.FoldingFeature$Orientation r3;
        androidx.window.layout.FoldingFeature$State r4;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r7, $r10;
        java.lang.String $r8, $r11, $r13, $r14;

        r0 := @this: androidx.window.testing.layout.FakeFoldingFeature;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        r2 := @parameter2: androidx.window.layout.FoldingFeature$OcclusionType;

        r3 := @parameter3: androidx.window.layout.FoldingFeature$Orientation;

        r4 := @parameter4: androidx.window.layout.FoldingFeature$State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "bounds");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "occlusionType");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "orientation");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "state");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect bounds> = r1;

        r0.<androidx.window.testing.layout.FakeFoldingFeature: boolean isSeparating> = z0;

        r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType occlusionType> = r2;

        r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$Orientation orientation> = r3;

        r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$State state> = r4;

        $r5 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect getBounds()>();

        $i0 = virtualinvoke $r5.<android.graphics.Rect: int width()>();

        if $i0 != 0 goto label1;

        $r12 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect getBounds()>();

        $i3 = virtualinvoke $r12.<android.graphics.Rect: int height()>();

        if $i3 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 != 0 goto label4;

        $r13 = "Bounds must be non zero";

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label4:
        $r6 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect getBounds()>();

        $i1 = $r6.<android.graphics.Rect: int left>;

        if $i1 == 0 goto label5;

        $r9 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect getBounds()>();

        $i2 = $r9.<android.graphics.Rect: int top>;

        if $i2 != 0 goto label6;

     label5:
        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        if $z3 != 0 goto label8;

        $r14 = "Bounding rectangle must start at the top or left window edge for folding features";

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label8:
        return;
    }

    public android.graphics.Rect getBounds()
    {
        androidx.window.testing.layout.FakeFoldingFeature r0;
        android.graphics.Rect $r1;

        r0 := @this: androidx.window.testing.layout.FakeFoldingFeature;

        $r1 = r0.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect bounds>;

        return $r1;
    }

    public boolean isSeparating()
    {
        androidx.window.testing.layout.FakeFoldingFeature r0;
        boolean $z0;

        r0 := @this: androidx.window.testing.layout.FakeFoldingFeature;

        $z0 = r0.<androidx.window.testing.layout.FakeFoldingFeature: boolean isSeparating>;

        return $z0;
    }

    public androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
    {
        androidx.window.testing.layout.FakeFoldingFeature r0;
        androidx.window.layout.FoldingFeature$OcclusionType $r1;

        r0 := @this: androidx.window.testing.layout.FakeFoldingFeature;

        $r1 = r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType occlusionType>;

        return $r1;
    }

    public androidx.window.layout.FoldingFeature$Orientation getOrientation()
    {
        androidx.window.testing.layout.FakeFoldingFeature r0;
        androidx.window.layout.FoldingFeature$Orientation $r1;

        r0 := @this: androidx.window.testing.layout.FakeFoldingFeature;

        $r1 = r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$Orientation orientation>;

        return $r1;
    }

    public androidx.window.layout.FoldingFeature$State getState()
    {
        androidx.window.testing.layout.FakeFoldingFeature r0;
        androidx.window.layout.FoldingFeature$State $r1;

        r0 := @this: androidx.window.testing.layout.FakeFoldingFeature;

        $r1 = r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$State state>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.window.testing.layout.FakeFoldingFeature r0, $r3, $r5, $r7, $r9, $r12, $r15;
        java.lang.Object r1;
        java.lang.Class $r2, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.graphics.Rect $r4, $r6;
        androidx.window.layout.FoldingFeature$OcclusionType $r8, $r10;
        androidx.window.layout.FoldingFeature$Orientation $r11, $r13;
        androidx.window.layout.FoldingFeature$State $r14, $r16;
        java.lang.NullPointerException $r17;

        r0 := @this: androidx.window.testing.layout.FakeFoldingFeature;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if r1 != null goto label02;

        $r18 = null;

        goto label03;

     label02:
        $r18 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r18);

        if $z0 != 0 goto label04;

        return 0;

     label04:
        if r1 != null goto label05;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type androidx.window.testing.layout.FakeFoldingFeature");

        throw $r17;

     label05:
        $r3 = (androidx.window.testing.layout.FakeFoldingFeature) r1;

        $r4 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect getBounds()>();

        $r5 = (androidx.window.testing.layout.FakeFoldingFeature) r1;

        $r6 = virtualinvoke $r5.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect getBounds()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r6);

        if $z1 != 0 goto label06;

        return 0;

     label06:
        $z2 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: boolean isSeparating()>();

        $r7 = (androidx.window.testing.layout.FakeFoldingFeature) r1;

        $z3 = virtualinvoke $r7.<androidx.window.testing.layout.FakeFoldingFeature: boolean isSeparating()>();

        if $z2 == $z3 goto label07;

        return 0;

     label07:
        $r8 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()>();

        $r9 = (androidx.window.testing.layout.FakeFoldingFeature) r1;

        $r10 = virtualinvoke $r9.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()>();

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, $r10);

        if $z4 != 0 goto label08;

        return 0;

     label08:
        $r11 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()>();

        $r12 = (androidx.window.testing.layout.FakeFoldingFeature) r1;

        $r13 = virtualinvoke $r12.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()>();

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, $r13);

        if $z5 != 0 goto label09;

        return 0;

     label09:
        $r14 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$State getState()>();

        $r15 = (androidx.window.testing.layout.FakeFoldingFeature) r1;

        $r16 = virtualinvoke $r15.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$State getState()>();

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r14, $r16);

        if $z6 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    public int hashCode()
    {
        androidx.window.testing.layout.FakeFoldingFeature r0;
        android.graphics.Rect $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12;
        boolean $z0;
        androidx.window.layout.FoldingFeature$OcclusionType $r2;
        androidx.window.layout.FoldingFeature$Orientation $r3;
        androidx.window.layout.FoldingFeature$State $r4;

        r0 := @this: androidx.window.testing.layout.FakeFoldingFeature;

        $r1 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect getBounds()>();

        i8 = virtualinvoke $r1.<android.graphics.Rect: int hashCode()>();

        $i0 = 31 * i8;

        $z0 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: boolean isSeparating()>();

        $i1 = staticinvoke <java.lang.Boolean: int hashCode(boolean)>($z0);

        i9 = $i0 + $i1;

        $i2 = 31 * i9;

        $r2 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()>();

        $i3 = virtualinvoke $r2.<androidx.window.layout.FoldingFeature$OcclusionType: int hashCode()>();

        i10 = $i2 + $i3;

        $i4 = 31 * i10;

        $r3 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()>();

        $i5 = virtualinvoke $r3.<androidx.window.layout.FoldingFeature$Orientation: int hashCode()>();

        i11 = $i4 + $i5;

        $i6 = 31 * i11;

        $r4 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$State getState()>();

        $i7 = virtualinvoke $r4.<androidx.window.layout.FoldingFeature$State: int hashCode()>();

        i12 = $i6 + $i7;

        return i12;
    }

    public java.lang.String toString()
    {
        androidx.window.testing.layout.FakeFoldingFeature r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r18;
        java.lang.Class $r2;
        java.lang.String $r3, $r19;
        android.graphics.Rect $r6;
        boolean $z0;
        androidx.window.layout.FoldingFeature$OcclusionType $r11;
        androidx.window.layout.FoldingFeature$Orientation $r14;
        androidx.window.layout.FoldingFeature$State $r17;

        r0 := @this: androidx.window.testing.layout.FakeFoldingFeature;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = class "Landroidx/window/testing/layout/FakeFoldingFeature;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" { bounds = ");

        $r6 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: android.graphics.Rect getBounds()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isSeparating = ");

        $z0 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: boolean isSeparating()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", occlusionType = ");

        $r11 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", orientation = ");

        $r14 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", state = ");

        $r17 = virtualinvoke r0.<androidx.window.testing.layout.FakeFoldingFeature: androidx.window.layout.FoldingFeature$State getState()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }

