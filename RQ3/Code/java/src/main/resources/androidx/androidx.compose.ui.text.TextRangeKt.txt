androidx.compose.ui.text.TextRangeKt
    public static final java.lang.String substring-FDrldGo(java.lang.CharSequence, long)
    {
        java.lang.CharSequence $r0, $r1;
        long l0;
        int $i1, $i2;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        l0 := @parameter1: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$substring");

        $i1 = staticinvoke <androidx.compose.ui.text.TextRange: int getMin-impl(long)>(l0);

        $i2 = staticinvoke <androidx.compose.ui.text.TextRange: int getMax-impl(long)>(l0);

        $r1 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i2);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static final long TextRange(int, int)
    {
        int i0, i1;
        long $l2, $l3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = staticinvoke <androidx.compose.ui.text.TextRangeKt: long packWithCheck(int,int)>(i0, i1);

        $l3 = staticinvoke <androidx.compose.ui.text.TextRange: long constructor-impl(long)>($l2);

        return $l3;
    }

    public static final long TextRange(int)
    {
        int i0;
        long $l1;

        i0 := @parameter0: int;

        $l1 = staticinvoke <androidx.compose.ui.text.TextRangeKt: long TextRange(int,int)>(i0, i0);

        return $l1;
    }

    public static final long constrain-8ffj60Q(long, int, int)
    {
        long $l0, $l8;
        int i1, i2, i3, i4, $i5, $i6, $i7, $i9;

        $l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i5 = staticinvoke <androidx.compose.ui.text.TextRange: int getStart-impl(long)>($l0);

        i3 = staticinvoke <kotlin.ranges.RangesKt: int coerceIn(int,int,int)>($i5, i1, i2);

        $i6 = staticinvoke <androidx.compose.ui.text.TextRange: int getEnd-impl(long)>($l0);

        i4 = staticinvoke <kotlin.ranges.RangesKt: int coerceIn(int,int,int)>($i6, i1, i2);

        $i7 = staticinvoke <androidx.compose.ui.text.TextRange: int getStart-impl(long)>($l0);

        if i3 != $i7 goto label1;

        $i9 = staticinvoke <androidx.compose.ui.text.TextRange: int getEnd-impl(long)>($l0);

        if i4 == $i9 goto label2;

     label1:
        $l8 = staticinvoke <androidx.compose.ui.text.TextRangeKt: long TextRange(int,int)>(i3, i4);

        return $l8;

     label2:
        return $l0;
    }

    private static final long packWithCheck(int, int)
    {
        int i0, i1;
        long $l2, $l3, $l4, $l5, $l6;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.IllegalArgumentException $r6, $r14;
        java.lang.String $r7, $r15, $r16, $r17;
        boolean $z1, $z3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 != 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start cannot be negative. [start: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", end: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label3:
        if i1 < 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        if $z3 != 0 goto label6;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("end cannot be negative. [start: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", end: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r17 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label6:
        $l2 = (long) i0;

        $l5 = $l2 << 32;

        $l3 = (long) i1;

        $l4 = $l3 & 4294967295L;

        $l6 = $l5 | $l4;

        return $l6;
    }

