androidx.animation.FloatSpringSpec
<androidx.animation.FloatSpringSpec: androidx.animation.SpringSimulation spring>
<androidx.animation.FloatSpringSpec: float displacementThreshold>
    public float getValue(long, float, float, float)
    {
        androidx.animation.FloatSpringSpec r0;
        long l0, $l1;
        float f0, f1, f2, f3;
        androidx.animation.SpringSimulation $r1, $r2;

        r0 := @this: androidx.animation.FloatSpringSpec;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $r1 = r0.<androidx.animation.FloatSpringSpec: androidx.animation.SpringSimulation spring>;

        virtualinvoke $r1.<androidx.animation.SpringSimulation: void setFinalPosition(float)>(f1);

        $r2 = r0.<androidx.animation.FloatSpringSpec: androidx.animation.SpringSimulation spring>;

        $l1 = virtualinvoke $r2.<androidx.animation.SpringSimulation: long updateValues$ui_animation_core_release(float,float,long)>(f0, f2, l0);

        f3 = staticinvoke <androidx.animation.Motion: float getValue-impl(long)>($l1);

        return f3;
    }

    public float getVelocity(long, float, float, float)
    {
        androidx.animation.FloatSpringSpec r0;
        long l0, $l1;
        float f0, f1, f2, f3;
        androidx.animation.SpringSimulation $r1, $r2;

        r0 := @this: androidx.animation.FloatSpringSpec;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $r1 = r0.<androidx.animation.FloatSpringSpec: androidx.animation.SpringSimulation spring>;

        virtualinvoke $r1.<androidx.animation.SpringSimulation: void setFinalPosition(float)>(f1);

        $r2 = r0.<androidx.animation.FloatSpringSpec: androidx.animation.SpringSimulation spring>;

        $l1 = virtualinvoke $r2.<androidx.animation.SpringSimulation: long updateValues$ui_animation_core_release(float,float,long)>(f0, f2, l0);

        f3 = staticinvoke <androidx.animation.Motion: float getVelocity-impl(long)>($l1);

        return f3;
    }

    public float getEndVelocity(float, float, float)
    {
        androidx.animation.FloatSpringSpec r0;
        float f0, f1, f2;

        r0 := @this: androidx.animation.FloatSpringSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        return 0.0F;
    }

    public long getDurationMillis(float, float, float)
    {
        androidx.animation.FloatSpringSpec r0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10;
        androidx.animation.SpringSimulation $r1, $r2;
        long $l0;

        r0 := @this: androidx.animation.FloatSpringSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r1 = r0.<androidx.animation.FloatSpringSpec: androidx.animation.SpringSimulation spring>;

        $f6 = virtualinvoke $r1.<androidx.animation.SpringSimulation: float getStiffness()>();

        $r2 = r0.<androidx.animation.FloatSpringSpec: androidx.animation.SpringSimulation spring>;

        $f7 = virtualinvoke $r2.<androidx.animation.SpringSimulation: float getDampingRatio()>();

        $f9 = f0 - f1;

        $f8 = r0.<androidx.animation.FloatSpringSpec: float displacementThreshold>;

        $f10 = r0.<androidx.animation.FloatSpringSpec: float displacementThreshold>;

        f3 = 1.0F;

        f4 = f2 / $f10;

        f5 = $f9 / $f8;

        $l0 = staticinvoke <androidx.animation.SpringEstimationKt: long estimateAnimationDurationMillis(float,float,float,float,float)>($f6, $f7, f4, f5, f3);

        return $l0;
    }

    public void <init>(float, float, float)
    {
        androidx.animation.FloatSpringSpec r0, r3;
        float f0, f1, f2;
        androidx.animation.SpringSimulation r1, r2, r4, $r5;
        boolean z0, z1;

        r0 := @this: androidx.animation.FloatSpringSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.animation.FloatSpringSpec: float displacementThreshold> = f2;

        $r5 = new androidx.animation.SpringSimulation;

        specialinvoke $r5.<androidx.animation.SpringSimulation: void <init>(float)>(1.0F);

        r1 = $r5;

        r3 = r0;

        z0 = 0;

        z1 = 0;

        r2 = r1;

        virtualinvoke r2.<androidx.animation.SpringSimulation: void setDampingRatio(float)>(f0);

        virtualinvoke r2.<androidx.animation.SpringSimulation: void setStiffness(float)>(f1);

        r4 = r1;

        r3.<androidx.animation.FloatSpringSpec: androidx.animation.SpringSimulation spring> = r4;

        return;
    }

    public void <init>(float, float, float, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.animation.FloatSpringSpec r0;
        int i0, $i1, $i2, $i3;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        float f0, f1, f2;

        r0 := @this: androidx.animation.FloatSpringSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        i0 := @parameter3: int;

        r1 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = 1.0F;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        f1 = 1500.0F;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        f2 = 0.01F;

     label3:
        specialinvoke r0.<androidx.animation.FloatSpringSpec: void <init>(float,float,float)>(f0, f1, f2);

        return;
    }

    public void <init>()
    {
        androidx.animation.FloatSpringSpec r0;

        r0 := @this: androidx.animation.FloatSpringSpec;

        specialinvoke r0.<androidx.animation.FloatSpringSpec: void <init>(float,float,float,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0.0F, 0.0F, 0.0F, 7, null);

        return;
    }

