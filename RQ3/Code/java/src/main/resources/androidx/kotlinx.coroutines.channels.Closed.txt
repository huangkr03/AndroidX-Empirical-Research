kotlinx.coroutines.channels.Closed
<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>
    public void <init>(java.lang.Throwable)
    {
        kotlinx.coroutines.channels.Closed $r0;
        java.lang.Throwable $r1;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r1 := @parameter0: java.lang.Throwable;

        specialinvoke $r0.<kotlinx.coroutines.channels.Send: void <init>()>();

        $r0.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause> = $r1;

        return;
    }

    public void completeResumeReceive(java.lang.Object)
    {
        kotlinx.coroutines.channels.Closed $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r1 := @parameter0: java.lang.Object;

        return;
    }

    public void completeResumeSend()
    {
        kotlinx.coroutines.channels.Closed $r0;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        return;
    }

    public volatile java.lang.Object getOfferResult()
    {
        kotlinx.coroutines.channels.Closed $r0;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r0 = virtualinvoke $r0.<kotlinx.coroutines.channels.Closed: kotlinx.coroutines.channels.Closed getOfferResult()>();

        return $r0;
    }

    public kotlinx.coroutines.channels.Closed getOfferResult()
    {
        kotlinx.coroutines.channels.Closed $r0;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        return $r0;
    }

    public volatile java.lang.Object getPollResult()
    {
        kotlinx.coroutines.channels.Closed $r0;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r0 = virtualinvoke $r0.<kotlinx.coroutines.channels.Closed: kotlinx.coroutines.channels.Closed getPollResult()>();

        return $r0;
    }

    public kotlinx.coroutines.channels.Closed getPollResult()
    {
        kotlinx.coroutines.channels.Closed $r0;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        return $r0;
    }

    public final java.lang.Throwable getReceiveException()
    {
        kotlinx.coroutines.channels.Closed $r0;
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.ClosedReceiveChannelException $r2;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r1 = $r0.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        if $r1 != null goto label1;

        $r2 = new kotlinx.coroutines.channels.ClosedReceiveChannelException;

        specialinvoke $r2.<kotlinx.coroutines.channels.ClosedReceiveChannelException: void <init>(java.lang.String)>("Channel was closed");

        return $r2;

     label1:
        return $r1;
    }

    public final java.lang.Throwable getSendException()
    {
        kotlinx.coroutines.channels.Closed $r0;
        java.lang.Throwable $r1;
        kotlinx.coroutines.channels.ClosedSendChannelException $r2;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r1 = $r0.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        if $r1 != null goto label1;

        $r2 = new kotlinx.coroutines.channels.ClosedSendChannelException;

        specialinvoke $r2.<kotlinx.coroutines.channels.ClosedSendChannelException: void <init>(java.lang.String)>("Channel was closed");

        return $r2;

     label1:
        return $r1;
    }

    public void resumeSendClosed(kotlinx.coroutines.channels.Closed)
    {
        kotlinx.coroutines.channels.Closed $r0, $r1;
        boolean $z0;
        java.lang.AssertionError $r2;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r1 := @parameter0: kotlinx.coroutines.channels.Closed;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "closed");

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.channels.Closed $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r1 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r0);

        $r2 = $r0.<kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closed@");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public kotlinx.coroutines.internal.Symbol tryResumeReceive(java.lang.Object, kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.channels.Closed $r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.internal.Symbol $r3;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r3 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: void finishPrepare()>();

     label1:
        return $r3;
    }

    public kotlinx.coroutines.internal.Symbol tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
    {
        kotlinx.coroutines.channels.Closed $r0;
        kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp $r1;
        kotlinx.coroutines.internal.Symbol $r2;

        $r0 := @this: kotlinx.coroutines.channels.Closed;

        $r1 := @parameter0: kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp;

        $r2 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp: void finishPrepare()>();

     label1:
        return $r2;
    }

