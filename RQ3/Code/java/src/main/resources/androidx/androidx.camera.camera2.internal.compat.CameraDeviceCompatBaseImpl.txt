androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl
<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: android.hardware.camera2.CameraDevice mCameraDevice>
<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: java.lang.Object mImplParams>
    void <init>(android.hardware.camera2.CameraDevice, java.lang.Object)
    {
        androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl r0;
        android.hardware.camera2.CameraDevice r1, $r4;
        java.lang.Object r2, $r3;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (android.hardware.camera2.CameraDevice) $r3;

        r0.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: android.hardware.camera2.CameraDevice mCameraDevice> = $r4;

        r0.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: java.lang.Object mImplParams> = r2;

        return;
    }

    static androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl create(android.hardware.camera2.CameraDevice, android.os.Handler)
    {
        android.hardware.camera2.CameraDevice r0;
        android.os.Handler r1;
        androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl $r2;
        androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21 $r3;

        r0 := @parameter0: android.hardware.camera2.CameraDevice;

        r1 := @parameter1: android.os.Handler;

        $r2 = new androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl;

        $r3 = new androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21;

        specialinvoke $r3.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21: void <init>(android.os.Handler)>(r1);

        specialinvoke $r2.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: void <init>(android.hardware.camera2.CameraDevice,java.lang.Object)>(r0, $r3);

        return $r2;
    }

    static java.util.List unpackSurfaces(java.util.List)
    {
        java.util.List r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat r3;
        int $i0;
        boolean $z0;
        java.lang.Object $r5;
        android.view.Surface $r6;

        r0 := @parameter0: java.util.List;

        $r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r1 = $r4;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat) $r5;

        $r6 = virtualinvoke r3.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: android.view.Surface getSurface()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return r1;
    }

    static void checkPreconditions(android.hardware.camera2.CameraDevice, androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat)
    {
        android.hardware.camera2.CameraDevice r0;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat r1;
        java.util.List r2;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r5;
        java.util.concurrent.Executor $r7;
        java.lang.IllegalArgumentException $r8, $r9;

        r0 := @parameter0: android.hardware.camera2.CameraDevice;

        r1 := @parameter1: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat;

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: android.hardware.camera2.CameraCaptureSession$StateCallback getStateCallback()>();

        staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        r2 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: java.util.List getOutputConfigurations()>();

        if r2 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid output configurations");

        throw $r9;

     label1:
        $r7 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: java.util.concurrent.Executor getExecutor()>();

        if $r7 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid executor");

        throw $r8;

     label2:
        staticinvoke <androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: void checkPhysicalCameraIdValid(android.hardware.camera2.CameraDevice,java.util.List)>(r0, r2);

        return;
    }

    private static void checkPhysicalCameraIdValid(android.hardware.camera2.CameraDevice, java.util.List)
    {
        android.hardware.camera2.CameraDevice r0;
        java.util.List r1;
        java.lang.String r2, r5, $r13;
        java.util.Iterator r3;
        androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat r4;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @parameter0: android.hardware.camera2.CameraDevice;

        r1 := @parameter1: java.util.List;

        r2 = virtualinvoke r0.<android.hardware.camera2.CameraDevice: java.lang.String getId()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat) $r6;

        r5 = virtualinvoke r4.<androidx.camera.camera2.internal.compat.params.OutputConfigurationCompat: java.lang.String getPhysicalCameraId()>();

        if r5 == null goto label2;

        $z1 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Camera doesn\'t support physicalCameraId ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Ignoring.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void w(java.lang.String,java.lang.String)>("CameraDeviceCompat", $r13);

     label2:
        goto label1;

     label3:
        return;
    }

    void createBaseCaptureSession(android.hardware.camera2.CameraDevice, java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler) throws androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat
    {
        androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl r0;
        android.hardware.camera2.CameraDevice r1;
        java.util.List r2;
        android.hardware.camera2.CameraCaptureSession$StateCallback r3;
        android.os.Handler r4;
        java.lang.Throwable r5, $r6, r8;
        androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat $r7;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: android.hardware.camera2.CameraCaptureSession$StateCallback;

        r4 := @parameter3: android.os.Handler;

     label1:
        virtualinvoke r1.<android.hardware.camera2.CameraDevice: void createCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>(r2, r3, r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r5 = $r6;

        $r7 = staticinvoke <androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat: androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat toCameraAccessExceptionCompat(android.hardware.camera2.CameraAccessException)>(r5);

        r8 = (java.lang.Throwable) $r7;

        throw r8;

     label4:
        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    public void createCaptureSession(androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat) throws androidx.camera.camera2.internal.compat.CameraAccessExceptionCompat
    {
        androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl r0;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat r1;
        androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$StateCallbackExecutorWrapper r2, $r7;
        java.util.List r3, $r10;
        androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21 r4;
        android.hardware.camera2.CameraDevice $r5, $r13;
        androidx.camera.camera2.internal.compat.params.InputConfigurationCompat $r6;
        int $i0;
        java.util.concurrent.Executor $r8;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r9;
        java.lang.Object $r11;
        android.os.Handler $r12;
        java.lang.IllegalArgumentException $r14, $r15;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat;

        $r5 = r0.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        staticinvoke <androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: void checkPreconditions(android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat)>($r5, r1);

        $r6 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: androidx.camera.camera2.internal.compat.params.InputConfigurationCompat getInputConfiguration()>();

        if $r6 == null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Reprocessing sessions not supported until API 23");

        throw $r15;

     label1:
        $i0 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: int getSessionType()>();

        if $i0 != 1 goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("High speed capture sessions not supported until API 23");

        throw $r14;

     label2:
        $r7 = new androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$StateCallbackExecutorWrapper;

        $r8 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: java.util.concurrent.Executor getExecutor()>();

        $r9 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: android.hardware.camera2.CameraCaptureSession$StateCallback getStateCallback()>();

        specialinvoke $r7.<androidx.camera.camera2.internal.compat.CameraCaptureSessionCompat$StateCallbackExecutorWrapper: void <init>(java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$StateCallback)>($r8, $r9);

        r2 = $r7;

        $r10 = virtualinvoke r1.<androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat: java.util.List getOutputConfigurations()>();

        r3 = staticinvoke <androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: java.util.List unpackSurfaces(java.util.List)>($r10);

        $r11 = r0.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: java.lang.Object mImplParams>;

        r4 = (androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21) $r11;

        $r13 = r0.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        $r12 = r4.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21: android.os.Handler mCompatHandler>;

        virtualinvoke r0.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: void createBaseCaptureSession(android.hardware.camera2.CameraDevice,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>($r13, r3, r2, $r12);

        return;
    }

    public android.hardware.camera2.CameraDevice unwrap()
    {
        androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl r0;
        android.hardware.camera2.CameraDevice $r1;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl;

        $r1 = r0.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl: android.hardware.camera2.CameraDevice mCameraDevice>;

        return $r1;
    }

androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21
<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21: android.os.Handler mCompatHandler>
    void <init>(android.os.Handler)
    {
        androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21 r0;
        android.os.Handler r1;

        r0 := @this: androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.compat.CameraDeviceCompatBaseImpl$CameraDeviceCompatParamsApi21: android.os.Handler mCompatHandler> = r1;

        return;
    }

