kotlin.text.DelimitedRangesSequence
<kotlin.text.DelimitedRangesSequence: kotlin.jvm.functions.Function2 getNextMatch>
<kotlin.text.DelimitedRangesSequence: java.lang.CharSequence input>
<kotlin.text.DelimitedRangesSequence: int limit>
<kotlin.text.DelimitedRangesSequence: int startIndex>
    public void <init>(java.lang.CharSequence, int, int, kotlin.jvm.functions.Function2)
    {
        kotlin.text.DelimitedRangesSequence $r0;
        java.lang.CharSequence $r1;
        int $i0, $i1;
        kotlin.jvm.functions.Function2 $r2;

        $r0 := @this: kotlin.text.DelimitedRangesSequence;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "input");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "getNextMatch");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.text.DelimitedRangesSequence: java.lang.CharSequence input> = $r1;

        $r0.<kotlin.text.DelimitedRangesSequence: int startIndex> = $i0;

        $r0.<kotlin.text.DelimitedRangesSequence: int limit> = $i1;

        $r0.<kotlin.text.DelimitedRangesSequence: kotlin.jvm.functions.Function2 getNextMatch> = $r2;

        return;
    }

    public static final kotlin.jvm.functions.Function2 access$getGetNextMatch$p(kotlin.text.DelimitedRangesSequence)
    {
        kotlin.text.DelimitedRangesSequence $r0;
        kotlin.jvm.functions.Function2 r1;

        $r0 := @parameter0: kotlin.text.DelimitedRangesSequence;

        r1 = $r0.<kotlin.text.DelimitedRangesSequence: kotlin.jvm.functions.Function2 getNextMatch>;

        return r1;
    }

    public static final java.lang.CharSequence access$getInput$p(kotlin.text.DelimitedRangesSequence)
    {
        kotlin.text.DelimitedRangesSequence $r0;
        java.lang.CharSequence r1;

        $r0 := @parameter0: kotlin.text.DelimitedRangesSequence;

        r1 = $r0.<kotlin.text.DelimitedRangesSequence: java.lang.CharSequence input>;

        return r1;
    }

    public static final int access$getLimit$p(kotlin.text.DelimitedRangesSequence)
    {
        kotlin.text.DelimitedRangesSequence $r0;
        int i0;

        $r0 := @parameter0: kotlin.text.DelimitedRangesSequence;

        i0 = $r0.<kotlin.text.DelimitedRangesSequence: int limit>;

        return i0;
    }

    public static final int access$getStartIndex$p(kotlin.text.DelimitedRangesSequence)
    {
        kotlin.text.DelimitedRangesSequence $r0;
        int i0;

        $r0 := @parameter0: kotlin.text.DelimitedRangesSequence;

        i0 = $r0.<kotlin.text.DelimitedRangesSequence: int startIndex>;

        return i0;
    }

    public java.util.Iterator iterator()
    {
        kotlin.text.DelimitedRangesSequence $r0;
        kotlin.text.DelimitedRangesSequence$iterator$1 $r1;

        $r0 := @this: kotlin.text.DelimitedRangesSequence;

        $r1 = new kotlin.text.DelimitedRangesSequence$iterator$1;

        specialinvoke $r1.<kotlin.text.DelimitedRangesSequence$iterator$1: void <init>(kotlin.text.DelimitedRangesSequence)>($r0);

        return $r1;
    }

kotlin.text.DelimitedRangesSequence$iterator$1
<kotlin.text.DelimitedRangesSequence$iterator$1: int counter>
<kotlin.text.DelimitedRangesSequence$iterator$1: int currentStartIndex>
<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem>
<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex>
<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState>
<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0>
    void <init>(kotlin.text.DelimitedRangesSequence)
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        kotlin.text.DelimitedRangesSequence $r1;
        int $i0, $i1;
        java.lang.CharSequence $r2;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $r1 := @parameter0: kotlin.text.DelimitedRangesSequence;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState> = -1;

        $i0 = staticinvoke <kotlin.text.DelimitedRangesSequence: int access$getStartIndex$p(kotlin.text.DelimitedRangesSequence)>($r1);

        $r2 = staticinvoke <kotlin.text.DelimitedRangesSequence: java.lang.CharSequence access$getInput$p(kotlin.text.DelimitedRangesSequence)>($r1);

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceIn(int,int,int)>($i0, 0, $i1);

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int currentStartIndex> = $i0;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex> = $i0;

        return;
    }

    private final void calcNext()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int $i0, $i2, $i3;
        byte $b1;
        kotlin.text.DelimitedRangesSequence $r1;
        java.lang.CharSequence $r2;
        kotlin.ranges.IntRange $r3;
        kotlin.jvm.functions.Function2 $r4;
        java.lang.Integer $r5;
        java.lang.Object $r6;
        kotlin.Pair $r7;
        java.lang.Number $r8;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex>;

        $b1 = 0;

        if $i0 >= 0 goto label1;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState> = 0;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem> = null;

        return;

     label1:
        $r1 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0>;

        $i0 = staticinvoke <kotlin.text.DelimitedRangesSequence: int access$getLimit$p(kotlin.text.DelimitedRangesSequence)>($r1);

        if $i0 <= 0 goto label2;

        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int counter>;

        $i0 = $i0 + 1;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int counter> = $i0;

        $r1 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0>;

        $i2 = staticinvoke <kotlin.text.DelimitedRangesSequence: int access$getLimit$p(kotlin.text.DelimitedRangesSequence)>($r1);

        if $i0 >= $i2 goto label3;

     label2:
        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex>;

        $r1 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0>;

        $r2 = staticinvoke <kotlin.text.DelimitedRangesSequence: java.lang.CharSequence access$getInput$p(kotlin.text.DelimitedRangesSequence)>($r1);

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i0 <= $i2 goto label4;

     label3:
        $r3 = new kotlin.ranges.IntRange;

        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int currentStartIndex>;

        $r1 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0>;

        $r2 = staticinvoke <kotlin.text.DelimitedRangesSequence: java.lang.CharSequence access$getInput$p(kotlin.text.DelimitedRangesSequence)>($r1);

        $i2 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r2);

        specialinvoke $r3.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i2);

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem> = $r3;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex> = -1;

        goto label7;

     label4:
        $r1 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0>;

        $r4 = staticinvoke <kotlin.text.DelimitedRangesSequence: kotlin.jvm.functions.Function2 access$getGetNextMatch$p(kotlin.text.DelimitedRangesSequence)>($r1);

        $r1 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0>;

        $r2 = staticinvoke <kotlin.text.DelimitedRangesSequence: java.lang.CharSequence access$getInput$p(kotlin.text.DelimitedRangesSequence)>($r1);

        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6 = interfaceinvoke $r4.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r7 = (kotlin.Pair) $r6;

        if $r7 != null goto label5;

        $r3 = new kotlin.ranges.IntRange;

        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int currentStartIndex>;

        $r1 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0>;

        $r2 = staticinvoke <kotlin.text.DelimitedRangesSequence: java.lang.CharSequence access$getInput$p(kotlin.text.DelimitedRangesSequence)>($r1);

        $i2 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r2);

        specialinvoke $r3.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i2);

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem> = $r3;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex> = -1;

        goto label7;

     label5:
        $r6 = virtualinvoke $r7.<kotlin.Pair: java.lang.Object component1()>();

        $r8 = (java.lang.Number) $r6;

        $i2 = virtualinvoke $r8.<java.lang.Number: int intValue()>();

        $r6 = virtualinvoke $r7.<kotlin.Pair: java.lang.Object component2()>();

        $r8 = (java.lang.Number) $r6;

        $i0 = virtualinvoke $r8.<java.lang.Number: int intValue()>();

        $i3 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int currentStartIndex>;

        $r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>($i3, $i2);

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem> = $r3;

        $i2 = $i2 + $i0;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int currentStartIndex> = $i2;

        if $i0 != 0 goto label6;

        $b1 = 1;

        goto label6;

     label6:
        $i0 = $i2 + $b1;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex> = $i0;

     label7:
        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState> = 1;

        return;
    }

    public final int getCounter()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int i0;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int counter>;

        return i0;
    }

    public final int getCurrentStartIndex()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int i0;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int currentStartIndex>;

        return i0;
    }

    public final kotlin.ranges.IntRange getNextItem()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        kotlin.ranges.IntRange r1;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        r1 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem>;

        return r1;
    }

    public final int getNextSearchIndex()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int i0;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex>;

        return i0;
    }

    public final int getNextState()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int i0;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState>;

        return i0;
    }

    public boolean hasNext()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int $i0;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState>;

        if $i0 != -1 goto label1;

        specialinvoke $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: void calcNext()>();

     label1:
        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState>;

        if $i0 != 1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public volatile java.lang.Object next()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        kotlin.ranges.IntRange $r1;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $r1 = virtualinvoke $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange next()>();

        return $r1;
    }

    public kotlin.ranges.IntRange next()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int $i0;
        kotlin.ranges.IntRange $r1;
        java.util.NoSuchElementException $r2;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState>;

        if $i0 != -1 goto label1;

        specialinvoke $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: void calcNext()>();

     label1:
        $i0 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState>;

        if $i0 == 0 goto label2;

        $r1 = $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlin.ranges.IntRange");

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem> = null;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState> = -1;

        return $r1;

     label2:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public void remove()
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public final void setCounter(int)
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int $i0;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $i0 := @parameter0: int;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int counter> = $i0;

        return;
    }

    public final void setCurrentStartIndex(int)
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int $i0;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $i0 := @parameter0: int;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int currentStartIndex> = $i0;

        return;
    }

    public final void setNextItem(kotlin.ranges.IntRange)
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        kotlin.ranges.IntRange $r1;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $r1 := @parameter0: kotlin.ranges.IntRange;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem> = $r1;

        return;
    }

    public final void setNextSearchIndex(int)
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int $i0;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $i0 := @parameter0: int;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex> = $i0;

        return;
    }

    public final void setNextState(int)
    {
        kotlin.text.DelimitedRangesSequence$iterator$1 $r0;
        int $i0;

        $r0 := @this: kotlin.text.DelimitedRangesSequence$iterator$1;

        $i0 := @parameter0: int;

        $r0.<kotlin.text.DelimitedRangesSequence$iterator$1: int nextState> = $i0;

        return;
    }

