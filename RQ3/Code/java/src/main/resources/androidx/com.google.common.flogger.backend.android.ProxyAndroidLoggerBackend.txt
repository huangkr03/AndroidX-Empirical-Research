com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend
<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.atomic.AtomicReference backendFactory>
<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.atomic.AtomicLong bufferSize>
<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.ConcurrentLinkedQueue logBuffer>
<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend>
    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        java.util.concurrent.ConcurrentLinkedQueue $r2;

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.atomic.AtomicReference backendFactory> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.atomic.AtomicLong bufferSize> = $r1;

        $r2 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r2.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.ConcurrentLinkedQueue logBuffer> = $r2;

        return;
    }

    private void <init>(java.lang.String)
    {
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend $r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        com.google.common.flogger.backend.android.SimpleAndroidLoggerBackend$Factory $r3;
        com.google.common.flogger.backend.LoggerBackend $r4;
        com.google.common.flogger.backend.android.AlwaysLogBackend$Factory $r5;

        $r0 := @this: com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.google.common.flogger.backend.android.AbstractAndroidBackend: void <init>(java.lang.String)>($r1);

        $r1 = <android.os.Build: java.lang.String FINGERPRINT>;

        $z0 = 1;

        if $r1 == null goto label02;

        $r1 = "robolectric";

        $r2 = <android.os.Build: java.lang.String FINGERPRINT>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label01;

        goto label02;

     label01:
        $z1 = 0;

        goto label03;

     label02:
        $z1 = 1;

     label03:
        $r1 = <android.os.Build: java.lang.String HARDWARE>;

        $r2 = "goldfish";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 != 0 goto label05;

        $r1 = "ranchu";

        $r2 = <android.os.Build: java.lang.String HARDWARE>;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label04;

        goto label05;

     label04:
        $z2 = 0;

        goto label06;

     label05:
        $z2 = 1;

     label06:
        $r1 = <android.os.Build: java.lang.String TYPE>;

        $r2 = "eng";

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z3 != 0 goto label08;

        $r1 = "userdebug";

        $r2 = <android.os.Build: java.lang.String TYPE>;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z3 == 0 goto label07;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        if $z1 != 0 goto label11;

        if $z2 == 0 goto label09;

        goto label11;

     label09:
        if $z0 == 0 goto label10;

        $r3 = new com.google.common.flogger.backend.android.SimpleAndroidLoggerBackend$Factory;

        specialinvoke $r3.<com.google.common.flogger.backend.android.SimpleAndroidLoggerBackend$Factory: void <init>()>();

        $r3 = virtualinvoke $r3.<com.google.common.flogger.backend.android.SimpleAndroidLoggerBackend$Factory: com.google.common.flogger.backend.android.SimpleAndroidLoggerBackend$Factory withIncludeFormatArguments(boolean)>(0);

        $r1 = virtualinvoke $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.lang.String getLoggerName()>();

        $r4 = virtualinvoke $r3.<com.google.common.flogger.backend.android.SimpleAndroidLoggerBackend$Factory: com.google.common.flogger.backend.LoggerBackend create(java.lang.String)>($r1);

        $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend> = $r4;

        return;

     label10:
        $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend> = null;

        return;

     label11:
        $r5 = new com.google.common.flogger.backend.android.AlwaysLogBackend$Factory;

        specialinvoke $r5.<com.google.common.flogger.backend.android.AlwaysLogBackend$Factory: void <init>()>();

        $r1 = virtualinvoke $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.lang.String getLoggerName()>();

        $r4 = virtualinvoke $r5.<com.google.common.flogger.backend.android.AlwaysLogBackend$Factory: com.google.common.flogger.backend.LoggerBackend create(java.lang.String)>($r1);

        $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend> = $r4;

        return;
    }

    private void attachBackend()
    {
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend $r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        com.google.common.flogger.backend.android.AndroidBackendFactory $r3;
        java.lang.String $r4;
        com.google.common.flogger.backend.LoggerBackend $r5;

        $r0 := @this: com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend;

        $r1 = <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.atomic.AtomicReference backendFactory>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (com.google.common.flogger.backend.android.AndroidBackendFactory) $r2;

        $r4 = virtualinvoke $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.lang.String getLoggerName()>();

        $r5 = interfaceinvoke $r3.<com.google.common.flogger.backend.android.AndroidBackendFactory: com.google.common.flogger.backend.LoggerBackend create(java.lang.String)>($r4);

        $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend> = $r5;

        return;
    }

    private static void attachBackends()
    {
        java.lang.Object $r0;
        java.util.concurrent.ConcurrentLinkedQueue $r1;
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend $r2;

     label1:
        $r1 = <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LazyProxyQueueHolder: java.util.concurrent.ConcurrentLinkedQueue backendlessProxyQueue>;

        $r0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();

        $r2 = (com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend) $r0;

        if $r2 == null goto label2;

        specialinvoke $r2.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: void attachBackend()>();

        goto label1;

     label2:
        staticinvoke <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: void flushBuffer()>();

        return;
    }

    public static com.google.common.flogger.backend.LoggerBackend create(java.lang.String)
    {
        java.lang.String $r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        com.google.common.flogger.backend.android.AndroidBackendFactory $r3;
        com.google.common.flogger.backend.LoggerBackend $r4;
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend $r5;
        java.util.concurrent.ConcurrentLinkedQueue $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 = <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.atomic.AtomicReference backendFactory>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (com.google.common.flogger.backend.android.AndroidBackendFactory) $r2;

        $r4 = interfaceinvoke $r3.<com.google.common.flogger.backend.android.AndroidBackendFactory: com.google.common.flogger.backend.LoggerBackend create(java.lang.String)>($r0);

        return $r4;

     label1:
        $r5 = new com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(36, 46);

        specialinvoke $r5.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: void <init>(java.lang.String)>($r0);

        $r6 = <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LazyProxyQueueHolder: java.util.concurrent.ConcurrentLinkedQueue backendlessProxyQueue>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>($r5);

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r2 == null goto label2;

        staticinvoke <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: void attachBackends()>();

     label2:
        return $r5;
    }

    private static void flushBuffer()
    {
        java.util.concurrent.ConcurrentLinkedQueue $r0;
        java.lang.Object $r1;
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        com.google.common.flogger.backend.LoggerBackend $r4;
        com.google.common.flogger.backend.LogData $r5;
        boolean $z0;
        java.util.logging.Level $r6;

     label1:
        $r0 = <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.ConcurrentLinkedQueue logBuffer>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();

        $r2 = (com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping) $r1;

        if $r2 == null goto label3;

        $r3 = <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.atomic.AtomicLong bufferSize>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long getAndDecrement()>();

        $r4 = virtualinvoke $r2.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping: com.google.common.flogger.backend.LoggerBackend getBackend()>();

        $r5 = virtualinvoke $r2.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping: com.google.common.flogger.backend.LogData getData()>();

        $z0 = interfaceinvoke $r5.<com.google.common.flogger.backend.LogData: boolean wasForced()>();

        if $z0 != 0 goto label2;

        $r6 = interfaceinvoke $r5.<com.google.common.flogger.backend.LogData: java.util.logging.Level getLevel()>();

        $z0 = virtualinvoke $r4.<com.google.common.flogger.backend.LoggerBackend: boolean isLoggable(java.util.logging.Level)>($r6);

        if $z0 == 0 goto label1;

     label2:
        virtualinvoke $r4.<com.google.common.flogger.backend.LoggerBackend: void log(com.google.common.flogger.backend.LogData)>($r5);

        goto label1;

     label3:
        return;
    }

    public void handleError(java.lang.RuntimeException, com.google.common.flogger.backend.LogData)
    {
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend $r0;
        java.lang.RuntimeException $r1;
        com.google.common.flogger.backend.LogData $r2;
        com.google.common.flogger.backend.LoggerBackend $r3;
        java.lang.Throwable r4;

        $r0 := @this: com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend;

        $r1 := @parameter0: java.lang.RuntimeException;

        $r2 := @parameter1: com.google.common.flogger.backend.LogData;

        $r3 = $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend>;

        if $r3 == null goto label1;

        $r3 = $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend>;

        virtualinvoke $r3.<com.google.common.flogger.backend.LoggerBackend: void handleError(java.lang.RuntimeException,com.google.common.flogger.backend.LogData)>($r1, $r2);

        return;

     label1:
        r4 = (java.lang.Throwable) $r1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ProxyAndroidLoggerBackend", "Internal logging error before configuration", r4);

        return;
    }

    public boolean isLoggable(java.util.logging.Level)
    {
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend $r0;
        boolean $z0;
        java.util.logging.Level $r1;
        com.google.common.flogger.backend.LoggerBackend $r2;

        $r0 := @this: com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend;

        $r1 := @parameter0: java.util.logging.Level;

        $r2 = $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend>;

        $z0 = virtualinvoke $r2.<com.google.common.flogger.backend.LoggerBackend: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;

     label1:
        return 1;
    }

    public void log(com.google.common.flogger.backend.LogData)
    {
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend $r0;
        byte $b0;
        long $l1;
        com.google.common.flogger.backend.LogData $r1;
        com.google.common.flogger.backend.LoggerBackend $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        java.util.concurrent.ConcurrentLinkedQueue $r4;
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping $r5;

        $r0 := @this: com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend;

        $r1 := @parameter0: com.google.common.flogger.backend.LogData;

        $r2 = $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend>;

        virtualinvoke $r2.<com.google.common.flogger.backend.LoggerBackend: void log(com.google.common.flogger.backend.LogData)>($r1);

        return;

     label1:
        $r3 = <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.atomic.AtomicLong bufferSize>;

        $l1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $b0 = $l1 cmp 20L;

        if $b0 <= 0 goto label2;

        $r4 = <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.ConcurrentLinkedQueue logBuffer>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ProxyAndroidLoggerBackend", "Too many Flogger logs received before configuration. Dropping old logs.");

     label2:
        $r4 = <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: java.util.concurrent.ConcurrentLinkedQueue logBuffer>;

        $r5 = new com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping;

        specialinvoke $r5.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping: void <init>(com.google.common.flogger.backend.LoggerBackend,com.google.common.flogger.backend.LogData)>($r0, $r1);

        virtualinvoke $r4.<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>($r5);

        $r2 = $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: com.google.common.flogger.backend.LoggerBackend backend>;

        if $r2 == null goto label3;

        staticinvoke <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend: void flushBuffer()>();

     label3:
        return;
    }

com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LazyProxyQueueHolder
<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LazyProxyQueueHolder: java.util.concurrent.ConcurrentLinkedQueue backendlessProxyQueue>
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentLinkedQueue $r0;

        $r0 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r0.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        <com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LazyProxyQueueHolder: java.util.concurrent.ConcurrentLinkedQueue backendlessProxyQueue> = $r0;

        return;
    }

com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping
<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping: com.google.common.flogger.backend.LoggerBackend backend>
<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping: com.google.common.flogger.backend.LogData data>
    void <init>(com.google.common.flogger.backend.LoggerBackend, com.google.common.flogger.backend.LogData)
    {
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping $r0;
        com.google.common.flogger.backend.LoggerBackend $r1;
        com.google.common.flogger.backend.LogData $r2;

        $r0 := @this: com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping;

        $r1 := @parameter0: com.google.common.flogger.backend.LoggerBackend;

        $r2 := @parameter1: com.google.common.flogger.backend.LogData;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping: com.google.common.flogger.backend.LoggerBackend backend> = $r1;

        $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping: com.google.common.flogger.backend.LogData data> = $r2;

        return;
    }

    com.google.common.flogger.backend.LoggerBackend getBackend()
    {
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping $r0;
        com.google.common.flogger.backend.LoggerBackend r1;

        $r0 := @this: com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping;

        r1 = $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping: com.google.common.flogger.backend.LoggerBackend backend>;

        return r1;
    }

    com.google.common.flogger.backend.LogData getData()
    {
        com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping $r0;
        com.google.common.flogger.backend.LogData r1;

        $r0 := @this: com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping;

        r1 = $r0.<com.google.common.flogger.backend.android.ProxyAndroidLoggerBackend$LogMapping: com.google.common.flogger.backend.LogData data>;

        return r1;
    }

