com.google.common.flogger.parameter.Parameter
<com.google.common.flogger.parameter.Parameter: int index>
<com.google.common.flogger.parameter.Parameter: com.google.common.flogger.backend.FormatOptions options>
    protected void <init>(com.google.common.flogger.backend.FormatOptions, int)
    {
        com.google.common.flogger.parameter.Parameter $r0;
        com.google.common.flogger.backend.FormatOptions $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: com.google.common.flogger.parameter.Parameter;

        $r1 := @parameter0: com.google.common.flogger.backend.FormatOptions;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 == null goto label2;

        if $i0 < 0 goto label1;

        $r0.<com.google.common.flogger.parameter.Parameter: int index> = $i0;

        $r0.<com.google.common.flogger.parameter.Parameter: com.google.common.flogger.backend.FormatOptions options> = $r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid index: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("format options cannot be null");

        throw $r2;
    }

<com.google.common.flogger.parameter.Parameter: void accept(com.google.common.flogger.parameter.ParameterVisitor,java.lang.Object)>
    public final void accept(com.google.common.flogger.parameter.ParameterVisitor, java.lang.Object[])
    {
        com.google.common.flogger.parameter.Parameter $r0;
        com.google.common.flogger.parameter.ParameterVisitor $r1;
        int $i0, $i1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        $r0 := @this: com.google.common.flogger.parameter.Parameter;

        $r1 := @parameter0: com.google.common.flogger.parameter.ParameterVisitor;

        $r2 := @parameter1: java.lang.Object[];

        $i1 = virtualinvoke $r0.<com.google.common.flogger.parameter.Parameter: int getIndex()>();

        $i0 = lengthof $r2;

        if $i1 >= $i0 goto label2;

        $i0 = virtualinvoke $r0.<com.google.common.flogger.parameter.Parameter: int getIndex()>();

        $r3 = $r2[$i0];

        if $r3 == null goto label1;

        virtualinvoke $r0.<com.google.common.flogger.parameter.Parameter: void accept(com.google.common.flogger.parameter.ParameterVisitor,java.lang.Object)>($r1, $r3);

        return;

     label1:
        interfaceinvoke $r1.<com.google.common.flogger.parameter.ParameterVisitor: void visitNull()>();

        return;

     label2:
        interfaceinvoke $r1.<com.google.common.flogger.parameter.ParameterVisitor: void visitMissing()>();

        return;
    }

    protected final com.google.common.flogger.backend.FormatOptions getFormatOptions()
    {
        com.google.common.flogger.parameter.Parameter $r0;
        com.google.common.flogger.backend.FormatOptions r1;

        $r0 := @this: com.google.common.flogger.parameter.Parameter;

        r1 = $r0.<com.google.common.flogger.parameter.Parameter: com.google.common.flogger.backend.FormatOptions options>;

        return r1;
    }

    public final int getIndex()
    {
        com.google.common.flogger.parameter.Parameter $r0;
        int i0;

        $r0 := @this: com.google.common.flogger.parameter.Parameter;

        i0 = $r0.<com.google.common.flogger.parameter.Parameter: int index>;

        return i0;
    }

