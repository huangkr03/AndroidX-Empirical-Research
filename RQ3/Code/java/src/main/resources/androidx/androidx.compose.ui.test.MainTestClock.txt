androidx.compose.ui.test.MainTestClock
<androidx.compose.ui.test.MainTestClock: long getCurrentTime()>
<androidx.compose.ui.test.MainTestClock: boolean getAutoAdvance()>
<androidx.compose.ui.test.MainTestClock: void setAutoAdvance(boolean)>
<androidx.compose.ui.test.MainTestClock: void advanceTimeByFrame()>
<androidx.compose.ui.test.MainTestClock: void advanceTimeBy(long,boolean)>
    public static void advanceTimeBy$default(androidx.compose.ui.test.MainTestClock, long, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.test.MainTestClock r0;
        long l0;
        int i1, $i2;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;
        boolean z0;

        r0 := @parameter0: androidx.compose.ui.test.MainTestClock;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        if r1 == null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: advanceTimeBy");

        throw $r2;

     label1:
        $i2 = i1 & 2;

        if $i2 == 0 goto label2;

        z0 = 0;

     label2:
        interfaceinvoke r0.<androidx.compose.ui.test.MainTestClock: void advanceTimeBy(long,boolean)>(l0, z0);

        return;
    }

<androidx.compose.ui.test.MainTestClock: void advanceTimeUntil(long,kotlin.jvm.functions.Function0)>
    public static void advanceTimeUntil$default(androidx.compose.ui.test.MainTestClock, long, kotlin.jvm.functions.Function0, int, java.lang.Object)
    {
        androidx.compose.ui.test.MainTestClock r0;
        kotlin.jvm.functions.Function0 r1;
        int i0, $i1;
        java.lang.Object r2;
        java.lang.UnsupportedOperationException $r3;
        long l2;

        r0 := @parameter0: androidx.compose.ui.test.MainTestClock;

        l2 := @parameter1: long;

        r1 := @parameter2: kotlin.jvm.functions.Function0;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        if r2 == null goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: advanceTimeUntil");

        throw $r3;

     label1:
        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        l2 = 1000L;

     label2:
        interfaceinvoke r0.<androidx.compose.ui.test.MainTestClock: void advanceTimeUntil(long,kotlin.jvm.functions.Function0)>(l2, r1);

        return;
    }

androidx.compose.ui.test.MainTestClock$DefaultImpls
    public static void advanceTimeBy$default(androidx.compose.ui.test.MainTestClock, long, boolean, int, java.lang.Object)
    {
        androidx.compose.ui.test.MainTestClock r0;
        long l0;
        boolean z0;
        int i1;
        java.lang.Object r1;

        r0 := @parameter0: androidx.compose.ui.test.MainTestClock;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        staticinvoke <androidx.compose.ui.test.MainTestClock: void advanceTimeBy$default(androidx.compose.ui.test.MainTestClock,long,boolean,int,java.lang.Object)>(r0, l0, z0, i1, r1);

        return;
    }

    public static void advanceTimeUntil$default(androidx.compose.ui.test.MainTestClock, long, kotlin.jvm.functions.Function0, int, java.lang.Object)
    {
        androidx.compose.ui.test.MainTestClock r0;
        long l0;
        kotlin.jvm.functions.Function0 r1;
        int i1;
        java.lang.Object r2;

        r0 := @parameter0: androidx.compose.ui.test.MainTestClock;

        l0 := @parameter1: long;

        r1 := @parameter2: kotlin.jvm.functions.Function0;

        i1 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        staticinvoke <androidx.compose.ui.test.MainTestClock: void advanceTimeUntil$default(androidx.compose.ui.test.MainTestClock,long,kotlin.jvm.functions.Function0,int,java.lang.Object)>(r0, l0, r1, i1, r2);

        return;
    }

