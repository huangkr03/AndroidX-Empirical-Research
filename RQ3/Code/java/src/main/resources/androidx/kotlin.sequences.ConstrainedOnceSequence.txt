kotlin.sequences.ConstrainedOnceSequence
<kotlin.sequences.ConstrainedOnceSequence: java.util.concurrent.atomic.AtomicReference sequenceRef>
    public void <init>(kotlin.sequences.Sequence)
    {
        kotlin.sequences.ConstrainedOnceSequence $r0;
        kotlin.sequences.Sequence $r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        $r0 := @this: kotlin.sequences.ConstrainedOnceSequence;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sequence");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r1);

        $r0.<kotlin.sequences.ConstrainedOnceSequence: java.util.concurrent.atomic.AtomicReference sequenceRef> = $r2;

        return;
    }

    public java.util.Iterator iterator()
    {
        kotlin.sequences.ConstrainedOnceSequence $r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        kotlin.sequences.Sequence $r3;
        java.util.Iterator $r4;
        java.lang.IllegalStateException $r5;

        $r0 := @this: kotlin.sequences.ConstrainedOnceSequence;

        $r1 = $r0.<kotlin.sequences.ConstrainedOnceSequence: java.util.concurrent.atomic.AtomicReference sequenceRef>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        $r3 = (kotlin.sequences.Sequence) $r2;

        if $r3 == null goto label1;

        $r4 = interfaceinvoke $r3.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        return $r4;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This sequence can be consumed only once.");

        throw $r5;
    }

