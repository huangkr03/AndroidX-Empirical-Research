androidx.media3.transformer.DefaultEncoderFactory
<androidx.media3.transformer.DefaultEncoderFactory: int DEFAULT_FRAME_RATE>
<androidx.media3.transformer.DefaultEncoderFactory: int PRIORITY_BEST_EFFORT>
<androidx.media3.transformer.DefaultEncoderFactory: java.lang.String TAG>
<androidx.media3.transformer.DefaultEncoderFactory: android.content.Context context>
<androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.EncoderSelector videoEncoderSelector>
<androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.VideoEncoderSettings requestedVideoEncoderSettings>
<androidx.media3.transformer.DefaultEncoderFactory: boolean enableFallback>
    public void <init>(android.content.Context)
    {
        androidx.media3.transformer.DefaultEncoderFactory r0;
        android.content.Context r1;
        androidx.media3.transformer.EncoderSelector $r2;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory;

        r1 := @parameter0: android.content.Context;

        $r2 = <androidx.media3.transformer.EncoderSelector: androidx.media3.transformer.EncoderSelector DEFAULT>;

        specialinvoke r0.<androidx.media3.transformer.DefaultEncoderFactory: void <init>(android.content.Context,androidx.media3.transformer.EncoderSelector,boolean)>(r1, $r2, 1);

        return;
    }

    public void <init>(android.content.Context, androidx.media3.transformer.EncoderSelector, boolean)
    {
        androidx.media3.transformer.DefaultEncoderFactory r0;
        android.content.Context r1;
        androidx.media3.transformer.EncoderSelector r2;
        boolean z0;
        androidx.media3.transformer.VideoEncoderSettings $r3;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media3.transformer.EncoderSelector;

        z0 := @parameter2: boolean;

        $r3 = <androidx.media3.transformer.VideoEncoderSettings: androidx.media3.transformer.VideoEncoderSettings DEFAULT>;

        specialinvoke r0.<androidx.media3.transformer.DefaultEncoderFactory: void <init>(android.content.Context,androidx.media3.transformer.EncoderSelector,androidx.media3.transformer.VideoEncoderSettings,boolean)>(r1, r2, $r3, z0);

        return;
    }

    public void <init>(android.content.Context, androidx.media3.transformer.EncoderSelector, androidx.media3.transformer.VideoEncoderSettings, boolean)
    {
        androidx.media3.transformer.DefaultEncoderFactory r0;
        android.content.Context r1;
        androidx.media3.transformer.EncoderSelector r2;
        androidx.media3.transformer.VideoEncoderSettings r3;
        boolean z0;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: androidx.media3.transformer.EncoderSelector;

        r3 := @parameter2: androidx.media3.transformer.VideoEncoderSettings;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.transformer.DefaultEncoderFactory: android.content.Context context> = r1;

        r0.<androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.EncoderSelector videoEncoderSelector> = r2;

        r0.<androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.VideoEncoderSettings requestedVideoEncoderSettings> = r3;

        r0.<androidx.media3.transformer.DefaultEncoderFactory: boolean enableFallback> = z0;

        return;
    }

    public androidx.media3.transformer.Codec createForAudioEncoding(androidx.media3.common.Format, java.util.List) throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.DefaultEncoderFactory r0;
        java.util.List r1;
        android.media.MediaFormat r2;
        java.lang.String r3, $r4, $r6, $r7, $r9, $r16;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r8, $r15;
        int $i0, $i1, $i2;
        android.content.Context $r11;
        androidx.media3.transformer.TransformationException $r12, $r13;
        androidx.media3.common.Format$Builder $r14, $r17;
        androidx.media3.common.Format r18;
        androidx.media3.transformer.DefaultCodec r19;
        java.lang.Throwable r20, r21;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory;

        r18 := @parameter0: androidx.media3.common.Format;

        r1 := @parameter1: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z3);

        $r4 = r18.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r6 = r18.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r6);

        if $z1 != 0 goto label4;

        $z2 = r0.<androidx.media3.transformer.DefaultEncoderFactory: boolean enableFallback>;

        if $z2 == 0 goto label3;

        $r14 = virtualinvoke r18.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $r15 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (java.lang.String) $r15;

        $r17 = virtualinvoke $r14.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>($r16);

        r18 = virtualinvoke $r17.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        goto label4;

     label3:
        $r13 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.TransformationException createTransformationException(androidx.media3.common.Format)>(r18);

        r20 = (java.lang.Throwable) $r13;

        throw r20;

     label4:
        $r7 = r18.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r8 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        $r9 = (java.lang.String) $r8;

        $i1 = r18.<androidx.media3.common.Format: int sampleRate>;

        $i0 = r18.<androidx.media3.common.Format: int channelCount>;

        r2 = staticinvoke <android.media.MediaFormat: android.media.MediaFormat createAudioFormat(java.lang.String,int,int)>($r9, $i1, $i0);

        $i2 = r18.<androidx.media3.common.Format: int bitrate>;

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i2);

        r3 = staticinvoke <androidx.media3.transformer.EncoderUtil: java.lang.String findCodecForFormat(android.media.MediaFormat,boolean)>(r2, 0);

        if r3 != null goto label5;

        $r12 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.TransformationException createTransformationException(androidx.media3.common.Format)>(r18);

        r21 = (java.lang.Throwable) $r12;

        throw r21;

     label5:
        r19 = new androidx.media3.transformer.DefaultCodec;

        $r11 = r0.<androidx.media3.transformer.DefaultEncoderFactory: android.content.Context context>;

        specialinvoke r19.<androidx.media3.transformer.DefaultCodec: void <init>(android.content.Context,androidx.media3.common.Format,android.media.MediaFormat,java.lang.String,boolean,android.view.Surface)>($r11, r18, r2, r3, 0, null);

        return r19;
    }

    public androidx.media3.transformer.Codec createForVideoEncoding(androidx.media3.common.Format, java.util.List) throws androidx.media3.transformer.TransformationException
    {
        androidx.media3.transformer.DefaultEncoderFactory r0;
        java.util.List r1;
        androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult r2;
        android.media.MediaCodecInfo r3;
        androidx.media3.transformer.VideoEncoderSettings r4, $r12;
        java.lang.String r5, $r7, $r13, $r24, $r36;
        android.media.MediaFormat r6;
        float $f0, $f1, $f2, $f3, $f4, f5;
        byte $b0, $b11, $b18;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, $i29, $i30, $i31, $i32, $i33, $i34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        androidx.media3.transformer.EncoderSelector $r9, $r11;
        java.lang.Object $r14;
        androidx.media3.common.ColorInfo $r15, $r16, $r20;
        double $d0, $d1;
        com.google.common.collect.ImmutableList $r17;
        java.lang.Integer $r18;
        androidx.media3.transformer.TransformationException $r19, $r27;
        androidx.media3.common.Format$Builder $r21, $r22, $r25, $r26, $r28, $r29;
        androidx.media3.common.Format r30, r31;
        android.content.Context $r35;
        androidx.media3.transformer.DeviceMappedEncoderBitrateProvider r37;
        androidx.media3.transformer.DefaultCodec r38;
        java.lang.Throwable r39, r40;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory;

        r30 := @parameter0: androidx.media3.common.Format;

        r1 := @parameter1: java.util.List;

        $f0 = r30.<androidx.media3.common.Format: float frameRate>;

        $b0 = $f0 cmpl -1.0F;

        if $b0 != 0 goto label01;

        $r28 = virtualinvoke r30.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $r29 = virtualinvoke $r28.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setFrameRate(float)>(30.0F);

        r30 = virtualinvoke $r29.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

     label01:
        $i1 = r30.<androidx.media3.common.Format: int width>;

        if $i1 == -1 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z5);

        $i2 = r30.<androidx.media3.common.Format: int height>;

        if $i2 == -1 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z6);

        $i4 = r30.<androidx.media3.common.Format: int height>;

        $i3 = r30.<androidx.media3.common.Format: int width>;

        if $i4 > $i3 goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z7);

        $i5 = r30.<androidx.media3.common.Format: int rotationDegrees>;

        if $i5 != 0 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z8);

        $r7 = r30.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $z9 = 1;

        goto label11;

     label10:
        $z9 = 0;

     label11:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z9);

        $r9 = r0.<androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.EncoderSelector videoEncoderSelector>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkStateNotNull(java.lang.Object)>($r9);

        $r12 = r0.<androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.VideoEncoderSettings requestedVideoEncoderSettings>;

        $r11 = r0.<androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.EncoderSelector videoEncoderSelector>;

        $z1 = r0.<androidx.media3.transformer.DefaultEncoderFactory: boolean enableFallback>;

        r2 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult findEncoderWithClosestSupportedFormat(androidx.media3.common.Format,androidx.media3.transformer.VideoEncoderSettings,androidx.media3.transformer.EncoderSelector,java.util.List,boolean)>(r30, $r12, $r11, r1, $z1);

        if r2 != null goto label12;

        $r27 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.TransformationException createTransformationException(androidx.media3.common.Format)>(r30);

        r39 = (java.lang.Throwable) $r27;

        throw r39;

     label12:
        r3 = r2.<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: android.media.MediaCodecInfo encoder>;

        r31 = r2.<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: androidx.media3.common.Format supportedFormat>;

        r4 = r2.<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: androidx.media3.transformer.VideoEncoderSettings supportedEncoderSettings>;

        $r13 = r31.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r14 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r13);

        r5 = (java.lang.String) $r14;

        $i7 = r31.<androidx.media3.common.Format: int width>;

        $i6 = r31.<androidx.media3.common.Format: int height>;

        r6 = staticinvoke <android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)>(r5, $i7, $i6);

        $f1 = r31.<androidx.media3.common.Format: float frameRate>;

        $i8 = staticinvoke <java.lang.Math: int round(float)>($f1);

        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("frame-rate", $i8);

        $z2 = r4.<androidx.media3.transformer.VideoEncoderSettings: boolean enableHighQualityTargeting>;

        if $z2 == 0 goto label13;

        r37 = new androidx.media3.transformer.DeviceMappedEncoderBitrateProvider;

        specialinvoke r37.<androidx.media3.transformer.DeviceMappedEncoderBitrateProvider: void <init>()>();

        $r24 = virtualinvoke r3.<android.media.MediaCodecInfo: java.lang.String getName()>();

        $i26 = r31.<androidx.media3.common.Format: int width>;

        $i25 = r31.<androidx.media3.common.Format: int height>;

        $f4 = r31.<androidx.media3.common.Format: float frameRate>;

        i27 = virtualinvoke r37.<androidx.media3.transformer.DeviceMappedEncoderBitrateProvider: int getBitrate(java.lang.String,int,int,float)>($r24, $i26, $i25, $f4);

        $r25 = virtualinvoke r31.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $r26 = virtualinvoke $r25.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setAverageBitrate(int)>(i27);

        r31 = virtualinvoke $r26.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        goto label14;

     label13:
        $i9 = r31.<androidx.media3.common.Format: int bitrate>;

        if $i9 != -1 goto label14;

        $i24 = r31.<androidx.media3.common.Format: int width>;

        $i23 = r31.<androidx.media3.common.Format: int height>;

        $f3 = r31.<androidx.media3.common.Format: float frameRate>;

        i28 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: int getSuggestedBitrate(int,int,float)>($i24, $i23, $f3);

        $r21 = virtualinvoke r31.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $r22 = virtualinvoke $r21.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setAverageBitrate(int)>(i28);

        r31 = virtualinvoke $r22.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

     label14:
        $i29 = r31.<androidx.media3.common.Format: int averageBitrate>;

        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i29);

        $i30 = r4.<androidx.media3.transformer.VideoEncoderSettings: int bitrateMode>;

        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate-mode", $i30);

        $i31 = r4.<androidx.media3.transformer.VideoEncoderSettings: int profile>;

        if $i31 == -1 goto label15;

        $i19 = r4.<androidx.media3.transformer.VideoEncoderSettings: int level>;

        if $i19 == -1 goto label15;

        $i20 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i20 < 23 goto label15;

        $i21 = r4.<androidx.media3.transformer.VideoEncoderSettings: int profile>;

        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("profile", $i21);

        $i22 = r4.<androidx.media3.transformer.VideoEncoderSettings: int level>;

        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("level", $i22);

     label15:
        $z10 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("video/avc");

        if $z10 == 0 goto label16;

        $r20 = r30.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: void adjustMediaFormatForH264EncoderSettings(androidx.media3.common.ColorInfo,android.media.MediaCodecInfo,android.media.MediaFormat)>($r20, r3, r6);

     label16:
        $r15 = r31.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        staticinvoke <androidx.media3.common.util.MediaFormatUtil: void maybeSetColorInfo(android.media.MediaFormat,androidx.media3.common.ColorInfo)>(r6, $r15);

        $i10 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i10 < 31 goto label18;

        $r16 = r30.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $z3 = staticinvoke <androidx.media3.common.ColorInfo: boolean isTransferHdr(androidx.media3.common.ColorInfo)>($r16);

        if $z3 == 0 goto label18;

        $r17 = staticinvoke <androidx.media3.transformer.EncoderUtil: com.google.common.collect.ImmutableList getSupportedColorFormats(android.media.MediaCodecInfo,java.lang.String)>(r3, r5);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2130750114);

        $z4 = virtualinvoke $r17.<com.google.common.collect.ImmutableList: boolean contains(java.lang.Object)>($r18);

        if $z4 == 0 goto label17;

        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("color-format", 2130750114);

        goto label19;

     label17:
        $r19 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.TransformationException createTransformationException(androidx.media3.common.Format)>(r30);

        r40 = (java.lang.Throwable) $r19;

        throw r40;

     label18:
        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("color-format", 2130708361);

     label19:
        $i32 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i32 < 25 goto label20;

        $f2 = r4.<androidx.media3.transformer.VideoEncoderSettings: float iFrameIntervalSeconds>;

        virtualinvoke r6.<android.media.MediaFormat: void setFloat(java.lang.String,float)>("i-frame-interval", $f2);

        goto label23;

     label20:
        f5 = r4.<androidx.media3.transformer.VideoEncoderSettings: float iFrameIntervalSeconds>;

        $b11 = f5 cmpl 0.0F;

        if $b11 <= 0 goto label21;

        $b18 = f5 cmpg 1.0F;

        if $b18 > 0 goto label21;

        $i33 = 1;

        goto label22;

     label21:
        $d0 = (double) f5;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i33 = (int) $d1;

     label22:
        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("i-frame-interval", $i33);

     label23:
        $i34 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i34 < 23 goto label26;

        $i12 = r4.<androidx.media3.transformer.VideoEncoderSettings: int operatingRate>;

        if $i12 != -1 goto label24;

        $i17 = r4.<androidx.media3.transformer.VideoEncoderSettings: int priority>;

        if $i17 != -1 goto label24;

        staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: void adjustMediaFormatForEncoderPerformanceSettings(android.media.MediaFormat)>(r6);

        goto label26;

     label24:
        $i13 = r4.<androidx.media3.transformer.VideoEncoderSettings: int operatingRate>;

        if $i13 == -1 goto label25;

        $i16 = r4.<androidx.media3.transformer.VideoEncoderSettings: int operatingRate>;

        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("operating-rate", $i16);

     label25:
        $i14 = r4.<androidx.media3.transformer.VideoEncoderSettings: int priority>;

        if $i14 == -1 goto label26;

        $i15 = r4.<androidx.media3.transformer.VideoEncoderSettings: int priority>;

        virtualinvoke r6.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("priority", $i15);

     label26:
        r38 = new androidx.media3.transformer.DefaultCodec;

        $r35 = r0.<androidx.media3.transformer.DefaultEncoderFactory: android.content.Context context>;

        $r36 = virtualinvoke r3.<android.media.MediaCodecInfo: java.lang.String getName()>();

        specialinvoke r38.<androidx.media3.transformer.DefaultCodec: void <init>(android.content.Context,androidx.media3.common.Format,android.media.MediaFormat,java.lang.String,boolean,android.view.Surface)>($r35, r31, r6, $r36, 0, null);

        return r38;
    }

    public boolean videoNeedsEncoding()
    {
        androidx.media3.transformer.DefaultEncoderFactory r0;
        androidx.media3.transformer.VideoEncoderSettings $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory;

        $r2 = r0.<androidx.media3.transformer.DefaultEncoderFactory: androidx.media3.transformer.VideoEncoderSettings requestedVideoEncoderSettings>;

        $r1 = <androidx.media3.transformer.VideoEncoderSettings: androidx.media3.transformer.VideoEncoderSettings DEFAULT>;

        $z0 = virtualinvoke $r2.<androidx.media3.transformer.VideoEncoderSettings: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult findEncoderWithClosestSupportedFormat(androidx.media3.common.Format, androidx.media3.transformer.VideoEncoderSettings, androidx.media3.transformer.EncoderSelector, java.util.List, boolean)
    {
        androidx.media3.common.Format r0, $r33;
        androidx.media3.transformer.VideoEncoderSettings r1, $r34;
        androidx.media3.transformer.EncoderSelector r2;
        java.util.List r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String r4, r5;
        android.util.Size r6, $r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.media.MediaCodecInfo r7, $r11, $r27;
        androidx.media3.transformer.VideoEncoderSettings$Builder r8;
        androidx.media3.common.Format$Builder r9, $r19, $r20, $r21;
        java.lang.Object $r10, $r13, $r14, $r26;
        float $f0;
        android.util.Range $r15;
        java.lang.Integer $r16, $r18;
        java.lang.Comparable $r17;
        androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult $r25, $r32;
        com.google.common.collect.ImmutableList r28, r29, r30, r31;

        r0 := @parameter0: androidx.media3.common.Format;

        r1 := @parameter1: androidx.media3.transformer.VideoEncoderSettings;

        r2 := @parameter2: androidx.media3.transformer.EncoderSelector;

        r3 := @parameter3: java.util.List;

        z0 := @parameter4: boolean;

        r4 = r0.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        r5 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: java.lang.String findFallbackMimeType(androidx.media3.transformer.EncoderSelector,java.lang.String,java.util.List)>(r2, r4, r3);

        if r5 == null goto label01;

        if z0 != 0 goto label02;

        $z6 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z6 != 0 goto label02;

     label01:
        return null;

     label02:
        r28 = interfaceinvoke r2.<androidx.media3.transformer.EncoderSelector: com.google.common.collect.ImmutableList selectEncoderInfos(java.lang.String)>(r5);

        $z1 = virtualinvoke r28.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        return null;

     label03:
        if z0 != 0 goto label04;

        $r25 = new androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult;

        $r26 = virtualinvoke r28.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(0);

        $r27 = (android.media.MediaCodecInfo) $r26;

        specialinvoke $r25.<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: void <init>(android.media.MediaCodecInfo,androidx.media3.common.Format,androidx.media3.transformer.VideoEncoderSettings)>($r27, r0, r1);

        return $r25;

     label04:
        $i3 = r0.<androidx.media3.common.Format: int width>;

        $i2 = r0.<androidx.media3.common.Format: int height>;

        r29 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: com.google.common.collect.ImmutableList filterEncodersByResolution(java.util.List,java.lang.String,int,int)>(r28, r5, $i3, $i2);

        $z2 = virtualinvoke r29.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z2 == 0 goto label05;

        return null;

     label05:
        $r10 = virtualinvoke r29.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(0);

        $r11 = (android.media.MediaCodecInfo) $r10;

        $i5 = r0.<androidx.media3.common.Format: int width>;

        $i4 = r0.<androidx.media3.common.Format: int height>;

        $r12 = staticinvoke <androidx.media3.transformer.EncoderUtil: android.util.Size getSupportedResolution(android.media.MediaCodecInfo,java.lang.String,int,int)>($r11, r5, $i5, $i4);

        $r13 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r12);

        r6 = (android.util.Size) $r13;

        $i6 = r1.<androidx.media3.transformer.VideoEncoderSettings: int bitrate>;

        if $i6 == -1 goto label06;

        $i17 = r1.<androidx.media3.transformer.VideoEncoderSettings: int bitrate>;

        goto label07;

     label06:
        $i7 = virtualinvoke r6.<android.util.Size: int getWidth()>();

        $i8 = virtualinvoke r6.<android.util.Size: int getHeight()>();

        $f0 = r0.<androidx.media3.common.Format: float frameRate>;

        $i17 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: int getSuggestedBitrate(int,int,float)>($i7, $i8, $f0);

     label07:
        i0 = $i17;

        r30 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: com.google.common.collect.ImmutableList filterEncodersByBitrate(java.util.List,java.lang.String,int)>(r29, r5, i0);

        $z3 = virtualinvoke r30.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z3 == 0 goto label08;

        return null;

     label08:
        $i9 = r1.<androidx.media3.transformer.VideoEncoderSettings: int bitrateMode>;

        r31 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: com.google.common.collect.ImmutableList filterEncodersByBitrateMode(java.util.List,java.lang.String,int)>(r30, r5, $i9);

        $z4 = virtualinvoke r31.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z4 == 0 goto label09;

        return null;

     label09:
        $r14 = virtualinvoke r31.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(0);

        r7 = (android.media.MediaCodecInfo) $r14;

        $r15 = staticinvoke <androidx.media3.transformer.EncoderUtil: android.util.Range getSupportedBitrateRange(android.media.MediaCodecInfo,java.lang.String)>(r7, r5);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r17 = virtualinvoke $r15.<android.util.Range: java.lang.Comparable clamp(java.lang.Comparable)>($r16);

        $r18 = (java.lang.Integer) $r17;

        i1 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        r8 = virtualinvoke r1.<androidx.media3.transformer.VideoEncoderSettings: androidx.media3.transformer.VideoEncoderSettings$Builder buildUpon()>();

        $r19 = virtualinvoke r0.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $r20 = virtualinvoke $r19.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>(r5);

        $i10 = virtualinvoke r6.<android.util.Size: int getWidth()>();

        $r21 = virtualinvoke $r20.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>($i10);

        $i11 = virtualinvoke r6.<android.util.Size: int getHeight()>();

        r9 = virtualinvoke $r21.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>($i11);

        $z5 = r1.<androidx.media3.transformer.VideoEncoderSettings: boolean enableHighQualityTargeting>;

        if $z5 != 0 goto label10;

        virtualinvoke r8.<androidx.media3.transformer.VideoEncoderSettings$Builder: androidx.media3.transformer.VideoEncoderSettings$Builder setBitrate(int)>(i1);

        virtualinvoke r9.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setAverageBitrate(int)>(i1);

     label10:
        $i12 = r1.<androidx.media3.transformer.VideoEncoderSettings: int profile>;

        if $i12 == -1 goto label11;

        $i13 = r1.<androidx.media3.transformer.VideoEncoderSettings: int level>;

        if $i13 == -1 goto label11;

        $i15 = r1.<androidx.media3.transformer.VideoEncoderSettings: int level>;

        $i14 = r1.<androidx.media3.transformer.VideoEncoderSettings: int profile>;

        $i16 = staticinvoke <androidx.media3.transformer.EncoderUtil: int findHighestSupportedEncodingLevel(android.media.MediaCodecInfo,java.lang.String,int)>(r7, r5, $i14);

        if $i15 <= $i16 goto label12;

     label11:
        virtualinvoke r8.<androidx.media3.transformer.VideoEncoderSettings$Builder: androidx.media3.transformer.VideoEncoderSettings$Builder setEncodingProfileLevel(int,int)>(-1, -1);

     label12:
        $r32 = new androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult;

        $r33 = virtualinvoke r9.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        $r34 = virtualinvoke r8.<androidx.media3.transformer.VideoEncoderSettings$Builder: androidx.media3.transformer.VideoEncoderSettings build()>();

        specialinvoke $r32.<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: void <init>(android.media.MediaCodecInfo,androidx.media3.common.Format,androidx.media3.transformer.VideoEncoderSettings)>(r7, $r33, $r34);

        return $r32;
    }

    private static com.google.common.collect.ImmutableList filterEncodersByResolution(java.util.List, java.lang.String, int, int)
    {
        java.util.List r0;
        java.lang.String r1;
        int i0, i1;
        androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost $r2;
        com.google.common.collect.ImmutableList $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = dynamicinvoke "getParameterSupportGap" <androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost (java.lang.String,int,int)>(r1, i0, i1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: int __METHODTYPE__(android.media.MediaCodecInfo), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.transformer.DefaultEncoderFactory: int lambda$filterEncodersByResolution$0(java.lang.String,int,int,android.media.MediaCodecInfo)>, methodtype: int __METHODTYPE__(android.media.MediaCodecInfo));

        $r3 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: com.google.common.collect.ImmutableList filterEncoders(java.util.List,androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost,java.lang.String)>(r0, $r2, "resolution");

        return $r3;
    }

    private static com.google.common.collect.ImmutableList filterEncodersByBitrate(java.util.List, java.lang.String, int)
    {
        java.util.List r0;
        java.lang.String r1;
        int i0;
        androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost $r2;
        com.google.common.collect.ImmutableList $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = dynamicinvoke "getParameterSupportGap" <androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost (java.lang.String,int)>(r1, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: int __METHODTYPE__(android.media.MediaCodecInfo), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.transformer.DefaultEncoderFactory: int lambda$filterEncodersByBitrate$1(java.lang.String,int,android.media.MediaCodecInfo)>, methodtype: int __METHODTYPE__(android.media.MediaCodecInfo));

        $r3 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: com.google.common.collect.ImmutableList filterEncoders(java.util.List,androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost,java.lang.String)>(r0, $r2, "bitrate");

        return $r3;
    }

    private static com.google.common.collect.ImmutableList filterEncodersByBitrateMode(java.util.List, java.lang.String, int)
    {
        java.util.List r0;
        java.lang.String r1;
        int i0;
        androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost $r2;
        com.google.common.collect.ImmutableList $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = dynamicinvoke "getParameterSupportGap" <androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost (java.lang.String,int)>(r1, i0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: int __METHODTYPE__(android.media.MediaCodecInfo), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.transformer.DefaultEncoderFactory: int lambda$filterEncodersByBitrateMode$2(java.lang.String,int,android.media.MediaCodecInfo)>, methodtype: int __METHODTYPE__(android.media.MediaCodecInfo));

        $r3 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: com.google.common.collect.ImmutableList filterEncoders(java.util.List,androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost,java.lang.String)>(r0, $r2, "bitrate mode");

        return $r3;
    }

    private static void adjustMediaFormatForEncoderPerformanceSettings(android.media.MediaFormat)
    {
        android.media.MediaFormat r0;
        int $i0, $i1;

        r0 := @parameter0: android.media.MediaFormat;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 >= 25 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("priority", 1);

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 != 26 goto label2;

        virtualinvoke r0.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("operating-rate", 30);

        goto label3;

     label2:
        virtualinvoke r0.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("operating-rate", 2147483647);

     label3:
        return;
    }

    private static void adjustMediaFormatForH264EncoderSettings(androidx.media3.common.ColorInfo, android.media.MediaCodecInfo, android.media.MediaFormat)
    {
        androidx.media3.common.ColorInfo r0;
        android.media.MediaCodecInfo r1;
        android.media.MediaFormat r2;
        java.lang.String r3;
        com.google.common.collect.ImmutableList r4;
        int $i0, $i1, $i2, i3, i4, i5, i7, i9;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        byte b6, b8;

        r0 := @parameter0: androidx.media3.common.ColorInfo;

        r1 := @parameter1: android.media.MediaCodecInfo;

        r2 := @parameter2: android.media.MediaFormat;

        r3 = "video/avc";

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 29 goto label3;

        i3 = 8;

        if r0 == null goto label1;

        i4 = r0.<androidx.media3.common.ColorInfo: int colorTransfer>;

        r4 = staticinvoke <androidx.media3.transformer.EncoderUtil: com.google.common.collect.ImmutableList getCodecProfilesForHdrFormat(java.lang.String,int)>(r3, i4);

        $z0 = virtualinvoke r4.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r4.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(0);

        $r6 = (java.lang.Integer) $r5;

        i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label1:
        i5 = staticinvoke <androidx.media3.transformer.EncoderUtil: int findHighestSupportedEncodingLevel(android.media.MediaCodecInfo,java.lang.String,int)>(r1, r3, i3);

        if i5 == -1 goto label2;

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("profile", i3);

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("level", i5);

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("max-bframes", 1);

     label2:
        goto label8;

     label3:
        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 26 goto label5;

        b6 = 8;

        i7 = staticinvoke <androidx.media3.transformer.EncoderUtil: int findHighestSupportedEncodingLevel(android.media.MediaCodecInfo,java.lang.String,int)>(r1, r3, b6);

        if i7 == -1 goto label4;

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("profile", b6);

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("level", i7);

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("latency", 1);

     label4:
        goto label8;

     label5:
        $i2 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i2 < 24 goto label8;

        b8 = 1;

        i9 = staticinvoke <androidx.media3.transformer.EncoderUtil: int findHighestSupportedEncodingLevel(android.media.MediaCodecInfo,java.lang.String,int)>(r1, r3, b8);

        if i9 == -1 goto label6;

        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("profile", b8);

        virtualinvoke r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("level", i9);

     label8:
        return;
    }

    private static com.google.common.collect.ImmutableList filterEncoders(java.util.List, androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost, java.lang.String)
    {
        java.util.List r0;
        androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost r1;
        java.lang.String r2, $r9, $r13, $r14;
        java.util.ArrayList r3, $r5, $r6, r18;
        android.media.MediaCodecInfo r4, r17;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        java.lang.StringBuilder $r7, $r8, r19;
        com.google.common.collect.ImmutableList $r10;
        java.lang.Object $r11, $r16;
        java.lang.Object[] $r12;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost;

        r2 := @parameter2: java.lang.String;

        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r3 = $r5;

        i3 = 2147483647;

        i4 = 0;

     label1:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i4 >= $i1 goto label5;

        $r16 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i4);

        r17 = (android.media.MediaCodecInfo) $r16;

        i5 = interfaceinvoke r1.<androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost: int getParameterSupportGap(android.media.MediaCodecInfo)>(r17);

        if i5 != 2147483647 goto label2;

        goto label4;

     label2:
        if i5 >= i3 goto label3;

        i3 = i5;

        interfaceinvoke r3.<java.util.List: void clear()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r17);

        goto label4;

     label3:
        if i5 != i3 goto label4;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r17);

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        r18 = $r6;

        interfaceinvoke r18.<java.util.List: boolean removeAll(java.util.Collection)>(r3);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Encoders removed for ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r19 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n");

        i6 = 0;

     label6:
        $i2 = interfaceinvoke r18.<java.util.List: int size()>();

        if i6 >= $i2 goto label7;

        $r11 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(i6);

        r4 = (android.media.MediaCodecInfo) $r11;

        $r12 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r4.<android.media.MediaCodecInfo: java.lang.String getName()>();

        $r12[0] = $r13;

        $r14 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("  %s\n", $r12);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        i6 = i6 + 1;

        goto label6;

     label7:
        $r9 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void d(java.lang.String,java.lang.String)>("DefaultEncoderFactory", $r9);

        $r10 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.util.Collection)>(r3);

        return $r10;
    }

    private static java.lang.String findFallbackMimeType(androidx.media3.transformer.EncoderSelector, java.lang.String, java.util.List)
    {
        androidx.media3.transformer.EncoderSelector r0;
        java.lang.String r1, r3;
        java.util.List r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0, i1;
        java.lang.Object $r4;

        r0 := @parameter0: androidx.media3.transformer.EncoderSelector;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        $z0 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: boolean mimeTypeIsSupported(androidx.media3.transformer.EncoderSelector,java.lang.String,java.util.List)>(r0, r1, r2);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: boolean mimeTypeIsSupported(androidx.media3.transformer.EncoderSelector,java.lang.String,java.util.List)>(r0, "video/hevc", r2);

        if $z1 == 0 goto label2;

        return "video/hevc";

     label2:
        $z2 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: boolean mimeTypeIsSupported(androidx.media3.transformer.EncoderSelector,java.lang.String,java.util.List)>(r0, "video/avc", r2);

        if $z2 == 0 goto label3;

        return "video/avc";

     label3:
        i1 = 0;

     label4:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label6;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (java.lang.String) $r4;

        $z3 = staticinvoke <androidx.media3.transformer.DefaultEncoderFactory: boolean mimeTypeIsSupported(androidx.media3.transformer.EncoderSelector,java.lang.String,java.util.List)>(r0, r3, r2);

        if $z3 == 0 goto label5;

        return r3;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return null;
    }

    private static boolean mimeTypeIsSupported(androidx.media3.transformer.EncoderSelector, java.lang.String, java.util.List)
    {
        androidx.media3.transformer.EncoderSelector r0;
        java.lang.String r1;
        java.util.List r2;
        com.google.common.collect.ImmutableList $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: androidx.media3.transformer.EncoderSelector;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        $r3 = interfaceinvoke r0.<androidx.media3.transformer.EncoderSelector: com.google.common.collect.ImmutableList selectEncoderInfos(java.lang.String)>(r1);

        $z0 = virtualinvoke $r3.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static int getSuggestedBitrate(int, int, float)
    {
        int i0, i1, $i2, $i3;
        float f0, $f1, $f2;
        double $d0, $d1, $d2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        $i2 = i0 * i1;

        $f1 = (float) $i2;

        $f2 = $f1 * f0;

        $d0 = (double) $f2;

        $d1 = $d0 * 0.07;

        $d2 = $d1 * 2.0;

        $i3 = (int) $d2;

        return $i3;
    }

    private static androidx.media3.transformer.TransformationException createTransformationException(androidx.media3.common.Format)
    {
        androidx.media3.common.Format r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;
        boolean $z0;
        androidx.media3.transformer.TransformationException $r3;

        r0 := @parameter0: androidx.media3.common.Format;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The requested encoding format is not supported.");

        $r2 = r0.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = staticinvoke <androidx.media3.common.MimeTypes: boolean isVideo(java.lang.String)>($r2);

        $r3 = staticinvoke <androidx.media3.transformer.TransformationException: androidx.media3.transformer.TransformationException createForCodec(java.lang.Throwable,boolean,boolean,androidx.media3.common.Format,java.lang.String,int)>($r1, $z0, 0, r0, null, 4003);

        return $r3;
    }

    private static int lambda$filterEncodersByBitrateMode$2(java.lang.String, int, android.media.MediaCodecInfo)
    {
        java.lang.String r0;
        int i0, $i1;
        android.media.MediaCodecInfo r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.MediaCodecInfo;

        $z0 = staticinvoke <androidx.media3.transformer.EncoderUtil: boolean isBitrateModeSupported(android.media.MediaCodecInfo,java.lang.String,int)>(r1, r0, i0);

        if $z0 == 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = 2147483647;

     label2:
        return $i1;
    }

    private static int lambda$filterEncodersByBitrate$1(java.lang.String, int, android.media.MediaCodecInfo)
    {
        java.lang.String r0;
        int i0, i1, $i2, $i3;
        android.media.MediaCodecInfo r1;
        android.util.Range $r2;
        java.lang.Integer $r3, $r5;
        java.lang.Comparable $r4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.MediaCodecInfo;

        $r2 = staticinvoke <androidx.media3.transformer.EncoderUtil: android.util.Range getSupportedBitrateRange(android.media.MediaCodecInfo,java.lang.String)>(r1, r0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.Range: java.lang.Comparable clamp(java.lang.Comparable)>($r3);

        $r5 = (java.lang.Integer) $r4;

        i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i2 = i1 - i0;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        return $i3;
    }

    private static int lambda$filterEncodersByResolution$0(java.lang.String, int, int, android.media.MediaCodecInfo)
    {
        java.lang.String r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.media.MediaCodecInfo r1;
        android.util.Size r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.media.MediaCodecInfo;

        r2 = staticinvoke <androidx.media3.transformer.EncoderUtil: android.util.Size getSupportedResolution(android.media.MediaCodecInfo,java.lang.String,int,int)>(r1, r0, i0, i1);

        if r2 != null goto label1;

        return 2147483647;

     label1:
        $i2 = i0 * i1;

        $i3 = virtualinvoke r2.<android.util.Size: int getWidth()>();

        $i4 = virtualinvoke r2.<android.util.Size: int getHeight()>();

        $i5 = $i3 * $i4;

        $i6 = $i2 - $i5;

        $i7 = staticinvoke <java.lang.Math: int abs(int)>($i6);

        return $i7;
    }

androidx.media3.transformer.DefaultEncoderFactory$Builder
<androidx.media3.transformer.DefaultEncoderFactory$Builder: android.content.Context context>
<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.EncoderSelector encoderSelector>
<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.VideoEncoderSettings requestedVideoEncoderSettings>
<androidx.media3.transformer.DefaultEncoderFactory$Builder: boolean enableFallback>
    public void <init>(android.content.Context)
    {
        androidx.media3.transformer.DefaultEncoderFactory$Builder r0;
        android.content.Context r1;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory$Builder;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: android.content.Context context> = r1;

        r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: boolean enableFallback> = 1;

        return;
    }

    public androidx.media3.transformer.DefaultEncoderFactory$Builder setVideoEncoderSelector(androidx.media3.transformer.EncoderSelector)
    {
        androidx.media3.transformer.DefaultEncoderFactory$Builder r0;
        androidx.media3.transformer.EncoderSelector r1;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory$Builder;

        r1 := @parameter0: androidx.media3.transformer.EncoderSelector;

        r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.EncoderSelector encoderSelector> = r1;

        return r0;
    }

    public androidx.media3.transformer.DefaultEncoderFactory$Builder setRequestedVideoEncoderSettings(androidx.media3.transformer.VideoEncoderSettings)
    {
        androidx.media3.transformer.DefaultEncoderFactory$Builder r0;
        androidx.media3.transformer.VideoEncoderSettings r1;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory$Builder;

        r1 := @parameter0: androidx.media3.transformer.VideoEncoderSettings;

        r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.VideoEncoderSettings requestedVideoEncoderSettings> = r1;

        return r0;
    }

    public androidx.media3.transformer.DefaultEncoderFactory$Builder setEnableFallback(boolean)
    {
        androidx.media3.transformer.DefaultEncoderFactory$Builder r0;
        boolean z0;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: boolean enableFallback> = z0;

        return r0;
    }

    public androidx.media3.transformer.DefaultEncoderFactory build()
    {
        androidx.media3.transformer.DefaultEncoderFactory$Builder r0;
        androidx.media3.transformer.EncoderSelector $r1, $r5, $r8;
        androidx.media3.transformer.VideoEncoderSettings $r2, $r4, $r7;
        androidx.media3.transformer.DefaultEncoderFactory $r3;
        boolean $z0;
        android.content.Context $r6;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory$Builder;

        $r1 = r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.EncoderSelector encoderSelector>;

        if $r1 != null goto label1;

        $r8 = <androidx.media3.transformer.EncoderSelector: androidx.media3.transformer.EncoderSelector DEFAULT>;

        r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.EncoderSelector encoderSelector> = $r8;

     label1:
        $r2 = r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.VideoEncoderSettings requestedVideoEncoderSettings>;

        if $r2 != null goto label2;

        $r7 = <androidx.media3.transformer.VideoEncoderSettings: androidx.media3.transformer.VideoEncoderSettings DEFAULT>;

        r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.VideoEncoderSettings requestedVideoEncoderSettings> = $r7;

     label2:
        $r3 = new androidx.media3.transformer.DefaultEncoderFactory;

        $r6 = r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: android.content.Context context>;

        $r5 = r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.EncoderSelector encoderSelector>;

        $r4 = r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: androidx.media3.transformer.VideoEncoderSettings requestedVideoEncoderSettings>;

        $z0 = r0.<androidx.media3.transformer.DefaultEncoderFactory$Builder: boolean enableFallback>;

        specialinvoke $r3.<androidx.media3.transformer.DefaultEncoderFactory: void <init>(android.content.Context,androidx.media3.transformer.EncoderSelector,androidx.media3.transformer.VideoEncoderSettings,boolean)>($r6, $r5, $r4, $z0);

        return $r3;
    }

androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost
<androidx.media3.transformer.DefaultEncoderFactory$EncoderFallbackCost: int getParameterSupportGap(android.media.MediaCodecInfo)>
androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult
<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: android.media.MediaCodecInfo encoder>
<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: androidx.media3.common.Format supportedFormat>
<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: androidx.media3.transformer.VideoEncoderSettings supportedEncoderSettings>
    public void <init>(android.media.MediaCodecInfo, androidx.media3.common.Format, androidx.media3.transformer.VideoEncoderSettings)
    {
        androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult r0;
        android.media.MediaCodecInfo r1;
        androidx.media3.common.Format r2;
        androidx.media3.transformer.VideoEncoderSettings r3;

        r0 := @this: androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult;

        r1 := @parameter0: android.media.MediaCodecInfo;

        r2 := @parameter1: androidx.media3.common.Format;

        r3 := @parameter2: androidx.media3.transformer.VideoEncoderSettings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: android.media.MediaCodecInfo encoder> = r1;

        r0.<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: androidx.media3.common.Format supportedFormat> = r2;

        r0.<androidx.media3.transformer.DefaultEncoderFactory$VideoEncoderQueryResult: androidx.media3.transformer.VideoEncoderSettings supportedEncoderSettings> = r3;

        return;
    }

