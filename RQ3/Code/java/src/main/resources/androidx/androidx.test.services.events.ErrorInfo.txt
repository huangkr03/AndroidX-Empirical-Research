androidx.test.services.events.ErrorInfo
<androidx.test.services.events.ErrorInfo: android.os.Parcelable$Creator CREATOR>
<androidx.test.services.events.ErrorInfo: java.lang.String errorMessage>
<androidx.test.services.events.ErrorInfo: java.lang.String errorType>
<androidx.test.services.events.ErrorInfo: java.lang.String stackTrace>
    public int describeContents()
    {
        androidx.test.services.events.ErrorInfo r0;

        r0 := @this: androidx.test.services.events.ErrorInfo;

        return 0;
    }

    public static androidx.test.services.events.ErrorInfo createFromFailure(org.junit.runner.notification.Failure)
    {
        org.junit.runner.notification.Failure r0;
        androidx.test.services.events.ErrorInfo $r1;
        java.lang.String $r2, $r5, $r6;
        java.lang.Throwable $r3;
        java.lang.Class $r4;

        r0 := @parameter0: org.junit.runner.notification.Failure;

        $r1 = new androidx.test.services.events.ErrorInfo;

        $r2 = staticinvoke <androidx.test.services.events.internal.StackTrimmer: java.lang.String getTrimmedMessage(org.junit.runner.notification.Failure)>(r0);

        $r3 = virtualinvoke r0.<org.junit.runner.notification.Failure: java.lang.Throwable getException()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = staticinvoke <androidx.test.services.events.internal.StackTrimmer: java.lang.String getTrimmedStackTrace(org.junit.runner.notification.Failure)>(r0);

        specialinvoke $r1.<androidx.test.services.events.ErrorInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r2, $r5, $r6);

        return $r1;
    }

    static void <clinit>()
    {
        androidx.test.services.events.ErrorInfo$1 $r0;

        $r0 = new androidx.test.services.events.ErrorInfo$1;

        specialinvoke $r0.<androidx.test.services.events.ErrorInfo$1: void <init>()>();

        <androidx.test.services.events.ErrorInfo: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>(android.os.Parcel)
    {
        androidx.test.services.events.ErrorInfo r0;
        android.os.Parcel r1;
        java.lang.String $r3, $r4, $r5, $r7;
        java.lang.Object $r6;

        r0 := @this: androidx.test.services.events.ErrorInfo;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "source cannot be null");

        $r3 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r0.<androidx.test.services.events.ErrorInfo: java.lang.String errorMessage> = $r3;

        $r4 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r0.<androidx.test.services.events.ErrorInfo: java.lang.String errorType> = $r4;

        $r5 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r6 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r5, "stackTrace cannot be null");

        $r7 = (java.lang.String) $r6;

        r0.<androidx.test.services.events.ErrorInfo: java.lang.String stackTrace> = $r7;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        androidx.test.services.events.ErrorInfo r0;
        java.lang.String r1, r2, r3, $r5;
        java.lang.Object $r4;

        r0 := @this: androidx.test.services.events.ErrorInfo;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.services.events.ErrorInfo: java.lang.String errorMessage> = r1;

        r0.<androidx.test.services.events.ErrorInfo: java.lang.String errorType> = r2;

        $r4 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "stackTrace cannot be null");

        $r5 = (java.lang.String) $r4;

        r0.<androidx.test.services.events.ErrorInfo: java.lang.String stackTrace> = $r5;

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.test.services.events.ErrorInfo r0;
        android.os.Parcel r1;
        int i0;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: androidx.test.services.events.ErrorInfo;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<androidx.test.services.events.ErrorInfo: java.lang.String errorMessage>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r2);

        $r3 = r0.<androidx.test.services.events.ErrorInfo: java.lang.String errorType>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        $r4 = r0.<androidx.test.services.events.ErrorInfo: java.lang.String stackTrace>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r4);

        return;
    }

androidx.test.services.events.ErrorInfo$1
    public androidx.test.services.events.ErrorInfo createFromParcel(android.os.Parcel)
    {
        androidx.test.services.events.ErrorInfo$1 r0;
        android.os.Parcel r1;
        androidx.test.services.events.ErrorInfo $r2;

        r0 := @this: androidx.test.services.events.ErrorInfo$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = new androidx.test.services.events.ErrorInfo;

        specialinvoke $r2.<androidx.test.services.events.ErrorInfo: void <init>(android.os.Parcel)>(r1);

        return $r2;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.test.services.events.ErrorInfo$1 r0;
        android.os.Parcel r1;
        androidx.test.services.events.ErrorInfo $r2;

        r0 := @this: androidx.test.services.events.ErrorInfo$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.test.services.events.ErrorInfo$1: androidx.test.services.events.ErrorInfo createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

    void <init>()
    {
        androidx.test.services.events.ErrorInfo$1 r0;

        r0 := @this: androidx.test.services.events.ErrorInfo$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.test.services.events.ErrorInfo[] newArray(int)
    {
        androidx.test.services.events.ErrorInfo$1 r0;
        int i0;
        androidx.test.services.events.ErrorInfo[] $r1;

        r0 := @this: androidx.test.services.events.ErrorInfo$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.test.services.events.ErrorInfo)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.test.services.events.ErrorInfo$1 r0;
        int i0;
        androidx.test.services.events.ErrorInfo[] $r1;

        r0 := @this: androidx.test.services.events.ErrorInfo$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.test.services.events.ErrorInfo$1: androidx.test.services.events.ErrorInfo[] newArray(int)>(i0);

        return $r1;
    }

