androidx.test.runner.screenshot.TakeScreenshotCallable
<androidx.test.runner.screenshot.TakeScreenshotCallable: java.lang.String TAG>
<androidx.test.runner.screenshot.TakeScreenshotCallable: java.lang.ref.WeakReference viewRef>
    public android.graphics.Bitmap call()
    {
        androidx.test.runner.screenshot.TakeScreenshotCallable r0;
        java.lang.Throwable r1, r2, $r13, $r17;
        java.lang.ref.WeakReference $r3, $r6, $r10, $r14, $r18;
        java.lang.Object $r4, $r7, $r11, $r15, $r19;
        android.view.View $r5, $r8, $r12, $r16, $r20;
        android.graphics.Bitmap $r9, r21;

        r0 := @this: androidx.test.runner.screenshot.TakeScreenshotCallable;

        r21 = null;

        $r3 = r0.<androidx.test.runner.screenshot.TakeScreenshotCallable: java.lang.ref.WeakReference viewRef>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r5 = (android.view.View) $r4;

        virtualinvoke $r5.<android.view.View: void setDrawingCacheEnabled(boolean)>(1);

     label1:
        $r6 = r0.<androidx.test.runner.screenshot.TakeScreenshotCallable: java.lang.ref.WeakReference viewRef>;

        $r7 = virtualinvoke $r6.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r8 = (android.view.View) $r7;

        $r9 = virtualinvoke $r8.<android.view.View: android.graphics.Bitmap getDrawingCache()>();

        r21 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>($r9);

     label2:
        $r10 = r0.<androidx.test.runner.screenshot.TakeScreenshotCallable: java.lang.ref.WeakReference viewRef>;

        $r11 = virtualinvoke $r10.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r12 = (android.view.View) $r11;

        virtualinvoke $r12.<android.view.View: void setDrawingCacheEnabled(boolean)>(0);

        goto label6;

     label3:
        $r17 := @caughtexception;

        r1 = $r17;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TakeScreenshotCallable", "Out of memory exception while trying to take a screenshot.", r1);

     label4:
        $r18 = r0.<androidx.test.runner.screenshot.TakeScreenshotCallable: java.lang.ref.WeakReference viewRef>;

        $r19 = virtualinvoke $r18.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r20 = (android.view.View) $r19;

        virtualinvoke $r20.<android.view.View: void setDrawingCacheEnabled(boolean)>(0);

        goto label6;

     label5:
        $r13 := @caughtexception;

        r2 = $r13;

        $r14 = r0.<androidx.test.runner.screenshot.TakeScreenshotCallable: java.lang.ref.WeakReference viewRef>;

        $r15 = virtualinvoke $r14.<java.lang.ref.WeakReference: java.lang.Object get()>();

        $r16 = (android.view.View) $r15;

        virtualinvoke $r16.<android.view.View: void setDrawingCacheEnabled(boolean)>(0);

        throw r2;

     label6:
        return r21;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public volatile java.lang.Object call() throws java.lang.Exception
    {
        androidx.test.runner.screenshot.TakeScreenshotCallable r0;
        android.graphics.Bitmap $r1;

        r0 := @this: androidx.test.runner.screenshot.TakeScreenshotCallable;

        $r1 = virtualinvoke r0.<androidx.test.runner.screenshot.TakeScreenshotCallable: android.graphics.Bitmap call()>();

        return $r1;
    }

    private void <init>(android.view.View)
    {
        androidx.test.runner.screenshot.TakeScreenshotCallable r0;
        android.view.View r1;
        java.lang.ref.WeakReference $r2;

        r0 := @this: androidx.test.runner.screenshot.TakeScreenshotCallable;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        r0.<androidx.test.runner.screenshot.TakeScreenshotCallable: java.lang.ref.WeakReference viewRef> = $r2;

        return;
    }

    void <init>(android.view.View, androidx.test.runner.screenshot.TakeScreenshotCallable-IA)
    {
        androidx.test.runner.screenshot.TakeScreenshotCallable r0;
        android.view.View r1;
        androidx.test.runner.screenshot.TakeScreenshotCallable-IA r2;

        r0 := @this: androidx.test.runner.screenshot.TakeScreenshotCallable;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: androidx.test.runner.screenshot.TakeScreenshotCallable-IA;

        specialinvoke r0.<androidx.test.runner.screenshot.TakeScreenshotCallable: void <init>(android.view.View)>(r1);

        return;
    }

androidx.test.runner.screenshot.TakeScreenshotCallable$Factory
    java.util.concurrent.Callable create(android.view.View)
    {
        androidx.test.runner.screenshot.TakeScreenshotCallable$Factory r0;
        android.view.View r1;
        androidx.test.runner.screenshot.TakeScreenshotCallable $r2;

        r0 := @this: androidx.test.runner.screenshot.TakeScreenshotCallable$Factory;

        r1 := @parameter0: android.view.View;

        $r2 = new androidx.test.runner.screenshot.TakeScreenshotCallable;

        specialinvoke $r2.<androidx.test.runner.screenshot.TakeScreenshotCallable: void <init>(android.view.View,androidx.test.runner.screenshot.TakeScreenshotCallable-IA)>(r1, null);

        return $r2;
    }

    void <init>()
    {
        androidx.test.runner.screenshot.TakeScreenshotCallable$Factory r0;

        r0 := @this: androidx.test.runner.screenshot.TakeScreenshotCallable$Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

