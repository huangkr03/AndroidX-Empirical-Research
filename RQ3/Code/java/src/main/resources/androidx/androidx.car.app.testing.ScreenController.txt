androidx.car.app.testing.ScreenController
<androidx.car.app.testing.ScreenController: androidx.car.app.testing.TestCarContext mTestCarContext>
<androidx.car.app.testing.ScreenController: androidx.car.app.Screen mScreen>
<androidx.car.app.testing.ScreenController: androidx.car.app.testing.TestLifecycleOwner mLifecycleOwner>
    public void <init>(androidx.car.app.Screen)
    {
        androidx.car.app.testing.ScreenController r0;
        androidx.car.app.Screen r1, $r4, $r5;
        androidx.car.app.testing.TestCarContext r2;
        java.lang.Object $r3;
        androidx.car.app.CarContext $r6;
        androidx.car.app.testing.TestLifecycleOwner $r8, r13;
        androidx.lifecycle.LifecycleRegistry $r9;
        java.lang.IllegalArgumentException r12;
        androidx.car.app.testing.ScreenController$ScreenLifecycleObserver r14;
        androidx.lifecycle.LifecycleObserver r15;

        r0 := @this: androidx.car.app.testing.ScreenController;

        r1 := @parameter0: androidx.car.app.Screen;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = (androidx.car.app.Screen) $r3;

        r0.<androidx.car.app.testing.ScreenController: androidx.car.app.Screen mScreen> = $r4;

        $r5 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.Screen mScreen>;

        $r6 = virtualinvoke $r5.<androidx.car.app.Screen: androidx.car.app.CarContext getCarContext()>();

        r2 = (androidx.car.app.testing.TestCarContext) $r6;

        if r2 != null goto label1;

        r12 = new java.lang.IllegalArgumentException;

        specialinvoke r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Screen should be created with TestCarContext for testing");

        throw r12;

     label1:
        r0.<androidx.car.app.testing.ScreenController: androidx.car.app.testing.TestCarContext mTestCarContext> = r2;

        r13 = new androidx.car.app.testing.TestLifecycleOwner;

        specialinvoke r13.<androidx.car.app.testing.TestLifecycleOwner: void <init>()>();

        r0.<androidx.car.app.testing.ScreenController: androidx.car.app.testing.TestLifecycleOwner mLifecycleOwner> = r13;

        $r8 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.testing.TestLifecycleOwner mLifecycleOwner>;

        $r9 = virtualinvoke $r8.<androidx.car.app.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry getRegistry()>();

        r14 = new androidx.car.app.testing.ScreenController$ScreenLifecycleObserver;

        specialinvoke r14.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: void <init>(androidx.car.app.testing.ScreenController)>(r0);

        r15 = (androidx.lifecycle.LifecycleObserver) r14;

        virtualinvoke $r9.<androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)>(r15);

        return;
    }

    public androidx.car.app.Screen getScreen()
    {
        androidx.car.app.testing.ScreenController r0;
        androidx.car.app.Screen $r1;

        r0 := @this: androidx.car.app.testing.ScreenController;

        $r1 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.Screen mScreen>;

        return $r1;
    }

    public void reset()
    {
        androidx.car.app.testing.ScreenController r0;
        androidx.car.app.testing.TestCarContext $r1;
        java.lang.Object $r2;
        androidx.car.app.testing.TestAppManager $r3;
        androidx.car.app.Screen $r4;

        r0 := @this: androidx.car.app.testing.ScreenController;

        $r1 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.testing.TestCarContext mTestCarContext>;

        $r2 = virtualinvoke $r1.<androidx.car.app.testing.TestCarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/testing/TestAppManager;");

        $r3 = (androidx.car.app.testing.TestAppManager) $r2;

        $r4 = virtualinvoke r0.<androidx.car.app.testing.ScreenController: androidx.car.app.Screen getScreen()>();

        virtualinvoke $r3.<androidx.car.app.testing.TestAppManager: void resetTemplatesStoredForScreen(androidx.car.app.Screen)>($r4);

        return;
    }

    public java.util.List getTemplatesReturned()
    {
        androidx.car.app.testing.ScreenController r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        android.util.Pair r3;
        androidx.car.app.testing.TestCarContext $r5;
        java.lang.Object $r6, $r9, $r10, $r12;
        androidx.car.app.testing.TestAppManager $r7;
        java.util.List $r8;
        boolean $z0;
        androidx.car.app.Screen $r11;
        androidx.car.app.model.Template $r13;

        r0 := @this: androidx.car.app.testing.ScreenController;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        $r5 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.testing.TestCarContext mTestCarContext>;

        $r6 = virtualinvoke $r5.<androidx.car.app.testing.TestCarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/testing/TestAppManager;");

        $r7 = (androidx.car.app.testing.TestAppManager) $r6;

        $r8 = virtualinvoke $r7.<androidx.car.app.testing.TestAppManager: java.util.List getTemplatesReturned()>();

        r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.util.Pair) $r9;

        $r10 = r3.<android.util.Pair: java.lang.Object first>;

        $r11 = virtualinvoke r0.<androidx.car.app.testing.ScreenController: androidx.car.app.Screen getScreen()>();

        if $r10 != $r11 goto label2;

        $r12 = r3.<android.util.Pair: java.lang.Object second>;

        $r13 = (androidx.car.app.model.Template) $r12;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r13);

     label2:
        goto label1;

     label3:
        return r1;
    }

    public androidx.car.app.testing.ScreenController moveToState(androidx.lifecycle.Lifecycle$State)
    {
        androidx.car.app.testing.ScreenController r0;
        androidx.lifecycle.Lifecycle$State r1;
        androidx.car.app.testing.TestLifecycleOwner $r2;
        androidx.lifecycle.LifecycleRegistry $r3;

        r0 := @this: androidx.car.app.testing.ScreenController;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$State;

        $r2 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.testing.TestLifecycleOwner mLifecycleOwner>;

        $r3 = virtualinvoke $r2.<androidx.car.app.testing.TestLifecycleOwner: androidx.lifecycle.LifecycleRegistry getRegistry()>();

        virtualinvoke $r3.<androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)>(r1);

        return r0;
    }

    public java.lang.Object getScreenResult()
    {
        androidx.car.app.testing.ScreenController r0;
        androidx.car.app.Screen $r1;
        java.lang.Object $r2;

        r0 := @this: androidx.car.app.testing.ScreenController;

        $r1 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.Screen mScreen>;

        $r2 = virtualinvoke $r1.<androidx.car.app.Screen: java.lang.Object getResultInternal()>();

        return $r2;
    }

    void putScreenOnStackIfNotTop()
    {
        androidx.car.app.testing.ScreenController r0;
        androidx.car.app.testing.TestScreenManager r1;
        androidx.car.app.testing.TestCarContext $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;
        androidx.car.app.Screen $r4, $r5, $r6;

        r0 := @this: androidx.car.app.testing.ScreenController;

        $r2 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.testing.TestCarContext mTestCarContext>;

        $r3 = virtualinvoke $r2.<androidx.car.app.testing.TestCarContext: java.lang.Object getCarService(java.lang.Class)>(class "Landroidx/car/app/testing/TestScreenManager;");

        r1 = (androidx.car.app.testing.TestScreenManager) $r3;

        $z0 = virtualinvoke r1.<androidx.car.app.testing.TestScreenManager: boolean hasScreens()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.Screen mScreen>;

        $r6 = virtualinvoke r1.<androidx.car.app.testing.TestScreenManager: androidx.car.app.Screen getTop()>();

        $z1 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

     label1:
        $r4 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.Screen mScreen>;

        virtualinvoke r1.<androidx.car.app.testing.TestScreenManager: void push(androidx.car.app.Screen)>($r4);

     label2:
        return;
    }

    void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)
    {
        androidx.car.app.testing.ScreenController r0;
        androidx.lifecycle.Lifecycle$Event r1;
        androidx.car.app.Screen $r2;

        r0 := @this: androidx.car.app.testing.ScreenController;

        r1 := @parameter0: androidx.lifecycle.Lifecycle$Event;

        $r2 = r0.<androidx.car.app.testing.ScreenController: androidx.car.app.Screen mScreen>;

        virtualinvoke $r2.<androidx.car.app.Screen: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>(r1);

        return;
    }

androidx.car.app.testing.ScreenController$ScreenLifecycleObserver
<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>
    void <init>(androidx.car.app.testing.ScreenController)
    {
        androidx.car.app.testing.ScreenController$ScreenLifecycleObserver r0;
        androidx.car.app.testing.ScreenController r1;

        r0 := @this: androidx.car.app.testing.ScreenController$ScreenLifecycleObserver;

        r1 := @parameter0: androidx.car.app.testing.ScreenController;

        r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onCreate(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.testing.ScreenController$ScreenLifecycleObserver r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.car.app.testing.ScreenController $r2, $r4;
        androidx.lifecycle.Lifecycle$Event $r3;

        r0 := @this: androidx.car.app.testing.ScreenController$ScreenLifecycleObserver;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r2 = r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>;

        virtualinvoke $r2.<androidx.car.app.testing.ScreenController: void putScreenOnStackIfNotTop()>();

        $r4 = r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>;

        $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE>;

        virtualinvoke $r4.<androidx.car.app.testing.ScreenController: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r3);

        return;
    }

    public void onStart(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.testing.ScreenController$ScreenLifecycleObserver r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.car.app.testing.ScreenController $r2, $r4;
        androidx.lifecycle.Lifecycle$Event $r3;

        r0 := @this: androidx.car.app.testing.ScreenController$ScreenLifecycleObserver;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r2 = r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>;

        virtualinvoke $r2.<androidx.car.app.testing.ScreenController: void putScreenOnStackIfNotTop()>();

        $r4 = r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>;

        $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START>;

        virtualinvoke $r4.<androidx.car.app.testing.ScreenController: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r3);

        return;
    }

    public void onResume(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.testing.ScreenController$ScreenLifecycleObserver r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.car.app.testing.ScreenController $r2, $r4;
        androidx.lifecycle.Lifecycle$Event $r3;

        r0 := @this: androidx.car.app.testing.ScreenController$ScreenLifecycleObserver;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r2 = r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>;

        virtualinvoke $r2.<androidx.car.app.testing.ScreenController: void putScreenOnStackIfNotTop()>();

        $r4 = r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>;

        $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME>;

        virtualinvoke $r4.<androidx.car.app.testing.ScreenController: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r3);

        return;
    }

    public void onPause(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.testing.ScreenController$ScreenLifecycleObserver r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.lifecycle.Lifecycle$Event $r2;
        androidx.car.app.testing.ScreenController $r3;

        r0 := @this: androidx.car.app.testing.ScreenController$ScreenLifecycleObserver;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r3 = r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>;

        $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE>;

        virtualinvoke $r3.<androidx.car.app.testing.ScreenController: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r2);

        return;
    }

    public void onStop(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.testing.ScreenController$ScreenLifecycleObserver r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.lifecycle.Lifecycle$Event $r2;
        androidx.car.app.testing.ScreenController $r3;

        r0 := @this: androidx.car.app.testing.ScreenController$ScreenLifecycleObserver;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r3 = r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>;

        $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP>;

        virtualinvoke $r3.<androidx.car.app.testing.ScreenController: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r2);

        return;
    }

    public void onDestroy(androidx.lifecycle.LifecycleOwner)
    {
        androidx.car.app.testing.ScreenController$ScreenLifecycleObserver r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.lifecycle.Lifecycle$Event $r2;
        androidx.car.app.testing.ScreenController $r3;

        r0 := @this: androidx.car.app.testing.ScreenController$ScreenLifecycleObserver;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r3 = r0.<androidx.car.app.testing.ScreenController$ScreenLifecycleObserver: androidx.car.app.testing.ScreenController this$0>;

        $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY>;

        virtualinvoke $r3.<androidx.car.app.testing.ScreenController: void dispatchLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r2);

        return;
    }

