androidx.media3.test.utils.WebServerDispatcher
<androidx.media3.test.utils.WebServerDispatcher: java.util.regex.Pattern ACCEPT_ENCODING_PATTERN>
<androidx.media3.test.utils.WebServerDispatcher: com.google.common.collect.ImmutableMap resourcesByPath>
    public static java.lang.String getRequestPath(okhttp3.mockwebserver.RecordedRequest)
    {
        okhttp3.mockwebserver.RecordedRequest r0;
        java.lang.String $r1, $r2, $r4;
        java.lang.String[] $r3;

        r0 := @parameter0: okhttp3.mockwebserver.RecordedRequest;

        $r1 = virtualinvoke r0.<okhttp3.mockwebserver.RecordedRequest: java.lang.String getPath()>();

        $r2 = staticinvoke <com.google.common.base.Strings: java.lang.String nullToEmpty(java.lang.String)>($r1);

        $r3 = staticinvoke <androidx.media3.common.util.Util: java.lang.String[] splitAtFirst(java.lang.String,java.lang.String)>($r2, "\\?");

        $r4 = $r3[0];

        return $r4;
    }

    public static androidx.media3.test.utils.WebServerDispatcher forResources(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        androidx.media3.test.utils.WebServerDispatcher $r1;
        com.google.common.base.Function $r2;
        com.google.common.collect.ImmutableMap $r3;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = new androidx.media3.test.utils.WebServerDispatcher;

        $r2 = dynamicinvoke "apply" <com.google.common.base.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_VIRTUAL" <androidx.media3.test.utils.WebServerDispatcher$Resource: java.lang.String getPath()>, methodtype: java.lang.String __METHODTYPE__(androidx.media3.test.utils.WebServerDispatcher$Resource));

        $r3 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.ImmutableMap uniqueIndex(java.lang.Iterable,com.google.common.base.Function)>(r0, $r2);

        specialinvoke $r1.<androidx.media3.test.utils.WebServerDispatcher: void <init>(com.google.common.collect.ImmutableMap)>($r3);

        return $r1;
    }

    private void <init>(com.google.common.collect.ImmutableMap)
    {
        androidx.media3.test.utils.WebServerDispatcher r0;
        com.google.common.collect.ImmutableMap r1;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher;

        r1 := @parameter0: com.google.common.collect.ImmutableMap;

        specialinvoke r0.<okhttp3.mockwebserver.Dispatcher: void <init>()>();

        r0.<androidx.media3.test.utils.WebServerDispatcher: com.google.common.collect.ImmutableMap resourcesByPath> = r1;

        return;
    }

    public okhttp3.mockwebserver.MockResponse dispatch(okhttp3.mockwebserver.RecordedRequest)
    {
        androidx.media3.test.utils.WebServerDispatcher r0;
        okhttp3.mockwebserver.RecordedRequest r1;
        java.lang.String r2, $r20, $r25, $r43, $r54, $r73, $r82, r89, r92, r93;
        okhttp3.mockwebserver.MockResponse r3, $r7, $r21, $r26, $r34, $r50, $r55, $r63, $r78, $r83, $r86, $r88;
        androidx.media3.test.utils.WebServerDispatcher$Resource r4, $r11;
        byte[] r5, $r14, $r45, $r77;
        com.google.common.collect.ImmutableMap r6, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object $r10, $r12, $r27, $r28, $r29, $r30, $r32, $r46, $r48, $r56, $r57, $r59, $r61, $r67, $r75, $r84, $r95, $r96;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i24, i25;
        java.lang.IllegalStateException $r16;
        java.lang.StringBuilder $r17, $r18, $r19, $r22, $r23, $r24, $r35, $r37, $r38, $r39, $r40, $r41, $r42, $r51, $r52, $r53, $r64, $r66, $r68, $r69, $r70, $r71, $r72, $r79, $r80, $r81;
        java.lang.Integer $r31, $r33, $r47, $r49, $r58, $r60, $r62, $r76, $r85;
        com.google.common.collect.ImmutableList $r90, r91;
        byte b23;
        android.util.Pair r94;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher;

        r1 := @parameter0: okhttp3.mockwebserver.RecordedRequest;

        r2 = staticinvoke <androidx.media3.test.utils.WebServerDispatcher: java.lang.String getRequestPath(okhttp3.mockwebserver.RecordedRequest)>(r1);

        $r7 = new okhttp3.mockwebserver.MockResponse;

        specialinvoke $r7.<okhttp3.mockwebserver.MockResponse: void <init>()>();

        r3 = $r7;

        $r8 = r0.<androidx.media3.test.utils.WebServerDispatcher: com.google.common.collect.ImmutableMap resourcesByPath>;

        $z0 = virtualinvoke $r8.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>(r2);

        if $z0 != 0 goto label01;

        $r88 = virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setResponseCode(int)>(404);

        return $r88;

     label01:
        $r9 = r0.<androidx.media3.test.utils.WebServerDispatcher: com.google.common.collect.ImmutableMap resourcesByPath>;

        $r10 = virtualinvoke $r9.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r2);

        $r11 = (androidx.media3.test.utils.WebServerDispatcher$Resource) $r10;

        $r12 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r11);

        r4 = (androidx.media3.test.utils.WebServerDispatcher$Resource) $r12;

        r5 = virtualinvoke r4.<androidx.media3.test.utils.WebServerDispatcher$Resource: byte[] getData()>();

        $z1 = virtualinvoke r4.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean supportsRangeRequests()>();

        if $z1 == 0 goto label02;

        virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setHeader(java.lang.String,java.lang.Object)>("Accept-Ranges", "bytes");

     label02:
        r6 = staticinvoke <androidx.media3.test.utils.WebServerDispatcher: com.google.common.collect.ImmutableMap getAcceptEncodingHeader(okhttp3.mockwebserver.RecordedRequest)>(r1);

        $i0 = virtualinvoke r4.<androidx.media3.test.utils.WebServerDispatcher$Resource: int getGzipSupport()>();

        if $i0 != 3 goto label03;

        if r6 != null goto label03;

        r89 = "gzip";

        goto label06;

     label03:
        $i1 = virtualinvoke r4.<androidx.media3.test.utils.WebServerDispatcher$Resource: int getGzipSupport()>();

        if $i1 != 1 goto label04;

        $r90 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>("identity");

        goto label05;

     label04:
        $r90 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>("gzip", "identity");

     label05:
        r91 = $r90;

        r89 = staticinvoke <androidx.media3.test.utils.WebServerDispatcher: java.lang.String getPreferredContentCoding(com.google.common.collect.ImmutableMap,java.util.List)>(r6, r91);

     label06:
        if r89 != null goto label07;

        $r86 = virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setResponseCode(int)>(406);

        return $r86;

     label07:
        r92 = virtualinvoke r1.<okhttp3.mockwebserver.RecordedRequest: java.lang.String getHeader(java.lang.String)>("Range");

        $z2 = virtualinvoke r4.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean supportsRangeRequests()>();

        if $z2 == 0 goto label08;

        if r92 != null goto label16;

     label08:
        r93 = r89;

        b23 = -1;

        $i2 = virtualinvoke r93.<java.lang.String: int hashCode()>();

        lookupswitch($i2)
        {
            case -135761730: goto label10;
            case 3189082: goto label09;
            default: goto label11;
        };

     label09:
        $z3 = virtualinvoke r93.<java.lang.String: boolean equals(java.lang.Object)>("gzip");

        if $z3 == 0 goto label11;

        b23 = 0;

        goto label11;

     label10:
        $z6 = virtualinvoke r93.<java.lang.String: boolean equals(java.lang.Object)>("identity");

        if $z6 == 0 goto label11;

        b23 = 1;

     label11:
        lookupswitch(b23)
        {
            case 0: goto label12;
            case 1: goto label13;
            default: goto label14;
        };

     label12:
        $r14 = staticinvoke <androidx.media3.common.util.Util: byte[] gzip(byte[])>(r5);

        $z5 = staticinvoke <androidx.media3.test.utils.WebServerDispatcher$Resource: boolean access$200(androidx.media3.test.utils.WebServerDispatcher$Resource)>(r4);

        staticinvoke <androidx.media3.test.utils.WebServerDispatcher: void setResponseBody(okhttp3.mockwebserver.MockResponse,byte[],boolean)>(r3, $r14, $z5);

        virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setHeader(java.lang.String,java.lang.Object)>("Content-Encoding", "gzip");

        goto label15;

     label13:
        $z4 = staticinvoke <androidx.media3.test.utils.WebServerDispatcher$Resource: boolean access$200(androidx.media3.test.utils.WebServerDispatcher$Resource)>(r4);

        staticinvoke <androidx.media3.test.utils.WebServerDispatcher: void setResponseBody(okhttp3.mockwebserver.MockResponse,byte[],boolean)>(r3, r5, $z4);

        virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setHeader(java.lang.String,java.lang.Object)>("Content-Encoding", "identity");

        goto label15;

     label14:
        $r16 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected content coding: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label15:
        return r3;

     label16:
        r94 = staticinvoke <androidx.media3.test.utils.WebServerDispatcher: android.util.Pair getRangeHeader(java.lang.String)>(r92);

        if r94 == null goto label17;

        $r27 = r94.<android.util.Pair: java.lang.Object first>;

        if $r27 == null goto label18;

        $r84 = r94.<android.util.Pair: java.lang.Object first>;

        $r85 = (java.lang.Integer) $r84;

        $i21 = virtualinvoke $r85.<java.lang.Integer: int intValue()>();

        $i22 = lengthof r5;

        if $i21 < $i22 goto label18;

     label17:
        $r21 = virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setResponseCode(int)>(416);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes */");

        $i3 = lengthof r5;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = virtualinvoke $r21.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setHeader(java.lang.String,java.lang.Object)>("Content-Range", $r25);

        return $r26;

     label18:
        $r28 = r94.<android.util.Pair: java.lang.Object first>;

        if $r28 == null goto label19;

        $r56 = r94.<android.util.Pair: java.lang.Object second>;

        if $r56 != null goto label25;

     label19:
        $r29 = r94.<android.util.Pair: java.lang.Object first>;

        if $r29 != null goto label21;

        $z9 = virtualinvoke r4.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean resolvesToUnknownLength()>();

        if $z9 == 0 goto label20;

        $r50 = virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setResponseCode(int)>(416);

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes */");

        $i11 = lengthof r5;

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = virtualinvoke $r50.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setHeader(java.lang.String,java.lang.Object)>("Content-Range", $r54);

        return $r55;

     label20:
        $i8 = lengthof r5;

        $r46 = r94.<android.util.Pair: java.lang.Object second>;

        $r47 = (java.lang.Integer) $r46;

        $r48 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r47);

        $r49 = (java.lang.Integer) $r48;

        $i9 = virtualinvoke $r49.<java.lang.Integer: int intValue()>();

        $i10 = $i8 - $i9;

        i24 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i10);

        goto label22;

     label21:
        $r30 = r94.<android.util.Pair: java.lang.Object first>;

        $r31 = (java.lang.Integer) $r30;

        $r32 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r31);

        $r33 = (java.lang.Integer) $r32;

        i24 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

     label22:
        $r34 = virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setResponseCode(int)>(206);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i24);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i4 = lengthof r5;

        $i5 = $i4 - 1;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $z7 = virtualinvoke r4.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean resolvesToUnknownLength()>();

        if $z7 == 0 goto label23;

        $r95 = "*";

        goto label24;

     label23:
        $i6 = lengthof r5;

        $r95 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

     label24:
        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r95);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setHeader(java.lang.String,java.lang.Object)>("Content-Range", $r43);

        $i7 = lengthof r5;

        $r45 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r5, i24, $i7);

        $z8 = staticinvoke <androidx.media3.test.utils.WebServerDispatcher$Resource: boolean access$200(androidx.media3.test.utils.WebServerDispatcher$Resource)>(r4);

        staticinvoke <androidx.media3.test.utils.WebServerDispatcher: void setResponseBody(okhttp3.mockwebserver.MockResponse,byte[],boolean)>(r3, $r45, $z8);

        return r3;

     label25:
        $r57 = r94.<android.util.Pair: java.lang.Object second>;

        $r58 = (java.lang.Integer) $r57;

        $i12 = virtualinvoke $r58.<java.lang.Integer: int intValue()>();

        $r59 = r94.<android.util.Pair: java.lang.Object first>;

        $r60 = (java.lang.Integer) $r59;

        $i13 = virtualinvoke $r60.<java.lang.Integer: int intValue()>();

        if $i12 >= $i13 goto label26;

        $r78 = virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setResponseCode(int)>(416);

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes */");

        $i20 = lengthof r5;

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        $r83 = virtualinvoke $r78.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setHeader(java.lang.String,java.lang.Object)>("Content-Range", $r82);

        return $r83;

     label26:
        $r61 = r94.<android.util.Pair: java.lang.Object second>;

        $r62 = (java.lang.Integer) $r61;

        $i14 = virtualinvoke $r62.<java.lang.Integer: int intValue()>();

        $i16 = $i14 + 1;

        $i15 = lengthof r5;

        i25 = staticinvoke <java.lang.Math: int min(int,int)>($i16, $i15);

        $r63 = virtualinvoke r3.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setResponseCode(int)>(206);

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bytes ");

        $r67 = r94.<android.util.Pair: java.lang.Object first>;

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i17 = i25 - 1;

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $z10 = virtualinvoke r4.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean resolvesToUnknownLength()>();

        if $z10 == 0 goto label27;

        $r96 = "*";

        goto label28;

     label27:
        $i18 = lengthof r5;

        $r96 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

     label28:
        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r96);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r63.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setHeader(java.lang.String,java.lang.Object)>("Content-Range", $r73);

        $r75 = r94.<android.util.Pair: java.lang.Object first>;

        $r76 = (java.lang.Integer) $r75;

        $i19 = virtualinvoke $r76.<java.lang.Integer: int intValue()>();

        $r77 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r5, $i19, i25);

        staticinvoke <androidx.media3.test.utils.WebServerDispatcher: void setResponseBody(okhttp3.mockwebserver.MockResponse,byte[],boolean)>(r3, $r77, 0);

        return r3;
    }

    private static void setResponseBody(okhttp3.mockwebserver.MockResponse, byte[], boolean)
    {
        okhttp3.mockwebserver.MockResponse r0;
        byte[] r1;
        boolean z0;
        okio.Buffer $r2, $r3, $r5, $r6;

        r0 := @parameter0: okhttp3.mockwebserver.MockResponse;

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r5 = new okio.Buffer;

        specialinvoke $r5.<okio.Buffer: void <init>()>();

        $r6 = virtualinvoke $r5.<okio.Buffer: okio.Buffer write(byte[])>(r1);

        virtualinvoke r0.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setChunkedBody(okio.Buffer,int)>($r6, 2147483647);

        goto label2;

     label1:
        $r2 = new okio.Buffer;

        specialinvoke $r2.<okio.Buffer: void <init>()>();

        $r3 = virtualinvoke $r2.<okio.Buffer: okio.Buffer write(byte[])>(r1);

        virtualinvoke r0.<okhttp3.mockwebserver.MockResponse: okhttp3.mockwebserver.MockResponse setBody(okio.Buffer)>($r3);

     label2:
        return;
    }

    private static com.google.common.collect.ImmutableMap getAcceptEncodingHeader(okhttp3.mockwebserver.RecordedRequest)
    {
        okhttp3.mockwebserver.RecordedRequest r0;
        java.util.List r1;
        java.lang.String r2, r6, r8, r9, $r16;
        java.lang.String[] r3, r5;
        com.google.common.collect.ImmutableMap$Builder r4;
        int i0, i1;
        java.util.regex.Matcher r7;
        okhttp3.Headers $r10;
        java.util.Map $r11;
        java.lang.Object $r12, $r17;
        com.google.common.base.Joiner $r13;
        com.google.common.collect.ImmutableMap $r14;
        java.util.regex.Pattern $r15;
        boolean $z0;
        java.lang.Float $r18;
        float $f0;

        r0 := @parameter0: okhttp3.mockwebserver.RecordedRequest;

        $r10 = virtualinvoke r0.<okhttp3.mockwebserver.RecordedRequest: okhttp3.Headers getHeaders()>();

        $r11 = virtualinvoke $r10.<okhttp3.Headers: java.util.Map toMultimap()>();

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>("Accept-Encoding");

        r1 = (java.util.List) $r12;

        if r1 != null goto label1;

        return null;

     label1:
        $r13 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>(",");

        r2 = virtualinvoke $r13.<com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>(r1);

        r3 = staticinvoke <androidx.media3.common.util.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r2, ",");

        r4 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        r5 = r3;

        i0 = lengthof r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label7;

        r6 = r5[i1];

        $r15 = <androidx.media3.test.utils.WebServerDispatcher: java.util.regex.Pattern ACCEPT_ENCODING_PATTERN>;

        r7 = virtualinvoke $r15.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r6);

        $z0 = virtualinvoke r7.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label3;

        goto label6;

     label3:
        $r16 = virtualinvoke r7.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r17 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r16);

        r8 = (java.lang.String) $r17;

        r9 = virtualinvoke r7.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        if r9 != null goto label4;

        $f0 = -1.0F;

        goto label5;

     label4:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r9);

     label5:
        $r18 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke r4.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(r8, $r18);

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        $r14 = virtualinvoke r4.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

        return $r14;
    }

    private static java.lang.String getPreferredContentCoding(com.google.common.collect.ImmutableMap, java.util.List)
    {
        java.util.List r0;
        float f0, f1, f2;
        java.util.Iterator r1;
        java.lang.String r2, r15;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r3, $r5, $r13;
        java.lang.Float $r4, $r6, $r9, $r12, $r14;
        byte $b0, $b1, $b2, $b3;
        com.google.common.collect.ImmutableMap$Builder $r7, $r8, $r10;
        com.google.common.collect.ImmutableMap r11;

        r11 := @parameter0: com.google.common.collect.ImmutableMap;

        r0 := @parameter1: java.util.List;

        if r11 != null goto label1;

        return "identity";

     label1:
        $z0 = virtualinvoke r11.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("identity");

        if $z0 != 0 goto label2;

        $z2 = virtualinvoke r11.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("*");

        if $z2 != 0 goto label2;

        $r7 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();

        $r8 = virtualinvoke $r7.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder putAll(java.util.Map)>(r11);

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(-1.0F);

        $r10 = virtualinvoke $r8.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("identity", $r9);

        r11 = virtualinvoke $r10.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();

     label2:
        $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r13 = virtualinvoke r11.<com.google.common.collect.ImmutableMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>("*", $r12);

        $r14 = (java.lang.Float) $r13;

        f0 = virtualinvoke $r14.<java.lang.Float: float floatValue()>();

        r15 = null;

        f2 = -2.14748365E9F;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label6;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r3;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r5 = virtualinvoke r11.<com.google.common.collect.ImmutableMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(r2, $r4);

        $r6 = (java.lang.Float) $r5;

        f1 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        $z1 = virtualinvoke r11.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>(r2);

        if $z1 != 0 goto label4;

        $b1 = f0 cmpl 0.0F;

        if $b1 == 0 goto label4;

        $b2 = f0 cmpl f2;

        if $b2 <= 0 goto label4;

        r15 = r2;

        f2 = f0;

        goto label5;

     label4:
        $b3 = f1 cmpl 0.0F;

        if $b3 == 0 goto label5;

        $b0 = f1 cmpl f2;

        if $b0 <= 0 goto label5;

        r15 = r2;

        f2 = f1;

     label5:
        goto label3;

     label6:
        return r15;
    }

    private static android.util.Pair getRangeHeader(java.lang.String)
    {
        java.lang.String r0, r3, r4, $r6, $r8;
        java.util.regex.Pattern r1;
        java.util.regex.Matcher r2;
        android.util.Pair r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r7, $r9, $r10, $r11, $r13, $r17;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r12, $r14, $r15, $r16;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("bytes=(\\d*)-(\\d*)");

        r2 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(",");

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        $r6 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r7 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        r3 = (java.lang.String) $r7;

        $r8 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r9 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r8);

        r4 = (java.lang.String) $r9;

        $z2 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        $r15 = null;

        goto label4;

     label3:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label4:
        $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z3 == 0 goto label5;

        $r16 = null;

        goto label6;

     label5:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label6:
        r5 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = r5.<android.util.Pair: java.lang.Object first>;

        if $r17 == null goto label7;

        $r10 = r5.<android.util.Pair: java.lang.Object second>;

        if $r10 == null goto label7;

        $r11 = r5.<android.util.Pair: java.lang.Object second>;

        $r12 = (java.lang.Integer) $r11;

        $i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = r5.<android.util.Pair: java.lang.Object first>;

        $r14 = (java.lang.Integer) $r13;

        $i3 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        if $i2 >= $i3 goto label7;

        return null;

     label7:
        return r5;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\W*(\\w+|\\*)(?:;q=(\\d+\\.?\\d*))?\\W*");

        <androidx.media3.test.utils.WebServerDispatcher: java.util.regex.Pattern ACCEPT_ENCODING_PATTERN> = $r0;

        return;
    }

androidx.media3.test.utils.WebServerDispatcher$1
androidx.media3.test.utils.WebServerDispatcher$Resource$Builder
<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: java.lang.String path>
<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: byte[] data>
<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean supportsRangeRequests>
<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean resolvesToUnknownLength>
<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: int gzipSupport>
    public void <init>()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder r0;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: int gzipSupport> = 1;

        return;
    }

    private void <init>(androidx.media3.test.utils.WebServerDispatcher$Resource)
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder r0;
        androidx.media3.test.utils.WebServerDispatcher$Resource r1;
        java.lang.String $r2;
        byte[] $r3;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        r1 := @parameter0: androidx.media3.test.utils.WebServerDispatcher$Resource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<androidx.media3.test.utils.WebServerDispatcher$Resource: java.lang.String getPath()>();

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: java.lang.String path> = $r2;

        $r3 = virtualinvoke r1.<androidx.media3.test.utils.WebServerDispatcher$Resource: byte[] getData()>();

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: byte[] data> = $r3;

        $z0 = virtualinvoke r1.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean supportsRangeRequests()>();

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean supportsRangeRequests> = $z0;

        $z1 = virtualinvoke r1.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean resolvesToUnknownLength()>();

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean resolvesToUnknownLength> = $z1;

        $i0 = virtualinvoke r1.<androidx.media3.test.utils.WebServerDispatcher$Resource: int getGzipSupport()>();

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: int gzipSupport> = $i0;

        return;
    }

    public androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setPath(java.lang.String)
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder r0;
        java.lang.String r1, $r6;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        $r6 = r1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: java.lang.String path> = $r6;

        return r0;
    }

    public androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setData(byte[])
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder r0;
        byte[] r1;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        r1 := @parameter0: byte[];

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: byte[] data> = r1;

        return r0;
    }

    public androidx.media3.test.utils.WebServerDispatcher$Resource$Builder supportsRangeRequests(boolean)
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder r0;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean supportsRangeRequests> = z0;

        return r0;
    }

    public androidx.media3.test.utils.WebServerDispatcher$Resource$Builder resolvesToUnknownLength(boolean)
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder r0;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean resolvesToUnknownLength> = z0;

        return r0;
    }

    public androidx.media3.test.utils.WebServerDispatcher$Resource$Builder setGzipSupport(int)
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder r0;
        int i0;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        i0 := @parameter0: int;

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: int gzipSupport> = i0;

        return r0;
    }

    public androidx.media3.test.utils.WebServerDispatcher$Resource build()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder r0;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        androidx.media3.test.utils.WebServerDispatcher$Resource $r1;
        java.lang.String $r2, $r4;
        java.lang.Object $r3, $r6;
        byte[] $r5, $r7;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        $i0 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: int gzipSupport>;

        if $i0 == 1 goto label5;

        $z0 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean supportsRangeRequests>;

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z2, "Can\'t enable compression & range requests.");

        $z1 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean resolvesToUnknownLength>;

        if $z1 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z3, "Can\'t enable compression if length isn\'t known.");

     label5:
        $r1 = new androidx.media3.test.utils.WebServerDispatcher$Resource;

        $r2 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: java.lang.String path>;

        $r3 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        $r5 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: byte[] data>;

        $r6 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        $r7 = (byte[]) $r6;

        $z4 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean supportsRangeRequests>;

        $z5 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: boolean resolvesToUnknownLength>;

        $i1 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: int gzipSupport>;

        specialinvoke $r1.<androidx.media3.test.utils.WebServerDispatcher$Resource: void <init>(java.lang.String,byte[],boolean,boolean,int,androidx.media3.test.utils.WebServerDispatcher$1)>($r4, $r7, $z4, $z5, $i1, null);

        return $r1;
    }

    void <init>(androidx.media3.test.utils.WebServerDispatcher$Resource, androidx.media3.test.utils.WebServerDispatcher$1)
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder r0;
        androidx.media3.test.utils.WebServerDispatcher$Resource r1;
        androidx.media3.test.utils.WebServerDispatcher$1 r2;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        r1 := @parameter0: androidx.media3.test.utils.WebServerDispatcher$Resource;

        r2 := @parameter1: androidx.media3.test.utils.WebServerDispatcher$1;

        specialinvoke r0.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: void <init>(androidx.media3.test.utils.WebServerDispatcher$Resource)>(r1);

        return;
    }

androidx.media3.test.utils.WebServerDispatcher$Resource
<androidx.media3.test.utils.WebServerDispatcher$Resource: int GZIP_SUPPORT_DISABLED>
<androidx.media3.test.utils.WebServerDispatcher$Resource: int GZIP_SUPPORT_ENABLED>
<androidx.media3.test.utils.WebServerDispatcher$Resource: int GZIP_SUPPORT_FORCED>
<androidx.media3.test.utils.WebServerDispatcher$Resource: java.lang.String path>
<androidx.media3.test.utils.WebServerDispatcher$Resource: byte[] data>
<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean supportsRangeRequests>
<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean resolvesToUnknownLength>
<androidx.media3.test.utils.WebServerDispatcher$Resource: int gzipSupport>
    private void <init>(java.lang.String, byte[], boolean, boolean, int)
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource r0;
        java.lang.String r1;
        byte[] r2;
        boolean z0, z1;
        int i0;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: java.lang.String path> = r1;

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: byte[] data> = r2;

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean supportsRangeRequests> = z0;

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean resolvesToUnknownLength> = z1;

        r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: int gzipSupport> = i0;

        return;
    }

    public java.lang.String getPath()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource r0;
        java.lang.String $r1;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource;

        $r1 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: java.lang.String path>;

        return $r1;
    }

    public byte[] getData()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource;

        $r1 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: byte[] data>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public boolean supportsRangeRequests()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource r0;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource;

        $z0 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean supportsRangeRequests>;

        return $z0;
    }

    public boolean resolvesToUnknownLength()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource r0;
        boolean $z0;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource;

        $z0 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean resolvesToUnknownLength>;

        return $z0;
    }

    public int getGzipSupport()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource r0;
        int $i0;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource;

        $i0 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: int gzipSupport>;

        return $i0;
    }

    public androidx.media3.test.utils.WebServerDispatcher$Resource$Builder buildUpon()
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource r0;
        androidx.media3.test.utils.WebServerDispatcher$Resource$Builder $r1;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource;

        $r1 = new androidx.media3.test.utils.WebServerDispatcher$Resource$Builder;

        specialinvoke $r1.<androidx.media3.test.utils.WebServerDispatcher$Resource$Builder: void <init>(androidx.media3.test.utils.WebServerDispatcher$Resource,androidx.media3.test.utils.WebServerDispatcher$1)>(r0, null);

        return $r1;
    }

    void <init>(java.lang.String, byte[], boolean, boolean, int, androidx.media3.test.utils.WebServerDispatcher$1)
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource r0;
        java.lang.String r1;
        byte[] r2;
        boolean z0, z1;
        int i0;
        androidx.media3.test.utils.WebServerDispatcher$1 r3;

        r0 := @this: androidx.media3.test.utils.WebServerDispatcher$Resource;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        i0 := @parameter4: int;

        r3 := @parameter5: androidx.media3.test.utils.WebServerDispatcher$1;

        specialinvoke r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: void <init>(java.lang.String,byte[],boolean,boolean,int)>(r1, r2, z0, z1, i0);

        return;
    }

    static boolean access$200(androidx.media3.test.utils.WebServerDispatcher$Resource)
    {
        androidx.media3.test.utils.WebServerDispatcher$Resource r0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.test.utils.WebServerDispatcher$Resource;

        $z0 = r0.<androidx.media3.test.utils.WebServerDispatcher$Resource: boolean resolvesToUnknownLength>;

        return $z0;
    }

