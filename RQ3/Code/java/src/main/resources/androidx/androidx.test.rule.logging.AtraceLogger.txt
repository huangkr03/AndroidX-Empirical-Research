androidx.test.rule.logging.AtraceLogger
<androidx.test.rule.logging.AtraceLogger: java.lang.String ATRACE_START>
<androidx.test.rule.logging.AtraceLogger: java.lang.String ATRACE_DUMP>
<androidx.test.rule.logging.AtraceLogger: java.lang.String ATRACE_STOP>
<androidx.test.rule.logging.AtraceLogger: java.lang.String ATRACEHELPER_TAG>
<androidx.test.rule.logging.AtraceLogger: java.lang.String CATEGORY_SEPARATOR>
<androidx.test.rule.logging.AtraceLogger: int BUFFER_SIZE>
<androidx.test.rule.logging.AtraceLogger: androidx.test.rule.logging.AtraceLogger loggerInstance>
<androidx.test.rule.logging.AtraceLogger: android.app.UiAutomation uiAutomation>
<androidx.test.rule.logging.AtraceLogger: java.lang.String traceFileName>
<androidx.test.rule.logging.AtraceLogger: java.util.List atraceDataList>
<androidx.test.rule.logging.AtraceLogger: java.lang.Thread dumpThread>
<androidx.test.rule.logging.AtraceLogger: java.io.File destAtraceDirectory>
<androidx.test.rule.logging.AtraceLogger: boolean atraceRunning>
<androidx.test.rule.logging.AtraceLogger: java.io.IOException dumpIOException>
    static volatile android.app.UiAutomation '-$$Nest$fgetuiAutomation'(androidx.test.rule.logging.AtraceLogger)
    {
        androidx.test.rule.logging.AtraceLogger r0;
        android.app.UiAutomation $r1;

        r0 := @parameter0: androidx.test.rule.logging.AtraceLogger;

        $r1 = r0.<androidx.test.rule.logging.AtraceLogger: android.app.UiAutomation uiAutomation>;

        return $r1;
    }

    public static androidx.test.rule.logging.AtraceLogger getAtraceLoggerInstance(android.app.Instrumentation)
    {
        android.app.Instrumentation r0;
        java.lang.Class r1;
        java.lang.Throwable r2, $r8;
        int $i0;
        androidx.test.rule.logging.AtraceLogger $r3, $r4, $r5, $r6;
        java.lang.UnsupportedOperationException $r7;

        r0 := @parameter0: android.app.Instrumentation;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 21 goto label1;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("AtraceLogger is only supported on APIs >= 21");

        throw $r7;

     label1:
        $r3 = <androidx.test.rule.logging.AtraceLogger: androidx.test.rule.logging.AtraceLogger loggerInstance>;

        if $r3 != null goto label7;

        r1 = class "Landroidx/test/rule/logging/AtraceLogger;";

        entermonitor class "Landroidx/test/rule/logging/AtraceLogger;";

     label2:
        $r5 = <androidx.test.rule.logging.AtraceLogger: androidx.test.rule.logging.AtraceLogger loggerInstance>;

        if $r5 != null goto label3;

        $r6 = new androidx.test.rule.logging.AtraceLogger;

        specialinvoke $r6.<androidx.test.rule.logging.AtraceLogger: void <init>(android.app.Instrumentation)>(r0);

        <androidx.test.rule.logging.AtraceLogger: androidx.test.rule.logging.AtraceLogger loggerInstance> = $r6;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        $r4 = <androidx.test.rule.logging.AtraceLogger: androidx.test.rule.logging.AtraceLogger loggerInstance>;

        return $r4;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static volatile java.util.List '-$$Nest$fgetatraceDataList'(androidx.test.rule.logging.AtraceLogger)
    {
        androidx.test.rule.logging.AtraceLogger r0;
        java.util.List $r1;

        r0 := @parameter0: androidx.test.rule.logging.AtraceLogger;

        $r1 = r0.<androidx.test.rule.logging.AtraceLogger: java.util.List atraceDataList>;

        return $r1;
    }

    static volatile void '-$$Nest$fputdumpIOException'(androidx.test.rule.logging.AtraceLogger, java.io.IOException)
    {
        androidx.test.rule.logging.AtraceLogger r0;
        java.io.IOException r1;

        r0 := @parameter0: androidx.test.rule.logging.AtraceLogger;

        r1 := @parameter1: java.io.IOException;

        r0.<androidx.test.rule.logging.AtraceLogger: java.io.IOException dumpIOException> = r1;

        return;
    }

    static volatile void '-$$Nest$mwriteDataToByteStream'(androidx.test.rule.logging.AtraceLogger, android.os.ParcelFileDescriptor, java.io.ByteArrayOutputStream)
    {
        androidx.test.rule.logging.AtraceLogger r0;
        android.os.ParcelFileDescriptor r1;
        java.io.ByteArrayOutputStream r2;

        r0 := @parameter0: androidx.test.rule.logging.AtraceLogger;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        r2 := @parameter2: java.io.ByteArrayOutputStream;

        specialinvoke r0.<androidx.test.rule.logging.AtraceLogger: void writeDataToByteStream(android.os.ParcelFileDescriptor,java.io.ByteArrayOutputStream)>(r1, r2);

        return;
    }

    private void <init>(android.app.Instrumentation)
    {
        androidx.test.rule.logging.AtraceLogger r0;
        android.app.Instrumentation r1;
        android.app.UiAutomation $r2;

        r0 := @this: androidx.test.rule.logging.AtraceLogger;

        r1 := @parameter0: android.app.Instrumentation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.rule.logging.AtraceLogger: boolean atraceRunning> = 0;

        $r2 = virtualinvoke r1.<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>();

        r0.<androidx.test.rule.logging.AtraceLogger: android.app.UiAutomation uiAutomation> = $r2;

        return;
    }

    public void atraceStart(java.util.Set, int, int, java.io.File, java.lang.String) throws java.io.IOException
    {
        androidx.test.rule.logging.AtraceLogger r0;
        java.util.Set r1;
        int i0, i1;
        java.io.File r2;
        java.lang.String r3, $r8, r20, $r23, r24;
        java.lang.StringBuffer r4, $r5, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.ArrayList $r6;
        androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable $r7, r30;
        java.lang.Thread $r9, $r10;
        java.lang.Object $r11;
        java.io.IOException $r14;
        java.lang.IllegalArgumentException $r15, $r16;
        java.lang.IllegalStateException $r17;
        java.lang.Throwable $r18, r29;
        java.util.Iterator r19;
        java.lang.Object[] $r21;
        java.lang.Integer $r22;
        java.io.ByteArrayOutputStream $r25, r26;
        android.app.UiAutomation $r27;
        android.os.ParcelFileDescriptor $r28;

        r0 := @this: androidx.test.rule.logging.AtraceLogger;

        r1 := @parameter0: java.util.Set;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.io.File;

        r3 := @parameter4: java.lang.String;

        $z0 = r0.<androidx.test.rule.logging.AtraceLogger: boolean atraceRunning>;

        if $z0 == 0 goto label01;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Attempted multiple atrace start");

        throw $r17;

     label01:
        $z1 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty categories. Should contain atleast one category");

        throw $r16;

     label02:
        if r2 != null goto label03;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Destination directory cannot be null");

        throw $r15;

     label03:
        $z2 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label04;

        $z4 = virtualinvoke r2.<java.io.File: boolean mkdirs()>();

        if $z4 != 0 goto label04;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Unable to create the destination directory");

        throw $r14;

     label04:
        r0.<androidx.test.rule.logging.AtraceLogger: java.io.File destAtraceDirectory> = r2;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        r4 = $r5;

        r19 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z5 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r11 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r11;

        $r12 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r20);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        goto label05;

     label06:
        if r3 == null goto label07;

        $z3 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label07;

        r0.<androidx.test.rule.logging.AtraceLogger: java.lang.String traceFileName> = r3;

     label07:
        $r21 = newarray (java.lang.Object)[2];

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r21[0] = $r22;

        $r23 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21[1] = $r23;

        r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("atrace --async_start -b %d -c %s", $r21);

        $r25 = new java.io.ByteArrayOutputStream;

        specialinvoke $r25.<java.io.ByteArrayOutputStream: void <init>()>();

        r26 = $r25;

     label08:
        $r27 = r0.<androidx.test.rule.logging.AtraceLogger: android.app.UiAutomation uiAutomation>;

        $r28 = virtualinvoke $r27.<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>(r24);

        specialinvoke r0.<androidx.test.rule.logging.AtraceLogger: void writeDataToByteStream(android.os.ParcelFileDescriptor,java.io.ByteArrayOutputStream)>($r28, r26);

     label09:
        virtualinvoke r26.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label10:
        $r18 := @caughtexception;

        r29 = $r18;

     label11:
        virtualinvoke r26.<java.io.ByteArrayOutputStream: void close()>();

        throw r29;

     label12:
        r0.<androidx.test.rule.logging.AtraceLogger: boolean atraceRunning> = 1;

        r0.<androidx.test.rule.logging.AtraceLogger: java.io.IOException dumpIOException> = null;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<androidx.test.rule.logging.AtraceLogger: java.util.List atraceDataList> = $r6;

        $r7 = new androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable;

        $r8 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: void <init>(androidx.test.rule.logging.AtraceLogger,java.lang.String,int,int)>(r0, $r8, i0, i1);

        r30 = $r7;

        $r9 = new java.lang.Thread;

        specialinvoke $r9.<java.lang.Thread: void <init>(java.lang.Runnable)>(r30);

        r0.<androidx.test.rule.logging.AtraceLogger: java.lang.Thread dumpThread> = $r9;

        $r10 = r0.<androidx.test.rule.logging.AtraceLogger: java.lang.Thread dumpThread>;

        virtualinvoke $r10.<java.lang.Thread: void start()>();

        virtualinvoke r30.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: void waitForStart()>();

        return;

        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void atraceStop() throws java.io.IOException, java.lang.InterruptedException
    {
        androidx.test.rule.logging.AtraceLogger r0;
        java.util.Iterator r1, r4;
        java.io.ByteArrayOutputStream r2, r5;
        java.lang.Throwable r3, $r13;
        boolean $z0, $z1, $z2;
        java.lang.Thread $r6, $r7;
        java.io.IOException $r8, $r11;
        java.util.List $r9, $r14;
        java.lang.Object $r10, $r15;
        java.lang.IllegalStateException $r12;

        r0 := @this: androidx.test.rule.logging.AtraceLogger;

        $z0 = r0.<androidx.test.rule.logging.AtraceLogger: boolean atraceRunning>;

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ATrace is not running currently. Start atrace beforestopping.");

        throw $r12;

     label1:
        $r6 = r0.<androidx.test.rule.logging.AtraceLogger: java.lang.Thread dumpThread>;

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

        $r7 = r0.<androidx.test.rule.logging.AtraceLogger: java.lang.Thread dumpThread>;

        virtualinvoke $r7.<java.lang.Thread: void join()>();

        $r8 = r0.<androidx.test.rule.logging.AtraceLogger: java.io.IOException dumpIOException>;

        if $r8 == null goto label2;

        $r11 = r0.<androidx.test.rule.logging.AtraceLogger: java.io.IOException dumpIOException>;

        throw $r11;

     label2:
        specialinvoke r0.<androidx.test.rule.logging.AtraceLogger: void atraceWrite()>();

     label3:
        $r9 = r0.<androidx.test.rule.logging.AtraceLogger: java.util.List atraceDataList>;

        r1 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.io.ByteArrayOutputStream) $r10;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void close()>();

        goto label4;

     label5:
        r0.<androidx.test.rule.logging.AtraceLogger: boolean atraceRunning> = 0;

        r0.<androidx.test.rule.logging.AtraceLogger: java.lang.String traceFileName> = null;

        goto label9;

     label6:
        $r13 := @caughtexception;

        r3 = $r13;

        $r14 = r0.<androidx.test.rule.logging.AtraceLogger: java.util.List atraceDataList>;

        r4 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.io.ByteArrayOutputStream) $r15;

        virtualinvoke r5.<java.io.ByteArrayOutputStream: void close()>();

        goto label7;

     label8:
        r0.<androidx.test.rule.logging.AtraceLogger: boolean atraceRunning> = 0;

        r0.<androidx.test.rule.logging.AtraceLogger: java.lang.String traceFileName> = null;

        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label3 with label6;
    }

    private void atraceWrite() throws java.io.IOException
    {
        androidx.test.rule.logging.AtraceLogger r0;
        java.util.Iterator r1;
        java.io.ByteArrayOutputStream r2;
        java.io.FileOutputStream r3, $r13;
        java.lang.Throwable r4, $r21;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String $r7, $r12, $r17, $r20;
        java.io.File $r8, $r10, $r15, $r18, r22;
        java.lang.Object[] $r9, $r16;
        java.lang.Integer $r11, $r19;
        byte[] $r14;
        int i0;

        r0 := @this: androidx.test.rule.logging.AtraceLogger;

        i0 = 0;

        $r5 = r0.<androidx.test.rule.logging.AtraceLogger: java.util.List atraceDataList>;

        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.io.ByteArrayOutputStream) $r6;

        $r7 = r0.<androidx.test.rule.logging.AtraceLogger: java.lang.String traceFileName>;

        if $r7 == null goto label2;

        $r15 = new java.io.File;

        $r18 = r0.<androidx.test.rule.logging.AtraceLogger: java.io.File destAtraceDirectory>;

        $r16 = newarray (java.lang.Object)[2];

        $r17 = r0.<androidx.test.rule.logging.AtraceLogger: java.lang.String traceFileName>;

        $r16[0] = $r17;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r16[1] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s-atrace-%d.txt", $r16);

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, $r20);

        r22 = $r15;

        goto label3;

     label2:
        $r8 = new java.io.File;

        $r10 = r0.<androidx.test.rule.logging.AtraceLogger: java.io.File destAtraceDirectory>;

        $r9 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("atrace-%d.txt", $r9);

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, $r12);

        r22 = $r8;

     label3:
        $r13 = new java.io.FileOutputStream;

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.io.File)>(r22);

        r3 = $r13;

     label4:
        $r14 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r14);

     label5:
        virtualinvoke r3.<java.io.OutputStream: void close()>();

        goto label8;

     label6:
        $r21 := @caughtexception;

        r4 = $r21;

     label7:
        virtualinvoke r3.<java.io.OutputStream: void close()>();

        throw r4;

     label8:
        i0 = i0 + 1;

        goto label1;

     label9:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void writeDataToByteStream(android.os.ParcelFileDescriptor, java.io.ByteArrayOutputStream) throws java.io.IOException
    {
        androidx.test.rule.logging.AtraceLogger r0;
        android.os.ParcelFileDescriptor r1;
        java.io.ByteArrayOutputStream r2;
        android.os.ParcelFileDescriptor$AutoCloseInputStream r3, $r6;
        byte[] r4;
        int i0, $i1;
        java.lang.Throwable r5, $r7;

        r0 := @this: androidx.test.rule.logging.AtraceLogger;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: java.io.ByteArrayOutputStream;

        $r6 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke $r6.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r1);

        r3 = $r6;

     label1:
        r4 = newarray (byte)[8192];

     label2:
        $i1 = virtualinvoke r3.<java.io.InputStream: int read(byte[])>(r4);

        i0 = $i1;

        if $i1 < 0 goto label3;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r4, 0, i0);

        goto label2;

     label3:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        goto label6;

     label4:
        $r7 := @caughtexception;

        r5 = $r7;

     label5:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        throw r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable
<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: java.lang.String traceCategories>
<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: int bufferSize>
<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: int dumpIntervalInSecs>
<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: java.util.concurrent.CountDownLatch startLatch>
<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: androidx.test.rule.logging.AtraceLogger this$0>
    void <init>(androidx.test.rule.logging.AtraceLogger, java.lang.String, int, int)
    {
        androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable r0;
        androidx.test.rule.logging.AtraceLogger r1;
        java.lang.String r2;
        int i0, i1;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @this: androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable;

        r1 := @parameter0: androidx.test.rule.logging.AtraceLogger;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: androidx.test.rule.logging.AtraceLogger this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: java.util.concurrent.CountDownLatch startLatch> = $r3;

        r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: java.lang.String traceCategories> = r2;

        r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: int bufferSize> = i0;

        r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: int dumpIntervalInSecs> = i1;

        return;
    }

    public void run()
    {
        androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable r0;
        java.io.ByteArrayOutputStream r1, $r7, $r17, r34;
        long l0, l1, $l5, l8;
        java.util.concurrent.CountDownLatch $r2;
        java.lang.Thread $r3;
        boolean $z0;
        java.lang.Object[] $r4, $r14;
        int $i2, $i3, $i4, $i6;
        java.lang.Integer $r5, $r15;
        java.lang.String $r6, $r16, $r27, r32, r33;
        androidx.test.rule.logging.AtraceLogger $r8, $r9, $r12, $r18, $r19, $r22, $r29;
        android.app.UiAutomation $r10, $r20;
        android.os.ParcelFileDescriptor $r11, $r21;
        java.util.List $r13, $r23;
        java.lang.StringBuilder $r24, $r25, $r26;
        java.lang.Throwable $r28, $r30, r31, r35;

        r0 := @this: androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable;

        $r2 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: java.util.concurrent.CountDownLatch startLatch>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>();

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r3.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 != 0 goto label6;

     label2:
        $i3 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: int dumpIntervalInSecs>;

        $i4 = $i3 * 1000;

        $l5 = (long) $i4;

        staticinvoke <java.lang.Thread: void sleep(long)>($l5);

     label3:
        goto label5;

     label4:
        $r30 := @caughtexception;

        r31 = $r30;

        goto label6;

     label5:
        $r14 = newarray (java.lang.Object)[2];

        $i6 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: int bufferSize>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r14[0] = $r15;

        $r16 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: java.lang.String traceCategories>;

        $r14[1] = $r16;

        r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("atrace --async_dump -b %d -z %s", $r14);

        l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r17 = new java.io.ByteArrayOutputStream;

        specialinvoke $r17.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r17;

        $r19 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: androidx.test.rule.logging.AtraceLogger this$0>;

        $r18 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: androidx.test.rule.logging.AtraceLogger this$0>;

        $r20 = staticinvoke <androidx.test.rule.logging.AtraceLogger: android.app.UiAutomation '-$$Nest$fgetuiAutomation'(androidx.test.rule.logging.AtraceLogger)>($r18);

        $r21 = virtualinvoke $r20.<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>(r32);

        staticinvoke <androidx.test.rule.logging.AtraceLogger: void '-$$Nest$mwriteDataToByteStream'(androidx.test.rule.logging.AtraceLogger,android.os.ParcelFileDescriptor,java.io.ByteArrayOutputStream)>($r19, $r21, r1);

        $r22 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: androidx.test.rule.logging.AtraceLogger this$0>;

        $r23 = staticinvoke <androidx.test.rule.logging.AtraceLogger: java.util.List '-$$Nest$fgetatraceDataList'(androidx.test.rule.logging.AtraceLogger)>($r22);

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>(r1);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = l0 - l8;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time taken by - DumpTraceRunnable ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AtraceLogger", $r27);

        goto label1;

     label6:
        $r4 = newarray (java.lang.Object)[2];

        $i2 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: int bufferSize>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r4[0] = $r5;

        $r6 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: java.lang.String traceCategories>;

        $r4[1] = $r6;

        r33 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("atrace --async_stop -b %d -z %s", $r4);

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        r34 = $r7;

        $r9 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: androidx.test.rule.logging.AtraceLogger this$0>;

        $r8 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: androidx.test.rule.logging.AtraceLogger this$0>;

        $r10 = staticinvoke <androidx.test.rule.logging.AtraceLogger: android.app.UiAutomation '-$$Nest$fgetuiAutomation'(androidx.test.rule.logging.AtraceLogger)>($r8);

        $r11 = virtualinvoke $r10.<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>(r33);

        staticinvoke <androidx.test.rule.logging.AtraceLogger: void '-$$Nest$mwriteDataToByteStream'(androidx.test.rule.logging.AtraceLogger,android.os.ParcelFileDescriptor,java.io.ByteArrayOutputStream)>($r9, $r11, r34);

        $r12 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: androidx.test.rule.logging.AtraceLogger this$0>;

        $r13 = staticinvoke <androidx.test.rule.logging.AtraceLogger: java.util.List '-$$Nest$fgetatraceDataList'(androidx.test.rule.logging.AtraceLogger)>($r12);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r34);

     label7:
        goto label9;

     label8:
        $r28 := @caughtexception;

        r35 = $r28;

        $r29 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: androidx.test.rule.logging.AtraceLogger this$0>;

        staticinvoke <androidx.test.rule.logging.AtraceLogger: void '-$$Nest$fputdumpIOException'(androidx.test.rule.logging.AtraceLogger,java.io.IOException)>($r29, r35);

     label9:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.io.IOException from label1 to label7 with label8;
    }

    void waitForStart()
    {
        androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable r0;
        java.lang.Throwable r1, $r3;
        java.util.concurrent.CountDownLatch $r2;

        r0 := @this: androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable;

     label1:
        $r2 = r0.<androidx.test.rule.logging.AtraceLogger$DumpTraceRunnable: java.util.concurrent.CountDownLatch startLatch>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

