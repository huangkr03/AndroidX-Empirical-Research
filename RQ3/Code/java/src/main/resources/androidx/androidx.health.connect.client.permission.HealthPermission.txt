androidx.health.connect.client.permission.HealthPermission
<androidx.health.connect.client.permission.HealthPermission: androidx.health.connect.client.permission.HealthPermission$Companion Companion>
<androidx.health.connect.client.permission.HealthPermission: kotlin.reflect.KClass recordType>
<androidx.health.connect.client.permission.HealthPermission: int accessType>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_ACTIVE_CALORIES_BURNED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_DISTANCE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_ELEVATION_GAINED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_EXERCISE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_FLOORS_CLIMBED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_STEPS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_TOTAL_CALORIES_BURNED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_VO2_MAX>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_WHEELCHAIR_PUSHES>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_POWER>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_SPEED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_BASAL_METABOLIC_RATE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_BODY_FAT>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_BODY_WATER_MASS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_BONE_MASS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_HEIGHT>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_HIP_CIRCUMFERENCE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_LEAN_BODY_MASS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_WAIST_CIRCUMFERENCE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_WEIGHT>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_CERVICAL_MUCUS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_INTERMENSTRUAL_BLEEDING>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_MENSTRUATION>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_OVULATION_TEST>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_SEXUAL_ACTIVITY>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_HYDRATION>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_NUTRITION>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_SLEEP>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_BASAL_BODY_TEMPERATURE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_BLOOD_GLUCOSE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_BLOOD_PRESSURE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_BODY_TEMPERATURE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_HEART_RATE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_HEART_RATE_VARIABILITY>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_OXYGEN_SATURATION>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_RESPIRATORY_RATE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_RESTING_HEART_RATE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_ACTIVE_CALORIES_BURNED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_DISTANCE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_ELEVATION_GAINED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_EXERCISE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_FLOORS_CLIMBED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_STEPS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_TOTAL_CALORIES_BURNED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_VO2_MAX>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_WHEELCHAIR_PUSHES>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_POWER>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_SPEED>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_BASAL_METABOLIC_RATE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_BODY_FAT>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_BODY_WATER_MASS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_BONE_MASS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_HEIGHT>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_HIP_CIRCUMFERENCE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_LEAN_BODY_MASS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_WAIST_CIRCUMFERENCE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_WEIGHT>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_CERVICAL_MUCUS>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_INTERMENSTRUAL_BLEEDING>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_MENSTRUATION>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_OVULATION_TEST>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_SEXUAL_ACTIVITY>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_HYDRATION>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_NUTRITION>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_SLEEP>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_BASAL_BODY_TEMPERATURE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_BLOOD_GLUCOSE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_BLOOD_PRESSURE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_BODY_TEMPERATURE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_HEART_RATE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_HEART_RATE_VARIABILITY>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_OXYGEN_SATURATION>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_RESPIRATORY_RATE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_RESTING_HEART_RATE>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String READ_PERMISSION_PREFIX>
<androidx.health.connect.client.permission.HealthPermission: java.lang.String WRITE_PERMISSION_PREFIX>
<androidx.health.connect.client.permission.HealthPermission: java.util.Map RECORD_TYPE_TO_PERMISSION>
    public void <init>(kotlin.reflect.KClass, int)
    {
        androidx.health.connect.client.permission.HealthPermission r0;
        kotlin.reflect.KClass r1;
        int i0;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission;

        r1 := @parameter0: kotlin.reflect.KClass;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "recordType");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.health.connect.client.permission.HealthPermission: kotlin.reflect.KClass recordType> = r1;

        r0.<androidx.health.connect.client.permission.HealthPermission: int accessType> = i0;

        return;
    }

    public final kotlin.reflect.KClass getRecordType$connect_client_release()
    {
        androidx.health.connect.client.permission.HealthPermission r0;
        kotlin.reflect.KClass $r1;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission;

        $r1 = r0.<androidx.health.connect.client.permission.HealthPermission: kotlin.reflect.KClass recordType>;

        return $r1;
    }

    public final int getAccessType$connect_client_release()
    {
        androidx.health.connect.client.permission.HealthPermission r0;
        int $i0;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission;

        $i0 = r0.<androidx.health.connect.client.permission.HealthPermission: int accessType>;

        return $i0;
    }

    public static void getAccessType$connect_client_release$annotations()
    {
        return;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.health.connect.client.permission.HealthPermission r0, $r2, $r5;
        java.lang.Object r1;
        boolean $z0, $z1;
        kotlin.reflect.KClass $r3, $r4;
        int $i0, $i1;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.health.connect.client.permission.HealthPermission;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<androidx.health.connect.client.permission.HealthPermission: kotlin.reflect.KClass recordType>;

        $r2 = (androidx.health.connect.client.permission.HealthPermission) r1;

        $r3 = $r2.<androidx.health.connect.client.permission.HealthPermission: kotlin.reflect.KClass recordType>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i1 = r0.<androidx.health.connect.client.permission.HealthPermission: int accessType>;

        $r5 = (androidx.health.connect.client.permission.HealthPermission) r1;

        $i0 = $r5.<androidx.health.connect.client.permission.HealthPermission: int accessType>;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public int hashCode()
    {
        androidx.health.connect.client.permission.HealthPermission r0;
        kotlin.reflect.KClass $r1;
        int $i0, $i1, i2, i3;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission;

        $r1 = r0.<androidx.health.connect.client.permission.HealthPermission: kotlin.reflect.KClass recordType>;

        i2 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = 31 * i2;

        $i0 = r0.<androidx.health.connect.client.permission.HealthPermission: int accessType>;

        i3 = $i1 + $i0;

        return i3;
    }

    public static final androidx.health.connect.client.permission.HealthPermission createReadPermissionLegacy(kotlin.reflect.KClass)
    {
        kotlin.reflect.KClass r0;
        androidx.health.connect.client.permission.HealthPermission$Companion $r1;
        androidx.health.connect.client.permission.HealthPermission $r2;

        r0 := @parameter0: kotlin.reflect.KClass;

        $r1 = <androidx.health.connect.client.permission.HealthPermission: androidx.health.connect.client.permission.HealthPermission$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.health.connect.client.permission.HealthPermission$Companion: androidx.health.connect.client.permission.HealthPermission createReadPermissionLegacy(kotlin.reflect.KClass)>(r0);

        return $r2;
    }

    public static final java.lang.String getReadPermission(kotlin.reflect.KClass)
    {
        kotlin.reflect.KClass r0;
        androidx.health.connect.client.permission.HealthPermission$Companion $r1;
        java.lang.String $r2;

        r0 := @parameter0: kotlin.reflect.KClass;

        $r1 = <androidx.health.connect.client.permission.HealthPermission: androidx.health.connect.client.permission.HealthPermission$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.health.connect.client.permission.HealthPermission$Companion: java.lang.String getReadPermission(kotlin.reflect.KClass)>(r0);

        return $r2;
    }

    public static final androidx.health.connect.client.permission.HealthPermission createWritePermissionLegacy(kotlin.reflect.KClass)
    {
        kotlin.reflect.KClass r0;
        androidx.health.connect.client.permission.HealthPermission$Companion $r1;
        androidx.health.connect.client.permission.HealthPermission $r2;

        r0 := @parameter0: kotlin.reflect.KClass;

        $r1 = <androidx.health.connect.client.permission.HealthPermission: androidx.health.connect.client.permission.HealthPermission$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.health.connect.client.permission.HealthPermission$Companion: androidx.health.connect.client.permission.HealthPermission createWritePermissionLegacy(kotlin.reflect.KClass)>(r0);

        return $r2;
    }

    public static final java.lang.String getWritePermission(kotlin.reflect.KClass)
    {
        kotlin.reflect.KClass r0;
        androidx.health.connect.client.permission.HealthPermission$Companion $r1;
        java.lang.String $r2;

        r0 := @parameter0: kotlin.reflect.KClass;

        $r1 = <androidx.health.connect.client.permission.HealthPermission: androidx.health.connect.client.permission.HealthPermission$Companion Companion>;

        $r2 = virtualinvoke $r1.<androidx.health.connect.client.permission.HealthPermission$Companion: java.lang.String getWritePermission(kotlin.reflect.KClass)>(r0);

        return $r2;
    }

    public static final java.util.Map access$getRECORD_TYPE_TO_PERMISSION$cp()
    {
        java.util.Map $r0;

        $r0 = <androidx.health.connect.client.permission.HealthPermission: java.util.Map RECORD_TYPE_TO_PERMISSION>;

        return $r0;
    }

    static void <clinit>()
    {
        kotlin.Pair[] r0;
        androidx.health.connect.client.permission.HealthPermission$Companion $r1;
        kotlin.reflect.KClass $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r47, $r50, $r53, $r56, $r59, $r62, $r65, $r68, $r71, $r74, $r77, $r80, $r83, $r86, $r89, $r92, $r95, $r98, $r101, $r104, $r107, $r110, $r113, $r116;
        java.lang.String $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48, $r51, $r54, $r57, $r60, $r63, $r66, $r69, $r72, $r75, $r78, $r81, $r84, $r87, $r90, $r93, $r96, $r99, $r102, $r105, $r108, $r111, $r114, $r117;
        kotlin.Pair $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r52, $r55, $r58, $r61, $r64, $r67, $r70, $r73, $r76, $r79, $r82, $r85, $r88, $r91, $r94, $r97, $r100, $r103, $r106, $r109, $r112, $r115, $r118;
        java.util.Map $r119;

        $r1 = new androidx.health.connect.client.permission.HealthPermission$Companion;

        specialinvoke $r1.<androidx.health.connect.client.permission.HealthPermission$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.health.connect.client.permission.HealthPermission: androidx.health.connect.client.permission.HealthPermission$Companion Companion> = $r1;

        r0 = newarray (kotlin.Pair)[39];

        $r2 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/ActiveCaloriesBurnedRecord;");

        $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_ACTIVE_CALORIES_BURNED", "android.permission.health.READ_", null, 2, null);

        $r4 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r2, $r3);

        r0[0] = $r4;

        $r5 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/BasalBodyTemperatureRecord;");

        $r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_BASAL_BODY_TEMPERATURE", "android.permission.health.READ_", null, 2, null);

        $r7 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r5, $r6);

        r0[1] = $r7;

        $r8 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/BasalMetabolicRateRecord;");

        $r9 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_BASAL_METABOLIC_RATE", "android.permission.health.READ_", null, 2, null);

        $r10 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r8, $r9);

        r0[2] = $r10;

        $r11 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/BloodGlucoseRecord;");

        $r12 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_BLOOD_GLUCOSE", "android.permission.health.READ_", null, 2, null);

        $r13 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r11, $r12);

        r0[3] = $r13;

        $r14 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/BloodPressureRecord;");

        $r15 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_BLOOD_PRESSURE", "android.permission.health.READ_", null, 2, null);

        $r16 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r14, $r15);

        r0[4] = $r16;

        $r17 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/BodyFatRecord;");

        $r18 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_BODY_FAT", "android.permission.health.READ_", null, 2, null);

        $r19 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r17, $r18);

        r0[5] = $r19;

        $r20 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/BodyTemperatureRecord;");

        $r21 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_BODY_TEMPERATURE", "android.permission.health.READ_", null, 2, null);

        $r22 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r20, $r21);

        r0[6] = $r22;

        $r23 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/BodyWaterMassRecord;");

        $r24 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_BODY_WATER_MASS", "android.permission.health.READ_", null, 2, null);

        $r25 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r23, $r24);

        r0[7] = $r25;

        $r26 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/BoneMassRecord;");

        $r27 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_BONE_MASS", "android.permission.health.READ_", null, 2, null);

        $r28 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r26, $r27);

        r0[8] = $r28;

        $r29 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/CervicalMucusRecord;");

        $r30 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_CERVICAL_MUCUS", "android.permission.health.READ_", null, 2, null);

        $r31 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r29, $r30);

        r0[9] = $r31;

        $r32 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/CyclingPedalingCadenceRecord;");

        $r33 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_EXERCISE", "android.permission.health.READ_", null, 2, null);

        $r34 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r32, $r33);

        r0[10] = $r34;

        $r35 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/DistanceRecord;");

        $r36 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_DISTANCE", "android.permission.health.READ_", null, 2, null);

        $r37 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r35, $r36);

        r0[11] = $r37;

        $r38 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/ElevationGainedRecord;");

        $r39 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_ELEVATION_GAINED", "android.permission.health.READ_", null, 2, null);

        $r40 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r38, $r39);

        r0[12] = $r40;

        $r41 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/ExerciseSessionRecord;");

        $r42 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_EXERCISE", "android.permission.health.READ_", null, 2, null);

        $r43 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r41, $r42);

        r0[13] = $r43;

        $r44 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/FloorsClimbedRecord;");

        $r45 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_FLOORS_CLIMBED", "android.permission.health.READ_", null, 2, null);

        $r46 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r44, $r45);

        r0[14] = $r46;

        $r47 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/HeartRateRecord;");

        $r48 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_HEART_RATE", "android.permission.health.READ_", null, 2, null);

        $r49 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r47, $r48);

        r0[15] = $r49;

        $r50 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/HeartRateVariabilityRmssdRecord;");

        $r51 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_HEART_RATE_VARIABILITY", "android.permission.health.READ_", null, 2, null);

        $r52 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r50, $r51);

        r0[16] = $r52;

        $r53 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/HeightRecord;");

        $r54 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_HEIGHT", "android.permission.health.READ_", null, 2, null);

        $r55 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r53, $r54);

        r0[17] = $r55;

        $r56 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/HydrationRecord;");

        $r57 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_HYDRATION", "android.permission.health.READ_", null, 2, null);

        $r58 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r56, $r57);

        r0[18] = $r58;

        $r59 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/IntermenstrualBleedingRecord;");

        $r60 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_INTERMENSTRUAL_BLEEDING", "android.permission.health.READ_", null, 2, null);

        $r61 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r59, $r60);

        r0[19] = $r61;

        $r62 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/LeanBodyMassRecord;");

        $r63 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_LEAN_BODY_MASS", "android.permission.health.READ_", null, 2, null);

        $r64 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r62, $r63);

        r0[20] = $r64;

        $r65 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/MenstruationFlowRecord;");

        $r66 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_MENSTRUATION", "android.permission.health.READ_", null, 2, null);

        $r67 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r65, $r66);

        r0[21] = $r67;

        $r68 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/MenstruationPeriodRecord;");

        $r69 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_MENSTRUATION", "android.permission.health.READ_", null, 2, null);

        $r70 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r68, $r69);

        r0[22] = $r70;

        $r71 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/NutritionRecord;");

        $r72 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_NUTRITION", "android.permission.health.READ_", null, 2, null);

        $r73 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r71, $r72);

        r0[23] = $r73;

        $r74 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/OvulationTestRecord;");

        $r75 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_OVULATION_TEST", "android.permission.health.READ_", null, 2, null);

        $r76 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r74, $r75);

        r0[24] = $r76;

        $r77 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/OxygenSaturationRecord;");

        $r78 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_OXYGEN_SATURATION", "android.permission.health.READ_", null, 2, null);

        $r79 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r77, $r78);

        r0[25] = $r79;

        $r80 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/PowerRecord;");

        $r81 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_POWER", "android.permission.health.READ_", null, 2, null);

        $r82 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r80, $r81);

        r0[26] = $r82;

        $r83 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/RespiratoryRateRecord;");

        $r84 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_RESPIRATORY_RATE", "android.permission.health.READ_", null, 2, null);

        $r85 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r83, $r84);

        r0[27] = $r85;

        $r86 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/RestingHeartRateRecord;");

        $r87 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_RESTING_HEART_RATE", "android.permission.health.READ_", null, 2, null);

        $r88 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r86, $r87);

        r0[28] = $r88;

        $r89 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/SexualActivityRecord;");

        $r90 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_SEXUAL_ACTIVITY", "android.permission.health.READ_", null, 2, null);

        $r91 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r89, $r90);

        r0[29] = $r91;

        $r92 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/SleepSessionRecord;");

        $r93 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_SLEEP", "android.permission.health.READ_", null, 2, null);

        $r94 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r92, $r93);

        r0[30] = $r94;

        $r95 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/SleepStageRecord;");

        $r96 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_SLEEP", "android.permission.health.READ_", null, 2, null);

        $r97 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r95, $r96);

        r0[31] = $r97;

        $r98 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/SpeedRecord;");

        $r99 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_SPEED", "android.permission.health.READ_", null, 2, null);

        $r100 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r98, $r99);

        r0[32] = $r100;

        $r101 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/StepsCadenceRecord;");

        $r102 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_STEPS", "android.permission.health.READ_", null, 2, null);

        $r103 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r101, $r102);

        r0[33] = $r103;

        $r104 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/StepsRecord;");

        $r105 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_STEPS", "android.permission.health.READ_", null, 2, null);

        $r106 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r104, $r105);

        r0[34] = $r106;

        $r107 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/TotalCaloriesBurnedRecord;");

        $r108 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_TOTAL_CALORIES_BURNED", "android.permission.health.READ_", null, 2, null);

        $r109 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r107, $r108);

        r0[35] = $r109;

        $r110 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/Vo2MaxRecord;");

        $r111 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_VO2_MAX", "android.permission.health.READ_", null, 2, null);

        $r112 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r110, $r111);

        r0[36] = $r112;

        $r113 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/WeightRecord;");

        $r114 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_WEIGHT", "android.permission.health.READ_", null, 2, null);

        $r115 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r113, $r114);

        r0[37] = $r115;

        $r116 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/health/connect/client/records/WheelchairPushesRecord;");

        $r117 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>("android.permission.health.READ_WHEELCHAIR_PUSHES", "android.permission.health.READ_", null, 2, null);

        $r118 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r116, $r117);

        r0[38] = $r118;

        $r119 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair[])>(r0);

        <androidx.health.connect.client.permission.HealthPermission: java.util.Map RECORD_TYPE_TO_PERMISSION> = $r119;

        return;
    }

androidx.health.connect.client.permission.HealthPermission$Companion
    private void <init>()
    {
        androidx.health.connect.client.permission.HealthPermission$Companion r0;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.health.connect.client.permission.HealthPermission createReadPermissionLegacy(kotlin.reflect.KClass)
    {
        androidx.health.connect.client.permission.HealthPermission$Companion r0;
        kotlin.reflect.KClass r1;
        androidx.health.connect.client.permission.HealthPermission $r2;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission$Companion;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "recordType");

        $r2 = new androidx.health.connect.client.permission.HealthPermission;

        specialinvoke $r2.<androidx.health.connect.client.permission.HealthPermission: void <init>(kotlin.reflect.KClass,int)>(r1, 1);

        return $r2;
    }

    public final java.lang.String getReadPermission(kotlin.reflect.KClass)
    {
        androidx.health.connect.client.permission.HealthPermission$Companion r0;
        kotlin.reflect.KClass r1;
        java.util.Map $r2, $r6;
        java.lang.Object $r3, $r7;
        java.lang.StringBuilder $r4, $r5, $r9, $r12, $r13, $r14, $r15;
        java.lang.String $r8, $r10, $r16;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission$Companion;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "recordType");

        $r2 = virtualinvoke r0.<androidx.health.connect.client.permission.HealthPermission$Companion: java.util.Map getRECORD_TYPE_TO_PERMISSION$connect_client_release()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given recordType is not valid : ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".simpleName");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.health.READ_");

        $r6 = virtualinvoke r0.<androidx.health.connect.client.permission.HealthPermission$Companion: java.util.Map getRECORD_TYPE_TO_PERMISSION$connect_client_release()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public final androidx.health.connect.client.permission.HealthPermission createWritePermissionLegacy(kotlin.reflect.KClass)
    {
        androidx.health.connect.client.permission.HealthPermission$Companion r0;
        kotlin.reflect.KClass r1;
        androidx.health.connect.client.permission.HealthPermission $r2;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission$Companion;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "recordType");

        $r2 = new androidx.health.connect.client.permission.HealthPermission;

        specialinvoke $r2.<androidx.health.connect.client.permission.HealthPermission: void <init>(kotlin.reflect.KClass,int)>(r1, 2);

        return $r2;
    }

    public final java.lang.String getWritePermission(kotlin.reflect.KClass)
    {
        androidx.health.connect.client.permission.HealthPermission$Companion r0;
        kotlin.reflect.KClass r1;
        java.util.Map $r2, $r6;
        java.lang.Object $r3, $r7;
        java.lang.StringBuilder $r4, $r5, $r9, $r12, $r13, $r14, $r15;
        java.lang.String $r8, $r10, $r16;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission$Companion;

        r1 := @parameter0: kotlin.reflect.KClass;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "recordType");

        $r2 = virtualinvoke r0.<androidx.health.connect.client.permission.HealthPermission$Companion: java.util.Map getRECORD_TYPE_TO_PERMISSION$connect_client_release()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given recordType is not valid : ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".simpleName");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.health.WRITE_");

        $r6 = virtualinvoke r0.<androidx.health.connect.client.permission.HealthPermission$Companion: java.util.Map getRECORD_TYPE_TO_PERMISSION$connect_client_release()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(r1, "");

        $r8 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public final java.util.Map getRECORD_TYPE_TO_PERMISSION$connect_client_release()
    {
        androidx.health.connect.client.permission.HealthPermission$Companion r0;
        java.util.Map $r1;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission$Companion;

        $r1 = staticinvoke <androidx.health.connect.client.permission.HealthPermission: java.util.Map access$getRECORD_TYPE_TO_PERMISSION$cp()>();

        return $r1;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.health.connect.client.permission.HealthPermission$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.health.connect.client.permission.HealthPermission$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.health.connect.client.permission.HealthPermission$Companion: void <init>()>();

        return;
    }

