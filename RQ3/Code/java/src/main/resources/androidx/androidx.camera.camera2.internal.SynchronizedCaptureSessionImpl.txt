androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl
<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.lang.String TAG>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.lang.Object mObjectLock>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.util.List mDeferrableSurfaces>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: com.google.common.util.concurrent.ListenableFuture mOpeningCaptureSession>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface mCloseSurfaceQuirk>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart mWaitForOtherSessionCompleteQuirk>
<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession mForceCloseSessionQuirk>
    void <init>(androidx.camera.core.impl.Quirks, androidx.camera.core.impl.Quirks, androidx.camera.camera2.internal.CaptureSessionRepository, java.util.concurrent.Executor, java.util.concurrent.ScheduledExecutorService, android.os.Handler)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        androidx.camera.core.impl.Quirks r1, r2;
        androidx.camera.camera2.internal.CaptureSessionRepository r3;
        java.util.concurrent.Executor r4;
        java.util.concurrent.ScheduledExecutorService r5;
        android.os.Handler r6;
        java.lang.Object $r7;
        androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface $r8;
        androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart $r9;
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession $r10;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: androidx.camera.core.impl.Quirks;

        r2 := @parameter1: androidx.camera.core.impl.Quirks;

        r3 := @parameter2: androidx.camera.camera2.internal.CaptureSessionRepository;

        r4 := @parameter3: java.util.concurrent.Executor;

        r5 := @parameter4: java.util.concurrent.ScheduledExecutorService;

        r6 := @parameter5: android.os.Handler;

        specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void <init>(androidx.camera.camera2.internal.CaptureSessionRepository,java.util.concurrent.Executor,java.util.concurrent.ScheduledExecutorService,android.os.Handler)>(r3, r4, r5, r6);

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.lang.Object mObjectLock> = $r7;

        $r8 = new androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface;

        specialinvoke $r8.<androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface: void <init>(androidx.camera.core.impl.Quirks,androidx.camera.core.impl.Quirks)>(r1, r2);

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface mCloseSurfaceQuirk> = $r8;

        $r9 = new androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart;

        specialinvoke $r9.<androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart: void <init>(androidx.camera.core.impl.Quirks)>(r1);

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart mWaitForOtherSessionCompleteQuirk> = $r9;

        $r10 = new androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession;

        specialinvoke $r10.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: void <init>(androidx.camera.core.impl.Quirks)>(r2);

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession mForceCloseSessionQuirk> = $r10;

        return;
    }

    public com.google.common.util.concurrent.ListenableFuture openCaptureSession(android.hardware.camera2.CameraDevice, androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat, java.util.List)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        android.hardware.camera2.CameraDevice r1;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat r2;
        java.util.List r3, $r9;
        java.lang.Object r4, $r6;
        java.lang.Throwable r5, $r14;
        androidx.camera.camera2.internal.CaptureSessionRepository $r7;
        androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart $r8;
        androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart$OpenCaptureSession $r10;
        com.google.common.util.concurrent.ListenableFuture $r11, $r12, $r13;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        r2 := @parameter1: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat;

        r3 := @parameter2: java.util.List;

        $r6 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.lang.Object mObjectLock>;

        r4 = $r6;

        entermonitor $r6;

     label1:
        $r8 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart mWaitForOtherSessionCompleteQuirk>;

        $r7 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        $r9 = virtualinvoke $r7.<androidx.camera.camera2.internal.CaptureSessionRepository: java.util.List getClosingCaptureSession()>();

        $r10 = dynamicinvoke "run" <androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart$OpenCaptureSession (androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat,java.util.List), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: com.google.common.util.concurrent.ListenableFuture lambda$openCaptureSession$0(android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat,java.util.List)>, methodtype: com.google.common.util.concurrent.ListenableFuture __METHODTYPE__(android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat,java.util.List));

        $r11 = virtualinvoke $r8.<androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart: com.google.common.util.concurrent.ListenableFuture openCaptureSession(android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat,java.util.List,java.util.List,androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart$OpenCaptureSession)>(r1, r2, r3, $r9, $r10);

        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: com.google.common.util.concurrent.ListenableFuture mOpeningCaptureSession> = $r11;

        $r12 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: com.google.common.util.concurrent.ListenableFuture mOpeningCaptureSession>;

        $r13 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r12);

        exitmonitor r4;

     label2:
        return $r13;

     label3:
        $r14 := @caughtexception;

        r5 = $r14;

        exitmonitor r4;

     label4:
        throw r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public com.google.common.util.concurrent.ListenableFuture getOpeningBlocker()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart $r1;
        com.google.common.util.concurrent.ListenableFuture $r2;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart mWaitForOtherSessionCompleteQuirk>;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart: com.google.common.util.concurrent.ListenableFuture getStartStreamFuture()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture startWithDeferrableSurface(java.util.List, long)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        java.util.List r1;
        long l0;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        com.google.common.util.concurrent.ListenableFuture $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: java.util.List;

        l0 := @parameter1: long;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.lang.Object mObjectLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.util.List mDeferrableSurfaces> = r1;

        $r5 = specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture startWithDeferrableSurface(java.util.List,long)>(r1, l0);

        exitmonitor r2;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean stop()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        boolean $z0, $z2;
        com.google.common.util.concurrent.ListenableFuture $r4, $r5;
        java.util.List $r6;
        androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface $r7;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.lang.Object mObjectLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: boolean isCameraCaptureSessionOpen()>();

        if $z0 == 0 goto label2;

        $r7 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface mCloseSurfaceQuirk>;

        $r6 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.util.List mDeferrableSurfaces>;

        virtualinvoke $r7.<androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface: void onSessionEnd(java.util.List)>($r6);

        goto label3;

     label2:
        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: com.google.common.util.concurrent.ListenableFuture mOpeningCaptureSession>;

        if $r4 == null goto label3;

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: com.google.common.util.concurrent.ListenableFuture mOpeningCaptureSession>;

        interfaceinvoke $r5.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(1);

     label3:
        $z2 = specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: boolean stop()>();

        exitmonitor r1;

     label4:
        return $z2;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart $r3;
        androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart$SingleRepeatingRequest $r4;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart mWaitForOtherSessionCompleteQuirk>;

        $r4 = dynamicinvoke "run" <androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart$SingleRepeatingRequest (androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: int __METHODTYPE__(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: int lambda$setSingleRepeatingRequest$1(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>, methodtype: int __METHODTYPE__(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback));

        $i0 = virtualinvoke $r3.<androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart$SingleRepeatingRequest)>(r1, r2, $r4);

        return $i0;
    }

    public void onConfigured(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        androidx.camera.camera2.internal.CaptureSessionRepository $r2, $r5;
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession $r3;
        java.util.List $r4, $r6;
        androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession$OnConfigured $r7;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: void debugLog(java.lang.String)>("Session onConfigured()");

        $r3 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession mForceCloseSessionQuirk>;

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        $r4 = virtualinvoke $r2.<androidx.camera.camera2.internal.CaptureSessionRepository: java.util.List getCreatingCaptureSessions()>();

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.CaptureSessionRepository mCaptureSessionRepository>;

        $r6 = virtualinvoke $r5.<androidx.camera.camera2.internal.CaptureSessionRepository: java.util.List getCaptureSessions()>();

        $r7 = dynamicinvoke "run" <androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession$OnConfigured (androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(androidx.camera.camera2.internal.SynchronizedCaptureSession), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: void lambda$onConfigured$2(androidx.camera.camera2.internal.SynchronizedCaptureSession)>, methodtype: void __METHODTYPE__(androidx.camera.camera2.internal.SynchronizedCaptureSession));

        virtualinvoke $r3.<androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession: void onSessionConfigured(androidx.camera.camera2.internal.SynchronizedCaptureSession,java.util.List,java.util.List,androidx.camera.camera2.internal.compat.workaround.ForceCloseCaptureSession$OnConfigured)>(r1, $r4, $r6, $r7);

        return;
    }

    public void close()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart $r1, $r2;
        com.google.common.util.concurrent.ListenableFuture $r3;
        java.lang.Runnable $r4;
        java.util.concurrent.Executor $r5;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: void debugLog(java.lang.String)>("Session call close()");

        $r1 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart mWaitForOtherSessionCompleteQuirk>;

        virtualinvoke $r1.<androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart: void onSessionEnd()>();

        $r2 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart mWaitForOtherSessionCompleteQuirk>;

        $r3 = virtualinvoke $r2.<androidx.camera.camera2.internal.compat.workaround.WaitForRepeatingRequestStart: com.google.common.util.concurrent.ListenableFuture getStartStreamFuture()>();

        $r4 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: void lambda$close$3()>, methodtype: void __METHODTYPE__());

        $r5 = virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.util.concurrent.Executor getExecutor()>();

        interfaceinvoke $r3.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r5);

        return;
    }

    public void onClosed(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        java.util.List $r5;
        androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface $r6;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        $r4 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.lang.Object mObjectLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r6 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface mCloseSurfaceQuirk>;

        $r5 = r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: java.util.List mDeferrableSurfaces>;

        virtualinvoke $r6.<androidx.camera.camera2.internal.compat.workaround.ForceCloseDeferrableSurface: void onSessionEnd(java.util.List)>($r5);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: void debugLog(java.lang.String)>("onClosed()");

        specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onClosed(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void debugLog(java.lang.String)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String)>("SyncCaptureSessionImpl", $r7);

        return;
    }

    private void lambda$close$3()
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        virtualinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl: void debugLog(java.lang.String)>("Session call super.close()");

        specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void close()>();

        return;
    }

    private void lambda$onConfigured$2(androidx.camera.camera2.internal.SynchronizedCaptureSession)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        androidx.camera.camera2.internal.SynchronizedCaptureSession r1;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: androidx.camera.camera2.internal.SynchronizedCaptureSession;

        specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: void onConfigured(androidx.camera.camera2.internal.SynchronizedCaptureSession)>(r1);

        return;
    }

    private int lambda$setSingleRepeatingRequest$1(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback) throws android.hardware.camera2.CameraAccessException
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        android.hardware.camera2.CaptureRequest r1;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback r2;
        int $i0;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest;

        r2 := @parameter1: android.hardware.camera2.CameraCaptureSession$CaptureCallback;

        $i0 = specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>(r1, r2);

        return $i0;
    }

    private com.google.common.util.concurrent.ListenableFuture lambda$openCaptureSession$0(android.hardware.camera2.CameraDevice, androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat, java.util.List)
    {
        androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl r0;
        android.hardware.camera2.CameraDevice r1;
        androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat r2;
        java.util.List r3;
        com.google.common.util.concurrent.ListenableFuture $r4;

        r0 := @this: androidx.camera.camera2.internal.SynchronizedCaptureSessionImpl;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        r2 := @parameter1: androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat;

        r3 := @parameter2: java.util.List;

        $r4 = specialinvoke r0.<androidx.camera.camera2.internal.SynchronizedCaptureSessionBaseImpl: com.google.common.util.concurrent.ListenableFuture openCaptureSession(android.hardware.camera2.CameraDevice,androidx.camera.camera2.internal.compat.params.SessionConfigurationCompat,java.util.List)>(r1, r2, r3);

        return $r4;
    }

