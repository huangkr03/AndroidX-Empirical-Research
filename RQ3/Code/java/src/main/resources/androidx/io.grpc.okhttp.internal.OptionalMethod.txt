io.grpc.okhttp.internal.OptionalMethod
<io.grpc.okhttp.internal.OptionalMethod: java.lang.String methodName>
<io.grpc.okhttp.internal.OptionalMethod: java.lang.Class[] methodParams>
<io.grpc.okhttp.internal.OptionalMethod: java.lang.Class returnType>
    public transient void <init>(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        io.grpc.okhttp.internal.OptionalMethod $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.lang.Class[] $r3;

        $r0 := @this: io.grpc.okhttp.internal.OptionalMethod;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Class[];

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Class returnType> = $r1;

        $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.String methodName> = $r2;

        $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Class[] methodParams> = $r3;

        return;
    }

    private java.lang.reflect.Method getMethod(java.lang.Class)
    {
        io.grpc.okhttp.internal.OptionalMethod $r0;
        java.lang.Class $r1, $r5;
        java.lang.String $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4;
        boolean $z0;

        $r0 := @this: io.grpc.okhttp.internal.OptionalMethod;

        $r1 := @parameter0: java.lang.Class;

        $r2 = $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.String methodName>;

        if $r2 == null goto label3;

        $r3 = $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Class[] methodParams>;

        $r4 = staticinvoke <io.grpc.okhttp.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r3);

        if $r4 == null goto label2;

        $r1 = $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Class returnType>;

        if $r1 == null goto label2;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return null;

     label2:
        return $r4;

     label3:
        return null;
    }

    private static java.lang.reflect.Method getPublicMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        int $i0;
        java.lang.reflect.Method $r3;
        java.lang.Throwable $r4, $r5;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.lang.Class[];

        if $r1 != null goto label01;

        return null;

     label01:
        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

     label02:
        $i0 = $i0 & 1;

        if $i0 != 0 goto label05;

     label03:
        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

     label04:
        $r3 = staticinvoke <io.grpc.okhttp.internal.OptionalMethod: java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[])>($r1, $r2, $r0);

        return $r3;

     label05:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r2, $r0);

     label06:
        $i0 = virtualinvoke $r3.<java.lang.reflect.Method: int getModifiers()>();

     label07:
        $i0 = $i0 & 1;

        if $i0 != 0 goto label09;

        return null;

     label08:
        $r4 := @caughtexception;

     label09:
        return $r3;

     label10:
        $r5 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label01 to label02 with label10;
        catch java.lang.NoSuchMethodException from label03 to label04 with label10;
        catch java.lang.NoSuchMethodException from label05 to label06 with label10;
        catch java.lang.NoSuchMethodException from label06 to label07 with label08;
    }

    public transient java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException
    {
        io.grpc.okhttp.internal.OptionalMethod $r0;
        java.lang.Object $r1;
        java.lang.Object[] $r2;
        java.lang.Class $r3;
        java.lang.reflect.Method $r4;
        java.lang.Throwable $r5;
        java.lang.AssertionError $r6;
        java.lang.String $r7, $r9;
        java.lang.StringBuilder $r8;

        $r0 := @this: io.grpc.okhttp.internal.OptionalMethod;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = specialinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3);

        if $r4 == null goto label4;

     label1:
        $r1 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r2);

     label2:
        return $r1;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpectedly could not call: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        virtualinvoke $r6.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        throw $r6;

     label4:
        $r6 = new java.lang.AssertionError;

        $r7 = $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.String methodName>;

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported for object ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r6;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public transient java.lang.Object invokeOptional(java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException
    {
        io.grpc.okhttp.internal.OptionalMethod $r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.lang.reflect.Method $r4;
        java.lang.Throwable $r5;

        $r0 := @this: io.grpc.okhttp.internal.OptionalMethod;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = specialinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r3);

        if $r4 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r1);

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public transient java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object, java.lang.Object[])
    {
        io.grpc.okhttp.internal.OptionalMethod $r0;
        java.lang.Object $r1;
        java.lang.Object[] $r2;
        java.lang.Throwable $r3;
        boolean $z0;
        java.lang.RuntimeException $r4;
        java.lang.AssertionError $r5, r6;
        java.lang.reflect.InvocationTargetException r7;

        $r0 := @this: io.grpc.okhttp.internal.OptionalMethod;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

     label1:
        $r1 = virtualinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[])>($r1, $r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        r7 = (java.lang.reflect.InvocationTargetException) $r3;

        $r3 = virtualinvoke r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r3 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        $r4 = (java.lang.RuntimeException) $r3;

        $r3 = (java.lang.Throwable) $r4;

        throw $r3;

     label4:
        r6 = new java.lang.AssertionError;

        $r5 = r6;

        specialinvoke r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unexpected exception");

        virtualinvoke $r5.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r5;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    public transient java.lang.Object invokeWithoutCheckedException(java.lang.Object, java.lang.Object[])
    {
        io.grpc.okhttp.internal.OptionalMethod $r0;
        java.lang.Object $r1;
        java.lang.Object[] $r2;
        java.lang.Throwable $r3;
        boolean $z0;
        java.lang.RuntimeException $r4;
        java.lang.AssertionError $r5, r6;
        java.lang.reflect.InvocationTargetException r7;

        $r0 := @this: io.grpc.okhttp.internal.OptionalMethod;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object[];

     label1:
        $r1 = virtualinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        r7 = (java.lang.reflect.InvocationTargetException) $r3;

        $r3 = virtualinvoke r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r3 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        $r4 = (java.lang.RuntimeException) $r3;

        $r3 = (java.lang.Throwable) $r4;

        throw $r3;

     label4:
        r6 = new java.lang.AssertionError;

        $r5 = r6;

        specialinvoke r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unexpected exception");

        virtualinvoke $r5.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r5;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    public boolean isSupported(java.lang.Object)
    {
        io.grpc.okhttp.internal.OptionalMethod $r0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.reflect.Method $r3;

        $r0 := @this: io.grpc.okhttp.internal.OptionalMethod;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = specialinvoke $r0.<io.grpc.okhttp.internal.OptionalMethod: java.lang.reflect.Method getMethod(java.lang.Class)>($r2);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

