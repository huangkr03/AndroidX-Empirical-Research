kotlin.io.FilesKt__UtilsKt
    public void <init>()
    {
        kotlin.io.FilesKt__UtilsKt $r0;

        $r0 := @this: kotlin.io.FilesKt__UtilsKt;

        specialinvoke $r0.<kotlin.io.FilesKt__FileTreeWalkKt: void <init>()>();

        return;
    }

    public static final boolean copyRecursively(java.io.File, java.io.File, boolean, kotlin.jvm.functions.Function2)
    {
        boolean $z0, $z1, $z2;
        kotlin.jvm.functions.Function2 $r0;
        kotlin.io.NoSuchFileException $r1;
        java.io.File $r2, $r3, $r9, $r11;
        java.lang.Object $r4;
        kotlin.io.OnErrorAction $r5;
        kotlin.io.FileTreeWalk $r6;
        kotlin.io.FilesKt__UtilsKt$copyRecursively$2 $r7;
        java.util.Iterator $r8;
        java.lang.String $r10;
        kotlin.io.FileAlreadyExistsException $r12;
        long $l0, $l1;
        byte $b2;
        java.io.IOException $r13;
        kotlin.io.TerminateException $r14;

        $r2 := @parameter0: java.io.File;

        $r3 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $r0 := @parameter3: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "target");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "onError");

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        $z2 = 1;

        if $z1 != 0 goto label03;

        $r1 = new kotlin.io.NoSuchFileException;

        specialinvoke $r1.<kotlin.io.NoSuchFileException: void <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r2, null, "The source file doesn\'t exist.", 2, null);

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r2, $r1);

        $r5 = <kotlin.io.OnErrorAction: kotlin.io.OnErrorAction TERMINATE>;

        if $r4 == $r5 goto label01;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        return $z2;

     label03:
        $r6 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FileTreeWalk walkTopDown(java.io.File)>($r2);

        $r7 = new kotlin.io.FilesKt__UtilsKt$copyRecursively$2;

     label04:
        specialinvoke $r7.<kotlin.io.FilesKt__UtilsKt$copyRecursively$2: void <init>(kotlin.jvm.functions.Function2)>($r0);

        $r6 = virtualinvoke $r6.<kotlin.io.FileTreeWalk: kotlin.io.FileTreeWalk onFail(kotlin.jvm.functions.Function2)>($r7);

        $r8 = virtualinvoke $r6.<kotlin.io.FileTreeWalk: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label31;

        $r4 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.io.File) $r4;

        $z1 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label10;

     label06:
        $r1 = new kotlin.io.NoSuchFileException;

     label07:
        specialinvoke $r1.<kotlin.io.NoSuchFileException: void <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r9, null, "The source file doesn\'t exist.", 2, null);

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r9, $r1);

     label08:
        $r5 = <kotlin.io.OnErrorAction: kotlin.io.OnErrorAction TERMINATE>;

     label09:
        if $r4 != $r5 goto label05;

        return 0;

     label10:
        $r10 = staticinvoke <kotlin.io.FilesKt: java.lang.String toRelativeString(java.io.File,java.io.File)>($r9, $r2);

        $r11 = new java.io.File;

     label11:
        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r10);

        $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label24;

        $z1 = virtualinvoke $r9.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label12;

        $z1 = virtualinvoke $r11.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label24;

     label12:
        if $z0 != 0 goto label13;

        $z1 = 1;

        goto label19;

     label13:
        $z1 = virtualinvoke $r11.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label17;

     label14:
        $z1 = staticinvoke <kotlin.io.FilesKt: boolean deleteRecursively(java.io.File)>($r11);

     label15:
        if $z1 != 0 goto label16;

        $z1 = 1;

        goto label19;

     label16:
        $z1 = 0;

        goto label19;

     label17:
        $z1 = virtualinvoke $r11.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label18;

        $z1 = 1;

        goto label19;

     label18:
        $z1 = 0;

     label19:
        if $z1 == 0 goto label24;

     label20:
        $r12 = new kotlin.io.FileAlreadyExistsException;

     label21:
        specialinvoke $r12.<kotlin.io.FileAlreadyExistsException: void <init>(java.io.File,java.io.File,java.lang.String)>($r9, $r11, "The destination file already exists.");

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r11, $r12);

     label22:
        $r5 = <kotlin.io.OnErrorAction: kotlin.io.OnErrorAction TERMINATE>;

     label23:
        if $r4 != $r5 goto label05;

        return 0;

     label24:
        $z1 = virtualinvoke $r9.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label25;

        virtualinvoke $r11.<java.io.File: boolean mkdirs()>();

        goto label05;

     label25:
        $r11 = staticinvoke <kotlin.io.FilesKt: java.io.File copyTo$default(java.io.File,java.io.File,boolean,int,int,java.lang.Object)>($r9, $r11, $z0, 0, 4, null);

     label26:
        $l0 = virtualinvoke $r11.<java.io.File: long length()>();

        $l1 = virtualinvoke $r9.<java.io.File: long length()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label05;

     label27:
        $r13 = new java.io.IOException;

     label28:
        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Source file wasn\'t copied completely, length of destination file differs.");

        $r4 = interfaceinvoke $r0.<kotlin.jvm.functions.Function2: java.lang.Object invoke(java.lang.Object,java.lang.Object)>($r9, $r13);

     label29:
        $r5 = <kotlin.io.OnErrorAction: kotlin.io.OnErrorAction TERMINATE>;

     label30:
        if $r4 != $r5 goto label05;

        return 0;

     label31:
        return 1;

     label32:
        $r14 := @caughtexception;

        return 0;

        catch kotlin.io.TerminateException from label03 to label04 with label32;
        catch kotlin.io.TerminateException from label06 to label07 with label32;
        catch kotlin.io.TerminateException from label08 to label09 with label32;
        catch kotlin.io.TerminateException from label10 to label11 with label32;
        catch kotlin.io.TerminateException from label14 to label15 with label32;
        catch kotlin.io.TerminateException from label20 to label21 with label32;
        catch kotlin.io.TerminateException from label22 to label23 with label32;
        catch kotlin.io.TerminateException from label25 to label26 with label32;
        catch kotlin.io.TerminateException from label27 to label28 with label32;
        catch kotlin.io.TerminateException from label29 to label30 with label32;
    }

    public static boolean copyRecursively$default(java.io.File, java.io.File, boolean, kotlin.jvm.functions.Function2, int, java.lang.Object)
    {
        java.io.File $r0, $r1;
        boolean $z0;
        kotlin.jvm.functions.Function2 $r2;
        int $i0, $i1;
        java.lang.Object $r3;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: kotlin.jvm.functions.Function2;

        $i0 := @parameter4: int;

        $r3 := @parameter5: java.lang.Object;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 0;

     label1:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $r2 = <kotlin.io.FilesKt__UtilsKt$copyRecursively$1: kotlin.io.FilesKt__UtilsKt$copyRecursively$1 INSTANCE>;

     label2:
        $z0 = staticinvoke <kotlin.io.FilesKt: boolean copyRecursively(java.io.File,java.io.File,boolean,kotlin.jvm.functions.Function2)>($r1, $r0, $z0, $r2);

        return $z0;
    }

    public static final java.io.File copyTo(java.io.File, java.io.File, boolean, int)
    {
        java.io.File $r0, $r1, $r2;
        boolean $z0, $z1;
        int $i0;
        java.io.FileInputStream $r3, r9;
        java.io.FileOutputStream $r4, r10;
        java.lang.Throwable $r5, $r6;
        kotlin.io.FileAlreadyExistsException r7;
        kotlin.io.FileSystemException r8;
        kotlin.io.NoSuchFileException r11;
        java.io.Closeable r12;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "target");

        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label12;

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label03;

        if $z0 == 0 goto label02;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 == 0 goto label01;

        goto label03;

     label01:
        r7 = new kotlin.io.FileAlreadyExistsException;

        specialinvoke r7.<kotlin.io.FileAlreadyExistsException: void <init>(java.io.File,java.io.File,java.lang.String)>($r0, $r1, "Tried to overwrite the destination, but failed to delete it.");

        throw r7;

     label02:
        r7 = new kotlin.io.FileAlreadyExistsException;

        specialinvoke r7.<kotlin.io.FileAlreadyExistsException: void <init>(java.io.File,java.io.File,java.lang.String)>($r0, $r1, "The destination file already exists.");

        throw r7;

     label03:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label05;

        $z0 = virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        if $z0 == 0 goto label04;

        return $r1;

     label04:
        r8 = new kotlin.io.FileSystemException;

        specialinvoke r8.<kotlin.io.FileSystemException: void <init>(java.io.File,java.io.File,java.lang.String)>($r0, $r1, "Failed to create target directory.");

        $r5 = (java.lang.Throwable) r8;

        throw $r5;

     label05:
        $r2 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        if $r2 == null goto label06;

        virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

     label06:
        r9 = new java.io.FileInputStream;

        $r3 = r9;

        specialinvoke r9.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        r10 = new java.io.FileOutputStream;

        $r4 = r10;

     label07:
        specialinvoke r10.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label08:
        staticinvoke <kotlin.io.ByteStreamsKt: long copyTo(java.io.InputStream,java.io.OutputStream,int)>($r3, $r4, $i0);

        r12 = (java.io.Closeable) $r4;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r12, null);

        r12 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r12, null);

        return $r1;

     label09:
        $r5 := @caughtexception;

     label10:
        throw $r5;

     label11:
        $r6 := @caughtexception;

        r12 = (java.io.Closeable) $r3;

        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r12, $r5);

        throw $r6;

     label12:
        r11 = new kotlin.io.NoSuchFileException;

        specialinvoke r11.<kotlin.io.NoSuchFileException: void <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, null, "The source file doesn\'t exist.", 2, null);

        $r5 = (java.lang.Throwable) r11;

        throw $r5;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public static java.io.File copyTo$default(java.io.File, java.io.File, boolean, int, int, java.lang.Object)
    {
        java.io.File $r0, $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object $r2;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r2 := @parameter5: java.lang.Object;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        $z0 = 0;

     label1:
        $i1 = $i1 & 4;

        if $i1 == 0 goto label2;

        $i0 = 8192;

     label2:
        $r1 = staticinvoke <kotlin.io.FilesKt: java.io.File copyTo(java.io.File,java.io.File,boolean,int)>($r1, $r0, $z0, $i0);

        return $r1;
    }

    public static final java.io.File createTempDir(java.lang.String, java.lang.String, java.io.File)
    {
        java.lang.String $r0, $r1;
        java.io.File $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, r4;
        java.io.IOException r5;
        java.lang.Throwable r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "prefix");

        $r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r0, $r1, $r2);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        $z0 = virtualinvoke $r2.<java.io.File: boolean mkdir()>();

        if $z0 == 0 goto label1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "dir");

        return $r2;

     label1:
        r5 = new java.io.IOException;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create temporary directory ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<java.io.IOException: void <init>(java.lang.String)>($r0);

        r6 = (java.lang.Throwable) r5;

        throw r6;
    }

    public static java.io.File createTempDir$default(java.lang.String, java.lang.String, java.io.File, int, java.lang.Object)
    {
        java.io.File $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.io.File;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r1 = "tmp";

     label1:
        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        $r2 = null;

     label2:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label3;

        $r0 = null;

     label3:
        $r0 = staticinvoke <kotlin.io.FilesKt: java.io.File createTempDir(java.lang.String,java.lang.String,java.io.File)>($r1, $r2, $r0);

        return $r0;
    }

    public static final java.io.File createTempFile(java.lang.String, java.lang.String, java.io.File)
    {
        java.io.File $r0;
        java.lang.String $r1, $r2;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "prefix");

        $r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r1, $r2, $r0);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "createTempFile(prefix, suffix, directory)");

        return $r0;
    }

    public static java.io.File createTempFile$default(java.lang.String, java.lang.String, java.io.File, int, java.lang.Object)
    {
        java.io.File $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 := @parameter2: java.io.File;

        $i0 := @parameter3: int;

        $r3 := @parameter4: java.lang.Object;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r1 = "tmp";

     label1:
        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        $r2 = null;

     label2:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label3;

        $r0 = null;

     label3:
        $r0 = staticinvoke <kotlin.io.FilesKt: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r1, $r2, $r0);

        return $r0;
    }

    public static final boolean deleteRecursively(java.io.File)
    {
        java.io.File $r0;
        kotlin.io.FileTreeWalk $r1;
        java.util.Iterator $r2;
        boolean $z0, $z1;
        java.lang.Object $r3;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FileTreeWalk walkBottomUp(java.io.File)>($r0);

        $r2 = interfaceinvoke $r1.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $z0 = 1;

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (java.io.File) $r3;

        $z1 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label2;

        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

     label2:
        if $z0 == 0 goto label3;

        $z0 = 1;

        goto label1;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        return $z0;
    }

    public static final boolean endsWith(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        kotlin.io.FilePathComponents $r2, $r3;
        boolean $z0;
        int $i0, $i1;
        java.util.List $r4, $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r2 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r0);

        $r3 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r1);

        $z0 = virtualinvoke $r3.<kotlin.io.FilePathComponents: boolean isRooted()>();

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r1);

        return $z0;

     label1:
        $i0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        $i1 = virtualinvoke $r3.<kotlin.io.FilePathComponents: int getSize()>();

        $i0 = $i0 - $i1;

        if $i0 >= 0 goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $i1 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        $r4 = interfaceinvoke $r4.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public static final boolean endsWith(java.io.File, java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.io.File $r1, $r2;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r0);

        $z0 = staticinvoke <kotlin.io.FilesKt: boolean endsWith(java.io.File,java.io.File)>($r1, $r2);

        return $z0;
    }

    public static final java.lang.String getExtension(java.io.File)
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "name");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)>($r1, 46, "");

        return $r1;
    }

    public static final java.lang.String getInvariantSeparatorsPath(java.io.File)
    {
        char $c0;
        java.io.File $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $c0 = <java.io.File: char separatorChar>;

        if $c0 == 47 goto label1;

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "path");

        $c0 = <java.io.File: char separatorChar>;

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,char,char,boolean,int,java.lang.Object)>($r1, $c0, 47, 0, 4, null);

        return $r1;

     label1:
        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "path");

        return $r1;
    }

    public static final java.lang.String getNameWithoutExtension(java.io.File)
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "name");

        $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringBeforeLast$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>($r1, ".", null, 2, null);

        return $r1;
    }

    public static final java.io.File normalize(java.io.File)
    {
        java.lang.String $r0;
        java.io.File $r1;
        kotlin.io.FilePathComponents $r2;
        java.util.List $r3;
        java.lang.Iterable r4;

        $r1 := @parameter0: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        $r2 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r1);

        $r1 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r3 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r3 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.util.List normalize$FilesKt__UtilsKt(java.util.List)>($r3);

        $r0 = <java.io.File: java.lang.String separator>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "separator");

        r4 = (java.lang.Iterable) $r3;

        $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r4, $r0, null, null, 0, null, null, 62, null);

        $r1 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>($r1, $r0);

        return $r1;
    }

    private static final java.util.List normalize$FilesKt__UtilsKt(java.util.List)
    {
        java.util.ArrayList $r0, r7;
        java.util.List $r1;
        int $i0;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.io.File $r4, $r6;
        java.lang.String $r5;

        $r1 := @parameter0: java.util.List;

        r7 = new java.util.ArrayList;

        $r0 = r7;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.io.File) $r3;

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, ".");

        if $z0 != 0 goto label1;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, "..");

        if $z0 == 0 goto label3;

        $r1 = (java.util.List) $r0;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r1 = (java.util.List) $r0;

        $r3 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object last(java.util.List)>($r1);

        $r6 = (java.io.File) $r3;

        $r5 = virtualinvoke $r6.<java.io.File: java.lang.String getName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, "..");

        if $z0 != 0 goto label2;

        $r1 = (java.util.List) $r0;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r1 = (java.util.List) $r0;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i0);

        goto label1;

     label2:
        $r1 = (java.util.List) $r0;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label3:
        $r1 = (java.util.List) $r0;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label4:
        $r1 = (java.util.List) $r0;

        return $r1;
    }

    private static final kotlin.io.FilePathComponents normalize$FilesKt__UtilsKt(kotlin.io.FilePathComponents)
    {
        kotlin.io.FilePathComponents $r0, $r1;
        java.io.File $r2;
        java.util.List $r3;

        $r1 := @parameter0: kotlin.io.FilePathComponents;

        $r0 = new kotlin.io.FilePathComponents;

        $r2 = virtualinvoke $r1.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r3 = virtualinvoke $r1.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r3 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.util.List normalize$FilesKt__UtilsKt(java.util.List)>($r3);

        specialinvoke $r0.<kotlin.io.FilePathComponents: void <init>(java.io.File,java.util.List)>($r2, $r3);

        return $r0;
    }

    public static final java.io.File relativeTo(java.io.File, java.io.File)
    {
        java.io.File $r0, $r2, $r3;
        java.lang.String $r1;

        $r2 := @parameter0: java.io.File;

        $r0 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "base");

        $r3 = new java.io.File;

        $r1 = staticinvoke <kotlin.io.FilesKt: java.lang.String toRelativeString(java.io.File,java.io.File)>($r2, $r0);

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r1);

        return $r3;
    }

    public static final java.io.File relativeToOrNull(java.io.File, java.io.File)
    {
        java.lang.String $r0;
        java.io.File $r1, $r2;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "base");

        $r0 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.lang.String toRelativeStringOrNull$FilesKt__UtilsKt(java.io.File,java.io.File)>($r1, $r2);

        if $r0 == null goto label1;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

        return $r1;

     label1:
        return null;
    }

    public static final java.io.File relativeToOrSelf(java.io.File, java.io.File)
    {
        java.lang.String $r0;
        java.io.File $r1, $r2;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "base");

        $r0 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.lang.String toRelativeStringOrNull$FilesKt__UtilsKt(java.io.File,java.io.File)>($r1, $r2);

        if $r0 == null goto label1;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r0);

     label1:
        return $r1;
    }

    public static final java.io.File resolve(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        boolean $z0;
        java.lang.String $r2;
        int $i0;
        char $c1;
        java.lang.StringBuilder $r3;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "relative");

        $z0 = staticinvoke <kotlin.io.FilesKt: boolean isRooted(java.io.File)>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "this.toString()");

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 != 0 goto label5;

        $c1 = <java.io.File: char separatorChar>;

        $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r2, $c1, 0, 2, null);

        if $z0 == 0 goto label4;

        goto label5;

     label4:
        $r1 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $c1 = <java.io.File: char separatorChar>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r1;

     label5:
        $r1 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        return $r1;
    }

    public static final java.io.File resolve(java.io.File, java.lang.String)
    {
        java.lang.String $r0;
        java.io.File $r1, $r2;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "relative");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r0);

        $r1 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.io.File)>($r1, $r2);

        return $r1;
    }

    public static final java.io.File resolveSibling(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1, $r3;
        kotlin.io.FilePathComponents $r2;
        int $i0;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "relative");

        $r2 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r1);

        $i0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        if $i0 != 0 goto label1;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("..");

        goto label2;

     label1:
        $i0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        $i0 = $i0 + -1;

        $r1 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.io.File subPath(int,int)>(0, $i0);

     label2:
        $r3 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r1 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.io.File)>($r3, $r1);

        $r1 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.io.File)>($r1, $r0);

        return $r1;
    }

    public static final java.io.File resolveSibling(java.io.File, java.lang.String)
    {
        java.lang.String $r0;
        java.io.File $r1, $r2;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "relative");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r0);

        $r1 = staticinvoke <kotlin.io.FilesKt: java.io.File resolveSibling(java.io.File,java.io.File)>($r1, $r2);

        return $r1;
    }

    public static final boolean startsWith(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        kotlin.io.FilePathComponents $r2, $r3;
        boolean $z0;
        int $i0, $i1;
        java.util.List $r4, $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "other");

        $r2 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r0);

        $r3 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r1);

        $r0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r1 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        $i1 = virtualinvoke $r3.<kotlin.io.FilePathComponents: int getSize()>();

        if $i0 >= $i1 goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $i0 = virtualinvoke $r3.<kotlin.io.FilePathComponents: int getSize()>();

        $r4 = interfaceinvoke $r4.<java.util.List: java.util.List subList(int,int)>(0, $i0);

        $r5 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public static final boolean startsWith(java.io.File, java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.io.File $r1, $r2;

        $r1 := @parameter0: java.io.File;

        $r0 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r0);

        $z0 = staticinvoke <kotlin.io.FilesKt: boolean startsWith(java.io.File,java.io.File)>($r1, $r2);

        return $z0;
    }

    public static final java.lang.String toRelativeString(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "base");

        $r2 = staticinvoke <kotlin.io.FilesKt__UtilsKt: java.lang.String toRelativeStringOrNull$FilesKt__UtilsKt(java.io.File,java.io.File)>($r0, $r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this and base files have different roots: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    private static final java.lang.String toRelativeStringOrNull$FilesKt__UtilsKt(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        kotlin.io.FilePathComponents $r2, $r3;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.util.List $r4;
        java.lang.Object $r5, $r6;
        java.lang.StringBuilder $r7, r9;
        java.lang.String $r8;
        char $c4;
        java.lang.Iterable r10;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r0);

        $r2 = staticinvoke <kotlin.io.FilesKt__UtilsKt: kotlin.io.FilePathComponents normalize$FilesKt__UtilsKt(kotlin.io.FilePathComponents)>($r2);

        $r3 = staticinvoke <kotlin.io.FilesKt: kotlin.io.FilePathComponents toComponents(java.io.File)>($r1);

        $r3 = staticinvoke <kotlin.io.FilesKt__UtilsKt: kotlin.io.FilePathComponents normalize$FilesKt__UtilsKt(kotlin.io.FilePathComponents)>($r3);

        $r0 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $r1 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.io.File getRoot()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, $r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r3.<kotlin.io.FilePathComponents: int getSize()>();

        $i1 = virtualinvoke $r2.<kotlin.io.FilePathComponents: int getSize()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $i3 = 0;

     label2:
        if $i3 >= $i2 goto label3;

        $r4 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i3);

        $r4 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i3);

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label3;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        r9 = new java.lang.StringBuilder;

        $r7 = r9;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        $i2 = $i0 + -1;

        if $i3 > $i2 goto label7;

     label4:
        $r4 = virtualinvoke $r3.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        $r0 = (java.io.File) $r5;

        $r8 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r8, "..");

        if $z0 == 0 goto label5;

        return null;

     label5:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        if $i2 == $i3 goto label6;

        $c4 = <java.io.File: char separatorChar>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

     label6:
        if $i2 == $i3 goto label7;

        $i2 = $i2 + -1;

        goto label4;

     label7:
        if $i3 >= $i1 goto label9;

        if $i3 >= $i0 goto label8;

        $c4 = <java.io.File: char separatorChar>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

     label8:
        $r4 = virtualinvoke $r2.<kotlin.io.FilePathComponents: java.util.List getSegments()>();

        r10 = (java.lang.Iterable) $r4;

        $r4 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List drop(java.lang.Iterable,int)>(r10, $i3);

        $r8 = <java.io.File: java.lang.String separator>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "separator");

        r10 = (java.lang.Iterable) $r4;

        staticinvoke <kotlin.collections.CollectionsKt: java.lang.Appendable joinTo$default(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>(r10, $r7, $r8, null, null, 0, null, null, 124, null);

     label9:
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

