androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.smoothstreaming.SsChunkSource$Factory chunkSourceFactory>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.datasource.TransferListener transferListener>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.LoaderErrorThrower manifestLoaderErrorThrower>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher drmEventDispatcher>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.Allocator allocator>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray trackGroups>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.CompositeSequenceableLoaderFactory compositeSequenceableLoaderFactory>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.MediaPeriod$Callback callback>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest manifest>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams>
<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader compositeSequenceableLoader>
    public void <init>(androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest, androidx.media3.exoplayer.smoothstreaming.SsChunkSource$Factory, androidx.media3.datasource.TransferListener, androidx.media3.exoplayer.source.CompositeSequenceableLoaderFactory, androidx.media3.exoplayer.drm.DrmSessionManager, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher, androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy, androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher, androidx.media3.exoplayer.upstream.LoaderErrorThrower, androidx.media3.exoplayer.upstream.Allocator)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest r1;
        androidx.media3.exoplayer.smoothstreaming.SsChunkSource$Factory r2;
        androidx.media3.datasource.TransferListener r3;
        androidx.media3.exoplayer.source.CompositeSequenceableLoaderFactory r4;
        androidx.media3.exoplayer.drm.DrmSessionManager r5;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r6;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy r7;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher r8;
        androidx.media3.exoplayer.upstream.LoaderErrorThrower r9;
        androidx.media3.exoplayer.upstream.Allocator r10;
        androidx.media3.exoplayer.source.TrackGroupArray $r11;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] $r12, $r13;
        androidx.media3.exoplayer.source.SequenceableLoader $r14;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest;

        r2 := @parameter1: androidx.media3.exoplayer.smoothstreaming.SsChunkSource$Factory;

        r3 := @parameter2: androidx.media3.datasource.TransferListener;

        r4 := @parameter3: androidx.media3.exoplayer.source.CompositeSequenceableLoaderFactory;

        r5 := @parameter4: androidx.media3.exoplayer.drm.DrmSessionManager;

        r6 := @parameter5: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        r7 := @parameter6: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy;

        r8 := @parameter7: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher;

        r9 := @parameter8: androidx.media3.exoplayer.upstream.LoaderErrorThrower;

        r10 := @parameter9: androidx.media3.exoplayer.upstream.Allocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest manifest> = r1;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.smoothstreaming.SsChunkSource$Factory chunkSourceFactory> = r2;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.datasource.TransferListener transferListener> = r3;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.LoaderErrorThrower manifestLoaderErrorThrower> = r9;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager> = r5;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher drmEventDispatcher> = r6;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy> = r7;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher> = r8;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.Allocator allocator> = r10;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.CompositeSequenceableLoaderFactory compositeSequenceableLoaderFactory> = r4;

        $r11 = staticinvoke <androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray buildTrackGroups(androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest,androidx.media3.exoplayer.drm.DrmSessionManager)>(r1, r5);

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray trackGroups> = $r11;

        $r12 = staticinvoke <androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] newSampleStreamArray(int)>(0);

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams> = $r12;

        $r13 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams>;

        $r14 = interfaceinvoke r4.<androidx.media3.exoplayer.source.CompositeSequenceableLoaderFactory: androidx.media3.exoplayer.source.SequenceableLoader createCompositeSequenceableLoader(androidx.media3.exoplayer.source.SequenceableLoader[])>($r13);

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader compositeSequenceableLoader> = $r14;

        return;
    }

    public void updateManifest(androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest r1;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] r2;
        int i0, i1;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r3;
        androidx.media3.exoplayer.source.MediaPeriod$Callback $r4;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r5;
        androidx.media3.exoplayer.smoothstreaming.SsChunkSource $r6;
        androidx.media3.exoplayer.source.SequenceableLoader r7;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest manifest> = r1;

        r2 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r5 = virtualinvoke r3.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource getChunkSource()>();

        $r6 = (androidx.media3.exoplayer.smoothstreaming.SsChunkSource) $r5;

        interfaceinvoke $r6.<androidx.media3.exoplayer.smoothstreaming.SsChunkSource: void updateManifest(androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.MediaPeriod$Callback callback>;

        r7 = (androidx.media3.exoplayer.source.SequenceableLoader) r0;

        interfaceinvoke $r4.<androidx.media3.exoplayer.source.MediaPeriod$Callback: void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)>(r7);

        return;
    }

    public void release()
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] r1;
        int i0, i1;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r2;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void release()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.MediaPeriod$Callback callback> = null;

        return;
    }

    public void prepare(androidx.media3.exoplayer.source.MediaPeriod$Callback, long)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.source.MediaPeriod$Callback r1;
        long l0;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.source.MediaPeriod$Callback;

        l0 := @parameter1: long;

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.MediaPeriod$Callback callback> = r1;

        interfaceinvoke r1.<androidx.media3.exoplayer.source.MediaPeriod$Callback: void onPrepared(androidx.media3.exoplayer.source.MediaPeriod)>(r0);

        return;
    }

    public void maybeThrowPrepareError() throws java.io.IOException
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.upstream.LoaderErrorThrower $r1;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        $r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.LoaderErrorThrower manifestLoaderErrorThrower>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.upstream.LoaderErrorThrower: void maybeThrowError()>();

        return;
    }

    public androidx.media3.exoplayer.source.TrackGroupArray getTrackGroups()
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.source.TrackGroupArray $r1;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        $r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray trackGroups>;

        return $r1;
    }

    public long selectTracks(androidx.media3.exoplayer.trackselection.ExoTrackSelection[], boolean[], androidx.media3.exoplayer.source.SampleStream[], boolean[], long)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection[] r1;
        boolean[] r2, r4;
        java.lang.Object[] r3;
        long l0;
        java.util.ArrayList r5, $r6;
        int $i1, $i2, i3;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] $r7, $r8, $r10;
        androidx.media3.exoplayer.source.CompositeSequenceableLoaderFactory $r11;
        androidx.media3.exoplayer.source.SequenceableLoader $r12;
        java.lang.Object $r13, $r16, $r22;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection $r14, $r15, $r17, $r19;
        boolean $z1;
        androidx.media3.exoplayer.source.chunk.ChunkSource $r18;
        androidx.media3.exoplayer.smoothstreaming.SsChunkSource $r20;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r21, r23;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection[];

        r2 := @parameter1: boolean[];

        r3 := @parameter2: androidx.media3.exoplayer.source.SampleStream[];

        r4 := @parameter3: boolean[];

        l0 := @parameter4: long;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r5 = $r6;

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label6;

        $r13 = r3[i3];

        if $r13 == null goto label4;

        $r16 = r3[i3];

        r21 = (androidx.media3.exoplayer.source.chunk.ChunkSampleStream) $r16;

        $r17 = r1[i3];

        if $r17 == null goto label2;

        $z1 = r2[i3];

        if $z1 != 0 goto label3;

     label2:
        virtualinvoke r21.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void release()>();

        r3[i3] = null;

        goto label4;

     label3:
        $r18 = virtualinvoke r21.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: androidx.media3.exoplayer.source.chunk.ChunkSource getChunkSource()>();

        $r20 = (androidx.media3.exoplayer.smoothstreaming.SsChunkSource) $r18;

        $r19 = r1[i3];

        interfaceinvoke $r20.<androidx.media3.exoplayer.smoothstreaming.SsChunkSource: void updateTrackSelection(androidx.media3.exoplayer.trackselection.ExoTrackSelection)>($r19);

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r21);

     label4:
        $r22 = r3[i3];

        if $r22 != null goto label5;

        $r14 = r1[i3];

        if $r14 == null goto label5;

        $r15 = r1[i3];

        r23 = specialinvoke r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream buildSampleStream(androidx.media3.exoplayer.trackselection.ExoTrackSelection,long)>($r15, l0);

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r23);

        r3[i3] = r23;

        r4[i3] = 1;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $i2 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        $r7 = staticinvoke <androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] newSampleStreamArray(int)>($i2);

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams> = $r7;

        $r8 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams>;

        virtualinvoke r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r11 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.CompositeSequenceableLoaderFactory compositeSequenceableLoaderFactory>;

        $r10 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams>;

        $r12 = interfaceinvoke $r11.<androidx.media3.exoplayer.source.CompositeSequenceableLoaderFactory: androidx.media3.exoplayer.source.SequenceableLoader createCompositeSequenceableLoader(androidx.media3.exoplayer.source.SequenceableLoader[])>($r10);

        r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader compositeSequenceableLoader> = $r12;

        return l0;
    }

    public java.util.List getStreamKeys(java.util.List)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        java.util.List r1;
        java.util.ArrayList r2, $r4;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r3;
        int i0, $i1, $i2, $i3, i4, i5;
        java.lang.Object $r5;
        androidx.media3.exoplayer.source.TrackGroupArray $r6;
        androidx.media3.common.TrackGroup $r7;
        androidx.media3.common.StreamKey $r8;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        r1 := @parameter0: java.util.List;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        i4 = 0;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i4 >= $i1 goto label4;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        r3 = (androidx.media3.exoplayer.trackselection.ExoTrackSelection) $r5;

        $r6 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray trackGroups>;

        $r7 = interfaceinvoke r3.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.TrackGroup getTrackGroup()>();

        i0 = virtualinvoke $r6.<androidx.media3.exoplayer.source.TrackGroupArray: int indexOf(androidx.media3.common.TrackGroup)>($r7);

        i5 = 0;

     label2:
        $i2 = interfaceinvoke r3.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int length()>();

        if i5 >= $i2 goto label3;

        $r8 = new androidx.media3.common.StreamKey;

        $i3 = interfaceinvoke r3.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: int getIndexInTrackGroup(int)>(i5);

        specialinvoke $r8.<androidx.media3.common.StreamKey: void <init>(int,int)>(i0, $i3);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return r2;
    }

    public void discardBuffer(long, boolean)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        long l0;
        boolean z0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] r1;
        int i1, i2;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r2;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams>;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r2 = r1[i2];

        virtualinvoke r2.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void discardBuffer(long,boolean)>(l0, z0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void reevaluateBuffer(long)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        long l0;
        androidx.media3.exoplayer.source.SequenceableLoader $r1;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader compositeSequenceableLoader>;

        interfaceinvoke $r1.<androidx.media3.exoplayer.source.SequenceableLoader: void reevaluateBuffer(long)>(l0);

        return;
    }

    public boolean continueLoading(long)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        long l0;
        androidx.media3.exoplayer.source.SequenceableLoader $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        l0 := @parameter0: long;

        $r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader compositeSequenceableLoader>;

        $z0 = interfaceinvoke $r1.<androidx.media3.exoplayer.source.SequenceableLoader: boolean continueLoading(long)>(l0);

        return $z0;
    }

    public boolean isLoading()
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.source.SequenceableLoader $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        $r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader compositeSequenceableLoader>;

        $z0 = interfaceinvoke $r1.<androidx.media3.exoplayer.source.SequenceableLoader: boolean isLoading()>();

        return $z0;
    }

    public long getNextLoadPositionUs()
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.source.SequenceableLoader $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        $r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader compositeSequenceableLoader>;

        $l0 = interfaceinvoke $r1.<androidx.media3.exoplayer.source.SequenceableLoader: long getNextLoadPositionUs()>();

        return $l0;
    }

    public long readDiscontinuity()
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        return -9223372036854775807L;
    }

    public long getBufferedPositionUs()
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.source.SequenceableLoader $r1;
        long $l0;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        $r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.SequenceableLoader compositeSequenceableLoader>;

        $l0 = interfaceinvoke $r1.<androidx.media3.exoplayer.source.SequenceableLoader: long getBufferedPositionUs()>();

        return $l0;
    }

    public long seekToUs(long)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        long l0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] r1;
        int i1, i2;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r2;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        l0 := @parameter0: long;

        r1 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams>;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r2 = r1[i2];

        virtualinvoke r2.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void seekToUs(long)>(l0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return l0;
    }

    public long getAdjustedSeekPositionUs(long, androidx.media3.exoplayer.SeekParameters)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        long l0, $l3;
        androidx.media3.exoplayer.SeekParameters r1;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] r2;
        int i1, $i2, i4;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r3;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        l0 := @parameter0: long;

        r1 := @parameter1: androidx.media3.exoplayer.SeekParameters;

        r2 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] sampleStreams>;

        i1 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i1 goto label3;

        r3 = r2[i4];

        $i2 = r3.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: int primaryTrackType>;

        if $i2 != 2 goto label2;

        $l3 = virtualinvoke r3.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: long getAdjustedSeekPositionUs(long,androidx.media3.exoplayer.SeekParameters)>(l0, r1);

        return $l3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return l0;
    }

    public void onContinueLoadingRequested(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream r1;
        androidx.media3.exoplayer.source.MediaPeriod$Callback $r2;
        androidx.media3.exoplayer.source.SequenceableLoader r3;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r2 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.MediaPeriod$Callback callback>;

        r3 = (androidx.media3.exoplayer.source.SequenceableLoader) r0;

        interfaceinvoke $r2.<androidx.media3.exoplayer.source.MediaPeriod$Callback: void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)>(r3);

        return;
    }

    private androidx.media3.exoplayer.source.chunk.ChunkSampleStream buildSampleStream(androidx.media3.exoplayer.trackselection.ExoTrackSelection, long)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.trackselection.ExoTrackSelection r1;
        long l0;
        int i1, $i2;
        androidx.media3.exoplayer.smoothstreaming.SsChunkSource r2;
        androidx.media3.exoplayer.source.TrackGroupArray $r3;
        androidx.media3.common.TrackGroup $r4;
        androidx.media3.datasource.TransferListener $r5;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest $r6, $r10;
        androidx.media3.exoplayer.upstream.LoaderErrorThrower $r7;
        androidx.media3.exoplayer.smoothstreaming.SsChunkSource$Factory $r8;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream $r9;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement[] $r11;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement $r12;
        androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher $r13;
        androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy $r14;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher $r15;
        androidx.media3.exoplayer.drm.DrmSessionManager $r16;
        androidx.media3.exoplayer.upstream.Allocator $r17;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.trackselection.ExoTrackSelection;

        l0 := @parameter1: long;

        $r3 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray trackGroups>;

        $r4 = interfaceinvoke r1.<androidx.media3.exoplayer.trackselection.ExoTrackSelection: androidx.media3.common.TrackGroup getTrackGroup()>();

        i1 = virtualinvoke $r3.<androidx.media3.exoplayer.source.TrackGroupArray: int indexOf(androidx.media3.common.TrackGroup)>($r4);

        $r8 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.smoothstreaming.SsChunkSource$Factory chunkSourceFactory>;

        $r7 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.LoaderErrorThrower manifestLoaderErrorThrower>;

        $r6 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest manifest>;

        $r5 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.datasource.TransferListener transferListener>;

        r2 = interfaceinvoke $r8.<androidx.media3.exoplayer.smoothstreaming.SsChunkSource$Factory: androidx.media3.exoplayer.smoothstreaming.SsChunkSource createChunkSource(androidx.media3.exoplayer.upstream.LoaderErrorThrower,androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest,int,androidx.media3.exoplayer.trackselection.ExoTrackSelection,androidx.media3.datasource.TransferListener)>($r7, $r6, i1, r1, $r5);

        $r9 = new androidx.media3.exoplayer.source.chunk.ChunkSampleStream;

        $r10 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest manifest>;

        $r11 = $r10.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement[] streamElements>;

        $r12 = $r11[i1];

        $i2 = $r12.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement: int type>;

        $r17 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.Allocator allocator>;

        $r16 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.drm.DrmSessionManager drmSessionManager>;

        $r15 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher drmEventDispatcher>;

        $r14 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy loadErrorHandlingPolicy>;

        $r13 = r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher mediaSourceEventDispatcher>;

        specialinvoke $r9.<androidx.media3.exoplayer.source.chunk.ChunkSampleStream: void <init>(int,int[],androidx.media3.common.Format[],androidx.media3.exoplayer.source.chunk.ChunkSource,androidx.media3.exoplayer.source.SequenceableLoader$Callback,androidx.media3.exoplayer.upstream.Allocator,long,androidx.media3.exoplayer.drm.DrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher,androidx.media3.exoplayer.upstream.LoadErrorHandlingPolicy,androidx.media3.exoplayer.source.MediaSourceEventListener$EventDispatcher)>($i2, null, null, r2, r0, $r17, l0, $r16, $r15, $r14, $r13);

        return $r9;
    }

    private static androidx.media3.exoplayer.source.TrackGroupArray buildTrackGroups(androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest, androidx.media3.exoplayer.drm.DrmSessionManager)
    {
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest r0;
        androidx.media3.exoplayer.drm.DrmSessionManager r1;
        androidx.media3.common.TrackGroup[] r2;
        androidx.media3.common.Format[] r3, r4;
        androidx.media3.common.Format r5, $r13;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement[] $r6, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        androidx.media3.exoplayer.source.TrackGroupArray $r8;
        androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement $r10;
        androidx.media3.common.TrackGroup $r11;
        java.lang.String $r12;

        r0 := @parameter0: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest;

        r1 := @parameter1: androidx.media3.exoplayer.drm.DrmSessionManager;

        $r6 = r0.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement[] streamElements>;

        $i0 = lengthof $r6;

        r2 = newarray (androidx.media3.common.TrackGroup)[$i0];

        i5 = 0;

     label1:
        $r7 = r0.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement[] streamElements>;

        $i1 = lengthof $r7;

        if i5 >= $i1 goto label4;

        $r9 = r0.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest: androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement[] streamElements>;

        $r10 = $r9[i5];

        r3 = $r10.<androidx.media3.exoplayer.smoothstreaming.manifest.SsManifest$StreamElement: androidx.media3.common.Format[] formats>;

        $i2 = lengthof r3;

        r4 = newarray (androidx.media3.common.Format)[$i2];

        i6 = 0;

     label2:
        $i3 = lengthof r3;

        if i6 >= $i3 goto label3;

        r5 = r3[i6];

        $i4 = interfaceinvoke r1.<androidx.media3.exoplayer.drm.DrmSessionManager: int getCryptoType(androidx.media3.common.Format)>(r5);

        $r13 = virtualinvoke r5.<androidx.media3.common.Format: androidx.media3.common.Format copyWithCryptoType(int)>($i4);

        r4[i6] = $r13;

        i6 = i6 + 1;

        goto label2;

     label3:
        $r11 = new androidx.media3.common.TrackGroup;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i5);

        specialinvoke $r11.<androidx.media3.common.TrackGroup: void <init>(java.lang.String,androidx.media3.common.Format[])>($r12, r4);

        r2[i5] = $r11;

        i5 = i5 + 1;

        goto label1;

     label4:
        $r8 = new androidx.media3.exoplayer.source.TrackGroupArray;

        specialinvoke $r8.<androidx.media3.exoplayer.source.TrackGroupArray: void <init>(androidx.media3.common.TrackGroup[])>(r2);

        return $r8;
    }

    private static androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] newSampleStreamArray(int)
    {
        int i0;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (androidx.media3.exoplayer.source.chunk.ChunkSampleStream)[i0];

        return $r0;
    }

    public volatile void onContinueLoadingRequested(androidx.media3.exoplayer.source.SequenceableLoader)
    {
        androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod r0;
        androidx.media3.exoplayer.source.SequenceableLoader r1;
        androidx.media3.exoplayer.source.chunk.ChunkSampleStream $r2;

        r0 := @this: androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod;

        r1 := @parameter0: androidx.media3.exoplayer.source.SequenceableLoader;

        $r2 = (androidx.media3.exoplayer.source.chunk.ChunkSampleStream) r1;

        virtualinvoke r0.<androidx.media3.exoplayer.smoothstreaming.SsMediaPeriod: void onContinueLoadingRequested(androidx.media3.exoplayer.source.chunk.ChunkSampleStream)>($r2);

        return;
    }

