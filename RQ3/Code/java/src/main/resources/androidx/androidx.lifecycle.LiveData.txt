androidx.lifecycle.LiveData
<androidx.lifecycle.LiveData: java.lang.Object mDataLock>
<androidx.lifecycle.LiveData: int START_VERSION>
<androidx.lifecycle.LiveData: java.lang.Object NOT_SET>
<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>
<androidx.lifecycle.LiveData: int mActiveCount>
<androidx.lifecycle.LiveData: boolean mChangingActiveState>
<androidx.lifecycle.LiveData: java.lang.Object mData>
<androidx.lifecycle.LiveData: java.lang.Object mPendingData>
<androidx.lifecycle.LiveData: int mVersion>
<androidx.lifecycle.LiveData: boolean mDispatchingValue>
<androidx.lifecycle.LiveData: boolean mDispatchInvalidated>
<androidx.lifecycle.LiveData: java.lang.Runnable mPostValueRunnable>
    public void <init>(java.lang.Object)
    {
        androidx.lifecycle.LiveData r0;
        java.lang.Object r1, $r2, $r4;
        androidx.arch.core.internal.SafeIterableMap $r3;
        androidx.lifecycle.LiveData$1 $r5;

        r0 := @this: androidx.lifecycle.LiveData;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<androidx.lifecycle.LiveData: java.lang.Object mDataLock> = $r2;

        $r3 = new androidx.arch.core.internal.SafeIterableMap;

        specialinvoke $r3.<androidx.arch.core.internal.SafeIterableMap: void <init>()>();

        r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers> = $r3;

        r0.<androidx.lifecycle.LiveData: int mActiveCount> = 0;

        $r4 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        r0.<androidx.lifecycle.LiveData: java.lang.Object mPendingData> = $r4;

        $r5 = new androidx.lifecycle.LiveData$1;

        specialinvoke $r5.<androidx.lifecycle.LiveData$1: void <init>(androidx.lifecycle.LiveData)>(r0);

        r0.<androidx.lifecycle.LiveData: java.lang.Runnable mPostValueRunnable> = $r5;

        r0.<androidx.lifecycle.LiveData: java.lang.Object mData> = r1;

        r0.<androidx.lifecycle.LiveData: int mVersion> = 0;

        return;
    }

    public void <init>()
    {
        androidx.lifecycle.LiveData r0;
        java.lang.Object $r1, $r3, $r5;
        androidx.arch.core.internal.SafeIterableMap $r2;
        androidx.lifecycle.LiveData$1 $r4;

        r0 := @this: androidx.lifecycle.LiveData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<androidx.lifecycle.LiveData: java.lang.Object mDataLock> = $r1;

        $r2 = new androidx.arch.core.internal.SafeIterableMap;

        specialinvoke $r2.<androidx.arch.core.internal.SafeIterableMap: void <init>()>();

        r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers> = $r2;

        r0.<androidx.lifecycle.LiveData: int mActiveCount> = 0;

        $r3 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        r0.<androidx.lifecycle.LiveData: java.lang.Object mPendingData> = $r3;

        $r4 = new androidx.lifecycle.LiveData$1;

        specialinvoke $r4.<androidx.lifecycle.LiveData$1: void <init>(androidx.lifecycle.LiveData)>(r0);

        r0.<androidx.lifecycle.LiveData: java.lang.Runnable mPostValueRunnable> = $r4;

        $r5 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        r0.<androidx.lifecycle.LiveData: java.lang.Object mData> = $r5;

        r0.<androidx.lifecycle.LiveData: int mVersion> = -1;

        return;
    }

    private void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)
    {
        androidx.lifecycle.LiveData r0;
        androidx.lifecycle.LiveData$ObserverWrapper r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        androidx.lifecycle.Observer $r3;

        r0 := @this: androidx.lifecycle.LiveData;

        r1 := @parameter0: androidx.lifecycle.LiveData$ObserverWrapper;

        $z0 = r1.<androidx.lifecycle.LiveData$ObserverWrapper: boolean mActive>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r1.<androidx.lifecycle.LiveData$ObserverWrapper: boolean shouldBeActive()>();

        if $z1 != 0 goto label2;

        virtualinvoke r1.<androidx.lifecycle.LiveData$ObserverWrapper: void activeStateChanged(boolean)>(0);

        return;

     label2:
        $i1 = r1.<androidx.lifecycle.LiveData$ObserverWrapper: int mLastVersion>;

        $i0 = r0.<androidx.lifecycle.LiveData: int mVersion>;

        if $i1 < $i0 goto label3;

        return;

     label3:
        $i2 = r0.<androidx.lifecycle.LiveData: int mVersion>;

        r1.<androidx.lifecycle.LiveData$ObserverWrapper: int mLastVersion> = $i2;

        $r3 = r1.<androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.Observer mObserver>;

        $r2 = r0.<androidx.lifecycle.LiveData: java.lang.Object mData>;

        interfaceinvoke $r3.<androidx.lifecycle.Observer: void onChanged(java.lang.Object)>($r2);

        return;
    }

    void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)
    {
        androidx.lifecycle.LiveData r0;
        androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions r1;
        boolean $z0, $z1, $z2, $z3;
        androidx.arch.core.internal.SafeIterableMap $r2;
        java.lang.Object $r3, $r5;
        java.util.Map$Entry $r4;
        androidx.lifecycle.LiveData$ObserverWrapper $r6, r7;

        r0 := @this: androidx.lifecycle.LiveData;

        r7 := @parameter0: androidx.lifecycle.LiveData$ObserverWrapper;

        $z0 = r0.<androidx.lifecycle.LiveData: boolean mDispatchingValue>;

        if $z0 == 0 goto label1;

        r0.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated> = 1;

        return;

     label1:
        r0.<androidx.lifecycle.LiveData: boolean mDispatchingValue> = 1;

     label2:
        r0.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated> = 0;

        if r7 == null goto label3;

        specialinvoke r0.<androidx.lifecycle.LiveData: void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)>(r7);

        r7 = null;

        goto label5;

     label3:
        $r2 = r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        r1 = virtualinvoke $r2.<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>();

     label4:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r6 = (androidx.lifecycle.LiveData$ObserverWrapper) $r5;

        specialinvoke r0.<androidx.lifecycle.LiveData: void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)>($r6);

        $z2 = r0.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated>;

        if $z2 == 0 goto label4;

        goto label5;

     label5:
        $z3 = r0.<androidx.lifecycle.LiveData: boolean mDispatchInvalidated>;

        if $z3 != 0 goto label2;

        r0.<androidx.lifecycle.LiveData: boolean mDispatchingValue> = 0;

        return;
    }

    public void observe(androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.lifecycle.Observer r2;
        androidx.lifecycle.LiveData$LifecycleBoundObserver r3, r13;
        androidx.lifecycle.LiveData$ObserverWrapper r4;
        androidx.lifecycle.Lifecycle $r5, $r11;
        androidx.lifecycle.Lifecycle$State $r6, $r7;
        androidx.arch.core.internal.SafeIterableMap $r9;
        java.lang.Object $r10;
        boolean $z0;
        java.lang.IllegalArgumentException r14;
        androidx.lifecycle.LifecycleObserver r15;

        r0 := @this: androidx.lifecycle.LiveData;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        r2 := @parameter1: androidx.lifecycle.Observer;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("observe");

        $r5 = interfaceinvoke r1.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r6 = virtualinvoke $r5.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r7 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if $r6 != $r7 goto label1;

        return;

     label1:
        r13 = new androidx.lifecycle.LiveData$LifecycleBoundObserver;

        specialinvoke r13.<androidx.lifecycle.LiveData$LifecycleBoundObserver: void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer)>(r0, r1, r2);

        r3 = r13;

        $r9 = r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $r10 = virtualinvoke $r9.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r2, r3);

        r4 = (androidx.lifecycle.LiveData$ObserverWrapper) $r10;

        if r4 == null goto label2;

        $z0 = virtualinvoke r4.<androidx.lifecycle.LiveData$ObserverWrapper: boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)>(r1);

        if $z0 != 0 goto label2;

        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add the same observer with different lifecycles");

        throw r14;

     label2:
        if r4 == null goto label3;

        return;

     label3:
        $r11 = interfaceinvoke r1.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        r15 = (androidx.lifecycle.LifecycleObserver) r3;

        virtualinvoke $r11.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>(r15);

        return;
    }

    public void observeForever(androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData r0;
        androidx.lifecycle.Observer r1;
        androidx.lifecycle.LiveData$AlwaysActiveObserver r2, $r4;
        androidx.lifecycle.LiveData$ObserverWrapper r3;
        androidx.arch.core.internal.SafeIterableMap $r5;
        java.lang.Object $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: androidx.lifecycle.LiveData;

        r1 := @parameter0: androidx.lifecycle.Observer;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("observeForever");

        $r4 = new androidx.lifecycle.LiveData$AlwaysActiveObserver;

        specialinvoke $r4.<androidx.lifecycle.LiveData$AlwaysActiveObserver: void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.Observer)>(r0, r1);

        r2 = $r4;

        $r5 = r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $r6 = virtualinvoke $r5.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r2);

        r3 = (androidx.lifecycle.LiveData$ObserverWrapper) $r6;

        $z0 = r3 instanceof androidx.lifecycle.LiveData$LifecycleBoundObserver;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add the same observer with different lifecycles");

        throw $r7;

     label1:
        if r3 == null goto label2;

        return;

     label2:
        virtualinvoke r2.<androidx.lifecycle.LiveData$AlwaysActiveObserver: void activeStateChanged(boolean)>(1);

        return;
    }

    public void removeObserver(androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData r0;
        androidx.lifecycle.Observer r1;
        androidx.lifecycle.LiveData$ObserverWrapper r2;
        androidx.arch.core.internal.SafeIterableMap $r3;
        java.lang.Object $r4;

        r0 := @this: androidx.lifecycle.LiveData;

        r1 := @parameter0: androidx.lifecycle.Observer;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("removeObserver");

        $r3 = r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $r4 = virtualinvoke $r3.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object remove(java.lang.Object)>(r1);

        r2 = (androidx.lifecycle.LiveData$ObserverWrapper) $r4;

        if r2 != null goto label1;

        return;

     label1:
        virtualinvoke r2.<androidx.lifecycle.LiveData$ObserverWrapper: void detachObserver()>();

        virtualinvoke r2.<androidx.lifecycle.LiveData$ObserverWrapper: void activeStateChanged(boolean)>(0);

        return;
    }

    public void removeObservers(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LiveData r0;
        androidx.lifecycle.LifecycleOwner r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        androidx.arch.core.internal.SafeIterableMap $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r6, $r8;
        androidx.lifecycle.LiveData$ObserverWrapper $r7;
        androidx.lifecycle.Observer $r9;

        r0 := @this: androidx.lifecycle.LiveData;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("removeObservers");

        $r4 = r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        r2 = virtualinvoke $r4.<androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (androidx.lifecycle.LiveData$ObserverWrapper) $r6;

        $z1 = virtualinvoke $r7.<androidx.lifecycle.LiveData$ObserverWrapper: boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)>(r1);

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (androidx.lifecycle.Observer) $r8;

        virtualinvoke r0.<androidx.lifecycle.LiveData: void removeObserver(androidx.lifecycle.Observer)>($r9);

     label2:
        goto label1;

     label3:
        return;
    }

    protected void postValue(java.lang.Object)
    {
        androidx.lifecycle.LiveData r0;
        java.lang.Object r1, r2, $r3, $r4, $r5;
        boolean z0, $z1;
        androidx.arch.core.executor.ArchTaskExecutor $r6;
        java.lang.Runnable $r7;

        r0 := @this: androidx.lifecycle.LiveData;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<androidx.lifecycle.LiveData: java.lang.Object mDataLock>;

        r2 = $r3;

        entermonitor $r3;

        $r5 = r0.<androidx.lifecycle.LiveData: java.lang.Object mPendingData>;

        $r4 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        if $r5 != $r4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        r0.<androidx.lifecycle.LiveData: java.lang.Object mPendingData> = r1;

        exitmonitor r2;

        goto label3;

     label3:
        if z0 != 0 goto label4;

        return;

     label4:
        $r6 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $r7 = r0.<androidx.lifecycle.LiveData: java.lang.Runnable mPostValueRunnable>;

        virtualinvoke $r6.<androidx.arch.core.executor.ArchTaskExecutor: void postToMainThread(java.lang.Runnable)>($r7);

        return;
    }

    protected void setValue(java.lang.Object)
    {
        androidx.lifecycle.LiveData r0;
        java.lang.Object r1;
        int $i0, $i1;

        r0 := @this: androidx.lifecycle.LiveData;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("setValue");

        $i0 = r0.<androidx.lifecycle.LiveData: int mVersion>;

        $i1 = $i0 + 1;

        r0.<androidx.lifecycle.LiveData: int mVersion> = $i1;

        r0.<androidx.lifecycle.LiveData: java.lang.Object mData> = r1;

        virtualinvoke r0.<androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)>(null);

        return;
    }

    public java.lang.Object getValue()
    {
        androidx.lifecycle.LiveData r0;
        java.lang.Object r1, $r2;

        r0 := @this: androidx.lifecycle.LiveData;

        r1 = r0.<androidx.lifecycle.LiveData: java.lang.Object mData>;

        $r2 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        if r1 == $r2 goto label1;

        return r1;

     label1:
        return null;
    }

    public boolean isInitialized()
    {
        androidx.lifecycle.LiveData r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.lifecycle.LiveData;

        $r2 = r0.<androidx.lifecycle.LiveData: java.lang.Object mData>;

        $r1 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        if $r2 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    int getVersion()
    {
        androidx.lifecycle.LiveData r0;
        int $i0;

        r0 := @this: androidx.lifecycle.LiveData;

        $i0 = r0.<androidx.lifecycle.LiveData: int mVersion>;

        return $i0;
    }

    protected void onActive()
    {
        androidx.lifecycle.LiveData r0;

        r0 := @this: androidx.lifecycle.LiveData;

        return;
    }

    protected void onInactive()
    {
        androidx.lifecycle.LiveData r0;

        r0 := @this: androidx.lifecycle.LiveData;

        return;
    }

    public boolean hasObservers()
    {
        androidx.lifecycle.LiveData r0;
        androidx.arch.core.internal.SafeIterableMap $r1;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.lifecycle.LiveData;

        $r1 = r0.<androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers>;

        $i0 = virtualinvoke $r1.<androidx.arch.core.internal.SafeIterableMap: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasActiveObservers()
    {
        androidx.lifecycle.LiveData r0;
        int $i0;
        boolean $z0;

        r0 := @this: androidx.lifecycle.LiveData;

        $i0 = r0.<androidx.lifecycle.LiveData: int mActiveCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void changeActiveCounter(int)
    {
        androidx.lifecycle.LiveData r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.Throwable r1, $r2;

        r0 := @this: androidx.lifecycle.LiveData;

        i0 := @parameter0: int;

        i6 = r0.<androidx.lifecycle.LiveData: int mActiveCount>;

        $i1 = r0.<androidx.lifecycle.LiveData: int mActiveCount>;

        $i2 = $i1 + i0;

        r0.<androidx.lifecycle.LiveData: int mActiveCount> = $i2;

        $z2 = r0.<androidx.lifecycle.LiveData: boolean mChangingActiveState>;

        if $z2 == 0 goto label01;

        return;

     label01:
        r0.<androidx.lifecycle.LiveData: boolean mChangingActiveState> = 1;

     label02:
        $i3 = r0.<androidx.lifecycle.LiveData: int mActiveCount>;

        if i6 == $i3 goto label09;

        if i6 != 0 goto label03;

        $i5 = r0.<androidx.lifecycle.LiveData: int mActiveCount>;

        if $i5 <= 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        z0 = $z3;

        if i6 <= 0 goto label05;

        $i4 = r0.<androidx.lifecycle.LiveData: int mActiveCount>;

        if $i4 != 0 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        z1 = $z4;

        i6 = r0.<androidx.lifecycle.LiveData: int mActiveCount>;

        if z0 == 0 goto label07;

        virtualinvoke r0.<androidx.lifecycle.LiveData: void onActive()>();

        goto label08;

     label07:
        if z1 == 0 goto label08;

        virtualinvoke r0.<androidx.lifecycle.LiveData: void onInactive()>();

     label08:
        goto label02;

     label09:
        r0.<androidx.lifecycle.LiveData: boolean mChangingActiveState> = 0;

        goto label12;

     label10:
        $r2 := @caughtexception;

        r1 = $r2;

     label11:
        r0.<androidx.lifecycle.LiveData: boolean mChangingActiveState> = 0;

        throw r1;

     label12:
        return;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    static void assertMainThread(java.lang.String)
    {
        java.lang.String r0, $r7;
        androidx.arch.core.executor.ArchTaskExecutor $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $z0 = virtualinvoke $r1.<androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot invoke ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on a background thread");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <androidx.lifecycle.LiveData: java.lang.Object NOT_SET> = $r0;

        return;
    }

androidx.lifecycle.LiveData$1
<androidx.lifecycle.LiveData$1: androidx.lifecycle.LiveData this$0>
    void <init>(androidx.lifecycle.LiveData)
    {
        androidx.lifecycle.LiveData$1 r0;
        androidx.lifecycle.LiveData r1;

        r0 := @this: androidx.lifecycle.LiveData$1;

        r1 := @parameter0: androidx.lifecycle.LiveData;

        r0.<androidx.lifecycle.LiveData$1: androidx.lifecycle.LiveData this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.lifecycle.LiveData$1 r0;
        java.lang.Object r1, r2, $r4, $r6;
        androidx.lifecycle.LiveData $r3, $r5, $r7, $r8;

        r0 := @this: androidx.lifecycle.LiveData$1;

        $r3 = r0.<androidx.lifecycle.LiveData$1: androidx.lifecycle.LiveData this$0>;

        $r4 = $r3.<androidx.lifecycle.LiveData: java.lang.Object mDataLock>;

        r2 = $r4;

        entermonitor $r4;

        $r5 = r0.<androidx.lifecycle.LiveData$1: androidx.lifecycle.LiveData this$0>;

        r1 = $r5.<androidx.lifecycle.LiveData: java.lang.Object mPendingData>;

        $r7 = r0.<androidx.lifecycle.LiveData$1: androidx.lifecycle.LiveData this$0>;

        $r6 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET>;

        $r7.<androidx.lifecycle.LiveData: java.lang.Object mPendingData> = $r6;

        exitmonitor r2;

        goto label1;

     label1:
        $r8 = r0.<androidx.lifecycle.LiveData$1: androidx.lifecycle.LiveData this$0>;

        virtualinvoke $r8.<androidx.lifecycle.LiveData: void setValue(java.lang.Object)>(r1);

        return;
    }

androidx.lifecycle.LiveData$AlwaysActiveObserver
<androidx.lifecycle.LiveData$AlwaysActiveObserver: androidx.lifecycle.LiveData this$0>
    void <init>(androidx.lifecycle.LiveData, androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData$AlwaysActiveObserver r0;
        androidx.lifecycle.LiveData r1;
        androidx.lifecycle.Observer r2;

        r0 := @this: androidx.lifecycle.LiveData$AlwaysActiveObserver;

        r1 := @parameter0: androidx.lifecycle.LiveData;

        r2 := @parameter1: androidx.lifecycle.Observer;

        r0.<androidx.lifecycle.LiveData$AlwaysActiveObserver: androidx.lifecycle.LiveData this$0> = r1;

        specialinvoke r0.<androidx.lifecycle.LiveData$ObserverWrapper: void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.Observer)>(r1, r2);

        return;
    }

    boolean shouldBeActive()
    {
        androidx.lifecycle.LiveData$AlwaysActiveObserver r0;

        r0 := @this: androidx.lifecycle.LiveData$AlwaysActiveObserver;

        return 1;
    }

androidx.lifecycle.LiveData$LifecycleBoundObserver
<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LifecycleOwner mOwner>
<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LiveData this$0>
    void <init>(androidx.lifecycle.LiveData, androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData$LifecycleBoundObserver r0;
        androidx.lifecycle.LiveData r1;
        androidx.lifecycle.LifecycleOwner r2;
        androidx.lifecycle.Observer r3;

        r0 := @this: androidx.lifecycle.LiveData$LifecycleBoundObserver;

        r1 := @parameter0: androidx.lifecycle.LiveData;

        r2 := @parameter1: androidx.lifecycle.LifecycleOwner;

        r3 := @parameter2: androidx.lifecycle.Observer;

        r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LiveData this$0> = r1;

        specialinvoke r0.<androidx.lifecycle.LiveData$ObserverWrapper: void <init>(androidx.lifecycle.LiveData,androidx.lifecycle.Observer)>(r1, r3);

        r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LifecycleOwner mOwner> = r2;

        return;
    }

    boolean shouldBeActive()
    {
        androidx.lifecycle.LiveData$LifecycleBoundObserver r0;
        androidx.lifecycle.LifecycleOwner $r1;
        androidx.lifecycle.Lifecycle $r2;
        androidx.lifecycle.Lifecycle$State $r3, $r4;
        boolean $z0;

        r0 := @this: androidx.lifecycle.LiveData$LifecycleBoundObserver;

        $r1 = r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LifecycleOwner mOwner>;

        $r2 = interfaceinvoke $r1.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        $r3 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED>;

        $z0 = virtualinvoke $r3.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r4);

        return $z0;
    }

    public void onStateChanged(androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Lifecycle$Event)
    {
        androidx.lifecycle.LiveData$LifecycleBoundObserver r0;
        androidx.lifecycle.LifecycleOwner r1, $r3, $r6;
        androidx.lifecycle.Lifecycle$Event r2;
        androidx.lifecycle.Lifecycle $r4, $r7;
        androidx.lifecycle.Lifecycle$State $r5, r10, r11;
        boolean $z0;
        androidx.lifecycle.Observer $r8;
        androidx.lifecycle.LiveData $r9;

        r0 := @this: androidx.lifecycle.LiveData$LifecycleBoundObserver;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        r2 := @parameter1: androidx.lifecycle.Lifecycle$Event;

        $r3 = r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LifecycleOwner mOwner>;

        $r4 = interfaceinvoke $r3.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        r10 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        $r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED>;

        if r10 != $r5 goto label1;

        $r9 = r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LiveData this$0>;

        $r8 = r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.Observer mObserver>;

        virtualinvoke $r9.<androidx.lifecycle.LiveData: void removeObserver(androidx.lifecycle.Observer)>($r8);

        return;

     label1:
        r11 = null;

     label2:
        if r11 == r10 goto label3;

        r11 = r10;

        $z0 = virtualinvoke r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: boolean shouldBeActive()>();

        virtualinvoke r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: void activeStateChanged(boolean)>($z0);

        $r6 = r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LifecycleOwner mOwner>;

        $r7 = interfaceinvoke $r6.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        r10 = virtualinvoke $r7.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>();

        goto label2;

     label3:
        return;
    }

    boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LiveData$LifecycleBoundObserver r0;
        androidx.lifecycle.LifecycleOwner r1, $r2;
        boolean $z0;

        r0 := @this: androidx.lifecycle.LiveData$LifecycleBoundObserver;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        $r2 = r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LifecycleOwner mOwner>;

        if $r2 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void detachObserver()
    {
        androidx.lifecycle.LiveData$LifecycleBoundObserver r0;
        androidx.lifecycle.LifecycleOwner $r1;
        androidx.lifecycle.Lifecycle $r2;
        androidx.lifecycle.LifecycleObserver r3;

        r0 := @this: androidx.lifecycle.LiveData$LifecycleBoundObserver;

        $r1 = r0.<androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LifecycleOwner mOwner>;

        $r2 = interfaceinvoke $r1.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        r3 = (androidx.lifecycle.LifecycleObserver) r0;

        virtualinvoke $r2.<androidx.lifecycle.Lifecycle: void removeObserver(androidx.lifecycle.LifecycleObserver)>(r3);

        return;
    }

androidx.lifecycle.LiveData$ObserverWrapper
<androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.Observer mObserver>
<androidx.lifecycle.LiveData$ObserverWrapper: boolean mActive>
<androidx.lifecycle.LiveData$ObserverWrapper: int mLastVersion>
<androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.LiveData this$0>
    void <init>(androidx.lifecycle.LiveData, androidx.lifecycle.Observer)
    {
        androidx.lifecycle.LiveData$ObserverWrapper r0;
        androidx.lifecycle.LiveData r1;
        androidx.lifecycle.Observer r2;

        r0 := @this: androidx.lifecycle.LiveData$ObserverWrapper;

        r1 := @parameter0: androidx.lifecycle.LiveData;

        r2 := @parameter1: androidx.lifecycle.Observer;

        r0.<androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.LiveData this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.lifecycle.LiveData$ObserverWrapper: int mLastVersion> = -1;

        r0.<androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.Observer mObserver> = r2;

        return;
    }

<androidx.lifecycle.LiveData$ObserverWrapper: boolean shouldBeActive()>
    boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)
    {
        androidx.lifecycle.LiveData$ObserverWrapper r0;
        androidx.lifecycle.LifecycleOwner r1;

        r0 := @this: androidx.lifecycle.LiveData$ObserverWrapper;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        return 0;
    }

    void detachObserver()
    {
        androidx.lifecycle.LiveData$ObserverWrapper r0;

        r0 := @this: androidx.lifecycle.LiveData$ObserverWrapper;

        return;
    }

    void activeStateChanged(boolean)
    {
        androidx.lifecycle.LiveData$ObserverWrapper r0;
        boolean z0, $z1, $z2, $z3;
        androidx.lifecycle.LiveData $r1, $r2;
        byte $b0;

        r0 := @this: androidx.lifecycle.LiveData$ObserverWrapper;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.lifecycle.LiveData$ObserverWrapper: boolean mActive>;

        if z0 != $z1 goto label1;

        return;

     label1:
        r0.<androidx.lifecycle.LiveData$ObserverWrapper: boolean mActive> = z0;

        $r1 = r0.<androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.LiveData this$0>;

        $z2 = r0.<androidx.lifecycle.LiveData$ObserverWrapper: boolean mActive>;

        if $z2 == 0 goto label2;

        $b0 = 1;

        goto label3;

     label2:
        $b0 = -1;

     label3:
        virtualinvoke $r1.<androidx.lifecycle.LiveData: void changeActiveCounter(int)>($b0);

        $z3 = r0.<androidx.lifecycle.LiveData$ObserverWrapper: boolean mActive>;

        if $z3 == 0 goto label4;

        $r2 = r0.<androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.LiveData this$0>;

        virtualinvoke $r2.<androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)>(r0);

     label4:
        return;
    }

