androidx.work.multiprocess.parcelable.ParcelableConstraints
<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>
<androidx.work.multiprocess.parcelable.ParcelableConstraints: android.os.Parcelable$Creator CREATOR>
    public void <init>(androidx.work.Constraints)
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints r0;
        androidx.work.Constraints r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints;

        r1 := @parameter0: androidx.work.Constraints;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints> = r1;

        return;
    }

    public void <init>(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints r0;
        android.os.Parcel r1;
        androidx.work.Constraints$Builder r2, $r5;
        androidx.work.NetworkType r3;
        boolean z0, z1, z2, $z3, $z4, z5, z6;
        java.util.Iterator r4;
        int $i0, $i1, $i2;
        java.util.concurrent.TimeUnit $r10, $r12;
        byte[] $r14;
        java.lang.Object $r15;
        android.net.Uri $r16;
        java.util.Set r19;
        androidx.work.Constraints$ContentUriTrigger r20;
        long l3, l4;
        androidx.work.Constraints $r21;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new androidx.work.Constraints$Builder;

        specialinvoke $r5.<androidx.work.Constraints$Builder: void <init>()>();

        r2 = $r5;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r3 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.NetworkType intToNetworkType(int)>($i0);

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiredNetworkType(androidx.work.NetworkType)>(r3);

        z0 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: boolean readBooleanValue(android.os.Parcel)>(r1);

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresBatteryNotLow(boolean)>(z0);

        z1 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: boolean readBooleanValue(android.os.Parcel)>(r1);

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresCharging(boolean)>(z1);

        z2 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: boolean readBooleanValue(android.os.Parcel)>(r1);

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresStorageNotLow(boolean)>(z2);

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 23 goto label1;

        z5 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: boolean readBooleanValue(android.os.Parcel)>(r1);

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setRequiresDeviceIdle(boolean)>(z5);

     label1:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 24 goto label4;

        z6 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: boolean readBooleanValue(android.os.Parcel)>(r1);

        if z6 == 0 goto label3;

        $r14 = virtualinvoke r1.<android.os.Parcel: byte[] createByteArray()>();

        r19 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: java.util.Set byteArrayToSetOfTriggers(byte[])>($r14);

        r4 = interfaceinvoke r19.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r20 = (androidx.work.Constraints$ContentUriTrigger) $r15;

        $r16 = virtualinvoke r20.<androidx.work.Constraints$ContentUriTrigger: android.net.Uri getUri()>();

        $z4 = virtualinvoke r20.<androidx.work.Constraints$ContentUriTrigger: boolean isTriggeredForDescendants()>();

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder addContentUriTrigger(android.net.Uri,boolean)>($r16, $z4);

        goto label2;

     label3:
        l3 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setTriggerContentMaxDelay(long,java.util.concurrent.TimeUnit)>(l3, $r10);

        l4 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        $r12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints$Builder setTriggerContentUpdateDelay(long,java.util.concurrent.TimeUnit)>(l4, $r12);

     label4:
        $r21 = virtualinvoke r2.<androidx.work.Constraints$Builder: androidx.work.Constraints build()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints> = $r21;

        return;
    }

    public int describeContents()
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1, $z2, $z3, $z4;
        byte[] r2;
        androidx.work.Constraints $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13;
        androidx.work.NetworkType $r4;
        long $l4, $l5;
        java.util.Set $r12;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r3 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        $r4 = virtualinvoke $r3.<androidx.work.Constraints: androidx.work.NetworkType getRequiredNetworkType()>();

        $i1 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: int networkTypeToInt(androidx.work.NetworkType)>($r4);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r5 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        $z1 = virtualinvoke $r5.<androidx.work.Constraints: boolean requiresBatteryNotLow()>();

        staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: void writeBooleanValue(android.os.Parcel,boolean)>(r1, $z1);

        $r6 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        $z2 = virtualinvoke $r6.<androidx.work.Constraints: boolean requiresCharging()>();

        staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: void writeBooleanValue(android.os.Parcel,boolean)>(r1, $z2);

        $r7 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        $z3 = virtualinvoke $r7.<androidx.work.Constraints: boolean requiresStorageNotLow()>();

        staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: void writeBooleanValue(android.os.Parcel,boolean)>(r1, $z3);

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 23 goto label1;

        $r13 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        $z4 = virtualinvoke $r13.<androidx.work.Constraints: boolean requiresDeviceIdle()>();

        staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: void writeBooleanValue(android.os.Parcel,boolean)>(r1, $z4);

     label1:
        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if $i3 < 24 goto label3;

        $r8 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        z0 = virtualinvoke $r8.<androidx.work.Constraints: boolean hasContentUriTriggers()>();

        staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: void writeBooleanValue(android.os.Parcel,boolean)>(r1, z0);

        if z0 == 0 goto label2;

        $r11 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        $r12 = virtualinvoke $r11.<androidx.work.Constraints: java.util.Set getContentUriTriggers()>();

        r2 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: byte[] setOfTriggersToByteArray(java.util.Set)>($r12);

        virtualinvoke r1.<android.os.Parcel: void writeByteArray(byte[])>(r2);

     label2:
        $r9 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        $l4 = virtualinvoke $r9.<androidx.work.Constraints: long getContentTriggerMaxDelayMillis()>();

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l4);

        $r10 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        $l5 = virtualinvoke $r10.<androidx.work.Constraints: long getContentTriggerUpdateDelayMillis()>();

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l5);

     label3:
        return;
    }

    public androidx.work.Constraints getConstraints()
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints r0;
        androidx.work.Constraints $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints mConstraints>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints$1 $r0;

        $r0 = new androidx.work.multiprocess.parcelable.ParcelableConstraints$1;

        specialinvoke $r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints$1: void <init>()>();

        <androidx.work.multiprocess.parcelable.ParcelableConstraints: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

androidx.work.multiprocess.parcelable.ParcelableConstraints$1
    void <init>()
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints$1 r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.work.multiprocess.parcelable.ParcelableConstraints createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableConstraints $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = new androidx.work.multiprocess.parcelable.ParcelableConstraints;

        specialinvoke $r2.<androidx.work.multiprocess.parcelable.ParcelableConstraints: void <init>(android.os.Parcel)>(r1);

        return $r2;
    }

    public androidx.work.multiprocess.parcelable.ParcelableConstraints[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableConstraints[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints$1;

        i0 := @parameter0: int;

        $r1 = newarray (androidx.work.multiprocess.parcelable.ParcelableConstraints)[i0];

        return $r1;
    }

    public volatile java.lang.Object[] newArray(int)
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints$1 r0;
        int i0;
        androidx.work.multiprocess.parcelable.ParcelableConstraints[] $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints$1;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints$1: androidx.work.multiprocess.parcelable.ParcelableConstraints[] newArray(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object createFromParcel(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableConstraints$1 r0;
        android.os.Parcel r1;
        androidx.work.multiprocess.parcelable.ParcelableConstraints $r2;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableConstraints$1;

        r1 := @parameter0: android.os.Parcel;

        $r2 = virtualinvoke r0.<androidx.work.multiprocess.parcelable.ParcelableConstraints$1: androidx.work.multiprocess.parcelable.ParcelableConstraints createFromParcel(android.os.Parcel)>(r1);

        return $r2;
    }

