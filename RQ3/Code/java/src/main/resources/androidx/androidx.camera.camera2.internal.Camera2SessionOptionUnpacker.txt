androidx.camera.camera2.internal.Camera2SessionOptionUnpacker
<androidx.camera.camera2.internal.Camera2SessionOptionUnpacker: androidx.camera.camera2.internal.Camera2SessionOptionUnpacker INSTANCE>
    void <init>()
    {
        androidx.camera.camera2.internal.Camera2SessionOptionUnpacker r0;

        r0 := @this: androidx.camera.camera2.internal.Camera2SessionOptionUnpacker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void unpack(androidx.camera.core.impl.UseCaseConfig, androidx.camera.core.impl.SessionConfig$Builder)
    {
        androidx.camera.camera2.internal.Camera2SessionOptionUnpacker r0;
        androidx.camera.core.impl.UseCaseConfig r1;
        androidx.camera.core.impl.SessionConfig$Builder r2;
        androidx.camera.core.impl.SessionConfig r3, $r6;
        androidx.camera.camera2.impl.Camera2ImplConfig r4, r37;
        androidx.camera.core.impl.MutableOptionsBundle r5;
        int $i0, i2;
        android.hardware.camera2.CameraDevice$StateCallback $r10, $r11;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r13, $r14;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback $r16, $r17;
        androidx.camera.camera2.internal.CaptureCallbackContainer $r18;
        androidx.camera.core.impl.Config$Option $r20, $r23, $r25;
        androidx.camera.camera2.impl.CameraEventCallbacks $r21, $r22;
        java.lang.String $r24;
        long $l1;
        java.lang.Long $r26;
        androidx.camera.camera2.interop.CaptureRequestOptions $r28;
        java.util.List $r30, $r32, $r34;
        java.lang.Object r36;
        androidx.camera.core.impl.Config r38, r39, r40;

        r0 := @this: androidx.camera.camera2.internal.Camera2SessionOptionUnpacker;

        r1 := @parameter0: androidx.camera.core.impl.UseCaseConfig;

        r2 := @parameter1: androidx.camera.core.impl.SessionConfig$Builder;

        r3 = interfaceinvoke r1.<androidx.camera.core.impl.UseCaseConfig: androidx.camera.core.impl.SessionConfig getDefaultSessionConfig(androidx.camera.core.impl.SessionConfig)>(null);

        r36 = staticinvoke <androidx.camera.core.impl.OptionsBundle: androidx.camera.core.impl.OptionsBundle emptyBundle()>();

        $r6 = staticinvoke <androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.SessionConfig defaultEmptySessionConfig()>();

        i2 = virtualinvoke $r6.<androidx.camera.core.impl.SessionConfig: int getTemplateType()>();

        if r3 == null goto label1;

        i2 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig: int getTemplateType()>();

        $r30 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig: java.util.List getDeviceStateCallbacks()>();

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addAllDeviceStateCallbacks(java.util.Collection)>($r30);

        $r32 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig: java.util.List getSessionStateCallbacks()>();

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addAllSessionStateCallbacks(java.util.List)>($r32);

        $r34 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig: java.util.List getRepeatingCameraCaptureCallbacks()>();

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addAllRepeatingCameraCaptureCallbacks(java.util.Collection)>($r34);

        r36 = virtualinvoke r3.<androidx.camera.core.impl.SessionConfig: androidx.camera.core.impl.Config getImplementationOptions()>();

     label1:
        r38 = (androidx.camera.core.impl.Config) r36;

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setImplementationOptions(androidx.camera.core.impl.Config)>(r38);

        r37 = new androidx.camera.camera2.impl.Camera2ImplConfig;

        r39 = (androidx.camera.core.impl.Config) r1;

        specialinvoke r37.<androidx.camera.camera2.impl.Camera2ImplConfig: void <init>(androidx.camera.core.impl.Config)>(r39);

        r4 = r37;

        $i0 = virtualinvoke r4.<androidx.camera.camera2.impl.Camera2ImplConfig: int getCaptureRequestTemplate(int)>(i2);

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder setTemplateType(int)>($i0);

        $r10 = staticinvoke <androidx.camera.camera2.internal.CameraDeviceStateCallbacks: android.hardware.camera2.CameraDevice$StateCallback createNoOpCallback()>();

        $r11 = virtualinvoke r4.<androidx.camera.camera2.impl.Camera2ImplConfig: android.hardware.camera2.CameraDevice$StateCallback getDeviceStateCallback(android.hardware.camera2.CameraDevice$StateCallback)>($r10);

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addDeviceStateCallback(android.hardware.camera2.CameraDevice$StateCallback)>($r11);

        $r13 = staticinvoke <androidx.camera.camera2.internal.CameraCaptureSessionStateCallbacks: android.hardware.camera2.CameraCaptureSession$StateCallback createNoOpCallback()>();

        $r14 = virtualinvoke r4.<androidx.camera.camera2.impl.Camera2ImplConfig: android.hardware.camera2.CameraCaptureSession$StateCallback getSessionStateCallback(android.hardware.camera2.CameraCaptureSession$StateCallback)>($r13);

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addSessionStateCallback(android.hardware.camera2.CameraCaptureSession$StateCallback)>($r14);

        $r16 = staticinvoke <androidx.camera.camera2.internal.Camera2CaptureCallbacks: android.hardware.camera2.CameraCaptureSession$CaptureCallback createNoOpCallback()>();

        $r17 = virtualinvoke r4.<androidx.camera.camera2.impl.Camera2ImplConfig: android.hardware.camera2.CameraCaptureSession$CaptureCallback getSessionCaptureCallback(android.hardware.camera2.CameraCaptureSession$CaptureCallback)>($r16);

        $r18 = staticinvoke <androidx.camera.camera2.internal.CaptureCallbackContainer: androidx.camera.camera2.internal.CaptureCallbackContainer create(android.hardware.camera2.CameraCaptureSession$CaptureCallback)>($r17);

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addCameraCaptureCallback(androidx.camera.core.impl.CameraCaptureCallback)>($r18);

        r5 = staticinvoke <androidx.camera.core.impl.MutableOptionsBundle: androidx.camera.core.impl.MutableOptionsBundle create()>();

        $r20 = <androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.core.impl.Config$Option CAMERA_EVENT_CALLBACK_OPTION>;

        $r21 = staticinvoke <androidx.camera.camera2.impl.CameraEventCallbacks: androidx.camera.camera2.impl.CameraEventCallbacks createEmptyCallback()>();

        $r22 = virtualinvoke r4.<androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.camera2.impl.CameraEventCallbacks getCameraEventCallback(androidx.camera.camera2.impl.CameraEventCallbacks)>($r21);

        virtualinvoke r5.<androidx.camera.core.impl.MutableOptionsBundle: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r20, $r22);

        $r23 = <androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.core.impl.Config$Option SESSION_PHYSICAL_CAMERA_ID_OPTION>;

        $r24 = virtualinvoke r4.<androidx.camera.camera2.impl.Camera2ImplConfig: java.lang.String getPhysicalCameraId(java.lang.String)>(null);

        virtualinvoke r5.<androidx.camera.core.impl.MutableOptionsBundle: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r23, $r24);

        $r25 = <androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.core.impl.Config$Option STREAM_USE_CASE_OPTION>;

        $l1 = virtualinvoke r4.<androidx.camera.camera2.impl.Camera2ImplConfig: long getStreamUseCase(long)>(-1L);

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke r5.<androidx.camera.core.impl.MutableOptionsBundle: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r25, $r26);

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addImplementationOptions(androidx.camera.core.impl.Config)>(r5);

        $r28 = virtualinvoke r4.<androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.camera2.interop.CaptureRequestOptions getCaptureRequestOptions()>();

        r40 = (androidx.camera.core.impl.Config) $r28;

        virtualinvoke r2.<androidx.camera.core.impl.SessionConfig$Builder: androidx.camera.core.impl.SessionConfig$Builder addImplementationOptions(androidx.camera.core.impl.Config)>(r40);

        return;
    }

    static void <clinit>()
    {
        androidx.camera.camera2.internal.Camera2SessionOptionUnpacker $r0;

        $r0 = new androidx.camera.camera2.internal.Camera2SessionOptionUnpacker;

        specialinvoke $r0.<androidx.camera.camera2.internal.Camera2SessionOptionUnpacker: void <init>()>();

        <androidx.camera.camera2.internal.Camera2SessionOptionUnpacker: androidx.camera.camera2.internal.Camera2SessionOptionUnpacker INSTANCE> = $r0;

        return;
    }

