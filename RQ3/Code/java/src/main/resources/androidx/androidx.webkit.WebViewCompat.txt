androidx.webkit.WebViewCompat
<androidx.webkit.WebViewCompat: android.net.Uri WILDCARD_URI>
<androidx.webkit.WebViewCompat: android.net.Uri EMPTY_URI>
    private void <init>()
    {
        androidx.webkit.WebViewCompat r0;

        r0 := @this: androidx.webkit.WebViewCompat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void postVisualStateCallback(android.webkit.WebView, long, androidx.webkit.WebViewCompat$VisualStateCallback)
    {
        android.webkit.WebView r0;
        long l0;
        androidx.webkit.WebViewCompat$VisualStateCallback r1;
        androidx.webkit.internal.WebViewFeatureInternal r2;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r3;
        androidx.webkit.internal.WebViewProviderAdapter $r4;
        androidx.webkit.WebViewCompat$1 $r5;

        r0 := @parameter0: android.webkit.WebView;

        l0 := @parameter1: long;

        r1 := @parameter2: androidx.webkit.WebViewCompat$VisualStateCallback;

        r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("VISUAL_STATE_CALLBACK");

        $z0 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r5 = new androidx.webkit.WebViewCompat$1;

        specialinvoke $r5.<androidx.webkit.WebViewCompat$1: void <init>(androidx.webkit.WebViewCompat$VisualStateCallback)>(r1);

        virtualinvoke r0.<android.webkit.WebView: void postVisualStateCallback(long,android.webkit.WebView$VisualStateCallback)>(l0, $r5);

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        staticinvoke <androidx.webkit.WebViewCompat: void checkThread(android.webkit.WebView)>(r0);

        $r4 = staticinvoke <androidx.webkit.WebViewCompat: androidx.webkit.internal.WebViewProviderAdapter getProvider(android.webkit.WebView)>(r0);

        virtualinvoke $r4.<androidx.webkit.internal.WebViewProviderAdapter: void insertVisualStateCallback(long,androidx.webkit.WebViewCompat$VisualStateCallback)>(l0, r1);

        goto label3;

     label2:
        $r3 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r3;

     label3:
        return;
    }

    public static void startSafeBrowsing(android.content.Context, android.webkit.ValueCallback)
    {
        android.content.Context r0;
        android.webkit.ValueCallback r1;
        androidx.webkit.internal.WebViewFeatureInternal r2;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r3;
        androidx.webkit.internal.WebViewProviderFactory $r4;
        org.chromium.support_lib_boundary.StaticsBoundaryInterface $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.webkit.ValueCallback;

        r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("START_SAFE_BROWSING");

        $z0 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.webkit.WebView: void startSafeBrowsing(android.content.Context,android.webkit.ValueCallback)>(r0, r1);

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r4 = staticinvoke <androidx.webkit.WebViewCompat: androidx.webkit.internal.WebViewProviderFactory getFactory()>();

        $r5 = interfaceinvoke $r4.<androidx.webkit.internal.WebViewProviderFactory: org.chromium.support_lib_boundary.StaticsBoundaryInterface getStatics()>();

        interfaceinvoke $r5.<org.chromium.support_lib_boundary.StaticsBoundaryInterface: void initSafeBrowsing(android.content.Context,android.webkit.ValueCallback)>(r0, r1);

        goto label3;

     label2:
        $r3 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r3;

     label3:
        return;
    }

    public static void setSafeBrowsingWhitelist(java.util.List, android.webkit.ValueCallback)
    {
        java.util.List r0;
        android.webkit.ValueCallback r1;
        androidx.webkit.internal.WebViewFeatureInternal r2;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r3;
        androidx.webkit.internal.WebViewProviderFactory $r4;
        org.chromium.support_lib_boundary.StaticsBoundaryInterface $r5;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: android.webkit.ValueCallback;

        r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("SAFE_BROWSING_WHITELIST");

        $z0 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.webkit.WebView: void setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)>(r0, r1);

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r4 = staticinvoke <androidx.webkit.WebViewCompat: androidx.webkit.internal.WebViewProviderFactory getFactory()>();

        $r5 = interfaceinvoke $r4.<androidx.webkit.internal.WebViewProviderFactory: org.chromium.support_lib_boundary.StaticsBoundaryInterface getStatics()>();

        interfaceinvoke $r5.<org.chromium.support_lib_boundary.StaticsBoundaryInterface: void setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)>(r0, r1);

        goto label3;

     label2:
        $r3 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r3;

     label3:
        return;
    }

    public static android.net.Uri getSafeBrowsingPrivacyPolicyUrl()
    {
        androidx.webkit.internal.WebViewFeatureInternal r0;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r1;
        androidx.webkit.internal.WebViewProviderFactory $r2;
        org.chromium.support_lib_boundary.StaticsBoundaryInterface $r3;
        android.net.Uri $r4, $r5;

        r0 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("SAFE_BROWSING_PRIVACY_POLICY_URL");

        $z0 = virtualinvoke r0.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <android.webkit.WebView: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()>();

        return $r5;

     label1:
        $z1 = virtualinvoke r0.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r2 = staticinvoke <androidx.webkit.WebViewCompat: androidx.webkit.internal.WebViewProviderFactory getFactory()>();

        $r3 = interfaceinvoke $r2.<androidx.webkit.internal.WebViewProviderFactory: org.chromium.support_lib_boundary.StaticsBoundaryInterface getStatics()>();

        $r4 = interfaceinvoke $r3.<org.chromium.support_lib_boundary.StaticsBoundaryInterface: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()>();

        return $r4;

     label2:
        $r1 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r1;
    }

    public static android.content.pm.PackageInfo getCurrentWebViewPackage(android.content.Context)
    {
        android.content.Context r0;
        int $i0, $i1;
        android.content.pm.PackageInfo $r1, $r2, r4;
        java.lang.Throwable $r3, r5;

        r0 := @parameter0: android.content.Context;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 21 goto label1;

        return null;

     label1:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 26 goto label2;

        $r2 = staticinvoke <android.webkit.WebView: android.content.pm.PackageInfo getCurrentWebViewPackage()>();

        return $r2;

     label2:
        r4 = staticinvoke <androidx.webkit.WebViewCompat: android.content.pm.PackageInfo getLoadedWebViewPackageInfo()>();

        if r4 == null goto label4;

     label3:
        return r4;

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        r5 = $r3;

        return null;

     label6:
        $r1 = staticinvoke <androidx.webkit.WebViewCompat: android.content.pm.PackageInfo getNotYetLoadedWebViewPackageInfo(android.content.Context)>(r0);

        return $r1;

        catch java.lang.ClassNotFoundException from label2 to label3 with label5;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label5;
        catch java.lang.NoSuchMethodException from label2 to label3 with label5;
    }

    private static android.content.pm.PackageInfo getLoadedWebViewPackageInfo() throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        java.lang.Class r0;
        java.lang.Class[] $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        android.content.pm.PackageInfo $r5;

        r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.webkit.WebViewFactory");

        $r1 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getLoadedPackageInfo", $r1);

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        $r5 = (android.content.pm.PackageInfo) $r4;

        return $r5;
    }

    private static android.content.pm.PackageInfo getNotYetLoadedWebViewPackageInfo(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Throwable r1, $r11, $r12, $r13, $r14, $r15, r19, r20, r21, r22;
        int $i0, $i1;
        java.lang.Class[] $r2, $r7;
        java.lang.reflect.Method $r3, $r8;
        java.lang.Object[] $r4, $r9;
        java.lang.Object $r5, $r10;
        android.content.pm.PackageInfo $r6;
        java.lang.Class r16, r18;
        java.lang.String r17;
        android.content.pm.PackageManager r23;

        r0 := @parameter0: android.content.Context;

     label01:
        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 21 goto label02;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 > 23 goto label02;

        r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.webkit.WebViewFactory");

        $r7 = newarray (java.lang.Class)[0];

        $r8 = virtualinvoke r16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getWebViewPackageName", $r7);

        $r9 = newarray (java.lang.Object)[0];

        $r10 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r9);

        r17 = (java.lang.String) $r10;

        goto label03;

     label02:
        r18 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.webkit.WebViewUpdateService");

        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke r18.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getCurrentWebViewPackageName", $r2);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        r17 = (java.lang.String) $r5;

     label03:
        goto label08;

     label04:
        $r14 := @caughtexception;

        r19 = $r14;

        return null;

     label05:
        $r13 := @caughtexception;

        r20 = $r13;

        return null;

     label06:
        $r15 := @caughtexception;

        r21 = $r15;

        return null;

     label07:
        $r12 := @caughtexception;

        r22 = $r12;

        return null;

     label08:
        if r17 != null goto label09;

        return null;

     label09:
        r23 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label10:
        $r6 = virtualinvoke r23.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r17, 0);

     label11:
        return $r6;

     label12:
        $r11 := @caughtexception;

        r1 = $r11;

        return null;

        catch java.lang.ClassNotFoundException from label01 to label03 with label04;
        catch java.lang.IllegalAccessException from label01 to label03 with label05;
        catch java.lang.reflect.InvocationTargetException from label01 to label03 with label06;
        catch java.lang.NoSuchMethodException from label01 to label03 with label07;
        catch android.content.pm.PackageManager$NameNotFoundException from label10 to label11 with label12;
    }

    private static androidx.webkit.internal.WebViewProviderAdapter getProvider(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        androidx.webkit.internal.WebViewProviderAdapter $r1;
        org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface $r2;

        r0 := @parameter0: android.webkit.WebView;

        $r1 = new androidx.webkit.internal.WebViewProviderAdapter;

        $r2 = staticinvoke <androidx.webkit.WebViewCompat: org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface createProvider(android.webkit.WebView)>(r0);

        specialinvoke $r1.<androidx.webkit.internal.WebViewProviderAdapter: void <init>(org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface)>($r2);

        return $r1;
    }

    public static androidx.webkit.WebMessagePortCompat[] createWebMessageChannel(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        androidx.webkit.internal.WebViewProviderAdapter $r3;
        androidx.webkit.WebMessagePortCompat[] $r4, $r6;
        android.webkit.WebMessagePort[] $r5;

        r0 := @parameter0: android.webkit.WebView;

        r1 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("CREATE_WEB_MESSAGE_CHANNEL");

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<android.webkit.WebView: android.webkit.WebMessagePort[] createWebMessageChannel()>();

        $r6 = staticinvoke <androidx.webkit.internal.WebMessagePortImpl: androidx.webkit.WebMessagePortCompat[] portsToCompat(android.webkit.WebMessagePort[])>($r5);

        return $r6;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <androidx.webkit.WebViewCompat: androidx.webkit.internal.WebViewProviderAdapter getProvider(android.webkit.WebView)>(r0);

        $r4 = virtualinvoke $r3.<androidx.webkit.internal.WebViewProviderAdapter: androidx.webkit.WebMessagePortCompat[] createWebMessageChannel()>();

        return $r4;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;
    }

    public static void postWebMessage(android.webkit.WebView, androidx.webkit.WebMessageCompat, android.net.Uri)
    {
        android.webkit.WebView r0;
        androidx.webkit.WebMessageCompat r1;
        androidx.webkit.internal.WebViewFeatureInternal r2;
        android.net.Uri $r3, r7;
        boolean $z0, $z1, $z2;
        java.lang.UnsupportedOperationException $r4;
        androidx.webkit.internal.WebViewProviderAdapter $r5;
        android.webkit.WebMessage $r6;

        r0 := @parameter0: android.webkit.WebView;

        r1 := @parameter1: androidx.webkit.WebMessageCompat;

        r7 := @parameter2: android.net.Uri;

        $r3 = <androidx.webkit.WebViewCompat: android.net.Uri WILDCARD_URI>;

        $z0 = virtualinvoke $r3.<android.net.Uri: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label1;

        r7 = <androidx.webkit.WebViewCompat: android.net.Uri EMPTY_URI>;

     label1:
        r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal getFeature(java.lang.String)>("POST_WEB_MESSAGE");

        $z1 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <androidx.webkit.internal.WebMessagePortImpl: android.webkit.WebMessage compatToFrameworkMessage(androidx.webkit.WebMessageCompat)>(r1);

        virtualinvoke r0.<android.webkit.WebView: void postWebMessage(android.webkit.WebMessage,android.net.Uri)>($r6, r7);

        goto label4;

     label2:
        $z2 = virtualinvoke r2.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z2 == 0 goto label3;

        $r5 = staticinvoke <androidx.webkit.WebViewCompat: androidx.webkit.internal.WebViewProviderAdapter getProvider(android.webkit.WebView)>(r0);

        virtualinvoke $r5.<androidx.webkit.internal.WebViewProviderAdapter: void postWebMessage(androidx.webkit.WebMessageCompat,android.net.Uri)>(r1, r7);

        goto label4;

     label3:
        $r4 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r4;

     label4:
        return;
    }

    private static androidx.webkit.internal.WebViewProviderFactory getFactory()
    {
        androidx.webkit.internal.WebViewProviderFactory $r0;

        $r0 = staticinvoke <androidx.webkit.internal.WebViewGlueCommunicator: androidx.webkit.internal.WebViewProviderFactory getFactory()>();

        return $r0;
    }

    private static org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface createProvider(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        androidx.webkit.internal.WebViewProviderFactory $r1;
        org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface $r2;

        r0 := @parameter0: android.webkit.WebView;

        $r1 = staticinvoke <androidx.webkit.WebViewCompat: androidx.webkit.internal.WebViewProviderFactory getFactory()>();

        $r2 = interfaceinvoke $r1.<androidx.webkit.internal.WebViewProviderFactory: org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface createWebView(android.webkit.WebView)>(r0);

        return $r2;
    }

    private static void checkThread(android.webkit.WebView)
    {
        android.webkit.WebView r0;
        int $i0;
        java.lang.Class[] $r1;
        java.lang.Class $r2;
        java.lang.Object[] $r3;
        android.os.Looper $r5, $r6, $r16, $r19, $r22;
        java.lang.RuntimeException $r7, $r27, $r29, $r31;
        java.lang.StringBuilder $r8, $r9, $r12, $r13, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24;
        java.lang.Thread $r10;
        java.lang.String $r11, $r25;
        java.lang.Throwable $r26, $r28, $r30, r33, r34, r35;
        java.lang.reflect.Method r32;

        r0 := @parameter0: android.webkit.WebView;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 28 goto label1;

        $r5 = virtualinvoke r0.<android.webkit.WebView: android.os.Looper getWebViewLooper()>();

        $r6 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r5 == $r6 goto label6;

        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A WebView method was called on thread \'");

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = virtualinvoke $r10.<java.lang.Thread: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("All WebView methods must be called on the same thread. ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Expected Looper ");

        $r16 = virtualinvoke r0.<android.webkit.WebView: android.os.Looper getWebViewLooper()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" called on ");

        $r19 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", FYI main Looper is ");

        $r22 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r25);

        throw $r7;

     label1:
        $r2 = class "Landroid/webkit/WebView;";

        $r1 = newarray (java.lang.Class)[0];

        r32 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("checkThread", $r1);

        virtualinvoke r32.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke r32.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r3);

     label2:
        goto label6;

     label3:
        $r26 := @caughtexception;

        r33 = $r26;

        $r27 = new java.lang.RuntimeException;

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r33);

        throw $r27;

     label4:
        $r30 := @caughtexception;

        r34 = $r30;

        $r31 = new java.lang.RuntimeException;

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r34);

        throw $r31;

     label5:
        $r28 := @caughtexception;

        r35 = $r28;

        $r29 = new java.lang.RuntimeException;

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r35);

        throw $r29;

     label6:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    static void <clinit>()
    {
        android.net.Uri $r0, $r1;

        $r0 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("*");

        <androidx.webkit.WebViewCompat: android.net.Uri WILDCARD_URI> = $r0;

        $r1 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("");

        <androidx.webkit.WebViewCompat: android.net.Uri EMPTY_URI> = $r1;

        return;
    }

