androidx.media3.exoplayer.drm.OfflineLicenseHelper
<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.common.Format FORMAT_WITH_EMPTY_DRM_INIT_DATA>
<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.ConditionVariable conditionVariable>
<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager>
<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.HandlerThread handlerThread>
<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher eventDispatcher>
    public static androidx.media3.exoplayer.drm.OfflineLicenseHelper newWidevineInstance(java.lang.String, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)
    {
        java.lang.String r0;
        androidx.media3.datasource.DataSource$Factory r1;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r2;
        androidx.media3.exoplayer.drm.OfflineLicenseHelper $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: androidx.media3.datasource.DataSource$Factory;

        r2 := @parameter2: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        $r3 = staticinvoke <androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.OfflineLicenseHelper newWidevineInstance(java.lang.String,boolean,androidx.media3.datasource.DataSource$Factory,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>(r0, 0, r1, r2);

        return $r3;
    }

    public static androidx.media3.exoplayer.drm.OfflineLicenseHelper newWidevineInstance(java.lang.String, boolean, androidx.media3.datasource.DataSource$Factory, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)
    {
        java.lang.String r0;
        boolean z0;
        androidx.media3.datasource.DataSource$Factory r1;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r2;
        androidx.media3.exoplayer.drm.OfflineLicenseHelper $r3;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: androidx.media3.datasource.DataSource$Factory;

        r2 := @parameter3: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        $r3 = staticinvoke <androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.OfflineLicenseHelper newWidevineInstance(java.lang.String,boolean,androidx.media3.datasource.DataSource$Factory,java.util.Map,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>(r0, z0, r1, null, r2);

        return $r3;
    }

    public static androidx.media3.exoplayer.drm.OfflineLicenseHelper newWidevineInstance(java.lang.String, boolean, androidx.media3.datasource.DataSource$Factory, java.util.Map, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)
    {
        java.lang.String r0;
        boolean z0;
        androidx.media3.datasource.DataSource$Factory r1;
        java.util.Map r2;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r3;
        androidx.media3.exoplayer.drm.OfflineLicenseHelper $r4;
        androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder $r5, $r6;
        androidx.media3.exoplayer.drm.HttpMediaDrmCallback $r7;
        androidx.media3.exoplayer.drm.DefaultDrmSessionManager $r8;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: androidx.media3.datasource.DataSource$Factory;

        r2 := @parameter3: java.util.Map;

        r3 := @parameter4: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        $r4 = new androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        $r5 = new androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder;

        specialinvoke $r5.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder: void <init>()>();

        $r6 = virtualinvoke $r5.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder: androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder setKeyRequestParameters(java.util.Map)>(r2);

        $r7 = new androidx.media3.exoplayer.drm.HttpMediaDrmCallback;

        specialinvoke $r7.<androidx.media3.exoplayer.drm.HttpMediaDrmCallback: void <init>(java.lang.String,boolean,androidx.media3.datasource.DataSource$Factory)>(r0, z0, r1);

        $r8 = virtualinvoke $r6.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder: androidx.media3.exoplayer.drm.DefaultDrmSessionManager build(androidx.media3.exoplayer.drm.MediaDrmCallback)>($r7);

        specialinvoke $r4.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: void <init>(androidx.media3.exoplayer.drm.DefaultDrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>($r8, r3);

        return $r4;
    }

    public void <init>(java.util.UUID, androidx.media3.exoplayer.drm.ExoMediaDrm$Provider, androidx.media3.exoplayer.drm.MediaDrmCallback, java.util.Map, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        java.util.UUID r1;
        androidx.media3.exoplayer.drm.ExoMediaDrm$Provider r2;
        androidx.media3.exoplayer.drm.MediaDrmCallback r3;
        java.util.Map r4;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r5;
        androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder $r6, $r7, $r8;
        androidx.media3.exoplayer.drm.DefaultDrmSessionManager $r9;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: androidx.media3.exoplayer.drm.ExoMediaDrm$Provider;

        r3 := @parameter2: androidx.media3.exoplayer.drm.MediaDrmCallback;

        r4 := @parameter3: java.util.Map;

        r5 := @parameter4: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        $r6 = new androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder;

        specialinvoke $r6.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder: void <init>()>();

        $r7 = virtualinvoke $r6.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder: androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder setUuidAndExoMediaDrmProvider(java.util.UUID,androidx.media3.exoplayer.drm.ExoMediaDrm$Provider)>(r1, r2);

        $r8 = virtualinvoke $r7.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder: androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder setKeyRequestParameters(java.util.Map)>(r4);

        $r9 = virtualinvoke $r8.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager$Builder: androidx.media3.exoplayer.drm.DefaultDrmSessionManager build(androidx.media3.exoplayer.drm.MediaDrmCallback)>(r3);

        specialinvoke r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: void <init>(androidx.media3.exoplayer.drm.DefaultDrmSessionManager,androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>($r9, r5);

        return;
    }

    public void <init>(androidx.media3.exoplayer.drm.DefaultDrmSessionManager, androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        androidx.media3.exoplayer.drm.DefaultDrmSessionManager r1;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher r2;
        androidx.media3.exoplayer.drm.OfflineLicenseHelper$1 r3, $r7;
        android.os.HandlerThread $r4, $r5, $r9;
        android.os.ConditionVariable $r6;
        android.os.Handler $r8;
        android.os.Looper $r10;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        r1 := @parameter0: androidx.media3.exoplayer.drm.DefaultDrmSessionManager;

        r2 := @parameter1: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager> = r1;

        r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher eventDispatcher> = r2;

        $r4 = new android.os.HandlerThread;

        specialinvoke $r4.<android.os.HandlerThread: void <init>(java.lang.String)>("ExoPlayer:OfflineLicenseHelper");

        r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.HandlerThread handlerThread> = $r4;

        $r5 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.HandlerThread handlerThread>;

        virtualinvoke $r5.<android.os.HandlerThread: void start()>();

        $r6 = new android.os.ConditionVariable;

        specialinvoke $r6.<android.os.ConditionVariable: void <init>()>();

        r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.ConditionVariable conditionVariable> = $r6;

        $r7 = new androidx.media3.exoplayer.drm.OfflineLicenseHelper$1;

        specialinvoke $r7.<androidx.media3.exoplayer.drm.OfflineLicenseHelper$1: void <init>(androidx.media3.exoplayer.drm.OfflineLicenseHelper)>(r0);

        r3 = $r7;

        $r8 = new android.os.Handler;

        $r9 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.HandlerThread handlerThread>;

        $r10 = virtualinvoke $r9.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r8.<android.os.Handler: void <init>(android.os.Looper)>($r10);

        virtualinvoke r2.<androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher: void addEventListener(android.os.Handler,androidx.media3.exoplayer.drm.DrmSessionEventListener)>($r8, r3);

        return;
    }

    public synchronized byte[] downloadLicense(androidx.media3.common.Format) throws androidx.media3.exoplayer.drm.DrmSession$DrmSessionException
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        androidx.media3.common.Format r1;
        androidx.media3.common.DrmInitData $r2;
        byte[] $r3;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        r1 := @parameter0: androidx.media3.common.Format;

        $r2 = r1.<androidx.media3.common.Format: androidx.media3.common.DrmInitData drmInitData>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z0);

        $r3 = specialinvoke r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: byte[] blockingKeyRequest(int,byte[],androidx.media3.common.Format)>(2, null, r1);

        return $r3;
    }

    public synchronized byte[] renewLicense(byte[]) throws androidx.media3.exoplayer.drm.DrmSession$DrmSessionException
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        byte[] r1, $r4;
        androidx.media3.common.Format $r3;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        r1 := @parameter0: byte[];

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = <androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.common.Format FORMAT_WITH_EMPTY_DRM_INIT_DATA>;

        $r4 = specialinvoke r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: byte[] blockingKeyRequest(int,byte[],androidx.media3.common.Format)>(2, r1, $r3);

        return $r4;
    }

    public synchronized void releaseLicense(byte[]) throws androidx.media3.exoplayer.drm.DrmSession$DrmSessionException
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        byte[] r1;
        androidx.media3.common.Format $r3;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        r1 := @parameter0: byte[];

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = <androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.common.Format FORMAT_WITH_EMPTY_DRM_INIT_DATA>;

        specialinvoke r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: byte[] blockingKeyRequest(int,byte[],androidx.media3.common.Format)>(3, r1, $r3);

        return;
    }

    public synchronized android.util.Pair getLicenseDurationRemainingSec(byte[]) throws androidx.media3.exoplayer.drm.DrmSession$DrmSessionException
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        byte[] r1;
        androidx.media3.exoplayer.drm.DrmSession r2;
        androidx.media3.exoplayer.drm.DrmSession$DrmSessionException r3;
        android.util.Pair r4, $r15, $r19;
        android.os.HandlerThread $r6;
        androidx.media3.exoplayer.drm.DefaultDrmSessionManager $r7, $r10, $r13;
        android.os.Looper $r8;
        androidx.media3.exoplayer.analytics.PlayerId $r9;
        androidx.media3.common.Format $r11;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher $r12;
        java.lang.Object $r14;
        java.lang.Throwable $r16, r20;
        boolean $z0;
        java.lang.Long $r17, $r18;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        r1 := @parameter0: byte[];

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r7 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager>;

        $r6 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.HandlerThread handlerThread>;

        $r8 = virtualinvoke $r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r9 = <androidx.media3.exoplayer.analytics.PlayerId: androidx.media3.exoplayer.analytics.PlayerId UNSET>;

        virtualinvoke $r7.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager: void setPlayer(android.os.Looper,androidx.media3.exoplayer.analytics.PlayerId)>($r8, $r9);

        $r10 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager>;

        virtualinvoke $r10.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager: void prepare()>();

        $r11 = <androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.common.Format FORMAT_WITH_EMPTY_DRM_INIT_DATA>;

        r2 = specialinvoke r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DrmSession openBlockingKeyRequest(int,byte[],androidx.media3.common.Format)>(1, r1, $r11);

        r3 = interfaceinvoke r2.<androidx.media3.exoplayer.drm.DrmSession: androidx.media3.exoplayer.drm.DrmSession$DrmSessionException getError()>();

        r4 = staticinvoke <androidx.media3.exoplayer.drm.WidevineUtil: android.util.Pair getLicenseDurationRemainingSec(androidx.media3.exoplayer.drm.DrmSession)>(r2);

        $r12 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher eventDispatcher>;

        interfaceinvoke r2.<androidx.media3.exoplayer.drm.DrmSession: void release(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>($r12);

        $r13 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager>;

        virtualinvoke $r13.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager: void release()>();

        if r3 == null goto label2;

        $r16 = virtualinvoke r3.<androidx.media3.exoplayer.drm.DrmSession$DrmSessionException: java.lang.Throwable getCause()>();

        $z0 = $r16 instanceof androidx.media3.exoplayer.drm.KeysExpiredException;

        if $z0 == 0 goto label1;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r19 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r17, $r18);

        return $r19;

     label1:
        r20 = (java.lang.Throwable) r3;

        throw r20;

     label2:
        $r14 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r15 = (android.util.Pair) $r14;

        return $r15;
    }

    public void release()
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        android.os.HandlerThread $r1;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        $r1 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.HandlerThread handlerThread>;

        virtualinvoke $r1.<android.os.HandlerThread: boolean quit()>();

        return;
    }

    private byte[] blockingKeyRequest(int, byte[], androidx.media3.common.Format) throws androidx.media3.exoplayer.drm.DrmSession$DrmSessionException
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        int i0;
        byte[] r1, r5, $r14;
        androidx.media3.common.Format r2;
        androidx.media3.exoplayer.drm.DrmSession r3;
        androidx.media3.exoplayer.drm.DrmSession$DrmSessionException r4;
        android.os.HandlerThread $r6;
        androidx.media3.exoplayer.drm.DefaultDrmSessionManager $r7, $r10, $r12;
        android.os.Looper $r8;
        androidx.media3.exoplayer.analytics.PlayerId $r9;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher $r11;
        java.lang.Object $r13;
        java.lang.Throwable r15;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: androidx.media3.common.Format;

        $r7 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager>;

        $r6 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.HandlerThread handlerThread>;

        $r8 = virtualinvoke $r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r9 = <androidx.media3.exoplayer.analytics.PlayerId: androidx.media3.exoplayer.analytics.PlayerId UNSET>;

        virtualinvoke $r7.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager: void setPlayer(android.os.Looper,androidx.media3.exoplayer.analytics.PlayerId)>($r8, $r9);

        $r10 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager>;

        virtualinvoke $r10.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager: void prepare()>();

        r3 = specialinvoke r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DrmSession openBlockingKeyRequest(int,byte[],androidx.media3.common.Format)>(i0, r1, r2);

        r4 = interfaceinvoke r3.<androidx.media3.exoplayer.drm.DrmSession: androidx.media3.exoplayer.drm.DrmSession$DrmSessionException getError()>();

        r5 = interfaceinvoke r3.<androidx.media3.exoplayer.drm.DrmSession: byte[] getOfflineLicenseKeySetId()>();

        $r11 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher eventDispatcher>;

        interfaceinvoke r3.<androidx.media3.exoplayer.drm.DrmSession: void release(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher)>($r11);

        $r12 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager>;

        virtualinvoke $r12.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager: void release()>();

        if r4 == null goto label1;

        r15 = (java.lang.Throwable) r4;

        throw r15;

     label1:
        $r13 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r14 = (byte[]) $r13;

        return $r14;
    }

    private androidx.media3.exoplayer.drm.DrmSession openBlockingKeyRequest(int, byte[], androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        int i0;
        byte[] r1;
        androidx.media3.common.Format r2;
        androidx.media3.exoplayer.drm.DrmSession r3, $r12;
        androidx.media3.common.DrmInitData $r4;
        androidx.media3.exoplayer.drm.DefaultDrmSessionManager $r6, $r9;
        android.os.ConditionVariable $r7, $r10;
        androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher $r8;
        java.lang.Object $r11;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: androidx.media3.common.Format;

        $r4 = r2.<androidx.media3.common.Format: androidx.media3.common.DrmInitData drmInitData>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r6 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager>;

        virtualinvoke $r6.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager: void setMode(int,byte[])>(i0, r1);

        $r7 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.ConditionVariable conditionVariable>;

        virtualinvoke $r7.<android.os.ConditionVariable: void close()>();

        $r9 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DefaultDrmSessionManager drmSessionManager>;

        $r8 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher eventDispatcher>;

        r3 = virtualinvoke $r9.<androidx.media3.exoplayer.drm.DefaultDrmSessionManager: androidx.media3.exoplayer.drm.DrmSession acquireSession(androidx.media3.exoplayer.drm.DrmSessionEventListener$EventDispatcher,androidx.media3.common.Format)>($r8, r2);

        $r10 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.ConditionVariable conditionVariable>;

        virtualinvoke $r10.<android.os.ConditionVariable: void block()>();

        $r11 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r12 = (androidx.media3.exoplayer.drm.DrmSession) $r11;

        return $r12;
    }

    static android.os.ConditionVariable access$000(androidx.media3.exoplayer.drm.OfflineLicenseHelper)
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r0;
        android.os.ConditionVariable $r1;

        r0 := @parameter0: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        $r1 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.ConditionVariable conditionVariable>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.media3.common.Format$Builder $r0, $r3;
        androidx.media3.common.DrmInitData $r1;
        androidx.media3.common.DrmInitData$SchemeData[] $r2;
        androidx.media3.common.Format $r4;

        $r0 = new androidx.media3.common.Format$Builder;

        specialinvoke $r0.<androidx.media3.common.Format$Builder: void <init>()>();

        $r1 = new androidx.media3.common.DrmInitData;

        $r2 = newarray (androidx.media3.common.DrmInitData$SchemeData)[0];

        specialinvoke $r1.<androidx.media3.common.DrmInitData: void <init>(androidx.media3.common.DrmInitData$SchemeData[])>($r2);

        $r3 = virtualinvoke $r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setDrmInitData(androidx.media3.common.DrmInitData)>($r1);

        $r4 = virtualinvoke $r3.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        <androidx.media3.exoplayer.drm.OfflineLicenseHelper: androidx.media3.common.Format FORMAT_WITH_EMPTY_DRM_INIT_DATA> = $r4;

        return;
    }

androidx.media3.exoplayer.drm.OfflineLicenseHelper$1
<androidx.media3.exoplayer.drm.OfflineLicenseHelper$1: androidx.media3.exoplayer.drm.OfflineLicenseHelper this$0>
    void <init>(androidx.media3.exoplayer.drm.OfflineLicenseHelper)
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper$1 r0;
        androidx.media3.exoplayer.drm.OfflineLicenseHelper r1;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper$1;

        r1 := @parameter0: androidx.media3.exoplayer.drm.OfflineLicenseHelper;

        r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper$1: androidx.media3.exoplayer.drm.OfflineLicenseHelper this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onDrmKeysLoaded(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper$1 r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.drm.OfflineLicenseHelper $r2;
        android.os.ConditionVariable $r3;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper$1;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r2 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper$1: androidx.media3.exoplayer.drm.OfflineLicenseHelper this$0>;

        $r3 = staticinvoke <androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.ConditionVariable access$000(androidx.media3.exoplayer.drm.OfflineLicenseHelper)>($r2);

        virtualinvoke $r3.<android.os.ConditionVariable: void open()>();

        return;
    }

    public void onDrmSessionManagerError(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId, java.lang.Exception)
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper$1 r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        java.lang.Exception r2;
        androidx.media3.exoplayer.drm.OfflineLicenseHelper $r3;
        android.os.ConditionVariable $r4;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper$1;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        r2 := @parameter2: java.lang.Exception;

        $r3 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper$1: androidx.media3.exoplayer.drm.OfflineLicenseHelper this$0>;

        $r4 = staticinvoke <androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.ConditionVariable access$000(androidx.media3.exoplayer.drm.OfflineLicenseHelper)>($r3);

        virtualinvoke $r4.<android.os.ConditionVariable: void open()>();

        return;
    }

    public void onDrmKeysRestored(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper$1 r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.drm.OfflineLicenseHelper $r2;
        android.os.ConditionVariable $r3;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper$1;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r2 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper$1: androidx.media3.exoplayer.drm.OfflineLicenseHelper this$0>;

        $r3 = staticinvoke <androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.ConditionVariable access$000(androidx.media3.exoplayer.drm.OfflineLicenseHelper)>($r2);

        virtualinvoke $r3.<android.os.ConditionVariable: void open()>();

        return;
    }

    public void onDrmKeysRemoved(int, androidx.media3.exoplayer.source.MediaSource$MediaPeriodId)
    {
        androidx.media3.exoplayer.drm.OfflineLicenseHelper$1 r0;
        int i0;
        androidx.media3.exoplayer.source.MediaSource$MediaPeriodId r1;
        androidx.media3.exoplayer.drm.OfflineLicenseHelper $r2;
        android.os.ConditionVariable $r3;

        r0 := @this: androidx.media3.exoplayer.drm.OfflineLicenseHelper$1;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.exoplayer.source.MediaSource$MediaPeriodId;

        $r2 = r0.<androidx.media3.exoplayer.drm.OfflineLicenseHelper$1: androidx.media3.exoplayer.drm.OfflineLicenseHelper this$0>;

        $r3 = staticinvoke <androidx.media3.exoplayer.drm.OfflineLicenseHelper: android.os.ConditionVariable access$000(androidx.media3.exoplayer.drm.OfflineLicenseHelper)>($r2);

        virtualinvoke $r3.<android.os.ConditionVariable: void open()>();

        return;
    }

