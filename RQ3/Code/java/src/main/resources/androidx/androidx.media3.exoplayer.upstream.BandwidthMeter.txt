androidx.media3.exoplayer.upstream.BandwidthMeter
<androidx.media3.exoplayer.upstream.BandwidthMeter: long getBitrateEstimate()>
    public long getTimeToFirstByteEstimateUs()
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter r0;

        r0 := @this: androidx.media3.exoplayer.upstream.BandwidthMeter;

        return -9223372036854775807L;
    }

<androidx.media3.exoplayer.upstream.BandwidthMeter: androidx.media3.datasource.TransferListener getTransferListener()>
<androidx.media3.exoplayer.upstream.BandwidthMeter: void addEventListener(android.os.Handler,androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener)>
<androidx.media3.exoplayer.upstream.BandwidthMeter: void removeEventListener(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener)>
androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener
<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: android.os.Handler handler>
<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener listener>
<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: boolean released>
    public void <init>(android.os.Handler, androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener)
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener r0;
        android.os.Handler r1;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener r2;

        r0 := @this: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: android.os.Handler handler> = r1;

        r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener listener> = r2;

        return;
    }

    public void release()
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener r0;

        r0 := @this: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener;

        r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: boolean released> = 1;

        return;
    }

    static androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener access$000(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener)
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener r0;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener $r1;

        r0 := @parameter0: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener;

        $r1 = r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener listener>;

        return $r1;
    }

    static boolean access$100(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener)
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener r0;
        boolean $z0;

        r0 := @parameter0: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener;

        $z0 = r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: boolean released>;

        return $z0;
    }

    static android.os.Handler access$200(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener)
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener r0;
        android.os.Handler $r1;

        r0 := @parameter0: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener;

        $r1 = r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: android.os.Handler handler>;

        return $r1;
    }

androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher
<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher: java.util.concurrent.CopyOnWriteArrayList listeners>
    public void <init>()
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @this: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher: java.util.concurrent.CopyOnWriteArrayList listeners> = $r1;

        return;
    }

    public void addListener(android.os.Handler, androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener)
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher r0;
        android.os.Handler r1;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener r2;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener $r5;
        java.util.concurrent.CopyOnWriteArrayList $r6;

        r0 := @this: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        virtualinvoke r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher: void removeListener(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener)>(r2);

        $r6 = r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher: java.util.concurrent.CopyOnWriteArrayList listeners>;

        $r5 = new androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener;

        specialinvoke $r5.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: void <init>(android.os.Handler,androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener)>(r1, r2);

        virtualinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>($r5);

        return;
    }

    public void removeListener(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener)
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher r0;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener r1, $r6;
        java.util.Iterator r2;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener r3;
        java.util.concurrent.CopyOnWriteArrayList $r4, $r7;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher;

        r1 := @parameter0: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener;

        $r4 = r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher: java.util.concurrent.CopyOnWriteArrayList listeners>;

        r2 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener) $r5;

        $r6 = staticinvoke <androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener access$000(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener)>(r3);

        if $r6 != r1 goto label2;

        virtualinvoke r3.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: void release()>();

        $r7 = r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher: java.util.concurrent.CopyOnWriteArrayList listeners>;

        virtualinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        return;
    }

    public void bandwidthSample(int, long, long)
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher r0;
        int i0;
        long l1, l2;
        java.util.Iterator r1;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener r2;
        java.util.concurrent.CopyOnWriteArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        android.os.Handler $r5;
        java.lang.Runnable $r6;

        r0 := @this: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r3 = r0.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher: java.util.concurrent.CopyOnWriteArrayList listeners>;

        r1 = virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener) $r4;

        $z1 = staticinvoke <androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: boolean access$100(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener)>(r2);

        if $z1 != 0 goto label2;

        $r5 = staticinvoke <androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: android.os.Handler access$200(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener)>(r2);

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener,int,long,long)>(r2, i0, l1, l2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher: void lambda$bandwidthSample$0(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener,int,long,long)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r5.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

     label2:
        goto label1;

     label3:
        return;
    }

    private static void lambda$bandwidthSample$0(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener, int, long, long)
    {
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener r0;
        int i0;
        long l1, l2;
        androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener $r1;

        r0 := @parameter0: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        $r1 = staticinvoke <androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener: androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener access$000(androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener$EventDispatcher$HandlerAndListener)>(r0);

        interfaceinvoke $r1.<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener: void onBandwidthSample(int,long,long)>(i0, l1, l2);

        return;
    }

androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener
<androidx.media3.exoplayer.upstream.BandwidthMeter$EventListener: void onBandwidthSample(int,long,long)>
