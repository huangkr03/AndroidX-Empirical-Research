androidx.media3.test.utils.CapturingAudioSink
<androidx.media3.test.utils.CapturingAudioSink: java.util.List interceptedData>
<androidx.media3.test.utils.CapturingAudioSink: java.nio.ByteBuffer currentBuffer>
    public void <init>(androidx.media3.exoplayer.audio.AudioSink)
    {
        androidx.media3.test.utils.CapturingAudioSink r0;
        androidx.media3.exoplayer.audio.AudioSink r1;
        java.util.ArrayList $r2;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink;

        r1 := @parameter0: androidx.media3.exoplayer.audio.AudioSink;

        specialinvoke r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: void <init>(androidx.media3.exoplayer.audio.AudioSink)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingAudioSink: java.util.List interceptedData> = $r2;

        return;
    }

    public void configure(androidx.media3.common.Format, int, int[]) throws androidx.media3.exoplayer.audio.AudioSink$ConfigurationException
    {
        androidx.media3.test.utils.CapturingAudioSink r0;
        androidx.media3.common.Format r1;
        int i0, $i1, $i2, $i3;
        int[] r2;
        androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration $r3;
        java.util.List $r4;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink;

        r1 := @parameter0: androidx.media3.common.Format;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        $r4 = r0.<androidx.media3.test.utils.CapturingAudioSink: java.util.List interceptedData>;

        $r3 = new androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration;

        $i3 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        $i2 = r1.<androidx.media3.common.Format: int channelCount>;

        $i1 = r1.<androidx.media3.common.Format: int sampleRate>;

        specialinvoke $r3.<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: void <init>(int,int,int)>($i3, $i2, $i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        specialinvoke r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: void configure(androidx.media3.common.Format,int,int[])>(r1, i0, r2);

        return;
    }

    public void handleDiscontinuity()
    {
        androidx.media3.test.utils.CapturingAudioSink r0;
        androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity $r1;
        java.util.List $r2;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink;

        $r2 = r0.<androidx.media3.test.utils.CapturingAudioSink: java.util.List interceptedData>;

        $r1 = new androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity;

        specialinvoke $r1.<androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity: void <init>(androidx.media3.test.utils.CapturingAudioSink$1)>(null);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        specialinvoke r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: void handleDiscontinuity()>();

        return;
    }

    public boolean handleBuffer(java.nio.ByteBuffer, long, int) throws androidx.media3.exoplayer.audio.AudioSink$InitializationException, androidx.media3.exoplayer.audio.AudioSink$WriteException
    {
        androidx.media3.test.utils.CapturingAudioSink r0;
        java.nio.ByteBuffer r1, $r2;
        long l0;
        int i1;
        boolean z0;
        androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer $r3;
        java.util.List $r4;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $r2 = r0.<androidx.media3.test.utils.CapturingAudioSink: java.nio.ByteBuffer currentBuffer>;

        if r1 == $r2 goto label1;

        $r4 = r0.<androidx.media3.test.utils.CapturingAudioSink: java.util.List interceptedData>;

        $r3 = new androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer;

        specialinvoke $r3.<androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer: void <init>(java.nio.ByteBuffer,long)>(r1, l0);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        r0.<androidx.media3.test.utils.CapturingAudioSink: java.nio.ByteBuffer currentBuffer> = r1;

     label1:
        z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: boolean handleBuffer(java.nio.ByteBuffer,long,int)>(r1, l0, i1);

        if z0 == 0 goto label2;

        r0.<androidx.media3.test.utils.CapturingAudioSink: java.nio.ByteBuffer currentBuffer> = null;

     label2:
        return z0;
    }

    public void flush()
    {
        androidx.media3.test.utils.CapturingAudioSink r0;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink;

        r0.<androidx.media3.test.utils.CapturingAudioSink: java.nio.ByteBuffer currentBuffer> = null;

        specialinvoke r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: void flush()>();

        return;
    }

    public void reset()
    {
        androidx.media3.test.utils.CapturingAudioSink r0;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink;

        r0.<androidx.media3.test.utils.CapturingAudioSink: java.nio.ByteBuffer currentBuffer> = null;

        specialinvoke r0.<androidx.media3.exoplayer.audio.ForwardingAudioSink: void reset()>();

        return;
    }

    public void dump(androidx.media3.test.utils.Dumper)
    {
        androidx.media3.test.utils.CapturingAudioSink r0;
        androidx.media3.test.utils.Dumper r1;
        java.util.List $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        androidx.media3.test.utils.Dumper$Dumpable $r5;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink;

        r1 := @parameter0: androidx.media3.test.utils.Dumper;

        i1 = 0;

     label1:
        $r2 = r0.<androidx.media3.test.utils.CapturingAudioSink: java.util.List interceptedData>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = r0.<androidx.media3.test.utils.CapturingAudioSink: java.util.List interceptedData>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (androidx.media3.test.utils.Dumper$Dumpable) $r4;

        interfaceinvoke $r5.<androidx.media3.test.utils.Dumper$Dumpable: void dump(androidx.media3.test.utils.Dumper)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

androidx.media3.test.utils.CapturingAudioSink$1
androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer
<androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer: long presentationTimeUs>
<androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer: int dataHashcode>
    public void <init>(java.nio.ByteBuffer, long)
    {
        androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer r0;
        java.nio.ByteBuffer r1;
        long l0;
        int i1, $i2, $i3;
        byte[] r2;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer: long presentationTimeUs> = l0;

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        r2 = newarray (byte)[$i2];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);

        $i3 = staticinvoke <java.util.Arrays: int hashCode(byte[])>(r2);

        r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer: int dataHashcode> = $i3;

        return;
    }

    public void dump(androidx.media3.test.utils.Dumper)
    {
        androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer r0;
        androidx.media3.test.utils.Dumper r1, $r2, $r4, $r6;
        long $l0;
        java.lang.Long $r3;
        int $i1;
        java.lang.Integer $r5;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer;

        r1 := @parameter0: androidx.media3.test.utils.Dumper;

        $r2 = virtualinvoke r1.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper startBlock(java.lang.String)>("buffer");

        $l0 = r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer: long presentationTimeUs>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = virtualinvoke $r2.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(java.lang.String,java.lang.Object)>("time", $r3);

        $i1 = r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableBuffer: int dataHashcode>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = virtualinvoke $r4.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(java.lang.String,java.lang.Object)>("data", $r5);

        virtualinvoke $r6.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper endBlock()>();

        return;
    }

androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration
<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: int inputPcmEncoding>
<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: int inputChannelCount>
<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: int inputSampleRate>
    public void <init>(int, int, int)
    {
        androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration r0;
        int i0, i1, i2;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: int inputPcmEncoding> = i0;

        r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: int inputChannelCount> = i1;

        r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: int inputSampleRate> = i2;

        return;
    }

    public void dump(androidx.media3.test.utils.Dumper)
    {
        androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration r0;
        androidx.media3.test.utils.Dumper r1, $r2, $r4, $r6, $r8;
        int $i0, $i1, $i2;
        java.lang.Integer $r3, $r5, $r7;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration;

        r1 := @parameter0: androidx.media3.test.utils.Dumper;

        $r2 = virtualinvoke r1.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper startBlock(java.lang.String)>("config");

        $i0 = r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: int inputPcmEncoding>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = virtualinvoke $r2.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(java.lang.String,java.lang.Object)>("pcmEncoding", $r3);

        $i1 = r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: int inputChannelCount>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = virtualinvoke $r4.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(java.lang.String,java.lang.Object)>("channelCount", $r5);

        $i2 = r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableConfiguration: int inputSampleRate>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8 = virtualinvoke $r6.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(java.lang.String,java.lang.Object)>("sampleRate", $r7);

        virtualinvoke $r8.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper endBlock()>();

        return;
    }

androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity
    private void <init>()
    {
        androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity r0;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void dump(androidx.media3.test.utils.Dumper)
    {
        androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity r0;
        androidx.media3.test.utils.Dumper r1, $r2;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity;

        r1 := @parameter0: androidx.media3.test.utils.Dumper;

        $r2 = virtualinvoke r1.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper startBlock(java.lang.String)>("discontinuity");

        virtualinvoke $r2.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper endBlock()>();

        return;
    }

    void <init>(androidx.media3.test.utils.CapturingAudioSink$1)
    {
        androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity r0;
        androidx.media3.test.utils.CapturingAudioSink$1 r1;

        r0 := @this: androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity;

        r1 := @parameter0: androidx.media3.test.utils.CapturingAudioSink$1;

        specialinvoke r0.<androidx.media3.test.utils.CapturingAudioSink$DumpableDiscontinuity: void <init>()>();

        return;
    }

