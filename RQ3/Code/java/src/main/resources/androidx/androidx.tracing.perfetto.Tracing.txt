androidx.tracing.perfetto.Tracing
<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE>
<androidx.tracing.perfetto.Tracing: boolean isEnabled>
<androidx.tracing.perfetto.Tracing: java.util.concurrent.locks.ReentrantReadWriteLock enableTracingLock>
    private void <init>()
    {
        androidx.tracing.perfetto.Tracing r0;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean isEnabled()
    {
        androidx.tracing.perfetto.Tracing r0;
        boolean $z0;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        $z0 = <androidx.tracing.perfetto.Tracing: boolean isEnabled>;

        return $z0;
    }

    public final androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enable$tracing_perfetto_release()
    {
        androidx.tracing.perfetto.Tracing r0;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r1;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        $r1 = specialinvoke r0.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enable(kotlin.Pair)>(null);

        return $r1;
    }

    public final androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enable$tracing_perfetto_release(java.io.File, android.content.Context)
    {
        androidx.tracing.perfetto.Tracing r0;
        java.io.File r1;
        android.content.Context r2;
        kotlin.Pair $r3;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r4;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: android.content.Context;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "file");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "context");

        $r3 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>(r1, r2);

        $r4 = specialinvoke r0.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enable(kotlin.Pair)>($r3);

        return $r4;
    }

    private final androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enable(kotlin.Pair)
    {
        androidx.tracing.perfetto.Tracing r0, $r4, $r7, $r8;
        kotlin.Pair r1;
        java.util.concurrent.locks.ReentrantReadWriteLock $r2, $r5;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r3;
        boolean $z0;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r6;
        java.lang.Throwable $r9, $r10;
        java.util.concurrent.locks.Lock r11, r15;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse r12, r16;
        kotlin.Unit $r13;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        r1 := @parameter0: kotlin.Pair;

        $r2 = <androidx.tracing.perfetto.Tracing: java.util.concurrent.locks.ReentrantReadWriteLock enableTracingLock>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "enableTracingLock.readLock()");

        r11 = (java.util.concurrent.locks.Lock) $r3;

        interfaceinvoke r11.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $r4 = <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE>;

        $z0 = <androidx.tracing.perfetto.Tracing: boolean isEnabled>;

        if $z0 == 0 goto label03;

        $r8 = <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE>;

        r12 = staticinvoke <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release$default(androidx.tracing.perfetto.Tracing,int,java.lang.String,int,java.lang.Object)>($r8, 2, null, 2, null);

     label02:
        interfaceinvoke r11.<java.util.concurrent.locks.Lock: void unlock()>();

        return r12;

     label03:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label04:
        interfaceinvoke r11.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label07;

     label05:
        $r9 := @caughtexception;

     label06:
        interfaceinvoke r11.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r9;

     label07:
        $r5 = <androidx.tracing.perfetto.Tracing: java.util.concurrent.locks.ReentrantReadWriteLock enableTracingLock>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "enableTracingLock.writeLock()");

        r15 = (java.util.concurrent.locks.Lock) $r6;

        interfaceinvoke r15.<java.util.concurrent.locks.Lock: void lock()>();

     label08:
        $r7 = <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE>;

        r16 = specialinvoke $r7.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enableImpl(kotlin.Pair)>(r1);

     label09:
        interfaceinvoke r15.<java.util.concurrent.locks.Lock: void unlock()>();

        return r16;

     label10:
        $r10 := @caughtexception;

     label11:
        interfaceinvoke r15.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private final androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enableImpl(kotlin.Pair)
    {
        androidx.tracing.perfetto.Tracing r0;
        kotlin.Pair r1, r24;
        java.io.File r2;
        android.content.Context r3;
        java.util.concurrent.locks.ReentrantReadWriteLock $r4;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object $r5, $r6;
        androidx.tracing.perfetto.security.SafeLibLoader $r7;
        androidx.tracing.perfetto.jni.PerfettoNative $r8, $r17;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r9, $r16, $r18, $r23, $r27;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r15, r28, r29;
        java.lang.RuntimeException $r19;
        java.lang.Throwable $r20, $r21, $r22, r25, r26, r30;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        r1 := @parameter0: kotlin.Pair;

        $r4 = <androidx.tracing.perfetto.Tracing: java.util.concurrent.locks.ReentrantReadWriteLock enableTracingLock>;

        $z1 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLockedByCurrentThread()>();

        if $z1 != 0 goto label01;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>()>();

        throw $r19;

     label01:
        $z2 = <androidx.tracing.perfetto.Tracing: boolean isEnabled>;

        if $z2 == 0 goto label02;

        $r18 = staticinvoke <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release$default(androidx.tracing.perfetto.Tracing,int,java.lang.String,int,java.lang.Object)>(r0, 2, null, 2, null);

        return $r18;

     label02:
        if r1 != null goto label03;

        $r17 = <androidx.tracing.perfetto.jni.PerfettoNative: androidx.tracing.perfetto.jni.PerfettoNative INSTANCE>;

        virtualinvoke $r17.<androidx.tracing.perfetto.jni.PerfettoNative: void loadLib()>();

        goto label12;

     label03:
        r24 = r1;

        $r5 = virtualinvoke r24.<kotlin.Pair: java.lang.Object component1()>();

        r2 = (java.io.File) $r5;

        $r6 = virtualinvoke r24.<kotlin.Pair: java.lang.Object component2()>();

        r3 = (android.content.Context) $r6;

        $r8 = <androidx.tracing.perfetto.jni.PerfettoNative: androidx.tracing.perfetto.jni.PerfettoNative INSTANCE>;

        $r7 = new androidx.tracing.perfetto.security.SafeLibLoader;

        specialinvoke $r7.<androidx.tracing.perfetto.security.SafeLibLoader: void <init>(android.content.Context)>(r3);

        virtualinvoke $r8.<androidx.tracing.perfetto.jni.PerfettoNative: void loadLib(java.io.File,androidx.tracing.perfetto.security.SafeLibLoader)>(r2, $r7);

     label04:
        goto label12;

     label05:
        $r20 := @caughtexception;

        r25 = $r20;

        r26 = r25;

        $z4 = r26 instanceof androidx.tracing.perfetto.security.IncorrectChecksumException;

        if $z4 == 0 goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = r26 instanceof androidx.tracing.perfetto.security.UnapprovedLocationException;

     label07:
        if $z7 == 0 goto label08;

        $r27 = virtualinvoke r0.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.Throwable)>(13, r25);

        goto label11;

     label08:
        $z5 = r26 instanceof java.lang.UnsatisfiedLinkError;

        if $z5 == 0 goto label09;

        $r27 = virtualinvoke r0.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.Throwable)>(11, r25);

        goto label11;

     label09:
        $z6 = r26 instanceof java.lang.Exception;

        if $z6 == 0 goto label10;

        $r27 = virtualinvoke r0.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.Throwable)>(99, r25);

        goto label11;

     label10:
        throw r25;

     label11:
        return $r27;

     label12:
        r28 = staticinvoke <androidx.tracing.perfetto.jni.PerfettoNative: java.lang.String nativeVersion()>();

        r29 = "1.0.0-alpha12";

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r28, r29);

        if $z3 != 0 goto label13;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Binary and Java version mismatch. Binary: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Java: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r0.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.String)>(12, $r15);

        return $r16;

     label13:
        staticinvoke <androidx.tracing.perfetto.jni.PerfettoNative: void nativeRegisterWithPerfetto()>();

     label14:
        goto label16;

     label15:
        $r21 := @caughtexception;

        r30 = $r21;

        $r22 = (java.lang.Throwable) r30;

        $r23 = virtualinvoke r0.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.Throwable)>(99, $r22);

        return $r23;

     label16:
        <androidx.tracing.perfetto.Tracing: boolean isEnabled> = 1;

        $r9 = staticinvoke <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release$default(androidx.tracing.perfetto.Tracing,int,java.lang.String,int,java.lang.Object)>(r0, 1, null, 2, null);

        return $r9;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    public final void traceEventStart(int, java.lang.String)
    {
        androidx.tracing.perfetto.Tracing r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "traceInfo");

        $z0 = <androidx.tracing.perfetto.Tracing: boolean isEnabled>;

        if $z0 == 0 goto label1;

        staticinvoke <androidx.tracing.perfetto.jni.PerfettoNative: void nativeTraceEventBegin(int,java.lang.String)>(i0, r1);

     label1:
        return;
    }

    public final void traceEventEnd()
    {
        androidx.tracing.perfetto.Tracing r0;
        boolean $z0;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        $z0 = <androidx.tracing.perfetto.Tracing: boolean isEnabled>;

        if $z0 == 0 goto label1;

        staticinvoke <androidx.tracing.perfetto.jni.PerfettoNative: void nativeTraceEventEnd()>();

     label1:
        return;
    }

    private final java.lang.String errorMessage(java.lang.Throwable)
    {
        androidx.tracing.perfetto.Tracing r0;
        java.lang.Throwable r1;
        java.lang.StringBuilder $r3, $r6, $r8, $r10, $r11, $r13;
        java.lang.Class $r4;
        java.lang.String $r5, $r7, $r9, $r12, $r14;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        r1 := @parameter0: java.lang.Throwable;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        if $r7 == null goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r14 = "";

     label2:
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public final androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int, java.lang.String)
    {
        androidx.tracing.perfetto.Tracing r0;
        int i0;
        java.lang.String r1;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r2;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = new androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse;

        specialinvoke $r2.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: void <init>(int,java.lang.String,java.lang.String)>(i0, "1.0.0-alpha12", r1);

        return $r2;
    }

    public static androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release$default(androidx.tracing.perfetto.Tracing, int, java.lang.String, int, java.lang.Object)
    {
        androidx.tracing.perfetto.Tracing r0;
        int i0, i1, $i2;
        java.lang.Object r1;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r2;
        java.lang.String r3;

        r0 := @parameter0: androidx.tracing.perfetto.Tracing;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i2 = i1 & 2;

        if $i2 == 0 goto label1;

        r3 = null;

     label1:
        $r2 = virtualinvoke r0.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.String)>(i0, r3);

        return $r2;
    }

    public final androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int, java.lang.Throwable)
    {
        androidx.tracing.perfetto.Tracing r0;
        int i0;
        java.lang.Throwable r1;
        java.lang.String $r2;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r3;

        r0 := @this: androidx.tracing.perfetto.Tracing;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "exception");

        $r2 = specialinvoke r0.<androidx.tracing.perfetto.Tracing: java.lang.String errorMessage(java.lang.Throwable)>(r1);

        $r3 = virtualinvoke r0.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.String)>(i0, $r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.tracing.perfetto.Tracing $r0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;

        $r0 = new androidx.tracing.perfetto.Tracing;

        specialinvoke $r0.<androidx.tracing.perfetto.Tracing: void <init>()>();

        <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE> = $r0;

        $r1 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        <androidx.tracing.perfetto.Tracing: java.util.concurrent.locks.ReentrantReadWriteLock enableTracingLock> = $r1;

        return;
    }

