androidx.paging.testing.SnapshotLoader
<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>
<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>
<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations>
    public void <init>(androidx.paging.PagingDataDiffer, androidx.paging.testing.LoadErrorHandler)
    {
        androidx.paging.testing.SnapshotLoader r0;
        androidx.paging.PagingDataDiffer r1;
        androidx.paging.testing.LoadErrorHandler r2;
        androidx.paging.testing.Generation $r3;
        kotlinx.coroutines.flow.MutableStateFlow $r4;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        r1 := @parameter0: androidx.paging.PagingDataDiffer;

        r2 := @parameter1: androidx.paging.testing.LoadErrorHandler;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "differ");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "errorHandler");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ> = r1;

        r0.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler> = r2;

        $r3 = new androidx.paging.testing.Generation;

        specialinvoke $r3.<androidx.paging.testing.Generation: void <init>(int,int,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0, 0, null, null, 15, null);

        $r4 = staticinvoke <kotlinx.coroutines.flow.StateFlowKt: kotlinx.coroutines.flow.MutableStateFlow MutableStateFlow(java.lang.Object)>($r3);

        r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations> = $r4;

        return;
    }

    public final kotlinx.coroutines.flow.MutableStateFlow getGenerations$paging_testing_release()
    {
        androidx.paging.testing.SnapshotLoader r0;
        kotlinx.coroutines.flow.MutableStateFlow $r1;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        $r1 = r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations>;

        return $r1;
    }

    public final java.lang.Object refresh(kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r18, r19;
        java.lang.Object $r1, r2, $r5, $r9, $r12;
        boolean $z0;
        kotlin.Unit $r4;
        androidx.paging.PagingDataDiffer $r6, $r7, $r10;
        androidx.paging.testing.LoadErrorHandler $r8, $r11;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.paging.testing.SnapshotLoader r14;
        androidx.paging.testing.SnapshotLoader$refresh$1 $r15, r16;
        java.lang.IllegalStateException r17;

        r14 := @this: androidx.paging.testing.SnapshotLoader;

        r0 := @parameter0: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.SnapshotLoader$refresh$1;

        if $z0 == 0 goto label1;

        $r15 = (androidx.paging.testing.SnapshotLoader$refresh$1) r0;

        $i0 = $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        $i2 = $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: int label>;

        $i3 = $i2 - -2147483648;

        $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: int label> = $i3;

        goto label2;

     label1:
        r16 = new androidx.paging.testing.SnapshotLoader$refresh$1;

        specialinvoke r16.<androidx.paging.testing.SnapshotLoader$refresh$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r14, r0);

        $r15 = r16;

     label2:
        $r1 = $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label6;
            default: goto label8;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r10 = r14.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r11 = r14.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: java.lang.Object L$0> = r14;

        $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: int label> = 1;

        r18 = (kotlin.coroutines.Continuation) $r15;

        $r12 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r10, $r11, r18);

        if $r12 != r2 goto label5;

        return r2;

     label4:
        $r5 = $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: java.lang.Object L$0>;

        r14 = (androidx.paging.testing.SnapshotLoader) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label5:
        $r6 = r14.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        virtualinvoke $r6.<androidx.paging.PagingDataDiffer: void refresh()>();

        $r7 = r14.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r8 = r14.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: java.lang.Object L$0> = null;

        $r15.<androidx.paging.testing.SnapshotLoader$refresh$1: int label> = 2;

        r19 = (kotlin.coroutines.Continuation) $r15;

        $r9 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r7, $r8, r19);

        if $r9 != r2 goto label7;

        return r2;

     label6:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label7:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label8:
        r17 = new java.lang.IllegalStateException;

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r17;
    }

    public final java.lang.Object appendScrollWhile(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r22, r23, r24;
        java.lang.Object $r1, r2, $r5, $r8, $r9, $r10, $r12, $r15;
        boolean $z0;
        kotlin.Unit $r4;
        androidx.paging.PagingDataDiffer $r6, $r13;
        androidx.paging.testing.LoadErrorHandler $r7, $r14;
        androidx.paging.testing.SnapshotLoader$LoadType $r11;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.paging.testing.SnapshotLoader r17;
        kotlin.jvm.functions.Function1 r18;
        androidx.paging.testing.SnapshotLoader$appendScrollWhile$1 $r19, r20;
        java.lang.IllegalStateException r21;

        r17 := @this: androidx.paging.testing.SnapshotLoader;

        r18 := @parameter0: kotlin.jvm.functions.Function1;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.SnapshotLoader$appendScrollWhile$1;

        if $z0 == 0 goto label01;

        $r19 = (androidx.paging.testing.SnapshotLoader$appendScrollWhile$1) r0;

        $i0 = $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label>;

        $i3 = $i2 - -2147483648;

        $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label> = $i3;

        goto label02;

     label01:
        r20 = new androidx.paging.testing.SnapshotLoader$appendScrollWhile$1;

        specialinvoke r20.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r17, r0);

        $r19 = r20;

     label02:
        $r1 = $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label08;
            default: goto label10;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r13 = r17.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r14 = r17.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$0> = r17;

        $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$1> = r18;

        $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label> = 1;

        r22 = (kotlin.coroutines.Continuation) $r19;

        $r15 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r13, $r14, r22);

        if $r15 != r2 goto label05;

        return r2;

     label04:
        $r9 = $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$1>;

        r18 = (kotlin.jvm.functions.Function1) $r9;

        $r10 = $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$0>;

        r17 = (androidx.paging.testing.SnapshotLoader) $r10;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label05:
        $r11 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType APPEND>;

        $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$0> = r17;

        $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$1> = null;

        $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label> = 2;

        r23 = (kotlin.coroutines.Continuation) $r19;

        $r12 = specialinvoke r17.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendOrPrependScrollWhile(androidx.paging.testing.SnapshotLoader$LoadType,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r11, r18, r23);

        if $r12 != r2 goto label07;

        return r2;

     label06:
        $r5 = $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$0>;

        r17 = (androidx.paging.testing.SnapshotLoader) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label07:
        $r6 = r17.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r7 = r17.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$0> = null;

        $r19.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label> = 3;

        r24 = (kotlin.coroutines.Continuation) $r19;

        $r8 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r6, $r7, r24);

        if $r8 != r2 goto label09;

        return r2;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label09:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label10:
        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r21;
    }

    public final java.lang.Object prependScrollWhile(kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r22, r23, r24;
        java.lang.Object $r1, r2, $r5, $r8, $r9, $r10, $r12, $r15;
        boolean $z0;
        kotlin.Unit $r4;
        androidx.paging.PagingDataDiffer $r6, $r13;
        androidx.paging.testing.LoadErrorHandler $r7, $r14;
        androidx.paging.testing.SnapshotLoader$LoadType $r11;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.paging.testing.SnapshotLoader r17;
        kotlin.jvm.functions.Function1 r18;
        androidx.paging.testing.SnapshotLoader$prependScrollWhile$1 $r19, r20;
        java.lang.IllegalStateException r21;

        r17 := @this: androidx.paging.testing.SnapshotLoader;

        r18 := @parameter0: kotlin.jvm.functions.Function1;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.SnapshotLoader$prependScrollWhile$1;

        if $z0 == 0 goto label01;

        $r19 = (androidx.paging.testing.SnapshotLoader$prependScrollWhile$1) r0;

        $i0 = $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label>;

        $i3 = $i2 - -2147483648;

        $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label> = $i3;

        goto label02;

     label01:
        r20 = new androidx.paging.testing.SnapshotLoader$prependScrollWhile$1;

        specialinvoke r20.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r17, r0);

        $r19 = r20;

     label02:
        $r1 = $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label08;
            default: goto label10;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r13 = r17.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r14 = r17.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$0> = r17;

        $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$1> = r18;

        $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label> = 1;

        r22 = (kotlin.coroutines.Continuation) $r19;

        $r15 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r13, $r14, r22);

        if $r15 != r2 goto label05;

        return r2;

     label04:
        $r9 = $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$1>;

        r18 = (kotlin.jvm.functions.Function1) $r9;

        $r10 = $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$0>;

        r17 = (androidx.paging.testing.SnapshotLoader) $r10;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label05:
        $r11 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType PREPEND>;

        $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$0> = r17;

        $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$1> = null;

        $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label> = 2;

        r23 = (kotlin.coroutines.Continuation) $r19;

        $r12 = specialinvoke r17.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendOrPrependScrollWhile(androidx.paging.testing.SnapshotLoader$LoadType,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r11, r18, r23);

        if $r12 != r2 goto label07;

        return r2;

     label06:
        $r5 = $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$0>;

        r17 = (androidx.paging.testing.SnapshotLoader) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label07:
        $r6 = r17.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r7 = r17.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$0> = null;

        $r19.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label> = 3;

        r24 = (kotlin.coroutines.Continuation) $r19;

        $r8 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r6, $r7, r24);

        if $r8 != r2 goto label09;

        return r2;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label09:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label10:
        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r21;
    }

    private final java.lang.Object appendOrPrependScrollWhile(androidx.paging.testing.SnapshotLoader$LoadType, kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r20;
        java.lang.Object r1, $r2, r3, $r5, $r6, $r7, $r8, $r17;
        boolean $z0, $z1;
        java.lang.Boolean $r9;
        kotlin.Unit $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.paging.testing.SnapshotLoader r13;
        androidx.paging.testing.SnapshotLoader$LoadType r14;
        kotlin.jvm.functions.Function1 r15;
        androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1 $r16, r18;
        java.lang.IllegalStateException r19;

        r13 := @this: androidx.paging.testing.SnapshotLoader;

        r14 := @parameter0: androidx.paging.testing.SnapshotLoader$LoadType;

        r15 := @parameter1: kotlin.jvm.functions.Function1;

        r0 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1;

        if $z0 == 0 goto label1;

        $r16 = (androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1) r0;

        $i0 = $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        $i2 = $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: int label>;

        $i3 = $i2 - -2147483648;

        $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: int label> = $i3;

        goto label2;

     label1:
        r18 = new androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1;

        specialinvoke r18.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r13, r0);

        $r16 = r18;

     label2:
        $r2 = $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object result>;

        r3 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i4 = $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: int label>;

        tableswitch($i4)
        {
            case 0: goto label3;
            case 1: goto label5;
            default: goto label8;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

     label4:
        $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object L$0> = r13;

        $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object L$1> = r14;

        $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object L$2> = r15;

        $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: int label> = 1;

        r20 = (kotlin.coroutines.Continuation) $r16;

        $r17 = specialinvoke r13.<androidx.paging.testing.SnapshotLoader: java.lang.Object awaitNextItem(androidx.paging.testing.SnapshotLoader$LoadType,kotlin.coroutines.Continuation)>(r14, r20);

        if $r17 != r3 goto label6;

        return r3;

     label5:
        $r5 = $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object L$2>;

        r15 = (kotlin.jvm.functions.Function1) $r5;

        $r6 = $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object L$1>;

        r14 = (androidx.paging.testing.SnapshotLoader$LoadType) $r6;

        $r7 = $r16.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object L$0>;

        r13 = (androidx.paging.testing.SnapshotLoader) $r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r2);

        $r17 = $r2;

     label6:
        if $r17 != null goto label7;

        $r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r11;

     label7:
        r1 = $r17;

        $r8 = interfaceinvoke r15.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r1);

        $r9 = (java.lang.Boolean) $r8;

        $z1 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label4;

        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;

     label8:
        r19 = new java.lang.IllegalStateException;

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r19;
    }

    public final java.lang.Object scrollTo(int, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r19, r20, r21;
        java.lang.Object $r1, r2, $r5, $r8, $r9, $r10, $r13;
        boolean $z0;
        kotlin.Unit $r4;
        androidx.paging.PagingDataDiffer $r6, $r11;
        androidx.paging.testing.LoadErrorHandler $r7, $r12;
        int $i0, $i1, $i2, $i3, i4, $i5;
        androidx.paging.testing.SnapshotLoader r15;
        androidx.paging.testing.SnapshotLoader$scrollTo$1 $r16, r17;
        java.lang.IllegalStateException r18;

        r15 := @this: androidx.paging.testing.SnapshotLoader;

        i4 := @parameter0: int;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.SnapshotLoader$scrollTo$1;

        if $z0 == 0 goto label01;

        $r16 = (androidx.paging.testing.SnapshotLoader$scrollTo$1) r0;

        $i0 = $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label>;

        $i3 = $i2 - -2147483648;

        $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label> = $i3;

        goto label02;

     label01:
        r17 = new androidx.paging.testing.SnapshotLoader$scrollTo$1;

        specialinvoke r17.<androidx.paging.testing.SnapshotLoader$scrollTo$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r15, r0);

        $r16 = r17;

     label02:
        $r1 = $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i5 = $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label>;

        tableswitch($i5)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label08;
            default: goto label10;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r11 = r15.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r12 = r15.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: java.lang.Object L$0> = r15;

        $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int I$0> = i4;

        $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label> = 1;

        r19 = (kotlin.coroutines.Continuation) $r16;

        $r13 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r11, $r12, r19);

        if $r13 != r2 goto label05;

        return r2;

     label04:
        i4 = $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int I$0>;

        $r9 = $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: java.lang.Object L$0>;

        r15 = (androidx.paging.testing.SnapshotLoader) $r9;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label05:
        $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: java.lang.Object L$0> = r15;

        $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label> = 2;

        r20 = (kotlin.coroutines.Continuation) $r16;

        $r10 = specialinvoke r15.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendOrPrependScrollTo(int,kotlin.coroutines.Continuation)>(i4, r20);

        if $r10 != r2 goto label07;

        return r2;

     label06:
        $r5 = $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: java.lang.Object L$0>;

        r15 = (androidx.paging.testing.SnapshotLoader) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label07:
        $r6 = r15.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r7 = r15.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: java.lang.Object L$0> = null;

        $r16.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label> = 3;

        r21 = (kotlin.coroutines.Continuation) $r16;

        $r8 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r6, $r7, r21);

        if $r8 != r2 goto label09;

        return r2;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label09:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label10:
        r18 = new java.lang.IllegalStateException;

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r18;
    }

    private final java.lang.Object appendOrPrependScrollTo(int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader r0;
        int i0, i1, i2, $i3;
        kotlin.coroutines.Continuation $r1;
        androidx.paging.testing.SnapshotLoader$LoadType r2, $r10;
        kotlinx.coroutines.flow.MutableStateFlow $r3;
        java.lang.Object $r4, $r7, $r8;
        androidx.paging.testing.Generation $r5;
        java.util.concurrent.atomic.AtomicInteger $r6;
        kotlin.Unit $r9;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter0: int;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations>;

        $r4 = interfaceinvoke $r3.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r5 = (androidx.paging.testing.Generation) $r4;

        $r6 = virtualinvoke $r5.<androidx.paging.testing.Generation: java.util.concurrent.atomic.AtomicInteger getLastAccessedIndex()>();

        i1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i1 <= i0 goto label1;

        $r10 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType PREPEND>;

        goto label2;

     label1:
        $r10 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType APPEND>;

     label2:
        r2 = $r10;

        $i3 = i1 - i0;

        i2 = staticinvoke <java.lang.Math: int abs(int)>($i3);

        $r7 = specialinvoke r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object awaitScroll(androidx.paging.testing.SnapshotLoader$LoadType,int,kotlin.coroutines.Continuation)>(r2, i2, $r1);

        $r8 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r7 != $r8 goto label3;

        return $r7;

     label3:
        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r9;
    }

    public final java.lang.Object flingTo(int, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r19, r20, r21;
        java.lang.Object $r1, r2, $r5, $r8, $r9, $r10, $r13;
        boolean $z0;
        kotlin.Unit $r4;
        androidx.paging.PagingDataDiffer $r6, $r11;
        androidx.paging.testing.LoadErrorHandler $r7, $r12;
        int $i0, $i1, $i2, $i3, i4, $i5;
        androidx.paging.testing.SnapshotLoader r15;
        androidx.paging.testing.SnapshotLoader$flingTo$1 $r16, r17;
        java.lang.IllegalStateException r18;

        r15 := @this: androidx.paging.testing.SnapshotLoader;

        i4 := @parameter0: int;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.SnapshotLoader$flingTo$1;

        if $z0 == 0 goto label01;

        $r16 = (androidx.paging.testing.SnapshotLoader$flingTo$1) r0;

        $i0 = $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label01;

        $i2 = $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: int label>;

        $i3 = $i2 - -2147483648;

        $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: int label> = $i3;

        goto label02;

     label01:
        r17 = new androidx.paging.testing.SnapshotLoader$flingTo$1;

        specialinvoke r17.<androidx.paging.testing.SnapshotLoader$flingTo$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r15, r0);

        $r16 = r17;

     label02:
        $r1 = $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i5 = $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: int label>;

        tableswitch($i5)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label08;
            default: goto label10;
        };

     label03:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r11 = r15.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r12 = r15.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: java.lang.Object L$0> = r15;

        $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: int I$0> = i4;

        $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: int label> = 1;

        r19 = (kotlin.coroutines.Continuation) $r16;

        $r13 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r11, $r12, r19);

        if $r13 != r2 goto label05;

        return r2;

     label04:
        i4 = $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: int I$0>;

        $r9 = $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: java.lang.Object L$0>;

        r15 = (androidx.paging.testing.SnapshotLoader) $r9;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label05:
        $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: java.lang.Object L$0> = r15;

        $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: int label> = 2;

        r20 = (kotlin.coroutines.Continuation) $r16;

        $r10 = specialinvoke r15.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendOrPrependFlingTo(int,kotlin.coroutines.Continuation)>(i4, r20);

        if $r10 != r2 goto label07;

        return r2;

     label06:
        $r5 = $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: java.lang.Object L$0>;

        r15 = (androidx.paging.testing.SnapshotLoader) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label07:
        $r6 = r15.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r7 = r15.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: java.lang.Object L$0> = null;

        $r16.<androidx.paging.testing.SnapshotLoader$flingTo$1: int label> = 3;

        r21 = (kotlin.coroutines.Continuation) $r16;

        $r8 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r6, $r7, r21);

        if $r8 != r2 goto label09;

        return r2;

     label08:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label09:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label10:
        r18 = new java.lang.IllegalStateException;

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r18;
    }

    private final java.lang.Object appendOrPrependFlingTo(int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader r0;
        int i0, i1, $i2, $i3;
        kotlin.coroutines.Continuation $r1;
        androidx.paging.testing.SnapshotLoader$LoadType r2, $r15;
        kotlinx.coroutines.flow.MutableStateFlow $r3;
        java.lang.Object $r4, $r8, $r9, $r11, $r12;
        androidx.paging.testing.Generation $r5;
        java.util.concurrent.atomic.AtomicInteger $r6;
        int[] $r7;
        kotlin.Unit $r10, $r13, $r14;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter0: int;

        $r1 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations>;

        $r4 = interfaceinvoke $r3.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r5 = (androidx.paging.testing.Generation) $r4;

        $r6 = virtualinvoke $r5.<androidx.paging.testing.Generation: java.util.concurrent.atomic.AtomicInteger getLastAccessedIndex()>();

        i1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i1 <= i0 goto label1;

        $r15 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType PREPEND>;

        goto label2;

     label1:
        $r15 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType APPEND>;

     label2:
        r2 = $r15;

        $r7 = <androidx.paging.testing.SnapshotLoader$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i2 = virtualinvoke r2.<androidx.paging.testing.SnapshotLoader$LoadType: int ordinal()>();

        $i3 = $r7[$i2];

        tableswitch($i3)
        {
            case 1: goto label3;
            case 2: goto label5;
            default: goto label7;
        };

     label3:
        $r11 = specialinvoke r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object prependFlingTo(int,int,kotlin.coroutines.Continuation)>(i1, i0, $r1);

        $r12 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r11 != $r12 goto label4;

        return $r11;

     label4:
        $r13 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r13;

     label5:
        $r8 = specialinvoke r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendFlingTo(int,int,kotlin.coroutines.Continuation)>(i1, i0, $r1);

        $r9 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r8 != $r9 goto label6;

        return $r8;

     label6:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;

     label7:
        $r14 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r14;
    }

    private final java.lang.Object prependFlingTo(int, int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader r0;
        int i0, i1, i2, i3, i4, i5;
        kotlin.coroutines.Continuation $r1;
        kotlin.Unit $r2, $r6;
        androidx.paging.testing.SnapshotLoader$LoadType $r3;
        java.lang.Object $r4, $r5;
        androidx.paging.PagingDataDiffer $r7;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        i3 = i0;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, i1);

        i4 = i0 - 1;

        if i2 > i4 goto label2;

     label1:
        $r7 = r0.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        virtualinvoke $r7.<androidx.paging.PagingDataDiffer: java.lang.Object get(int)>(i4);

        i3 = i4;

        if i4 == i2 goto label2;

        i4 = i4 + -1;

        goto label1;

     label2:
        specialinvoke r0.<androidx.paging.testing.SnapshotLoader: void setLastAccessedIndex(int)>(i3);

        if i1 >= 0 goto label4;

        i5 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        $r3 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType PREPEND>;

        $r4 = specialinvoke r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object flingToOutOfBounds(androidx.paging.testing.SnapshotLoader$LoadType,int,int,kotlin.coroutines.Continuation)>($r3, i3, i5, $r1);

        $r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r4 != $r5 goto label3;

        return $r4;

     label3:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label4:
        $r2 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r2;
    }

    private final java.lang.Object appendFlingTo(int, int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8;
        kotlin.coroutines.Continuation $r1;
        androidx.paging.PagingDataDiffer $r2, $r3, $r9;
        kotlin.Unit $r4, $r8;
        androidx.paging.testing.SnapshotLoader$LoadType $r5;
        java.lang.Object $r6, $r7;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        i6 = i0;

        $r2 = r0.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $i3 = virtualinvoke $r2.<androidx.paging.PagingDataDiffer: int getSize()>();

        $i4 = $i3 - 1;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i4);

        i7 = i0 + 1;

        if i7 > i2 goto label2;

     label1:
        $r9 = r0.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        virtualinvoke $r9.<androidx.paging.PagingDataDiffer: java.lang.Object get(int)>(i7);

        i6 = i7;

        if i7 == i2 goto label2;

        i7 = i7 + 1;

        goto label1;

     label2:
        specialinvoke r0.<androidx.paging.testing.SnapshotLoader: void setLastAccessedIndex(int)>(i6);

        $r3 = r0.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $i5 = virtualinvoke $r3.<androidx.paging.PagingDataDiffer: int getSize()>();

        if i1 < $i5 goto label4;

        i8 = i1 - i6;

        $r5 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType APPEND>;

        $r6 = specialinvoke r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object flingToOutOfBounds(androidx.paging.testing.SnapshotLoader$LoadType,int,int,kotlin.coroutines.Continuation)>($r5, i6, i8, $r1);

        $r7 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r6 != $r7 goto label3;

        return $r6;

     label3:
        $r8 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r8;

     label4:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;
    }

    private final java.lang.Object flingToOutOfBounds(androidx.paging.testing.SnapshotLoader$LoadType, int, int, kotlin.coroutines.Continuation)
    {
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7;
        kotlin.coroutines.Continuation r0, r18, r19;
        java.lang.Object $r1, r2, $r5, $r6, $r8, $r10, $r15;
        boolean $z0;
        kotlin.Unit $r4;
        kotlin.Pair $r7;
        java.lang.Number $r9;
        androidx.paging.testing.SnapshotLoader r12;
        androidx.paging.testing.SnapshotLoader$LoadType r13;
        androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1 $r14, r16;
        java.lang.IllegalStateException r17;

        r12 := @this: androidx.paging.testing.SnapshotLoader;

        r13 := @parameter0: androidx.paging.testing.SnapshotLoader$LoadType;

        i0 := @parameter1: int;

        i6 := @parameter2: int;

        r0 := @parameter3: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1;

        if $z0 == 0 goto label1;

        $r14 = (androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1) r0;

        $i2 = $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int label>;

        $i3 = $i2 & -2147483648;

        if $i3 == 0 goto label1;

        $i4 = $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int label>;

        $i5 = $i4 - -2147483648;

        $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int label> = $i5;

        goto label2;

     label1:
        r16 = new androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1;

        specialinvoke r16.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r12, r0);

        $r14 = r16;

     label2:
        $r1 = $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i7 = $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int label>;

        tableswitch($i7)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label6;
            default: goto label8;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object L$0> = r12;

        $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object L$1> = r13;

        $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int I$0> = i6;

        $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int label> = 1;

        r18 = (kotlin.coroutines.Continuation) $r14;

        $r15 = specialinvoke r12.<androidx.paging.testing.SnapshotLoader: java.lang.Object awaitLoad(int,kotlin.coroutines.Continuation)>(i0, r18);

        if $r15 != r2 goto label5;

        return r2;

     label4:
        i6 = $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int I$0>;

        $r5 = $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object L$1>;

        r13 = (androidx.paging.testing.SnapshotLoader$LoadType) $r5;

        $r6 = $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object L$0>;

        r12 = (androidx.paging.testing.SnapshotLoader) $r6;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r15 = $r1;

     label5:
        $r7 = (kotlin.Pair) $r15;

        $r8 = virtualinvoke $r7.<kotlin.Pair: java.lang.Object component2()>();

        $r9 = (java.lang.Number) $r8;

        i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>();

        specialinvoke r12.<androidx.paging.testing.SnapshotLoader: void setLastAccessedIndex(int)>(i1);

        $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object L$0> = null;

        $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object L$1> = null;

        $r14.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int label> = 2;

        r19 = (kotlin.coroutines.Continuation) $r14;

        $r10 = specialinvoke r12.<androidx.paging.testing.SnapshotLoader: java.lang.Object awaitScroll(androidx.paging.testing.SnapshotLoader$LoadType,int,kotlin.coroutines.Continuation)>(r13, i6, r19);

        if $r10 != r2 goto label7;

        return r2;

     label6:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label7:
        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r4;

     label8:
        r17 = new java.lang.IllegalStateException;

        specialinvoke r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r17;
    }

    private final java.lang.Object awaitScroll(androidx.paging.testing.SnapshotLoader$LoadType, int, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r15;
        java.lang.Object $r1, r2, $r4, $r5, $r12;
        boolean $z0;
        kotlin.Unit $r6, $r7;
        int $i0, $i1, $i2, $i3, i4, $i5, i6;
        androidx.paging.testing.SnapshotLoader r9;
        androidx.paging.testing.SnapshotLoader$LoadType r10;
        androidx.paging.testing.SnapshotLoader$awaitScroll$1 $r11, r13;
        java.lang.IllegalStateException r14;

        r9 := @this: androidx.paging.testing.SnapshotLoader;

        r10 := @parameter0: androidx.paging.testing.SnapshotLoader$LoadType;

        i4 := @parameter1: int;

        r0 := @parameter2: kotlin.coroutines.Continuation;

        $z0 = r0 instanceof androidx.paging.testing.SnapshotLoader$awaitScroll$1;

        if $z0 == 0 goto label1;

        $r11 = (androidx.paging.testing.SnapshotLoader$awaitScroll$1) r0;

        $i0 = $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int label>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        $i2 = $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int label>;

        $i3 = $i2 - -2147483648;

        $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int label> = $i3;

        goto label2;

     label1:
        r13 = new androidx.paging.testing.SnapshotLoader$awaitScroll$1;

        specialinvoke r13.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r9, r0);

        $r11 = r13;

     label2:
        $r1 = $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i5 = $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int label>;

        tableswitch($i5)
        {
            case 0: goto label3;
            case 1: goto label5;
            default: goto label9;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        i6 = 0;

     label4:
        if i6 >= i4 goto label8;

        $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: java.lang.Object L$0> = r9;

        $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: java.lang.Object L$1> = r10;

        $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int I$0> = i4;

        $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int I$1> = i6;

        $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int label> = 1;

        r15 = (kotlin.coroutines.Continuation) $r11;

        $r12 = specialinvoke r9.<androidx.paging.testing.SnapshotLoader: java.lang.Object awaitNextItem(androidx.paging.testing.SnapshotLoader$LoadType,kotlin.coroutines.Continuation)>(r10, r15);

        if $r12 != r2 goto label6;

        return r2;

     label5:
        i6 = $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int I$1>;

        i4 = $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int I$0>;

        $r4 = $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: java.lang.Object L$1>;

        r10 = (androidx.paging.testing.SnapshotLoader$LoadType) $r4;

        $r5 = $r11.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: java.lang.Object L$0>;

        r9 = (androidx.paging.testing.SnapshotLoader) $r5;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r12 = $r1;

     label6:
        if $r12 != null goto label7;

        $r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r7;

     label7:
        i6 = i6 + 1;

        goto label4;

     label8:
        $r6 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r6;

     label9:
        r14 = new java.lang.IllegalStateException;

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r14;
    }

    private final java.lang.Object awaitNextItem(androidx.paging.testing.SnapshotLoader$LoadType, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$LoadType r0;
        kotlin.coroutines.Continuation r1, r17;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        kotlin.Pair r2;
        java.lang.Object r3, $r4, r5, $r7, $r8, $r14;
        boolean $z0;
        java.lang.Number $r9;
        java.lang.Integer $r10;
        androidx.paging.testing.SnapshotLoader r12;
        androidx.paging.testing.SnapshotLoader$awaitNextItem$1 $r13, r15;
        java.lang.IllegalStateException r16;

        r12 := @this: androidx.paging.testing.SnapshotLoader;

        r0 := @parameter0: androidx.paging.testing.SnapshotLoader$LoadType;

        r1 := @parameter1: kotlin.coroutines.Continuation;

        $z0 = r1 instanceof androidx.paging.testing.SnapshotLoader$awaitNextItem$1;

        if $z0 == 0 goto label1;

        $r13 = (androidx.paging.testing.SnapshotLoader$awaitNextItem$1) r1;

        $i2 = $r13.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: int label>;

        $i3 = $i2 & -2147483648;

        if $i3 == 0 goto label1;

        $i4 = $r13.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: int label>;

        $i5 = $i4 - -2147483648;

        $r13.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: int label> = $i5;

        goto label2;

     label1:
        r15 = new androidx.paging.testing.SnapshotLoader$awaitNextItem$1;

        specialinvoke r15.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r12, r1);

        $r13 = r15;

     label2:
        $r4 = $r13.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: java.lang.Object result>;

        r5 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i6 = $r13.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: int label>;

        tableswitch($i6)
        {
            case 0: goto label3;
            case 1: goto label6;
            default: goto label8;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r10 = specialinvoke r12.<androidx.paging.testing.SnapshotLoader: java.lang.Integer nextIndexOrNull(androidx.paging.testing.SnapshotLoader$LoadType)>(r0);

        if $r10 == null goto label4;

        goto label5;

     label4:
        return null;

     label5:
        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $r13.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: java.lang.Object L$0> = r12;

        $r13.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: int label> = 1;

        r17 = (kotlin.coroutines.Continuation) $r13;

        $r14 = specialinvoke r12.<androidx.paging.testing.SnapshotLoader: java.lang.Object awaitLoad(int,kotlin.coroutines.Continuation)>(i0, r17);

        if $r14 != r5 goto label7;

        return r5;

     label6:
        $r7 = $r13.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: java.lang.Object L$0>;

        r12 = (androidx.paging.testing.SnapshotLoader) $r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r4);

        $r14 = $r4;

     label7:
        r2 = (kotlin.Pair) $r14;

        r3 = virtualinvoke r2.<kotlin.Pair: java.lang.Object component1()>();

        $r8 = virtualinvoke r2.<kotlin.Pair: java.lang.Object component2()>();

        $r9 = (java.lang.Number) $r8;

        i1 = virtualinvoke $r9.<java.lang.Number: int intValue()>();

        specialinvoke r12.<androidx.paging.testing.SnapshotLoader: void setLastAccessedIndex(int)>(i1);

        return r3;

     label8:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r16;
    }

    private final java.lang.Integer nextIndexOrNull(androidx.paging.testing.SnapshotLoader$LoadType)
    {
        androidx.paging.testing.SnapshotLoader r0;
        androidx.paging.testing.SnapshotLoader$LoadType r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        kotlinx.coroutines.flow.MutableStateFlow $r2;
        java.lang.Object $r3;
        androidx.paging.testing.Generation $r4;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int[] $r6;
        androidx.paging.PagingDataDiffer $r7;
        kotlin.NoWhenBranchMatchedException $r8;
        java.lang.Integer $r9;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader$LoadType;

        $r2 = r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations>;

        $r3 = interfaceinvoke $r2.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r4 = (androidx.paging.testing.Generation) $r3;

        $r5 = virtualinvoke $r4.<androidx.paging.testing.Generation: java.util.concurrent.atomic.AtomicInteger getLastAccessedIndex()>();

        i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r6 = <androidx.paging.testing.SnapshotLoader$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i1 = virtualinvoke r1.<androidx.paging.testing.SnapshotLoader$LoadType: int ordinal()>();

        $i2 = $r6[$i1];

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label3;
            default: goto label5;
        };

     label1:
        if i0 > 0 goto label2;

        return null;

     label2:
        $i6 = i0 - 1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        goto label6;

     label3:
        $r7 = r0.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $i3 = virtualinvoke $r7.<androidx.paging.PagingDataDiffer: int getSize()>();

        $i4 = $i3 - 1;

        if i0 < $i4 goto label4;

        return null;

     label4:
        $i5 = i0 + 1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        goto label6;

     label5:
        $r8 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r8.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r8;

     label6:
        return $r9;
    }

    private final java.lang.Object awaitLoad(int, kotlin.coroutines.Continuation)
    {
        kotlin.coroutines.Continuation r0, r28, r29;
        java.lang.Object $r1, r2, $r4, $r7, $r17, $r23;
        boolean $z3;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        java.lang.Integer $r5;
        kotlin.Pair $r6;
        kotlinx.coroutines.flow.MutableStateFlow $r9;
        kotlinx.coroutines.flow.Flow $r11, $r12, $r18;
        androidx.paging.PagingDataDiffer $r13, $r15;
        androidx.paging.testing.LoadErrorHandler $r16;
        androidx.paging.testing.SnapshotLoader r20;
        androidx.paging.testing.SnapshotLoader$awaitLoad$1 $r21, r24;
        kotlin.jvm.internal.Ref$IntRef r22, r25;
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1 r26;
        java.lang.IllegalStateException r27;

        r20 := @this: androidx.paging.testing.SnapshotLoader;

        i5 := @parameter0: int;

        r0 := @parameter1: kotlin.coroutines.Continuation;

        $z3 = r0 instanceof androidx.paging.testing.SnapshotLoader$awaitLoad$1;

        if $z3 == 0 goto label1;

        $r21 = (androidx.paging.testing.SnapshotLoader$awaitLoad$1) r0;

        $i1 = $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int label>;

        $i2 = $i1 & -2147483648;

        if $i2 == 0 goto label1;

        $i3 = $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int label>;

        $i4 = $i3 - -2147483648;

        $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int label> = $i4;

        goto label2;

     label1:
        r24 = new androidx.paging.testing.SnapshotLoader$awaitLoad$1;

        specialinvoke r24.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: void <init>(androidx.paging.testing.SnapshotLoader,kotlin.coroutines.Continuation)>(r20, r0);

        $r21 = r24;

     label2:
        $r1 = $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: java.lang.Object result>;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i6 = $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int label>;

        tableswitch($i6)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label6;
            default: goto label8;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r13 = r20.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        virtualinvoke $r13.<androidx.paging.PagingDataDiffer: java.lang.Object get(int)>(i5);

        $r15 = r20.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        $r16 = r20.<androidx.paging.testing.SnapshotLoader: androidx.paging.testing.LoadErrorHandler errorHandler>;

        $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: java.lang.Object L$0> = r20;

        $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int I$0> = i5;

        $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int label> = 1;

        r28 = (kotlin.coroutines.Continuation) $r21;

        $r17 = staticinvoke <androidx.paging.testing.PagerFlowSnapshotKt: java.lang.Object awaitNotLoading(androidx.paging.PagingDataDiffer,androidx.paging.testing.LoadErrorHandler,kotlin.coroutines.Continuation)>($r15, $r16, r28);

        if $r17 != r2 goto label5;

        return r2;

     label4:
        i5 = $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int I$0>;

        $r7 = $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: java.lang.Object L$0>;

        r20 = (androidx.paging.testing.SnapshotLoader) $r7;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label5:
        r25 = new kotlin.jvm.internal.Ref$IntRef;

        specialinvoke r25.<kotlin.jvm.internal.Ref$IntRef: void <init>()>();

        r22 = r25;

        r22.<kotlin.jvm.internal.Ref$IntRef: int element> = i5;

        $r9 = r20.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations>;

        r26 = new androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1;

        $r18 = (kotlinx.coroutines.flow.Flow) $r9;

        specialinvoke r26.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: void <init>(kotlinx.coroutines.flow.Flow,kotlin.jvm.internal.Ref$IntRef,androidx.paging.testing.SnapshotLoader)>($r18, r22, r20);

        $r11 = (kotlinx.coroutines.flow.Flow) r26;

        $r12 = staticinvoke <kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow filterNotNull(kotlinx.coroutines.flow.Flow)>($r11);

        $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: java.lang.Object L$0> = r22;

        $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int label> = 2;

        r29 = (kotlin.coroutines.Continuation) $r21;

        $r23 = staticinvoke <kotlinx.coroutines.flow.FlowKt: java.lang.Object first(kotlinx.coroutines.flow.Flow,kotlin.coroutines.Continuation)>($r12, r29);

        if $r23 != r2 goto label7;

        return r2;

     label6:
        $r4 = $r21.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: java.lang.Object L$0>;

        r22 = (kotlin.jvm.internal.Ref$IntRef) $r4;

        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r23 = $r1;

     label7:
        $i0 = r22.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $r5 = staticinvoke <kotlin.coroutines.jvm.internal.Boxing: java.lang.Integer boxInt(int)>($i0);

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r23, $r5);

        return $r6;

     label8:
        r27 = new java.lang.IllegalStateException;

        specialinvoke r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r27;
    }

    private final int computeIndexOffset(androidx.paging.testing.LoaderCallback)
    {
        androidx.paging.testing.SnapshotLoader r0;
        androidx.paging.testing.LoaderCallback $r1;
        androidx.paging.testing.LoaderCallback$CallbackType $r2, $r3;
        int $i0, $i1;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        $r1 := @parameter0: androidx.paging.testing.LoaderCallback;

        $r2 = virtualinvoke $r1.<androidx.paging.testing.LoaderCallback: androidx.paging.testing.LoaderCallback$CallbackType getType()>();

        $r3 = <androidx.paging.testing.LoaderCallback$CallbackType: androidx.paging.testing.LoaderCallback$CallbackType ON_INSERTED>;

        if $r2 != $r3 goto label1;

        $i0 = virtualinvoke $r1.<androidx.paging.testing.LoaderCallback: int getPosition()>();

        if $i0 != 0 goto label1;

        $i1 = virtualinvoke $r1.<androidx.paging.testing.LoaderCallback: int getCount()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    private final void setLastAccessedIndex(int)
    {
        androidx.paging.testing.SnapshotLoader r0;
        int i0;
        kotlinx.coroutines.flow.MutableStateFlow $r1;
        java.lang.Object $r2;
        androidx.paging.testing.Generation $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations>;

        $r2 = interfaceinvoke $r1.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        $r3 = (androidx.paging.testing.Generation) $r2;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.Generation: java.util.concurrent.atomic.AtomicInteger getLastAccessedIndex()>();

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i0);

        return;
    }

    public final void onDataSetChanged$paging_testing_release(androidx.paging.testing.Generation, androidx.paging.testing.LoaderCallback)
    {
        androidx.paging.testing.SnapshotLoader r0;
        androidx.paging.testing.Generation r1, r3, r6, $r11;
        androidx.paging.testing.LoaderCallback r2;
        java.util.concurrent.atomic.AtomicReference r4;
        kotlinx.coroutines.flow.MutableStateFlow r5, $r8, $r10;
        byte b0;
        int i1, $i2, $i3, $i4;
        kotlin.Unit r7;
        java.lang.Object $r9;

        r0 := @this: androidx.paging.testing.SnapshotLoader;

        r1 := @parameter0: androidx.paging.testing.Generation;

        r2 := @parameter1: androidx.paging.testing.LoaderCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "gen");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "callback");

        $r8 = r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations>;

        $r9 = interfaceinvoke $r8.<kotlinx.coroutines.flow.MutableStateFlow: java.lang.Object getValue()>();

        r3 = (androidx.paging.testing.Generation) $r9;

        $i2 = virtualinvoke r1.<androidx.paging.testing.Generation: int getId()>();

        $i3 = virtualinvoke r3.<androidx.paging.testing.Generation: int getId()>();

        if $i2 != $i3 goto label1;

        $r10 = r0.<androidx.paging.testing.SnapshotLoader: kotlinx.coroutines.flow.MutableStateFlow generations>;

        $i4 = virtualinvoke r3.<androidx.paging.testing.Generation: int getCallbackCount()>();

        r4 = virtualinvoke r3.<androidx.paging.testing.Generation: java.util.concurrent.atomic.AtomicReference getCallbackState()>();

        i1 = $i4 + 1;

        b0 = 0;

        r6 = r1;

        r5 = $r10;

        virtualinvoke r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r2);

        r7 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r11 = staticinvoke <androidx.paging.testing.Generation: androidx.paging.testing.Generation copy$default(androidx.paging.testing.Generation,int,int,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicInteger,int,java.lang.Object)>(r6, b0, i1, r4, null, 9, null);

        interfaceinvoke r5.<kotlinx.coroutines.flow.MutableStateFlow: void setValue(java.lang.Object)>($r11);

     label1:
        return;
    }

    public static final java.lang.Object access$appendOrPrependScrollWhile(androidx.paging.testing.SnapshotLoader, androidx.paging.testing.SnapshotLoader$LoadType, kotlin.jvm.functions.Function1, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        androidx.paging.testing.SnapshotLoader$LoadType r1;
        kotlin.jvm.functions.Function1 r2;
        kotlin.coroutines.Continuation $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        r1 := @parameter1: androidx.paging.testing.SnapshotLoader$LoadType;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 := @parameter3: kotlin.coroutines.Continuation;

        $r4 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendOrPrependScrollWhile(androidx.paging.testing.SnapshotLoader$LoadType,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>(r1, r2, $r3);

        return $r4;
    }

    public static final java.lang.Object access$appendOrPrependScrollTo(androidx.paging.testing.SnapshotLoader, int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        int i0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendOrPrependScrollTo(int,kotlin.coroutines.Continuation)>(i0, $r1);

        return $r2;
    }

    public static final java.lang.Object access$appendOrPrependFlingTo(androidx.paging.testing.SnapshotLoader, int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        int i0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendOrPrependFlingTo(int,kotlin.coroutines.Continuation)>(i0, $r1);

        return $r2;
    }

    public static final java.lang.Object access$prependFlingTo(androidx.paging.testing.SnapshotLoader, int, int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        int i0, i1;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 := @parameter3: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object prependFlingTo(int,int,kotlin.coroutines.Continuation)>(i0, i1, $r1);

        return $r2;
    }

    public static final java.lang.Object access$appendFlingTo(androidx.paging.testing.SnapshotLoader, int, int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        int i0, i1;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 := @parameter3: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendFlingTo(int,int,kotlin.coroutines.Continuation)>(i0, i1, $r1);

        return $r2;
    }

    public static final java.lang.Object access$flingToOutOfBounds(androidx.paging.testing.SnapshotLoader, androidx.paging.testing.SnapshotLoader$LoadType, int, int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        androidx.paging.testing.SnapshotLoader$LoadType r1;
        int i0, i1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        r1 := @parameter1: androidx.paging.testing.SnapshotLoader$LoadType;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 := @parameter4: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object flingToOutOfBounds(androidx.paging.testing.SnapshotLoader$LoadType,int,int,kotlin.coroutines.Continuation)>(r1, i0, i1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$awaitScroll(androidx.paging.testing.SnapshotLoader, androidx.paging.testing.SnapshotLoader$LoadType, int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        androidx.paging.testing.SnapshotLoader$LoadType r1;
        int i0;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        r1 := @parameter1: androidx.paging.testing.SnapshotLoader$LoadType;

        i0 := @parameter2: int;

        $r2 := @parameter3: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object awaitScroll(androidx.paging.testing.SnapshotLoader$LoadType,int,kotlin.coroutines.Continuation)>(r1, i0, $r2);

        return $r3;
    }

    public static final java.lang.Object access$awaitNextItem(androidx.paging.testing.SnapshotLoader, androidx.paging.testing.SnapshotLoader$LoadType, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        androidx.paging.testing.SnapshotLoader$LoadType r1;
        kotlin.coroutines.Continuation $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        r1 := @parameter1: androidx.paging.testing.SnapshotLoader$LoadType;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        $r3 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object awaitNextItem(androidx.paging.testing.SnapshotLoader$LoadType,kotlin.coroutines.Continuation)>(r1, $r2);

        return $r3;
    }

    public static final java.lang.Object access$awaitLoad(androidx.paging.testing.SnapshotLoader, int, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        int i0;
        kotlin.coroutines.Continuation $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.coroutines.Continuation;

        $r2 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: java.lang.Object awaitLoad(int,kotlin.coroutines.Continuation)>(i0, $r1);

        return $r2;
    }

    public static final int access$computeIndexOffset(androidx.paging.testing.SnapshotLoader, androidx.paging.testing.LoaderCallback)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        androidx.paging.testing.LoaderCallback $r1;
        int $i0;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r1 := @parameter1: androidx.paging.testing.LoaderCallback;

        $i0 = specialinvoke $r0.<androidx.paging.testing.SnapshotLoader: int computeIndexOffset(androidx.paging.testing.LoaderCallback)>($r1);

        return $i0;
    }

    public static final androidx.paging.PagingDataDiffer access$getDiffer$p(androidx.paging.testing.SnapshotLoader)
    {
        androidx.paging.testing.SnapshotLoader $r0;
        androidx.paging.PagingDataDiffer $r1;

        $r0 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r1 = $r0.<androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer differ>;

        return $r1;
    }

androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1
<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object L$1>
<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object L$2>
<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$appendOrPrependScrollWhile$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.paging.testing.SnapshotLoader: java.lang.Object access$appendOrPrependScrollWhile(androidx.paging.testing.SnapshotLoader,androidx.paging.testing.SnapshotLoader$LoadType,kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>($r3, null, null, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$appendScrollWhile$1
<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object L$1>
<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$appendScrollWhile$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$appendScrollWhile$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$appendScrollWhile$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$appendScrollWhile$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$appendScrollWhile$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.SnapshotLoader: java.lang.Object appendScrollWhile(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>(null, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: int label>
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2 this$0>
    public void <init>(androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1 r0;
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2 r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2 this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2 $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2 this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>(null, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow>
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: kotlin.jvm.internal.Ref$IntRef $offsetIndex$inlined>
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: androidx.paging.testing.SnapshotLoader this$0>
    public void <init>(kotlinx.coroutines.flow.FlowCollector, kotlin.jvm.internal.Ref$IntRef, androidx.paging.testing.SnapshotLoader)
    {
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2 r0;
        kotlinx.coroutines.flow.FlowCollector $r1;
        kotlin.jvm.internal.Ref$IntRef r2;
        androidx.paging.testing.SnapshotLoader r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2;

        $r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        r2 := @parameter1: kotlin.jvm.internal.Ref$IntRef;

        r3 := @parameter2: androidx.paging.testing.SnapshotLoader;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow> = $r1;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: kotlin.jvm.internal.Ref$IntRef $offsetIndex$inlined> = r2;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: androidx.paging.testing.SnapshotLoader this$0> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.Object emit(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2 r0;
        java.lang.Object r1, $r3, r4, r5, $r13, $r19, $r20;
        kotlin.coroutines.Continuation r2, $r11, r26;
        kotlinx.coroutines.flow.FlowCollector r6;
        androidx.paging.testing.Generation r7;
        androidx.paging.testing.LoaderCallback r8;
        boolean $z1;
        kotlin.Unit $r10;
        java.util.concurrent.atomic.AtomicReference $r12;
        kotlin.jvm.internal.Ref$IntRef $r14, $r15, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.paging.testing.SnapshotLoader $r16, $r21;
        androidx.paging.PagingDataDiffer $r17;
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1 $r23, r24;
        java.lang.IllegalStateException r25;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $z1 = r2 instanceof androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1;

        if $z1 == 0 goto label1;

        $r23 = (androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1) r2;

        $i3 = $r23.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: int label>;

        $i4 = $i3 & -2147483648;

        if $i4 == 0 goto label1;

        $i5 = $r23.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: int label>;

        $i6 = $i5 - -2147483648;

        $r23.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: int label> = $i6;

        goto label2;

     label1:
        r24 = new androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1;

        specialinvoke r24.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: void <init>(androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2,kotlin.coroutines.Continuation)>(r0, r2);

        $r23 = r24;

     label2:
        $r3 = $r23.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: java.lang.Object result>;

        r4 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i7 = $r23.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: int label>;

        tableswitch($i7)
        {
            case 0: goto label3;
            case 1: goto label6;
            default: goto label8;
        };

     label3:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

        r5 = r1;

        r6 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow>;

        $r11 = (kotlin.coroutines.Continuation) $r23;

        r7 = (androidx.paging.testing.Generation) r5;

        $r12 = virtualinvoke r7.<androidx.paging.testing.Generation: java.util.concurrent.atomic.AtomicReference getCallbackState()>();

        $r13 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r8 = (androidx.paging.testing.LoaderCallback) $r13;

        $r15 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: kotlin.jvm.internal.Ref$IntRef $offsetIndex$inlined>;

        $r14 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: kotlin.jvm.internal.Ref$IntRef $offsetIndex$inlined>;

        $i0 = $r14.<kotlin.jvm.internal.Ref$IntRef: int element>;

        if r8 == null goto label4;

        $r21 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: androidx.paging.testing.SnapshotLoader this$0>;

        $i8 = staticinvoke <androidx.paging.testing.SnapshotLoader: int access$computeIndexOffset(androidx.paging.testing.SnapshotLoader,androidx.paging.testing.LoaderCallback)>($r21, r8);

        goto label5;

     label4:
        $i8 = 0;

     label5:
        $i1 = $i0 + $i8;

        $r15.<kotlin.jvm.internal.Ref$IntRef: int element> = $i1;

        $r16 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: androidx.paging.testing.SnapshotLoader this$0>;

        $r17 = staticinvoke <androidx.paging.testing.SnapshotLoader: androidx.paging.PagingDataDiffer access$getDiffer$p(androidx.paging.testing.SnapshotLoader)>($r16);

        $r18 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: kotlin.jvm.internal.Ref$IntRef $offsetIndex$inlined>;

        $i2 = $r18.<kotlin.jvm.internal.Ref$IntRef: int element>;

        $r19 = virtualinvoke $r17.<androidx.paging.PagingDataDiffer: java.lang.Object peek(int)>($i2);

        $r23.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2$1: int label> = 1;

        r26 = (kotlin.coroutines.Continuation) $r23;

        $r20 = interfaceinvoke r6.<kotlinx.coroutines.flow.FlowCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)>($r19, r26);

        if $r20 != r4 goto label7;

        return r4;

     label6:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r3);

     label7:
        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r10;

     label8:
        r25 = new java.lang.IllegalStateException;

        specialinvoke r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw r25;
    }

androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined>
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: kotlin.jvm.internal.Ref$IntRef $offsetIndex$inlined>
<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: androidx.paging.testing.SnapshotLoader this$0>
    public void <init>(kotlinx.coroutines.flow.Flow, kotlin.jvm.internal.Ref$IntRef, androidx.paging.testing.SnapshotLoader)
    {
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1 r0;
        kotlinx.coroutines.flow.Flow r1;
        kotlin.jvm.internal.Ref$IntRef r2;
        androidx.paging.testing.SnapshotLoader r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1;

        r1 := @parameter0: kotlinx.coroutines.flow.Flow;

        r2 := @parameter1: kotlin.jvm.internal.Ref$IntRef;

        r3 := @parameter2: androidx.paging.testing.SnapshotLoader;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined> = r1;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: kotlin.jvm.internal.Ref$IntRef $offsetIndex$inlined> = r2;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: androidx.paging.testing.SnapshotLoader this$0> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1 r0;
        kotlinx.coroutines.flow.FlowCollector r1, $r8;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2 $r4;
        androidx.paging.testing.SnapshotLoader $r5;
        kotlin.jvm.internal.Ref$IntRef $r6;
        kotlinx.coroutines.flow.Flow $r7;
        java.lang.Object $r9, $r10;
        kotlin.Unit $r11;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1;

        r1 := @parameter0: kotlinx.coroutines.flow.FlowCollector;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r7 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined>;

        $r4 = new androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2;

        $r6 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: kotlin.jvm.internal.Ref$IntRef $offsetIndex$inlined>;

        $r5 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1: androidx.paging.testing.SnapshotLoader this$0>;

        specialinvoke $r4.<androidx.paging.testing.SnapshotLoader$awaitLoad$$inlined$map$1$2: void <init>(kotlinx.coroutines.flow.FlowCollector,kotlin.jvm.internal.Ref$IntRef,androidx.paging.testing.SnapshotLoader)>(r1, $r6, $r5);

        $r8 = (kotlinx.coroutines.flow.FlowCollector) $r4;

        $r9 = interfaceinvoke $r7.<kotlinx.coroutines.flow.Flow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)>($r8, $r2);

        $r10 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        if $r9 != $r10 goto label1;

        return $r9;

     label1:
        $r11 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r11;
    }

androidx.paging.testing.SnapshotLoader$awaitLoad$1
<androidx.paging.testing.SnapshotLoader$awaitLoad$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int I$0>
<androidx.paging.testing.SnapshotLoader$awaitLoad$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$awaitLoad$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$awaitLoad$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitLoad$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$awaitLoad$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitLoad$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$awaitLoad$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.paging.testing.SnapshotLoader: java.lang.Object access$awaitLoad(androidx.paging.testing.SnapshotLoader,int,kotlin.coroutines.Continuation)>($r3, 0, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$awaitNextItem$1
<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$awaitNextItem$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitNextItem$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$awaitNextItem$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitNextItem$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$awaitNextItem$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.paging.testing.SnapshotLoader: java.lang.Object access$awaitNextItem(androidx.paging.testing.SnapshotLoader,androidx.paging.testing.SnapshotLoader$LoadType,kotlin.coroutines.Continuation)>($r3, null, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$awaitScroll$1
<androidx.paging.testing.SnapshotLoader$awaitScroll$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$awaitScroll$1: java.lang.Object L$1>
<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int I$0>
<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int I$1>
<androidx.paging.testing.SnapshotLoader$awaitScroll$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$awaitScroll$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$awaitScroll$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitScroll$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$awaitScroll$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$awaitScroll$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$awaitScroll$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.paging.testing.SnapshotLoader: java.lang.Object access$awaitScroll(androidx.paging.testing.SnapshotLoader,androidx.paging.testing.SnapshotLoader$LoadType,int,kotlin.coroutines.Continuation)>($r3, null, 0, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$flingTo$1
<androidx.paging.testing.SnapshotLoader$flingTo$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$flingTo$1: int I$0>
<androidx.paging.testing.SnapshotLoader$flingTo$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$flingTo$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$flingTo$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$flingTo$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$flingTo$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$flingTo$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$flingTo$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$flingTo$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$flingTo$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$flingTo$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$flingTo$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$flingTo$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.SnapshotLoader: java.lang.Object flingTo(int,kotlin.coroutines.Continuation)>(0, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1
<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object L$1>
<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int I$0>
<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$flingToOutOfBounds$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = staticinvoke <androidx.paging.testing.SnapshotLoader: java.lang.Object access$flingToOutOfBounds(androidx.paging.testing.SnapshotLoader,androidx.paging.testing.SnapshotLoader$LoadType,int,int,kotlin.coroutines.Continuation)>($r3, null, 0, 0, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$LoadType
<androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType PREPEND>
<androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType APPEND>
<androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.paging.testing.SnapshotLoader$LoadType r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.paging.testing.SnapshotLoader$LoadType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.paging.testing.SnapshotLoader$LoadType[] values()
    {
        androidx.paging.testing.SnapshotLoader$LoadType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.paging.testing.SnapshotLoader$LoadType[]) $r1;

        return $r2;
    }

    public static androidx.paging.testing.SnapshotLoader$LoadType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.paging.testing.SnapshotLoader$LoadType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/paging/testing/SnapshotLoader$LoadType;", r0);

        $r2 = (androidx.paging.testing.SnapshotLoader$LoadType) $r1;

        return $r2;
    }

    private static final androidx.paging.testing.SnapshotLoader$LoadType[] $values()
    {
        androidx.paging.testing.SnapshotLoader$LoadType[] r0;
        androidx.paging.testing.SnapshotLoader$LoadType $r1, $r2;

        r0 = newarray (androidx.paging.testing.SnapshotLoader$LoadType)[2];

        $r1 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType PREPEND>;

        r0[0] = $r1;

        $r2 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType APPEND>;

        r0[1] = $r2;

        return r0;
    }

    static void <clinit>()
    {
        androidx.paging.testing.SnapshotLoader$LoadType $r0, $r1;
        androidx.paging.testing.SnapshotLoader$LoadType[] $r2;

        $r0 = new androidx.paging.testing.SnapshotLoader$LoadType;

        specialinvoke $r0.<androidx.paging.testing.SnapshotLoader$LoadType: void <init>(java.lang.String,int)>("PREPEND", 0);

        <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType PREPEND> = $r0;

        $r1 = new androidx.paging.testing.SnapshotLoader$LoadType;

        specialinvoke $r1.<androidx.paging.testing.SnapshotLoader$LoadType: void <init>(java.lang.String,int)>("APPEND", 1);

        <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType APPEND> = $r1;

        $r2 = staticinvoke <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType[] $values()>();

        <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType[] $VALUES> = $r2;

        return;
    }

androidx.paging.testing.SnapshotLoader$prependScrollWhile$1
<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object L$1>
<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$prependScrollWhile$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$prependScrollWhile$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$prependScrollWhile$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$prependScrollWhile$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$prependScrollWhile$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.SnapshotLoader: java.lang.Object prependScrollWhile(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)>(null, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$refresh$1
<androidx.paging.testing.SnapshotLoader$refresh$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$refresh$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$refresh$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$refresh$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$refresh$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$refresh$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$refresh$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$refresh$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$refresh$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$refresh$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$refresh$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$refresh$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$refresh$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.SnapshotLoader: java.lang.Object refresh(kotlin.coroutines.Continuation)>($r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$scrollTo$1
<androidx.paging.testing.SnapshotLoader$scrollTo$1: java.lang.Object L$0>
<androidx.paging.testing.SnapshotLoader$scrollTo$1: int I$0>
<androidx.paging.testing.SnapshotLoader$scrollTo$1: java.lang.Object result>
<androidx.paging.testing.SnapshotLoader$scrollTo$1: androidx.paging.testing.SnapshotLoader this$0>
<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label>
    void <init>(androidx.paging.testing.SnapshotLoader, kotlin.coroutines.Continuation)
    {
        androidx.paging.testing.SnapshotLoader$scrollTo$1 r0;
        androidx.paging.testing.SnapshotLoader r1;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.paging.testing.SnapshotLoader$scrollTo$1;

        r1 := @parameter0: androidx.paging.testing.SnapshotLoader;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        r0.<androidx.paging.testing.SnapshotLoader$scrollTo$1: androidx.paging.testing.SnapshotLoader this$0> = r1;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.ContinuationImpl: void <init>(kotlin.coroutines.Continuation)>($r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.paging.testing.SnapshotLoader$scrollTo$1 r0;
        java.lang.Object $r1, $r4;
        int $i0, $i1;
        kotlin.coroutines.Continuation $r2;
        androidx.paging.testing.SnapshotLoader $r3;

        r0 := @this: androidx.paging.testing.SnapshotLoader$scrollTo$1;

        $r1 := @parameter0: java.lang.Object;

        r0.<androidx.paging.testing.SnapshotLoader$scrollTo$1: java.lang.Object result> = $r1;

        $i0 = r0.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label>;

        $i1 = $i0 | -2147483648;

        r0.<androidx.paging.testing.SnapshotLoader$scrollTo$1: int label> = $i1;

        $r3 = r0.<androidx.paging.testing.SnapshotLoader$scrollTo$1: androidx.paging.testing.SnapshotLoader this$0>;

        $r2 = (kotlin.coroutines.Continuation) r0;

        $r4 = virtualinvoke $r3.<androidx.paging.testing.SnapshotLoader: java.lang.Object scrollTo(int,kotlin.coroutines.Continuation)>(0, $r2);

        return $r4;
    }

androidx.paging.testing.SnapshotLoader$WhenMappings
<androidx.paging.testing.SnapshotLoader$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.paging.testing.SnapshotLoader$LoadType[] $r1;
        int $i0, $i1, $i2;
        androidx.paging.testing.SnapshotLoader$LoadType $r2, $r3;
        java.lang.Throwable $r4, $r5, r6, r7;

        $r1 = staticinvoke <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

     label1:
        $r2 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType PREPEND>;

        $i1 = virtualinvoke $r2.<androidx.paging.testing.SnapshotLoader$LoadType: int ordinal()>();

        r0[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

     label4:
        $r3 = <androidx.paging.testing.SnapshotLoader$LoadType: androidx.paging.testing.SnapshotLoader$LoadType APPEND>;

        $i2 = virtualinvoke $r3.<androidx.paging.testing.SnapshotLoader$LoadType: int ordinal()>();

        r0[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r7 = $r4;

     label7:
        <androidx.paging.testing.SnapshotLoader$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

