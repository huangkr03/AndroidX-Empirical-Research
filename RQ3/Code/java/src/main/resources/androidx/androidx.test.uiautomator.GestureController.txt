androidx.test.uiautomator.GestureController
<androidx.test.uiautomator.GestureController: long MOTION_EVENT_INJECTION_DELAY_MILLIS>
<androidx.test.uiautomator.GestureController: androidx.test.uiautomator.GestureController sInstance>
<androidx.test.uiautomator.GestureController: androidx.test.uiautomator.UiDevice mDevice>
<androidx.test.uiautomator.GestureController: java.util.Comparator START_TIME_COMPARATOR>
<androidx.test.uiautomator.GestureController: java.util.Comparator END_TIME_COMPARATOR>
    private void <init>(androidx.test.uiautomator.UiDevice)
    {
        androidx.test.uiautomator.GestureController r0;
        androidx.test.uiautomator.UiDevice r1;

        r0 := @this: androidx.test.uiautomator.GestureController;

        r1 := @parameter0: androidx.test.uiautomator.UiDevice;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.uiautomator.GestureController: androidx.test.uiautomator.UiDevice mDevice> = r1;

        return;
    }

    public static androidx.test.uiautomator.GestureController getInstance(androidx.test.uiautomator.UiDevice)
    {
        androidx.test.uiautomator.UiDevice r0;
        androidx.test.uiautomator.GestureController $r1, $r2, $r3;

        r0 := @parameter0: androidx.test.uiautomator.UiDevice;

        $r1 = <androidx.test.uiautomator.GestureController: androidx.test.uiautomator.GestureController sInstance>;

        if $r1 != null goto label1;

        $r3 = new androidx.test.uiautomator.GestureController;

        specialinvoke $r3.<androidx.test.uiautomator.GestureController: void <init>(androidx.test.uiautomator.UiDevice)>(r0);

        <androidx.test.uiautomator.GestureController: androidx.test.uiautomator.GestureController sInstance> = $r3;

     label1:
        $r2 = <androidx.test.uiautomator.GestureController: androidx.test.uiautomator.GestureController sInstance>;

        return $r2;
    }

    public transient java.lang.Object performGestureAndWait(androidx.test.uiautomator.EventCondition, long, androidx.test.uiautomator.PointerGesture[])
    {
        androidx.test.uiautomator.GestureController r0;
        androidx.test.uiautomator.EventCondition r1;
        long l0;
        androidx.test.uiautomator.PointerGesture[] r2;
        androidx.test.uiautomator.UiDevice $r3;
        androidx.test.uiautomator.GestureController$GestureRunnable $r4;
        java.lang.Object $r5;

        r0 := @this: androidx.test.uiautomator.GestureController;

        r1 := @parameter0: androidx.test.uiautomator.EventCondition;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.test.uiautomator.PointerGesture[];

        $r3 = virtualinvoke r0.<androidx.test.uiautomator.GestureController: androidx.test.uiautomator.UiDevice getDevice()>();

        $r4 = new androidx.test.uiautomator.GestureController$GestureRunnable;

        specialinvoke $r4.<androidx.test.uiautomator.GestureController$GestureRunnable: void <init>(androidx.test.uiautomator.GestureController,androidx.test.uiautomator.PointerGesture[])>(r0, r2);

        $r5 = virtualinvoke $r3.<androidx.test.uiautomator.UiDevice: java.lang.Object performActionAndWait(java.lang.Runnable,androidx.test.uiautomator.EventCondition,long)>($r4, r1, l0);

        return $r5;
    }

    public transient void performGesture(androidx.test.uiautomator.PointerGesture[])
    {
        androidx.test.uiautomator.GestureController r0;
        androidx.test.uiautomator.PointerGesture[] r1, r43;
        java.util.HashMap r2, $r3;
        long l0, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l11, $l13, $l15, l23;
        java.util.ArrayList $r4, $r5, r45, r46;
        java.util.PriorityQueue $r6, $r8, r47, r48;
        java.util.Comparator $r7, $r9;
        int $i1, $i2, $i12, $i16, $i17, $i18, $i19, i20, i21, i22, i24, i25, i26;
        java.util.List $r10;
        boolean $z1, $z2, $z4, $z5, $z9, $z12, $z13, $z14, $z15;
        androidx.test.uiautomator.UiDevice $r11, $r24, $r38;
        android.app.UiAutomation $r12, $r25, $r39;
        java.lang.Object $r13, $r14, $r16, $r18, $r20, $r21, $r28, $r29, $r32, $r34, $r35;
        android.graphics.Point $r15, $r22, $r31, $r41;
        androidx.test.uiautomator.PointerGesture $r17, $r19, $r33, r44, r49, r52, r55, r58;
        byte $b10, $b14;
        android.view.MotionEvent$PointerProperties $r23, $r36;
        androidx.test.uiautomator.GestureController$Pointer $r30, $r40, r50, r53, r59;
        android.view.MotionEvent$PointerCoords $r37;
        android.view.MotionEvent r51, r56, r60;
        java.util.Iterator r54, r57;

        r0 := @this: androidx.test.uiautomator.GestureController;

        r1 := @parameter0: androidx.test.uiautomator.PointerGesture[];

        i20 = 0;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r2 = $r3;

        r43 = r1;

        i21 = lengthof r43;

        i22 = 0;

     label01:
        if i22 >= i21 goto label02;

        r44 = r43[i22];

        $r40 = new androidx.test.uiautomator.GestureController$Pointer;

        $i19 = i20;

        i20 = i20 + 1;

        $r41 = virtualinvoke r44.<androidx.test.uiautomator.PointerGesture: android.graphics.Point start()>();

        specialinvoke $r40.<androidx.test.uiautomator.GestureController$Pointer: void <init>(int,android.graphics.Point)>($i19, $r41);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r44, $r40);

        i22 = i22 + 1;

        goto label01;

     label02:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r45 = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r46 = $r5;

        $r6 = new java.util.PriorityQueue;

        $i1 = lengthof r1;

        $r7 = <androidx.test.uiautomator.GestureController: java.util.Comparator END_TIME_COMPARATOR>;

        specialinvoke $r6.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>($i1, $r7);

        r47 = $r6;

        $r8 = new java.util.PriorityQueue;

        $i2 = lengthof r1;

        $r9 = <androidx.test.uiautomator.GestureController: java.util.Comparator START_TIME_COMPARATOR>;

        specialinvoke $r8.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>($i2, $r9);

        r48 = $r8;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        virtualinvoke r48.<java.util.PriorityQueue: boolean addAll(java.util.Collection)>($r10);

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l23 = 0L;

     label03:
        $z1 = virtualinvoke r48.<java.util.PriorityQueue: boolean isEmpty()>();

        if $z1 == 0 goto label04;

        $z12 = virtualinvoke r47.<java.util.PriorityQueue: boolean isEmpty()>();

        if $z12 != 0 goto label14;

     label04:
        $z13 = virtualinvoke r48.<java.util.PriorityQueue: boolean isEmpty()>();

        if $z13 != 0 goto label06;

        $r32 = virtualinvoke r48.<java.util.PriorityQueue: java.lang.Object peek()>();

        $r33 = (androidx.test.uiautomator.PointerGesture) $r32;

        $l13 = virtualinvoke $r33.<androidx.test.uiautomator.PointerGesture: long delay()>();

        $b14 = l23 cmp $l13;

        if $b14 <= 0 goto label06;

        $r34 = virtualinvoke r48.<java.util.PriorityQueue: java.lang.Object remove()>();

        r49 = (androidx.test.uiautomator.PointerGesture) $r34;

        $r35 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r49);

        r50 = (androidx.test.uiautomator.GestureController$Pointer) $r35;

        $r36 = r50.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerProperties prop>;

        interfaceinvoke r45.<java.util.List: boolean add(java.lang.Object)>($r36);

        $r37 = r50.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerCoords coords>;

        interfaceinvoke r46.<java.util.List: boolean add(java.lang.Object)>($r37);

        i24 = 0;

        $z9 = virtualinvoke r47.<java.util.PriorityQueue: boolean isEmpty()>();

        if $z9 != 0 goto label05;

        $i16 = interfaceinvoke r45.<java.util.List: int size()>();

        $i17 = $i16 - 1;

        $i18 = $i17 << 8;

        i24 = 5 + $i18;

     label05:
        $l15 = l0 + l23;

        r51 = staticinvoke <androidx.test.uiautomator.GestureController: android.view.MotionEvent getMotionEvent(long,long,int,java.util.List,java.util.List)>(l0, $l15, i24, r45, r46);

        $r38 = virtualinvoke r0.<androidx.test.uiautomator.GestureController: androidx.test.uiautomator.UiDevice getDevice()>();

        $r39 = virtualinvoke $r38.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        virtualinvoke $r39.<android.app.UiAutomation: boolean injectInputEvent(android.view.InputEvent,boolean)>(r51, 1);

        virtualinvoke r47.<java.util.PriorityQueue: boolean add(java.lang.Object)>(r49);

        goto label04;

     label06:
        $z14 = virtualinvoke r47.<java.util.PriorityQueue: boolean isEmpty()>();

        if $z14 != 0 goto label10;

        $r16 = virtualinvoke r47.<java.util.PriorityQueue: java.lang.Object peek()>();

        $r17 = (androidx.test.uiautomator.PointerGesture) $r16;

        $l7 = virtualinvoke $r17.<androidx.test.uiautomator.PointerGesture: long delay()>();

        $r18 = virtualinvoke r47.<java.util.PriorityQueue: java.lang.Object peek()>();

        $r19 = (androidx.test.uiautomator.PointerGesture) $r18;

        $l8 = virtualinvoke $r19.<androidx.test.uiautomator.PointerGesture: long duration()>();

        $l9 = $l7 + $l8;

        $b10 = l23 cmp $l9;

        if $b10 <= 0 goto label10;

        $r20 = virtualinvoke r47.<java.util.PriorityQueue: java.lang.Object remove()>();

        r52 = (androidx.test.uiautomator.PointerGesture) $r20;

        $r21 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r52);

        r53 = (androidx.test.uiautomator.GestureController$Pointer) $r21;

        $r22 = virtualinvoke r52.<androidx.test.uiautomator.PointerGesture: android.graphics.Point end()>();

        virtualinvoke r53.<androidx.test.uiautomator.GestureController$Pointer: void updatePosition(android.graphics.Point)>($r22);

        r54 = virtualinvoke r47.<java.util.PriorityQueue: java.util.Iterator iterator()>();

     label07:
        $z4 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label08;

        $r28 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (androidx.test.uiautomator.PointerGesture) $r28;

        $r29 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r55);

        $r30 = (androidx.test.uiautomator.GestureController$Pointer) $r29;

        $r31 = virtualinvoke r55.<androidx.test.uiautomator.PointerGesture: android.graphics.Point pointAt(long)>(l23);

        virtualinvoke $r30.<androidx.test.uiautomator.GestureController$Pointer: void updatePosition(android.graphics.Point)>($r31);

        goto label07;

     label08:
        i25 = 1;

        $r23 = r53.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerProperties prop>;

        i26 = interfaceinvoke r45.<java.util.List: int indexOf(java.lang.Object)>($r23);

        $z5 = virtualinvoke r47.<java.util.PriorityQueue: boolean isEmpty()>();

        if $z5 != 0 goto label09;

        $i12 = i26 << 8;

        i25 = 6 + $i12;

     label09:
        $l11 = l0 + l23;

        r56 = staticinvoke <androidx.test.uiautomator.GestureController: android.view.MotionEvent getMotionEvent(long,long,int,java.util.List,java.util.List)>(l0, $l11, i25, r45, r46);

        $r24 = virtualinvoke r0.<androidx.test.uiautomator.GestureController: androidx.test.uiautomator.UiDevice getDevice()>();

        $r25 = virtualinvoke $r24.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        virtualinvoke $r25.<android.app.UiAutomation: boolean injectInputEvent(android.view.InputEvent,boolean)>(r56, 1);

        interfaceinvoke r45.<java.util.List: java.lang.Object remove(int)>(i26);

        interfaceinvoke r46.<java.util.List: java.lang.Object remove(int)>(i26);

        goto label06;

     label10:
        r57 = virtualinvoke r47.<java.util.PriorityQueue: java.util.Iterator iterator()>();

     label11:
        $z15 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label12;

        $r13 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        r58 = (androidx.test.uiautomator.PointerGesture) $r13;

        $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r58);

        r59 = (androidx.test.uiautomator.GestureController$Pointer) $r14;

        $l5 = virtualinvoke r58.<androidx.test.uiautomator.PointerGesture: long delay()>();

        $l6 = l23 - $l5;

        $r15 = virtualinvoke r58.<androidx.test.uiautomator.PointerGesture: android.graphics.Point pointAt(long)>($l6);

        virtualinvoke r59.<androidx.test.uiautomator.GestureController$Pointer: void updatePosition(android.graphics.Point)>($r15);

        goto label11;

     label12:
        $z2 = virtualinvoke r47.<java.util.PriorityQueue: boolean isEmpty()>();

        if $z2 != 0 goto label13;

        $l4 = l0 + l23;

        r60 = staticinvoke <androidx.test.uiautomator.GestureController: android.view.MotionEvent getMotionEvent(long,long,int,java.util.List,java.util.List)>(l0, $l4, 2, r45, r46);

        $r11 = virtualinvoke r0.<androidx.test.uiautomator.GestureController: androidx.test.uiautomator.UiDevice getDevice()>();

        $r12 = virtualinvoke $r11.<androidx.test.uiautomator.UiDevice: android.app.UiAutomation getUiAutomation()>();

        virtualinvoke $r12.<android.app.UiAutomation: boolean injectInputEvent(android.view.InputEvent,boolean)>(r60, 1);

     label13:
        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l23 = $l3 - l0;

        goto label03;

     label14:
        return;
    }

    private static android.view.MotionEvent getMotionEvent(long, long, int, java.util.List, java.util.List)
    {
        long l0, l1;
        int i2, $i3, $i4, $i5;
        java.util.List r0, r1;
        android.view.MotionEvent$PointerProperties[] r2, $r4;
        android.view.MotionEvent$PointerCoords[] r3, $r6;
        java.lang.Object[] $r5, $r7;
        android.view.MotionEvent $r8;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        r0 := @parameter3: java.util.List;

        r1 := @parameter4: java.util.List;

        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        $r4 = newarray (android.view.MotionEvent$PointerProperties)[$i3];

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r2 = (android.view.MotionEvent$PointerProperties[]) $r5;

        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = newarray (android.view.MotionEvent$PointerCoords)[$i4];

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r3 = (android.view.MotionEvent$PointerCoords[]) $r7;

        $i5 = lengthof r2;

        $r8 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>(l0, l1, i2, $i5, r2, r3, 0, 0, 1.0F, 1.0F, 0, 0, 4098, 0);

        return $r8;
    }

    androidx.test.uiautomator.UiDevice getDevice()
    {
        androidx.test.uiautomator.GestureController r0;
        androidx.test.uiautomator.UiDevice $r1;

        r0 := @this: androidx.test.uiautomator.GestureController;

        $r1 = r0.<androidx.test.uiautomator.GestureController: androidx.test.uiautomator.UiDevice mDevice>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.test.uiautomator.GestureController$1 $r0;
        androidx.test.uiautomator.GestureController$2 $r1;

        $r0 = new androidx.test.uiautomator.GestureController$1;

        specialinvoke $r0.<androidx.test.uiautomator.GestureController$1: void <init>()>();

        <androidx.test.uiautomator.GestureController: java.util.Comparator START_TIME_COMPARATOR> = $r0;

        $r1 = new androidx.test.uiautomator.GestureController$2;

        specialinvoke $r1.<androidx.test.uiautomator.GestureController$2: void <init>()>();

        <androidx.test.uiautomator.GestureController: java.util.Comparator END_TIME_COMPARATOR> = $r1;

        return;
    }

androidx.test.uiautomator.GestureController$1
    void <init>()
    {
        androidx.test.uiautomator.GestureController$1 r0;

        r0 := @this: androidx.test.uiautomator.GestureController$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(androidx.test.uiautomator.PointerGesture, androidx.test.uiautomator.PointerGesture)
    {
        androidx.test.uiautomator.GestureController$1 r0;
        androidx.test.uiautomator.PointerGesture r1, r2;
        long $l0, $l1, $l2;
        int $i3;

        r0 := @this: androidx.test.uiautomator.GestureController$1;

        r1 := @parameter0: androidx.test.uiautomator.PointerGesture;

        r2 := @parameter1: androidx.test.uiautomator.PointerGesture;

        $l0 = virtualinvoke r1.<androidx.test.uiautomator.PointerGesture: long delay()>();

        $l1 = virtualinvoke r2.<androidx.test.uiautomator.PointerGesture: long delay()>();

        $l2 = $l0 - $l1;

        $i3 = (int) $l2;

        return $i3;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        androidx.test.uiautomator.GestureController$1 r0;
        java.lang.Object r1, r2;
        androidx.test.uiautomator.PointerGesture $r3, $r4;
        int $i0;

        r0 := @this: androidx.test.uiautomator.GestureController$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.test.uiautomator.PointerGesture) r1;

        $r3 = (androidx.test.uiautomator.PointerGesture) r2;

        $i0 = virtualinvoke r0.<androidx.test.uiautomator.GestureController$1: int compare(androidx.test.uiautomator.PointerGesture,androidx.test.uiautomator.PointerGesture)>($r4, $r3);

        return $i0;
    }

androidx.test.uiautomator.GestureController$2
    void <init>()
    {
        androidx.test.uiautomator.GestureController$2 r0;

        r0 := @this: androidx.test.uiautomator.GestureController$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(androidx.test.uiautomator.PointerGesture, androidx.test.uiautomator.PointerGesture)
    {
        androidx.test.uiautomator.GestureController$2 r0;
        androidx.test.uiautomator.PointerGesture r1, r2;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6;
        int $i7;

        r0 := @this: androidx.test.uiautomator.GestureController$2;

        r1 := @parameter0: androidx.test.uiautomator.PointerGesture;

        r2 := @parameter1: androidx.test.uiautomator.PointerGesture;

        $l0 = virtualinvoke r1.<androidx.test.uiautomator.PointerGesture: long delay()>();

        $l1 = virtualinvoke r2.<androidx.test.uiautomator.PointerGesture: long duration()>();

        $l2 = $l0 + $l1;

        $l3 = virtualinvoke r2.<androidx.test.uiautomator.PointerGesture: long delay()>();

        $l4 = virtualinvoke r2.<androidx.test.uiautomator.PointerGesture: long duration()>();

        $l5 = $l3 + $l4;

        $l6 = $l2 - $l5;

        $i7 = (int) $l6;

        return $i7;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        androidx.test.uiautomator.GestureController$2 r0;
        java.lang.Object r1, r2;
        androidx.test.uiautomator.PointerGesture $r3, $r4;
        int $i0;

        r0 := @this: androidx.test.uiautomator.GestureController$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (androidx.test.uiautomator.PointerGesture) r1;

        $r3 = (androidx.test.uiautomator.PointerGesture) r2;

        $i0 = virtualinvoke r0.<androidx.test.uiautomator.GestureController$2: int compare(androidx.test.uiautomator.PointerGesture,androidx.test.uiautomator.PointerGesture)>($r4, $r3);

        return $i0;
    }

androidx.test.uiautomator.GestureController$GestureRunnable
<androidx.test.uiautomator.GestureController$GestureRunnable: androidx.test.uiautomator.PointerGesture[] mGestures>
<androidx.test.uiautomator.GestureController$GestureRunnable: androidx.test.uiautomator.GestureController this$0>
    public void <init>(androidx.test.uiautomator.GestureController, androidx.test.uiautomator.PointerGesture[])
    {
        androidx.test.uiautomator.GestureController$GestureRunnable r0;
        androidx.test.uiautomator.GestureController r1;
        androidx.test.uiautomator.PointerGesture[] r2;

        r0 := @this: androidx.test.uiautomator.GestureController$GestureRunnable;

        r1 := @parameter0: androidx.test.uiautomator.GestureController;

        r2 := @parameter1: androidx.test.uiautomator.PointerGesture[];

        r0.<androidx.test.uiautomator.GestureController$GestureRunnable: androidx.test.uiautomator.GestureController this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.uiautomator.GestureController$GestureRunnable: androidx.test.uiautomator.PointerGesture[] mGestures> = r2;

        return;
    }

    public void run()
    {
        androidx.test.uiautomator.GestureController$GestureRunnable r0;
        androidx.test.uiautomator.PointerGesture[] $r1;
        androidx.test.uiautomator.GestureController $r2;

        r0 := @this: androidx.test.uiautomator.GestureController$GestureRunnable;

        $r2 = r0.<androidx.test.uiautomator.GestureController$GestureRunnable: androidx.test.uiautomator.GestureController this$0>;

        $r1 = r0.<androidx.test.uiautomator.GestureController$GestureRunnable: androidx.test.uiautomator.PointerGesture[] mGestures>;

        virtualinvoke $r2.<androidx.test.uiautomator.GestureController: void performGesture(androidx.test.uiautomator.PointerGesture[])>($r1);

        return;
    }

androidx.test.uiautomator.GestureController$Pointer
<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerProperties prop>
<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerCoords coords>
    public void <init>(int, android.graphics.Point)
    {
        androidx.test.uiautomator.GestureController$Pointer r0;
        int i0, $i1, $i2, $i3;
        android.graphics.Point r1;
        android.view.MotionEvent$PointerProperties $r2, $r3, $r4;
        androidx.test.uiautomator.Configurator $r5;
        android.view.MotionEvent$PointerCoords $r6, $r7, $r8, $r9, $r10;
        float $f0, $f1;

        r0 := @this: androidx.test.uiautomator.GestureController$Pointer;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Point;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.view.MotionEvent$PointerProperties;

        specialinvoke $r2.<android.view.MotionEvent$PointerProperties: void <init>()>();

        r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerProperties prop> = $r2;

        $r3 = r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerProperties prop>;

        $r3.<android.view.MotionEvent$PointerProperties: int id> = i0;

        $r4 = r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerProperties prop>;

        $r5 = staticinvoke <androidx.test.uiautomator.Configurator: androidx.test.uiautomator.Configurator getInstance()>();

        $i1 = virtualinvoke $r5.<androidx.test.uiautomator.Configurator: int getToolType()>();

        $r4.<android.view.MotionEvent$PointerProperties: int toolType> = $i1;

        $r6 = new android.view.MotionEvent$PointerCoords;

        specialinvoke $r6.<android.view.MotionEvent$PointerCoords: void <init>()>();

        r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerCoords coords> = $r6;

        $r7 = r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerCoords coords>;

        $r7.<android.view.MotionEvent$PointerCoords: float pressure> = 1.0F;

        $r8 = r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerCoords coords>;

        $r8.<android.view.MotionEvent$PointerCoords: float size> = 1.0F;

        $r9 = r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerCoords coords>;

        $i2 = r1.<android.graphics.Point: int x>;

        $f0 = (float) $i2;

        $r9.<android.view.MotionEvent$PointerCoords: float x> = $f0;

        $r10 = r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerCoords coords>;

        $i3 = r1.<android.graphics.Point: int y>;

        $f1 = (float) $i3;

        $r10.<android.view.MotionEvent$PointerCoords: float y> = $f1;

        return;
    }

    public void updatePosition(android.graphics.Point)
    {
        androidx.test.uiautomator.GestureController$Pointer r0;
        android.graphics.Point r1;
        int $i0, $i1;
        float $f0, $f1;
        android.view.MotionEvent$PointerCoords $r2, $r3;

        r0 := @this: androidx.test.uiautomator.GestureController$Pointer;

        r1 := @parameter0: android.graphics.Point;

        $r2 = r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerCoords coords>;

        $i0 = r1.<android.graphics.Point: int x>;

        $f0 = (float) $i0;

        $r2.<android.view.MotionEvent$PointerCoords: float x> = $f0;

        $r3 = r0.<androidx.test.uiautomator.GestureController$Pointer: android.view.MotionEvent$PointerCoords coords>;

        $i1 = r1.<android.graphics.Point: int y>;

        $f1 = (float) $i1;

        $r3.<android.view.MotionEvent$PointerCoords: float y> = $f1;

        return;
    }

