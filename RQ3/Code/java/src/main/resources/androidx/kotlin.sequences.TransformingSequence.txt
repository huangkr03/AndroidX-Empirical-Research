kotlin.sequences.TransformingSequence
<kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence sequence>
<kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 transformer>
    public void <init>(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.TransformingSequence $r0;
        kotlin.sequences.Sequence $r1;
        kotlin.jvm.functions.Function1 $r2;

        $r0 := @this: kotlin.sequences.TransformingSequence;

        $r1 := @parameter0: kotlin.sequences.Sequence;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sequence");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "transformer");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence sequence> = $r1;

        $r0.<kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 transformer> = $r2;

        return;
    }

    public static final kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingSequence)
    {
        kotlin.sequences.TransformingSequence $r0;
        kotlin.sequences.Sequence r1;

        $r0 := @parameter0: kotlin.sequences.TransformingSequence;

        r1 = $r0.<kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence sequence>;

        return r1;
    }

    public static final kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.TransformingSequence)
    {
        kotlin.sequences.TransformingSequence $r0;
        kotlin.jvm.functions.Function1 r1;

        $r0 := @parameter0: kotlin.sequences.TransformingSequence;

        r1 = $r0.<kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 transformer>;

        return r1;
    }

    public final kotlin.sequences.Sequence flatten$kotlin_stdlib(kotlin.jvm.functions.Function1)
    {
        kotlin.sequences.TransformingSequence $r0;
        kotlin.jvm.functions.Function1 $r1, $r3;
        kotlin.sequences.Sequence $r2;
        kotlin.sequences.FlatteningSequence $r4;

        $r0 := @this: kotlin.sequences.TransformingSequence;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "iterator");

        $r4 = new kotlin.sequences.FlatteningSequence;

        $r2 = $r0.<kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence sequence>;

        $r3 = $r0.<kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 transformer>;

        specialinvoke $r4.<kotlin.sequences.FlatteningSequence: void <init>(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>($r2, $r3, $r1);

        return $r4;
    }

    public java.util.Iterator iterator()
    {
        kotlin.sequences.TransformingSequence $r0;
        kotlin.sequences.TransformingSequence$iterator$1 $r1;

        $r0 := @this: kotlin.sequences.TransformingSequence;

        $r1 = new kotlin.sequences.TransformingSequence$iterator$1;

        specialinvoke $r1.<kotlin.sequences.TransformingSequence$iterator$1: void <init>(kotlin.sequences.TransformingSequence)>($r0);

        return $r1;
    }

kotlin.sequences.TransformingSequence$iterator$1
<kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator>
<kotlin.sequences.TransformingSequence$iterator$1: kotlin.sequences.TransformingSequence this$0>
    void <init>(kotlin.sequences.TransformingSequence)
    {
        kotlin.sequences.TransformingSequence$iterator$1 $r0;
        kotlin.sequences.TransformingSequence $r1;
        kotlin.sequences.Sequence $r2;
        java.util.Iterator $r3;

        $r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        $r1 := @parameter0: kotlin.sequences.TransformingSequence;

        $r0.<kotlin.sequences.TransformingSequence$iterator$1: kotlin.sequences.TransformingSequence this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingSequence)>($r1);

        $r3 = interfaceinvoke $r2.<kotlin.sequences.Sequence: java.util.Iterator iterator()>();

        $r0.<kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator> = $r3;

        return;
    }

    public final java.util.Iterator getIterator()
    {
        kotlin.sequences.TransformingSequence$iterator$1 $r0;
        java.util.Iterator r1;

        $r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        r1 = $r0.<kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator>;

        return r1;
    }

    public boolean hasNext()
    {
        kotlin.sequences.TransformingSequence$iterator$1 $r0;
        boolean $z0;
        java.util.Iterator $r1;

        $r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        $r1 = $r0.<kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        kotlin.sequences.TransformingSequence$iterator$1 $r0;
        kotlin.sequences.TransformingSequence $r1;
        kotlin.jvm.functions.Function1 $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;

        $r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        $r1 = $r0.<kotlin.sequences.TransformingSequence$iterator$1: kotlin.sequences.TransformingSequence this$0>;

        $r2 = staticinvoke <kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.TransformingSequence)>($r1);

        $r3 = $r0.<kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r4 = interfaceinvoke $r2.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

        return $r4;
    }

    public void remove()
    {
        kotlin.sequences.TransformingSequence$iterator$1 $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.sequences.TransformingSequence$iterator$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

