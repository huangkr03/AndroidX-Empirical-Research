androidx.test.services.events.run.TestRunFinishedEvent
<androidx.test.services.events.run.TestRunFinishedEvent: int count>
<androidx.test.services.events.run.TestRunFinishedEvent: int ignoreCount>
<androidx.test.services.events.run.TestRunFinishedEvent: long runTime>
<androidx.test.services.events.run.TestRunFinishedEvent: java.util.List failures>
    androidx.test.services.events.run.TestRunEvent$EventType instanceType()
    {
        androidx.test.services.events.run.TestRunFinishedEvent r0;
        androidx.test.services.events.run.TestRunEvent$EventType $r1;

        r0 := @this: androidx.test.services.events.run.TestRunFinishedEvent;

        $r1 = <androidx.test.services.events.run.TestRunEvent$EventType: androidx.test.services.events.run.TestRunEvent$EventType FINISHED>;

        return $r1;
    }

    void <init>(android.os.Parcel)
    {
        androidx.test.services.events.run.TestRunFinishedEvent r0;
        android.os.Parcel r1;
        android.os.Parcelable[] r2, r3;
        int i0, $i1, $i2, i4;
        android.os.Parcelable r4;
        long $l3;
        java.util.ArrayList $r5;
        java.lang.Class $r6;
        java.lang.ClassLoader $r7;
        androidx.test.services.events.FailureInfo $r8;
        java.util.List $r9;

        r0 := @this: androidx.test.services.events.run.TestRunFinishedEvent;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<androidx.test.services.events.run.TestRunEvent: void <init>()>();

        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<androidx.test.services.events.run.TestRunFinishedEvent: int count> = $i1;

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<androidx.test.services.events.run.TestRunFinishedEvent: int ignoreCount> = $i2;

        $l3 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<androidx.test.services.events.run.TestRunFinishedEvent: long runTime> = $l3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<androidx.test.services.events.run.TestRunFinishedEvent: java.util.List failures> = $r5;

        $r6 = class "[Landroidx/test/services/events/FailureInfo;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r2 = virtualinvoke r1.<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>($r7);

        r3 = r2;

        i0 = lengthof r3;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r4 = r3[i4];

        $r9 = r0.<androidx.test.services.events.run.TestRunFinishedEvent: java.util.List failures>;

        $r8 = (androidx.test.services.events.FailureInfo) r4;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r8);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(int, int, long, java.util.List)
    {
        androidx.test.services.events.run.TestRunFinishedEvent r0;
        int i0, i1;
        long l2;
        java.util.List r1;

        r0 := @this: androidx.test.services.events.run.TestRunFinishedEvent;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.List;

        specialinvoke r0.<androidx.test.services.events.run.TestRunEvent: void <init>()>();

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "failures cannot be null");

        r0.<androidx.test.services.events.run.TestRunFinishedEvent: int count> = i0;

        r0.<androidx.test.services.events.run.TestRunFinishedEvent: int ignoreCount> = i1;

        r0.<androidx.test.services.events.run.TestRunFinishedEvent: long runTime> = l2;

        r0.<androidx.test.services.events.run.TestRunFinishedEvent: java.util.List failures> = r1;

        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.test.services.events.run.TestRunFinishedEvent r0;
        android.os.Parcel r1;
        int i0, $i1, $i2;
        long $l3;
        androidx.test.services.events.FailureInfo[] $r2, $r5;
        java.util.List $r3;
        java.lang.Object[] $r4;

        r0 := @this: androidx.test.services.events.run.TestRunFinishedEvent;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        specialinvoke r0.<androidx.test.services.events.run.TestRunEvent: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        $i1 = r0.<androidx.test.services.events.run.TestRunFinishedEvent: int count>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = r0.<androidx.test.services.events.run.TestRunFinishedEvent: int ignoreCount>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $l3 = r0.<androidx.test.services.events.run.TestRunFinishedEvent: long runTime>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l3);

        $r3 = r0.<androidx.test.services.events.run.TestRunFinishedEvent: java.util.List failures>;

        $r2 = newarray (androidx.test.services.events.FailureInfo)[0];

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r5 = (androidx.test.services.events.FailureInfo[]) $r4;

        virtualinvoke r1.<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>($r5, i0);

        return;
    }

