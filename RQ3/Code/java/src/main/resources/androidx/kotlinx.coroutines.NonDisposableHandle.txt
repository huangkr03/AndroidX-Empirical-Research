kotlinx.coroutines.NonDisposableHandle
<kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>
    static void <clinit>()
    {
        kotlinx.coroutines.NonDisposableHandle $r0;

        $r0 = new kotlinx.coroutines.NonDisposableHandle;

        specialinvoke $r0.<kotlinx.coroutines.NonDisposableHandle: void <init>()>();

        <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        kotlinx.coroutines.NonDisposableHandle $r0;

        $r0 := @this: kotlinx.coroutines.NonDisposableHandle;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean childCancelled(java.lang.Throwable)
    {
        kotlinx.coroutines.NonDisposableHandle $r0;
        java.lang.Throwable $r1;

        $r0 := @this: kotlinx.coroutines.NonDisposableHandle;

        $r1 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cause");

        return 0;
    }

    public void dispose()
    {
        kotlinx.coroutines.NonDisposableHandle $r0;

        $r0 := @this: kotlinx.coroutines.NonDisposableHandle;

        return;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.NonDisposableHandle $r0;

        $r0 := @this: kotlinx.coroutines.NonDisposableHandle;

        return "NonDisposableHandle";
    }

