androidx.test.internal.runner.RunnerArgs
<androidx.test.internal.runner.RunnerArgs: java.util.List annotations>
<androidx.test.internal.runner.RunnerArgs: java.util.List appListeners>
<androidx.test.internal.runner.RunnerArgs: java.lang.ClassLoader classLoader>
<androidx.test.internal.runner.RunnerArgs: java.util.Set classpathToScan>
<androidx.test.internal.runner.RunnerArgs: boolean codeCoverage>
<androidx.test.internal.runner.RunnerArgs: java.lang.String codeCoveragePath>
<androidx.test.internal.runner.RunnerArgs: boolean debug>
<androidx.test.internal.runner.RunnerArgs: int delayInMillis>
<androidx.test.internal.runner.RunnerArgs: boolean disableAnalytics>
<androidx.test.internal.runner.RunnerArgs: java.util.List filters>
<androidx.test.internal.runner.RunnerArgs: boolean listTestsForOrchestrator>
<androidx.test.internal.runner.RunnerArgs: java.util.List listeners>
<androidx.test.internal.runner.RunnerArgs: boolean logOnly>
<androidx.test.internal.runner.RunnerArgs: boolean newRunListenerMode>
<androidx.test.internal.runner.RunnerArgs: java.util.List notAnnotations>
<androidx.test.internal.runner.RunnerArgs: java.util.List notTestPackages>
<androidx.test.internal.runner.RunnerArgs: java.util.List notTests>
<androidx.test.internal.runner.RunnerArgs: int numShards>
<androidx.test.internal.runner.RunnerArgs: java.lang.String orchestratorService>
<androidx.test.internal.runner.RunnerArgs: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod>
<androidx.test.internal.runner.RunnerArgs: java.util.List runnerBuilderClasses>
<androidx.test.internal.runner.RunnerArgs: java.util.List screenCaptureProcessors>
<androidx.test.internal.runner.RunnerArgs: int shardIndex>
<androidx.test.internal.runner.RunnerArgs: java.lang.String shellExecBinderKey>
<androidx.test.internal.runner.RunnerArgs: boolean suiteAssignment>
<androidx.test.internal.runner.RunnerArgs: java.lang.String targetProcess>
<androidx.test.internal.runner.RunnerArgs: java.lang.String testDiscoveryService>
<androidx.test.internal.runner.RunnerArgs: java.util.List testPackages>
<androidx.test.internal.runner.RunnerArgs: boolean testPlatformMigration>
<androidx.test.internal.runner.RunnerArgs: java.lang.String testRunEventsService>
<androidx.test.internal.runner.RunnerArgs: java.lang.String testSize>
<androidx.test.internal.runner.RunnerArgs: long testTimeout>
<androidx.test.internal.runner.RunnerArgs: java.util.List tests>
<androidx.test.internal.runner.RunnerArgs: java.lang.String testsRegEx>
<androidx.test.internal.runner.RunnerArgs: boolean useTestStorageService>
    private void <init>(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs $r0;
        androidx.test.internal.runner.RunnerArgs$Builder $r1;
        boolean $z0;
        java.lang.String $r2;
        int $i0;
        java.util.List $r3;
        long $l1;
        java.lang.ClassLoader $r4;
        java.util.Set $r5;
        androidx.test.internal.runner.RunnerArgs$TestArg $r6;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs;

        $r1 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean '-$$Nest$fgetdebug'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: boolean debug> = $z0;

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean '-$$Nest$fgetsuiteAssignment'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: boolean suiteAssignment> = $z0;

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean '-$$Nest$fgetcodeCoverage'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: boolean codeCoverage> = $z0;

        $r2 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String '-$$Nest$fgetcodeCoveragePath'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.lang.String codeCoveragePath> = $r2;

        $i0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: int '-$$Nest$fgetdelayInMillis'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: int delayInMillis> = $i0;

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean '-$$Nest$fgetlogOnly'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: boolean logOnly> = $z0;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgettestPackages'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List testPackages> = $r3;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgetnotTestPackages'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List notTestPackages> = $r3;

        $r2 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String '-$$Nest$fgettestSize'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.lang.String testSize> = $r2;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgetannotations'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List annotations> = $r3;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgetnotAnnotations'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List notAnnotations> = $r3;

        $l1 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: long '-$$Nest$fgettestTimeout'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: long testTimeout> = $l1;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgetlisteners'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List listeners> = $r3;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgetfilters'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List filters> = $r3;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgetrunnerBuilderClasses'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List runnerBuilderClasses> = $r3;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgettests'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List tests> = $r3;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgetnotTests'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List notTests> = $r3;

        $i0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: int '-$$Nest$fgetnumShards'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: int numShards> = $i0;

        $i0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: int '-$$Nest$fgetshardIndex'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: int shardIndex> = $i0;

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean '-$$Nest$fgetdisableAnalytics'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: boolean disableAnalytics> = $z0;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgetappListeners'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List appListeners> = $r3;

        $r4 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader '-$$Nest$fgetclassLoader'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.lang.ClassLoader classLoader> = $r4;

        $r5 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.Set '-$$Nest$fgetclasspathToScan'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.Set classpathToScan> = $r5;

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestArg '-$$Nest$fgetremoteMethod'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod> = $r6;

        $r2 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String '-$$Nest$fgetorchestratorService'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.lang.String orchestratorService> = $r2;

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean '-$$Nest$fgetlistTestsForOrchestrator'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: boolean listTestsForOrchestrator> = $z0;

        $r2 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String '-$$Nest$fgettestDiscoveryService'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.lang.String testDiscoveryService> = $r2;

        $r2 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String '-$$Nest$fgettestRunEventsService'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.lang.String testRunEventsService> = $r2;

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean '-$$Nest$fgetuseTestStorageService'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: boolean useTestStorageService> = $z0;

        $r3 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List '-$$Nest$fgetscreenCaptureProcessors'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.util.List screenCaptureProcessors> = $r3;

        $r2 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String '-$$Nest$fgettargetProcess'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.lang.String targetProcess> = $r2;

        $r2 = $r1.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String shellExecBinderKey>;

        $r0.<androidx.test.internal.runner.RunnerArgs: java.lang.String shellExecBinderKey> = $r2;

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean '-$$Nest$fgetnewRunListenerMode'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: boolean newRunListenerMode> = $z0;

        $r2 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String '-$$Nest$fgettestsRegEx'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: java.lang.String testsRegEx> = $r2;

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean '-$$Nest$fgettestPlatformMigration'(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        $r0.<androidx.test.internal.runner.RunnerArgs: boolean testPlatformMigration> = $z0;

        return;
    }

    void <init>(androidx.test.internal.runner.RunnerArgs$Builder, androidx.test.internal.runner.RunnerArgs-IA)
    {
        androidx.test.internal.runner.RunnerArgs $r0;
        androidx.test.internal.runner.RunnerArgs$Builder $r1;
        androidx.test.internal.runner.RunnerArgs-IA $r2;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs;

        $r1 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        $r2 := @parameter1: androidx.test.internal.runner.RunnerArgs-IA;

        specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs: void <init>(androidx.test.internal.runner.RunnerArgs$Builder)>($r1);

        return;
    }

androidx.test.internal.runner.RunnerArgs$Builder$$ExternalSyntheticBackport0
    public static void m(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r3, $r6;
        java.lang.Class[] $r1;
        java.lang.reflect.Method $r2;
        java.lang.Class $r4;
        java.lang.Object[] $r5;

        $r3 := @parameter0: java.lang.Throwable;

        $r0 := @parameter1: java.lang.Throwable;

        $r4 = class "Ljava/lang/Throwable;";

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/Throwable;";

     label1:
        $r2 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addSuppressed", $r1);

     label2:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r0;

     label3:
        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r5);

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

androidx.test.internal.runner.RunnerArgs$Builder
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List annotations>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List appListeners>
<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader classLoader>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.Set classpathToScan>
<androidx.test.internal.runner.RunnerArgs$Builder: boolean codeCoverage>
<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String codeCoveragePath>
<androidx.test.internal.runner.RunnerArgs$Builder: boolean debug>
<androidx.test.internal.runner.RunnerArgs$Builder: int delayInMillis>
<androidx.test.internal.runner.RunnerArgs$Builder: boolean disableAnalytics>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List filters>
<androidx.test.internal.runner.RunnerArgs$Builder: boolean listTestsForOrchestrator>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List listeners>
<androidx.test.internal.runner.RunnerArgs$Builder: boolean logOnly>
<androidx.test.internal.runner.RunnerArgs$Builder: boolean newRunListenerMode>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notAnnotations>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTests>
<androidx.test.internal.runner.RunnerArgs$Builder: int numShards>
<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String orchestratorService>
<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List runnerBuilderClasses>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List screenCaptureProcessors>
<androidx.test.internal.runner.RunnerArgs$Builder: int shardIndex>
<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String shellExecBinderKey>
<androidx.test.internal.runner.RunnerArgs$Builder: boolean suiteAssignment>
<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String targetProcess>
<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testDiscoveryService>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages>
<androidx.test.internal.runner.RunnerArgs$Builder: boolean testPlatformMigration>
<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testRunEventsService>
<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testSize>
<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.platform.io.PlatformTestStorage testStorage>
<androidx.test.internal.runner.RunnerArgs$Builder: long testTimeout>
<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List tests>
<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testsRegEx>
<androidx.test.internal.runner.RunnerArgs$Builder: boolean useTestStorageService>
    static volatile java.util.List '-$$Nest$fgetannotations'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List annotations>;

        return r1;
    }

    static volatile java.util.List '-$$Nest$fgetappListeners'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List appListeners>;

        return r1;
    }

    static volatile java.lang.ClassLoader '-$$Nest$fgetclassLoader'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.ClassLoader r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader classLoader>;

        return r1;
    }

    static volatile java.util.Set '-$$Nest$fgetclasspathToScan'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.Set r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.Set classpathToScan>;

        return r1;
    }

    static volatile boolean '-$$Nest$fgetcodeCoverage'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        boolean z0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean codeCoverage>;

        return z0;
    }

    static volatile java.lang.String '-$$Nest$fgetcodeCoveragePath'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.String r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String codeCoveragePath>;

        return r1;
    }

    static volatile boolean '-$$Nest$fgetdebug'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        boolean z0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean debug>;

        return z0;
    }

    static volatile int '-$$Nest$fgetdelayInMillis'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        int i0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        i0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: int delayInMillis>;

        return i0;
    }

    static volatile boolean '-$$Nest$fgetdisableAnalytics'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        boolean z0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean disableAnalytics>;

        return z0;
    }

    static volatile java.util.List '-$$Nest$fgetfilters'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List filters>;

        return r1;
    }

    static volatile boolean '-$$Nest$fgetlistTestsForOrchestrator'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        boolean z0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean listTestsForOrchestrator>;

        return z0;
    }

    static volatile java.util.List '-$$Nest$fgetlisteners'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List listeners>;

        return r1;
    }

    static volatile boolean '-$$Nest$fgetlogOnly'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        boolean z0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean logOnly>;

        return z0;
    }

    static volatile boolean '-$$Nest$fgetnewRunListenerMode'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        boolean z0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean newRunListenerMode>;

        return z0;
    }

    static volatile java.util.List '-$$Nest$fgetnotAnnotations'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notAnnotations>;

        return r1;
    }

    static volatile java.util.List '-$$Nest$fgetnotTestPackages'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages>;

        return r1;
    }

    static volatile java.util.List '-$$Nest$fgetnotTests'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTests>;

        return r1;
    }

    static volatile int '-$$Nest$fgetnumShards'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        int i0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        i0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: int numShards>;

        return i0;
    }

    static volatile java.lang.String '-$$Nest$fgetorchestratorService'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.String r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String orchestratorService>;

        return r1;
    }

    static volatile androidx.test.internal.runner.RunnerArgs$TestArg '-$$Nest$fgetremoteMethod'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        androidx.test.internal.runner.RunnerArgs$TestArg r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod>;

        return r1;
    }

    static volatile java.util.List '-$$Nest$fgetrunnerBuilderClasses'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List runnerBuilderClasses>;

        return r1;
    }

    static volatile java.util.List '-$$Nest$fgetscreenCaptureProcessors'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List screenCaptureProcessors>;

        return r1;
    }

    static volatile int '-$$Nest$fgetshardIndex'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        int i0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        i0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: int shardIndex>;

        return i0;
    }

    static volatile boolean '-$$Nest$fgetsuiteAssignment'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        boolean z0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean suiteAssignment>;

        return z0;
    }

    static volatile java.lang.String '-$$Nest$fgettargetProcess'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.String r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String targetProcess>;

        return r1;
    }

    static volatile java.lang.String '-$$Nest$fgettestDiscoveryService'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.String r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testDiscoveryService>;

        return r1;
    }

    static volatile java.util.List '-$$Nest$fgettestPackages'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages>;

        return r1;
    }

    static volatile boolean '-$$Nest$fgettestPlatformMigration'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        boolean z0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean testPlatformMigration>;

        return z0;
    }

    static volatile java.lang.String '-$$Nest$fgettestRunEventsService'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.String r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testRunEventsService>;

        return r1;
    }

    static volatile java.lang.String '-$$Nest$fgettestSize'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.String r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testSize>;

        return r1;
    }

    static volatile long '-$$Nest$fgettestTimeout'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        long l0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        l0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: long testTimeout>;

        return l0;
    }

    static volatile java.util.List '-$$Nest$fgettests'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List tests>;

        return r1;
    }

    static volatile java.lang.String '-$$Nest$fgettestsRegEx'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.String r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testsRegEx>;

        return r1;
    }

    static volatile boolean '-$$Nest$fgetuseTestStorageService'(androidx.test.internal.runner.RunnerArgs$Builder)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        boolean z0;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$Builder;

        z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean useTestStorageService>;

        return z0;
    }

    public void <init>()
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        androidx.test.platform.io.PlatformTestStorage $r1;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r1 = staticinvoke <androidx.test.platform.io.PlatformTestStorageRegistry: androidx.test.platform.io.PlatformTestStorage getInstance()>();

        specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: void <init>(androidx.test.platform.io.PlatformTestStorage)>($r1);

        return;
    }

    void <init>(androidx.test.platform.io.PlatformTestStorage)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        androidx.test.platform.io.PlatformTestStorage $r1;
        java.util.ArrayList r2;
        java.util.HashSet r3;
        java.util.List r4;
        java.util.Set r5;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r1 := @parameter0: androidx.test.platform.io.PlatformTestStorage;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean debug> = 0;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean suiteAssignment> = 0;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean codeCoverage> = 0;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String codeCoveragePath> = null;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: int delayInMillis> = -1;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean logOnly> = 0;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages> = r4;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages> = r4;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testSize> = null;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List annotations> = r4;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notAnnotations> = r4;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: long testTimeout> = -1L;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List listeners> = r4;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List filters> = r4;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List runnerBuilderClasses> = r4;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List tests> = r4;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTests> = r4;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: int numShards> = 0;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: int shardIndex> = 0;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean disableAnalytics> = 0;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List appListeners> = r4;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader classLoader> = null;

        r3 = new java.util.HashSet;

        specialinvoke r3.<java.util.HashSet: void <init>()>();

        r5 = (java.util.Set) r3;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.Set classpathToScan> = r5;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod> = null;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String orchestratorService> = null;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean listTestsForOrchestrator> = 0;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testDiscoveryService> = null;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testRunEventsService> = null;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean useTestStorageService> = 0;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String targetProcess> = null;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) r2;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List screenCaptureProcessors> = r4;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean newRunListenerMode> = 0;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testsRegEx> = null;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean testPlatformMigration> = 0;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.platform.io.PlatformTestStorage testStorage> = $r1;

        return;
    }

    static boolean isClassOrMethod(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 == 35 goto label3;

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c2);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    private void loadClassByNameAndAdd(java.util.List, java.lang.String, java.lang.Class)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List $r1;
        java.lang.String $r2, $r6;
        java.lang.Class $r3, $r4;
        int $i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r7;
        java.lang.Throwable $r8, $r9;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Class;

        if $r2 == null goto label13;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return;

     label01:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

     label02:
        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

     label03:
        if $z0 == 0 goto label06;

     label04:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

     label05:
        return;

     label06:
        $r5 = new java.lang.IllegalArgumentException;

     label07:
        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

     label08:
        $r7 = new java.lang.StringBuilder;

     label09:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

     label10:
        throw $r5;

     label11:
        $r8 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label12:
        $r9 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find extra class ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r5;

     label13:
        return;

        catch java.lang.ClassNotFoundException from label02 to label03 with label12;
        catch java.lang.ClassNotFoundException from label04 to label05 with label12;
        catch java.lang.ClassNotFoundException from label07 to label08 with label12;
        catch java.lang.ClassNotFoundException from label09 to label10 with label12;
        catch java.lang.ClassCastException from label02 to label03 with label11;
        catch java.lang.ClassCastException from label04 to label05 with label11;
        catch java.lang.ClassCastException from label07 to label08 with label11;
        catch java.lang.ClassCastException from label09 to label10 with label11;
    }

    private void loadClassByNameInstantiateAndAdd(java.util.List, java.lang.String, java.lang.Class, android.os.Bundle)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List $r1;
        java.lang.String $r2, $r17;
        java.lang.Class $r3, $r5;
        android.os.Bundle $r4;
        int $i0;
        java.lang.Class[] $r6;
        java.lang.reflect.Constructor $r7;
        java.lang.Object[] $r8;
        java.lang.Throwable $r9, $r11, $r12, $r14, $r15, $r16, $r18, $r19;
        java.lang.Object $r10;
        java.lang.StringBuilder $r13, r20;
        java.lang.IllegalArgumentException r21;
        java.lang.NoSuchMethodException r22;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Class;

        $r4 := @parameter3: android.os.Bundle;

        if $r2 == null goto label19;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return;

     label01:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

        $r6 = newarray (java.lang.Class)[0];

     label02:
        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

     label03:
        $r8 = newarray (java.lang.Object)[0];

        goto label07;

     label04:
        $r9 := @caughtexception;

        if $r4 == null goto label12;

        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Landroid/os/Bundle;";

     label05:
        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

     label06:
        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r4;

     label07:
        virtualinvoke $r7.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r10 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r10);

     label08:
        return;

     label09:
        $r11 := @caughtexception;

     label10:
        r22 = (java.lang.NoSuchMethodException) $r11;

     label11:
        virtualinvoke r22.<java.lang.NoSuchMethodException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        throw $r11;

     label12:
        throw $r9;

     label13:
        $r12 := @caughtexception;

        r21 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create listener: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r12);

        throw r21;

     label14:
        $r14 := @caughtexception;

        r21 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r14);

        throw r21;

     label15:
        $r15 := @caughtexception;

        r21 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r15);

        throw r21;

     label16:
        $r16 := @caughtexception;

        r21 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw r21;

     label17:
        $r18 := @caughtexception;

        r21 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must have no argument constructor for class ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw r21;

     label18:
        $r19 := @caughtexception;

        r21 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find extra class ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw r21;

     label19:
        return;

        catch java.lang.NoSuchMethodException from label02 to label03 with label04;
        catch java.lang.ClassNotFoundException from label02 to label03 with label18;
        catch java.lang.ClassCastException from label02 to label03 with label16;
        catch java.lang.InstantiationException from label02 to label03 with label15;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label14;
        catch java.lang.IllegalAccessException from label02 to label03 with label13;
        catch java.lang.NoSuchMethodException from label05 to label06 with label09;
        catch java.lang.ClassNotFoundException from label05 to label06 with label18;
        catch java.lang.ClassCastException from label05 to label06 with label16;
        catch java.lang.InstantiationException from label05 to label06 with label15;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label14;
        catch java.lang.IllegalAccessException from label05 to label06 with label13;
        catch java.lang.ClassNotFoundException from label07 to label08 with label18;
        catch java.lang.ClassNotFoundException from label11 to label13 with label18;
        catch java.lang.NoSuchMethodException from label07 to label08 with label17;
        catch java.lang.NoSuchMethodException from label11 to label13 with label17;
        catch java.lang.ClassCastException from label07 to label08 with label16;
        catch java.lang.ClassCastException from label10 to label13 with label16;
        catch java.lang.InstantiationException from label07 to label08 with label15;
        catch java.lang.InstantiationException from label11 to label13 with label15;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label14;
        catch java.lang.reflect.InvocationTargetException from label11 to label13 with label14;
        catch java.lang.IllegalAccessException from label07 to label08 with label13;
        catch java.lang.IllegalAccessException from label11 to label13 with label13;
    }

    private java.io.BufferedReader openFile(android.app.Instrumentation, java.lang.String) throws java.io.IOException
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        android.app.Instrumentation $r1;
        java.lang.String $r2;
        int $i0;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        boolean $z0;
        java.io.BufferedReader $r5, r15;
        java.lang.Object $r6;
        android.app.UiAutomation $r7;
        java.lang.StringBuilder $r8, r10;
        android.os.ParcelFileDescriptor $r9;
        android.os.ParcelFileDescriptor$AutoCloseInputStream r11;
        java.io.InputStreamReader r12;
        java.io.File r13;
        java.io.FileReader r14;
        java.io.Reader r16;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r1 := @parameter0: android.app.Instrumentation;

        $r2 := @parameter1: java.lang.String;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 26 goto label1;

        $r3 = virtualinvoke $r1.<android.app.Instrumentation: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r4.<android.content.pm.PackageManager: boolean isInstantApp()>();

        if $z0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r15 = new java.io.BufferedReader;

        $r5 = r15;

        if $z0 == 0 goto label3;

        r12 = new java.io.InputStreamReader;

        $r6 = r12;

        r11 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        $r7 = virtualinvoke $r1.<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>();

        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cat ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<android.app.UiAutomation: android.os.ParcelFileDescriptor executeShellCommand(java.lang.String)>($r2);

        specialinvoke r11.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>($r9);

        specialinvoke r12.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r11);

        goto label4;

     label3:
        r14 = new java.io.FileReader;

        $r6 = r14;

        r13 = new java.io.File;

        specialinvoke r13.<java.io.File: void <init>(java.lang.String)>($r2);

        specialinvoke r14.<java.io.FileReader: void <init>(java.io.File)>(r13);

     label4:
        r16 = (java.io.Reader) $r6;

        specialinvoke r15.<java.io.BufferedReader: void <init>(java.io.Reader)>(r16);

        return $r5;
    }

    private java.util.List parseAndLoadClasses(java.lang.String, java.lang.Class)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.Class $r1;
        java.util.ArrayList $r2, r5;
        java.lang.String $r3;
        java.lang.String[] $r4;
        int $i0, $i1;
        java.util.List r6;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Class;

        r5 = new java.util.ArrayList;

        $r2 = r5;

        specialinvoke r5.<java.util.ArrayList: void <init>()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = $r4[$i1];

        r6 = (java.util.List) $r2;

        specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: void loadClassByNameAndAdd(java.util.List,java.lang.String,java.lang.Class)>(r6, $r3, $r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r6 = (java.util.List) $r2;

        return r6;

     label3:
        r6 = (java.util.List) $r2;

        return r6;
    }

    private static boolean parseBoolean(java.lang.String)
    {
        boolean $z0;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static java.util.Set parseClasspath(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.lang.String[] $r1;
        java.util.List $r2;
        java.util.HashSet r3;
        java.util.Collection r4;
        java.util.Set r5;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label2;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r3 = new java.util.HashSet;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(":", -1);

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        r4 = (java.util.Collection) $r2;

        specialinvoke r3.<java.util.HashSet: void <init>(java.util.Collection)>(r4);

        r5 = (java.util.Set) r3;

        return r5;

     label2:
        r3 = new java.util.HashSet;

        specialinvoke r3.<java.util.HashSet: void <init>()>();

        r5 = (java.util.Set) r3;

        return r5;
    }

    private androidx.test.internal.runner.RunnerArgs$TestFileArgs parseFromFileStream(java.io.BufferedReader) throws java.io.IOException
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.io.BufferedReader $r1;
        androidx.test.internal.runner.RunnerArgs$TestFileArgs $r2, r7;
        java.lang.String $r3;
        boolean $z0;
        java.util.List $r4, $r6;
        androidx.test.internal.runner.RunnerArgs$TestArg $r5;
        java.util.Collection r8;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r1 := @parameter0: java.io.BufferedReader;

        r7 = new androidx.test.internal.runner.RunnerArgs$TestFileArgs;

        $r2 = r7;

        specialinvoke r7.<androidx.test.internal.runner.RunnerArgs$TestFileArgs: void <init>(androidx.test.internal.runner.RunnerArgs$TestFileArgs-IA)>(null);

     label1:
        $r3 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r3 == null goto label3;

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean isClassOrMethod(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List '-$$Nest$fgettests'(androidx.test.internal.runner.RunnerArgs$TestFileArgs)>($r2);

        $r5 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestArg parseTestClass(java.lang.String)>($r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        $r4 = staticinvoke <androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List '-$$Nest$fgetpackages'(androidx.test.internal.runner.RunnerArgs$TestFileArgs)>($r2);

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestPackages(java.lang.String)>($r3);

        r8 = (java.util.Collection) $r6;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>(r8);

        goto label1;

     label3:
        return $r2;
    }

    private java.lang.Object parseLoadAndInstantiateClass(java.lang.String, java.lang.Class)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.String $r1;
        java.lang.Class $r2;
        java.util.List $r3;
        boolean $z0;
        int $i0;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Class;

        $r3 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>($r1, $r2, null);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        return $r4;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = newarray (java.lang.Object)[1];

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[0] = $r7;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected 1 class loader, %d given", $r6);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label2:
        return null;
    }

    private java.util.List parseLoadAndInstantiateClasses(java.lang.String, java.lang.Class, android.os.Bundle)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.lang.Class $r1;
        android.os.Bundle $r2;
        java.util.ArrayList $r3, r6;
        java.lang.String $r4;
        java.lang.String[] $r5;
        int $i0, $i1;
        java.util.List r7;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r4 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Class;

        $r2 := @parameter2: android.os.Bundle;

        r6 = new java.util.ArrayList;

        $r3 = r6;

        specialinvoke r6.<java.util.ArrayList: void <init>()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof $r5;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r4 = $r5[$i1];

        r7 = (java.util.List) $r3;

        specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: void loadClassByNameInstantiateAndAdd(java.util.List,java.lang.String,java.lang.Class,android.os.Bundle)>(r7, $r4, $r1, $r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r7 = (java.util.List) $r3;

        return r7;

     label3:
        r7 = (java.util.List) $r3;

        return r7;
    }

    private static java.util.List parseStrings(java.lang.String)
    {
        java.lang.String $r0;
        java.util.List $r1;
        java.lang.String[] $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        return $r1;
    }

    private static androidx.test.internal.runner.RunnerArgs$TestArg parseTestClass(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        int $i0, $i1;
        androidx.test.internal.runner.RunnerArgs$TestArg $r2;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(35);

        if $i0 <= 0 goto label2;

        $i1 = $i0 + 1;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r2 = new androidx.test.internal.runner.RunnerArgs$TestArg;

        specialinvoke $r2.<androidx.test.internal.runner.RunnerArgs$TestArg: void <init>(java.lang.String,java.lang.String)>($r0, $r1);

        return $r2;

     label2:
        $r2 = new androidx.test.internal.runner.RunnerArgs$TestArg;

        specialinvoke $r2.<androidx.test.internal.runner.RunnerArgs$TestArg: void <init>(java.lang.String)>($r0);

        return $r2;
    }

    private java.util.List parseTestClasses(java.lang.String)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.util.List $r1;
        java.lang.String $r2;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r2 := @parameter0: java.lang.String;

        $r1 = staticinvoke <androidx.test.internal.runner.ClassesArgTokenizer: java.util.List parse(java.lang.String)>($r2);

        return $r1;
    }

    private androidx.test.internal.runner.RunnerArgs$TestFileArgs parseTestFile(android.app.Instrumentation, boolean, java.lang.String)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        java.io.InputStreamReader $r1;
        androidx.test.platform.io.PlatformTestStorage $r2;
        android.app.Instrumentation $r3;
        boolean $z0;
        java.lang.String $r4, $r6;
        androidx.test.internal.runner.RunnerArgs$TestFileArgs $r5;
        java.io.BufferedReader $r7;
        java.io.InputStream $r8;
        java.lang.Throwable $r9, $r10, $r11, $r13, $r14, $r15;
        java.lang.Object[] $r12;
        java.lang.IllegalArgumentException $r16;
        java.lang.StringBuilder $r17;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r3 := @parameter0: android.app.Instrumentation;

        $z0 := @parameter1: boolean;

        $r4 := @parameter2: java.lang.String;

        if $r4 != null goto label01;

        $r5 = new androidx.test.internal.runner.RunnerArgs$TestFileArgs;

        specialinvoke $r5.<androidx.test.internal.runner.RunnerArgs$TestFileArgs: void <init>(androidx.test.internal.runner.RunnerArgs$TestFileArgs-IA)>(null);

        return $r5;

     label01:
        if $z0 == 0 goto label14;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label02;

        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(1);

        goto label03;

     label02:
        $r6 = $r4;

     label03:
        $r7 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        $r2 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.platform.io.PlatformTestStorage testStorage>;

     label04:
        $r8 = interfaceinvoke $r2.<androidx.test.platform.io.PlatformTestStorage: java.io.InputStream openInputFile(java.lang.String)>($r6);

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r8);

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

     label05:
        $r5 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestFileArgs parseFromFileStream(java.io.BufferedReader)>($r7);

     label06:
        virtualinvoke $r7.<java.io.BufferedReader: void close()>();

     label07:
        return $r5;

     label08:
        $r9 := @caughtexception;

     label09:
        virtualinvoke $r7.<java.io.BufferedReader: void close()>();

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

        staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>($r9, $r10);

     label12:
        throw $r9;

     label13:
        $r11 := @caughtexception;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = $r4;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not read test file from TestStorage %s. Attempting to read from local file system", $r12);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("RunnerArgs", $r6, $r11);

     label14:
        $r7 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.io.BufferedReader openFile(android.app.Instrumentation,java.lang.String)>($r3, $r4);

     label15:
        $r5 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestFileArgs parseFromFileStream(java.io.BufferedReader)>($r7);

     label16:
        if $r7 == null goto label25;

     label17:
        virtualinvoke $r7.<java.io.BufferedReader: void close()>();

     label18:
        return $r5;

     label19:
        $r13 := @caughtexception;

        if $r7 == null goto label23;

     label20:
        virtualinvoke $r7.<java.io.BufferedReader: void close()>();

     label21:
        goto label23;

     label22:
        $r14 := @caughtexception;

        staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder$$ExternalSyntheticBackport0: void m(java.lang.Throwable,java.lang.Throwable)>($r13, $r14);

     label23:
        throw $r13;

     label24:
        $r15 := @caughtexception;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not read test file ");

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r15);

        throw $r16;

     label25:
        return $r5;

        catch java.io.IOException from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.io.IOException from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label13;
        catch java.io.IOException from label14 to label15 with label24;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.io.IOException from label17 to label18 with label24;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.io.IOException from label23 to label24 with label24;
    }

    private static java.util.List parseTestPackages(java.lang.String)
    {
        java.util.ArrayList $r0, r3;
        java.lang.String $r1;
        java.lang.String[] $r2;
        int $i0, $i1;
        java.util.List r4;

        $r1 := @parameter0: java.lang.String;

        r3 = new java.util.ArrayList;

        $r0 = r3;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r1 = $r2[$i1];

        r4 = (java.util.List) $r0;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        r4 = (java.util.List) $r0;

        return r4;

     label3:
        r4 = (java.util.List) $r0;

        return r4;
    }

    private static int parseUnsignedInt(java.lang.Object, java.lang.String)
    {
        java.lang.Object $r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.lang.NumberFormatException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label2;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $r3 = new java.lang.NumberFormatException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be negative");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label2:
        return -1;
    }

    private static long parseUnsignedLong(java.lang.Object, java.lang.String)
    {
        java.lang.Object $r0;
        java.lang.String $r1, $r2;
        long $l0;
        byte $b1;
        java.lang.NumberFormatException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label2;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        return $l0;

     label1:
        $r3 = new java.lang.NumberFormatException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be negative");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label2:
        return -1L;
    }

    public androidx.test.internal.runner.RunnerArgs build()
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        androidx.test.internal.runner.RunnerArgs $r1;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r1 = new androidx.test.internal.runner.RunnerArgs;

        specialinvoke $r1.<androidx.test.internal.runner.RunnerArgs: void <init>(androidx.test.internal.runner.RunnerArgs$Builder,androidx.test.internal.runner.RunnerArgs-IA)>($r0, null);

        return $r1;
    }

    public androidx.test.internal.runner.RunnerArgs$Builder fromBundle(android.app.Instrumentation, android.os.Bundle)
    {
        androidx.test.internal.runner.RunnerArgs$Builder $r0;
        android.os.Bundle $r1;
        android.app.Instrumentation $r2;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Object $r4;
        int $i0;
        java.util.List $r5, $r6;
        androidx.test.internal.runner.RunnerArgs$TestFileArgs $r7;
        long $l1;
        java.lang.ClassLoader $r8;
        java.util.Set $r9;
        androidx.test.internal.runner.RunnerArgs$TestArg $r10;
        java.util.Collection r11;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$Builder;

        $r2 := @parameter0: android.app.Instrumentation;

        $r1 := @parameter1: android.os.Bundle;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("debug");

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean debug> = $z0;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("useTestStorageService");

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean useTestStorageService> = $z0;

        $r4 = virtualinvoke $r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>("delay_msec");

        $i0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: int parseUnsignedInt(java.lang.Object,java.lang.String)>($r4, "delay_msec");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: int delayInMillis> = $i0;

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List tests>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("class");

        $r6 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestClasses(java.lang.String)>($r3);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTests>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notClass");

        $r6 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestClasses(java.lang.String)>($r3);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("package");

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestPackages(java.lang.String)>($r3);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notPackage");

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseTestPackages(java.lang.String)>($r3);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean useTestStorageService>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("testFile");

        $r7 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestFileArgs parseTestFile(android.app.Instrumentation,boolean,java.lang.String)>($r2, $z0, $r3);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List tests>;

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List '-$$Nest$fgettests'(androidx.test.internal.runner.RunnerArgs$TestFileArgs)>($r7);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List testPackages>;

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List '-$$Nest$fgetpackages'(androidx.test.internal.runner.RunnerArgs$TestFileArgs)>($r7);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $z0 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean useTestStorageService>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notTestFile");

        $r7 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestFileArgs parseTestFile(android.app.Instrumentation,boolean,java.lang.String)>($r2, $z0, $r3);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTests>;

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List '-$$Nest$fgettests'(androidx.test.internal.runner.RunnerArgs$TestFileArgs)>($r7);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notTestPackages>;

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List '-$$Nest$fgetpackages'(androidx.test.internal.runner.RunnerArgs$TestFileArgs)>($r7);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List listeners>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("listener");

        $r6 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>($r3, class "Lorg/junit/runner/notification/RunListener;", null);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List filters>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("filter");

        $r6 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>($r3, class "Lorg/junit/runner/manipulation/Filter;", $r1);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List runnerBuilderClasses>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("runnerBuilder");

        $r6 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseAndLoadClasses(java.lang.String,java.lang.Class)>($r3, class "Lorg/junit/runners/model/RunnerBuilder;");

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("size");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testSize> = $r3;

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List annotations>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("annotation");

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseStrings(java.lang.String)>($r3);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List notAnnotations>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notAnnotation");

        $r6 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseStrings(java.lang.String)>($r3);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("timeout_msec");

        $l1 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: long parseUnsignedLong(java.lang.Object,java.lang.String)>($r3, "timeout_msec");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: long testTimeout> = $l1;

        $r4 = virtualinvoke $r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>("numShards");

        $i0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: int parseUnsignedInt(java.lang.Object,java.lang.String)>($r4, "numShards");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: int numShards> = $i0;

        $r4 = virtualinvoke $r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>("shardIndex");

        $i0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: int parseUnsignedInt(java.lang.Object,java.lang.String)>($r4, "shardIndex");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: int shardIndex> = $i0;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("log");

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean logOnly> = $z0;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("disableAnalytics");

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean disableAnalytics> = $z0;

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List appListeners>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("appListener");

        $r6 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>($r3, class "Landroidx/test/runner/lifecycle/ApplicationLifecycleCallback;", null);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverage");

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean codeCoverage> = $z0;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFile");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String codeCoveragePath> = $r3;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("suiteAssignment");

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean suiteAssignment> = $z0;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("classLoader");

        $r4 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.Object parseLoadAndInstantiateClass(java.lang.String,java.lang.Class)>($r3, class "Ljava/lang/ClassLoader;");

        $r8 = (java.lang.ClassLoader) $r4;

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.ClassLoader classLoader> = $r8;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("classpathToScan");

        $r9 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: java.util.Set parseClasspath(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.Set classpathToScan> = $r9;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("remoteMethod");

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("remoteMethod");

        $r10 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestArg parseTestClass(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: androidx.test.internal.runner.RunnerArgs$TestArg remoteMethod> = $r10;

     label1:
        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("orchestratorService");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String orchestratorService> = $r3;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("listTestsForOrchestrator");

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean listTestsForOrchestrator> = $z0;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("testDiscoveryService");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testDiscoveryService> = $r3;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("testRunEventsService");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testRunEventsService> = $r3;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("targetProcess");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String targetProcess> = $r3;

        $r5 = $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List screenCaptureProcessors>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("screenCaptureProcessors");

        $r6 = specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.util.List parseLoadAndInstantiateClasses(java.lang.String,java.lang.Class,android.os.Bundle)>($r3, class "Landroidx/test/runner/screenshot/ScreenCaptureProcessor;", null);

        r11 = (java.util.Collection) $r6;

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("shellExecBinderKey");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String shellExecBinderKey> = $r3;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("newRunListenerMode");

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean newRunListenerMode> = $z0;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("tests_regex");

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: java.lang.String testsRegEx> = $r3;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("temporary_testPlatformMigration");

        $z0 = staticinvoke <androidx.test.internal.runner.RunnerArgs$Builder: boolean parseBoolean(java.lang.String)>($r3);

        $r0.<androidx.test.internal.runner.RunnerArgs$Builder: boolean testPlatformMigration> = $z0;

        return $r0;
    }

androidx.test.internal.runner.RunnerArgs$TestArg
<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>
<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>
    void <init>(java.lang.String)
    {
        androidx.test.internal.runner.RunnerArgs$TestArg $r0;
        java.lang.String $r1;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$TestArg;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$TestArg: void <init>(java.lang.String,java.lang.String)>($r1, null);

        return;
    }

    void <init>(java.lang.String, java.lang.String)
    {
        androidx.test.internal.runner.RunnerArgs$TestArg $r0;
        java.lang.String $r1, $r2;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$TestArg;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName> = $r1;

        $r0.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName> = $r2;

        return;
    }

    public java.lang.String toString()
    {
        androidx.test.internal.runner.RunnerArgs$TestArg $r0;
        java.lang.String $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$TestArg;

        $r1 = $r0.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>;

        if $r1 == null goto label1;

        $r2 = $r0.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label1:
        $r1 = $r0.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

        return $r1;
    }

androidx.test.internal.runner.RunnerArgs$TestFileArgs-IA
androidx.test.internal.runner.RunnerArgs$TestFileArgs
<androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List packages>
<androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List tests>
    static volatile java.util.List '-$$Nest$fgetpackages'(androidx.test.internal.runner.RunnerArgs$TestFileArgs)
    {
        androidx.test.internal.runner.RunnerArgs$TestFileArgs $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$TestFileArgs;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List packages>;

        return r1;
    }

    static volatile java.util.List '-$$Nest$fgettests'(androidx.test.internal.runner.RunnerArgs$TestFileArgs)
    {
        androidx.test.internal.runner.RunnerArgs$TestFileArgs $r0;
        java.util.List r1;

        $r0 := @parameter0: androidx.test.internal.runner.RunnerArgs$TestFileArgs;

        r1 = $r0.<androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List tests>;

        return r1;
    }

    private void <init>()
    {
        androidx.test.internal.runner.RunnerArgs$TestFileArgs $r0;
        java.util.ArrayList r1;
        java.util.List r2;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$TestFileArgs;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) r1;

        $r0.<androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List tests> = r2;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) r1;

        $r0.<androidx.test.internal.runner.RunnerArgs$TestFileArgs: java.util.List packages> = r2;

        return;
    }

    void <init>(androidx.test.internal.runner.RunnerArgs$TestFileArgs-IA)
    {
        androidx.test.internal.runner.RunnerArgs$TestFileArgs $r0;
        androidx.test.internal.runner.RunnerArgs$TestFileArgs-IA $r1;

        $r0 := @this: androidx.test.internal.runner.RunnerArgs$TestFileArgs;

        $r1 := @parameter0: androidx.test.internal.runner.RunnerArgs$TestFileArgs-IA;

        specialinvoke $r0.<androidx.test.internal.runner.RunnerArgs$TestFileArgs: void <init>()>();

        return;
    }

