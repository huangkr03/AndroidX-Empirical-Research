androidx.compose.material.pullrefresh.PullRefreshState
<androidx.compose.material.pullrefresh.PullRefreshState: kotlinx.coroutines.CoroutineScope animationScope>
<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.State onRefreshState>
<androidx.compose.material.pullrefresh.PullRefreshState: float refreshingOffset>
<androidx.compose.material.pullrefresh.PullRefreshState: float threshold>
<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.State adjustedDistancePulled$delegate>
<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState _refreshing$delegate>
<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState _position$delegate>
<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState distancePulled$delegate>
<androidx.compose.material.pullrefresh.PullRefreshState: int $stable>
    public void <init>(kotlinx.coroutines.CoroutineScope, androidx.compose.runtime.State, float, float)
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        kotlinx.coroutines.CoroutineScope r1;
        androidx.compose.runtime.State r2, $r5;
        float f0, f1;
        androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2 $r3;
        kotlin.jvm.functions.Function0 $r4;
        java.lang.Boolean $r6;
        androidx.compose.runtime.MutableState $r7, $r9, $r11;
        java.lang.Float $r8, $r10;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: androidx.compose.runtime.State;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "animationScope");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "onRefreshState");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.material.pullrefresh.PullRefreshState: kotlinx.coroutines.CoroutineScope animationScope> = r1;

        r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.State onRefreshState> = r2;

        r0.<androidx.compose.material.pullrefresh.PullRefreshState: float refreshingOffset> = f0;

        r0.<androidx.compose.material.pullrefresh.PullRefreshState: float threshold> = f1;

        $r3 = new androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2;

        specialinvoke $r3.<androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2: void <init>(androidx.compose.material.pullrefresh.PullRefreshState)>(r0);

        $r4 = (kotlin.jvm.functions.Function0) $r3;

        $r5 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.State derivedStateOf(kotlin.jvm.functions.Function0)>($r4);

        r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.State adjustedDistancePulled$delegate> = $r5;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r7 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r6, null, 2, null);

        r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState _refreshing$delegate> = $r7;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r9 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r8, null, 2, null);

        r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState _position$delegate> = $r9;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r11 = staticinvoke <androidx.compose.runtime.SnapshotStateKt: androidx.compose.runtime.MutableState mutableStateOf$default(java.lang.Object,androidx.compose.runtime.SnapshotMutationPolicy,int,java.lang.Object)>($r10, null, 2, null);

        r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState distancePulled$delegate> = $r11;

        return;
    }

    public final float getThreshold$material_release()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        float $f0;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $f0 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: float threshold>;

        return $f0;
    }

    public final float getProgress()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        float $f0, $f1, $f2;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $f0 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: float getAdjustedDistancePulled()>();

        $f1 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: float threshold>;

        $f2 = $f0 / $f1;

        return $f2;
    }

    public final boolean getRefreshing$material_release()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        boolean $z0;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $z0 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: boolean get_refreshing()>();

        return $z0;
    }

    public final float getPosition$material_release()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        float $f0;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $f0 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: float get_position()>();

        return $f0;
    }

    private final float getAdjustedDistancePulled()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        androidx.compose.runtime.State $r1;
        java.lang.Object $r2;
        java.lang.Number $r3;
        float $f0;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $r1 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.State adjustedDistancePulled$delegate>;

        $r2 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r3 = (java.lang.Number) $r2;

        $f0 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    private final boolean get_refreshing()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $r2 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState _refreshing$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private final void set_refreshing(boolean)
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        boolean z0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Boolean r2;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState _refreshing$delegate>;

        r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    private final float get_position()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $r2 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState _position$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    private final void set_position(float)
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        float f0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Float r2;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState _position$delegate>;

        r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    private final float getDistancePulled()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        androidx.compose.runtime.State $r1;
        androidx.compose.runtime.MutableState $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;
        float $f0;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $r2 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState distancePulled$delegate>;

        $r1 = (androidx.compose.runtime.State) $r2;

        $r3 = interfaceinvoke $r1.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (java.lang.Number) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    private final void setDistancePulled(float)
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        float f0;
        androidx.compose.runtime.MutableState $r1;
        java.lang.Float r2;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        f0 := @parameter0: float;

        $r1 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.MutableState distancePulled$delegate>;

        r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        interfaceinvoke $r1.<androidx.compose.runtime.MutableState: void setValue(java.lang.Object)>(r2);

        return;
    }

    public final float onPull$material_release(float)
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6;
        boolean $z0;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        f0 := @parameter0: float;

        $z0 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: boolean get_refreshing()>();

        if $z0 == 0 goto label1;

        return 0.0F;

     label1:
        $f3 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: float getDistancePulled()>();

        $f4 = $f3 + f0;

        f1 = staticinvoke <kotlin.ranges.RangesKt: float coerceAtLeast(float,float)>($f4, 0.0F);

        $f5 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: float getDistancePulled()>();

        f2 = f1 - $f5;

        specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: void setDistancePulled(float)>(f1);

        $f6 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: float calculateIndicatorPosition()>();

        specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: void set_position(float)>($f6);

        return f2;
    }

    public final void onRelease$material_release()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        boolean $z0;
        float $f0, $f1;
        byte $b0;
        androidx.compose.runtime.State $r2;
        java.lang.Object $r3;
        kotlin.jvm.functions.Function0 $r4;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $z0 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: boolean get_refreshing()>();

        if $z0 != 0 goto label2;

        $f0 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: float getAdjustedDistancePulled()>();

        $f1 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: float threshold>;

        $b0 = $f0 cmpl $f1;

        if $b0 <= 0 goto label1;

        $r2 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: androidx.compose.runtime.State onRefreshState>;

        $r3 = interfaceinvoke $r2.<androidx.compose.runtime.State: java.lang.Object getValue()>();

        $r4 = (kotlin.jvm.functions.Function0) $r3;

        interfaceinvoke $r4.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label2;

     label1:
        specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: kotlinx.coroutines.Job animateIndicatorTo(float)>(0.0F);

     label2:
        specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: void setDistancePulled(float)>(0.0F);

        return;
    }

    public final void setRefreshing$material_release(boolean)
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        boolean z0, $z1;
        float $f0;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: boolean get_refreshing()>();

        if $z1 == z0 goto label3;

        specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: void set_refreshing(boolean)>(z0);

        specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: void setDistancePulled(float)>(0.0F);

        if z0 == 0 goto label1;

        $f0 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: float refreshingOffset>;

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: kotlinx.coroutines.Job animateIndicatorTo(float)>($f0);

     label3:
        return;
    }

    private final kotlinx.coroutines.Job animateIndicatorTo(float)
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        float f0;
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1 $r1;
        kotlinx.coroutines.CoroutineScope $r2;
        kotlin.jvm.functions.Function2 $r3;
        kotlinx.coroutines.Job $r4;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        f0 := @parameter0: float;

        $r2 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: kotlinx.coroutines.CoroutineScope animationScope>;

        $r1 = new androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1;

        specialinvoke $r1.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: void <init>(androidx.compose.material.pullrefresh.PullRefreshState,float,kotlin.coroutines.Continuation)>(r0, f0, null);

        $r3 = (kotlin.jvm.functions.Function2) $r1;

        $r4 = staticinvoke <kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)>($r2, null, null, $r3, 3, null);

        return $r4;
    }

    private final float calculateIndicatorPosition()
    {
        androidx.compose.material.pullrefresh.PullRefreshState r0;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        byte $b0;
        double $d0, $d1, $d2;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState;

        $f4 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: float getAdjustedDistancePulled()>();

        $f5 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: float threshold>;

        $b0 = $f4 cmpg $f5;

        if $b0 > 0 goto label1;

        $f13 = specialinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: float getAdjustedDistancePulled()>();

        goto label2;

     label1:
        $f6 = virtualinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState: float getProgress()>();

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        f0 = $f7 - 1.0F;

        f1 = staticinvoke <kotlin.ranges.RangesKt: float coerceIn(float,float,float)>(f0, 0.0F, 2.0F);

        $d1 = (double) f1;

        $d0 = (double) 2;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $f9 = (float) $d2;

        $f8 = (float) 4;

        $f10 = $f9 / $f8;

        f2 = f1 - $f10;

        $f11 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: float threshold>;

        f3 = $f11 * f2;

        $f12 = r0.<androidx.compose.material.pullrefresh.PullRefreshState: float threshold>;

        $f13 = $f12 + f3;

     label2:
        return $f13;
    }

    public static final float access$get_position(androidx.compose.material.pullrefresh.PullRefreshState)
    {
        androidx.compose.material.pullrefresh.PullRefreshState $r0;
        float $f0;

        $r0 := @parameter0: androidx.compose.material.pullrefresh.PullRefreshState;

        $f0 = specialinvoke $r0.<androidx.compose.material.pullrefresh.PullRefreshState: float get_position()>();

        return $f0;
    }

    public static final void access$set_position(androidx.compose.material.pullrefresh.PullRefreshState, float)
    {
        androidx.compose.material.pullrefresh.PullRefreshState $r0;
        float f0;

        $r0 := @parameter0: androidx.compose.material.pullrefresh.PullRefreshState;

        f0 := @parameter1: float;

        specialinvoke $r0.<androidx.compose.material.pullrefresh.PullRefreshState: void set_position(float)>(f0);

        return;
    }

    public static final float access$getDistancePulled(androidx.compose.material.pullrefresh.PullRefreshState)
    {
        androidx.compose.material.pullrefresh.PullRefreshState $r0;
        float $f0;

        $r0 := @parameter0: androidx.compose.material.pullrefresh.PullRefreshState;

        $f0 = specialinvoke $r0.<androidx.compose.material.pullrefresh.PullRefreshState: float getDistancePulled()>();

        return $f0;
    }

    static void <clinit>()
    {
        <androidx.compose.material.pullrefresh.PullRefreshState: int $stable> = 8;

        return;
    }

androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2
<androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2: androidx.compose.material.pullrefresh.PullRefreshState this$0>
    void <init>(androidx.compose.material.pullrefresh.PullRefreshState)
    {
        androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2 r0;
        androidx.compose.material.pullrefresh.PullRefreshState $r1;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2;

        $r1 := @parameter0: androidx.compose.material.pullrefresh.PullRefreshState;

        r0.<androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2: androidx.compose.material.pullrefresh.PullRefreshState this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.lang.Float invoke()
    {
        androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2 r0;
        androidx.compose.material.pullrefresh.PullRefreshState $r1;
        float $f0, $f1;
        java.lang.Float $r2;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2;

        $r1 = r0.<androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2: androidx.compose.material.pullrefresh.PullRefreshState this$0>;

        $f0 = staticinvoke <androidx.compose.material.pullrefresh.PullRefreshState: float access$getDistancePulled(androidx.compose.material.pullrefresh.PullRefreshState)>($r1);

        $f1 = $f0 * 0.5F;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        return $r2;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2 r0;
        java.lang.Float $r1;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2;

        $r1 = virtualinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState$adjustedDistancePulled$2: java.lang.Float invoke()>();

        return $r1;
    }

androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1
<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1: androidx.compose.material.pullrefresh.PullRefreshState this$0>
    void <init>(androidx.compose.material.pullrefresh.PullRefreshState)
    {
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1 r0;
        androidx.compose.material.pullrefresh.PullRefreshState $r1;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1;

        $r1 := @parameter0: androidx.compose.material.pullrefresh.PullRefreshState;

        r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1: androidx.compose.material.pullrefresh.PullRefreshState this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(2);

        return;
    }

    public final void invoke(float, float)
    {
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1 r0;
        float f0, f1;
        androidx.compose.material.pullrefresh.PullRefreshState $r1;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1: androidx.compose.material.pullrefresh.PullRefreshState this$0>;

        staticinvoke <androidx.compose.material.pullrefresh.PullRefreshState: void access$set_position(androidx.compose.material.pullrefresh.PullRefreshState,float)>($r1, f0);

        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1 r0;
        java.lang.Object r1, r2;
        java.lang.Number $r3, $r4;
        float $f0, $f1;
        kotlin.Unit $r5;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.Number) r1;

        $f0 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        $r4 = (java.lang.Number) r2;

        $f1 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        virtualinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1: void invoke(float,float)>($f0, $f1);

        $r5 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r5;
    }

androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1
<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: int label>
<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: androidx.compose.material.pullrefresh.PullRefreshState this$0>
<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: float $offset>
    void <init>(androidx.compose.material.pullrefresh.PullRefreshState, float, kotlin.coroutines.Continuation)
    {
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1 r0;
        androidx.compose.material.pullrefresh.PullRefreshState $r1;
        float $f0;
        kotlin.coroutines.Continuation $r2;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1;

        $r1 := @parameter0: androidx.compose.material.pullrefresh.PullRefreshState;

        $f0 := @parameter1: float;

        $r2 := @parameter2: kotlin.coroutines.Continuation;

        r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: androidx.compose.material.pullrefresh.PullRefreshState this$0> = $r1;

        r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: float $offset> = $f0;

        specialinvoke r0.<kotlin.coroutines.jvm.internal.SuspendLambda: void <init>(int,kotlin.coroutines.Continuation)>(2, $r2);

        return;
    }

    public final java.lang.Object invokeSuspend(java.lang.Object)
    {
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1 r0;
        java.lang.Object $r1, r2, $r9;
        int $i0;
        kotlin.Unit $r3;
        androidx.compose.material.pullrefresh.PullRefreshState $r4, $r6;
        float $f0, $f1;
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1 $r5;
        kotlin.jvm.functions.Function2 $r7;
        kotlin.coroutines.Continuation $r8;
        java.lang.IllegalStateException $r10;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1;

        $r1 := @parameter0: java.lang.Object;

        r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        $i0 = r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: int label>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label4;
        };

     label1:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

        $r4 = r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: androidx.compose.material.pullrefresh.PullRefreshState this$0>;

        $f0 = staticinvoke <androidx.compose.material.pullrefresh.PullRefreshState: float access$get_position(androidx.compose.material.pullrefresh.PullRefreshState)>($r4);

        $f1 = r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: float $offset>;

        $r5 = new androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1;

        $r6 = r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: androidx.compose.material.pullrefresh.PullRefreshState this$0>;

        specialinvoke $r5.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1$1: void <init>(androidx.compose.material.pullrefresh.PullRefreshState)>($r6);

        $r7 = (kotlin.jvm.functions.Function2) $r5;

        $r8 = (kotlin.coroutines.Continuation) r0;

        r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: int label> = 1;

        $r9 = staticinvoke <androidx.compose.animation.core.SuspendAnimationKt: java.lang.Object animate$default(float,float,float,androidx.compose.animation.core.AnimationSpec,kotlin.jvm.functions.Function2,kotlin.coroutines.Continuation,int,java.lang.Object)>($f0, $f1, 0.0F, null, $r7, $r8, 12, null);

        if $r9 != r2 goto label3;

        return r2;

     label2:
        staticinvoke <kotlin.ResultKt: void throwOnFailure(java.lang.Object)>($r1);

     label3:
        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;

     label4:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call to \'resume\' before \'invoke\' with coroutine");

        throw $r10;
    }

    public final kotlin.coroutines.Continuation create(java.lang.Object, kotlin.coroutines.Continuation)
    {
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1 r0, $r3;
        java.lang.Object r1;
        kotlin.coroutines.Continuation $r2, $r5;
        float $f0;
        androidx.compose.material.pullrefresh.PullRefreshState $r4;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1;

        r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = new androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1;

        $r4 = r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: androidx.compose.material.pullrefresh.PullRefreshState this$0>;

        $f0 = r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: float $offset>;

        specialinvoke $r3.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: void <init>(androidx.compose.material.pullrefresh.PullRefreshState,float,kotlin.coroutines.Continuation)>($r4, $f0, $r2);

        $r5 = (kotlin.coroutines.Continuation) $r3;

        return $r5;
    }

    public final java.lang.Object invoke(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.Continuation)
    {
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1 r0, $r5;
        kotlinx.coroutines.CoroutineScope r1;
        kotlin.coroutines.Continuation r2, $r3;
        kotlin.Unit $r4;
        java.lang.Object $r6;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1;

        r1 := @parameter0: kotlinx.coroutines.CoroutineScope;

        r2 := @parameter1: kotlin.coroutines.Continuation;

        $r3 = virtualinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)>(r1, r2);

        $r5 = (androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1) $r3;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        $r6 = virtualinvoke $r5.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: java.lang.Object invokeSuspend(java.lang.Object)>($r4);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object, java.lang.Object)
    {
        androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1 r0;
        java.lang.Object r1, r2, $r5;
        kotlin.coroutines.Continuation $r3;
        kotlinx.coroutines.CoroutineScope $r4;

        r0 := @this: androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (kotlinx.coroutines.CoroutineScope) r1;

        $r3 = (kotlin.coroutines.Continuation) r2;

        $r5 = virtualinvoke r0.<androidx.compose.material.pullrefresh.PullRefreshState$animateIndicatorTo$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)>($r4, $r3);

        return $r5;
    }

