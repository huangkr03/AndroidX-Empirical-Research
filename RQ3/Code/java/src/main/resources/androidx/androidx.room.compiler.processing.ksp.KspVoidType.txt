androidx.room.compiler.processing.ksp.KspVoidType
<androidx.room.compiler.processing.ksp.KspVoidType: boolean boxed>
    public void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv, com.google.devtools.ksp.symbol.KSType, boolean, androidx.room.compiler.processing.ksp.KspJvmTypeResolver)
    {
        androidx.room.compiler.processing.ksp.KspVoidType r0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv r1;
        com.google.devtools.ksp.symbol.KSType r2;
        boolean z0;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspVoidType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspProcessingEnv;

        r2 := @parameter1: com.google.devtools.ksp.symbol.KSType;

        z0 := @parameter2: boolean;

        r3 := @parameter3: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "env");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "ksType");

        specialinvoke r0.<androidx.room.compiler.processing.ksp.KspType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>(r1, r2, r3);

        r0.<androidx.room.compiler.processing.ksp.KspVoidType: boolean boxed> = z0;

        return;
    }

    public final boolean getBoxed()
    {
        androidx.room.compiler.processing.ksp.KspVoidType r0;
        boolean $z0;

        r0 := @this: androidx.room.compiler.processing.ksp.KspVoidType;

        $z0 = r0.<androidx.room.compiler.processing.ksp.KspVoidType: boolean boxed>;

        return $z0;
    }

    protected com.squareup.javapoet.TypeName resolveJTypeName()
    {
        androidx.room.compiler.processing.ksp.KspVoidType r0;
        boolean $z0;
        com.squareup.javapoet.TypeName $r1, $r4;
        androidx.room.compiler.processing.XNullability $r2, $r3;

        r0 := @this: androidx.room.compiler.processing.ksp.KspVoidType;

        $z0 = r0.<androidx.room.compiler.processing.ksp.KspVoidType: boolean boxed>;

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: androidx.room.compiler.processing.XNullability getNullability()>();

        $r3 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NULLABLE>;

        if $r2 != $r3 goto label2;

     label1:
        $r1 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName VOID>;

        $r4 = virtualinvoke $r1.<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName box()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "{\n            JTypeName.VOID.box()\n        }");

        goto label3;

     label2:
        $r4 = <com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName VOID>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "{\n            JTypeName.VOID\n        }");

     label3:
        return $r4;
    }

    protected com.squareup.kotlinpoet.TypeName resolveKTypeName()
    {
        androidx.room.compiler.processing.ksp.KspVoidType r0;
        com.squareup.kotlinpoet.ClassName $r1;
        com.squareup.kotlinpoet.TypeName $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspVoidType;

        $r1 = <com.squareup.kotlinpoet.TypeNames: com.squareup.kotlinpoet.ClassName UNIT>;

        $r2 = (com.squareup.kotlinpoet.TypeName) $r1;

        return $r2;
    }

    public androidx.room.compiler.processing.ksp.KspType boxed()
    {
        androidx.room.compiler.processing.ksp.KspVoidType r0, $r1;
        boolean $z0;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r2;
        com.google.devtools.ksp.symbol.KSType $r3;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver $r4;
        androidx.room.compiler.processing.ksp.KspType $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.KspVoidType;

        $z0 = r0.<androidx.room.compiler.processing.ksp.KspVoidType: boolean boxed>;

        if $z0 == 0 goto label1;

        $r5 = (androidx.room.compiler.processing.ksp.KspType) r0;

        goto label2;

     label1:
        $r1 = new androidx.room.compiler.processing.ksp.KspVoidType;

        $r2 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: androidx.room.compiler.processing.ksp.KspJvmTypeResolver getJvmTypeResolver()>();

        specialinvoke $r1.<androidx.room.compiler.processing.ksp.KspVoidType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,boolean,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>($r2, $r3, 1, $r4);

        $r5 = (androidx.room.compiler.processing.ksp.KspType) $r1;

     label2:
        return $r5;
    }

    protected androidx.room.compiler.processing.ksp.KspType copyWithNullability(androidx.room.compiler.processing.XNullability)
    {
        androidx.room.compiler.processing.ksp.KspVoidType r0, $r2;
        androidx.room.compiler.processing.XNullability r1, $r8;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r3;
        com.google.devtools.ksp.symbol.KSType $r4, $r5;
        boolean $z0, $z1;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver $r6;
        androidx.room.compiler.processing.ksp.KspType $r7;

        r0 := @this: androidx.room.compiler.processing.ksp.KspVoidType;

        r1 := @parameter0: androidx.room.compiler.processing.XNullability;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "nullability");

        $r2 = new androidx.room.compiler.processing.ksp.KspVoidType;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $r5 = staticinvoke <androidx.room.compiler.processing.ksp.KSTypeExtKt: com.google.devtools.ksp.symbol.KSType withNullability(com.google.devtools.ksp.symbol.KSType,androidx.room.compiler.processing.XNullability)>($r4, r1);

        $z0 = r0.<androidx.room.compiler.processing.ksp.KspVoidType: boolean boxed>;

        if $z0 != 0 goto label1;

        $r8 = <androidx.room.compiler.processing.XNullability: androidx.room.compiler.processing.XNullability NULLABLE>;

        if r1 != $r8 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r6 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: androidx.room.compiler.processing.ksp.KspJvmTypeResolver getJvmTypeResolver()>();

        specialinvoke $r2.<androidx.room.compiler.processing.ksp.KspVoidType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,boolean,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>($r3, $r5, $z1, $r6);

        $r7 = (androidx.room.compiler.processing.ksp.KspType) $r2;

        return $r7;
    }

    public androidx.room.compiler.processing.ksp.KspType copyWithJvmTypeResolver(androidx.room.compiler.processing.ksp.KspJvmTypeResolver)
    {
        androidx.room.compiler.processing.ksp.KspVoidType r0, $r2;
        androidx.room.compiler.processing.ksp.KspJvmTypeResolver r1;
        androidx.room.compiler.processing.ksp.KspProcessingEnv $r3;
        com.google.devtools.ksp.symbol.KSType $r4;
        boolean $z0;
        androidx.room.compiler.processing.ksp.KspType $r5;

        r0 := @this: androidx.room.compiler.processing.ksp.KspVoidType;

        r1 := @parameter0: androidx.room.compiler.processing.ksp.KspJvmTypeResolver;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "jvmTypeResolver");

        $r2 = new androidx.room.compiler.processing.ksp.KspVoidType;

        $r3 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: androidx.room.compiler.processing.ksp.KspProcessingEnv getEnv()>();

        $r4 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: com.google.devtools.ksp.symbol.KSType getKsType()>();

        $z0 = r0.<androidx.room.compiler.processing.ksp.KspVoidType: boolean boxed>;

        specialinvoke $r2.<androidx.room.compiler.processing.ksp.KspVoidType: void <init>(androidx.room.compiler.processing.ksp.KspProcessingEnv,com.google.devtools.ksp.symbol.KSType,boolean,androidx.room.compiler.processing.ksp.KspJvmTypeResolver)>($r3, $r4, $z0, r1);

        $r5 = (androidx.room.compiler.processing.ksp.KspType) $r2;

        return $r5;
    }

    public volatile androidx.room.compiler.processing.XType boxed()
    {
        androidx.room.compiler.processing.ksp.KspVoidType r0;
        androidx.room.compiler.processing.ksp.KspType $r1;
        androidx.room.compiler.processing.XType $r2;

        r0 := @this: androidx.room.compiler.processing.ksp.KspVoidType;

        $r1 = virtualinvoke r0.<androidx.room.compiler.processing.ksp.KspVoidType: androidx.room.compiler.processing.ksp.KspType boxed()>();

        $r2 = (androidx.room.compiler.processing.XType) $r1;

        return $r2;
    }

