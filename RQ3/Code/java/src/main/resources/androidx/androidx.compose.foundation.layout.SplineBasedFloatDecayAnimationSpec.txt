androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec
<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: float magicPhysicalCoefficient>
    public void <init>(androidx.compose.ui.unit.Density)
    {
        androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec r0;
        androidx.compose.ui.unit.Density r1;
        float $f0, $f1, $f2, $f3;

        r0 := @this: androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec;

        r1 := @parameter0: androidx.compose.ui.unit.Density;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "density");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $f0 = interfaceinvoke r1.<androidx.compose.ui.unit.Density: float getDensity()>();

        $f1 = 386.0878F * $f0;

        $f2 = $f1 * 160.0F;

        $f3 = $f2 * 0.84F;

        r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: float magicPhysicalCoefficient> = $f3;

        return;
    }

    public float getAbsVelocityThreshold()
    {
        androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec r0;

        r0 := @this: androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec;

        return 0.0F;
    }

    private final double getSplineDeceleration(float)
    {
        androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec r0;
        float f0, $f1, $f2, $f3;
        androidx.compose.foundation.layout.AndroidFlingSpline $r1;
        double $d0;

        r0 := @this: androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec;

        f0 := @parameter0: float;

        $r1 = <androidx.compose.foundation.layout.AndroidFlingSpline: androidx.compose.foundation.layout.AndroidFlingSpline INSTANCE>;

        $f1 = staticinvoke <androidx.compose.foundation.layout.WindowInsetsConnection_androidKt: float access$getPlatformFlingScrollFriction$p()>();

        $f2 = r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: float magicPhysicalCoefficient>;

        $f3 = $f1 * $f2;

        $d0 = virtualinvoke $r1.<androidx.compose.foundation.layout.AndroidFlingSpline: double deceleration(float,float)>(f0, $f3);

        return $d0;
    }

    public final float flingDistance(float)
    {
        androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec;

        f0 := @parameter0: float;

        d0 = specialinvoke r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: double getSplineDeceleration(float)>(f0);

        $f1 = staticinvoke <androidx.compose.foundation.layout.WindowInsetsConnection_androidKt: float access$getPlatformFlingScrollFriction$p()>();

        $f2 = r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: float magicPhysicalCoefficient>;

        $f3 = $f1 * $f2;

        $d1 = (double) $f3;

        $d2 = staticinvoke <androidx.compose.foundation.layout.WindowInsetsConnection_androidKt: double access$getDecelerationRate$p()>();

        $d3 = staticinvoke <androidx.compose.foundation.layout.WindowInsetsConnection_androidKt: double access$getDecelMinusOne$p()>();

        $d4 = $d2 / $d3;

        $d5 = $d4 * d0;

        $d6 = staticinvoke <java.lang.Math: double exp(double)>($d5);

        $d7 = $d1 * $d6;

        $f4 = (float) $d7;

        $f5 = staticinvoke <java.lang.Math: float signum(float)>(f0);

        $f6 = $f4 * $f5;

        return $f6;
    }

    public float getTargetValue(float, float)
    {
        androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec r0;
        float f0, f1, $f2, $f3;

        r0 := @this: androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = virtualinvoke r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: float flingDistance(float)>(f1);

        $f3 = f0 + $f2;

        return $f3;
    }

    public float getValueFromNanos(long, float, float)
    {
        androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec r0;
        long l0, l1, $l3;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9;
        byte $b2;
        androidx.compose.foundation.layout.AndroidFlingSpline $r1;

        r0 := @this: androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l1 = virtualinvoke r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: long getDurationNanos(float,float)>(0.0F, f1);

        $b2 = l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $f8 = (float) l0;

        $f7 = (float) l1;

        $f9 = $f8 / $f7;

        goto label2;

     label1:
        $f9 = 1.0F;

     label2:
        f2 = $f9;

        f3 = virtualinvoke r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: float flingDistance(float)>(f1);

        $r1 = <androidx.compose.foundation.layout.AndroidFlingSpline: androidx.compose.foundation.layout.AndroidFlingSpline INSTANCE>;

        $l3 = virtualinvoke $r1.<androidx.compose.foundation.layout.AndroidFlingSpline: long flingPosition-LfoxSSI(float)>(f2);

        $f4 = staticinvoke <androidx.compose.foundation.layout.AndroidFlingSpline$FlingResult: float getDistanceCoefficient-impl(long)>($l3);

        $f5 = f3 * $f4;

        $f6 = f0 + $f5;

        return $f6;
    }

    public long getDurationNanos(float, float)
    {
        androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec r0;
        float f0, f1;
        double d0, $d1, $d2, $d3, $d4;
        long $l0;

        r0 := @this: androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        d0 = specialinvoke r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: double getSplineDeceleration(float)>(f1);

        $d1 = staticinvoke <androidx.compose.foundation.layout.WindowInsetsConnection_androidKt: double access$getDecelMinusOne$p()>();

        $d2 = d0 / $d1;

        $d3 = staticinvoke <java.lang.Math: double exp(double)>($d2);

        $d4 = 1.0E9 * $d3;

        $l0 = (long) $d4;

        return $l0;
    }

    public float getVelocityFromNanos(long, float, float)
    {
        androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec r0;
        long l0, l1, $l3;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        byte $b2;
        androidx.compose.foundation.layout.AndroidFlingSpline $r1;

        r0 := @this: androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l1 = virtualinvoke r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: long getDurationNanos(float,float)>(0.0F, f1);

        $b2 = l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $f10 = (float) l0;

        $f9 = (float) l1;

        $f11 = $f10 / $f9;

        goto label2;

     label1:
        $f11 = 1.0F;

     label2:
        f2 = $f11;

        f3 = virtualinvoke r0.<androidx.compose.foundation.layout.SplineBasedFloatDecayAnimationSpec: float flingDistance(float)>(f1);

        $r1 = <androidx.compose.foundation.layout.AndroidFlingSpline: androidx.compose.foundation.layout.AndroidFlingSpline INSTANCE>;

        $l3 = virtualinvoke $r1.<androidx.compose.foundation.layout.AndroidFlingSpline: long flingPosition-LfoxSSI(float)>(f2);

        $f4 = staticinvoke <androidx.compose.foundation.layout.AndroidFlingSpline$FlingResult: float getVelocityCoefficient-impl(long)>($l3);

        $f6 = $f4 * f3;

        $f5 = (float) l1;

        $f7 = $f6 / $f5;

        $f8 = $f7 * 1.0E9F;

        return $f8;
    }

