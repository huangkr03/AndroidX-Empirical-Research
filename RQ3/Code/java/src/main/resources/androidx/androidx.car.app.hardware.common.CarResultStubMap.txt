androidx.car.app.hardware.common.CarResultStubMap
<androidx.car.app.hardware.common.CarResultStubMap: java.util.HashMap mStubMap>
<androidx.car.app.hardware.common.CarResultStubMap: java.lang.Object mUnsupportedValue>
<androidx.car.app.hardware.common.CarResultStubMap: int mResultType>
<androidx.car.app.hardware.common.CarResultStubMap: androidx.car.app.hardware.common.CarHardwareHostDispatcher mHostDispatcher>
    public void <init>(int, java.lang.Object, androidx.car.app.hardware.common.CarHardwareHostDispatcher)
    {
        androidx.car.app.hardware.common.CarResultStubMap r0;
        int i0;
        java.lang.Object r1, $r4, $r5;
        androidx.car.app.hardware.common.CarHardwareHostDispatcher r2, $r6;
        java.util.HashMap $r3;

        r0 := @this: androidx.car.app.hardware.common.CarResultStubMap;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: androidx.car.app.hardware.common.CarHardwareHostDispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<androidx.car.app.hardware.common.CarResultStubMap: java.util.HashMap mStubMap> = $r3;

        r0.<androidx.car.app.hardware.common.CarResultStubMap: int mResultType> = i0;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r0.<androidx.car.app.hardware.common.CarResultStubMap: java.lang.Object mUnsupportedValue> = $r4;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r6 = (androidx.car.app.hardware.common.CarHardwareHostDispatcher) $r5;

        r0.<androidx.car.app.hardware.common.CarResultStubMap: androidx.car.app.hardware.common.CarHardwareHostDispatcher mHostDispatcher> = $r6;

        return;
    }

    public void addListener(java.lang.Object, java.util.concurrent.Executor, androidx.car.app.hardware.common.OnCarDataAvailableListener)
    {
        androidx.car.app.hardware.common.CarResultStubMap r0;
        java.lang.Object r1, $r7, $r10;
        java.util.concurrent.Executor r2;
        androidx.car.app.hardware.common.OnCarDataAvailableListener r3;
        java.util.HashMap $r6, $r11;
        androidx.car.app.hardware.common.CarResultStub $r8, r15, r18;
        androidx.car.app.hardware.common.CarHardwareHostDispatcher $r9;
        int $i0;
        java.lang.Throwable $r13, r19;
        java.lang.IllegalArgumentException $r14;
        androidx.car.app.serialization.Bundleable $r16, r17;

        r0 := @this: androidx.car.app.hardware.common.CarResultStubMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: androidx.car.app.hardware.common.OnCarDataAvailableListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r6 = r0.<androidx.car.app.hardware.common.CarResultStubMap: java.util.HashMap mStubMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r15 = (androidx.car.app.hardware.common.CarResultStub) $r7;

        if r15 == null goto label1;

        virtualinvoke r15.<androidx.car.app.hardware.common.CarResultStub: void addListener(java.util.concurrent.Executor,androidx.car.app.hardware.common.OnCarDataAvailableListener)>(r2, r3);

        return;

     label1:
        if r1 != null goto label2;

        $r16 = null;

        goto label3;

     label2:
        $r16 = staticinvoke <androidx.car.app.serialization.Bundleable: androidx.car.app.serialization.Bundleable create(java.lang.Object)>(r1);

     label3:
        r17 = $r16;

        $r8 = new androidx.car.app.hardware.common.CarResultStub;

        $i0 = r0.<androidx.car.app.hardware.common.CarResultStubMap: int mResultType>;

        $r10 = r0.<androidx.car.app.hardware.common.CarResultStubMap: java.lang.Object mUnsupportedValue>;

        $r9 = r0.<androidx.car.app.hardware.common.CarResultStubMap: androidx.car.app.hardware.common.CarHardwareHostDispatcher mHostDispatcher>;

        specialinvoke $r8.<androidx.car.app.hardware.common.CarResultStub: void <init>(int,androidx.car.app.serialization.Bundleable,boolean,java.lang.Object,androidx.car.app.hardware.common.CarHardwareHostDispatcher)>($i0, r17, 0, $r10, $r9);

        r18 = $r8;

        virtualinvoke r18.<androidx.car.app.hardware.common.CarResultStub: void addListener(java.util.concurrent.Executor,androidx.car.app.hardware.common.OnCarDataAvailableListener)>(r2, r3);

        $r11 = r0.<androidx.car.app.hardware.common.CarResultStubMap: java.util.HashMap mStubMap>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r18);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        r19 = $r13;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid params");

        throw $r14;

     label6:
        return;

        catch androidx.car.app.serialization.BundlerException from label1 to label4 with label5;
    }

    public void removeListener(androidx.car.app.hardware.common.OnCarDataAvailableListener)
    {
        androidx.car.app.hardware.common.CarResultStubMap r0;
        androidx.car.app.hardware.common.OnCarDataAvailableListener r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.HashMap $r5;
        java.util.Set $r6;
        boolean $z0, $z1;
        java.lang.Object $r7, $r8;
        androidx.car.app.hardware.common.CarResultStub $r9;

        r0 := @this: androidx.car.app.hardware.common.CarResultStubMap;

        r1 := @parameter0: androidx.car.app.hardware.common.OnCarDataAvailableListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r5 = r0.<androidx.car.app.hardware.common.CarResultStubMap: java.util.HashMap mStubMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (androidx.car.app.hardware.common.CarResultStub) $r8;

        $z1 = virtualinvoke $r9.<androidx.car.app.hardware.common.CarResultStub: boolean removeListener(androidx.car.app.hardware.common.OnCarDataAvailableListener)>(r1);

        if $z1 == 0 goto label2;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

