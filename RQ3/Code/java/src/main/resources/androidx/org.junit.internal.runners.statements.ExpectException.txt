org.junit.internal.runners.statements.ExpectException
<org.junit.internal.runners.statements.ExpectException: java.lang.Class expected>
<org.junit.internal.runners.statements.ExpectException: org.junit.runners.model.Statement next>
    public void <init>(org.junit.runners.model.Statement, java.lang.Class)
    {
        org.junit.internal.runners.statements.ExpectException $r0;
        org.junit.runners.model.Statement $r1;
        java.lang.Class $r2;

        $r0 := @this: org.junit.internal.runners.statements.ExpectException;

        $r1 := @parameter0: org.junit.runners.model.Statement;

        $r2 := @parameter1: java.lang.Class;

        specialinvoke $r0.<org.junit.runners.model.Statement: void <init>()>();

        $r0.<org.junit.internal.runners.statements.ExpectException: org.junit.runners.model.Statement next> = $r1;

        $r0.<org.junit.internal.runners.statements.ExpectException: java.lang.Class expected> = $r2;

        return;
    }

    public void evaluate() throws java.lang.Exception
    {
        org.junit.internal.runners.statements.ExpectException $r0;
        org.junit.runners.model.Statement $r1;
        boolean $z0;
        java.lang.AssertionError $r2, r10;
        java.lang.String $r3, $r5, $r8;
        java.lang.Class $r4, $r7;
        int $i0, $i1;
        java.lang.Throwable $r6;
        java.lang.StringBuilder $r9, r11;
        java.lang.Exception r12;

        $r0 := @this: org.junit.internal.runners.statements.ExpectException;

        $r1 = $r0.<org.junit.internal.runners.statements.ExpectException: org.junit.runners.model.Statement next>;

     label1:
        virtualinvoke $r1.<org.junit.runners.model.Statement: void evaluate()>();

     label2:
        $z0 = 1;

     label3:
        if $z0 == 0 goto label7;

        r10 = new java.lang.AssertionError;

        $r2 = r10;

        $r3 = "Expected exception: ";

        $r4 = $r0.<org.junit.internal.runners.statements.ExpectException: java.lang.Class expected>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label6;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

     label4:
        specialinvoke r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r3);

        $r6 = (java.lang.Throwable) $r2;

        throw $r6;

     label5:
        $r6 := @caughtexception;

        $r4 = $r0.<org.junit.internal.runners.statements.ExpectException: java.lang.Class expected>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7);

        if $z0 != 0 goto label8;

        $r4 = $r0.<org.junit.internal.runners.statements.ExpectException: java.lang.Class expected>;

        $r3 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i0 = $i0 + 42;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>(int)>($i0);

        $r9 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected exception, expected<");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was<");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = new java.lang.Exception;

        specialinvoke r12.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r6);

        $r6 = (java.lang.Throwable) r12;

        throw $r6;

     label6:
        $r5 = new java.lang.String;

        $r3 = $r5;

        specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>("Expected exception: ");

        goto label4;

     label7:
        return;

     label8:
        $z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

