androidx.media3.test.utils.truth.SpannedSubject
<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>
<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ALREADY_FAILED_AND_FLAGS>
<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>
<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Aligned ALREADY_FAILED_ALIGNED>
<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Colored ALREADY_FAILED_COLORED>
<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Typefaced ALREADY_FAILED_TYPEFACED>
<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSized ALREADY_FAILED_ABSOLUTE_SIZED>
<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RelativeSized ALREADY_FAILED_RELATIVE_SIZED>
<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RubyText ALREADY_FAILED_WITH_TEXT>
<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$EmphasizedText ALREADY_FAILED_WITH_MARK_AND_POSITION>
    private void <init>(com.google.common.truth.FailureMetadata, android.text.Spanned)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        com.google.common.truth.FailureMetadata r1;
        android.text.Spanned r2;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        r1 := @parameter0: com.google.common.truth.FailureMetadata;

        r2 := @parameter1: android.text.Spanned;

        specialinvoke r0.<com.google.common.truth.Subject: void <init>(com.google.common.truth.FailureMetadata,java.lang.Object)>(r1, r2);

        r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual> = r2;

        return;
    }

    public static com.google.common.truth.Subject$Factory spanned()
    {
        com.google.common.truth.Subject$Factory $r0;

        $r0 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_CONSTRUCTOR" <androidx.media3.test.utils.truth.SpannedSubject: void <init>(com.google.common.truth.FailureMetadata,android.text.Spanned)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,android.text.Spanned));

        return $r0;
    }

    public static androidx.media3.test.utils.truth.SpannedSubject assertThat(android.text.Spanned)
    {
        android.text.Spanned r0;
        com.google.common.truth.Subject$Factory $r1;
        com.google.common.truth.SimpleSubjectBuilder $r2;
        com.google.common.truth.Subject $r3;
        androidx.media3.test.utils.truth.SpannedSubject $r4;

        r0 := @parameter0: android.text.Spanned;

        $r1 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory spanned()>();

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.SimpleSubjectBuilder assertAbout(com.google.common.truth.Subject$Factory)>($r1);

        $r3 = virtualinvoke $r2.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r0);

        $r4 = (androidx.media3.test.utils.truth.SpannedSubject) $r3;

        return $r4;
    }

    public void hasNoSpans()
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        java.lang.Object[] r1;
        android.text.Spanned $r2, $r3, $r4, $r7;
        int $i0, $i1;
        com.google.common.truth.Fact $r5, $r8, $r9, $r10;
        com.google.common.truth.Fact[] $r6, $r11;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r10 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r11 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r10, $r11);

        return;

     label1:
        $r4 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r3 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $i0 = interfaceinvoke $r3.<android.text.Spanned: int length()>();

        r1 = interfaceinvoke $r4.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i0, class "Ljava/lang/Object;");

        $i1 = lengthof r1;

        if $i1 <= 0 goto label2;

        $r5 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Expected no spans");

        $r6 = newarray (com.google.common.truth.Fact)[2];

        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r8 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("in text", $r7);

        $r6[0] = $r8;

        $r9 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Fact actualSpansFact()>();

        $r6[1] = $r9;

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r5, $r6);

     label2:
        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags hasItalicSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags $r1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags hasStyleSpan(int,int,int)>(i0, i1, 2);

        return $r1;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags hasBoldSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags $r1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags hasStyleSpan(int,int,int)>(i0, i1, 1);

        return $r1;
    }

    private androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags hasStyleSpan(int, int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1, i2, $i3, $i4;
        java.util.ArrayList r1, $r5;
        java.util.Iterator r2;
        android.text.style.StyleSpan r3;
        android.text.Spanned $r4, $r7, $r21;
        java.util.List $r6;
        boolean $z0, z2;
        java.lang.String $r8, $r9;
        androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags $r10, $r19, $r25;
        java.lang.Object[] $r11;
        java.lang.Integer $r12, $r13, $r14, $r22;
        com.google.common.truth.StandardSubjectBuilder $r15;
        com.google.common.truth.Subject$Factory $r16;
        com.google.common.truth.SimpleSubjectBuilder $r17;
        com.google.common.truth.Subject $r18;
        java.lang.Object $r20;
        com.google.common.truth.Fact $r23;
        com.google.common.truth.Fact[] $r24;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r4 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r4 != null goto label1;

        $r23 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r24 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r23, $r24);

        $r25 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r25;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1 = $r5;

        z2 = 0;

        $r6 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/StyleSpan;");

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r20 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.text.style.StyleSpan) $r20;

        $r21 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $i3 = interfaceinvoke $r21.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r3);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r22);

        $i4 = virtualinvoke r3.<android.text.style.StyleSpan: int getStyle()>();

        if $i4 != i2 goto label3;

        z2 = 1;

        goto label4;

     label3:
        goto label2;

     label4:
        if z2 == 0 goto label5;

        $r11 = newarray (java.lang.Object)[3];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r11[2] = $r14;

        $r15 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("StyleSpan (start=%s,end=%s,style=%s)", $r11);

        $r16 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory spanFlags()>();

        $r17 = virtualinvoke $r15.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r16);

        $r18 = virtualinvoke $r17.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r19 = (androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags) $r18;

        return $r19;

     label5:
        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/StyleSpan;", $r9);

        $r10 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r10;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags hasBoldItalicSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1, $i2, $i3;
        java.util.ArrayList r1, r2, $r6, $r7;
        java.util.Iterator r3;
        android.text.style.StyleSpan r4;
        android.text.Spanned $r5, $r25, $r39, $r44;
        java.util.List $r8, $r29, $r34;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Integer $r9, $r11, $r12, $r18, $r20, $r21, $r28, $r32, $r33, $r38, $r45, $r46;
        java.lang.Object[] $r10, $r19;
        com.google.common.truth.StandardSubjectBuilder $r13;
        com.google.common.truth.Subject$Factory $r14;
        com.google.common.truth.SimpleSubjectBuilder $r15;
        com.google.common.truth.Subject $r16;
        androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags $r17, $r37, $r42, $r49;
        java.lang.String $r22, $r26, $r41;
        com.google.common.truth.Fact $r23, $r27, $r30, $r35, $r36, $r47;
        com.google.common.truth.Fact[] $r24, $r48;
        java.lang.Integer[] $r31;
        java.lang.CharSequence $r40;
        java.lang.Object $r43;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r5 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r5 != null goto label1;

        $r47 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r48 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r47, $r48);

        $r49 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r49;

     label1:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = $r7;

        $r8 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/StyleSpan;");

        r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r43 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.text.style.StyleSpan) $r43;

        $r44 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $i2 = interfaceinvoke $r44.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r4);

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r45);

        $i3 = virtualinvoke r4.<android.text.style.StyleSpan: int getStyle()>();

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r46);

        goto label2;

     label3:
        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $r39 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r40 = interfaceinvoke $r39.<android.text.Spanned: java.lang.CharSequence subSequence(int,int)>(i0, i1);

        $r41 = interfaceinvoke $r40.<java.lang.CharSequence: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/StyleSpan;", $r41);

        $r42 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r42;

     label4:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z2 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r9);

        if $z2 != 0 goto label5;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z3 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r18);

        if $z3 == 0 goto label6;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z4 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>($r38);

        if $z4 == 0 goto label6;

     label5:
        $r10 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10[1] = $r12;

        $r13 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("StyleSpan (start=%s,end=%s)", $r10);

        $r14 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory spanFlags()>();

        $r15 = virtualinvoke $r13.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r14);

        $r16 = virtualinvoke $r15.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r17 = (androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags) $r16;

        return $r17;

     label6:
        $r19 = newarray (java.lang.Object)[2];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r19[0] = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r19[1] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No matching StyleSpans found between start=%s,end=%s", $r19);

        $r23 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r22);

        $r24 = newarray (com.google.common.truth.Fact)[4];

        $r25 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        $r27 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("in text", $r26);

        $r24[0] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r29 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r28);

        $r30 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("expected to contain either", $r29);

        $r24[1] = $r30;

        $r31 = newarray (java.lang.Integer)[2];

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r31[0] = $r32;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r31[1] = $r33;

        $r34 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r31);

        $r35 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("or both", $r34);

        $r24[2] = $r35;

        $r36 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("but found styles", r2);

        $r24[3] = $r36;

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r23, $r24);

        $r37 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r37;
    }

    public void hasNoStyleSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroid/text/style/StyleSpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags hasUnderlineSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1, $i2, $i3;
        java.util.List r1, $r16;
        android.text.Spanned $r2, $r3, $r13;
        java.lang.String $r4, $r5;
        androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags $r6, $r18, $r21;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9, $r15;
        com.google.common.truth.StandardSubjectBuilder $r10;
        com.google.common.truth.Subject$Factory $r11;
        com.google.common.truth.SimpleSubjectBuilder $r12;
        java.lang.Object $r14;
        com.google.common.truth.Subject $r17;
        com.google.common.truth.Fact $r19;
        com.google.common.truth.Fact[] $r20;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r19 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r20 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r19, $r20);

        $r21 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r21;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/UnderlineSpan;");

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 != 1 goto label2;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r9;

        $r10 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("UnderlineSpan (start=%s,end=%s)", $r7);

        $r11 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory spanFlags()>();

        $r12 = virtualinvoke $r10.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r11);

        $r13 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $i3 = interfaceinvoke $r13.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r16 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r12.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>($r16);

        $r18 = (androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags) $r17;

        return $r18;

     label2:
        $r3 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/UnderlineSpan;", $r5);

        $r6 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r6;
    }

    public void hasNoUnderlineSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroid/text/style/UnderlineSpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags hasStrikethroughSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1, $i2, $i3;
        java.util.List r1, $r16;
        android.text.Spanned $r2, $r3, $r13;
        java.lang.String $r4, $r5;
        androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags $r6, $r18, $r21;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9, $r15;
        com.google.common.truth.StandardSubjectBuilder $r10;
        com.google.common.truth.Subject$Factory $r11;
        com.google.common.truth.SimpleSubjectBuilder $r12;
        java.lang.Object $r14;
        com.google.common.truth.Subject $r17;
        com.google.common.truth.Fact $r19;
        com.google.common.truth.Fact[] $r20;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r19 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r20 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r19, $r20);

        $r21 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r21;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/StrikethroughSpan;");

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 != 1 goto label2;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r9;

        $r10 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("StrikethroughSpan (start=%s,end=%s)", $r7);

        $r11 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory spanFlags()>();

        $r12 = virtualinvoke $r10.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r11);

        $r13 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $i3 = interfaceinvoke $r13.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r16 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r12.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>($r16);

        $r18 = (androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags) $r17;

        return $r18;

     label2:
        $r3 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/StrikethroughSpan;", $r5);

        $r6 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r6;
    }

    public void hasNoStrikethroughSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroid/text/style/StrikethroughSpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$Aligned hasAlignmentSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        java.util.List r1;
        android.text.Spanned $r2, $r7, $r12;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        com.google.common.truth.StandardSubjectBuilder $r6;
        com.google.common.truth.Subject$Factory $r8;
        com.google.common.truth.SimpleSubjectBuilder $r9;
        com.google.common.truth.Subject $r10;
        androidx.media3.test.utils.truth.SpannedSubject$Aligned $r11, $r15, $r18;
        java.lang.String $r13, $r14;
        com.google.common.truth.Fact $r16;
        com.google.common.truth.Fact[] $r17;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r16 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r17 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r16, $r17);

        $r18 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Aligned ALREADY_FAILED_ALIGNED>;

        return $r18;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/AlignmentSpan;");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r12 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/AlignmentSpan;", $r14);

        $r15 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Aligned ALREADY_FAILED_ALIGNED>;

        return $r15;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r5;

        $r6 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("AlignmentSpan (start=%s,end=%s)", $r3);

        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r8 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory alignmentSpans(android.text.Spanned)>($r7);

        $r9 = virtualinvoke $r6.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r8);

        $r10 = virtualinvoke $r9.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r11 = (androidx.media3.test.utils.truth.SpannedSubject$Aligned) $r10;

        return $r11;
    }

    public void hasNoAlignmentSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroid/text/style/AlignmentSpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$Colored hasForegroundColorSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        java.util.List r1;
        android.text.Spanned $r2, $r7, $r12;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        com.google.common.truth.StandardSubjectBuilder $r6;
        com.google.common.truth.Subject$Factory $r8;
        com.google.common.truth.SimpleSubjectBuilder $r9;
        com.google.common.truth.Subject $r10;
        androidx.media3.test.utils.truth.SpannedSubject$Colored $r11, $r15, $r18;
        java.lang.String $r13, $r14;
        com.google.common.truth.Fact $r16;
        com.google.common.truth.Fact[] $r17;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r16 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r17 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r16, $r17);

        $r18 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Colored ALREADY_FAILED_COLORED>;

        return $r18;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/ForegroundColorSpan;");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r12 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/ForegroundColorSpan;", $r14);

        $r15 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Colored ALREADY_FAILED_COLORED>;

        return $r15;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r5;

        $r6 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("ForegroundColorSpan (start=%s,end=%s)", $r3);

        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r8 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory foregroundColorSpans(android.text.Spanned)>($r7);

        $r9 = virtualinvoke $r6.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r8);

        $r10 = virtualinvoke $r9.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r11 = (androidx.media3.test.utils.truth.SpannedSubject$Colored) $r10;

        return $r11;
    }

    public void hasNoForegroundColorSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroid/text/style/ForegroundColorSpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$Colored hasBackgroundColorSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        java.util.List r1;
        android.text.Spanned $r2, $r7, $r12;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        com.google.common.truth.StandardSubjectBuilder $r6;
        com.google.common.truth.Subject$Factory $r8;
        com.google.common.truth.SimpleSubjectBuilder $r9;
        com.google.common.truth.Subject $r10;
        androidx.media3.test.utils.truth.SpannedSubject$Colored $r11, $r15, $r18;
        java.lang.String $r13, $r14;
        com.google.common.truth.Fact $r16;
        com.google.common.truth.Fact[] $r17;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r16 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r17 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r16, $r17);

        $r18 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Colored ALREADY_FAILED_COLORED>;

        return $r18;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/BackgroundColorSpan;");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r12 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/BackgroundColorSpan;", $r14);

        $r15 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Colored ALREADY_FAILED_COLORED>;

        return $r15;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r5;

        $r6 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("BackgroundColorSpan (start=%s,end=%s)", $r3);

        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r8 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory backgroundColorSpans(android.text.Spanned)>($r7);

        $r9 = virtualinvoke $r6.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r8);

        $r10 = virtualinvoke $r9.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r11 = (androidx.media3.test.utils.truth.SpannedSubject$Colored) $r10;

        return $r11;
    }

    public void hasNoBackgroundColorSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroid/text/style/BackgroundColorSpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$Typefaced hasTypefaceSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        java.util.List r1;
        android.text.Spanned $r2, $r7, $r12;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        com.google.common.truth.StandardSubjectBuilder $r6;
        com.google.common.truth.Subject$Factory $r8;
        com.google.common.truth.SimpleSubjectBuilder $r9;
        com.google.common.truth.Subject $r10;
        androidx.media3.test.utils.truth.SpannedSubject$Typefaced $r11, $r15, $r18;
        java.lang.String $r13, $r14;
        com.google.common.truth.Fact $r16;
        com.google.common.truth.Fact[] $r17;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r16 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r17 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r16, $r17);

        $r18 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Typefaced ALREADY_FAILED_TYPEFACED>;

        return $r18;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/TypefaceSpan;");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r12 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/TypefaceSpan;", $r14);

        $r15 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Typefaced ALREADY_FAILED_TYPEFACED>;

        return $r15;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r5;

        $r6 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("TypefaceSpan (start=%s,end=%s)", $r3);

        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r8 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory typefaceSpans(android.text.Spanned)>($r7);

        $r9 = virtualinvoke $r6.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r8);

        $r10 = virtualinvoke $r9.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r11 = (androidx.media3.test.utils.truth.SpannedSubject$Typefaced) $r10;

        return $r11;
    }

    public void hasNoTypefaceSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroid/text/style/TypefaceSpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSized hasAbsoluteSizeSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        java.util.List r1;
        android.text.Spanned $r2, $r7, $r12;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        com.google.common.truth.StandardSubjectBuilder $r6;
        com.google.common.truth.Subject$Factory $r8;
        com.google.common.truth.SimpleSubjectBuilder $r9;
        com.google.common.truth.Subject $r10;
        androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSized $r11, $r15, $r18;
        java.lang.String $r13, $r14;
        com.google.common.truth.Fact $r16;
        com.google.common.truth.Fact[] $r17;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r16 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r17 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r16, $r17);

        $r18 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSized ALREADY_FAILED_ABSOLUTE_SIZED>;

        return $r18;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/AbsoluteSizeSpan;");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r12 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/AbsoluteSizeSpan;", $r14);

        $r15 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSized ALREADY_FAILED_ABSOLUTE_SIZED>;

        return $r15;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r5;

        $r6 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("AbsoluteSizeSpan (start=%s,end=%s)", $r3);

        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r8 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory absoluteSizeSpans(android.text.Spanned)>($r7);

        $r9 = virtualinvoke $r6.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r8);

        $r10 = virtualinvoke $r9.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r11 = (androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSized) $r10;

        return $r11;
    }

    public void hasNoAbsoluteSizeSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroid/text/style/AbsoluteSizeSpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$RelativeSized hasRelativeSizeSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        java.util.List r1;
        android.text.Spanned $r2, $r7, $r12;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        com.google.common.truth.StandardSubjectBuilder $r6;
        com.google.common.truth.Subject$Factory $r8;
        com.google.common.truth.SimpleSubjectBuilder $r9;
        com.google.common.truth.Subject $r10;
        androidx.media3.test.utils.truth.SpannedSubject$RelativeSized $r11, $r15, $r18;
        java.lang.String $r13, $r14;
        com.google.common.truth.Fact $r16;
        com.google.common.truth.Fact[] $r17;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r16 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r17 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r16, $r17);

        $r18 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RelativeSized ALREADY_FAILED_RELATIVE_SIZED>;

        return $r18;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/RelativeSizeSpan;");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r12 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroid/text/style/RelativeSizeSpan;", $r14);

        $r15 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RelativeSized ALREADY_FAILED_RELATIVE_SIZED>;

        return $r15;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r5;

        $r6 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("RelativeSizeSpan (start=%s,end=%s)", $r3);

        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r8 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory relativeSizeSpans(android.text.Spanned)>($r7);

        $r9 = virtualinvoke $r6.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r8);

        $r10 = virtualinvoke $r9.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r11 = (androidx.media3.test.utils.truth.SpannedSubject$RelativeSized) $r10;

        return $r11;
    }

    public void hasNoRelativeSizeSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroid/text/style/RelativeSizeSpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$RubyText hasRubySpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        java.util.List r1;
        android.text.Spanned $r2, $r7, $r12;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        com.google.common.truth.StandardSubjectBuilder $r6;
        com.google.common.truth.Subject$Factory $r8;
        com.google.common.truth.SimpleSubjectBuilder $r9;
        com.google.common.truth.Subject $r10;
        androidx.media3.test.utils.truth.SpannedSubject$RubyText $r11, $r15, $r18;
        java.lang.String $r13, $r14;
        com.google.common.truth.Fact $r16;
        com.google.common.truth.Fact[] $r17;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r16 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r17 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r16, $r17);

        $r18 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RubyText ALREADY_FAILED_WITH_TEXT>;

        return $r18;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroidx/media3/common/text/RubySpan;");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r12 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroidx/media3/common/text/RubySpan;", $r14);

        $r15 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RubyText ALREADY_FAILED_WITH_TEXT>;

        return $r15;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r5;

        $r6 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("RubySpan (start=%s,end=%s)", $r3);

        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r8 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory rubySpans(android.text.Spanned)>($r7);

        $r9 = virtualinvoke $r6.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r8);

        $r10 = virtualinvoke $r9.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r11 = (androidx.media3.test.utils.truth.SpannedSubject$RubyText) $r10;

        return $r11;
    }

    public void hasNoRubySpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroidx/media3/common/text/RubySpan;", i0, i1);

        return;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags hasHorizontalTextInVerticalContextSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1, $i2, $i3;
        java.util.List r1, $r16;
        android.text.Spanned $r2, $r3, $r13;
        java.lang.String $r4, $r5;
        androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags $r6, $r18, $r21;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9, $r15;
        com.google.common.truth.StandardSubjectBuilder $r10;
        com.google.common.truth.Subject$Factory $r11;
        com.google.common.truth.SimpleSubjectBuilder $r12;
        java.lang.Object $r14;
        com.google.common.truth.Subject $r17;
        com.google.common.truth.Fact $r19;
        com.google.common.truth.Fact[] $r20;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r19 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r20 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r19, $r20);

        $r21 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r21;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroidx/media3/common/text/HorizontalTextInVerticalContextSpan;");

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 != 1 goto label2;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r9;

        $r10 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("HorizontalTextInVerticalContextSpan (start=%s,end=%s)", $r7);

        $r11 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory spanFlags()>();

        $r12 = virtualinvoke $r10.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r11);

        $r13 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $i3 = interfaceinvoke $r13.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r14);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r16 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r12.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>($r16);

        $r18 = (androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags) $r17;

        return $r18;

     label2:
        $r3 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroidx/media3/common/text/HorizontalTextInVerticalContextSpan;", $r5);

        $r6 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS>;

        return $r6;
    }

    public androidx.media3.test.utils.truth.SpannedSubject$EmphasizedText hasTextEmphasisSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1, $i2;
        java.util.List r1;
        android.text.Spanned $r2, $r3, $r11;
        java.lang.String $r4, $r5;
        androidx.media3.test.utils.truth.SpannedSubject$EmphasizedText $r6, $r15, $r18;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9;
        com.google.common.truth.StandardSubjectBuilder $r10;
        com.google.common.truth.Subject$Factory $r12;
        com.google.common.truth.SimpleSubjectBuilder $r13;
        com.google.common.truth.Subject $r14;
        com.google.common.truth.Fact $r16;
        com.google.common.truth.Fact[] $r17;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r2 != null goto label1;

        $r16 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r17 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r16, $r17);

        $r18 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$EmphasizedText ALREADY_FAILED_WITH_MARK_AND_POSITION>;

        return $r18;

     label1:
        r1 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: java.util.List findMatchingSpans(int,int,java.lang.Class)>(i0, i1, class "Landroidx/media3/common/text/TextEmphasisSpan;");

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 != 1 goto label2;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r9;

        $r10 = virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.StandardSubjectBuilder check(java.lang.String,java.lang.Object[])>("TextEmphasisSpan (start=%s,end=%s)", $r7);

        $r11 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r12 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory textEmphasisSubjects(android.text.Spanned)>($r11);

        $r13 = virtualinvoke $r10.<com.google.common.truth.StandardSubjectBuilder: com.google.common.truth.SimpleSubjectBuilder about(com.google.common.truth.Subject$Factory)>($r12);

        $r14 = virtualinvoke $r13.<com.google.common.truth.SimpleSubjectBuilder: com.google.common.truth.Subject that(java.lang.Object)>(r1);

        $r15 = (androidx.media3.test.utils.truth.SpannedSubject$EmphasizedText) $r14;

        return $r15;

     label2:
        $r3 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithExpectedSpan(int,int,java.lang.Class,java.lang.String)>(i0, i1, class "Landroidx/media3/common/text/TextEmphasisSpan;", $r5);

        $r6 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$EmphasizedText ALREADY_FAILED_WITH_MARK_AND_POSITION>;

        return $r6;
    }

    public void hasNoTextEmphasisSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroidx/media3/common/text/TextEmphasisSpan;", i0, i1);

        return;
    }

    public void hasNoHorizontalTextInVerticalContextSpanBetween(int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void hasNoSpansOfTypeBetween(java.lang.Class,int,int)>(class "Landroidx/media3/common/text/HorizontalTextInVerticalContextSpan;", i0, i1);

        return;
    }

    private void hasNoSpansOfTypeBetween(java.lang.Class, int, int)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        java.lang.Class r1;
        int i0, i1, $i2;
        java.lang.Object[] r2, $r5;
        android.text.Spanned $r3, $r4;
        java.lang.String $r6, $r9;
        java.lang.Integer $r7, $r8;
        com.google.common.truth.Fact $r10, $r12, $r13, $r14;
        com.google.common.truth.Fact[] $r11, $r15;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r3 != null goto label1;

        $r14 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r15 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r14, $r15);

        return;

     label1:
        $r4 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        r2 = interfaceinvoke $r4.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, r1);

        $i2 = lengthof r2;

        if $i2 == 0 goto label2;

        $r5 = newarray (java.lang.Object)[3];

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[2] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Found unexpected %ss between start=%s,end=%s", $r5);

        $r10 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>($r9);

        $r11 = newarray (com.google.common.truth.Fact)[2];

        $r12 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("expected none");

        $r11[0] = $r12;

        $r13 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Fact actualSpansFact()>();

        $r11[1] = $r13;

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r10, $r11);

     label2:
        return;
    }

    private java.util.List findMatchingSpans(int, int, java.lang.Class)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1, i2, $i3, $i4, i5;
        java.lang.Class r1;
        java.util.ArrayList r2, $r6;
        java.lang.Object[] r3;
        java.lang.Object r4;
        android.text.Spanned $r5, $r7, $r9, $r10;
        java.util.List $r8, $r13;
        com.google.common.truth.Fact $r11;
        com.google.common.truth.Fact[] $r12;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        $r5 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        if $r5 != null goto label1;

        $r11 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("Spanned must not be null");

        $r12 = newarray (com.google.common.truth.Fact)[0];

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r11, $r12);

        $r13 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r13;

     label1:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        $r7 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        r3 = interfaceinvoke $r7.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, r1);

        i2 = lengthof r3;

        i5 = 0;

     label2:
        if i5 >= i2 goto label4;

        r4 = r3[i5];

        $r9 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $i3 = interfaceinvoke $r9.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r4);

        if $i3 != i0 goto label3;

        $r10 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $i4 = interfaceinvoke $r10.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r4);

        if $i4 != i1 goto label3;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return $r8;
    }

    private void failWithExpectedSpan(int, int, java.lang.Class, java.lang.String)
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        int i0, i1;
        java.lang.Class r1;
        java.lang.String r2, $r7;
        com.google.common.truth.Fact $r3, $r6, $r8, $r9;
        com.google.common.truth.Fact[] $r4;
        android.text.Spanned $r5;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        r2 := @parameter3: java.lang.String;

        $r3 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("No matching span found");

        $r4 = newarray (com.google.common.truth.Fact)[3];

        $r5 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        $r6 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("in text", $r5);

        $r4[0] = $r6;

        $r7 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: java.lang.String getSpanAsString(int,int,java.lang.Class,java.lang.String)>(i0, i1, r1, r2);

        $r8 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("expected", $r7);

        $r4[1] = $r8;

        $r9 = specialinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Fact actualSpansFact()>();

        $r4[2] = $r9;

        virtualinvoke r0.<androidx.media3.test.utils.truth.SpannedSubject: void failWithoutActual(com.google.common.truth.Fact,com.google.common.truth.Fact[])>($r3, $r4);

        return;
    }

    private com.google.common.truth.Fact actualSpansFact()
    {
        androidx.media3.test.utils.truth.SpannedSubject r0;
        java.lang.String r1;
        android.text.Spanned $r2;
        boolean $z0;
        com.google.common.truth.Fact $r3, $r4;

        r0 := @this: androidx.media3.test.utils.truth.SpannedSubject;

        $r2 = r0.<androidx.media3.test.utils.truth.SpannedSubject: android.text.Spanned actual>;

        r1 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: java.lang.String getAllSpansAsString(android.text.Spanned)>($r2);

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact simpleFact(java.lang.String)>("but found no spans");

        return $r4;

     label1:
        $r3 = staticinvoke <com.google.common.truth.Fact: com.google.common.truth.Fact fact(java.lang.String,java.lang.Object)>("but found", r1);

        return $r3;
    }

    private static java.lang.String getAllSpansAsString(android.text.Spanned)
    {
        android.text.Spanned r0;
        java.util.ArrayList r1, $r4;
        java.lang.Object[] r2;
        int i0, $i1, i2;
        java.lang.Object r3;
        java.lang.String $r5, $r6;

        r0 := @parameter0: android.text.Spanned;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        $i1 = interfaceinvoke r0.<android.text.Spanned: int length()>();

        r2 = interfaceinvoke r0.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i1, class "Ljava/lang/Object;");

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r3 = r2[i2];

        $r6 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: java.lang.String getSpanAsString(java.lang.Object,android.text.Spanned)>(r3, r0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r5 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>("\n", r1);

        return $r5;
    }

    private static java.lang.String getSpanAsString(java.lang.Object, android.text.Spanned)
    {
        java.lang.Object r0;
        android.text.Spanned r1;
        int i0, i1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.text.Spanned;

        i0 = interfaceinvoke r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r0);

        i1 = interfaceinvoke r1.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r0);

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $r5 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: java.lang.String getSpanAsString(int,int,java.lang.Class,java.lang.String)>(i0, i1, $r2, $r4);

        return $r5;
    }

    private static java.lang.String getSpanAsString(int, int, java.lang.Class, java.lang.String)
    {
        int i0, i1;
        java.lang.Class r0;
        java.lang.String r1, $r5, $r6;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.Class;

        r1 := @parameter3: java.lang.String;

        $r2 = newarray (java.lang.Object)[4];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r4;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        $r2[2] = $r5;

        $r2[3] = r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("start=%s\tend=%s\ttype=%s\tsubstring=\'%s\'", $r2);

        return $r6;
    }

    private static com.google.common.truth.Subject$Factory spanFlags()
    {
        com.google.common.truth.Subject$Factory $r0;

        $r0 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$SpanFlagsSubject lambda$spanFlags$2(com.google.common.truth.FailureMetadata,java.util.List)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$SpanFlagsSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.util.List));

        return $r0;
    }

    private static com.google.common.truth.Subject$Factory alignmentSpans(android.text.Spanned)
    {
        android.text.Spanned r0;
        com.google.common.truth.Subject$Factory $r1;

        r0 := @parameter0: android.text.Spanned;

        $r1 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory (android.text.Spanned)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AlignmentSpansSubject lambda$alignmentSpans$4(android.text.Spanned,com.google.common.truth.FailureMetadata,java.util.List)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$AlignmentSpansSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.util.List));

        return $r1;
    }

    private static com.google.common.truth.Subject$Factory foregroundColorSpans(android.text.Spanned)
    {
        android.text.Spanned r0;
        com.google.common.truth.Subject$Factory $r1;

        r0 := @parameter0: android.text.Spanned;

        $r1 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory (android.text.Spanned)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$ForegroundColorSpansSubject lambda$foregroundColorSpans$6(android.text.Spanned,com.google.common.truth.FailureMetadata,java.util.List)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$ForegroundColorSpansSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.util.List));

        return $r1;
    }

    private static com.google.common.truth.Subject$Factory backgroundColorSpans(android.text.Spanned)
    {
        android.text.Spanned r0;
        com.google.common.truth.Subject$Factory $r1;

        r0 := @parameter0: android.text.Spanned;

        $r1 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory (android.text.Spanned)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$BackgroundColorSpansSubject lambda$backgroundColorSpans$7(android.text.Spanned,com.google.common.truth.FailureMetadata,java.util.List)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$BackgroundColorSpansSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.util.List));

        return $r1;
    }

    private static com.google.common.truth.Subject$Factory typefaceSpans(android.text.Spanned)
    {
        android.text.Spanned r0;
        com.google.common.truth.Subject$Factory $r1;

        r0 := @parameter0: android.text.Spanned;

        $r1 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory (android.text.Spanned)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$TypefaceSpansSubject lambda$typefaceSpans$9(android.text.Spanned,com.google.common.truth.FailureMetadata,java.util.List)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$TypefaceSpansSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.util.List));

        return $r1;
    }

    private static com.google.common.truth.Subject$Factory absoluteSizeSpans(android.text.Spanned)
    {
        android.text.Spanned r0;
        com.google.common.truth.Subject$Factory $r1;

        r0 := @parameter0: android.text.Spanned;

        $r1 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory (android.text.Spanned)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSizeSpansSubject lambda$absoluteSizeSpans$11(android.text.Spanned,com.google.common.truth.FailureMetadata,java.util.List)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSizeSpansSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.util.List));

        return $r1;
    }

    private static com.google.common.truth.Subject$Factory relativeSizeSpans(android.text.Spanned)
    {
        android.text.Spanned r0;
        com.google.common.truth.Subject$Factory $r1;

        r0 := @parameter0: android.text.Spanned;

        $r1 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory (android.text.Spanned)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RelativeSizeSpansSubject lambda$relativeSizeSpans$13(android.text.Spanned,com.google.common.truth.FailureMetadata,java.util.List)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$RelativeSizeSpansSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.util.List));

        return $r1;
    }

    private static com.google.common.truth.Subject$Factory rubySpans(android.text.Spanned)
    {
        android.text.Spanned r0;
        com.google.common.truth.Subject$Factory $r1;

        r0 := @parameter0: android.text.Spanned;

        $r1 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory (android.text.Spanned)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RubySpansSubject lambda$rubySpans$15(android.text.Spanned,com.google.common.truth.FailureMetadata,java.util.List)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$RubySpansSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.util.List));

        return $r1;
    }

    private static com.google.common.truth.Subject$Factory textEmphasisSubjects(android.text.Spanned)
    {
        android.text.Spanned r0;
        com.google.common.truth.Subject$Factory $r1;

        r0 := @parameter0: android.text.Spanned;

        $r1 = dynamicinvoke "createSubject" <com.google.common.truth.Subject$Factory (android.text.Spanned)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: com.google.common.truth.Subject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.lang.Object), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$TextEmphasisSubject lambda$textEmphasisSubjects$17(android.text.Spanned,com.google.common.truth.FailureMetadata,java.util.List)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$TextEmphasisSubject __METHODTYPE__(com.google.common.truth.FailureMetadata,java.util.List));

        return $r1;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$TextEmphasisSubject lambda$textEmphasisSubjects$17(android.text.Spanned, com.google.common.truth.FailureMetadata, java.util.List)
    {
        android.text.Spanned r0;
        com.google.common.truth.FailureMetadata r1;
        java.util.List r2;
        androidx.media3.test.utils.truth.SpannedSubject$TextEmphasisSubject $r3;

        r0 := @parameter0: android.text.Spanned;

        r1 := @parameter1: com.google.common.truth.FailureMetadata;

        r2 := @parameter2: java.util.List;

        $r3 = new androidx.media3.test.utils.truth.SpannedSubject$TextEmphasisSubject;

        specialinvoke $r3.<androidx.media3.test.utils.truth.SpannedSubject$TextEmphasisSubject: void <init>(com.google.common.truth.FailureMetadata,java.util.List,android.text.Spanned,androidx.media3.test.utils.truth.SpannedSubject$1)>(r1, r2, r0, null);

        return $r3;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$16(int, int, int)
    {
        int i0, i1, i2;
        androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ALREADY_FAILED_AND_FLAGS>;

        return $r0;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$RubySpansSubject lambda$rubySpans$15(android.text.Spanned, com.google.common.truth.FailureMetadata, java.util.List)
    {
        android.text.Spanned r0;
        com.google.common.truth.FailureMetadata r1;
        java.util.List r2;
        androidx.media3.test.utils.truth.SpannedSubject$RubySpansSubject $r3;

        r0 := @parameter0: android.text.Spanned;

        r1 := @parameter1: com.google.common.truth.FailureMetadata;

        r2 := @parameter2: java.util.List;

        $r3 = new androidx.media3.test.utils.truth.SpannedSubject$RubySpansSubject;

        specialinvoke $r3.<androidx.media3.test.utils.truth.SpannedSubject$RubySpansSubject: void <init>(com.google.common.truth.FailureMetadata,java.util.List,android.text.Spanned,androidx.media3.test.utils.truth.SpannedSubject$1)>(r1, r2, r0, null);

        return $r3;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$14(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ALREADY_FAILED_AND_FLAGS>;

        return $r1;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$RelativeSizeSpansSubject lambda$relativeSizeSpans$13(android.text.Spanned, com.google.common.truth.FailureMetadata, java.util.List)
    {
        android.text.Spanned r0;
        com.google.common.truth.FailureMetadata r1;
        java.util.List r2;
        androidx.media3.test.utils.truth.SpannedSubject$RelativeSizeSpansSubject $r3;

        r0 := @parameter0: android.text.Spanned;

        r1 := @parameter1: com.google.common.truth.FailureMetadata;

        r2 := @parameter2: java.util.List;

        $r3 = new androidx.media3.test.utils.truth.SpannedSubject$RelativeSizeSpansSubject;

        specialinvoke $r3.<androidx.media3.test.utils.truth.SpannedSubject$RelativeSizeSpansSubject: void <init>(com.google.common.truth.FailureMetadata,java.util.List,android.text.Spanned,androidx.media3.test.utils.truth.SpannedSubject$1)>(r1, r2, r0, null);

        return $r3;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$12(float)
    {
        float f0;
        androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags $r0;

        f0 := @parameter0: float;

        $r0 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ALREADY_FAILED_AND_FLAGS>;

        return $r0;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSizeSpansSubject lambda$absoluteSizeSpans$11(android.text.Spanned, com.google.common.truth.FailureMetadata, java.util.List)
    {
        android.text.Spanned r0;
        com.google.common.truth.FailureMetadata r1;
        java.util.List r2;
        androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSizeSpansSubject $r3;

        r0 := @parameter0: android.text.Spanned;

        r1 := @parameter1: com.google.common.truth.FailureMetadata;

        r2 := @parameter2: java.util.List;

        $r3 = new androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSizeSpansSubject;

        specialinvoke $r3.<androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSizeSpansSubject: void <init>(com.google.common.truth.FailureMetadata,java.util.List,android.text.Spanned,androidx.media3.test.utils.truth.SpannedSubject$1)>(r1, r2, r0, null);

        return $r3;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$10(int)
    {
        int i0;
        androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags $r0;

        i0 := @parameter0: int;

        $r0 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ALREADY_FAILED_AND_FLAGS>;

        return $r0;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$TypefaceSpansSubject lambda$typefaceSpans$9(android.text.Spanned, com.google.common.truth.FailureMetadata, java.util.List)
    {
        android.text.Spanned r0;
        com.google.common.truth.FailureMetadata r1;
        java.util.List r2;
        androidx.media3.test.utils.truth.SpannedSubject$TypefaceSpansSubject $r3;

        r0 := @parameter0: android.text.Spanned;

        r1 := @parameter1: com.google.common.truth.FailureMetadata;

        r2 := @parameter2: java.util.List;

        $r3 = new androidx.media3.test.utils.truth.SpannedSubject$TypefaceSpansSubject;

        specialinvoke $r3.<androidx.media3.test.utils.truth.SpannedSubject$TypefaceSpansSubject: void <init>(com.google.common.truth.FailureMetadata,java.util.List,android.text.Spanned,androidx.media3.test.utils.truth.SpannedSubject$1)>(r1, r2, r0, null);

        return $r3;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$8(java.lang.String)
    {
        java.lang.String r0;
        androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ALREADY_FAILED_AND_FLAGS>;

        return $r1;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$BackgroundColorSpansSubject lambda$backgroundColorSpans$7(android.text.Spanned, com.google.common.truth.FailureMetadata, java.util.List)
    {
        android.text.Spanned r0;
        com.google.common.truth.FailureMetadata r1;
        java.util.List r2;
        androidx.media3.test.utils.truth.SpannedSubject$BackgroundColorSpansSubject $r3;

        r0 := @parameter0: android.text.Spanned;

        r1 := @parameter1: com.google.common.truth.FailureMetadata;

        r2 := @parameter2: java.util.List;

        $r3 = new androidx.media3.test.utils.truth.SpannedSubject$BackgroundColorSpansSubject;

        specialinvoke $r3.<androidx.media3.test.utils.truth.SpannedSubject$BackgroundColorSpansSubject: void <init>(com.google.common.truth.FailureMetadata,java.util.List,android.text.Spanned,androidx.media3.test.utils.truth.SpannedSubject$1)>(r1, r2, r0, null);

        return $r3;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$ForegroundColorSpansSubject lambda$foregroundColorSpans$6(android.text.Spanned, com.google.common.truth.FailureMetadata, java.util.List)
    {
        android.text.Spanned r0;
        com.google.common.truth.FailureMetadata r1;
        java.util.List r2;
        androidx.media3.test.utils.truth.SpannedSubject$ForegroundColorSpansSubject $r3;

        r0 := @parameter0: android.text.Spanned;

        r1 := @parameter1: com.google.common.truth.FailureMetadata;

        r2 := @parameter2: java.util.List;

        $r3 = new androidx.media3.test.utils.truth.SpannedSubject$ForegroundColorSpansSubject;

        specialinvoke $r3.<androidx.media3.test.utils.truth.SpannedSubject$ForegroundColorSpansSubject: void <init>(com.google.common.truth.FailureMetadata,java.util.List,android.text.Spanned,androidx.media3.test.utils.truth.SpannedSubject$1)>(r1, r2, r0, null);

        return $r3;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$5(int)
    {
        int i0;
        androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags $r0;

        i0 := @parameter0: int;

        $r0 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ALREADY_FAILED_AND_FLAGS>;

        return $r0;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$AlignmentSpansSubject lambda$alignmentSpans$4(android.text.Spanned, com.google.common.truth.FailureMetadata, java.util.List)
    {
        android.text.Spanned r0;
        com.google.common.truth.FailureMetadata r1;
        java.util.List r2;
        androidx.media3.test.utils.truth.SpannedSubject$AlignmentSpansSubject $r3;

        r0 := @parameter0: android.text.Spanned;

        r1 := @parameter1: com.google.common.truth.FailureMetadata;

        r2 := @parameter2: java.util.List;

        $r3 = new androidx.media3.test.utils.truth.SpannedSubject$AlignmentSpansSubject;

        specialinvoke $r3.<androidx.media3.test.utils.truth.SpannedSubject$AlignmentSpansSubject: void <init>(com.google.common.truth.FailureMetadata,java.util.List,android.text.Spanned,androidx.media3.test.utils.truth.SpannedSubject$1)>(r1, r2, r0, null);

        return $r3;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$3(android.text.Layout$Alignment)
    {
        android.text.Layout$Alignment r0;
        androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags $r1;

        r0 := @parameter0: android.text.Layout$Alignment;

        $r1 = <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ALREADY_FAILED_AND_FLAGS>;

        return $r1;
    }

    private static androidx.media3.test.utils.truth.SpannedSubject$SpanFlagsSubject lambda$spanFlags$2(com.google.common.truth.FailureMetadata, java.util.List)
    {
        com.google.common.truth.FailureMetadata r0;
        java.util.List r1;
        androidx.media3.test.utils.truth.SpannedSubject$SpanFlagsSubject $r2;

        r0 := @parameter0: com.google.common.truth.FailureMetadata;

        r1 := @parameter1: java.util.List;

        $r2 = new androidx.media3.test.utils.truth.SpannedSubject$SpanFlagsSubject;

        specialinvoke $r2.<androidx.media3.test.utils.truth.SpannedSubject$SpanFlagsSubject: void <init>(com.google.common.truth.FailureMetadata,java.util.List,androidx.media3.test.utils.truth.SpannedSubject$1)>(r0, r1, null);

        return $r2;
    }

    private static void lambda$static$1(int)
    {
        int i0;

        i0 := @parameter0: int;

        return;
    }

    private static void lambda$static$0(int)
    {
        int i0;

        i0 := @parameter0: int;

        return;
    }

    static com.google.common.truth.Subject$Factory access$000()
    {
        com.google.common.truth.Subject$Factory $r0;

        $r0 = staticinvoke <androidx.media3.test.utils.truth.SpannedSubject: com.google.common.truth.Subject$Factory spanFlags()>();

        return $r0;
    }

    static void <clinit>()
    {
        androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags $r0;
        androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags $r1;
        androidx.media3.test.utils.truth.SpannedSubject$Aligned $r2;
        androidx.media3.test.utils.truth.SpannedSubject$Colored $r3;
        androidx.media3.test.utils.truth.SpannedSubject$Typefaced $r4;
        androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSized $r5;
        androidx.media3.test.utils.truth.SpannedSubject$RelativeSized $r6;
        androidx.media3.test.utils.truth.SpannedSubject$RubyText $r7;
        androidx.media3.test.utils.truth.SpannedSubject$EmphasizedText $r8;

        $r0 = dynamicinvoke "andFlags" <androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: void lambda$static$0(int)>, methodtype: void __METHODTYPE__(int));

        <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags ALREADY_FAILED_AND_FLAGS> = $r0;

        $r1 = dynamicinvoke "withFlags" <androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(int), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: void lambda$static$1(int)>, methodtype: void __METHODTYPE__(int));

        <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$WithSpanFlags ALREADY_FAILED_WITH_FLAGS> = $r1;

        $r2 = dynamicinvoke "withAlignment" <androidx.media3.test.utils.truth.SpannedSubject$Aligned ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(android.text.Layout$Alignment), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$3(android.text.Layout$Alignment)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(android.text.Layout$Alignment));

        <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Aligned ALREADY_FAILED_ALIGNED> = $r2;

        $r3 = dynamicinvoke "withColor" <androidx.media3.test.utils.truth.SpannedSubject$Colored ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(int), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$5(int)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(int));

        <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Colored ALREADY_FAILED_COLORED> = $r3;

        $r4 = dynamicinvoke "withFamily" <androidx.media3.test.utils.truth.SpannedSubject$Typefaced ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(java.lang.String), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$8(java.lang.String)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(java.lang.String));

        <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$Typefaced ALREADY_FAILED_TYPEFACED> = $r4;

        $r5 = dynamicinvoke "withAbsoluteSize" <androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSized ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(int), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$10(int)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(int));

        <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AbsoluteSized ALREADY_FAILED_ABSOLUTE_SIZED> = $r5;

        $r6 = dynamicinvoke "withSizeChange" <androidx.media3.test.utils.truth.SpannedSubject$RelativeSized ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(float), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$12(float)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(float));

        <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RelativeSized ALREADY_FAILED_RELATIVE_SIZED> = $r6;

        $r7 = dynamicinvoke "withTextAndPosition" <androidx.media3.test.utils.truth.SpannedSubject$RubyText ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(java.lang.String,int), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$14(java.lang.String,int)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(java.lang.String,int));

        <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$RubyText ALREADY_FAILED_WITH_TEXT> = $r7;

        $r8 = dynamicinvoke "withMarkAndPosition" <androidx.media3.test.utils.truth.SpannedSubject$EmphasizedText ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(int,int,int), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags lambda$static$16(int,int,int)>, methodtype: androidx.media3.test.utils.truth.SpannedSubject$AndSpanFlags __METHODTYPE__(int,int,int));

        <androidx.media3.test.utils.truth.SpannedSubject: androidx.media3.test.utils.truth.SpannedSubject$EmphasizedText ALREADY_FAILED_WITH_MARK_AND_POSITION> = $r8;

        return;
    }

