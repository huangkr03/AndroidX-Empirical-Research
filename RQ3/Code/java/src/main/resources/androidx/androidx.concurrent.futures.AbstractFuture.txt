androidx.concurrent.futures.AbstractFuture
<androidx.concurrent.futures.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>
<androidx.concurrent.futures.AbstractFuture: java.util.logging.Logger log>
<androidx.concurrent.futures.AbstractFuture: long SPIN_THRESHOLD_NANOS>
<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>
<androidx.concurrent.futures.AbstractFuture: java.lang.Object NULL>
<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>
<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Listener listeners>
<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Waiter waiters>
    private void removeWaiter(androidx.concurrent.futures.AbstractFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractFuture r0;
        androidx.concurrent.futures.AbstractFuture$Waiter r1, r2, r6, r7, $r8;
        java.lang.Thread $r3, $r5;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r4;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$Waiter;

        r1.<androidx.concurrent.futures.AbstractFuture$Waiter: java.lang.Thread thread> = null;

     label1:
        r6 = null;

        r7 = r0.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Waiter waiters>;

        $r8 = <androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter TOMBSTONE>;

        if r7 != $r8 goto label2;

        return;

     label2:
        if r7 == null goto label6;

        r2 = r7.<androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter next>;

        $r3 = r7.<androidx.concurrent.futures.AbstractFuture$Waiter: java.lang.Thread thread>;

        if $r3 == null goto label3;

        r6 = r7;

        goto label5;

     label3:
        if r6 == null goto label4;

        r6.<androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter next> = r2;

        $r5 = r6.<androidx.concurrent.futures.AbstractFuture$Waiter: java.lang.Thread thread>;

        if $r5 != null goto label5;

        goto label1;

     label4:
        $r4 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r4.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casWaiters(androidx.concurrent.futures.AbstractFuture,androidx.concurrent.futures.AbstractFuture$Waiter,androidx.concurrent.futures.AbstractFuture$Waiter)>(r0, r7, r2);

        if $z0 != 0 goto label5;

        goto label1;

     label5:
        r7 = r2;

        goto label2;

     label6:
        return;
    }

    protected void <init>()
    {
        androidx.concurrent.futures.AbstractFuture r0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException
    {
        androidx.concurrent.futures.AbstractFuture r0;
        long l0, l1, l2, l3, l4, l5, $l8, $l10, $l14, $l15, $l17, l18, $l19;
        java.util.concurrent.TimeUnit r1, $r26;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        byte $b6, $b7, $b9, $b11, $b12, $b13, $b16, $b20;
        java.lang.String $r2, $r8, $r10, $r17, $r22, r62, r63, r64, r65, r66;
        java.util.Locale $r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r11, $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44;
        java.util.concurrent.TimeoutException $r12, $r18;
        java.lang.InterruptedException $r45, $r54, $r56;
        java.lang.Object $r46, $r48, $r49, $r53, $r55, r57, r60, r61;
        androidx.concurrent.futures.AbstractFuture$Waiter $r47, $r50, $r52, r58, r59;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r51;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        l18 = l1;

        $z1 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z1 == 0 goto label01;

        $r56 = new java.lang.InterruptedException;

        specialinvoke $r56.<java.lang.InterruptedException: void <init>()>();

        throw $r56;

     label01:
        r57 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if r57 == null goto label02;

        $z8 = 1;

        goto label03;

     label02:
        $z8 = 0;

     label03:
        $z2 = r57 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z2 != 0 goto label04;

        $z9 = 1;

        goto label05;

     label04:
        $z9 = 0;

     label05:
        $z10 = $z8 & $z9;

        if $z10 == 0 goto label06;

        $r55 = specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r57);

        return $r55;

     label06:
        $b6 = l18 cmp 0L;

        if $b6 <= 0 goto label07;

        $l17 = staticinvoke <java.lang.System: long nanoTime()>();

        $l19 = $l17 + l18;

        goto label08;

     label07:
        $l19 = 0L;

     label08:
        l2 = $l19;

        $b7 = l18 cmp 1000L;

        if $b7 < 0 goto label19;

        r58 = r0.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Waiter waiters>;

        $r47 = <androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter TOMBSTONE>;

        if r58 == $r47 goto label18;

        $r50 = new androidx.concurrent.futures.AbstractFuture$Waiter;

        specialinvoke $r50.<androidx.concurrent.futures.AbstractFuture$Waiter: void <init>()>();

        r59 = $r50;

     label09:
        virtualinvoke r59.<androidx.concurrent.futures.AbstractFuture$Waiter: void setNext(androidx.concurrent.futures.AbstractFuture$Waiter)>(r58);

        $r51 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z5 = virtualinvoke $r51.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casWaiters(androidx.concurrent.futures.AbstractFuture,androidx.concurrent.futures.AbstractFuture$Waiter,androidx.concurrent.futures.AbstractFuture$Waiter)>(r0, r58, r59);

        if $z5 == 0 goto label17;

     label10:
        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l18);

        $z6 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z6 == 0 goto label11;

        specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: void removeWaiter(androidx.concurrent.futures.AbstractFuture$Waiter)>(r59);

        $r54 = new java.lang.InterruptedException;

        specialinvoke $r54.<java.lang.InterruptedException: void <init>()>();

        throw $r54;

     label11:
        r60 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if r60 == null goto label12;

        $z11 = 1;

        goto label13;

     label12:
        $z11 = 0;

     label13:
        $z7 = r60 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z7 != 0 goto label14;

        $z12 = 1;

        goto label15;

     label14:
        $z12 = 0;

     label15:
        $z13 = $z11 & $z12;

        if $z13 == 0 goto label16;

        $r53 = specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r60);

        return $r53;

     label16:
        $l15 = staticinvoke <java.lang.System: long nanoTime()>();

        l18 = l2 - $l15;

        $b16 = l18 cmp 1000L;

        if $b16 >= 0 goto label10;

        specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: void removeWaiter(androidx.concurrent.futures.AbstractFuture$Waiter)>(r59);

        goto label19;

     label17:
        r58 = r0.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Waiter waiters>;

        $r52 = <androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter TOMBSTONE>;

        if r58 != $r52 goto label09;

     label18:
        $r48 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        $r49 = specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>($r48);

        return $r49;

     label19:
        $b20 = l18 cmp 0L;

        if $b20 <= 0 goto label26;

        r61 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if r61 == null goto label20;

        $z14 = 1;

        goto label21;

     label20:
        $z14 = 0;

     label21:
        $z3 = r61 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z3 != 0 goto label22;

        $z15 = 1;

        goto label23;

     label22:
        $z15 = 0;

     label23:
        $z16 = $z14 & $z15;

        if $z16 == 0 goto label24;

        $r46 = specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r61);

        return $r46;

     label24:
        $z4 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z4 == 0 goto label25;

        $r45 = new java.lang.InterruptedException;

        specialinvoke $r45.<java.lang.InterruptedException: void <init>()>();

        throw $r45;

     label25:
        $l14 = staticinvoke <java.lang.System: long nanoTime()>();

        l18 = l2 - $l14;

        goto label19;

     label26:
        r62 = virtualinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.String toString()>();

        $r2 = virtualinvoke r1.<java.util.concurrent.TimeUnit: java.lang.String toString()>();

        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        r63 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waited ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke r1.<java.util.concurrent.TimeUnit: java.lang.String toString()>();

        $r9 = <java.util.Locale: java.util.Locale ROOT>;

        $r10 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r64 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $l8 = l18 + 1000L;

        $b9 = $l8 cmp 0L;

        if $b9 >= 0 goto label33;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (plus ");

        r65 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        l3 = neg l18;

        $r26 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l4 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l3, $r26);

        $l10 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l4);

        l5 = l3 - $l10;

        $b11 = l4 cmp 0L;

        if $b11 == 0 goto label27;

        $b13 = l5 cmp 1000L;

        if $b13 <= 0 goto label28;

     label27:
        $z17 = 1;

        goto label29;

     label28:
        $z17 = 0;

     label29:
        z0 = $z17;

        $b12 = l4 cmp 0L;

        if $b12 <= 0 goto label31;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r65);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r63);

        r66 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        if z0 == 0 goto label30;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r66);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        r66 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

     label30:
        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r66);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r65 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

     label31:
        if z0 == 0 goto label32;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r65);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nanoseconds ");

        r65 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

     label32:
        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r65);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delay)");

        r64 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

     label33:
        $z18 = virtualinvoke r0.<androidx.concurrent.futures.AbstractFuture: boolean isDone()>();

        if $z18 == 0 goto label34;

        $r18 = new java.util.concurrent.TimeoutException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but future completed as timeout expired");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label34:
        $r12 = new java.util.concurrent.TimeoutException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r17);

        throw $r12;
    }

    public final java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        androidx.concurrent.futures.AbstractFuture r0;
        androidx.concurrent.futures.AbstractFuture$Waiter r1, $r2, $r5, $r7, r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object $r3, $r4, $r8, $r10, r12, r14;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r6;
        java.lang.InterruptedException $r9, $r11;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label01;

        $r11 = new java.lang.InterruptedException;

        specialinvoke $r11.<java.lang.InterruptedException: void <init>()>();

        throw $r11;

     label01:
        r12 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if r12 == null goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        $z1 = r12 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z1 != 0 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        $z7 = $z5 & $z6;

        if $z7 == 0 goto label06;

        $r10 = specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r12);

        return $r10;

     label06:
        r13 = r0.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Waiter waiters>;

        $r2 = <androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter TOMBSTONE>;

        if r13 == $r2 goto label15;

        $r5 = new androidx.concurrent.futures.AbstractFuture$Waiter;

        specialinvoke $r5.<androidx.concurrent.futures.AbstractFuture$Waiter: void <init>()>();

        r1 = $r5;

     label07:
        virtualinvoke r1.<androidx.concurrent.futures.AbstractFuture$Waiter: void setNext(androidx.concurrent.futures.AbstractFuture$Waiter)>(r13);

        $r6 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z2 = virtualinvoke $r6.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casWaiters(androidx.concurrent.futures.AbstractFuture,androidx.concurrent.futures.AbstractFuture$Waiter,androidx.concurrent.futures.AbstractFuture$Waiter)>(r0, r13, r1);

        if $z2 == 0 goto label14;

     label08:
        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        $z3 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z3 == 0 goto label09;

        specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: void removeWaiter(androidx.concurrent.futures.AbstractFuture$Waiter)>(r1);

        $r9 = new java.lang.InterruptedException;

        specialinvoke $r9.<java.lang.InterruptedException: void <init>()>();

        throw $r9;

     label09:
        r14 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if r14 == null goto label10;

        $z8 = 1;

        goto label11;

     label10:
        $z8 = 0;

     label11:
        $z4 = r14 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z4 != 0 goto label12;

        $z9 = 1;

        goto label13;

     label12:
        $z9 = 0;

     label13:
        $z10 = $z8 & $z9;

        if $z10 == 0 goto label08;

        $r8 = specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>(r14);

        return $r8;

     label14:
        r13 = r0.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Waiter waiters>;

        $r7 = <androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter TOMBSTONE>;

        if r13 != $r7 goto label07;

     label15:
        $r3 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        $r4 = specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)>($r3);

        return $r4;
    }

    private java.lang.Object getDoneValue(java.lang.Object) throws java.util.concurrent.ExecutionException
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.Object r1, r2, $r3;
        boolean $z0, $z1;
        java.util.concurrent.ExecutionException $r4;
        androidx.concurrent.futures.AbstractFuture$Failure $r5;
        java.lang.Throwable $r6, $r8;
        androidx.concurrent.futures.AbstractFuture$Cancellation $r7;
        java.util.concurrent.CancellationException $r9;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.concurrent.futures.AbstractFuture$Cancellation;

        if $z0 == 0 goto label1;

        $r7 = (androidx.concurrent.futures.AbstractFuture$Cancellation) r1;

        $r8 = $r7.<androidx.concurrent.futures.AbstractFuture$Cancellation: java.lang.Throwable cause>;

        $r9 = staticinvoke <androidx.concurrent.futures.AbstractFuture: java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable)>("Task was cancelled.", $r8);

        throw $r9;

     label1:
        $z1 = r1 instanceof androidx.concurrent.futures.AbstractFuture$Failure;

        if $z1 == 0 goto label2;

        $r4 = new java.util.concurrent.ExecutionException;

        $r5 = (androidx.concurrent.futures.AbstractFuture$Failure) r1;

        $r6 = $r5.<androidx.concurrent.futures.AbstractFuture$Failure: java.lang.Throwable exception>;

        specialinvoke $r4.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r6);

        throw $r4;

     label2:
        $r3 = <androidx.concurrent.futures.AbstractFuture: java.lang.Object NULL>;

        if r1 != $r3 goto label3;

        return null;

     label3:
        r2 = r1;

        return r2;
    }

    public final boolean isDone()
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $z0 = r1 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z0 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        $z3 = $z1 & $z2;

        return $z3;
    }

    public final boolean isCancelled()
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        $z0 = r1 instanceof androidx.concurrent.futures.AbstractFuture$Cancellation;

        return $z0;
    }

    public final boolean cancel(boolean)
    {
        androidx.concurrent.futures.AbstractFuture r0, r3, r9;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, z10, $z11, $z12, $z13;
        androidx.concurrent.futures.AbstractFuture$Cancellation r1, $r5, $r8;
        com.google.common.util.concurrent.ListenableFuture r2;
        androidx.concurrent.futures.AbstractFuture$SetFuture $r4;
        java.util.concurrent.CancellationException $r6;
        java.lang.Object r7;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r10;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        z0 := @parameter0: boolean;

        r7 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        z10 = 0;

        if r7 != null goto label01;

        $z11 = 1;

        goto label02;

     label01:
        $z11 = 0;

     label02:
        $z1 = r7 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        $z2 = $z11 | $z1;

        if $z2 == 0 goto label14;

        $z3 = <androidx.concurrent.futures.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>;

        if $z3 == 0 goto label03;

        $r5 = new androidx.concurrent.futures.AbstractFuture$Cancellation;

        $r8 = $r5;

        $r6 = new java.util.concurrent.CancellationException;

        specialinvoke $r6.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Future.cancel() was called.");

        specialinvoke $r5.<androidx.concurrent.futures.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(z0, $r6);

        goto label05;

     label03:
        if z0 == 0 goto label04;

        $r8 = <androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED>;

        goto label05;

     label04:
        $r8 = <androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_CANCELLED>;

     label05:
        r1 = $r8;

        r9 = r0;

     label06:
        $r10 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z12 = virtualinvoke $r10.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractFuture,java.lang.Object,java.lang.Object)>(r9, r7, r1);

        if $z12 == 0 goto label13;

        z10 = 1;

        if z0 == 0 goto label07;

        virtualinvoke r9.<androidx.concurrent.futures.AbstractFuture: void interruptTask()>();

     label07:
        staticinvoke <androidx.concurrent.futures.AbstractFuture: void complete(androidx.concurrent.futures.AbstractFuture)>(r9);

        $z5 = r7 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z5 == 0 goto label14;

        $r4 = (androidx.concurrent.futures.AbstractFuture$SetFuture) r7;

        r2 = $r4.<androidx.concurrent.futures.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        $z6 = r2 instanceof androidx.concurrent.futures.AbstractFuture;

        if $z6 == 0 goto label11;

        r3 = (androidx.concurrent.futures.AbstractFuture) r2;

        r7 = r3.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if r7 != null goto label08;

        $z13 = 1;

        goto label09;

     label08:
        $z13 = 0;

     label09:
        $z8 = r7 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        $z9 = $z13 | $z8;

        if $z9 == 0 goto label10;

        r9 = r3;

        goto label06;

     label10:
        goto label12;

     label11:
        interfaceinvoke r2.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>(z0);

     label12:
        goto label14;

     label13:
        r7 = r9.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        $z4 = r7 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z4 != 0 goto label06;

        goto label14;

     label14:
        return z10;
    }

    protected void interruptTask()
    {
        androidx.concurrent.futures.AbstractFuture r0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        return;
    }

    protected final boolean wasInterrupted()
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        androidx.concurrent.futures.AbstractFuture$Cancellation $r2;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        $z0 = r1 instanceof androidx.concurrent.futures.AbstractFuture$Cancellation;

        if $z0 == 0 goto label1;

        $r2 = (androidx.concurrent.futures.AbstractFuture$Cancellation) r1;

        $z1 = $r2.<androidx.concurrent.futures.AbstractFuture$Cancellation: boolean wasInterrupted>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final void addListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.Runnable r1;
        java.util.concurrent.Executor r2;
        androidx.concurrent.futures.AbstractFuture$Listener r3, $r6, $r7, $r9, r10;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r8;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.util.concurrent.Executor;

        staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r10 = r0.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Listener listeners>;

        $r6 = <androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener TOMBSTONE>;

        if r10 == $r6 goto label3;

        $r7 = new androidx.concurrent.futures.AbstractFuture$Listener;

        specialinvoke $r7.<androidx.concurrent.futures.AbstractFuture$Listener: void <init>(java.lang.Runnable,java.util.concurrent.Executor)>(r1, r2);

        r3 = $r7;

     label1:
        r3.<androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener next> = r10;

        $r8 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r8.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casListeners(androidx.concurrent.futures.AbstractFuture,androidx.concurrent.futures.AbstractFuture$Listener,androidx.concurrent.futures.AbstractFuture$Listener)>(r0, r10, r3);

        if $z0 == 0 goto label2;

        return;

     label2:
        r10 = r0.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Listener listeners>;

        $r9 = <androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener TOMBSTONE>;

        if r10 != $r9 goto label1;

     label3:
        staticinvoke <androidx.concurrent.futures.AbstractFuture: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>(r1, r2);

        return;
    }

    protected boolean set(java.lang.Object)
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.Object r1, r2, $r4;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r3;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r4 = <androidx.concurrent.futures.AbstractFuture: java.lang.Object NULL>;

        goto label2;

     label1:
        $r4 = r1;

     label2:
        r2 = $r4;

        $r3 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r3.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, null, r2);

        if $z0 == 0 goto label3;

        staticinvoke <androidx.concurrent.futures.AbstractFuture: void complete(androidx.concurrent.futures.AbstractFuture)>(r0);

        return 1;

     label3:
        return 0;
    }

    protected boolean setException(java.lang.Throwable)
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.Throwable r1, $r5;
        androidx.concurrent.futures.AbstractFuture$Failure r2, $r3;
        java.lang.Object $r4;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r6;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: java.lang.Throwable;

        $r3 = new androidx.concurrent.futures.AbstractFuture$Failure;

        $r4 = staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (java.lang.Throwable) $r4;

        specialinvoke $r3.<androidx.concurrent.futures.AbstractFuture$Failure: void <init>(java.lang.Throwable)>($r5);

        r2 = $r3;

        $r6 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z0 = virtualinvoke $r6.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, null, r2);

        if $z0 == 0 goto label1;

        staticinvoke <androidx.concurrent.futures.AbstractFuture: void complete(androidx.concurrent.futures.AbstractFuture)>(r0);

        return 1;

     label1:
        return 0;
    }

    protected boolean setFuture(com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.concurrent.futures.AbstractFuture r0;
        com.google.common.util.concurrent.ListenableFuture r1;
        java.lang.Throwable r2, $r9, $r12, r17;
        boolean $z0, $z1, $z3, $z4, $z5;
        androidx.concurrent.futures.AbstractFuture$Cancellation $r4;
        androidx.concurrent.futures.AbstractFuture$SetFuture $r5, r15;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r6, $r8, $r11;
        androidx.concurrent.futures.DirectExecutor $r7;
        androidx.concurrent.futures.AbstractFuture$Failure $r10, r16;
        java.lang.Object r13, r14;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r13 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if r13 != null goto label12;

        $z3 = interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: boolean isDone()>();

        if $z3 == 0 goto label02;

        r14 = staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>(r1);

        $r8 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z5 = virtualinvoke $r8.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, null, r14);

        if $z5 == 0 goto label01;

        staticinvoke <androidx.concurrent.futures.AbstractFuture: void complete(androidx.concurrent.futures.AbstractFuture)>(r0);

        return 1;

     label01:
        return 0;

     label02:
        $r5 = new androidx.concurrent.futures.AbstractFuture$SetFuture;

        specialinvoke $r5.<androidx.concurrent.futures.AbstractFuture$SetFuture: void <init>(androidx.concurrent.futures.AbstractFuture,com.google.common.util.concurrent.ListenableFuture)>(r0, r1);

        r15 = $r5;

        $r6 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z4 = virtualinvoke $r6.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, null, r15);

        if $z4 == 0 goto label11;

     label03:
        $r7 = <androidx.concurrent.futures.DirectExecutor: androidx.concurrent.futures.DirectExecutor INSTANCE>;

        interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r15, $r7);

     label04:
        goto label10;

     label05:
        $r9 := @caughtexception;

        r2 = $r9;

     label06:
        $r10 = new androidx.concurrent.futures.AbstractFuture$Failure;

        specialinvoke $r10.<androidx.concurrent.futures.AbstractFuture$Failure: void <init>(java.lang.Throwable)>(r2);

        r16 = $r10;

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

        r17 = $r12;

        r16 = <androidx.concurrent.futures.AbstractFuture$Failure: androidx.concurrent.futures.AbstractFuture$Failure FALLBACK_INSTANCE>;

     label09:
        $r11 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        virtualinvoke $r11.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractFuture,java.lang.Object,java.lang.Object)>(r0, r15, r16);

     label10:
        return 1;

     label11:
        r13 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

     label12:
        $z0 = r13 instanceof androidx.concurrent.futures.AbstractFuture$Cancellation;

        if $z0 == 0 goto label13;

        $r4 = (androidx.concurrent.futures.AbstractFuture$Cancellation) r13;

        $z1 = $r4.<androidx.concurrent.futures.AbstractFuture$Cancellation: boolean wasInterrupted>;

        interfaceinvoke r1.<com.google.common.util.concurrent.ListenableFuture: boolean cancel(boolean)>($z1);

     label13:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
    }

    static java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)
    {
        com.google.common.util.concurrent.ListenableFuture r0;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6;
        androidx.concurrent.futures.AbstractFuture$Cancellation $r1, r19, $r20, r26, r31;
        androidx.concurrent.futures.AbstractFuture $r2;
        java.lang.Throwable $r3, $r4, $r5, $r13, $r15, $r17, r23, r24, r25;
        java.lang.StringBuilder $r10, $r11, r28;
        java.lang.String $r12;
        java.lang.Object r18, r21, $r22;
        androidx.concurrent.futures.AbstractFuture$Failure r27, r30, r32;
        java.lang.IllegalArgumentException r29;
        java.util.concurrent.Future r33;
        java.util.concurrent.ExecutionException r34;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        $z0 = r0 instanceof androidx.concurrent.futures.AbstractFuture;

        if $z0 == 0 goto label04;

        $r2 = (androidx.concurrent.futures.AbstractFuture) r0;

        r18 = $r2.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        $z3 = r18 instanceof androidx.concurrent.futures.AbstractFuture$Cancellation;

        if $z3 == 0 goto label03;

        r19 = (androidx.concurrent.futures.AbstractFuture$Cancellation) r18;

        $z4 = r19.<androidx.concurrent.futures.AbstractFuture$Cancellation: boolean wasInterrupted>;

        if $z4 == 0 goto label03;

        $r3 = r19.<androidx.concurrent.futures.AbstractFuture$Cancellation: java.lang.Throwable cause>;

        if $r3 == null goto label01;

        r26 = new androidx.concurrent.futures.AbstractFuture$Cancellation;

        $r20 = r26;

        $r4 = r19.<androidx.concurrent.futures.AbstractFuture$Cancellation: java.lang.Throwable cause>;

        specialinvoke r26.<androidx.concurrent.futures.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, $r4);

        goto label02;

     label01:
        $r20 = <androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_CANCELLED>;

     label02:
        r18 = $r20;

     label03:
        return r18;

     label04:
        z5 = interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: boolean isCancelled()>();

        $z1 = <androidx.concurrent.futures.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>;

        if $z1 != 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        $z2 = $z6 & z5;

        if $z2 == 0 goto label07;

        $r1 = <androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_CANCELLED>;

        return $r1;

     label07:
        r33 = (java.util.concurrent.Future) r0;

        r21 = staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>(r33);

        if r21 != null goto label08;

        $r22 = <androidx.concurrent.futures.AbstractFuture: java.lang.Object NULL>;

        goto label09;

     label08:
        $r22 = r21;

     label09:
        return $r22;

     label10:
        $r15 := @caughtexception;

        r23 = $r15;

        r27 = new androidx.concurrent.futures.AbstractFuture$Failure;

        r34 = (java.util.concurrent.ExecutionException) r23;

        $r17 = virtualinvoke r34.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke r27.<androidx.concurrent.futures.AbstractFuture$Failure: void <init>(java.lang.Throwable)>($r17);

        return r27;

     label11:
        $r5 := @caughtexception;

        r24 = $r5;

        if z5 != 0 goto label12;

        r30 = new androidx.concurrent.futures.AbstractFuture$Failure;

        r29 = new java.lang.IllegalArgumentException;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get() threw CancellationException, despite reporting isCancelled() == false: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r24);

        specialinvoke r30.<androidx.concurrent.futures.AbstractFuture$Failure: void <init>(java.lang.Throwable)>(r29);

        return r30;

     label12:
        r31 = new androidx.concurrent.futures.AbstractFuture$Cancellation;

        specialinvoke r31.<androidx.concurrent.futures.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, r24);

        return r31;

     label13:
        $r13 := @caughtexception;

        r25 = $r13;

        r32 = new androidx.concurrent.futures.AbstractFuture$Failure;

        specialinvoke r32.<androidx.concurrent.futures.AbstractFuture$Failure: void <init>(java.lang.Throwable)>(r25);

        return r32;

        catch java.util.concurrent.ExecutionException from label07 to label09 with label10;
        catch java.util.concurrent.CancellationException from label07 to label09 with label11;
        catch java.lang.Throwable from label07 to label09 with label13;
    }

    private static java.lang.Object getUninterruptibly(java.util.concurrent.Future) throws java.util.concurrent.ExecutionException
    {
        java.util.concurrent.Future r0;
        java.lang.Throwable r1, $r3, $r5, r7;
        java.lang.Thread $r2, $r4;
        boolean z0;
        java.lang.Object r6;

        r0 := @parameter0: java.util.concurrent.Future;

        z0 = 0;

     label1:
        r6 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        if z0 == 0 goto label3;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label3:
        return r6;

     label4:
        $r5 := @caughtexception;

        r7 = $r5;

        z0 = 1;

        goto label1;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

     label6:
        if z0 == 0 goto label7;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label7:
        throw r1;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    static void complete(androidx.concurrent.futures.AbstractFuture)
    {
        androidx.concurrent.futures.AbstractFuture$Listener r0, r9;
        java.lang.Runnable r1;
        androidx.concurrent.futures.AbstractFuture$SetFuture r2;
        java.lang.Object r3, $r5;
        boolean $z0, $z1;
        java.util.concurrent.Executor $r4;
        com.google.common.util.concurrent.ListenableFuture $r6;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r7;
        androidx.concurrent.futures.AbstractFuture r8;

        r8 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r9 = null;

     label1:
        specialinvoke r8.<androidx.concurrent.futures.AbstractFuture: void releaseWaiters()>();

        virtualinvoke r8.<androidx.concurrent.futures.AbstractFuture: void afterDone()>();

        r9 = specialinvoke r8.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Listener clearListeners(androidx.concurrent.futures.AbstractFuture$Listener)>(r9);

     label2:
        if r9 == null goto label6;

        r0 = r9;

        r9 = r9.<androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener next>;

        r1 = r0.<androidx.concurrent.futures.AbstractFuture$Listener: java.lang.Runnable task>;

        $z0 = r1 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z0 == 0 goto label4;

        r2 = (androidx.concurrent.futures.AbstractFuture$SetFuture) r1;

        r8 = r2.<androidx.concurrent.futures.AbstractFuture$SetFuture: androidx.concurrent.futures.AbstractFuture owner>;

        $r5 = r8.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if $r5 != r2 goto label3;

        $r6 = r2.<androidx.concurrent.futures.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        r3 = staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>($r6);

        $r7 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $z1 = virtualinvoke $r7.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractFuture,java.lang.Object,java.lang.Object)>(r8, r2, r3);

        if $z1 == 0 goto label3;

        goto label1;

     label3:
        goto label5;

     label4:
        $r4 = r0.<androidx.concurrent.futures.AbstractFuture$Listener: java.util.concurrent.Executor executor>;

        staticinvoke <androidx.concurrent.futures.AbstractFuture: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>(r1, $r4);

     label5:
        goto label2;

     label6:
        return;
    }

    protected void afterDone()
    {
        androidx.concurrent.futures.AbstractFuture r0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        return;
    }

    final void maybePropagateCancellationTo(java.util.concurrent.Future)
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.util.concurrent.Future r1;
        boolean $z0, $z1, $z2, $z4;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: java.util.concurrent.Future;

        if r1 == null goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $z0 = virtualinvoke r0.<androidx.concurrent.futures.AbstractFuture: boolean isCancelled()>();

        $z1 = $z4 & $z0;

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<androidx.concurrent.futures.AbstractFuture: boolean wasInterrupted()>();

        interfaceinvoke r1.<java.util.concurrent.Future: boolean cancel(boolean)>($z2);

     label3:
        return;
    }

    private void releaseWaiters()
    {
        androidx.concurrent.futures.AbstractFuture r0;
        androidx.concurrent.futures.AbstractFuture$Waiter r1, $r2, r4;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r3;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

     label1:
        r1 = r0.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Waiter waiters>;

        $r3 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $r2 = <androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter TOMBSTONE>;

        $z0 = virtualinvoke $r3.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casWaiters(androidx.concurrent.futures.AbstractFuture,androidx.concurrent.futures.AbstractFuture$Waiter,androidx.concurrent.futures.AbstractFuture$Waiter)>(r0, r1, $r2);

        if $z0 == 0 goto label1;

        r4 = r1;

     label2:
        if r4 == null goto label3;

        virtualinvoke r4.<androidx.concurrent.futures.AbstractFuture$Waiter: void unpark()>();

        r4 = r4.<androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter next>;

        goto label2;

     label3:
        return;
    }

    private androidx.concurrent.futures.AbstractFuture$Listener clearListeners(androidx.concurrent.futures.AbstractFuture$Listener)
    {
        androidx.concurrent.futures.AbstractFuture r0;
        androidx.concurrent.futures.AbstractFuture$Listener r1, r2, $r3, r5, r6;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r4;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$Listener;

     label1:
        r5 = r0.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Listener listeners>;

        $r4 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $r3 = <androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener TOMBSTONE>;

        $z0 = virtualinvoke $r4.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casListeners(androidx.concurrent.futures.AbstractFuture,androidx.concurrent.futures.AbstractFuture$Listener,androidx.concurrent.futures.AbstractFuture$Listener)>(r0, r5, $r3);

        if $z0 == 0 goto label1;

        r6 = r1;

     label2:
        if r5 == null goto label3;

        r2 = r5;

        r5 = r5.<androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener next>;

        r2.<androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener next> = r6;

        r6 = r2;

        goto label2;

     label3:
        return r6;
    }

    public java.lang.String toString()
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.StringBuilder r1, $r3, $r5, $r7, $r8, $r12, $r13, $r15, $r17;
        java.lang.Throwable r2, $r11;
        java.lang.String $r4, r16, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r14;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[status=");

        $z0 = virtualinvoke r0.<androidx.concurrent.futures.AbstractFuture: boolean isCancelled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CANCELLED");

        goto label8;

     label1:
        $z1 = virtualinvoke r0.<androidx.concurrent.futures.AbstractFuture: boolean isDone()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: void addDoneString(java.lang.StringBuilder)>(r1);

        goto label8;

     label2:
        r16 = virtualinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.String pendingToString()>();

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r2 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown from implementation: ");

        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        if r16 == null goto label6;

        $z3 = virtualinvoke r16.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label6;

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PENDING, info=[");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label8;

     label6:
        $z2 = virtualinvoke r0.<androidx.concurrent.futures.AbstractFuture: boolean isDone()>();

        if $z2 == 0 goto label7;

        specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: void addDoneString(java.lang.StringBuilder)>(r1);

        goto label8;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PENDING");

     label8:
        $r17 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    protected java.lang.String pendingToString()
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r9, $r10, $r14, $r15;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.ScheduledFuture $r5;
        long $l0;
        java.lang.String $r8, $r13, $r16;
        androidx.concurrent.futures.AbstractFuture$SetFuture $r11;
        com.google.common.util.concurrent.ListenableFuture $r12;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 = r0.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        $z0 = r1 instanceof androidx.concurrent.futures.AbstractFuture$SetFuture;

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setFuture=[");

        $r11 = (androidx.concurrent.futures.AbstractFuture$SetFuture) r1;

        $r12 = $r11.<androidx.concurrent.futures.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        $r13 = specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.String userObjectToString(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label1:
        $z1 = r0 instanceof java.util.concurrent.ScheduledFuture;

        if $z1 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remaining delay=[");

        $r5 = (java.util.concurrent.ScheduledFuture) r0;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l0 = interfaceinvoke $r5.<java.util.concurrent.ScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>($r4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label2:
        return null;
    }

    private void addDoneString(java.lang.StringBuilder)
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.StringBuilder r1, $r2, $r4, $r9, $r11, $r14, $r16;
        java.lang.String $r3;
        java.lang.Throwable $r6, $r8, $r10, $r13, r19, r20, r21;
        java.lang.Class $r15;
        java.lang.Object r18;
        java.util.concurrent.Future r22;
        java.util.concurrent.ExecutionException r23;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: java.lang.StringBuilder;

     label1:
        r22 = (java.util.concurrent.Future) r0;

        r18 = staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>(r22);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SUCCESS, result=[");

        $r3 = specialinvoke r0.<androidx.concurrent.futures.AbstractFuture: java.lang.String userObjectToString(java.lang.Object)>(r18);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

        r19 = $r8;

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FAILURE, cause=[");

        r23 = (java.util.concurrent.ExecutionException) r19;

        $r10 = virtualinvoke r23.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        goto label6;

     label4:
        $r6 := @caughtexception;

        r20 = $r6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CANCELLED");

        goto label6;

     label5:
        $r13 := @caughtexception;

        r21 = $r13;

        $r14 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNKNOWN, cause=[");

        $r15 = virtualinvoke r21.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" thrown from get()]");

     label6:
        return;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
        catch java.util.concurrent.CancellationException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label1 to label2 with label5;
    }

    private java.lang.String userObjectToString(java.lang.Object)
    {
        androidx.concurrent.futures.AbstractFuture r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: androidx.concurrent.futures.AbstractFuture;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return "this future";

     label1:
        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        return $r2;
    }

    private static void executeListener(java.lang.Runnable, java.util.concurrent.Executor)
    {
        java.lang.Runnable r0;
        java.util.concurrent.Executor r1;
        java.lang.Throwable r2, $r3;
        java.lang.StringBuilder $r4, $r7, $r8, $r9, $r10;
        java.util.logging.Logger $r5;
        java.util.logging.Level $r6;
        java.lang.String $r11;

        r0 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: java.util.concurrent.Executor;

     label1:
        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r5 = <androidx.concurrent.futures.AbstractFuture: java.util.logging.Logger log>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RuntimeException while executing runnable ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with executor ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r6, $r11, r2);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private static java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;
        java.util.concurrent.CancellationException r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $r3 = new java.util.concurrent.CancellationException;

        specialinvoke $r3.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>(r0);

        r2 = $r3;

        virtualinvoke r2.<java.util.concurrent.CancellationException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

        return r2;
    }

    static void throwIfUnchecked(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0, $z1;
        java.lang.Error $r2;
        java.lang.RuntimeException $r3;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.RuntimeException) r0;

        throw $r3;

     label1:
        $z1 = r0 instanceof java.lang.Error;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.Error) r0;

        throw $r2;

     label2:
        return;
    }

    static java.lang.Object checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label1:
        return r0;
    }

    static void <clinit>()
    {
        java.lang.Throwable r0, $r11, $r13, r20, r21, r23;
        java.lang.String $r1, $r3;
        boolean $z0;
        java.lang.Class $r2, r24;
        java.util.logging.Logger $r4, $r8, $r10;
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper $r5;
        java.lang.Object $r6;
        java.util.logging.Level $r7, $r9;
        androidx.concurrent.futures.AbstractFuture$SynchronizedHelper $r12;
        androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper $r14;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r15, $r16, $r17, $r18, $r19;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper r22;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("guava.concurrent.generate_cancellation_cause", "false");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r1);

        <androidx.concurrent.futures.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES> = $z0;

        $r2 = class "Landroidx/concurrent/futures/AbstractFuture;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

        <androidx.concurrent.futures.AbstractFuture: java.util.logging.Logger log> = $r4;

        r20 = null;

        r21 = null;

     label1:
        $r5 = new androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper;

        specialinvoke $r5.<androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: void <init>()>();

        r22 = $r5;

     label2:
        goto label7;

     label3:
        $r13 := @caughtexception;

        r23 = $r13;

        r20 = r23;

     label4:
        $r14 = new androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper;

        $r15 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Landroidx/concurrent/futures/AbstractFuture$Waiter;", class "Ljava/lang/Thread;", "thread");

        $r16 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Landroidx/concurrent/futures/AbstractFuture$Waiter;", class "Landroidx/concurrent/futures/AbstractFuture$Waiter;", "next");

        $r17 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Landroidx/concurrent/futures/AbstractFuture;", class "Landroidx/concurrent/futures/AbstractFuture$Waiter;", "waiters");

        $r18 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Landroidx/concurrent/futures/AbstractFuture;", class "Landroidx/concurrent/futures/AbstractFuture$Listener;", "listeners");

        $r19 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Landroidx/concurrent/futures/AbstractFuture;", class "Ljava/lang/Object;", "value");

        specialinvoke $r14.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)>($r15, $r16, $r17, $r18, $r19);

        r22 = $r14;

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

        r0 = $r11;

        r21 = r0;

        $r12 = new androidx.concurrent.futures.AbstractFuture$SynchronizedHelper;

        specialinvoke $r12.<androidx.concurrent.futures.AbstractFuture$SynchronizedHelper: void <init>()>();

        r22 = $r12;

     label7:
        <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER> = r22;

        r24 = class "Ljava/util/concurrent/locks/LockSupport;";

        if r21 == null goto label8;

        $r8 = <androidx.concurrent.futures.AbstractFuture: java.util.logging.Logger log>;

        $r7 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r7, "UnsafeAtomicHelper is broken!", r20);

        $r10 = <androidx.concurrent.futures.AbstractFuture: java.util.logging.Logger log>;

        $r9 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r9, "SafeAtomicHelper is broken!", r21);

     label8:
        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        <androidx.concurrent.futures.AbstractFuture: java.lang.Object NULL> = $r6;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

androidx.concurrent.futures.AbstractFuture$1
androidx.concurrent.futures.AbstractFuture$AtomicHelper
    private void <init>()
    {
        androidx.concurrent.futures.AbstractFuture$AtomicHelper r0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$AtomicHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

<androidx.concurrent.futures.AbstractFuture$AtomicHelper: void putThread(androidx.concurrent.futures.AbstractFuture$Waiter,java.lang.Thread)>
<androidx.concurrent.futures.AbstractFuture$AtomicHelper: void putNext(androidx.concurrent.futures.AbstractFuture$Waiter,androidx.concurrent.futures.AbstractFuture$Waiter)>
<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casWaiters(androidx.concurrent.futures.AbstractFuture,androidx.concurrent.futures.AbstractFuture$Waiter,androidx.concurrent.futures.AbstractFuture$Waiter)>
<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casListeners(androidx.concurrent.futures.AbstractFuture,androidx.concurrent.futures.AbstractFuture$Listener,androidx.concurrent.futures.AbstractFuture$Listener)>
<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractFuture,java.lang.Object,java.lang.Object)>
    void <init>(androidx.concurrent.futures.AbstractFuture$1)
    {
        androidx.concurrent.futures.AbstractFuture$AtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture$1 r1;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$AtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$1;

        specialinvoke r0.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: void <init>()>();

        return;
    }

androidx.concurrent.futures.AbstractFuture$Cancellation
<androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED>
<androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_CANCELLED>
<androidx.concurrent.futures.AbstractFuture$Cancellation: boolean wasInterrupted>
<androidx.concurrent.futures.AbstractFuture$Cancellation: java.lang.Throwable cause>
    void <init>(boolean, java.lang.Throwable)
    {
        androidx.concurrent.futures.AbstractFuture$Cancellation r0;
        boolean z0;
        java.lang.Throwable r1;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$Cancellation;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.concurrent.futures.AbstractFuture$Cancellation: boolean wasInterrupted> = z0;

        r0.<androidx.concurrent.futures.AbstractFuture$Cancellation: java.lang.Throwable cause> = r1;

        return;
    }

    static void <clinit>()
    {
        boolean $z0;
        androidx.concurrent.futures.AbstractFuture$Cancellation $r0, $r1;

        $z0 = <androidx.concurrent.futures.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES>;

        if $z0 == 0 goto label1;

        <androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_CANCELLED> = null;

        <androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED> = null;

        goto label2;

     label1:
        $r0 = new androidx.concurrent.futures.AbstractFuture$Cancellation;

        specialinvoke $r0.<androidx.concurrent.futures.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, null);

        <androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_CANCELLED> = $r0;

        $r1 = new androidx.concurrent.futures.AbstractFuture$Cancellation;

        specialinvoke $r1.<androidx.concurrent.futures.AbstractFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(1, null);

        <androidx.concurrent.futures.AbstractFuture$Cancellation: androidx.concurrent.futures.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED> = $r1;

     label2:
        return;
    }

androidx.concurrent.futures.AbstractFuture$Failure$1
    void <init>(java.lang.String)
    {
        androidx.concurrent.futures.AbstractFuture$Failure$1 r0;
        java.lang.String r1;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$Failure$1;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Throwable: void <init>(java.lang.String)>(r1);

        return;
    }

    public synchronized java.lang.Throwable fillInStackTrace()
    {
        androidx.concurrent.futures.AbstractFuture$Failure$1 r0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$Failure$1;

        return r0;
    }

androidx.concurrent.futures.AbstractFuture$Failure
<androidx.concurrent.futures.AbstractFuture$Failure: androidx.concurrent.futures.AbstractFuture$Failure FALLBACK_INSTANCE>
<androidx.concurrent.futures.AbstractFuture$Failure: java.lang.Throwable exception>
    void <init>(java.lang.Throwable)
    {
        androidx.concurrent.futures.AbstractFuture$Failure r0;
        java.lang.Throwable r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$Failure;

        r1 := @parameter0: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Throwable) $r2;

        r0.<androidx.concurrent.futures.AbstractFuture$Failure: java.lang.Throwable exception> = $r3;

        return;
    }

    static void <clinit>()
    {
        androidx.concurrent.futures.AbstractFuture$Failure $r0;
        androidx.concurrent.futures.AbstractFuture$Failure$1 $r1;

        $r0 = new androidx.concurrent.futures.AbstractFuture$Failure;

        $r1 = new androidx.concurrent.futures.AbstractFuture$Failure$1;

        specialinvoke $r1.<androidx.concurrent.futures.AbstractFuture$Failure$1: void <init>(java.lang.String)>("Failure occurred while trying to finish a future.");

        specialinvoke $r0.<androidx.concurrent.futures.AbstractFuture$Failure: void <init>(java.lang.Throwable)>($r1);

        <androidx.concurrent.futures.AbstractFuture$Failure: androidx.concurrent.futures.AbstractFuture$Failure FALLBACK_INSTANCE> = $r0;

        return;
    }

androidx.concurrent.futures.AbstractFuture$Listener
<androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener TOMBSTONE>
<androidx.concurrent.futures.AbstractFuture$Listener: java.lang.Runnable task>
<androidx.concurrent.futures.AbstractFuture$Listener: java.util.concurrent.Executor executor>
<androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener next>
    void <init>(java.lang.Runnable, java.util.concurrent.Executor)
    {
        androidx.concurrent.futures.AbstractFuture$Listener r0;
        java.lang.Runnable r1;
        java.util.concurrent.Executor r2;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$Listener;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.concurrent.futures.AbstractFuture$Listener: java.lang.Runnable task> = r1;

        r0.<androidx.concurrent.futures.AbstractFuture$Listener: java.util.concurrent.Executor executor> = r2;

        return;
    }

    static void <clinit>()
    {
        androidx.concurrent.futures.AbstractFuture$Listener $r0;

        $r0 = new androidx.concurrent.futures.AbstractFuture$Listener;

        specialinvoke $r0.<androidx.concurrent.futures.AbstractFuture$Listener: void <init>(java.lang.Runnable,java.util.concurrent.Executor)>(null, null);

        <androidx.concurrent.futures.AbstractFuture$Listener: androidx.concurrent.futures.AbstractFuture$Listener TOMBSTONE> = $r0;

        return;
    }

androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper
<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater>
<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater>
<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater>
<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater>
<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater>
    void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater)
    {
        androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper r0;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1, r2, r3, r4, r5;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        r3 := @parameter2: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        r4 := @parameter3: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        r5 := @parameter4: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        specialinvoke r0.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: void <init>(androidx.concurrent.futures.AbstractFuture$1)>(null);

        r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater> = r1;

        r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater> = r2;

        r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater> = r3;

        r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater> = r4;

        r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater> = r5;

        return;
    }

    void putThread(androidx.concurrent.futures.AbstractFuture$Waiter, java.lang.Thread)
    {
        androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture$Waiter r1;
        java.lang.Thread r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$Waiter;

        r2 := @parameter1: java.lang.Thread;

        $r3 = r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    void putNext(androidx.concurrent.futures.AbstractFuture$Waiter, androidx.concurrent.futures.AbstractFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture$Waiter r1, r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r3;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$Waiter;

        r2 := @parameter1: androidx.concurrent.futures.AbstractFuture$Waiter;

        $r3 = r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    boolean casWaiters(androidx.concurrent.futures.AbstractFuture, androidx.concurrent.futures.AbstractFuture$Waiter, androidx.concurrent.futures.AbstractFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture r1;
        androidx.concurrent.futures.AbstractFuture$Waiter r2, r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: androidx.concurrent.futures.AbstractFuture$Waiter;

        r3 := @parameter2: androidx.concurrent.futures.AbstractFuture$Waiter;

        $r4 = r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return $z0;
    }

    boolean casListeners(androidx.concurrent.futures.AbstractFuture, androidx.concurrent.futures.AbstractFuture$Listener, androidx.concurrent.futures.AbstractFuture$Listener)
    {
        androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture r1;
        androidx.concurrent.futures.AbstractFuture$Listener r2, r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: androidx.concurrent.futures.AbstractFuture$Listener;

        r3 := @parameter2: androidx.concurrent.futures.AbstractFuture$Listener;

        $r4 = r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return $z0;
    }

    boolean casValue(androidx.concurrent.futures.AbstractFuture, java.lang.Object, java.lang.Object)
    {
        androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture r1;
        java.lang.Object r2, r3;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater $r4;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = r0.<androidx.concurrent.futures.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return $z0;
    }

androidx.concurrent.futures.AbstractFuture$SetFuture
<androidx.concurrent.futures.AbstractFuture$SetFuture: androidx.concurrent.futures.AbstractFuture owner>
<androidx.concurrent.futures.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>
    void <init>(androidx.concurrent.futures.AbstractFuture, com.google.common.util.concurrent.ListenableFuture)
    {
        androidx.concurrent.futures.AbstractFuture$SetFuture r0;
        androidx.concurrent.futures.AbstractFuture r1;
        com.google.common.util.concurrent.ListenableFuture r2;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SetFuture;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: com.google.common.util.concurrent.ListenableFuture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.concurrent.futures.AbstractFuture$SetFuture: androidx.concurrent.futures.AbstractFuture owner> = r1;

        r0.<androidx.concurrent.futures.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future> = r2;

        return;
    }

    public void run()
    {
        androidx.concurrent.futures.AbstractFuture$SetFuture r0;
        java.lang.Object r1, $r3;
        androidx.concurrent.futures.AbstractFuture $r2, $r5, $r7;
        com.google.common.util.concurrent.ListenableFuture $r4;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r6;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SetFuture;

        $r2 = r0.<androidx.concurrent.futures.AbstractFuture$SetFuture: androidx.concurrent.futures.AbstractFuture owner>;

        $r3 = $r2.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if $r3 == r0 goto label1;

        return;

     label1:
        $r4 = r0.<androidx.concurrent.futures.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future>;

        r1 = staticinvoke <androidx.concurrent.futures.AbstractFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>($r4);

        $r6 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $r5 = r0.<androidx.concurrent.futures.AbstractFuture$SetFuture: androidx.concurrent.futures.AbstractFuture owner>;

        $z0 = virtualinvoke $r6.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractFuture,java.lang.Object,java.lang.Object)>($r5, r0, r1);

        if $z0 == 0 goto label2;

        $r7 = r0.<androidx.concurrent.futures.AbstractFuture$SetFuture: androidx.concurrent.futures.AbstractFuture owner>;

        staticinvoke <androidx.concurrent.futures.AbstractFuture: void complete(androidx.concurrent.futures.AbstractFuture)>($r7);

     label2:
        return;
    }

androidx.concurrent.futures.AbstractFuture$SynchronizedHelper
    void <init>()
    {
        androidx.concurrent.futures.AbstractFuture$SynchronizedHelper r0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SynchronizedHelper;

        specialinvoke r0.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: void <init>(androidx.concurrent.futures.AbstractFuture$1)>(null);

        return;
    }

    void putThread(androidx.concurrent.futures.AbstractFuture$Waiter, java.lang.Thread)
    {
        androidx.concurrent.futures.AbstractFuture$SynchronizedHelper r0;
        androidx.concurrent.futures.AbstractFuture$Waiter r1;
        java.lang.Thread r2;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SynchronizedHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$Waiter;

        r2 := @parameter1: java.lang.Thread;

        r1.<androidx.concurrent.futures.AbstractFuture$Waiter: java.lang.Thread thread> = r2;

        return;
    }

    void putNext(androidx.concurrent.futures.AbstractFuture$Waiter, androidx.concurrent.futures.AbstractFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractFuture$SynchronizedHelper r0;
        androidx.concurrent.futures.AbstractFuture$Waiter r1, r2;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SynchronizedHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$Waiter;

        r2 := @parameter1: androidx.concurrent.futures.AbstractFuture$Waiter;

        r1.<androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter next> = r2;

        return;
    }

    boolean casWaiters(androidx.concurrent.futures.AbstractFuture, androidx.concurrent.futures.AbstractFuture$Waiter, androidx.concurrent.futures.AbstractFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractFuture$SynchronizedHelper r0;
        androidx.concurrent.futures.AbstractFuture r1, r4;
        androidx.concurrent.futures.AbstractFuture$Waiter r2, r3, $r6;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SynchronizedHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: androidx.concurrent.futures.AbstractFuture$Waiter;

        r3 := @parameter2: androidx.concurrent.futures.AbstractFuture$Waiter;

        r4 = r1;

        entermonitor r1;

        $r6 = r1.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Waiter waiters>;

        if $r6 != r2 goto label1;

        r1.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Waiter waiters> = r3;

        exitmonitor r4;

        return 1;

     label1:
        exitmonitor r4;

        return 0;
    }

    boolean casListeners(androidx.concurrent.futures.AbstractFuture, androidx.concurrent.futures.AbstractFuture$Listener, androidx.concurrent.futures.AbstractFuture$Listener)
    {
        androidx.concurrent.futures.AbstractFuture$SynchronizedHelper r0;
        androidx.concurrent.futures.AbstractFuture r1, r4;
        androidx.concurrent.futures.AbstractFuture$Listener r2, r3, $r6;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SynchronizedHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: androidx.concurrent.futures.AbstractFuture$Listener;

        r3 := @parameter2: androidx.concurrent.futures.AbstractFuture$Listener;

        r4 = r1;

        entermonitor r1;

        $r6 = r1.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Listener listeners>;

        if $r6 != r2 goto label1;

        r1.<androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$Listener listeners> = r3;

        exitmonitor r4;

        return 1;

     label1:
        exitmonitor r4;

        return 0;
    }

    boolean casValue(androidx.concurrent.futures.AbstractFuture, java.lang.Object, java.lang.Object)
    {
        androidx.concurrent.futures.AbstractFuture$SynchronizedHelper r0;
        androidx.concurrent.futures.AbstractFuture r1, r4;
        java.lang.Object r2, r3, $r6;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$SynchronizedHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 = r1;

        entermonitor r1;

        $r6 = r1.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value>;

        if $r6 != r2 goto label1;

        r1.<androidx.concurrent.futures.AbstractFuture: java.lang.Object value> = r3;

        exitmonitor r4;

        return 1;

     label1:
        exitmonitor r4;

        return 0;
    }

androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1
    void <init>()
    {
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1 r0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public sun.misc.Unsafe run() throws java.lang.Exception
    {
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1 r0;
        java.lang.Class r1;
        java.lang.reflect.Field[] r2;
        int i0, i1;
        java.lang.reflect.Field r3;
        java.lang.Object r4, $r6;
        java.lang.NoSuchFieldError $r5;
        boolean $z0;
        sun.misc.Unsafe $r7;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1;

        r1 = class "Lsun/misc/Unsafe;";

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r4);

        $r7 = (sun.misc.Unsafe) $r6;

        return $r7;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = new java.lang.NoSuchFieldError;

        specialinvoke $r5.<java.lang.NoSuchFieldError: void <init>(java.lang.String)>("the Unsafe");

        throw $r5;
    }

    public volatile java.lang.Object run() throws java.lang.Exception
    {
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1 r0;
        sun.misc.Unsafe $r1;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1;

        $r1 = virtualinvoke r0.<androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1: sun.misc.Unsafe run()>();

        return $r1;
    }

androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper
<androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>
<androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long LISTENERS_OFFSET>
<androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long WAITERS_OFFSET>
<androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long VALUE_OFFSET>
<androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long WAITER_THREAD_OFFSET>
<androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long WAITER_NEXT_OFFSET>
    void <init>()
    {
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper r0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper;

        specialinvoke r0.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: void <init>(androidx.concurrent.futures.AbstractFuture$1)>(null);

        return;
    }

    void putThread(androidx.concurrent.futures.AbstractFuture$Waiter, java.lang.Thread)
    {
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture$Waiter r1;
        java.lang.Thread r2;
        long $l0;
        sun.misc.Unsafe $r3;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$Waiter;

        r2 := @parameter1: java.lang.Thread;

        $r3 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long WAITER_THREAD_OFFSET>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r1, $l0, r2);

        return;
    }

    void putNext(androidx.concurrent.futures.AbstractFuture$Waiter, androidx.concurrent.futures.AbstractFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture$Waiter r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$Waiter;

        r2 := @parameter1: androidx.concurrent.futures.AbstractFuture$Waiter;

        $r3 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long WAITER_NEXT_OFFSET>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r1, $l0, r2);

        return;
    }

    boolean casWaiters(androidx.concurrent.futures.AbstractFuture, androidx.concurrent.futures.AbstractFuture$Waiter, androidx.concurrent.futures.AbstractFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture r1;
        androidx.concurrent.futures.AbstractFuture$Waiter r2, r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: androidx.concurrent.futures.AbstractFuture$Waiter;

        r3 := @parameter2: androidx.concurrent.futures.AbstractFuture$Waiter;

        $r4 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long WAITERS_OFFSET>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l0, r2, r3);

        return $z0;
    }

    boolean casListeners(androidx.concurrent.futures.AbstractFuture, androidx.concurrent.futures.AbstractFuture$Listener, androidx.concurrent.futures.AbstractFuture$Listener)
    {
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture r1;
        androidx.concurrent.futures.AbstractFuture$Listener r2, r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: androidx.concurrent.futures.AbstractFuture$Listener;

        r3 := @parameter2: androidx.concurrent.futures.AbstractFuture$Listener;

        $r4 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long LISTENERS_OFFSET>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l0, r2, r3);

        return $z0;
    }

    boolean casValue(androidx.concurrent.futures.AbstractFuture, java.lang.Object, java.lang.Object)
    {
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper r0;
        androidx.concurrent.futures.AbstractFuture r1;
        java.lang.Object r2, r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE>;

        $l0 = <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long VALUE_OFFSET>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l0, r2, r3);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Throwable r0, $r8, $r10, $r13, $r15, r18;
        java.lang.reflect.Field $r1, $r2, $r3, $r5, $r7;
        long $l0, $l1, $l2, $l3, $l4;
        java.lang.Class $r4, $r6, r17;
        java.lang.Object $r12;
        sun.misc.Unsafe r16;
        androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1 r19;
        java.lang.RuntimeException r20, r21;
        java.security.PrivilegedActionException r22;

     label01:
        r16 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

     label02:
        goto label07;

     label03:
        $r10 := @caughtexception;

     label04:
        r19 = new androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1;

        specialinvoke r19.<androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper$1: void <init>()>();

        $r12 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(r19);

        r16 = (sun.misc.Unsafe) $r12;

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

        r0 = $r13;

        r20 = new java.lang.RuntimeException;

        r22 = (java.security.PrivilegedActionException) r0;

        $r15 = virtualinvoke r22.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();

        specialinvoke r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not initialize intrinsics", $r15);

        throw r20;

     label07:
        r17 = class "Landroidx/concurrent/futures/AbstractFuture;";

        $r1 = virtualinvoke r17.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("waiters");

        $l0 = virtualinvoke r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r1);

        <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long WAITERS_OFFSET> = $l0;

        $r2 = virtualinvoke r17.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("listeners");

        $l1 = virtualinvoke r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r2);

        <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long LISTENERS_OFFSET> = $l1;

        $r3 = virtualinvoke r17.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l2 = virtualinvoke r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long VALUE_OFFSET> = $l2;

        $r4 = class "Landroidx/concurrent/futures/AbstractFuture$Waiter;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("thread");

        $l3 = virtualinvoke r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

        <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long WAITER_THREAD_OFFSET> = $l3;

        $r6 = class "Landroidx/concurrent/futures/AbstractFuture$Waiter;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");

        $l4 = virtualinvoke r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);

        <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: long WAITER_NEXT_OFFSET> = $l4;

        <androidx.concurrent.futures.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE> = r16;

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        r18 = $r8;

        staticinvoke <androidx.concurrent.futures.AbstractFuture: void throwIfUnchecked(java.lang.Throwable)>(r18);

        r21 = new java.lang.RuntimeException;

        specialinvoke r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r18);

        throw r21;

     label10:
        return;

        catch java.lang.SecurityException from label01 to label02 with label03;
        catch java.security.PrivilegedActionException from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
    }

androidx.concurrent.futures.AbstractFuture$Waiter
<androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter TOMBSTONE>
<androidx.concurrent.futures.AbstractFuture$Waiter: java.lang.Thread thread>
<androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter next>
    void <init>(boolean)
    {
        androidx.concurrent.futures.AbstractFuture$Waiter r0;
        boolean z0;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$Waiter;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>()
    {
        androidx.concurrent.futures.AbstractFuture$Waiter r0;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r1;
        java.lang.Thread $r2;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$Waiter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: void putThread(androidx.concurrent.futures.AbstractFuture$Waiter,java.lang.Thread)>(r0, $r2);

        return;
    }

    void setNext(androidx.concurrent.futures.AbstractFuture$Waiter)
    {
        androidx.concurrent.futures.AbstractFuture$Waiter r0, r1;
        androidx.concurrent.futures.AbstractFuture$AtomicHelper $r2;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$Waiter;

        r1 := @parameter0: androidx.concurrent.futures.AbstractFuture$Waiter;

        $r2 = <androidx.concurrent.futures.AbstractFuture: androidx.concurrent.futures.AbstractFuture$AtomicHelper ATOMIC_HELPER>;

        virtualinvoke $r2.<androidx.concurrent.futures.AbstractFuture$AtomicHelper: void putNext(androidx.concurrent.futures.AbstractFuture$Waiter,androidx.concurrent.futures.AbstractFuture$Waiter)>(r0, r1);

        return;
    }

    void unpark()
    {
        androidx.concurrent.futures.AbstractFuture$Waiter r0;
        java.lang.Thread r1;

        r0 := @this: androidx.concurrent.futures.AbstractFuture$Waiter;

        r1 = r0.<androidx.concurrent.futures.AbstractFuture$Waiter: java.lang.Thread thread>;

        if r1 == null goto label1;

        r0.<androidx.concurrent.futures.AbstractFuture$Waiter: java.lang.Thread thread> = null;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>(r1);

     label1:
        return;
    }

    static void <clinit>()
    {
        androidx.concurrent.futures.AbstractFuture$Waiter $r0;

        $r0 = new androidx.concurrent.futures.AbstractFuture$Waiter;

        specialinvoke $r0.<androidx.concurrent.futures.AbstractFuture$Waiter: void <init>(boolean)>(0);

        <androidx.concurrent.futures.AbstractFuture$Waiter: androidx.concurrent.futures.AbstractFuture$Waiter TOMBSTONE> = $r0;

        return;
    }

