androidx.media3.test.utils.FakeTrackOutput
<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.test.utils.FakeTrackOutput$Factory DEFAULT_FACTORY>
<androidx.media3.test.utils.FakeTrackOutput: boolean deduplicateConsecutiveFormats>
<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>
<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>
<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData>
<androidx.media3.test.utils.FakeTrackOutput: int formatCount>
<androidx.media3.test.utils.FakeTrackOutput: boolean receivedSampleInFormat>
<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.common.Format lastFormat>
    public void <init>(boolean)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        boolean z0;
        java.util.ArrayList $r1, $r2;
        byte[] $r3;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.FakeTrackOutput: boolean deduplicateConsecutiveFormats> = z0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables> = $r2;

        $r3 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData> = $r3;

        r0.<androidx.media3.test.utils.FakeTrackOutput: int formatCount> = 0;

        r0.<androidx.media3.test.utils.FakeTrackOutput: boolean receivedSampleInFormat> = 1;

        return;
    }

    public void clear()
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        java.util.ArrayList $r1, $r2;
        byte[] $r3;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $r3 = <androidx.media3.common.util.Util: byte[] EMPTY_BYTE_ARRAY>;

        r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData> = $r3;

        r0.<androidx.media3.test.utils.FakeTrackOutput: int formatCount> = 0;

        r0.<androidx.media3.test.utils.FakeTrackOutput: boolean receivedSampleInFormat> = 1;

        return;
    }

    public void format(androidx.media3.common.Format)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        androidx.media3.common.Format r1;
        androidx.media3.test.utils.Dumper$Dumpable r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r7, $r10;
        java.lang.Class $r8;
        java.lang.String $r9, $r11;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        r1 := @parameter0: androidx.media3.common.Format;

        $z0 = r0.<androidx.media3.test.utils.FakeTrackOutput: boolean deduplicateConsecutiveFormats>;

        if $z0 != 0 goto label1;

        $z3 = r0.<androidx.media3.test.utils.FakeTrackOutput: boolean receivedSampleInFormat>;

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z3, "deduplicateConsecutiveFormats=false so TrackOutput must receive at least one sampleMetadata() call between format() calls.");

        goto label2;

     label1:
        $z1 = r0.<androidx.media3.test.utils.FakeTrackOutput: boolean receivedSampleInFormat>;

        if $z1 != 0 goto label2;

        $r4 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>;

        $r3 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        r2 = (androidx.media3.test.utils.Dumper$Dumpable) $r5;

        $i2 = r0.<androidx.media3.test.utils.FakeTrackOutput: int formatCount>;

        $i3 = $i2 - 1;

        r0.<androidx.media3.test.utils.FakeTrackOutput: int formatCount> = $i3;

        $z2 = r2 instanceof androidx.media3.test.utils.DumpableFormat;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("receivedSampleInFormat=false so expected last dumpable to be a DumpableFormat. Found: ");

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z2, $r11);

     label2:
        r0.<androidx.media3.test.utils.FakeTrackOutput: boolean receivedSampleInFormat> = 0;

        specialinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: void addFormat(androidx.media3.common.Format)>(r1);

        return;
    }

    public int sampleData(androidx.media3.common.DataReader, int, boolean, int) throws java.io.IOException
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        androidx.media3.common.DataReader r1;
        int i0, i1, i2;
        boolean z0;
        byte[][] $r2;
        byte[] $r3, $r4, r6, r7;
        java.io.EOFException $r5;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        r1 := @parameter0: androidx.media3.common.DataReader;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        r6 = newarray (byte)[i0];

        i2 = interfaceinvoke r1.<androidx.media3.common.DataReader: int read(byte[],int,int)>(r6, 0, i0);

        if i2 != -1 goto label2;

        if z0 == 0 goto label1;

        return -1;

     label1:
        $r5 = new java.io.EOFException;

        specialinvoke $r5.<java.io.EOFException: void <init>()>();

        throw $r5;

     label2:
        r7 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r6, i2);

        $r2 = newarray (byte[])[2];

        $r3 = r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData>;

        $r2[0] = $r3;

        $r2[1] = r7;

        $r4 = staticinvoke <com.google.common.primitives.Bytes: byte[] concat(byte[][])>($r2);

        r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData> = $r4;

        return i2;
    }

    public void sampleData(androidx.media3.common.util.ParsableByteArray, int, int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        androidx.media3.common.util.ParsableByteArray r1;
        int i0, i1;
        byte[] r2, $r4, $r5;
        byte[][] $r3;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = newarray (byte)[i0];

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void readBytes(byte[],int,int)>(r2, 0, i0);

        $r3 = newarray (byte[])[2];

        $r4 = r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData>;

        $r3[0] = $r4;

        $r3[1] = r2;

        $r5 = staticinvoke <com.google.common.primitives.Bytes: byte[] concat(byte[][])>($r3);

        r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData> = $r5;

        return;
    }

    public void sampleMetadata(long, int, int, int, androidx.media3.extractor.TrackOutput$CryptoData)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        long l0;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        androidx.media3.extractor.TrackOutput$CryptoData r1;
        androidx.media3.common.Format $r2, $r3, $r7, $r8;
        java.util.ArrayList $r4;
        boolean $z0;
        byte[] $r5, $r6;
        java.lang.IllegalStateException $r9, $r10;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: androidx.media3.extractor.TrackOutput$CryptoData;

        r0.<androidx.media3.test.utils.FakeTrackOutput: boolean receivedSampleInFormat> = 1;

        $r2 = r0.<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.common.Format lastFormat>;

        if $r2 != null goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("TrackOutput must receive format before sampleMetadata");

        throw $r10;

     label1:
        $r3 = r0.<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.common.Format lastFormat>;

        $i4 = $r3.<androidx.media3.common.Format: int maxInputSize>;

        if $i4 == -1 goto label2;

        $r8 = r0.<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.common.Format lastFormat>;

        $i10 = $r8.<androidx.media3.common.Format: int maxInputSize>;

        if i2 <= $i10 goto label2;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Sample size exceeds Format.maxInputSize");

        throw $r9;

     label2:
        $r4 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r7 = r0.<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.common.Format lastFormat>;

        specialinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: void addFormat(androidx.media3.common.Format)>($r7);

     label3:
        $r5 = r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData>;

        $i5 = lengthof $r5;

        $i6 = $i5 - i3;

        $i9 = $i6 - i2;

        $r6 = r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData>;

        $i7 = lengthof $r6;

        $i8 = $i7 - i3;

        specialinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: void addSampleInfo(long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData)>(l0, i1, $i9, $i8, r1);

        return;
    }

    public void assertSampleCount(int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0;
        java.util.ArrayList $r1;
        com.google.common.truth.IterableSubject $r2;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        $r2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>($r1);

        virtualinvoke $r2.<com.google.common.truth.IterableSubject: void hasSize(int)>(i0);

        return;
    }

    public void assertSample(int, byte[], long, int, androidx.media3.extractor.TrackOutput$CryptoData)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0, i2, $i4;
        byte[] r1, r3;
        long l1, $l3;
        androidx.media3.extractor.TrackOutput$CryptoData r2, $r11;
        com.google.common.truth.PrimitiveByteArraySubject $r4;
        java.lang.Long $r5, $r7;
        com.google.common.truth.LongSubject $r6;
        java.lang.Integer $r8, $r10;
        com.google.common.truth.IntegerSubject $r9;
        com.google.common.truth.Subject $r12;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        r2 := @parameter4: androidx.media3.extractor.TrackOutput$CryptoData;

        r3 = virtualinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] getSampleData(int)>(i0);

        $r4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveByteArraySubject assertThat(byte[])>(r3);

        virtualinvoke $r4.<com.google.common.truth.PrimitiveByteArraySubject: void isEqualTo(java.lang.Object)>(r1);

        $l3 = virtualinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: long getSampleTimeUs(int)>(i0);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r6 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r5);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        virtualinvoke $r6.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r7);

        $i4 = virtualinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: int getSampleFlags(int)>(i0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IntegerSubject assertThat(java.lang.Integer)>($r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        virtualinvoke $r9.<com.google.common.truth.IntegerSubject: void isEqualTo(java.lang.Object)>($r10);

        $r11 = virtualinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.extractor.TrackOutput$CryptoData getSampleCryptoData(int)>(i0);

        $r12 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.Subject assertThat(java.lang.Object)>($r11);

        virtualinvoke $r12.<com.google.common.truth.Subject: void isEqualTo(java.lang.Object)>(r2);

        return;
    }

    public byte[] getSampleData(int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0, $i1, $i2;
        byte[] $r1, $r2;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData>;

        $i1 = specialinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: int getSampleStartOffset(int)>(i0);

        $i2 = specialinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: int getSampleEndOffset(int)>(i0);

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, $i1, $i2);

        return $r2;
    }

    private byte[] getSampleData(int, int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0, i1;
        byte[] $r1, $r2;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData>;

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r1, i0, i1);

        return $r2;
    }

    public long getSampleTimeUs(int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo $r3;
        long $l1;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo) $r2;

        $l1 = $r3.<androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo: long timeUs>;

        return $l1;
    }

    public int getSampleFlags(int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0, $i1;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo $r3;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo) $r2;

        $i1 = $r3.<androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo: int flags>;

        return $i1;
    }

    public androidx.media3.extractor.TrackOutput$CryptoData getSampleCryptoData(int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo $r3;
        androidx.media3.extractor.TrackOutput$CryptoData $r4;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo) $r2;

        $r4 = $r3.<androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo: androidx.media3.extractor.TrackOutput$CryptoData cryptoData>;

        return $r4;
    }

    public int getSampleCount()
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        java.util.ArrayList $r1;
        int $i0;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public java.util.List getSampleTimesUs()
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        java.util.ArrayList r1, $r4, $r5;
        java.util.Iterator r2;
        androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo r3;
        boolean $z0;
        java.util.List $r6;
        java.lang.Object $r7;
        long $l0;
        java.lang.Long $r8;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        $r5 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo) $r7;

        $l0 = r3.<androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo: long timeUs>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r6;
    }

    public void dump(androidx.media3.test.utils.Dumper)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        androidx.media3.test.utils.Dumper r1;
        byte[] $r2;
        int $i0, $i1, i2, $i3;
        java.lang.Integer $r3, $r6;
        java.util.ArrayList $r5, $r8, $r9, $r15;
        boolean $z0;
        java.lang.Object $r10;
        androidx.media3.test.utils.Dumper$Dumpable $r11;
        androidx.media3.common.Format $r12, $r14;
        androidx.media3.test.utils.DumpableFormat $r13;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        r1 := @parameter0: androidx.media3.test.utils.Dumper;

        $r2 = r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] sampleData>;

        $i0 = lengthof $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r1.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(java.lang.String,java.lang.Object)>("total output bytes", $r3);

        $r5 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r1.<androidx.media3.test.utils.Dumper: androidx.media3.test.utils.Dumper add(java.lang.String,java.lang.Object)>("sample count", $r6);

        $r8 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>;

        $z0 = virtualinvoke $r8.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r12 = r0.<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.common.Format lastFormat>;

        if $r12 == null goto label1;

        $r13 = new androidx.media3.test.utils.DumpableFormat;

        $r14 = r0.<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.common.Format lastFormat>;

        specialinvoke $r13.<androidx.media3.test.utils.DumpableFormat: void <init>(androidx.media3.common.Format,int)>($r14, 0);

        virtualinvoke $r13.<androidx.media3.test.utils.DumpableFormat: void dump(androidx.media3.test.utils.Dumper)>(r1);

     label1:
        i2 = 0;

     label2:
        $r15 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>;

        $i3 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if i2 >= $i3 goto label3;

        $r9 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r11 = (androidx.media3.test.utils.Dumper$Dumpable) $r10;

        interfaceinvoke $r11.<androidx.media3.test.utils.Dumper$Dumpable: void dump(androidx.media3.test.utils.Dumper)>(r1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    private int getSampleStartOffset(int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0, $i1;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo $r3;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo) $r2;

        $i1 = $r3.<androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo: int startOffset>;

        return $i1;
    }

    private int getSampleEndOffset(int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0, $i1;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo $r3;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo) $r2;

        $i1 = $r3.<androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo: int endOffset>;

        return $i1;
    }

    private void addFormat(androidx.media3.common.Format)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        androidx.media3.common.Format r1;
        androidx.media3.test.utils.DumpableFormat $r2;
        int $i0, $i1, $i2;
        java.util.ArrayList $r3;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        r1 := @parameter0: androidx.media3.common.Format;

        r0.<androidx.media3.test.utils.FakeTrackOutput: androidx.media3.common.Format lastFormat> = r1;

        $r3 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>;

        $r2 = new androidx.media3.test.utils.DumpableFormat;

        $i0 = r0.<androidx.media3.test.utils.FakeTrackOutput: int formatCount>;

        specialinvoke $r2.<androidx.media3.test.utils.DumpableFormat: void <init>(androidx.media3.common.Format,int)>(r1, $i0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i1 = r0.<androidx.media3.test.utils.FakeTrackOutput: int formatCount>;

        $i2 = $i1 + 1;

        r0.<androidx.media3.test.utils.FakeTrackOutput: int formatCount> = $i2;

        return;
    }

    private void addSampleInfo(long, int, int, int, androidx.media3.extractor.TrackOutput$CryptoData)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        long l0;
        int i1, i2, i3, $i4;
        androidx.media3.extractor.TrackOutput$CryptoData r1;
        androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo r2, $r3;
        java.util.ArrayList $r4, $r5;

        r0 := @this: androidx.media3.test.utils.FakeTrackOutput;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: androidx.media3.extractor.TrackOutput$CryptoData;

        $r3 = new androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo;

        $i4 = virtualinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: int getSampleCount()>();

        specialinvoke $r3.<androidx.media3.test.utils.FakeTrackOutput$DumpableSampleInfo: void <init>(androidx.media3.test.utils.FakeTrackOutput,long,int,int,int,androidx.media3.extractor.TrackOutput$CryptoData,int)>(r0, l0, i1, i2, i3, r1, $i4);

        r2 = $r3;

        $r4 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList sampleInfos>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r5 = r0.<androidx.media3.test.utils.FakeTrackOutput: java.util.ArrayList dumpables>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        return;
    }

    private static androidx.media3.test.utils.FakeTrackOutput lambda$static$0(int, int)
    {
        int i0, i1;
        androidx.media3.test.utils.FakeTrackOutput $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new androidx.media3.test.utils.FakeTrackOutput;

        specialinvoke $r0.<androidx.media3.test.utils.FakeTrackOutput: void <init>(boolean)>(0);

        return $r0;
    }

    static byte[] access$000(androidx.media3.test.utils.FakeTrackOutput, int, int)
    {
        androidx.media3.test.utils.FakeTrackOutput r0;
        int i0, i1;
        byte[] $r1;

        r0 := @parameter0: androidx.media3.test.utils.FakeTrackOutput;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = specialinvoke r0.<androidx.media3.test.utils.FakeTrackOutput: byte[] getSampleData(int,int)>(i0, i1);

        return $r1;
    }

    static void <clinit>()
    {
        androidx.media3.test.utils.FakeTrackOutput$Factory $r0;

        $r0 = dynamicinvoke "create" <androidx.media3.test.utils.FakeTrackOutput$Factory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.test.utils.FakeTrackOutput __METHODTYPE__(int,int), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.FakeTrackOutput: androidx.media3.test.utils.FakeTrackOutput lambda$static$0(int,int)>, methodtype: androidx.media3.test.utils.FakeTrackOutput __METHODTYPE__(int,int));

        <androidx.media3.test.utils.FakeTrackOutput: androidx.media3.test.utils.FakeTrackOutput$Factory DEFAULT_FACTORY> = $r0;

        return;
    }

