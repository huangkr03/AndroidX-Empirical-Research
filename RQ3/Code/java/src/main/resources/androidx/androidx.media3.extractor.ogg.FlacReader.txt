androidx.media3.extractor.ogg.FlacReader
<androidx.media3.extractor.ogg.FlacReader: byte AUDIO_PACKET_TYPE>
<androidx.media3.extractor.ogg.FlacReader: int FRAME_HEADER_SAMPLE_NUMBER_OFFSET>
<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.FlacStreamMetadata streamMetadata>
<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker flacOggSeeker>
    void <init>()
    {
        androidx.media3.extractor.ogg.FlacReader r0;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader;

        specialinvoke r0.<androidx.media3.extractor.ogg.StreamReader: void <init>()>();

        return;
    }

    public static boolean verifyBitstreamType(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.common.util.ParsableByteArray r0;
        int $i0, $i1;
        long $l2;
        byte $b3;
        boolean $z0;

        r0 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        $i0 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int bytesLeft()>();

        if $i0 < 5 goto label1;

        $i1 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: int readUnsignedByte()>();

        if $i1 != 127 goto label1;

        $l2 = virtualinvoke r0.<androidx.media3.common.util.ParsableByteArray: long readUnsignedInt()>();

        $b3 = $l2 cmp 1179402563L;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void reset(boolean)
    {
        androidx.media3.extractor.ogg.FlacReader r0;
        boolean z0;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader;

        z0 := @parameter0: boolean;

        specialinvoke r0.<androidx.media3.extractor.ogg.StreamReader: void reset(boolean)>(z0);

        if z0 == 0 goto label1;

        r0.<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.FlacStreamMetadata streamMetadata> = null;

        r0.<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker flacOggSeeker> = null;

     label1:
        return;
    }

    private static boolean isAudioPacket(byte[])
    {
        byte[] r0;
        byte $b0;
        boolean $z0;

        r0 := @parameter0: byte[];

        $b0 = r0[0];

        if $b0 != -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected long preparePayload(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.extractor.ogg.FlacReader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        byte[] $r2;
        boolean $z0;
        int $i0;
        long $l1;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        $r2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $z0 = staticinvoke <androidx.media3.extractor.ogg.FlacReader: boolean isAudioPacket(byte[])>($r2);

        if $z0 != 0 goto label1;

        return -1L;

     label1:
        $i0 = specialinvoke r0.<androidx.media3.extractor.ogg.FlacReader: int getFlacFrameBlockSize(androidx.media3.common.util.ParsableByteArray)>(r1);

        $l1 = (long) $i0;

        return $l1;
    }

    protected boolean readHeaders(androidx.media3.common.util.ParsableByteArray, long, androidx.media3.extractor.ogg.StreamReader$SetupData)
    {
        androidx.media3.extractor.ogg.FlacReader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        long l0;
        androidx.media3.extractor.ogg.StreamReader$SetupData r2;
        byte[] r3, r14;
        byte $b1, $b2;
        boolean $z0;
        androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker $r4, $r7, $r8, $r9;
        androidx.media3.common.Format $r5, $r11;
        androidx.media3.extractor.FlacStreamMetadata $r10, r12, r13, r16;
        int $i3;
        androidx.media3.extractor.FlacStreamMetadata$SeekTable r15;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        l0 := @parameter1: long;

        r2 := @parameter2: androidx.media3.extractor.ogg.StreamReader$SetupData;

        r3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        r12 = r0.<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.FlacStreamMetadata streamMetadata>;

        if r12 != null goto label1;

        $r10 = new androidx.media3.extractor.FlacStreamMetadata;

        specialinvoke $r10.<androidx.media3.extractor.FlacStreamMetadata: void <init>(byte[],int)>(r3, 17);

        r13 = $r10;

        r0.<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.FlacStreamMetadata streamMetadata> = r13;

        $i3 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: int limit()>();

        r14 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r3, 9, $i3);

        $r11 = virtualinvoke r13.<androidx.media3.extractor.FlacStreamMetadata: androidx.media3.common.Format getFormat(byte[],androidx.media3.common.Metadata)>(r14, null);

        r2.<androidx.media3.extractor.ogg.StreamReader$SetupData: androidx.media3.common.Format format> = $r11;

        return 1;

     label1:
        $b1 = r3[0];

        $b2 = $b1 & 127;

        if $b2 != 3 goto label2;

        r15 = staticinvoke <androidx.media3.extractor.FlacMetadataReader: androidx.media3.extractor.FlacStreamMetadata$SeekTable readSeekTableMetadataBlock(androidx.media3.common.util.ParsableByteArray)>(r1);

        r16 = virtualinvoke r12.<androidx.media3.extractor.FlacStreamMetadata: androidx.media3.extractor.FlacStreamMetadata copyWithSeekTable(androidx.media3.extractor.FlacStreamMetadata$SeekTable)>(r15);

        r0.<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.FlacStreamMetadata streamMetadata> = r16;

        $r9 = new androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker;

        specialinvoke $r9.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: void <init>(androidx.media3.extractor.FlacStreamMetadata,androidx.media3.extractor.FlacStreamMetadata$SeekTable)>(r16, r15);

        r0.<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker flacOggSeeker> = $r9;

        return 1;

     label2:
        $z0 = staticinvoke <androidx.media3.extractor.ogg.FlacReader: boolean isAudioPacket(byte[])>(r3);

        if $z0 == 0 goto label4;

        $r4 = r0.<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker flacOggSeeker>;

        if $r4 == null goto label3;

        $r7 = r0.<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker flacOggSeeker>;

        virtualinvoke $r7.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: void setFirstFrameOffset(long)>(l0);

        $r8 = r0.<androidx.media3.extractor.ogg.FlacReader: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker flacOggSeeker>;

        r2.<androidx.media3.extractor.ogg.StreamReader$SetupData: androidx.media3.extractor.ogg.OggSeeker oggSeeker> = $r8;

     label3:
        $r5 = r2.<androidx.media3.extractor.ogg.StreamReader$SetupData: androidx.media3.common.Format format>;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r5);

        return 0;

     label4:
        return 1;
    }

    private int getFlacFrameBlockSize(androidx.media3.common.util.ParsableByteArray)
    {
        androidx.media3.extractor.ogg.FlacReader r0;
        androidx.media3.common.util.ParsableByteArray r1;
        short s0, $s3;
        int i1;
        byte[] $r2;
        byte $b2;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader;

        r1 := @parameter0: androidx.media3.common.util.ParsableByteArray;

        $r2 = virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: byte[] getData()>();

        $b2 = $r2[2];

        $s3 = $b2 & 255;

        s0 = $s3 >> 4;

        if s0 == 6 goto label1;

        if s0 != 7 goto label2;

     label1:
        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void skipBytes(int)>(4);

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: long readUtf8EncodedLong()>();

     label2:
        i1 = staticinvoke <androidx.media3.extractor.FlacFrameReader: int readFrameBlockSizeSamplesFromKey(androidx.media3.common.util.ParsableByteArray,int)>(r1, s0);

        virtualinvoke r1.<androidx.media3.common.util.ParsableByteArray: void setPosition(int)>(0);

        return i1;
    }

androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker
<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: androidx.media3.extractor.FlacStreamMetadata streamMetadata>
<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: androidx.media3.extractor.FlacStreamMetadata$SeekTable seekTable>
<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long firstFrameOffset>
<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long pendingSeekGranule>
    public void <init>(androidx.media3.extractor.FlacStreamMetadata, androidx.media3.extractor.FlacStreamMetadata$SeekTable)
    {
        androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker r0;
        androidx.media3.extractor.FlacStreamMetadata r1;
        androidx.media3.extractor.FlacStreamMetadata$SeekTable r2;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker;

        r1 := @parameter0: androidx.media3.extractor.FlacStreamMetadata;

        r2 := @parameter1: androidx.media3.extractor.FlacStreamMetadata$SeekTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: androidx.media3.extractor.FlacStreamMetadata streamMetadata> = r1;

        r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: androidx.media3.extractor.FlacStreamMetadata$SeekTable seekTable> = r2;

        r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long firstFrameOffset> = -1L;

        r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long pendingSeekGranule> = -1L;

        return;
    }

    public void setFirstFrameOffset(long)
    {
        androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker r0;
        long l0;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker;

        l0 := @parameter0: long;

        r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long firstFrameOffset> = l0;

        return;
    }

    public long read(androidx.media3.extractor.ExtractorInput)
    {
        androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker r0;
        androidx.media3.extractor.ExtractorInput r1;
        long l0, $l1, $l3, $l4;
        byte $b2;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        $l1 = r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long pendingSeekGranule>;

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label1;

        $l3 = r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long pendingSeekGranule>;

        $l4 = $l3 + 2L;

        l0 = neg $l4;

        r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long pendingSeekGranule> = -1L;

        return l0;

     label1:
        return -1L;
    }

    public void startSeek(long)
    {
        androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker r0;
        long l0, $l2;
        long[] r1;
        int i1;
        androidx.media3.extractor.FlacStreamMetadata$SeekTable $r2;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: androidx.media3.extractor.FlacStreamMetadata$SeekTable seekTable>;

        r1 = $r2.<androidx.media3.extractor.FlacStreamMetadata$SeekTable: long[] pointSampleNumbers>;

        i1 = staticinvoke <androidx.media3.common.util.Util: int binarySearchFloor(long[],long,boolean,boolean)>(r1, l0, 1, 1);

        $l2 = r1[i1];

        r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long pendingSeekGranule> = $l2;

        return;
    }

    public androidx.media3.extractor.SeekMap createSeekMap()
    {
        androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker r0;
        long $l0, $l2;
        byte $b1;
        androidx.media3.extractor.FlacSeekTableSeekMap $r1;
        androidx.media3.extractor.FlacStreamMetadata $r2;
        boolean $z0;

        r0 := @this: androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker;

        $l0 = r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long firstFrameOffset>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        $r1 = new androidx.media3.extractor.FlacSeekTableSeekMap;

        $r2 = r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: androidx.media3.extractor.FlacStreamMetadata streamMetadata>;

        $l2 = r0.<androidx.media3.extractor.ogg.FlacReader$FlacOggSeeker: long firstFrameOffset>;

        specialinvoke $r1.<androidx.media3.extractor.FlacSeekTableSeekMap: void <init>(androidx.media3.extractor.FlacStreamMetadata,long)>($r2, $l2);

        return $r1;
    }

