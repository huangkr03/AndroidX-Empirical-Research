androidx.media3.test.utils.ExtractorAsserts
<androidx.media3.test.utils.ExtractorAsserts: java.lang.String DUMP_EXTENSION>
<androidx.media3.test.utils.ExtractorAsserts: java.lang.String UNKNOWN_LENGTH_EXTENSION>
    public static com.google.common.collect.ImmutableList configs()
    {
        androidx.media3.test.utils.ExtractorAsserts$SimulationConfig $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        com.google.common.collect.ImmutableList $r9;

        $r0 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(1, 0, 0, 0, null);

        $r1 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r1.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(1, 0, 0, 1, null);

        $r2 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r2.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(1, 0, 1, 0, null);

        $r3 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r3.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(1, 0, 1, 1, null);

        $r4 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r4.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(1, 1, 0, 0, null);

        $r5 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r5.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(1, 1, 0, 1, null);

        $r6 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r6.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(1, 1, 1, 0, null);

        $r7 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r7.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(1, 1, 1, 1, null);

        $r8 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r8.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(0, 0, 0, 0, null);

        $r9 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8);

        return $r9;
    }

    public static java.util.List configsNoSniffing()
    {
        java.lang.Object[][] $r0;
        java.lang.Object[] $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        androidx.media3.test.utils.ExtractorAsserts$SimulationConfig $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        java.util.List $r17;

        $r0 = newarray (java.lang.Object[])[8];

        $r1 = newarray (java.lang.Object)[1];

        $r2 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r2.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(0, 0, 0, 0, null);

        $r1[0] = $r2;

        $r0[0] = $r1;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r4.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(0, 0, 0, 1, null);

        $r3[0] = $r4;

        $r0[1] = $r3;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r6.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(0, 0, 1, 0, null);

        $r5[0] = $r6;

        $r0[2] = $r5;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r8.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(0, 0, 1, 1, null);

        $r7[0] = $r8;

        $r0[3] = $r7;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r10.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(0, 1, 0, 0, null);

        $r9[0] = $r10;

        $r0[4] = $r9;

        $r11 = newarray (java.lang.Object)[1];

        $r12 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r12.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(0, 1, 0, 1, null);

        $r11[0] = $r12;

        $r0[5] = $r11;

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r14.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(0, 1, 1, 0, null);

        $r13[0] = $r14;

        $r0[6] = $r13;

        $r15 = newarray (java.lang.Object)[1];

        $r16 = new androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        specialinvoke $r16.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>(0, 1, 1, 1, null);

        $r15[0] = $r16;

        $r0[7] = $r15;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r17;
    }

    public static void assertSniff(androidx.media3.extractor.Extractor, androidx.media3.test.utils.FakeExtractorInput, boolean) throws java.io.IOException
    {
        androidx.media3.extractor.Extractor r0;
        androidx.media3.test.utils.FakeExtractorInput r1;
        boolean z0, $z1;
        long l0, $l1;
        java.lang.Boolean $r2, $r4;
        com.google.common.truth.BooleanSubject $r3;
        java.lang.Long $r5, $r7;
        com.google.common.truth.LongSubject $r6;

        r0 := @parameter0: androidx.media3.extractor.Extractor;

        r1 := @parameter1: androidx.media3.test.utils.FakeExtractorInput;

        z0 := @parameter2: boolean;

        l0 = virtualinvoke r1.<androidx.media3.test.utils.FakeExtractorInput: long getPosition()>();

        $z1 = interfaceinvoke r0.<androidx.media3.extractor.Extractor: boolean sniff(androidx.media3.extractor.ExtractorInput)>(r1);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>($r2);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r3.<com.google.common.truth.BooleanSubject: void isEqualTo(java.lang.Object)>($r4);

        if z0 != 0 goto label1;

        $l1 = virtualinvoke r1.<androidx.media3.test.utils.FakeExtractorInput: long getPosition()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r6 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.LongSubject assertThat(java.lang.Long)>($r5);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r6.<com.google.common.truth.LongSubject: void isEqualTo(java.lang.Object)>($r7);

     label1:
        return;
    }

    public static void assertAllBehaviors(androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory, java.lang.String) throws java.io.IOException
    {
        androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory r0;
        java.lang.String r1;

        r0 := @parameter0: androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory;

        r1 := @parameter1: java.lang.String;

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertAllBehaviors(androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory,java.lang.String,java.lang.String)>(r0, r1, r1);

        return;
    }

    public static void assertAllBehaviors(androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory, java.lang.String, java.lang.String) throws java.io.IOException
    {
        androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory r0;
        java.lang.String r1, r2;
        androidx.media3.extractor.Extractor r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        android.content.Context r4;
        byte[] r5;

        r0 := @parameter0: androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        interfaceinvoke r3.<androidx.media3.extractor.Extractor: void seek(long,long)>(0L, 0L);

        interfaceinvoke r3.<androidx.media3.extractor.Extractor: void release()>();

        r4 = staticinvoke <androidx.test.core.app.ApplicationProvider: android.content.Context getApplicationContext()>();

        r5 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] getByteArray(android.content.Context,java.lang.String)>(r4, r1);

        $r6 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r6, r2, r5, r4, 0, 1, 0, 0, 0);

        $r7 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r7, r2, r5, r4, 0, 1, 0, 0, 1);

        $r8 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r8, r2, r5, r4, 0, 1, 0, 1, 0);

        $r9 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r9, r2, r5, r4, 0, 1, 0, 1, 1);

        $r10 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r10, r2, r5, r4, 0, 1, 1, 0, 0);

        $r11 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r11, r2, r5, r4, 0, 1, 1, 0, 1);

        $r12 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r12, r2, r5, r4, 0, 1, 1, 1, 0);

        $r13 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r13, r2, r5, r4, 0, 1, 1, 1, 1);

        $r14 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r14, r2, r5, r4, 0, 0, 0, 0, 0);

        return;
    }

    public static void assertBehavior(androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory, java.lang.String, androidx.media3.test.utils.ExtractorAsserts$SimulationConfig) throws java.io.IOException
    {
        androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory r0;
        java.lang.String r1;
        androidx.media3.test.utils.ExtractorAsserts$SimulationConfig r2;
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder $r3;
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig $r4;

        r0 := @parameter0: androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        $r3 = new androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder;

        specialinvoke $r3.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder: androidx.media3.test.utils.ExtractorAsserts$AssertionConfig build()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertBehavior(androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory,java.lang.String,androidx.media3.test.utils.ExtractorAsserts$AssertionConfig,androidx.media3.test.utils.ExtractorAsserts$SimulationConfig)>(r0, r1, $r4, r2);

        return;
    }

    public static void assertBehavior(androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory, java.lang.String, androidx.media3.test.utils.ExtractorAsserts$AssertionConfig, androidx.media3.test.utils.ExtractorAsserts$SimulationConfig) throws java.io.IOException
    {
        androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory r0;
        java.lang.String r1, $r8, $r9, r10, $r15;
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig r2;
        androidx.media3.test.utils.ExtractorAsserts$SimulationConfig r3;
        androidx.media3.extractor.Extractor r4, $r17;
        android.content.Context r5;
        byte[] r6;
        java.lang.String[] r7;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        com.google.common.base.Joiner $r16;

        r0 := @parameter0: androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: androidx.media3.test.utils.ExtractorAsserts$AssertionConfig;

        r3 := @parameter3: androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        r4 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        interfaceinvoke r4.<androidx.media3.extractor.Extractor: void seek(long,long)>(0L, 0L);

        interfaceinvoke r4.<androidx.media3.extractor.Extractor: void release()>();

        r5 = staticinvoke <androidx.test.core.app.ApplicationProvider: android.content.Context getApplicationContext()>();

        r6 = staticinvoke <androidx.media3.test.utils.TestUtil: byte[] getByteArray(android.content.Context,java.lang.String)>(r5, r1);

        $r8 = r2.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig: java.lang.String dumpFilesPrefix>;

        if $r8 == null goto label1;

        r10 = r2.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig: java.lang.String dumpFilesPrefix>;

        goto label4;

     label1:
        r7 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i0 = lengthof r7;

        if $i0 <= 0 goto label2;

        $r9 = r7[0];

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("media");

        if $z0 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AssertionConfig.dumpFilesPrefix == null but file isn\'t in a media/ sub-directory.\nExpected : \'media/<path-to-file>\'\nFound    : \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'\nYou need to set AssertionConfig.dumpFilesPrefix explicitly if your media and dump file aren\'t located in the expected structure (see docs on AssertionConfig.dumpFilesPrefix)");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean,java.lang.Object)>($z1, $r15);

        r7[0] = "extractordumps";

        $r16 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(47);

        r10 = virtualinvoke $r16.<com.google.common.base.Joiner: java.lang.String join(java.lang.Object[])>(r7);

     label4:
        $r17 = interfaceinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>();

        $z2 = r2.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig: boolean deduplicateConsecutiveFormats>;

        $z3 = r3.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean sniffFirst>;

        $z4 = r3.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulateIOErrors>;

        $z5 = r3.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulateUnknownLength>;

        $z6 = r3.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulatePartialReads>;

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertOutput(androidx.media3.extractor.Extractor,java.lang.String,byte[],android.content.Context,boolean,boolean,boolean,boolean,boolean)>($r17, r10, r6, r5, $z2, $z3, $z4, $z5, $z6);

        return;
    }

    private static void assertOutput(androidx.media3.extractor.Extractor, java.lang.String, byte[], android.content.Context, boolean, boolean, boolean, boolean, boolean) throws java.io.IOException
    {
        androidx.media3.extractor.Extractor r0;
        java.lang.String r1, $r16, $r21, $r31, $r35, $r39, $r43;
        byte[] r2;
        android.content.Context r3;
        boolean z0, z1, z2, z3, z4, $z5;
        androidx.media3.test.utils.FakeExtractorInput r4;
        androidx.media3.test.utils.FakeExtractorOutput r5;
        androidx.media3.extractor.SeekMap r6, $r22;
        long l0, l2, l3, $l4, $l5;
        byte b1, $b6, $b8, $b9, $b10, $b11;
        androidx.media3.test.utils.FakeExtractorInput$Builder $r7, $r8, $r9, $r10, $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r36, $r37, $r38, $r40, $r41, $r42;
        java.lang.Object $r23;
        androidx.media3.extractor.SeekMap$SeekPoints $r24;
        androidx.media3.extractor.SeekPoint $r25;
        int $i7, i12;

        r0 := @parameter0: androidx.media3.extractor.Extractor;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        r3 := @parameter3: android.content.Context;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        z3 := @parameter7: boolean;

        z4 := @parameter8: boolean;

        $r7 = new androidx.media3.test.utils.FakeExtractorInput$Builder;

        specialinvoke $r7.<androidx.media3.test.utils.FakeExtractorInput$Builder: void <init>()>();

        $r8 = virtualinvoke $r7.<androidx.media3.test.utils.FakeExtractorInput$Builder: androidx.media3.test.utils.FakeExtractorInput$Builder setData(byte[])>(r2);

        $r9 = virtualinvoke $r8.<androidx.media3.test.utils.FakeExtractorInput$Builder: androidx.media3.test.utils.FakeExtractorInput$Builder setSimulateIOErrors(boolean)>(z2);

        $r10 = virtualinvoke $r9.<androidx.media3.test.utils.FakeExtractorInput$Builder: androidx.media3.test.utils.FakeExtractorInput$Builder setSimulateUnknownLength(boolean)>(z3);

        $r11 = virtualinvoke $r10.<androidx.media3.test.utils.FakeExtractorInput$Builder: androidx.media3.test.utils.FakeExtractorInput$Builder setSimulatePartialReads(boolean)>(z4);

        r4 = virtualinvoke $r11.<androidx.media3.test.utils.FakeExtractorInput$Builder: androidx.media3.test.utils.FakeExtractorInput build()>();

        if z1 == 0 goto label01;

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void assertSniff(androidx.media3.extractor.Extractor,androidx.media3.test.utils.FakeExtractorInput,boolean)>(r0, r4, 1);

        virtualinvoke r4.<androidx.media3.test.utils.FakeExtractorInput: void resetPeekPosition()>();

     label01:
        r5 = staticinvoke <androidx.media3.test.utils.ExtractorAsserts: androidx.media3.test.utils.FakeExtractorOutput consumeTestData(androidx.media3.extractor.Extractor,androidx.media3.test.utils.FakeExtractorInput,long,boolean,boolean)>(r0, r4, 0L, 1, z0);

        if z3 == 0 goto label02;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".unknown_length.dump");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.test.utils.DumpFileAsserts: void assertOutput(android.content.Context,androidx.media3.test.utils.Dumper$Dumpable,java.lang.String)>(r3, r5, $r43);

        goto label03;

     label02:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".0");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dump");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.test.utils.DumpFileAsserts: void assertOutput(android.content.Context,androidx.media3.test.utils.Dumper$Dumpable,java.lang.String)>(r3, r5, $r16);

     label03:
        virtualinvoke r5.<androidx.media3.test.utils.FakeExtractorOutput: void clearTrackOutputs()>();

        virtualinvoke r4.<androidx.media3.test.utils.FakeExtractorInput: void reset()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void consumeTestData(androidx.media3.extractor.Extractor,androidx.media3.test.utils.FakeExtractorInput,long,androidx.media3.test.utils.FakeExtractorOutput,boolean)>(r0, r4, 0L, r5, 0);

        if z3 == 0 goto label04;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".unknown_length.dump");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.test.utils.DumpFileAsserts: void assertOutput(android.content.Context,androidx.media3.test.utils.Dumper$Dumpable,java.lang.String)>(r3, r5, $r39);

        goto label05;

     label04:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".0");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dump");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.test.utils.DumpFileAsserts: void assertOutput(android.content.Context,androidx.media3.test.utils.Dumper$Dumpable,java.lang.String)>(r3, r5, $r21);

     label05:
        $r22 = r5.<androidx.media3.test.utils.FakeExtractorOutput: androidx.media3.extractor.SeekMap seekMap>;

        $r23 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r22);

        r6 = (androidx.media3.extractor.SeekMap) $r23;

        l0 = interfaceinvoke r6.<androidx.media3.extractor.SeekMap: long getDurationUs()>();

        $z5 = interfaceinvoke r6.<androidx.media3.extractor.SeekMap: boolean isSeekable()>();

        if $z5 == 0 goto label06;

        $b10 = l0 cmp -9223372036854775807L;

        if $b10 == 0 goto label06;

        $b11 = 4;

        goto label07;

     label06:
        $b11 = 1;

     label07:
        b1 = $b11;

        i12 = 0;

     label08:
        if i12 >= b1 goto label12;

        $l4 = (long) i12;

        $l5 = l0 * $l4;

        l2 = $l5 / 3L;

        $r24 = interfaceinvoke r6.<androidx.media3.extractor.SeekMap: androidx.media3.extractor.SeekMap$SeekPoints getSeekPoints(long)>(l2);

        $r25 = $r24.<androidx.media3.extractor.SeekMap$SeekPoints: androidx.media3.extractor.SeekPoint first>;

        l3 = $r25.<androidx.media3.extractor.SeekPoint: long position>;

        $b6 = l2 cmp 0L;

        if $b6 != 0 goto label09;

        $b9 = l3 cmp 0L;

        if $b9 != 0 goto label09;

        goto label11;

     label09:
        virtualinvoke r4.<androidx.media3.test.utils.FakeExtractorInput: void reset()>();

        $i7 = (int) l3;

        virtualinvoke r4.<androidx.media3.test.utils.FakeExtractorInput: void setPosition(int)>($i7);

        virtualinvoke r5.<androidx.media3.test.utils.FakeExtractorOutput: void clearTrackOutputs()>();

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void consumeTestData(androidx.media3.extractor.Extractor,androidx.media3.test.utils.FakeExtractorInput,long,androidx.media3.test.utils.FakeExtractorOutput,boolean)>(r0, r4, l2, r5, 0);

        if z3 == 0 goto label10;

        $b8 = l2 cmp 0L;

        if $b8 != 0 goto label10;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".unknown_length.dump");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.test.utils.DumpFileAsserts: void assertOutput(android.content.Context,androidx.media3.test.utils.Dumper$Dumpable,java.lang.String)>(r3, r5, $r35);

        goto label11;

     label10:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dump");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.test.utils.DumpFileAsserts: void assertOutput(android.content.Context,androidx.media3.test.utils.Dumper$Dumpable,java.lang.String)>(r3, r5, $r31);

     label11:
        i12 = i12 + 1;

        goto label08;

     label12:
        return;
    }

    private void <init>()
    {
        androidx.media3.test.utils.ExtractorAsserts r0;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static androidx.media3.test.utils.FakeExtractorOutput consumeTestData(androidx.media3.extractor.Extractor, androidx.media3.test.utils.FakeExtractorInput, long, boolean, boolean) throws java.io.IOException
    {
        androidx.media3.extractor.Extractor r0;
        androidx.media3.test.utils.FakeExtractorInput r1;
        long l0;
        boolean z0, z1;
        androidx.media3.test.utils.FakeExtractorOutput r2, $r3;
        androidx.media3.test.utils.FakeTrackOutput$Factory $r4;

        r0 := @parameter0: androidx.media3.extractor.Extractor;

        r1 := @parameter1: androidx.media3.test.utils.FakeExtractorInput;

        l0 := @parameter2: long;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r3 = new androidx.media3.test.utils.FakeExtractorOutput;

        $r4 = dynamicinvoke "create" <androidx.media3.test.utils.FakeTrackOutput$Factory (boolean)>(z1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.test.utils.FakeTrackOutput __METHODTYPE__(int,int), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.test.utils.ExtractorAsserts: androidx.media3.test.utils.FakeTrackOutput lambda$consumeTestData$0(boolean,int,int)>, methodtype: androidx.media3.test.utils.FakeTrackOutput __METHODTYPE__(int,int));

        specialinvoke $r3.<androidx.media3.test.utils.FakeExtractorOutput: void <init>(androidx.media3.test.utils.FakeTrackOutput$Factory)>($r4);

        r2 = $r3;

        interfaceinvoke r0.<androidx.media3.extractor.Extractor: void init(androidx.media3.extractor.ExtractorOutput)>(r2);

        staticinvoke <androidx.media3.test.utils.ExtractorAsserts: void consumeTestData(androidx.media3.extractor.Extractor,androidx.media3.test.utils.FakeExtractorInput,long,androidx.media3.test.utils.FakeExtractorOutput,boolean)>(r0, r1, l0, r2, z0);

        return r2;
    }

    private static void consumeTestData(androidx.media3.extractor.Extractor, androidx.media3.test.utils.FakeExtractorInput, long, androidx.media3.test.utils.FakeExtractorOutput, boolean) throws java.io.IOException
    {
        androidx.media3.extractor.Extractor r0;
        androidx.media3.test.utils.FakeExtractorInput r1;
        long l0, l1, $l2;
        androidx.media3.test.utils.FakeExtractorOutput r2;
        boolean z0, $z1;
        androidx.media3.extractor.PositionHolder r3, $r4;
        byte $b3, $b4;
        int i5, $i6;

        r0 := @parameter0: androidx.media3.extractor.Extractor;

        r1 := @parameter1: androidx.media3.test.utils.FakeExtractorInput;

        l0 := @parameter2: long;

        r2 := @parameter3: androidx.media3.test.utils.FakeExtractorOutput;

        z0 := @parameter4: boolean;

        $l2 = virtualinvoke r1.<androidx.media3.test.utils.FakeExtractorInput: long getPosition()>();

        interfaceinvoke r0.<androidx.media3.extractor.Extractor: void seek(long,long)>($l2, l0);

        $r4 = new androidx.media3.extractor.PositionHolder;

        specialinvoke $r4.<androidx.media3.extractor.PositionHolder: void <init>()>();

        r3 = $r4;

        i5 = 0;

     label1:
        if i5 == -1 goto label5;

        r3.<androidx.media3.extractor.PositionHolder: long position> = -9223372036854775808L;

        i5 = interfaceinvoke r0.<androidx.media3.extractor.Extractor: int read(androidx.media3.extractor.ExtractorInput,androidx.media3.extractor.PositionHolder)>(r1, r3);

        if i5 != 1 goto label4;

        l1 = r3.<androidx.media3.extractor.PositionHolder: long position>;

        $b3 = 0L cmp l1;

        if $b3 > 0 goto label2;

        $b4 = l1 cmp 2147483647L;

        if $b4 > 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z1);

        $i6 = (int) l1;

        virtualinvoke r1.<androidx.media3.test.utils.FakeExtractorInput: void setPosition(int)>($i6);

     label4:
        goto label1;

     label5:
        return;
    }

    private static androidx.media3.test.utils.FakeTrackOutput lambda$consumeTestData$0(boolean, int, int)
    {
        boolean z0;
        int i0, i1;
        androidx.media3.test.utils.FakeTrackOutput $r0;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new androidx.media3.test.utils.FakeTrackOutput;

        specialinvoke $r0.<androidx.media3.test.utils.FakeTrackOutput: void <init>(boolean)>(z0);

        return $r0;
    }

androidx.media3.test.utils.ExtractorAsserts$1
androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder
<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder: java.lang.String dumpFilesPrefix>
<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder: boolean deduplicateConsecutiveFormats>
    public void <init>()
    {
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder r0;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder setDumpFilesPrefix(java.lang.String)
    {
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder r0;
        java.lang.String r1;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder: java.lang.String dumpFilesPrefix> = r1;

        return r0;
    }

    public androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder setDeduplicateConsecutiveFormats(boolean)
    {
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder r0;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder;

        z0 := @parameter0: boolean;

        r0.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder: boolean deduplicateConsecutiveFormats> = z0;

        return r0;
    }

    public androidx.media3.test.utils.ExtractorAsserts$AssertionConfig build()
    {
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder r0;
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig $r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder;

        $r1 = new androidx.media3.test.utils.ExtractorAsserts$AssertionConfig;

        $r2 = r0.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder: java.lang.String dumpFilesPrefix>;

        $z0 = r0.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig$Builder: boolean deduplicateConsecutiveFormats>;

        specialinvoke $r1.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig: void <init>(java.lang.String,boolean,androidx.media3.test.utils.ExtractorAsserts$1)>($r2, $z0, null);

        return $r1;
    }

androidx.media3.test.utils.ExtractorAsserts$AssertionConfig
<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig: java.lang.String dumpFilesPrefix>
<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig: boolean deduplicateConsecutiveFormats>
    private void <init>(java.lang.String, boolean)
    {
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts$AssertionConfig;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig: java.lang.String dumpFilesPrefix> = r1;

        r0.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig: boolean deduplicateConsecutiveFormats> = z0;

        return;
    }

    void <init>(java.lang.String, boolean, androidx.media3.test.utils.ExtractorAsserts$1)
    {
        androidx.media3.test.utils.ExtractorAsserts$AssertionConfig r0;
        java.lang.String r1;
        boolean z0;
        androidx.media3.test.utils.ExtractorAsserts$1 r2;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts$AssertionConfig;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: androidx.media3.test.utils.ExtractorAsserts$1;

        specialinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$AssertionConfig: void <init>(java.lang.String,boolean)>(r1, z0);

        return;
    }

androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory
<androidx.media3.test.utils.ExtractorAsserts$ExtractorFactory: androidx.media3.extractor.Extractor create()>
androidx.media3.test.utils.ExtractorAsserts$SimulationConfig
<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean sniffFirst>
<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulateIOErrors>
<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulateUnknownLength>
<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulatePartialReads>
    private void <init>(boolean, boolean, boolean, boolean)
    {
        androidx.media3.test.utils.ExtractorAsserts$SimulationConfig r0;
        boolean z0, z1, z2, z3;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean sniffFirst> = z0;

        r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulateIOErrors> = z1;

        r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulateUnknownLength> = z2;

        r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulatePartialReads> = z3;

        return;
    }

    public java.lang.String toString()
    {
        androidx.media3.test.utils.ExtractorAsserts$SimulationConfig r0;
        java.lang.Object[] $r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Boolean $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        $r1 = newarray (java.lang.Object)[4];

        $z0 = r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean sniffFirst>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r1[0] = $r2;

        $z1 = r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulateIOErrors>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r1[1] = $r3;

        $z2 = r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulateUnknownLength>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r1[2] = $r4;

        $z3 = r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: boolean simulatePartialReads>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        $r1[3] = $r5;

        $r6 = staticinvoke <androidx.media3.common.util.Util: java.lang.String formatInvariant(java.lang.String,java.lang.Object[])>("sniff=%s,ioErr=%s,unknownLen=%s,partRead=%s", $r1);

        return $r6;
    }

    void <init>(boolean, boolean, boolean, boolean, androidx.media3.test.utils.ExtractorAsserts$1)
    {
        androidx.media3.test.utils.ExtractorAsserts$SimulationConfig r0;
        boolean z0, z1, z2, z3;
        androidx.media3.test.utils.ExtractorAsserts$1 r1;

        r0 := @this: androidx.media3.test.utils.ExtractorAsserts$SimulationConfig;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        r1 := @parameter4: androidx.media3.test.utils.ExtractorAsserts$1;

        specialinvoke r0.<androidx.media3.test.utils.ExtractorAsserts$SimulationConfig: void <init>(boolean,boolean,boolean,boolean)>(z0, z1, z2, z3);

        return;
    }

