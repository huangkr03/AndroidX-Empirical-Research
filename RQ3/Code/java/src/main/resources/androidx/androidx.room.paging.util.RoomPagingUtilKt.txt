androidx.room.paging.util.RoomPagingUtilKt
<androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult$Invalid INVALID>
<androidx.room.paging.util.RoomPagingUtilKt: int INITIAL_ITEM_COUNT>
    public static final androidx.paging.PagingSource$LoadResult$Invalid getINVALID()
    {
        androidx.paging.PagingSource$LoadResult$Invalid $r0;

        $r0 = <androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult$Invalid INVALID>;

        return $r0;
    }

    public static final int getLimit(androidx.paging.PagingSource$LoadParams, int)
    {
        androidx.paging.PagingSource$LoadParams r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: androidx.paging.PagingSource$LoadParams;

        i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "params");

        $z0 = r0 instanceof androidx.paging.PagingSource$LoadParams$Prepend;

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r0.<androidx.paging.PagingSource$LoadParams: int getLoadSize()>();

        if i0 >= $i1 goto label1;

        $i2 = i0;

        goto label3;

     label1:
        $i2 = virtualinvoke r0.<androidx.paging.PagingSource$LoadParams: int getLoadSize()>();

        goto label3;

     label2:
        $i2 = virtualinvoke r0.<androidx.paging.PagingSource$LoadParams: int getLoadSize()>();

     label3:
        return $i2;
    }

    public static final int getOffset(androidx.paging.PagingSource$LoadParams, int, int)
    {
        androidx.paging.PagingSource$LoadParams r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2;
        kotlin.NoWhenBranchMatchedException $r2;

        r0 := @parameter0: androidx.paging.PagingSource$LoadParams;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "params");

        r1 = r0;

        $z0 = r1 instanceof androidx.paging.PagingSource$LoadParams$Prepend;

        if $z0 == 0 goto label2;

        $i4 = virtualinvoke r0.<androidx.paging.PagingSource$LoadParams: int getLoadSize()>();

        if i0 >= $i4 goto label1;

        $i6 = 0;

        goto label6;

     label1:
        $i5 = virtualinvoke r0.<androidx.paging.PagingSource$LoadParams: int getLoadSize()>();

        $i6 = i0 - $i5;

        goto label6;

     label2:
        $z1 = r1 instanceof androidx.paging.PagingSource$LoadParams$Append;

        if $z1 == 0 goto label3;

        $i6 = i0;

        goto label6;

     label3:
        $z2 = r1 instanceof androidx.paging.PagingSource$LoadParams$Refresh;

        if $z2 == 0 goto label5;

        if i0 < i1 goto label4;

        $i2 = virtualinvoke r0.<androidx.paging.PagingSource$LoadParams: int getLoadSize()>();

        $i3 = i1 - $i2;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

        goto label6;

     label4:
        $i6 = i0;

        goto label6;

     label5:
        $r2 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r2.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r2;

     label6:
        return $i6;
    }

    public static final androidx.paging.PagingSource$LoadResult queryDatabase(androidx.paging.PagingSource$LoadParams, androidx.room.RoomSQLiteQuery, androidx.room.RoomDatabase, int, android.os.CancellationSignal, kotlin.jvm.functions.Function1)
    {
        androidx.paging.PagingSource$LoadParams r0;
        androidx.room.RoomSQLiteQuery r1, r6;
        androidx.room.RoomDatabase r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        android.os.CancellationSignal r3;
        kotlin.jvm.functions.Function1 r4;
        java.lang.String r5, $r14;
        android.database.Cursor r7;
        java.lang.Integer r8, r9, $r11, $r28, $r29;
        java.lang.Object $r10, $r22;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r17, $r18, $r19;
        androidx.room.RoomSQLiteQuery$Companion $r20;
        androidx.sqlite.db.SupportSQLiteQuery $r21;
        boolean $z0, $z1;
        androidx.paging.PagingSource$LoadResult$Page $r23;
        androidx.paging.PagingSource$LoadResult $r24;
        java.lang.Throwable $r25, r27;
        java.util.List r26;

        r0 := @parameter0: androidx.paging.PagingSource$LoadParams;

        r1 := @parameter1: androidx.room.RoomSQLiteQuery;

        r2 := @parameter2: androidx.room.RoomDatabase;

        i0 := @parameter3: int;

        r3 := @parameter4: android.os.CancellationSignal;

        r4 := @parameter5: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "params");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "sourceQuery");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "db");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "convertRows");

        $r10 = virtualinvoke r0.<androidx.paging.PagingSource$LoadParams: java.lang.Object getKey()>();

        $r11 = (java.lang.Integer) $r10;

        if $r11 == null goto label01;

        $i9 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        goto label02;

     label01:
        $i9 = 0;

     label02:
        i1 = $i9;

        i2 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: int getLimit(androidx.paging.PagingSource$LoadParams,int)>(r0, i1);

        i3 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: int getOffset(androidx.paging.PagingSource$LoadParams,int,int)>(r0, i1, i0);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT * FROM ( ");

        $r14 = virtualinvoke r1.<androidx.room.RoomSQLiteQuery: java.lang.String getSql()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ) LIMIT ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" OFFSET ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        r5 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery$Companion Companion>;

        $i4 = virtualinvoke r1.<androidx.room.RoomSQLiteQuery: int getArgCount()>();

        r6 = virtualinvoke $r20.<androidx.room.RoomSQLiteQuery$Companion: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>(r5, $i4);

        virtualinvoke r6.<androidx.room.RoomSQLiteQuery: void copyArgumentsFrom(androidx.room.RoomSQLiteQuery)>(r1);

        $r21 = (androidx.sqlite.db.SupportSQLiteQuery) r6;

        r7 = virtualinvoke r2.<androidx.room.RoomDatabase: android.database.Cursor query(androidx.sqlite.db.SupportSQLiteQuery,android.os.CancellationSignal)>($r21, r3);

     label03:
        $r22 = interfaceinvoke r4.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r7);

        r26 = (java.util.List) $r22;

     label04:
        interfaceinvoke r7.<android.database.Cursor: void close()>();

        virtualinvoke r6.<androidx.room.RoomSQLiteQuery: void release()>();

        goto label07;

     label05:
        $r25 := @caughtexception;

        r27 = $r25;

     label06:
        interfaceinvoke r7.<android.database.Cursor: void close()>();

        virtualinvoke r6.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r27;

     label07:
        $i5 = interfaceinvoke r26.<java.util.List: int size()>();

        i10 = i3 + $i5;

        $z0 = interfaceinvoke r26.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label08;

        $i8 = interfaceinvoke r26.<java.util.List: int size()>();

        if $i8 < i2 goto label08;

        if i10 < i0 goto label09;

     label08:
        $r28 = (java.lang.Integer) null;

        goto label10;

     label09:
        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

     label10:
        r8 = $r28;

        if i3 <= 0 goto label11;

        $z1 = interfaceinvoke r26.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label12;

     label11:
        $r29 = null;

        goto label13;

     label12:
        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

     label13:
        r9 = $r29;

        $r23 = new androidx.paging.PagingSource$LoadResult$Page;

        $i6 = i0 - i10;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i6);

        specialinvoke $r23.<androidx.paging.PagingSource$LoadResult$Page: void <init>(java.util.List,java.lang.Object,java.lang.Object,int,int)>(r26, r9, r8, i3, $i7);

        $r24 = (androidx.paging.PagingSource$LoadResult) $r23;

        return $r24;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    public static androidx.paging.PagingSource$LoadResult queryDatabase$default(androidx.paging.PagingSource$LoadParams, androidx.room.RoomSQLiteQuery, androidx.room.RoomDatabase, int, android.os.CancellationSignal, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.paging.PagingSource$LoadParams r0;
        androidx.room.RoomSQLiteQuery r1;
        androidx.room.RoomDatabase r2;
        int i0, i1, $i2;
        kotlin.jvm.functions.Function1 r3;
        java.lang.Object r4;
        androidx.paging.PagingSource$LoadResult $r5;
        android.os.CancellationSignal r6;

        r0 := @parameter0: androidx.paging.PagingSource$LoadParams;

        r1 := @parameter1: androidx.room.RoomSQLiteQuery;

        r2 := @parameter2: androidx.room.RoomDatabase;

        i0 := @parameter3: int;

        r6 := @parameter4: android.os.CancellationSignal;

        r3 := @parameter5: kotlin.jvm.functions.Function1;

        i1 := @parameter6: int;

        r4 := @parameter7: java.lang.Object;

        $i2 = i1 & 16;

        if $i2 == 0 goto label1;

        r6 = null;

     label1:
        $r5 = staticinvoke <androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult queryDatabase(androidx.paging.PagingSource$LoadParams,androidx.room.RoomSQLiteQuery,androidx.room.RoomDatabase,int,android.os.CancellationSignal,kotlin.jvm.functions.Function1)>(r0, r1, r2, i0, r6, r3);

        return $r5;
    }

    public static final int queryItemCount(androidx.room.RoomSQLiteQuery, androidx.room.RoomDatabase)
    {
        androidx.room.RoomSQLiteQuery r0, r3;
        androidx.room.RoomDatabase r1;
        java.lang.String r2, $r7;
        android.database.Cursor r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        androidx.room.RoomSQLiteQuery$Companion $r10;
        int $i0, i1;
        androidx.sqlite.db.SupportSQLiteQuery $r11;
        boolean $z0;
        java.lang.Throwable $r12, r13;
        byte b2;

        r0 := @parameter0: androidx.room.RoomSQLiteQuery;

        r1 := @parameter1: androidx.room.RoomDatabase;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "sourceQuery");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "db");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT COUNT(*) FROM ( ");

        $r7 = virtualinvoke r0.<androidx.room.RoomSQLiteQuery: java.lang.String getSql()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = <androidx.room.RoomSQLiteQuery: androidx.room.RoomSQLiteQuery$Companion Companion>;

        $i0 = virtualinvoke r0.<androidx.room.RoomSQLiteQuery: int getArgCount()>();

        r3 = virtualinvoke $r10.<androidx.room.RoomSQLiteQuery$Companion: androidx.room.RoomSQLiteQuery acquire(java.lang.String,int)>(r2, $i0);

        virtualinvoke r3.<androidx.room.RoomSQLiteQuery: void copyArgumentsFrom(androidx.room.RoomSQLiteQuery)>(r0);

        $r11 = (androidx.sqlite.db.SupportSQLiteQuery) r3;

        r4 = staticinvoke <androidx.room.RoomDatabase: android.database.Cursor query$default(androidx.room.RoomDatabase,androidx.sqlite.db.SupportSQLiteQuery,android.os.CancellationSignal,int,java.lang.Object)>(r1, $r11, null, 2, null);

     label1:
        $z0 = interfaceinvoke r4.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label3;

        i1 = interfaceinvoke r4.<android.database.Cursor: int getInt(int)>(0);

     label2:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        virtualinvoke r3.<androidx.room.RoomSQLiteQuery: void release()>();

        return i1;

     label3:
        b2 = 0;

     label4:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        virtualinvoke r3.<androidx.room.RoomSQLiteQuery: void release()>();

        return b2;

     label5:
        $r12 := @caughtexception;

        r13 = $r12;

     label6:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        virtualinvoke r3.<androidx.room.RoomSQLiteQuery: void release()>();

        throw r13;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static final java.lang.Integer getClippedRefreshKey(androidx.paging.PagingState)
    {
        androidx.paging.PagingState $r0;
        java.lang.Integer r1, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        androidx.paging.PagingConfig $r2;

        $r0 := @parameter0: androidx.paging.PagingState;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        r1 = virtualinvoke $r0.<androidx.paging.PagingState: java.lang.Integer getAnchorPosition()>();

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $r2 = virtualinvoke $r0.<androidx.paging.PagingState: androidx.paging.PagingConfig getConfig()>();

        $i1 = $r2.<androidx.paging.PagingConfig: int initialLoadSize>;

        $i2 = $i1 / 2;

        $i3 = $i0 - $i2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    static void <clinit>()
    {
        androidx.paging.PagingSource$LoadResult$Invalid $r0;

        $r0 = new androidx.paging.PagingSource$LoadResult$Invalid;

        specialinvoke $r0.<androidx.paging.PagingSource$LoadResult$Invalid: void <init>()>();

        <androidx.room.paging.util.RoomPagingUtilKt: androidx.paging.PagingSource$LoadResult$Invalid INVALID> = $r0;

        return;
    }

