androidx.compose.material.ripple.RippleIndicationInstance
<androidx.compose.material.ripple.RippleIndicationInstance: androidx.compose.material.ripple.StateLayer stateLayer>
    public void <init>(boolean, androidx.compose.runtime.State)
    {
        androidx.compose.material.ripple.RippleIndicationInstance r0;
        boolean z0;
        androidx.compose.runtime.State r1;
        androidx.compose.material.ripple.StateLayer $r2;

        r0 := @this: androidx.compose.material.ripple.RippleIndicationInstance;

        z0 := @parameter0: boolean;

        r1 := @parameter1: androidx.compose.runtime.State;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "rippleAlpha");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new androidx.compose.material.ripple.StateLayer;

        specialinvoke $r2.<androidx.compose.material.ripple.StateLayer: void <init>(boolean,androidx.compose.runtime.State)>(z0, r1);

        r0.<androidx.compose.material.ripple.RippleIndicationInstance: androidx.compose.material.ripple.StateLayer stateLayer> = $r2;

        return;
    }

<androidx.compose.material.ripple.RippleIndicationInstance: void addRipple(androidx.compose.foundation.interaction.PressInteraction$Press,kotlinx.coroutines.CoroutineScope)>
<androidx.compose.material.ripple.RippleIndicationInstance: void removeRipple(androidx.compose.foundation.interaction.PressInteraction$Press)>
    public final void updateStateLayer$material_ripple_release(androidx.compose.foundation.interaction.Interaction, kotlinx.coroutines.CoroutineScope)
    {
        androidx.compose.material.ripple.RippleIndicationInstance r0;
        androidx.compose.foundation.interaction.Interaction r1;
        kotlinx.coroutines.CoroutineScope r2;
        androidx.compose.material.ripple.StateLayer $r3;

        r0 := @this: androidx.compose.material.ripple.RippleIndicationInstance;

        r1 := @parameter0: androidx.compose.foundation.interaction.Interaction;

        r2 := @parameter1: kotlinx.coroutines.CoroutineScope;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "interaction");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "scope");

        $r3 = r0.<androidx.compose.material.ripple.RippleIndicationInstance: androidx.compose.material.ripple.StateLayer stateLayer>;

        virtualinvoke $r3.<androidx.compose.material.ripple.StateLayer: void handleInteraction(androidx.compose.foundation.interaction.Interaction,kotlinx.coroutines.CoroutineScope)>(r1, r2);

        return;
    }

    public final void drawStateLayer-H2RKhps(androidx.compose.ui.graphics.drawscope.DrawScope, float, long)
    {
        androidx.compose.material.ripple.RippleIndicationInstance r0;
        androidx.compose.ui.graphics.drawscope.DrawScope $r1;
        float f0;
        long l0;
        androidx.compose.material.ripple.StateLayer $r2;

        r0 := @this: androidx.compose.material.ripple.RippleIndicationInstance;

        $r1 := @parameter0: androidx.compose.ui.graphics.drawscope.DrawScope;

        f0 := @parameter1: float;

        l0 := @parameter2: long;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$drawStateLayer");

        $r2 = r0.<androidx.compose.material.ripple.RippleIndicationInstance: androidx.compose.material.ripple.StateLayer stateLayer>;

        virtualinvoke $r2.<androidx.compose.material.ripple.StateLayer: void drawStateLayer-H2RKhps(androidx.compose.ui.graphics.drawscope.DrawScope,float,long)>($r1, f0, l0);

        return;
    }

