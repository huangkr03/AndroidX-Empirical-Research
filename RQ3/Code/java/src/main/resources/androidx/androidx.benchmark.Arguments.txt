androidx.benchmark.Arguments
<androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>
<androidx.benchmark.Arguments: java.util.Set suppressedErrors>
<androidx.benchmark.Arguments: java.util.Set enabledRules>
<androidx.benchmark.Arguments: boolean enableCompilation>
<androidx.benchmark.Arguments: boolean outputEnable>
<androidx.benchmark.Arguments: boolean startupMode>
<androidx.benchmark.Arguments: boolean dryRunMode>
<androidx.benchmark.Arguments: java.lang.Integer iterations>
<androidx.benchmark.Arguments: androidx.benchmark.Profiler _profiler>
<androidx.benchmark.Arguments: int profilerSampleFrequency>
<androidx.benchmark.Arguments: long profilerSampleDurationSeconds>
<androidx.benchmark.Arguments: java.lang.String error>
<androidx.benchmark.Arguments: java.lang.String additionalTestOutputDir>
<androidx.benchmark.Arguments: java.lang.String prefix>
    private void <init>()
    {
        androidx.benchmark.Arguments r0;

        r0 := @this: androidx.benchmark.Arguments;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.util.Set getSuppressedErrors()
    {
        androidx.benchmark.Arguments r0;
        java.util.Set $r1;

        r0 := @this: androidx.benchmark.Arguments;

        $r1 = <androidx.benchmark.Arguments: java.util.Set suppressedErrors>;

        return $r1;
    }

    public final java.util.Set getEnabledRules()
    {
        androidx.benchmark.Arguments r0;
        java.util.Set $r1;

        r0 := @this: androidx.benchmark.Arguments;

        $r1 = <androidx.benchmark.Arguments: java.util.Set enabledRules>;

        return $r1;
    }

    public final boolean getEnableCompilation()
    {
        androidx.benchmark.Arguments r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.Arguments;

        $z0 = <androidx.benchmark.Arguments: boolean enableCompilation>;

        return $z0;
    }

    public final boolean getOutputEnable$benchmark_common_release()
    {
        androidx.benchmark.Arguments r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.Arguments;

        $z0 = <androidx.benchmark.Arguments: boolean outputEnable>;

        return $z0;
    }

    public final boolean getStartupMode$benchmark_common_release()
    {
        androidx.benchmark.Arguments r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.Arguments;

        $z0 = <androidx.benchmark.Arguments: boolean startupMode>;

        return $z0;
    }

    public final boolean getDryRunMode$benchmark_common_release()
    {
        androidx.benchmark.Arguments r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.Arguments;

        $z0 = <androidx.benchmark.Arguments: boolean dryRunMode>;

        return $z0;
    }

    public final java.lang.Integer getIterations$benchmark_common_release()
    {
        androidx.benchmark.Arguments r0;
        java.lang.Integer $r1;

        r0 := @this: androidx.benchmark.Arguments;

        $r1 = <androidx.benchmark.Arguments: java.lang.Integer iterations>;

        return $r1;
    }

    public final androidx.benchmark.Profiler getProfiler$benchmark_common_release()
    {
        androidx.benchmark.Arguments r0;
        androidx.benchmark.Profiler $r1, $r2;

        r0 := @this: androidx.benchmark.Arguments;

        $r1 = staticinvoke <androidx.benchmark.ArgumentsKt: androidx.benchmark.Profiler getProfilerOverride()>();

        if $r1 == null goto label1;

        $r2 = staticinvoke <androidx.benchmark.ArgumentsKt: androidx.benchmark.Profiler getProfilerOverride()>();

        goto label2;

     label1:
        $r2 = <androidx.benchmark.Arguments: androidx.benchmark.Profiler _profiler>;

     label2:
        return $r2;
    }

    public final int getProfilerSampleFrequency$benchmark_common_release()
    {
        androidx.benchmark.Arguments r0;
        int $i0;

        r0 := @this: androidx.benchmark.Arguments;

        $i0 = <androidx.benchmark.Arguments: int profilerSampleFrequency>;

        return $i0;
    }

    public final long getProfilerSampleDurationSeconds$benchmark_common_release()
    {
        androidx.benchmark.Arguments r0;
        long $l0;

        r0 := @this: androidx.benchmark.Arguments;

        $l0 = <androidx.benchmark.Arguments: long profilerSampleDurationSeconds>;

        return $l0;
    }

    public final java.lang.String getError$benchmark_common_release()
    {
        androidx.benchmark.Arguments r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.Arguments;

        $r1 = <androidx.benchmark.Arguments: java.lang.String error>;

        return $r1;
    }

    public final void setError$benchmark_common_release(java.lang.String)
    {
        androidx.benchmark.Arguments r0;
        java.lang.String r1;

        r0 := @this: androidx.benchmark.Arguments;

        r1 := @parameter0: java.lang.String;

        <androidx.benchmark.Arguments: java.lang.String error> = r1;

        return;
    }

    public final java.lang.String getAdditionalTestOutputDir$benchmark_common_release()
    {
        androidx.benchmark.Arguments r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.Arguments;

        $r1 = <androidx.benchmark.Arguments: java.lang.String additionalTestOutputDir>;

        return $r1;
    }

    private final java.lang.String getBenchmarkArgument(android.os.Bundle, java.lang.String, java.lang.String)
    {
        androidx.benchmark.Arguments r0;
        android.os.Bundle $r1;
        java.lang.String r2, r3, $r4, $r5;

        r0 := @this: androidx.benchmark.Arguments;

        $r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("androidx.benchmark.", r2);

        $r5 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>($r4, r3);

        return $r5;
    }

    static java.lang.String getBenchmarkArgument$default(androidx.benchmark.Arguments, android.os.Bundle, java.lang.String, java.lang.String, int, java.lang.Object)
    {
        androidx.benchmark.Arguments r0;
        android.os.Bundle r1;
        java.lang.String r2, $r4, r5;
        int i0, $i1;
        java.lang.Object r3;

        r0 := @parameter0: androidx.benchmark.Arguments;

        r1 := @parameter1: android.os.Bundle;

        r2 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r5 = null;

     label1:
        $r4 = specialinvoke r0.<androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument(android.os.Bundle,java.lang.String,java.lang.String)>(r1, r2, r5);

        return $r4;
    }

    private final androidx.benchmark.Profiler getProfiler(android.os.Bundle, boolean)
    {
        androidx.benchmark.Arguments r0;
        android.os.Bundle $r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String r2, r3, r5, $r7, $r11, $r18;
        androidx.benchmark.Profiler r4;
        androidx.benchmark.Profiler$Companion $r6;
        java.lang.CharSequence $r8, $r9, $r10;
        int $i0;
        java.util.Locale $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17;

        r0 := @this: androidx.benchmark.Arguments;

        $r1 := @parameter0: android.os.Bundle;

        z0 := @parameter1: boolean;

        r2 = "profiling.mode";

        r3 = specialinvoke r0.<androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument(android.os.Bundle,java.lang.String,java.lang.String)>($r1, r2, "");

        $r6 = <androidx.benchmark.Profiler: androidx.benchmark.Profiler$Companion Companion>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "argumentValue");

        r4 = virtualinvoke $r6.<androidx.benchmark.Profiler$Companion: androidx.benchmark.Profiler getByName(java.lang.String)>(r3);

        if r4 != null goto label3;

        $r8 = (java.lang.CharSequence) r3;

        $i0 = interfaceinvoke $r8.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 == 0 goto label3;

        $r9 = (java.lang.CharSequence) r3;

        $r10 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        $r12 = <java.util.Locale: java.util.Locale ROOT>;

        r5 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r12);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r5, "this as java.lang.String).toLowerCase(Locale.ROOT)");

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r5, "none");

        if $z2 != 0 goto label3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse androidx.benchmark.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        <androidx.benchmark.Arguments: java.lang.String error> = $r18;

        return null;

     label3:
        if r4 != null goto label4;

        $z4 = 0;

        goto label6;

     label4:
        $z1 = virtualinvoke r4.<androidx.benchmark.Profiler: boolean getRequiresLibraryOutputDir()>();

        if $z1 != 1 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        if $z4 == 0 goto label7;

        if z0 != 0 goto label7;

        $r7 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Output is not enabled, so cannot profile with mode ", r3);

        <androidx.benchmark.Arguments: java.lang.String error> = $r7;

        return null;

     label7:
        return r4;
    }

    static void <clinit>()
    {
        android.os.Bundle r0, $r68;
        androidx.benchmark.Arguments$RuleType[] r1, $r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, i10, $i11;
        androidx.benchmark.Arguments$RuleType r2, r3, r4, $r109;
        androidx.benchmark.Arguments $r5, $r6, $r7, $r8, $r9, $r18, $r34, $r35, $r36, $r38, $r47, $r50, $r66, $r67, $r72, $r115;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z13, $z14, $z15, $z16, $z17, $z18, $z21, $z25, $z27, $z33, $z35, $z39, z40, z41;
        java.lang.CharSequence $r10, $r22, $r24, $r58, $r59, $r60, $r62, $r63, $r64, $r112, $r113, $r117, $r118;
        java.util.List $r11, $r13, $r15, $r25, $r27, $r29, $r31;
        java.util.ArrayList $r12, $r14, $r26, $r28, $r30;
        java.lang.Iterable $r16, $r32, $r77, $r83, $r90, $r96, $r101;
        java.util.Set $r17, $r33;
        androidx.benchmark.Arguments$3 $r20;
        kotlin.jvm.functions.Function1 $r21;
        java.lang.String $r23, $r39, $r44, $r52, $r54, $r56, $r61, $r65, $r69, $r70, $r71, $r73, $r75, r81, r87, $r88, r94, r100, r105, r107, r108, $r110, $r111, $r114, $r116, $r119;
        androidx.benchmark.Profiler $r37, $r42, $r120;
        java.lang.StringBuilder $r40, $r41, $r45, $r46, $r48, $r49, $r51;
        java.lang.Class $r43;
        long $l6, $l12;
        java.lang.IllegalArgumentException $r53;
        java.util.Locale $r55, $r57;
        java.lang.Integer $r74;
        char[] $r76, $r89;
        java.util.Collection r78, r82, r84, r91, r95, r97, r102, r106;
        java.util.Iterator r79, r85, r92, r98, r103;
        java.lang.Object r80, r86, r93, r99, r104;

        $r5 = new androidx.benchmark.Arguments;

        specialinvoke $r5.<androidx.benchmark.Arguments: void <init>()>();

        <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE> = $r5;

        $r68 = staticinvoke <androidx.benchmark.ArgumentsKt: android.os.Bundle getArgumentSource()>();

        if $r68 != null goto label01;

        $r68 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.os.Bundle getArguments()>();

     label01:
        r0 = $r68;

        $r6 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r0, "arguments");

        $r69 = staticinvoke <androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument$default(androidx.benchmark.Arguments,android.os.Bundle,java.lang.String,java.lang.String,int,java.lang.Object)>($r6, r0, "dryRunMode.enable", null, 2, null);

        if $r69 != null goto label02;

        $z13 = 0;

        goto label03;

     label02:
        $z13 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r69);

     label03:
        <androidx.benchmark.Arguments: boolean dryRunMode> = $z13;

        $r7 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z1 = <androidx.benchmark.Arguments: boolean dryRunMode>;

        if $z1 != 0 goto label06;

        $r67 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r70 = staticinvoke <androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument$default(androidx.benchmark.Arguments,android.os.Bundle,java.lang.String,java.lang.String,int,java.lang.Object)>($r67, r0, "startupMode.enable", null, 2, null);

        if $r70 != null goto label04;

        $z14 = 0;

        goto label05;

     label04:
        $z14 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r70);

     label05:
        if $z14 == 0 goto label06;

        $z15 = 1;

        goto label07;

     label06:
        $z15 = 0;

     label07:
        <androidx.benchmark.Arguments: boolean startupMode> = $z15;

        $r8 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z16 = <androidx.benchmark.Arguments: boolean dryRunMode>;

        if $z16 != 0 goto label10;

        $r66 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r71 = staticinvoke <androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument$default(androidx.benchmark.Arguments,android.os.Bundle,java.lang.String,java.lang.String,int,java.lang.Object)>($r66, r0, "output.enable", null, 2, null);

        if $r71 != null goto label08;

        $z17 = 1;

        goto label09;

     label08:
        $z17 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r71);

     label09:
        if $z17 == 0 goto label10;

        $z18 = 1;

        goto label11;

     label10:
        $z18 = 0;

     label11:
        <androidx.benchmark.Arguments: boolean outputEnable> = $z18;

        $r72 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r73 = staticinvoke <androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument$default(androidx.benchmark.Arguments,android.os.Bundle,java.lang.String,java.lang.String,int,java.lang.Object)>($r72, r0, "iterations", null, 2, null);

        if $r73 != null goto label12;

        $r74 = null;

        goto label13;

     label12:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r73);

        $r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

     label13:
        <androidx.benchmark.Arguments: java.lang.Integer iterations> = $r74;

        $r9 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r75 = specialinvoke $r9.<androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument(android.os.Bundle,java.lang.String,java.lang.String)>(r0, "suppressErrors", "");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r75, "arguments.getBenchmarkAr\u2026ent(\"suppressErrors\", \"\")");

        $r10 = (java.lang.CharSequence) $r75;

        $r76 = newarray (char)[1];

        $r76[0] = 44;

        $r11 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,char[],boolean,int,int,java.lang.Object)>($r10, $r76, 0, 0, 6, null);

        $r77 = (java.lang.Iterable) $r11;

        $r12 = new java.util.ArrayList;

        $i2 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r77, 10);

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i2);

        r78 = (java.util.Collection) $r12;

        r79 = interfaceinvoke $r77.<java.lang.Iterable: java.util.Iterator iterator()>();

     label14:
        $z21 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>();

        if $z21 == 0 goto label15;

        r80 = interfaceinvoke r79.<java.util.Iterator: java.lang.Object next()>();

        r81 = (java.lang.String) r80;

        r82 = r78;

        $r63 = (java.lang.CharSequence) r81;

        $r64 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r82.<java.util.Collection: boolean add(java.lang.Object)>($r65);

        goto label14;

     label15:
        $r13 = (java.util.List) r78;

        $r83 = (java.lang.Iterable) $r13;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r84 = (java.util.Collection) $r14;

        r85 = interfaceinvoke $r83.<java.lang.Iterable: java.util.Iterator iterator()>();

     label16:
        $z25 = interfaceinvoke r85.<java.util.Iterator: boolean hasNext()>();

        if $z25 == 0 goto label19;

        r86 = interfaceinvoke r85.<java.util.Iterator: java.lang.Object next()>();

        r87 = (java.lang.String) r86;

        $r62 = (java.lang.CharSequence) r87;

        $i9 = interfaceinvoke $r62.<java.lang.CharSequence: int length()>();

        if $i9 <= 0 goto label17;

        $z27 = 1;

        goto label18;

     label17:
        $z27 = 0;

     label18:
        if $z27 == 0 goto label16;

        interfaceinvoke r84.<java.util.Collection: boolean add(java.lang.Object)>(r86);

        goto label16;

     label19:
        $r15 = (java.util.List) r84;

        $r16 = (java.lang.Iterable) $r15;

        $r17 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r16);

        <androidx.benchmark.Arguments: java.util.Set suppressedErrors> = $r17;

        $r18 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r19 = staticinvoke <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType[] values()>();

        $r22 = (java.lang.CharSequence) ",";

        $r20 = <androidx.benchmark.Arguments$3: androidx.benchmark.Arguments$3 INSTANCE>;

        $r21 = (kotlin.jvm.functions.Function1) $r20;

        $r23 = staticinvoke <kotlin.collections.ArraysKt: java.lang.String joinToString$default(java.lang.Object[],java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r19, $r22, null, null, 0, null, $r21, 30, null);

        $r88 = specialinvoke $r18.<androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument(android.os.Bundle,java.lang.String,java.lang.String)>(r0, "enabledRules", $r23);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r88, "arguments.getBenchmarkAr\u2026it.toString() }\n        )");

        $r24 = (java.lang.CharSequence) $r88;

        $r89 = newarray (char)[1];

        $r89[0] = 44;

        $r25 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,char[],boolean,int,int,java.lang.Object)>($r24, $r89, 0, 0, 6, null);

        $r90 = (java.lang.Iterable) $r25;

        $r26 = new java.util.ArrayList;

        $i3 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r90, 10);

        specialinvoke $r26.<java.util.ArrayList: void <init>(int)>($i3);

        r91 = (java.util.Collection) $r26;

        r92 = interfaceinvoke $r90.<java.lang.Iterable: java.util.Iterator iterator()>();

     label20:
        $z2 = interfaceinvoke r92.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label21;

        r93 = interfaceinvoke r92.<java.util.Iterator: java.lang.Object next()>();

        r94 = (java.lang.String) r93;

        r95 = r91;

        $r59 = (java.lang.CharSequence) r94;

        $r60 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r95.<java.util.Collection: boolean add(java.lang.Object)>($r61);

        goto label20;

     label21:
        $r27 = (java.util.List) r91;

        $r96 = (java.lang.Iterable) $r27;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        r97 = (java.util.Collection) $r28;

        r98 = interfaceinvoke $r96.<java.lang.Iterable: java.util.Iterator iterator()>();

     label22:
        $z33 = interfaceinvoke r98.<java.util.Iterator: boolean hasNext()>();

        if $z33 == 0 goto label25;

        r99 = interfaceinvoke r98.<java.util.Iterator: java.lang.Object next()>();

        r100 = (java.lang.String) r99;

        $r58 = (java.lang.CharSequence) r100;

        $i8 = interfaceinvoke $r58.<java.lang.CharSequence: int length()>();

        if $i8 <= 0 goto label23;

        $z35 = 1;

        goto label24;

     label23:
        $z35 = 0;

     label24:
        if $z35 == 0 goto label22;

        interfaceinvoke r97.<java.util.Collection: boolean add(java.lang.Object)>(r99);

        goto label22;

     label25:
        $r29 = (java.util.List) r97;

        $r101 = (java.lang.Iterable) $r29;

        $r30 = new java.util.ArrayList;

        $i4 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r101, 10);

        specialinvoke $r30.<java.util.ArrayList: void <init>(int)>($i4);

        r102 = (java.util.Collection) $r30;

        r103 = interfaceinvoke $r101.<java.lang.Iterable: java.util.Iterator iterator()>();

     label26:
        $z3 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label31;

        r104 = interfaceinvoke r103.<java.util.Iterator: java.lang.Object next()>();

        r105 = (java.lang.String) r104;

        r106 = r102;

        r1 = staticinvoke <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType[] values()>();

        i10 = 0;

        i0 = lengthof r1;

     label27:
        if i10 >= i0 goto label28;

        r2 = r1[i10];

        i10 = i10 + 1;

        r3 = r2;

        $r55 = <java.util.Locale: java.util.Locale ROOT>;

        r107 = virtualinvoke r105.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r55);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r107, "this as java.lang.String).toLowerCase(Locale.ROOT)");

        $r56 = virtualinvoke r3.<androidx.benchmark.Arguments$RuleType: java.lang.String toString()>();

        $r57 = <java.util.Locale: java.util.Locale ROOT>;

        r108 = virtualinvoke $r56.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r57);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r108, "this as java.lang.String).toLowerCase(Locale.ROOT)");

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r107, r108);

        if $z8 == 0 goto label27;

        $r109 = r2;

        goto label29;

     label28:
        $r109 = null;

     label29:
        r4 = $r109;

        if r4 != null goto label30;

        $r53 = new java.lang.IllegalArgumentException;

        $r54 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Unable to parse enabledRules arg: ", r105);

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r54);

        throw $r53;

     label30:
        interfaceinvoke r106.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        goto label26;

     label31:
        $r31 = (java.util.List) r102;

        $r32 = (java.lang.Iterable) $r31;

        $r33 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r32);

        <androidx.benchmark.Arguments: java.util.Set enabledRules> = $r33;

        $r34 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r110 = staticinvoke <androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument$default(androidx.benchmark.Arguments,android.os.Bundle,java.lang.String,java.lang.String,int,java.lang.Object)>($r34, r0, "compilation.enabled", null, 2, null);

        if $r110 != null goto label32;

        $z39 = 1;

        goto label33;

     label32:
        $z39 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r110);

     label33:
        <androidx.benchmark.Arguments: boolean enableCompilation> = $z39;

        $r36 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r35 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $z4 = <androidx.benchmark.Arguments: boolean outputEnable>;

        $r37 = specialinvoke $r36.<androidx.benchmark.Arguments: androidx.benchmark.Profiler getProfiler(android.os.Bundle,boolean)>(r0, $z4);

        <androidx.benchmark.Arguments: androidx.benchmark.Profiler _profiler> = $r37;

        $r38 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r111 = staticinvoke <androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument$default(androidx.benchmark.Arguments,android.os.Bundle,java.lang.String,java.lang.String,int,java.lang.Object)>($r38, r0, "profiling.sampleFrequency", null, 2, null);

        if $r111 != null goto label34;

        $i11 = 1000;

        goto label38;

     label34:
        $r112 = (java.lang.CharSequence) $r111;

        $z5 = staticinvoke <kotlin.text.StringsKt: boolean isBlank(java.lang.CharSequence)>($r112);

        if $z5 == 0 goto label35;

        z40 = 0;

        $r113 = null;

        goto label36;

     label35:
        $r113 = $r112;

     label36:
        $r114 = (java.lang.String) $r113;

        if $r114 != null goto label37;

        $i11 = 1000;

        goto label38;

     label37:
        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r114);

     label38:
        <androidx.benchmark.Arguments: int profilerSampleFrequency> = $i11;

        $r115 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $r116 = staticinvoke <androidx.benchmark.Arguments: java.lang.String getBenchmarkArgument$default(androidx.benchmark.Arguments,android.os.Bundle,java.lang.String,java.lang.String,int,java.lang.Object)>($r115, r0, "profiling.sampleDurationSeconds", null, 2, null);

        if $r116 != null goto label39;

        $l12 = 5L;

        goto label43;

     label39:
        $r117 = (java.lang.CharSequence) $r116;

        $z6 = staticinvoke <kotlin.text.StringsKt: boolean isBlank(java.lang.CharSequence)>($r117);

        if $z6 == 0 goto label40;

        z41 = 0;

        $r118 = null;

        goto label41;

     label40:
        $r118 = $r117;

     label41:
        $r119 = (java.lang.String) $r118;

        if $r119 != null goto label42;

        $l12 = 5L;

        goto label43;

     label42:
        $l12 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r119);

     label43:
        <androidx.benchmark.Arguments: long profilerSampleDurationSeconds> = $l12;

        $r120 = <androidx.benchmark.Arguments: androidx.benchmark.Profiler _profiler>;

        if $r120 == null goto label44;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profiler ");

        $r42 = <androidx.benchmark.Arguments: androidx.benchmark.Profiler _profiler>;

        $r43 = virtualinvoke $r42.<java.lang.Object: java.lang.Class getClass()>();

        $r44 = virtualinvoke $r43.<java.lang.Class: java.lang.String getSimpleName()>();

        $r45 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", freq ");

        $r47 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $i5 = <androidx.benchmark.Arguments: int profilerSampleFrequency>;

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", duration ");

        $r50 = <androidx.benchmark.Arguments: androidx.benchmark.Arguments INSTANCE>;

        $l6 = <androidx.benchmark.Arguments: long profilerSampleDurationSeconds>;

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Benchmark", $r52);

     label44:
        $r39 = virtualinvoke r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>("additionalTestOutputDir");

        <androidx.benchmark.Arguments: java.lang.String additionalTestOutputDir> = $r39;

        return;
    }

androidx.benchmark.Arguments$3
<androidx.benchmark.Arguments$3: androidx.benchmark.Arguments$3 INSTANCE>
    void <init>()
    {
        androidx.benchmark.Arguments$3 r0;

        r0 := @this: androidx.benchmark.Arguments$3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.CharSequence invoke(androidx.benchmark.Arguments$RuleType)
    {
        androidx.benchmark.Arguments$3 r0;
        androidx.benchmark.Arguments$RuleType r1;
        java.lang.String $r2;
        java.lang.CharSequence $r3;

        r0 := @this: androidx.benchmark.Arguments$3;

        r1 := @parameter0: androidx.benchmark.Arguments$RuleType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        $r2 = virtualinvoke r1.<androidx.benchmark.Arguments$RuleType: java.lang.String toString()>();

        $r3 = (java.lang.CharSequence) $r2;

        return $r3;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.benchmark.Arguments$3 r0;
        java.lang.Object r1;
        androidx.benchmark.Arguments$RuleType $r2;
        java.lang.CharSequence $r3;

        r0 := @this: androidx.benchmark.Arguments$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.benchmark.Arguments$RuleType) r1;

        $r3 = virtualinvoke r0.<androidx.benchmark.Arguments$3: java.lang.CharSequence invoke(androidx.benchmark.Arguments$RuleType)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.benchmark.Arguments$3 $r0;

        $r0 = new androidx.benchmark.Arguments$3;

        specialinvoke $r0.<androidx.benchmark.Arguments$3: void <init>()>();

        <androidx.benchmark.Arguments$3: androidx.benchmark.Arguments$3 INSTANCE> = $r0;

        return;
    }

androidx.benchmark.Arguments$RuleType
<androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType Microbenchmark>
<androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType Macrobenchmark>
<androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType BaselineProfile>
<androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.benchmark.Arguments$RuleType r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.benchmark.Arguments$RuleType;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.benchmark.Arguments$RuleType[] values()
    {
        androidx.benchmark.Arguments$RuleType[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.benchmark.Arguments$RuleType[]) $r1;

        return $r2;
    }

    public static androidx.benchmark.Arguments$RuleType valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.benchmark.Arguments$RuleType $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/benchmark/Arguments$RuleType;", r0);

        $r2 = (androidx.benchmark.Arguments$RuleType) $r1;

        return $r2;
    }

    private static final androidx.benchmark.Arguments$RuleType[] $values()
    {
        androidx.benchmark.Arguments$RuleType[] r0;
        androidx.benchmark.Arguments$RuleType $r1, $r2, $r3;

        r0 = newarray (androidx.benchmark.Arguments$RuleType)[3];

        $r1 = <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType Microbenchmark>;

        r0[0] = $r1;

        $r2 = <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType Macrobenchmark>;

        r0[1] = $r2;

        $r3 = <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType BaselineProfile>;

        r0[2] = $r3;

        return r0;
    }

    static void <clinit>()
    {
        androidx.benchmark.Arguments$RuleType $r0, $r1, $r2;
        androidx.benchmark.Arguments$RuleType[] $r3;

        $r0 = new androidx.benchmark.Arguments$RuleType;

        specialinvoke $r0.<androidx.benchmark.Arguments$RuleType: void <init>(java.lang.String,int)>("Microbenchmark", 0);

        <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType Microbenchmark> = $r0;

        $r1 = new androidx.benchmark.Arguments$RuleType;

        specialinvoke $r1.<androidx.benchmark.Arguments$RuleType: void <init>(java.lang.String,int)>("Macrobenchmark", 1);

        <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType Macrobenchmark> = $r1;

        $r2 = new androidx.benchmark.Arguments$RuleType;

        specialinvoke $r2.<androidx.benchmark.Arguments$RuleType: void <init>(java.lang.String,int)>("BaselineProfile", 2);

        <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType BaselineProfile> = $r2;

        $r3 = staticinvoke <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType[] $values()>();

        <androidx.benchmark.Arguments$RuleType: androidx.benchmark.Arguments$RuleType[] $VALUES> = $r3;

        return;
    }

