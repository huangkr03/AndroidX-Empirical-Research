kotlin.reflect.TypesJVMKt
    public static final java.lang.reflect.Type access$computeJavaType(kotlin.reflect.KType, boolean)
    {
        boolean $z0;
        java.lang.reflect.Type $r0;
        kotlin.reflect.KType $r1;

        $r1 := @parameter0: kotlin.reflect.KType;

        $z0 := @parameter1: boolean;

        $r0 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r1, $z0);

        return $r0;
    }

    public static final java.lang.String access$typeToString(java.lang.reflect.Type)
    {
        java.lang.String $r0;
        java.lang.reflect.Type $r1;

        $r1 := @parameter0: java.lang.reflect.Type;

        $r0 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.String typeToString(java.lang.reflect.Type)>($r1);

        return $r0;
    }

    private static final java.lang.reflect.Type computeJavaType(kotlin.reflect.KType, boolean)
    {
        kotlin.reflect.KType $r0;
        boolean $z0, $z1;
        kotlin.reflect.KClassifier $r1;
        kotlin.reflect.KTypeParameter $r2;
        kotlin.reflect.KClass $r3;
        java.lang.Class $r4, $r6;
        java.util.List $r5;
        java.lang.Object $r7;
        kotlin.reflect.KTypeProjection $r8;
        kotlin.reflect.KVariance $r9;
        int[] $r10;
        int $i0;
        java.lang.reflect.Type $r11;
        java.lang.StringBuilder $r12, r17;
        java.lang.String $r13;
        kotlin.reflect.TypeVariableImpl r14;
        kotlin.NoWhenBranchMatchedException r15;
        kotlin.reflect.GenericArrayTypeImpl r16;
        java.lang.IllegalArgumentException r18;
        java.lang.UnsupportedOperationException r19;
        java.lang.Throwable r20;

        $r0 := @parameter0: kotlin.reflect.KType;

        $z0 := @parameter1: boolean;

        $r1 = interfaceinvoke $r0.<kotlin.reflect.KType: kotlin.reflect.KClassifier getClassifier()>();

        $z1 = $r1 instanceof kotlin.reflect.KTypeParameter;

        if $z1 == 0 goto label01;

        r14 = new kotlin.reflect.TypeVariableImpl;

        $r2 = (kotlin.reflect.KTypeParameter) $r1;

        specialinvoke r14.<kotlin.reflect.TypeVariableImpl: void <init>(kotlin.reflect.KTypeParameter)>($r2);

        return r14;

     label01:
        $z1 = $r1 instanceof kotlin.reflect.KClass;

        if $z1 == 0 goto label12;

        $r3 = (kotlin.reflect.KClass) $r1;

        if $z0 == 0 goto label02;

        $r4 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaObjectType(kotlin.reflect.KClass)>($r3);

        goto label03;

     label02:
        $r4 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>($r3);

     label03:
        $r5 = interfaceinvoke $r0.<kotlin.reflect.KType: java.util.List getArguments()>();

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label04;

        $r11 = (java.lang.reflect.Type) $r4;

        return $r11;

     label04:
        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label11;

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label05;

        $r11 = (java.lang.reflect.Type) $r4;

        return $r11;

     label05:
        $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.Object singleOrNull(java.util.List)>($r5);

        $r8 = (kotlin.reflect.KTypeProjection) $r7;

        if $r8 == null goto label10;

        $r9 = virtualinvoke $r8.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance component1()>();

        $r0 = virtualinvoke $r8.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType component2()>();

        if $r9 != null goto label07;

     label06:
        $r11 = (java.lang.reflect.Type) $r4;

        return $r11;

     label07:
        $r10 = <kotlin.reflect.TypesJVMKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r9.<kotlin.reflect.KVariance: int ordinal()>();

        $i0 = $r10[$i0];

        lookupswitch($i0)
        {
            case -1: goto label06;
            case 0: goto label08;
            case 1: goto label06;
            case 2: goto label09;
            case 3: goto label09;
            default: goto label08;
        };

     label08:
        r15 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r15.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        r20 = (java.lang.Throwable) r15;

        throw r20;

     label09:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r0);

        $r11 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType$default(kotlin.reflect.KType,boolean,int,java.lang.Object)>($r0, 0, 1, null);

        $z0 = $r11 instanceof java.lang.Class;

        if $z0 != 0 goto label13;

        r16 = new kotlin.reflect.GenericArrayTypeImpl;

        specialinvoke r16.<kotlin.reflect.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r11);

        return r16;

     label10:
        r18 = new java.lang.IllegalArgumentException;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kotlin.Array must have exactly one type argument: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw r18;

     label11:
        $r11 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type createPossiblyInnerType(java.lang.Class,java.util.List)>($r4, $r5);

        return $r11;

     label12:
        r19 = new java.lang.UnsupportedOperationException;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported type classifier: ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r13);

        throw r19;

     label13:
        $r11 = (java.lang.reflect.Type) $r4;

        return $r11;
    }

    static java.lang.reflect.Type computeJavaType$default(kotlin.reflect.KType, boolean, int, java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.reflect.Type $r1;
        kotlin.reflect.KType $r2;
        boolean $z0;
        int $i0;

        $r2 := @parameter0: kotlin.reflect.KType;

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        $z0 = 0;

     label1:
        $r1 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r2, $z0);

        return $r1;
    }

    private static final java.lang.reflect.Type createPossiblyInnerType(java.lang.Class, java.util.List)
    {
        java.lang.Class $r0, $r2;
        java.util.List $r1, $r9;
        java.util.ArrayList $r3, r11;
        int $i0, $i1;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        kotlin.reflect.KTypeProjection $r6;
        java.lang.reflect.Type $r7, $r10;
        java.lang.reflect.TypeVariable[] $r8;
        kotlin.reflect.ParameterizedTypeImpl r12;
        java.lang.Iterable r13;
        java.util.Collection r14;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.util.List;

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        if $r2 != null goto label3;

        r11 = new java.util.ArrayList;

        $r3 = r11;

        r13 = (java.lang.Iterable) $r1;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>(r13, 10);

        specialinvoke r11.<java.util.ArrayList: void <init>(int)>($i0);

        r13 = (java.lang.Iterable) $r1;

        $r4 = interfaceinvoke r13.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (kotlin.reflect.KTypeProjection) $r5;

        $r7 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type getJavaType(kotlin.reflect.KTypeProjection)>($r6);

        r14 = (java.util.Collection) $r3;

        interfaceinvoke r14.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        r12 = new kotlin.reflect.ParameterizedTypeImpl;

        $r1 = (java.util.List) $r3;

        specialinvoke r12.<kotlin.reflect.ParameterizedTypeImpl: void <init>(java.lang.Class,java.lang.reflect.Type,java.util.List)>($r0, null, $r1);

        return r12;

     label3:
        $i0 = virtualinvoke $r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label6;

        r11 = new java.util.ArrayList;

        $r3 = r11;

        r13 = (java.lang.Iterable) $r1;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>(r13, 10);

        specialinvoke r11.<java.util.ArrayList: void <init>(int)>($i0);

        r13 = (java.lang.Iterable) $r1;

        $r4 = interfaceinvoke r13.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (kotlin.reflect.KTypeProjection) $r5;

        $r7 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type getJavaType(kotlin.reflect.KTypeProjection)>($r6);

        r14 = (java.util.Collection) $r3;

        interfaceinvoke r14.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label4;

     label5:
        r12 = new kotlin.reflect.ParameterizedTypeImpl;

        $r7 = (java.lang.reflect.Type) $r2;

        $r1 = (java.util.List) $r3;

        specialinvoke r12.<kotlin.reflect.ParameterizedTypeImpl: void <init>(java.lang.Class,java.lang.reflect.Type,java.util.List)>($r0, $r7, $r1);

        return r12;

     label6:
        $r8 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i0 = lengthof $r8;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r9 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>($i0, $i1);

        $r7 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type createPossiblyInnerType(java.lang.Class,java.util.List)>($r2, $r9);

        $r1 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(0, $i0);

        r11 = new java.util.ArrayList;

        $r3 = r11;

        r13 = (java.lang.Iterable) $r1;

        $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>(r13, 10);

        specialinvoke r11.<java.util.ArrayList: void <init>(int)>($i0);

        r13 = (java.lang.Iterable) $r1;

        $r4 = interfaceinvoke r13.<java.lang.Iterable: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (kotlin.reflect.KTypeProjection) $r5;

        $r10 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type getJavaType(kotlin.reflect.KTypeProjection)>($r6);

        r14 = (java.util.Collection) $r3;

        interfaceinvoke r14.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label7;

     label8:
        r12 = new kotlin.reflect.ParameterizedTypeImpl;

        $r1 = (java.util.List) $r3;

        specialinvoke r12.<kotlin.reflect.ParameterizedTypeImpl: void <init>(java.lang.Class,java.lang.reflect.Type,java.util.List)>($r0, $r7, $r1);

        return r12;
    }

    public static final java.lang.reflect.Type getJavaType(kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r0;
        boolean $z0;
        kotlin.jvm.internal.KTypeBase $r1;
        java.lang.reflect.Type $r2;

        $r0 := @parameter0: kotlin.reflect.KType;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        $z0 = $r0 instanceof kotlin.jvm.internal.KTypeBase;

        if $z0 == 0 goto label1;

        $r1 = (kotlin.jvm.internal.KTypeBase) $r0;

        $r2 = interfaceinvoke $r1.<kotlin.jvm.internal.KTypeBase: java.lang.reflect.Type getJavaType()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r2 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType$default(kotlin.reflect.KType,boolean,int,java.lang.Object)>($r0, 0, 1, null);

        return $r2;
    }

    private static final java.lang.reflect.Type getJavaType(kotlin.reflect.KTypeProjection)
    {
        kotlin.reflect.KTypeProjection $r0;
        kotlin.reflect.KVariance $r1;
        kotlin.reflect.WildcardTypeImpl$Companion $r2;
        kotlin.reflect.WildcardTypeImpl $r3;
        kotlin.reflect.KType $r4;
        int[] $r5;
        int $i0;
        java.lang.Object $r6;
        java.lang.reflect.Type $r7;
        kotlin.NoWhenBranchMatchedException r8;
        java.lang.Throwable r9;

        $r0 := @parameter0: kotlin.reflect.KTypeProjection;

        $r1 = virtualinvoke $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KVariance getVariance()>();

        if $r1 != null goto label1;

        $r2 = <kotlin.reflect.WildcardTypeImpl: kotlin.reflect.WildcardTypeImpl$Companion Companion>;

        $r3 = virtualinvoke $r2.<kotlin.reflect.WildcardTypeImpl$Companion: kotlin.reflect.WildcardTypeImpl getSTAR()>();

        return $r3;

     label1:
        $r4 = virtualinvoke $r0.<kotlin.reflect.KTypeProjection: kotlin.reflect.KType getType()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4);

        $r5 = <kotlin.reflect.TypesJVMKt$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke $r1.<kotlin.reflect.KVariance: int ordinal()>();

        $i0 = $r5[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label3;
            default: goto label2;
        };

     label2:
        r8 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke r8.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        r9 = (java.lang.Throwable) r8;

        throw r9;

     label3:
        $r3 = new kotlin.reflect.WildcardTypeImpl;

        $r6 = $r3;

        $r7 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r4, 1);

        specialinvoke $r3.<kotlin.reflect.WildcardTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type)>($r7, null);

        goto label6;

     label4:
        $r6 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r4, 1);

        goto label6;

     label5:
        $r3 = new kotlin.reflect.WildcardTypeImpl;

        $r6 = $r3;

        $r7 = staticinvoke <kotlin.reflect.TypesJVMKt: java.lang.reflect.Type computeJavaType(kotlin.reflect.KType,boolean)>($r4, 1);

        specialinvoke $r3.<kotlin.reflect.WildcardTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type)>(null, $r7);

     label6:
        $r7 = (java.lang.reflect.Type) $r6;

        return $r7;
    }

    public static void getJavaType$annotations(kotlin.reflect.KType)
    {
        kotlin.reflect.KType $r0;

        $r0 := @parameter0: kotlin.reflect.KType;

        return;
    }

    private static void getJavaType$annotations(kotlin.reflect.KTypeProjection)
    {
        kotlin.reflect.KTypeProjection $r0;

        $r0 := @parameter0: kotlin.reflect.KTypeProjection;

        return;
    }

    private static final java.lang.String typeToString(java.lang.reflect.Type)
    {
        java.lang.reflect.Type $r0;
        boolean $z0;
        java.lang.Class $r1;
        kotlin.reflect.TypesJVMKt$typeToString$unwrap$1 $r2;
        kotlin.sequences.Sequence $r3;
        java.lang.StringBuilder $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        int $i0;

        $r0 := @parameter0: java.lang.reflect.Type;

        $z0 = $r0 instanceof java.lang.Class;

        if $z0 == 0 goto label3;

        $r1 = (java.lang.Class) $r0;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r2 = <kotlin.reflect.TypesJVMKt$typeToString$unwrap$1: kotlin.reflect.TypesJVMKt$typeToString$unwrap$1 INSTANCE>;

        $r3 = staticinvoke <kotlin.sequences.SequencesKt: kotlin.sequences.Sequence generateSequence(java.lang.Object,kotlin.jvm.functions.Function1)>($r0, $r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = staticinvoke <kotlin.sequences.SequencesKt: java.lang.Object last(kotlin.sequences.Sequence)>($r3);

        $r1 = (java.lang.Class) $r5;

        $r6 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $i0 = staticinvoke <kotlin.sequences.SequencesKt: int count(kotlin.sequences.Sequence)>($r3);

        $r6 = staticinvoke <kotlin.text.StringsKt: java.lang.String repeat(java.lang.CharSequence,int)>("[]", $i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r1 = (java.lang.Class) $r0;

        $r6 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

     label2:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "{\n        if (type.isArr\u2026   } else type.name\n    }");

        return $r6;

     label3:
        $r6 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r6;
    }

