androidx.benchmark.WarningState
<androidx.benchmark.WarningState: java.lang.String TAG>
<androidx.benchmark.WarningState: java.lang.String WARNING_PREFIX>
<androidx.benchmark.WarningState: java.lang.String warningString>
<androidx.benchmark.WarningState: int MINIMUM_BATTERY_PERCENT>
<androidx.benchmark.WarningState: boolean isEmulator>
<androidx.benchmark.WarningState: boolean isDeviceRooted>
<androidx.benchmark.WarningState: androidx.benchmark.WarningState INSTANCE>
    public final java.lang.String getWARNING_PREFIX()
    {
        androidx.benchmark.WarningState r0;
        java.lang.String $r1;

        r0 := @this: androidx.benchmark.WarningState;

        $r1 = <androidx.benchmark.WarningState: java.lang.String WARNING_PREFIX>;

        return $r1;
    }

    public final java.lang.String acquireWarningStringForLogging()
    {
        androidx.benchmark.WarningState r0;
        java.lang.String r1, $r2;

        r0 := @this: androidx.benchmark.WarningState;

        r1 = <androidx.benchmark.WarningState: java.lang.String warningString>;

        $r2 = (java.lang.String) null;

        <androidx.benchmark.WarningState: java.lang.String warningString> = $r2;

        return r1;
    }

    public final boolean isEmulator()
    {
        androidx.benchmark.WarningState r0;
        boolean $z0;

        r0 := @this: androidx.benchmark.WarningState;

        $z0 = <androidx.benchmark.WarningState: boolean isEmulator>;

        return $z0;
    }

    private final java.lang.String trimMarginWrapNewlines(java.lang.String)
    {
        androidx.benchmark.WarningState r0;
        java.lang.String $r1, $r4, $r7;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;

        r0 := @this: androidx.benchmark.WarningState;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.String trimMargin$default(java.lang.String,java.lang.String,int,java.lang.Object)>($r1, null, 1, null);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private void <init>()
    {
        androidx.benchmark.WarningState r0;

        r0 := @this: androidx.benchmark.WarningState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        androidx.benchmark.WarningState r0, $r4;
        java.lang.String r1, $r5, $r8, $r28, $r29, $r37, $r46, $r54, $r61, $r68, $r75, $r82, $r87, $r88, $r91, $r94, $r97, $r100, $r101, $r102, r104, r105, r107, r108;
        java.util.Collection r2, $r117;
        java.lang.Integer r3;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z23, $z24, $z25, $z30;
        java.lang.String[] $r6, $r12, r103;
        android.app.Instrumentation $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i10, i11;
        java.lang.CharSequence $r9, $r10, $r13, $r31, $r89, $r90, $r92, $r93, $r95, $r96, $r98, $r99;
        java.lang.Object $r11, r119;
        java.util.List $r14, $r16;
        java.util.ArrayList $r15;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r30, $r32, $r33, $r34, $r35, $r36, $r38, $r41, $r42, $r43, $r44, $r45, $r47, $r49, $r50, $r51, $r52, $r53, $r55, $r56, $r57, $r58, $r59, $r60, $r62, $r63, $r64, $r65, $r66, $r67, $r69, $r70, $r71, $r72, $r73, $r74, $r76, $r77, $r78, $r79, $r80, $r81, $r83;
        androidx.benchmark.AndroidBenchmarkRunner$Companion $r39, $r40, $r111;
        androidx.benchmark.CpuInfo $r48, $r110;
        java.io.File $r84;
        android.content.pm.ApplicationInfo $r86;
        android.content.Context $r106;
        android.os.Bundle r109;
        android.content.IntentFilter $r112, r113;
        android.content.Intent $r114;
        java.lang.Iterable $r116;
        java.util.Iterator r118;

        $r4 = new androidx.benchmark.WarningState;

        specialinvoke $r4.<androidx.benchmark.WarningState: void <init>()>();

        r0 = $r4;

        <androidx.benchmark.WarningState: androidx.benchmark.WarningState INSTANCE> = r0;

        $r5 = <android.os.Build: java.lang.String FINGERPRINT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r5, "Build.FINGERPRINT");

        $z1 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r5, "generic", 0, 2, null);

        if $z1 != 0 goto label02;

        $r87 = <android.os.Build: java.lang.String FINGERPRINT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r87, "Build.FINGERPRINT");

        $z12 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r87, "unknown", 0, 2, null);

        if $z12 != 0 goto label02;

        $r88 = <android.os.Build: java.lang.String MODEL>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r88, "Build.MODEL");

        $r90 = (java.lang.CharSequence) $r88;

        $r89 = (java.lang.CharSequence) "google_sdk";

        $z13 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r90, $r89, 0, 2, null);

        if $z13 != 0 goto label02;

        $r91 = <android.os.Build: java.lang.String MODEL>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r91, "Build.MODEL");

        $r93 = (java.lang.CharSequence) $r91;

        $r92 = (java.lang.CharSequence) "Emulator";

        $z14 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r93, $r92, 0, 2, null);

        if $z14 != 0 goto label02;

        $r94 = <android.os.Build: java.lang.String MODEL>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r94, "Build.MODEL");

        $r96 = (java.lang.CharSequence) $r94;

        $r95 = (java.lang.CharSequence) "Android SDK built for x86";

        $z15 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r96, $r95, 0, 2, null);

        if $z15 != 0 goto label02;

        $r97 = <android.os.Build: java.lang.String MANUFACTURER>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r97, "Build.MANUFACTURER");

        $r99 = (java.lang.CharSequence) $r97;

        $r98 = (java.lang.CharSequence) "Genymotion";

        $z16 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r99, $r98, 0, 2, null);

        if $z16 != 0 goto label02;

        $r100 = <android.os.Build: java.lang.String BRAND>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r100, "Build.BRAND");

        $z17 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r100, "generic", 0, 2, null);

        if $z17 == 0 goto label01;

        $r102 = <android.os.Build: java.lang.String DEVICE>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r102, "Build.DEVICE");

        $z19 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r102, "generic", 0, 2, null);

        if $z19 != 0 goto label02;

     label01:
        $r101 = <android.os.Build: java.lang.String PRODUCT>;

        $z18 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>("google_sdk", $r101);

        if $z18 == 0 goto label03;

     label02:
        $z20 = 1;

        goto label04;

     label03:
        $z20 = 0;

     label04:
        <androidx.benchmark.WarningState: boolean isEmulator> = $z20;

        $r6 = newarray (java.lang.String)[10];

        $r6[0] = "/system/app/Superuser.apk";

        $r6[1] = "/sbin/su";

        $r6[2] = "/system/bin/su";

        $r6[3] = "/system/xbin/su";

        $r6[4] = "/data/local/xbin/su";

        $r6[5] = "/data/local/bin/su";

        $r6[6] = "/system/sd/xbin/su";

        $r6[7] = "/system/bin/failsafe/su";

        $r6[8] = "/data/local/su";

        $r6[9] = "/su/bin/su";

        r103 = $r6;

        i6 = lengthof r103;

        i7 = 0;

     label05:
        if i7 >= i6 goto label07;

        r104 = r103[i7];

        r105 = r104;

        $r84 = new java.io.File;

        specialinvoke $r84.<java.io.File: void <init>(java.lang.String)>(r105);

        $z11 = virtualinvoke $r84.<java.io.File: boolean exists()>();

        if $z11 == 0 goto label06;

        $z23 = 1;

        goto label08;

     label06:
        i7 = i7 + 1;

        goto label05;

     label07:
        $z23 = 0;

     label08:
        <androidx.benchmark.WarningState: boolean isDeviceRooted> = $z23;

        $r7 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r7, "InstrumentationRegistry.getInstrumentation()");

        $r106 = virtualinvoke $r7.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r106, "context");

        r107 = "";

        r108 = "";

        $r86 = virtualinvoke $r106.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r86.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label09;

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DEBUGGABLE_");

        r107 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r82 = specialinvoke r0.<androidx.benchmark.WarningState: java.lang.String trimMarginWrapNewlines(java.lang.String)>("\n                |WARNING: Debuggable Benchmark\n                |    Benchmark is running with debuggable=true, which drastically reduces\n                |    runtime performance in order to support debugging features. Run\n                |    benchmarks with debuggable=false. Debuggable affects execution speed\n                |    in ways that mean benchmark improvements might not carry over to a\n                |    real user\'s experience (or even regress release performance).\n            ");

        $r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);

        r108 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        $z2 = <androidx.benchmark.WarningState: boolean isEmulator>;

        if $z2 == 0 goto label10;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EMULATOR_");

        r107 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r75 = specialinvoke r0.<androidx.benchmark.WarningState: java.lang.String trimMarginWrapNewlines(java.lang.String)>("\n                |WARNING: Running on Emulator\n                |    Benchmark is running on an emulator, which is not representative of\n                |    real user devices. Use a physical device to benchmark. Emulator\n                |    benchmark improvements might not carry over to a real user\'s\n                |    experience (or even regress real device performance).\n            ");

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        r108 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r8 = <android.os.Build: java.lang.String FINGERPRINT>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkExpressionValueIsNotNull(java.lang.Object,java.lang.String)>($r8, "Build.FINGERPRINT");

        $r10 = (java.lang.CharSequence) $r8;

        $r9 = (java.lang.CharSequence) ":eng/";

        $z3 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r10, $r9, 0, 2, null);

        if $z3 == 0 goto label11;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ENG-BUILD_");

        r107 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r68 = specialinvoke r0.<androidx.benchmark.WarningState: java.lang.String trimMarginWrapNewlines(java.lang.String)>("\n                |WARNING: Running on Eng Build\n                |    Benchmark is running on device flashed with a \'-eng\' build. Eng builds\n                |    of the platform drastically reduce performance to enable testing\n                |    changes quickly. For this reason they should not be used for\n                |    benchmarking. Use a \'-user\' or \'-userdebug\' system image.\n            ");

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        r108 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        r109 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.os.Bundle getArguments()>();

        $r11 = virtualinvoke r109.<android.os.Bundle: java.lang.Object get(java.lang.String)>("coverage");

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, "true");

        if $z4 == 0 goto label12;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CODE-COVERAGE_");

        r107 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r61 = specialinvoke r0.<androidx.benchmark.WarningState: java.lang.String trimMarginWrapNewlines(java.lang.String)>("\n                |WARNING: Code coverage enabled\n                |    Benchmark is running with code coverage enabled, which typically alters the dex\n                |    in a way that can affect performance. Ensure that code coverage is disabled by\n                |    setting testCoverageEnabled to false in the buildType your benchmarks run in.\n            ");

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        r108 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

     label12:
        $z5 = <androidx.benchmark.WarningState: boolean isDeviceRooted>;

        if $z5 == 0 goto label13;

        $r48 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $z10 = virtualinvoke $r48.<androidx.benchmark.CpuInfo: boolean getLocked()>();

        if $z10 != 0 goto label13;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNLOCKED_");

        r107 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r54 = specialinvoke r0.<androidx.benchmark.WarningState: java.lang.String trimMarginWrapNewlines(java.lang.String)>("\n                |WARNING: Unlocked CPU clocks\n                |    Benchmark appears to be running on a rooted device with unlocked CPU\n                |    clocks. Unlocked CPU clocks can lead to inconsistent results due to\n                |    dynamic frequency scaling, and thermal throttling. On a rooted device,\n                |    lock your device clocks to a stable frequency with `./gradlew lockClocks`\n            ");

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        r108 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        $r110 = <androidx.benchmark.CpuInfo: androidx.benchmark.CpuInfo INSTANCE>;

        $z24 = virtualinvoke $r110.<androidx.benchmark.CpuInfo: boolean getLocked()>();

        if $z24 != 0 goto label14;

        $r39 = <androidx.benchmark.AndroidBenchmarkRunner: androidx.benchmark.AndroidBenchmarkRunner$Companion Companion>;

        $z8 = virtualinvoke $r39.<androidx.benchmark.AndroidBenchmarkRunner$Companion: boolean isSustainedPerformanceModeSupported()>();

        if $z8 == 0 goto label14;

        $r40 = <androidx.benchmark.AndroidBenchmarkRunner: androidx.benchmark.AndroidBenchmarkRunner$Companion Companion>;

        $z9 = virtualinvoke $r40.<androidx.benchmark.AndroidBenchmarkRunner$Companion: boolean getSustainedPerformanceModeInUse()>();

        if $z9 != 0 goto label14;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNSUSTAINED-RUNNER-MISSING_");

        r107 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r46 = specialinvoke r0.<androidx.benchmark.WarningState: java.lang.String trimMarginWrapNewlines(java.lang.String)>("\n                |WARNING: Cannot use SustainedPerformanceMode without AndroidBenchmarkRunner\n                |    Benchmark running on device that supports Window.setSustainedPerformanceMode,\n                |    but not using the AndroidBenchmarkRunner. This runner is required to limit\n                |    CPU clock max frequency, to prevent thermal throttling. To fix this, add the\n                |    following to your benchmark module-level build.gradle:\n                |        android.defaultConfig.testInstrumentationRunner\n                |            = \"androidx.benchmark.AndroidBenchmarkRunner\"\n            ");

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        r108 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label15;

     label14:
        $r111 = <androidx.benchmark.AndroidBenchmarkRunner: androidx.benchmark.AndroidBenchmarkRunner$Companion Companion>;

        $z25 = virtualinvoke $r111.<androidx.benchmark.AndroidBenchmarkRunner$Companion: boolean getRunnerInUse()>();

        if $z25 != 0 goto label15;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RUNNER-MISSING_");

        r107 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r37 = specialinvoke r0.<androidx.benchmark.WarningState: java.lang.String trimMarginWrapNewlines(java.lang.String)>("\n                |WARNING: Not using AndroidBenchmarkRunner\n                |    AndroidBenchmarkRunner should be used to isolate benchmarks from interference\n                |    from other visible apps. To fix this, add the following to your module-level\n                |    build.gradle:\n                |        android.defaultConfig.testInstrumentationRunner\n                |            = \"androidx.benchmark.AndroidBenchmarkRunner\"\n            ");

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        r108 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        $r112 = new android.content.IntentFilter;

        specialinvoke $r112.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        r113 = $r112;

        $r114 = virtualinvoke $r106.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>(null, r113);

        if $r114 == null goto label16;

        i8 = virtualinvoke $r114.<android.content.Intent: int getIntExtra(java.lang.String,int)>("level", 100);

        i9 = virtualinvoke $r114.<android.content.Intent: int getIntExtra(java.lang.String,int)>("scale", 100);

        $i5 = i8 * 100;

        $i10 = $i5 / i9;

        goto label17;

     label16:
        $i10 = 100;

     label17:
        i11 = $i10;

        if i11 >= 25 goto label18;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LOW-BATTERY_");

        r107 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n                |WARNING: Device has low battery (");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%)\n                |    When battery is low, devices will often reduce performance (e.g. disabling big\n                |    cores) to save remaining battery. This occurs even when they are plugged in.\n                |    Wait for your battery to charge to at least 25%.\n                |    Currently at ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%.\n            ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = specialinvoke r0.<androidx.benchmark.WarningState: java.lang.String trimMarginWrapNewlines(java.lang.String)>($r28);

        $r30 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        r108 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

     label18:
        <androidx.benchmark.WarningState: java.lang.String WARNING_PREFIX> = r107;

        $r31 = (java.lang.CharSequence) r108;

        $i2 = interfaceinvoke $r31.<java.lang.CharSequence: int length()>();

        if $i2 != 0 goto label19;

        $z30 = 1;

        goto label20;

     label19:
        $z30 = 0;

     label20:
        if $z30 != 0 goto label23;

        <androidx.benchmark.WarningState: java.lang.String warningString> = r108;

        $r13 = (java.lang.CharSequence) r108;

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = "\n";

        $r14 = staticinvoke <kotlin.text.StringsKt: java.util.List split$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>($r13, $r12, 0, 0, 6, null);

        $r116 = (java.lang.Iterable) $r14;

        $r15 = new java.util.ArrayList;

        $i3 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r116, 10);

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>($i3);

        $r117 = (java.util.Collection) $r15;

        r118 = interfaceinvoke $r116.<java.lang.Iterable: java.util.Iterator iterator()>();

     label21:
        $z6 = interfaceinvoke r118.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label22;

        r119 = interfaceinvoke r118.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) r119;

        r2 = $r117;

        $i4 = staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Benchmark", r1);

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        goto label21;

     label22:
        $r16 = (java.util.List) $r117;

     label23:
        return;
    }

