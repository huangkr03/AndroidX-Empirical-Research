androidx.tracing.perfetto.TracingReceiver
<androidx.tracing.perfetto.TracingReceiver: kotlin.Lazy executor$delegate>
    public void <init>()
    {
        androidx.tracing.perfetto.TracingReceiver r0;
        androidx.tracing.perfetto.TracingReceiver$executor$2 $r1;
        kotlin.jvm.functions.Function0 $r2;
        kotlin.Lazy $r3;

        r0 := @this: androidx.tracing.perfetto.TracingReceiver;

        specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>();

        $r1 = <androidx.tracing.perfetto.TracingReceiver$executor$2: androidx.tracing.perfetto.TracingReceiver$executor$2 INSTANCE>;

        $r2 = (kotlin.jvm.functions.Function0) $r1;

        $r3 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r2);

        r0.<androidx.tracing.perfetto.TracingReceiver: kotlin.Lazy executor$delegate> = $r3;

        return;
    }

    private final java.util.concurrent.ThreadPoolExecutor getExecutor()
    {
        androidx.tracing.perfetto.TracingReceiver r0;
        kotlin.Lazy r1;
        java.lang.Object $r2;
        java.util.concurrent.ThreadPoolExecutor $r3;

        r0 := @this: androidx.tracing.perfetto.TracingReceiver;

        r1 = r0.<androidx.tracing.perfetto.TracingReceiver: kotlin.Lazy executor$delegate>;

        $r2 = interfaceinvoke r1.<kotlin.Lazy: java.lang.Object getValue()>();

        $r3 = (java.util.concurrent.ThreadPoolExecutor) $r2;

        return $r3;
    }

    public void onReceive(android.content.Context, android.content.Intent)
    {
        androidx.tracing.perfetto.TracingReceiver r0;
        android.content.Context r1;
        android.content.Intent r2;
        java.lang.String r3, $r5, $r9;
        android.content.BroadcastReceiver$PendingResult r4;
        boolean $z0;
        android.os.Bundle $r6;
        java.util.concurrent.ThreadPoolExecutor $r7;
        java.lang.Runnable $r8;

        r0 := @this: androidx.tracing.perfetto.TracingReceiver;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.Intent;

        if r2 == null goto label1;

        $r5 = virtualinvoke r2.<android.content.Intent: java.lang.String getAction()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, "androidx.tracing.perfetto.action.ENABLE_TRACING");

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        $r6 = virtualinvoke r2.<android.content.Intent: android.os.Bundle getExtras()>();

        if $r6 == null goto label3;

        $r9 = virtualinvoke $r6.<android.os.Bundle: java.lang.String getString(java.lang.String)>("path");

        goto label4;

     label3:
        $r9 = null;

     label4:
        r3 = $r9;

        r4 = virtualinvoke r0.<androidx.tracing.perfetto.TracingReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>();

        $r7 = specialinvoke r0.<androidx.tracing.perfetto.TracingReceiver: java.util.concurrent.ThreadPoolExecutor getExecutor()>();

        $r8 = dynamicinvoke "run" <java.lang.Runnable (androidx.tracing.perfetto.TracingReceiver,java.lang.String,android.content.Context,android.content.BroadcastReceiver$PendingResult)>(r0, r3, r1, r4) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.tracing.perfetto.TracingReceiver: void onReceive$lambda$0(androidx.tracing.perfetto.TracingReceiver,java.lang.String,android.content.Context,android.content.BroadcastReceiver$PendingResult)>, methodtype: void __METHODTYPE__());

        virtualinvoke $r7.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r8);

        return;
    }

    private final androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enableTracing(java.lang.String, android.content.Context)
    {
        androidx.tracing.perfetto.TracingReceiver r0;
        java.lang.String r1, $r10;
        android.content.Context r2;
        java.lang.Throwable r3, $r13, $r14;
        int $i0;
        androidx.tracing.perfetto.Tracing $r4, $r6, $r11, $r12, $r15;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r16, r18;
        java.io.File r17;

        r0 := @this: androidx.tracing.perfetto.TracingReceiver;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.Context;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 30 goto label1;

        $r12 = <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE>;

        $r16 = virtualinvoke $r12.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.String)>(99, "SDK version not supported. Current minimum SDK = 30");

        goto label8;

     label1:
        if r1 == null goto label6;

        if r2 == null goto label6;

     label2:
        r17 = specialinvoke r0.<androidx.tracing.perfetto.TracingReceiver: java.io.File copyExternalLibraryFile(android.content.Context,java.lang.String)>(r2, r1);

        $r11 = <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE>;

        r18 = virtualinvoke $r11.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enable$tracing_perfetto_release(java.io.File,android.content.Context)>(r17, r2);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        r3 = $r13;

        $r15 = <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE>;

        $r14 = (java.lang.Throwable) r3;

        r18 = virtualinvoke $r15.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.Throwable)>(99, $r14);

     label5:
        $r16 = r18;

        goto label8;

     label6:
        if r1 == null goto label7;

        if r2 != null goto label7;

        $r6 = <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot copy source file: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without access to a Context instance.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r6.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse EnableTracingResponse$tracing_perfetto_release(int,java.lang.String)>(99, $r10);

        goto label8;

     label7:
        $r4 = <androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.Tracing INSTANCE>;

        $r16 = virtualinvoke $r4.<androidx.tracing.perfetto.Tracing: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enable$tracing_perfetto_release()>();

     label8:
        return $r16;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private final java.io.File copyExternalLibraryFile(android.content.Context, java.lang.String)
    {
        androidx.tracing.perfetto.TracingReceiver r0;
        android.content.Context r1;
        java.lang.String r2, r3, $r9, $r10, $r15, $r17;
        java.io.File r4, r5, r6, $r7, $r11, $r16;
        android.content.pm.ApplicationInfo $r8;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @this: androidx.tracing.perfetto.TracingReceiver;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        $r7 = new java.io.File;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r9 = $r8.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "File(context.application\u2026fo.nativeLibraryDir).name");

        r3 = $r10;

        $r11 = virtualinvoke r1.<android.content.Context: java.io.File getCacheDir()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "context.cacheDir");

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib/");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>($r11, $r15);

        virtualinvoke r4.<java.io.File: boolean mkdirs()>();

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>(r2);

        r5 = $r16;

        $r17 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r17, "srcFile.name");

        r6 = staticinvoke <kotlin.io.FilesKt: java.io.File resolve(java.io.File,java.lang.String)>(r4, $r17);

        staticinvoke <kotlin.io.FilesKt: java.io.File copyTo$default(java.io.File,java.io.File,boolean,int,int,java.lang.Object)>(r5, r6, 1, 0, 4, null);

        return r6;
    }

    private final java.lang.String toJsonString(androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse)
    {
        androidx.tracing.perfetto.TracingReceiver r0;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse $r1;
        java.io.StringWriter r2, $r5;
        java.io.Closeable r3;
        java.lang.String r4, $r10, $r11, $r12;
        android.util.JsonWriter $r6, r15;
        java.io.Writer $r7;
        int $i0;
        java.lang.Integer $r8;
        java.lang.Number $r9;
        java.lang.Throwable $r13, $r14, r16, r17, r18;

        r0 := @this: androidx.tracing.perfetto.TracingReceiver;

        $r1 := @parameter0: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse;

        $r5 = new java.io.StringWriter;

        specialinvoke $r5.<java.io.StringWriter: void <init>()>();

        r2 = $r5;

        $r6 = new android.util.JsonWriter;

        $r7 = (java.io.Writer) r2;

        specialinvoke $r6.<android.util.JsonWriter: void <init>(java.io.Writer)>($r7);

        r3 = (java.io.Closeable) $r6;

     label1:
        r15 = (android.util.JsonWriter) r3;

        virtualinvoke r15.<android.util.JsonWriter: android.util.JsonWriter beginObject()>();

        virtualinvoke r15.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("exitCode");

        $i0 = virtualinvoke $r1.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: int getExitCode()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r9 = (java.lang.Number) $r8;

        virtualinvoke r15.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.Number)>($r9);

        virtualinvoke r15.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("requiredVersion");

        $r10 = virtualinvoke $r1.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: java.lang.String getRequiredVersion()>();

        virtualinvoke r15.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>($r10);

        $r11 = virtualinvoke $r1.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: java.lang.String getMessage()>();

        if $r11 == null goto label2;

        r4 = $r11;

        virtualinvoke r15.<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>("message");

        virtualinvoke r15.<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>(r4);

        goto label2;

     label2:
        virtualinvoke r15.<android.util.JsonWriter: android.util.JsonWriter endObject()>();

     label3:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, null);

        goto label7;

     label4:
        $r14 := @caughtexception;

        r16 = $r14;

        r17 = r16;

        throw r16;

     label5:
        $r13 := @caughtexception;

        r18 = $r13;

     label6:
        staticinvoke <kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)>(r3, r17);

        throw r18;

     label7:
        $r12 = virtualinvoke r2.<java.io.StringWriter: java.lang.String toString()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r12, "output.toString()");

        return $r12;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static final void onReceive$lambda$0(androidx.tracing.perfetto.TracingReceiver, java.lang.String, android.content.Context, android.content.BroadcastReceiver$PendingResult)
    {
        androidx.tracing.perfetto.TracingReceiver r0;
        java.lang.String $r1, $r4;
        android.content.Context $r2;
        android.content.BroadcastReceiver$PendingResult $r3;
        int $i0;
        java.lang.Throwable $r5, r7;
        androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse r6;

        r0 := @parameter0: androidx.tracing.perfetto.TracingReceiver;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.content.Context;

        $r3 := @parameter3: android.content.BroadcastReceiver$PendingResult;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

     label1:
        r6 = specialinvoke r0.<androidx.tracing.perfetto.TracingReceiver: androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse enableTracing(java.lang.String,android.content.Context)>($r1, $r2);

        $i0 = virtualinvoke r6.<androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse: int getExitCode()>();

        $r4 = specialinvoke r0.<androidx.tracing.perfetto.TracingReceiver: java.lang.String toJsonString(androidx.tracing.perfetto.PerfettoHandshake$EnableTracingResponse)>(r6);

        virtualinvoke $r3.<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>($i0, $r4, null);

     label2:
        virtualinvoke $r3.<android.content.BroadcastReceiver$PendingResult: void finish()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

     label4:
        virtualinvoke $r3.<android.content.BroadcastReceiver$PendingResult: void finish()>();

        throw r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

androidx.tracing.perfetto.TracingReceiver$executor$2
<androidx.tracing.perfetto.TracingReceiver$executor$2: androidx.tracing.perfetto.TracingReceiver$executor$2 INSTANCE>
    void <init>()
    {
        androidx.tracing.perfetto.TracingReceiver$executor$2 r0;

        r0 := @this: androidx.tracing.perfetto.TracingReceiver$executor$2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final java.util.concurrent.ThreadPoolExecutor invoke()
    {
        androidx.tracing.perfetto.TracingReceiver$executor$2 r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;
        java.util.concurrent.TimeUnit $r3;
        java.util.concurrent.BlockingQueue $r4;

        r0 := @this: androidx.tracing.perfetto.TracingReceiver$executor$2;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        $r4 = (java.util.concurrent.BlockingQueue) $r2;

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(0, 1, 10L, $r3, $r4);

        return $r1;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.tracing.perfetto.TracingReceiver$executor$2 r0;
        java.util.concurrent.ThreadPoolExecutor $r1;

        r0 := @this: androidx.tracing.perfetto.TracingReceiver$executor$2;

        $r1 = virtualinvoke r0.<androidx.tracing.perfetto.TracingReceiver$executor$2: java.util.concurrent.ThreadPoolExecutor invoke()>();

        return $r1;
    }

    static void <clinit>()
    {
        androidx.tracing.perfetto.TracingReceiver$executor$2 $r0;

        $r0 = new androidx.tracing.perfetto.TracingReceiver$executor$2;

        specialinvoke $r0.<androidx.tracing.perfetto.TracingReceiver$executor$2: void <init>()>();

        <androidx.tracing.perfetto.TracingReceiver$executor$2: androidx.tracing.perfetto.TracingReceiver$executor$2 INSTANCE> = $r0;

        return;
    }

