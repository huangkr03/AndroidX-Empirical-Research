kotlinx.coroutines.AbstractCoroutine
<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext context>
    public void <init>(kotlin.coroutines.CoroutineContext, boolean, boolean)
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        boolean $z0, $z1;
        kotlin.coroutines.CoroutineContext $r1;
        kotlinx.coroutines.Job$Key $r2;
        kotlin.coroutines.CoroutineContext$Element $r3;
        kotlinx.coroutines.Job $r4;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $z1 := @parameter1: boolean;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "parentContext");

        specialinvoke $r0.<kotlinx.coroutines.JobSupport: void <init>(boolean)>($z0);

        if $z1 == 0 goto label1;

        $r2 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r3 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r2);

        $r4 = (kotlinx.coroutines.Job) $r3;

        virtualinvoke $r0.<kotlinx.coroutines.AbstractCoroutine: void initParentJob(kotlinx.coroutines.Job)>($r4);

     label1:
        $r1 = interfaceinvoke $r1.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)>($r0);

        $r0.<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext context> = $r1;

        return;
    }

    protected void afterResume(java.lang.Object)
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 := @parameter0: java.lang.Object;

        virtualinvoke $r0.<kotlinx.coroutines.AbstractCoroutine: void afterCompletion(java.lang.Object)>($r1);

        return;
    }

    protected java.lang.String cancellationExceptionMessage()
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)>($r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was cancelled");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public final kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        kotlin.coroutines.CoroutineContext r1;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        r1 = $r0.<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext context>;

        return r1;
    }

    public kotlin.coroutines.CoroutineContext getCoroutineContext()
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        kotlin.coroutines.CoroutineContext r1;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        r1 = $r0.<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext context>;

        return r1;
    }

    public final void handleOnCompletionException$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Throwable)
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        java.lang.Throwable $r1;
        kotlin.coroutines.CoroutineContext $r2;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "exception");

        $r2 = $r0.<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext context>;

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r2, $r1);

        return;
    }

    public boolean isActive()
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.JobSupport: boolean isActive()>();

        return $z0;
    }

    public java.lang.String nameString$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        kotlin.coroutines.CoroutineContext $r1;
        java.lang.String $r2, $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 = $r0.<kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext context>;

        $r2 = staticinvoke <kotlinx.coroutines.CoroutineContextKt: java.lang.String getCoroutineName(kotlin.coroutines.CoroutineContext)>($r1);

        if $r2 != null goto label1;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.JobSupport: java.lang.String nameString$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        return $r2;

     label1:
        $r3 = specialinvoke $r0.<kotlinx.coroutines.JobSupport: java.lang.String nameString$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\":");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    protected void onCancelled(java.lang.Throwable, boolean)
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        java.lang.Throwable $r1;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 := @parameter1: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cause");

        return;
    }

    protected void onCompleted(java.lang.Object)
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 := @parameter0: java.lang.Object;

        return;
    }

    protected final void onCompletionInternal(java.lang.Object)
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlinx.coroutines.CompletedExceptionally $r2;
        java.lang.Throwable $r3;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.CompletedExceptionally) $r1;

        $r3 = $r2.<kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause>;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.CompletedExceptionally: boolean getHandled()>();

        virtualinvoke $r0.<kotlinx.coroutines.AbstractCoroutine: void onCancelled(java.lang.Throwable,boolean)>($r3, $z0);

        return;

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.AbstractCoroutine: void onCompleted(java.lang.Object)>($r1);

        return;
    }

    public final void resumeWith(java.lang.Object)
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.Symbol $r2;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object toState$default(java.lang.Object,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r1, null, 1, null);

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.AbstractCoroutine: java.lang.Object makeCompletingOnce$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Object)>($r1);

        $r2 = <kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol COMPLETING_WAITING_CHILDREN>;

        if $r1 != $r2 goto label1;

        return;

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.AbstractCoroutine: void afterResume(java.lang.Object)>($r1);

        return;
    }

    public final void start(kotlinx.coroutines.CoroutineStart, java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.AbstractCoroutine $r0;
        kotlinx.coroutines.CoroutineStart $r1;
        java.lang.Object $r2;
        kotlin.jvm.functions.Function2 $r3;

        $r0 := @this: kotlinx.coroutines.AbstractCoroutine;

        $r1 := @parameter0: kotlinx.coroutines.CoroutineStart;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "start");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "block");

        virtualinvoke $r1.<kotlinx.coroutines.CoroutineStart: void invoke(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r3, $r2, $r0);

        return;
    }

