androidx.media3.exoplayer.audio.BaseAudioProcessor
<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat>
<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat>
<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat>
<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat>
<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer buffer>
<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer outputBuffer>
<androidx.media3.exoplayer.audio.BaseAudioProcessor: boolean inputEnded>
    public void <init>()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        java.nio.ByteBuffer $r1, $r2;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r3, $r4, $r5, $r6;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer buffer> = $r1;

        $r2 = <androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer outputBuffer> = $r2;

        $r3 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat> = $r3;

        $r4 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat> = $r4;

        $r5 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat> = $r5;

        $r6 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat> = $r6;

        return;
    }

    public final androidx.media3.common.audio.AudioProcessor$AudioFormat configure(androidx.media3.common.audio.AudioProcessor$AudioFormat) throws androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat r1, $r2, $r3;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessor$AudioFormat;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat> = r1;

        $r2 = virtualinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat onConfigure(androidx.media3.common.audio.AudioProcessor$AudioFormat)>(r1);

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat> = $r2;

        $z0 = virtualinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: boolean isActive()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat>;

        goto label2;

     label1:
        $r3 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

     label2:
        return $r3;
    }

    public boolean isActive()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r1, $r2;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        $r2 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat>;

        $r1 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        if $r2 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void queueEndOfStream()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: boolean inputEnded> = 1;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: void onQueueEndOfStream()>();

        return;
    }

    public java.nio.ByteBuffer getOutput()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        java.nio.ByteBuffer r1, $r2;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        r1 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer outputBuffer>;

        $r2 = <androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer outputBuffer> = $r2;

        return r1;
    }

    public boolean isEnded()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        boolean $z0, $z1;
        java.nio.ByteBuffer $r1, $r2;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        $z0 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: boolean inputEnded>;

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer outputBuffer>;

        $r1 = <androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        if $r2 != $r1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final void flush()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        java.nio.ByteBuffer $r1;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r2, $r3;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        $r1 = <androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer outputBuffer> = $r1;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: boolean inputEnded> = 0;

        $r2 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat> = $r2;

        $r3 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat> = $r3;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: void onFlush()>();

        return;
    }

    public final void reset()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        java.nio.ByteBuffer $r1;
        androidx.media3.common.audio.AudioProcessor$AudioFormat $r2, $r3, $r4, $r5;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: void flush()>();

        $r1 = <androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer EMPTY_BUFFER>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer buffer> = $r1;

        $r2 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingInputAudioFormat> = $r2;

        $r3 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat pendingOutputAudioFormat> = $r3;

        $r4 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat inputAudioFormat> = $r4;

        $r5 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: androidx.media3.common.audio.AudioProcessor$AudioFormat outputAudioFormat> = $r5;

        virtualinvoke r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: void onReset()>();

        return;
    }

    protected final java.nio.ByteBuffer replaceOutputBuffer(int)
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        int i0, $i1;
        java.nio.ByteBuffer $r1, $r2, $r4, $r5, $r6, $r8;
        java.nio.ByteOrder $r7;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer buffer>;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int capacity()>();

        if $i1 >= i0 goto label1;

        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);

        $r7 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r8 = virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r7);

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer buffer> = $r8;

        goto label2;

     label1:
        $r2 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer buffer>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label2:
        $r4 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer buffer>;

        r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer outputBuffer> = $r4;

        $r5 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer buffer>;

        return $r5;
    }

    protected final boolean hasPendingOutput()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        $r1 = r0.<androidx.media3.exoplayer.audio.BaseAudioProcessor: java.nio.ByteBuffer outputBuffer>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        return $z0;
    }

    protected androidx.media3.common.audio.AudioProcessor$AudioFormat onConfigure(androidx.media3.common.audio.AudioProcessor$AudioFormat) throws androidx.media3.common.audio.AudioProcessor$UnhandledAudioFormatException
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;
        androidx.media3.common.audio.AudioProcessor$AudioFormat r1, $r2;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        r1 := @parameter0: androidx.media3.common.audio.AudioProcessor$AudioFormat;

        $r2 = <androidx.media3.common.audio.AudioProcessor$AudioFormat: androidx.media3.common.audio.AudioProcessor$AudioFormat NOT_SET>;

        return $r2;
    }

    protected void onQueueEndOfStream()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        return;
    }

    protected void onFlush()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        return;
    }

    protected void onReset()
    {
        androidx.media3.exoplayer.audio.BaseAudioProcessor r0;

        r0 := @this: androidx.media3.exoplayer.audio.BaseAudioProcessor;

        return;
    }

