kotlin.collections.RingBuffer
<kotlin.collections.RingBuffer: java.lang.Object[] buffer>
<kotlin.collections.RingBuffer: int capacity>
<kotlin.collections.RingBuffer: int size>
<kotlin.collections.RingBuffer: int startIndex>
    public void <init>(int)
    {
        kotlin.collections.RingBuffer $r0;
        int $i0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.collections.RingBuffer;

        $i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[$i0];

        specialinvoke $r0.<kotlin.collections.RingBuffer: void <init>(java.lang.Object[],int)>($r1, 0);

        return;
    }

    public void <init>(java.lang.Object[], int)
    {
        kotlin.collections.RingBuffer $r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @this: kotlin.collections.RingBuffer;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "buffer");

        specialinvoke $r0.<kotlin.collections.AbstractList: void <init>()>();

        $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer> = $r1;

        $z0 = 1;

        if $i0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label6;

        $i1 = lengthof $r1;

        if $i0 > $i1 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        $i1 = lengthof $r1;

        $r0.<kotlin.collections.RingBuffer: int capacity> = $i1;

        $r0.<kotlin.collections.RingBuffer: int size> = $i0;

        return;

     label5:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ring buffer filled size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be larger than the buffer size: ");

        $i0 = lengthof $r1;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ring buffer filled size should not be negative but it is ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;
    }

    public static final java.lang.Object[] access$getBuffer$p(kotlin.collections.RingBuffer)
    {
        kotlin.collections.RingBuffer $r0;
        java.lang.Object[] r1;

        $r0 := @parameter0: kotlin.collections.RingBuffer;

        r1 = $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer>;

        return r1;
    }

    public static final int access$getCapacity$p(kotlin.collections.RingBuffer)
    {
        kotlin.collections.RingBuffer $r0;
        int i0;

        $r0 := @parameter0: kotlin.collections.RingBuffer;

        i0 = $r0.<kotlin.collections.RingBuffer: int capacity>;

        return i0;
    }

    public static final int access$getStartIndex$p(kotlin.collections.RingBuffer)
    {
        kotlin.collections.RingBuffer $r0;
        int i0;

        $r0 := @parameter0: kotlin.collections.RingBuffer;

        i0 = $r0.<kotlin.collections.RingBuffer: int startIndex>;

        return i0;
    }

    private final int forward(int, int)
    {
        kotlin.collections.RingBuffer $r0;
        int $i0, $i1;

        $r0 := @this: kotlin.collections.RingBuffer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i1 = $i0 + $i1;

        $i0 = staticinvoke <kotlin.collections.RingBuffer: int access$getCapacity$p(kotlin.collections.RingBuffer)>($r0);

        $i0 = $i1 % $i0;

        return $i0;
    }

    public final void add(java.lang.Object)
    {
        kotlin.collections.RingBuffer $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.Object[] $r2;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;

        $r0 := @this: kotlin.collections.RingBuffer;

        $r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke $r0.<kotlin.collections.RingBuffer: boolean isFull()>();

        if $z0 != 0 goto label1;

        $r2 = $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer>;

        $i0 = $r0.<kotlin.collections.RingBuffer: int startIndex>;

        $i1 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        $i0 = $i0 + $i1;

        $i1 = staticinvoke <kotlin.collections.RingBuffer: int access$getCapacity$p(kotlin.collections.RingBuffer)>($r0);

        $i0 = $i0 % $i1;

        $r2[$i0] = $r1;

        $i0 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        $i0 = $i0 + 1;

        $r0.<kotlin.collections.RingBuffer: int size> = $i0;

        return;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ring buffer is full");

        throw $r3;
    }

    public final kotlin.collections.RingBuffer expanded(int)
    {
        kotlin.collections.RingBuffer $r0, $r3;
        int $i0, $i1, $i2;
        java.lang.Object[] $r1, $r2;

        $r0 := @this: kotlin.collections.RingBuffer;

        $i0 := @parameter0: int;

        $i1 = $r0.<kotlin.collections.RingBuffer: int capacity>;

        $i2 = $i1 >> 1;

        $i1 = $i1 + $i2;

        $i1 = $i1 + 1;

        $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i1, $i0);

        $i1 = $r0.<kotlin.collections.RingBuffer: int startIndex>;

        if $i1 != 0 goto label1;

        $r1 = $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer>;

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r2 = $r1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "copyOf(this, newSize)");

        goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[$i0];

        $r2 = virtualinvoke $r0.<kotlin.collections.RingBuffer: java.lang.Object[] toArray(java.lang.Object[])>($r1);

     label2:
        $r3 = new kotlin.collections.RingBuffer;

        $i0 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        specialinvoke $r3.<kotlin.collections.RingBuffer: void <init>(java.lang.Object[],int)>($r2, $i0);

        return $r3;
    }

    public java.lang.Object get(int)
    {
        kotlin.collections.RingBuffer $r0;
        int $i0, $i1;
        kotlin.collections.AbstractList$Companion $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        $r0 := @this: kotlin.collections.RingBuffer;

        $i0 := @parameter0: int;

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)>($i0, $i1);

        $r2 = $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer>;

        $i1 = $r0.<kotlin.collections.RingBuffer: int startIndex>;

        $i0 = $i1 + $i0;

        $i1 = staticinvoke <kotlin.collections.RingBuffer: int access$getCapacity$p(kotlin.collections.RingBuffer)>($r0);

        $i0 = $i0 % $i1;

        $r3 = $r2[$i0];

        return $r3;
    }

    public int getSize()
    {
        kotlin.collections.RingBuffer $r0;
        int i0;

        $r0 := @this: kotlin.collections.RingBuffer;

        i0 = $r0.<kotlin.collections.RingBuffer: int size>;

        return i0;
    }

    public final boolean isFull()
    {
        kotlin.collections.RingBuffer $r0;
        int $i0, $i1;

        $r0 := @this: kotlin.collections.RingBuffer;

        $i1 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        $i0 = $r0.<kotlin.collections.RingBuffer: int capacity>;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        kotlin.collections.RingBuffer $r0;
        kotlin.collections.RingBuffer$iterator$1 $r1;

        $r0 := @this: kotlin.collections.RingBuffer;

        $r1 = new kotlin.collections.RingBuffer$iterator$1;

        specialinvoke $r1.<kotlin.collections.RingBuffer$iterator$1: void <init>(kotlin.collections.RingBuffer)>($r0);

        return $r1;
    }

    public final void removeFirst(int)
    {
        kotlin.collections.RingBuffer $r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @this: kotlin.collections.RingBuffer;

        $i1 := @parameter0: int;

        $z0 = 1;

        if $i1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label8;

        $i2 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        if $i1 > $i2 goto label3;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label7;

        if $i1 <= 0 goto label9;

        $i2 = $r0.<kotlin.collections.RingBuffer: int startIndex>;

        $i0 = $i2 + $i1;

        $i3 = staticinvoke <kotlin.collections.RingBuffer: int access$getCapacity$p(kotlin.collections.RingBuffer)>($r0);

        $i3 = $i0 % $i3;

        if $i2 <= $i3 goto label5;

        $r1 = $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer>;

        $i0 = $r0.<kotlin.collections.RingBuffer: int capacity>;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>($r1, null, $i2, $i0);

        $r1 = $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer>;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>($r1, null, 0, $i3);

        goto label6;

     label5:
        $r1 = $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer>;

        staticinvoke <kotlin.collections.ArraysKt: void fill(java.lang.Object[],java.lang.Object,int,int)>($r1, null, $i2, $i3);

     label6:
        $r0.<kotlin.collections.RingBuffer: int startIndex> = $i3;

        $i2 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        $i1 = $i2 - $i1;

        $r0.<kotlin.collections.RingBuffer: int size> = $i1;

        return;

     label7:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n shouldn\'t be greater than the buffer size: n = ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size = ");

        $i1 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label8:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n shouldn\'t be negative but it is ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label9:
        return;
    }

    public java.lang.Object[] toArray()
    {
        kotlin.collections.RingBuffer $r0;
        int $i0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.collections.RingBuffer;

        $i0 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        $r1 = newarray (java.lang.Object)[$i0];

        $r1 = virtualinvoke $r0.<kotlin.collections.RingBuffer: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        kotlin.collections.RingBuffer $r0;
        java.lang.Object[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r3;

        $r0 := @this: kotlin.collections.RingBuffer;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array");

        $i0 = lengthof $r1;

        $i1 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        if $i0 >= $i1 goto label1;

        $i0 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0);

        $r1 = $r2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "copyOf(this, newSize)");

     label1:
        $i0 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        $i1 = $r0.<kotlin.collections.RingBuffer: int startIndex>;

        $i2 = 0;

        $i3 = 0;

     label2:
        if $i3 >= $i0 goto label3;

        $i4 = $r0.<kotlin.collections.RingBuffer: int capacity>;

        if $i1 >= $i4 goto label3;

        $r2 = $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer>;

        $r3 = $r2[$i1];

        $r1[$i3] = $r3;

        $i3 = $i3 + 1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        if $i3 >= $i0 goto label4;

        $r2 = $r0.<kotlin.collections.RingBuffer: java.lang.Object[] buffer>;

        $r3 = $r2[$i2];

        $r1[$i3] = $r3;

        $i3 = $i3 + 1;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $i0 = lengthof $r1;

        $i1 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        if $i0 <= $i1 goto label5;

        $i0 = virtualinvoke $r0.<kotlin.collections.RingBuffer: int size()>();

        $r1[$i0] = null;

     label5:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.RingBuffer.toArray>");

        return $r1;
    }

kotlin.collections.RingBuffer$iterator$1
<kotlin.collections.RingBuffer$iterator$1: int count>
<kotlin.collections.RingBuffer$iterator$1: int index>
<kotlin.collections.RingBuffer$iterator$1: kotlin.collections.RingBuffer this$0>
    void <init>(kotlin.collections.RingBuffer)
    {
        kotlin.collections.RingBuffer$iterator$1 $r0;
        kotlin.collections.RingBuffer $r1;
        int $i0;

        $r0 := @this: kotlin.collections.RingBuffer$iterator$1;

        $r1 := @parameter0: kotlin.collections.RingBuffer;

        $r0.<kotlin.collections.RingBuffer$iterator$1: kotlin.collections.RingBuffer this$0> = $r1;

        specialinvoke $r0.<kotlin.collections.AbstractIterator: void <init>()>();

        $i0 = virtualinvoke $r1.<kotlin.collections.RingBuffer: int size()>();

        $r0.<kotlin.collections.RingBuffer$iterator$1: int count> = $i0;

        $i0 = staticinvoke <kotlin.collections.RingBuffer: int access$getStartIndex$p(kotlin.collections.RingBuffer)>($r1);

        $r0.<kotlin.collections.RingBuffer$iterator$1: int index> = $i0;

        return;
    }

    protected void computeNext()
    {
        kotlin.collections.RingBuffer$iterator$1 $r0;
        int $i0, $i1;
        kotlin.collections.RingBuffer $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        $r0 := @this: kotlin.collections.RingBuffer$iterator$1;

        $i0 = $r0.<kotlin.collections.RingBuffer$iterator$1: int count>;

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<kotlin.collections.RingBuffer$iterator$1: void done()>();

        return;

     label1:
        $r1 = $r0.<kotlin.collections.RingBuffer$iterator$1: kotlin.collections.RingBuffer this$0>;

        $r2 = staticinvoke <kotlin.collections.RingBuffer: java.lang.Object[] access$getBuffer$p(kotlin.collections.RingBuffer)>($r1);

        $i0 = $r0.<kotlin.collections.RingBuffer$iterator$1: int index>;

        $r3 = $r2[$i0];

        virtualinvoke $r0.<kotlin.collections.RingBuffer$iterator$1: void setNext(java.lang.Object)>($r3);

        $r1 = $r0.<kotlin.collections.RingBuffer$iterator$1: kotlin.collections.RingBuffer this$0>;

        $i0 = $r0.<kotlin.collections.RingBuffer$iterator$1: int index>;

        $i0 = $i0 + 1;

        $i1 = staticinvoke <kotlin.collections.RingBuffer: int access$getCapacity$p(kotlin.collections.RingBuffer)>($r1);

        $i0 = $i0 % $i1;

        $r0.<kotlin.collections.RingBuffer$iterator$1: int index> = $i0;

        $i0 = $r0.<kotlin.collections.RingBuffer$iterator$1: int count>;

        $i0 = $i0 + -1;

        $r0.<kotlin.collections.RingBuffer$iterator$1: int count> = $i0;

        return;
    }

