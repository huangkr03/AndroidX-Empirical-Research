androidx.test.runner.UsageTrackerFacilitator
<androidx.test.runner.UsageTrackerFacilitator: java.lang.String TAG>
<androidx.test.runner.UsageTrackerFacilitator: boolean shouldTrackUsage>
    public void <init>(androidx.test.internal.runner.RunnerArgs)
    {
        androidx.test.runner.UsageTrackerFacilitator r0;
        androidx.test.internal.runner.RunnerArgs r1;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: androidx.test.runner.UsageTrackerFacilitator;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "runnerArgs cannot be null!");

        $r3 = r1.<androidx.test.internal.runner.RunnerArgs: java.lang.String orchestratorService>;

        if $r3 == null goto label3;

        $z1 = r1.<androidx.test.internal.runner.RunnerArgs: boolean disableAnalytics>;

        if $z1 != 0 goto label1;

        $z2 = r1.<androidx.test.internal.runner.RunnerArgs: boolean listTestsForOrchestrator>;

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        r0.<androidx.test.runner.UsageTrackerFacilitator: boolean shouldTrackUsage> = $z3;

        goto label6;

     label3:
        $z0 = r1.<androidx.test.internal.runner.RunnerArgs: boolean disableAnalytics>;

        if $z0 != 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        r0.<androidx.test.runner.UsageTrackerFacilitator: boolean shouldTrackUsage> = $z4;

     label6:
        return;
    }

    public void <init>(boolean)
    {
        androidx.test.runner.UsageTrackerFacilitator r0;
        boolean z0;

        r0 := @this: androidx.test.runner.UsageTrackerFacilitator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.test.runner.UsageTrackerFacilitator: boolean shouldTrackUsage> = z0;

        return;
    }

    public void registerUsageTracker(androidx.test.internal.runner.tracker.UsageTracker)
    {
        androidx.test.runner.UsageTrackerFacilitator r0;
        androidx.test.internal.runner.tracker.UsageTracker r1;
        androidx.test.internal.runner.tracker.UsageTracker$NoOpUsageTracker $r2;
        boolean $z0;

        r0 := @this: androidx.test.runner.UsageTrackerFacilitator;

        r1 := @parameter0: androidx.test.internal.runner.tracker.UsageTracker;

        if r1 == null goto label1;

        $z0 = virtualinvoke r0.<androidx.test.runner.UsageTrackerFacilitator: boolean shouldTrackUsage()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("UsageTrackerFacilitator", "Usage tracking enabled");

        staticinvoke <androidx.test.internal.runner.tracker.UsageTrackerRegistry: void registerInstance(androidx.test.internal.runner.tracker.UsageTracker)>(r1);

        return;

     label1:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("UsageTrackerFacilitator", "Usage tracking disabled");

        $r2 = new androidx.test.internal.runner.tracker.UsageTracker$NoOpUsageTracker;

        specialinvoke $r2.<androidx.test.internal.runner.tracker.UsageTracker$NoOpUsageTracker: void <init>()>();

        staticinvoke <androidx.test.internal.runner.tracker.UsageTrackerRegistry: void registerInstance(androidx.test.internal.runner.tracker.UsageTracker)>($r2);

        return;
    }

    public void sendUsages()
    {
        androidx.test.runner.UsageTrackerFacilitator r0;
        boolean $z0;
        androidx.test.internal.runner.tracker.UsageTracker $r1;

        r0 := @this: androidx.test.runner.UsageTrackerFacilitator;

        $z0 = virtualinvoke r0.<androidx.test.runner.UsageTrackerFacilitator: boolean shouldTrackUsage()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <androidx.test.internal.runner.tracker.UsageTrackerRegistry: androidx.test.internal.runner.tracker.UsageTracker getInstance()>();

        interfaceinvoke $r1.<androidx.test.internal.runner.tracker.UsageTracker: void sendUsages()>();

     label1:
        return;
    }

    public void trackUsage(java.lang.String, java.lang.String)
    {
        androidx.test.runner.UsageTrackerFacilitator r0;
        java.lang.String r1, r2;
        boolean $z0;
        androidx.test.internal.runner.tracker.UsageTracker $r3;

        r0 := @this: androidx.test.runner.UsageTrackerFacilitator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<androidx.test.runner.UsageTrackerFacilitator: boolean shouldTrackUsage()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <androidx.test.internal.runner.tracker.UsageTrackerRegistry: androidx.test.internal.runner.tracker.UsageTracker getInstance()>();

        interfaceinvoke $r3.<androidx.test.internal.runner.tracker.UsageTracker: void trackUsage(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        return;
    }

    public boolean shouldTrackUsage()
    {
        androidx.test.runner.UsageTrackerFacilitator r0;
        boolean $z0;

        r0 := @this: androidx.test.runner.UsageTrackerFacilitator;

        $z0 = r0.<androidx.test.runner.UsageTrackerFacilitator: boolean shouldTrackUsage>;

        return $z0;
    }

