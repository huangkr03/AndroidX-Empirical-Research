androidx.media3.exoplayer.rtsp.RtspMediaTrack
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_PROFILE_LEVEL_ID>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_SPROP_PARAMS>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_AMR_OCTET_ALIGN>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_AMR_INTERLEAVING>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_H265_SPROP_SPS>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_H265_SPROP_PPS>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_H265_SPROP_VPS>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_H265_SPROP_MAX_DON_DIFF>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_MP4A_CONFIG>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String PARAMETER_MP4A_C_PRESENT>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String AAC_CODECS_PREFIX>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String H264_CODECS_PREFIX>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String MPEG4_CODECS_PREFIX>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: java.lang.String GENERIC_CONTROL_ATTR>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: int DEFAULT_MP4V_WIDTH>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: int DEFAULT_MP4V_HEIGHT>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: int DEFAULT_VP8_WIDTH>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: int DEFAULT_VP8_HEIGHT>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: int OPUS_CLOCK_RATE>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: int DEFAULT_VP9_WIDTH>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: int DEFAULT_VP9_HEIGHT>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: int DEFAULT_H263_WIDTH>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: int DEFAULT_H263_HEIGHT>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>
<androidx.media3.exoplayer.rtsp.RtspMediaTrack: android.net.Uri uri>
    public void <init>(androidx.media3.exoplayer.rtsp.MediaDescription, android.net.Uri)
    {
        androidx.media3.exoplayer.rtsp.RtspMediaTrack r0;
        androidx.media3.exoplayer.rtsp.MediaDescription r1;
        android.net.Uri r2, $r10;
        com.google.common.collect.ImmutableMap $r3, $r5;
        boolean $z0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r4;
        java.lang.Object $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: androidx.media3.exoplayer.rtsp.RtspMediaTrack;

        r1 := @parameter0: androidx.media3.exoplayer.rtsp.MediaDescription;

        r2 := @parameter1: android.net.Uri;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = r1.<androidx.media3.exoplayer.rtsp.MediaDescription: com.google.common.collect.ImmutableMap attributes>;

        $z0 = virtualinvoke $r3.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("control");

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z0, "missing attribute control");

        $r4 = staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: androidx.media3.exoplayer.rtsp.RtpPayloadFormat generatePayloadFormat(androidx.media3.exoplayer.rtsp.MediaDescription)>(r1);

        r0.<androidx.media3.exoplayer.rtsp.RtspMediaTrack: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat> = $r4;

        $r5 = r1.<androidx.media3.exoplayer.rtsp.MediaDescription: com.google.common.collect.ImmutableMap attributes>;

        $r6 = virtualinvoke $r5.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("control");

        $r7 = (java.lang.String) $r6;

        $r8 = staticinvoke <androidx.media3.common.util.Util: java.lang.Object castNonNull(java.lang.Object)>($r7);

        $r9 = (java.lang.String) $r8;

        $r10 = staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: android.net.Uri extractTrackUri(android.net.Uri,java.lang.String)>(r2, $r9);

        r0.<androidx.media3.exoplayer.rtsp.RtspMediaTrack: android.net.Uri uri> = $r10;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.media3.exoplayer.rtsp.RtspMediaTrack r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r5, $r6;
        boolean $z0, $z1, $z2;
        android.net.Uri $r7, $r8;

        r0 := @this: androidx.media3.exoplayer.rtsp.RtspMediaTrack;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (androidx.media3.exoplayer.rtsp.RtspMediaTrack) r1;

        $r6 = r0.<androidx.media3.exoplayer.rtsp.RtspMediaTrack: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $r5 = r2.<androidx.media3.exoplayer.rtsp.RtspMediaTrack: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $z0 = virtualinvoke $r6.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

        $r8 = r0.<androidx.media3.exoplayer.rtsp.RtspMediaTrack: android.net.Uri uri>;

        $r7 = r2.<androidx.media3.exoplayer.rtsp.RtspMediaTrack: android.net.Uri uri>;

        $z1 = virtualinvoke $r8.<android.net.Uri: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public int hashCode()
    {
        androidx.media3.exoplayer.rtsp.RtspMediaTrack r0;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r1;
        int $i0, $i1, $i2, $i3, i5, i6;
        android.net.Uri $r2;
        byte b4;

        r0 := @this: androidx.media3.exoplayer.rtsp.RtspMediaTrack;

        b4 = 7;

        $i0 = 31 * b4;

        $r1 = r0.<androidx.media3.exoplayer.rtsp.RtspMediaTrack: androidx.media3.exoplayer.rtsp.RtpPayloadFormat payloadFormat>;

        $i1 = virtualinvoke $r1.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: int hashCode()>();

        i5 = $i0 + $i1;

        $i2 = 31 * i5;

        $r2 = r0.<androidx.media3.exoplayer.rtsp.RtspMediaTrack: android.net.Uri uri>;

        $i3 = virtualinvoke $r2.<android.net.Uri: int hashCode()>();

        i6 = $i2 + $i3;

        return i6;
    }

    static androidx.media3.exoplayer.rtsp.RtpPayloadFormat generatePayloadFormat(androidx.media3.exoplayer.rtsp.MediaDescription)
    {
        androidx.media3.exoplayer.rtsp.MediaDescription r0;
        androidx.media3.common.Format$Builder r1, $r8, $r18, $r20, $r22, $r29, $r30, $r36;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11, $i12;
        java.lang.String r2, r3, r5, r6, $r13, $r14, $r28, $r31, $r34;
        com.google.common.collect.ImmutableMap r4;
        androidx.media3.extractor.AacUtil$Config r7;
        androidx.media3.exoplayer.rtsp.MediaDescription$RtpMapAttribute $r9, $r10, $r12, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37;
        androidx.media3.exoplayer.rtsp.RtpPayloadFormat $r16;
        androidx.media3.common.Format $r17;
        java.lang.StringBuilder $r25, $r26, $r27;
        java.lang.Object $r33, $r39;
        byte b10;

        r0 := @parameter0: androidx.media3.exoplayer.rtsp.MediaDescription;

        $r8 = new androidx.media3.common.Format$Builder;

        specialinvoke $r8.<androidx.media3.common.Format$Builder: void <init>()>();

        r1 = $r8;

        $i2 = r0.<androidx.media3.exoplayer.rtsp.MediaDescription: int bitrate>;

        if $i2 <= 0 goto label01;

        $i8 = r0.<androidx.media3.exoplayer.rtsp.MediaDescription: int bitrate>;

        virtualinvoke r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setAverageBitrate(int)>($i8);

     label01:
        $r9 = r0.<androidx.media3.exoplayer.rtsp.MediaDescription: androidx.media3.exoplayer.rtsp.MediaDescription$RtpMapAttribute rtpMapAttribute>;

        i0 = $r9.<androidx.media3.exoplayer.rtsp.MediaDescription$RtpMapAttribute: int payloadType>;

        $r10 = r0.<androidx.media3.exoplayer.rtsp.MediaDescription: androidx.media3.exoplayer.rtsp.MediaDescription$RtpMapAttribute rtpMapAttribute>;

        r2 = $r10.<androidx.media3.exoplayer.rtsp.MediaDescription$RtpMapAttribute: java.lang.String mediaEncoding>;

        r3 = staticinvoke <androidx.media3.exoplayer.rtsp.RtpPayloadFormat: java.lang.String getMimeTypeFromRtpMediaType(java.lang.String)>(r2);

        virtualinvoke r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleMimeType(java.lang.String)>(r3);

        $r12 = r0.<androidx.media3.exoplayer.rtsp.MediaDescription: androidx.media3.exoplayer.rtsp.MediaDescription$RtpMapAttribute rtpMapAttribute>;

        i1 = $r12.<androidx.media3.exoplayer.rtsp.MediaDescription$RtpMapAttribute: int clockRate>;

        i9 = -1;

        $r14 = "audio";

        $r13 = r0.<androidx.media3.exoplayer.rtsp.MediaDescription: java.lang.String mediaType>;

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label02;

        $r35 = r0.<androidx.media3.exoplayer.rtsp.MediaDescription: androidx.media3.exoplayer.rtsp.MediaDescription$RtpMapAttribute rtpMapAttribute>;

        $i7 = $r35.<androidx.media3.exoplayer.rtsp.MediaDescription$RtpMapAttribute: int encodingParameters>;

        i9 = staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: int inferChannelCount(int,java.lang.String)>($i7, r3);

        $r36 = virtualinvoke r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>(i1);

        virtualinvoke $r36.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>(i9);

     label02:
        r4 = virtualinvoke r0.<androidx.media3.exoplayer.rtsp.MediaDescription: com.google.common.collect.ImmutableMap getFmtpParametersAsMap()>();

        r5 = r3;

        b10 = -1;

        $i3 = virtualinvoke r5.<java.lang.String: int hashCode()>();

        lookupswitch($i3)
        {
            case -1664118616: goto label08;
            case -1662541442: goto label10;
            case -1606874997: goto label05;
            case -53558318: goto label03;
            case 187078296: goto label14;
            case 187094639: goto label13;
            case 1187890754: goto label07;
            case 1331836730: goto label09;
            case 1503095341: goto label04;
            case 1504891608: goto label06;
            case 1599127256: goto label11;
            case 1599127257: goto label12;
            case 1903231877: goto label15;
            case 1903589369: goto label16;
            default: goto label17;
        };

     label03:
        $z21 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("audio/mp4a-latm");

        if $z21 == 0 goto label17;

        b10 = 0;

        goto label17;

     label04:
        $z16 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("audio/3gpp");

        if $z16 == 0 goto label17;

        b10 = 1;

        goto label17;

     label05:
        $z22 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("audio/amr-wb");

        if $z22 == 0 goto label17;

        b10 = 2;

        goto label17;

     label06:
        $z15 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("audio/opus");

        if $z15 == 0 goto label17;

        b10 = 3;

        goto label17;

     label07:
        $z18 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("video/mp4v-es");

        if $z18 == 0 goto label17;

        b10 = 4;

        goto label17;

     label08:
        $z24 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("video/3gpp");

        if $z24 == 0 goto label17;

        b10 = 5;

        goto label17;

     label09:
        $z17 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("video/avc");

        if $z17 == 0 goto label17;

        b10 = 6;

        goto label17;

     label10:
        $z23 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("video/hevc");

        if $z23 == 0 goto label17;

        b10 = 7;

        goto label17;

     label11:
        $z14 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("video/x-vnd.on2.vp8");

        if $z14 == 0 goto label17;

        b10 = 8;

        goto label17;

     label12:
        $z13 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("video/x-vnd.on2.vp9");

        if $z13 == 0 goto label17;

        b10 = 9;

        goto label17;

     label13:
        $z19 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("audio/raw");

        if $z19 == 0 goto label17;

        b10 = 10;

        goto label17;

     label14:
        $z20 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("audio/ac3");

        if $z20 == 0 goto label17;

        b10 = 11;

        goto label17;

     label15:
        $z12 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("audio/g711-alaw");

        if $z12 == 0 goto label17;

        b10 = 12;

        goto label17;

     label16:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("audio/g711-mlaw");

        if $z1 == 0 goto label17;

        b10 = 13;

     label17:
        tableswitch(b10)
        {
            case 0: goto label18;
            case 1: goto label28;
            case 2: goto label28;
            case 3: goto label35;
            case 4: goto label40;
            case 5: goto label43;
            case 6: goto label44;
            case 7: goto label47;
            case 8: goto label50;
            case 9: goto label51;
            case 10: goto label52;
            case 11: goto label53;
            case 12: goto label53;
            case 13: goto label53;
            default: goto label53;
        };

     label18:
        if i9 == -1 goto label19;

        $z25 = 1;

        goto label20;

     label19:
        $z25 = 0;

     label20:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z25);

        $z8 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z8 != 0 goto label21;

        $z26 = 1;

        goto label22;

     label21:
        $z26 = 0;

     label22:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z26, "missing attribute fmtp");

        $z9 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("MP4A-LATM");

        if $z9 == 0 goto label27;

        $z10 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("cpresent");

        if $z10 == 0 goto label23;

        $r33 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("cpresent");

        $r34 = (java.lang.String) $r33;

        $z11 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z11 == 0 goto label23;

        $z27 = 1;

        goto label24;

     label23:
        $z27 = 0;

     label24:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z27, "Only supports cpresent=0 in AAC audio.");

        $r39 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("config");

        r6 = (java.lang.String) $r39;

        staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "AAC audio stream must include config fmtp parameter");

        $i11 = virtualinvoke r6.<java.lang.String: int length()>();

        $i12 = $i11 % 2;

        if $i12 != 0 goto label25;

        $z28 = 1;

        goto label26;

     label25:
        $z28 = 0;

     label26:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformat MPEG4 config: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z28, $r28);

        r7 = staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: androidx.media3.extractor.AacUtil$Config parseAacStreamMuxConfig(java.lang.String)>(r6);

        $i5 = r7.<androidx.media3.extractor.AacUtil$Config: int sampleRateHz>;

        $r29 = virtualinvoke r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setSampleRate(int)>($i5);

        $i6 = r7.<androidx.media3.extractor.AacUtil$Config: int channelCount>;

        $r30 = virtualinvoke $r29.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setChannelCount(int)>($i6);

        $r31 = r7.<androidx.media3.extractor.AacUtil$Config: java.lang.String codecs>;

        virtualinvoke $r30.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setCodecs(java.lang.String)>($r31);

     label27:
        staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: void processAacFmtpAttribute(androidx.media3.common.Format$Builder,com.google.common.collect.ImmutableMap,int,int)>(r1, r4, i9, i1);

        goto label53;

     label28:
        if i9 != 1 goto label29;

        $z29 = 1;

        goto label30;

     label29:
        $z29 = 0;

     label30:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z29, "Multi channel AMR is not currently supported.");

        $z5 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z5 != 0 goto label31;

        $z30 = 1;

        goto label32;

     label31:
        $z30 = 0;

     label32:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z30, "fmtp parameters must include octet-align.");

        $z6 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("octet-align");

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z6, "Only octet aligned mode is currently supported.");

        $z7 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("interleaving");

        if $z7 != 0 goto label33;

        $z31 = 1;

        goto label34;

     label33:
        $z31 = 0;

     label34:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z31, "Interleaving mode is not currently supported.");

        goto label53;

     label35:
        if i9 == -1 goto label36;

        $z32 = 1;

        goto label37;

     label36:
        $z32 = 0;

     label37:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z32);

        if i1 != 48000 goto label38;

        $z33 = 1;

        goto label39;

     label38:
        $z33 = 0;

     label39:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z33, "Invalid OPUS clock rate.");

        goto label53;

     label40:
        $z4 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z4 != 0 goto label41;

        $z34 = 1;

        goto label42;

     label41:
        $z34 = 0;

     label42:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z34);

        staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: void processMPEG4FmtpAttribute(androidx.media3.common.Format$Builder,com.google.common.collect.ImmutableMap)>(r1, r4);

        goto label53;

     label43:
        $r22 = virtualinvoke r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>(352);

        virtualinvoke $r22.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>(288);

        goto label53;

     label44:
        $z3 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z3 != 0 goto label45;

        $z35 = 1;

        goto label46;

     label45:
        $z35 = 0;

     label46:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z35, "missing attribute fmtp");

        staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: void processH264FmtpAttribute(androidx.media3.common.Format$Builder,com.google.common.collect.ImmutableMap)>(r1, r4);

        goto label53;

     label47:
        $z2 = virtualinvoke r4.<com.google.common.collect.ImmutableMap: boolean isEmpty()>();

        if $z2 != 0 goto label48;

        $z36 = 1;

        goto label49;

     label48:
        $z36 = 0;

     label49:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z36, "missing attribute fmtp");

        staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: void processH265FmtpAttribute(androidx.media3.common.Format$Builder,com.google.common.collect.ImmutableMap)>(r1, r4);

        goto label53;

     label50:
        $r20 = virtualinvoke r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>(320);

        virtualinvoke $r20.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>(240);

        goto label53;

     label51:
        $r18 = virtualinvoke r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>(320);

        virtualinvoke $r18.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>(240);

        goto label53;

     label52:
        $i4 = staticinvoke <androidx.media3.exoplayer.rtsp.RtpPayloadFormat: int getRawPcmEncodingType(java.lang.String)>(r2);

        virtualinvoke r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setPcmEncoding(int)>($i4);

        goto label53;

     label53:
        if i1 <= 0 goto label54;

        $z37 = 1;

        goto label55;

     label54:
        $z37 = 0;

     label55:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean)>($z37);

        $r16 = new androidx.media3.exoplayer.rtsp.RtpPayloadFormat;

        $r17 = virtualinvoke r1.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

        specialinvoke $r16.<androidx.media3.exoplayer.rtsp.RtpPayloadFormat: void <init>(androidx.media3.common.Format,int,int,java.util.Map,java.lang.String)>($r17, i0, i1, r4, r2);

        return $r16;
    }

    private static int inferChannelCount(int, java.lang.String)
    {
        int i0;
        java.lang.String r0;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if i0 == -1 goto label1;

        return i0;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("audio/ac3");

        if $z0 == 0 goto label2;

        return 6;

     label2:
        return 1;
    }

    private static void processAacFmtpAttribute(androidx.media3.common.Format$Builder, com.google.common.collect.ImmutableMap, int, int)
    {
        androidx.media3.common.Format$Builder r0;
        com.google.common.collect.ImmutableMap r1;
        int i0, i1;
        java.lang.String r2, $r4, $r9;
        boolean $z0;
        java.lang.Object $r3, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        byte[] $r11;
        com.google.common.collect.ImmutableList $r12;

        r0 := @parameter0: androidx.media3.common.Format$Builder;

        r1 := @parameter1: com.google.common.collect.ImmutableMap;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("profile-level-id");

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z0, "missing profile-level-id param");

        $r3 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("profile-level-id");

        $r4 = (java.lang.String) $r3;

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        r2 = (java.lang.String) $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mp4a.40.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setCodecs(java.lang.String)>($r9);

        $r11 = staticinvoke <androidx.media3.extractor.AacUtil: byte[] buildAacLcAudioSpecificConfig(int,int)>(i1, i0);

        $r12 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>($r11);

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setInitializationData(java.util.List)>($r12);

        return;
    }

    private static androidx.media3.extractor.AacUtil$Config parseAacStreamMuxConfig(java.lang.String)
    {
        java.lang.String r0;
        androidx.media3.common.util.ParsableBitArray r1, $r3;
        java.lang.Throwable r2, $r6;
        byte[] $r4;
        int $i0, $i1, $i2, $i3;
        androidx.media3.extractor.AacUtil$Config $r5;
        java.lang.IllegalArgumentException $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $r3 = new androidx.media3.common.util.ParsableBitArray;

        $r4 = staticinvoke <androidx.media3.common.util.Util: byte[] getBytesFromHexString(java.lang.String)>(r0);

        specialinvoke $r3.<androidx.media3.common.util.ParsableBitArray: void <init>(byte[])>($r4);

        r1 = $r3;

        $i0 = virtualinvoke r1.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>(1);

        if $i0 != 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z0, "Only supports audio mux version 0.");

        $i1 = virtualinvoke r1.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>(1);

        if $i1 != 1 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, "Only supports allStreamsSameTimeFraming.");

        virtualinvoke r1.<androidx.media3.common.util.ParsableBitArray: void skipBits(int)>(6);

        $i2 = virtualinvoke r1.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>(4);

        if $i2 != 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "Only supports one program.");

        $i3 = virtualinvoke r1.<androidx.media3.common.util.ParsableBitArray: int readBits(int)>(3);

        if $i3 != 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z3, "Only supports one numLayer.");

     label09:
        $r5 = staticinvoke <androidx.media3.extractor.AacUtil: androidx.media3.extractor.AacUtil$Config parseAudioSpecificConfig(androidx.media3.common.util.ParsableBitArray,boolean)>(r1, 0);

     label10:
        return $r5;

     label11:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch androidx.media3.common.ParserException from label09 to label10 with label11;
    }

    private static void processMPEG4FmtpAttribute(androidx.media3.common.Format$Builder, com.google.common.collect.ImmutableMap)
    {
        androidx.media3.common.Format$Builder r0, $r5, $r18;
        com.google.common.collect.ImmutableMap r1;
        java.lang.String r2, $r11, r23, $r24;
        android.util.Pair r3;
        java.lang.Object $r4, $r7, $r16, $r19;
        java.lang.StringBuilder $r8, $r9, $r10;
        com.google.common.collect.ImmutableList $r14;
        java.lang.Integer $r17, $r20;
        int $i0, $i1;
        byte[] r22;

        r0 := @parameter0: androidx.media3.common.Format$Builder;

        r1 := @parameter1: com.google.common.collect.ImmutableMap;

        $r4 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("config");

        r2 = (java.lang.String) $r4;

        if r2 == null goto label1;

        r22 = staticinvoke <androidx.media3.common.util.Util: byte[] getBytesFromHexString(java.lang.String)>(r2);

        $r14 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(r22);

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setInitializationData(java.util.List)>($r14);

        r3 = staticinvoke <androidx.media3.common.util.CodecSpecificDataUtil: android.util.Pair getVideoResolutionFromMpeg4VideoConfig(byte[])>(r22);

        $r16 = r3.<android.util.Pair: java.lang.Object first>;

        $r17 = (java.lang.Integer) $r16;

        $i0 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r18 = virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>($i0);

        $r19 = r3.<android.util.Pair: java.lang.Object second>;

        $r20 = (java.lang.Integer) $r19;

        $i1 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        virtualinvoke $r18.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>($i1);

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>(352);

        virtualinvoke $r5.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>(288);

     label2:
        $r7 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("profile-level-id");

        r23 = (java.lang.String) $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mp4v.");

        if r23 != null goto label3;

        $r24 = "1";

        goto label4;

     label3:
        $r24 = r23;

     label4:
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setCodecs(java.lang.String)>($r11);

        return;
    }

    private static byte[] getInitializationDataFromParameterSet(java.lang.String)
    {
        java.lang.String r0;
        byte[] r1, r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>(r0, 0);

        $i1 = lengthof r1;

        $r3 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        $i0 = lengthof $r3;

        $i2 = $i1 + $i0;

        r2 = newarray (byte)[$i2];

        $r5 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        $r4 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        $i3 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 0, $i3);

        $r6 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        $i5 = lengthof $r6;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    private static void processH264FmtpAttribute(androidx.media3.common.Format$Builder, com.google.common.collect.ImmutableMap)
    {
        androidx.media3.common.Format$Builder r0;
        com.google.common.collect.ImmutableMap r1;
        java.lang.String r2, r7, $r9, $r11, $r13, $r22, $r27;
        java.lang.String[] r3;
        com.google.common.collect.ImmutableList r4;
        byte[] r5, $r12, $r14, $r17;
        androidx.media3.extractor.NalUnitUtil$SpsData r6;
        boolean $z0, $z1;
        java.lang.Object $r8, $r10, $r16, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0;
        java.lang.StringBuilder $r24, $r25, $r26;

        r0 := @parameter0: androidx.media3.common.Format$Builder;

        r1 := @parameter1: com.google.common.collect.ImmutableMap;

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("sprop-parameter-sets");

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z0, "missing sprop parameter");

        $r8 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("sprop-parameter-sets");

        $r9 = (java.lang.String) $r8;

        $r10 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r9);

        r2 = (java.lang.String) $r10;

        r3 = staticinvoke <androidx.media3.common.util.Util: java.lang.String[] split(java.lang.String,java.lang.String)>(r2, ",");

        $i0 = lengthof r3;

        if $i0 != 2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, "empty sprop value");

        $r11 = r3[0];

        $r12 = staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: byte[] getInitializationDataFromParameterSet(java.lang.String)>($r11);

        $r13 = r3[1];

        $r14 = staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: byte[] getInitializationDataFromParameterSet(java.lang.String)>($r13);

        r4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>($r12, $r14);

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setInitializationData(java.util.List)>(r4);

        $r16 = virtualinvoke r4.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(0);

        r5 = (byte[]) $r16;

        $r17 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        $i2 = lengthof $r17;

        $i1 = lengthof r5;

        r6 = staticinvoke <androidx.media3.extractor.NalUnitUtil: androidx.media3.extractor.NalUnitUtil$SpsData parseSpsNalUnit(byte[],int,int)>(r5, $i2, $i1);

        $f0 = r6.<androidx.media3.extractor.NalUnitUtil$SpsData: float pixelWidthHeightRatio>;

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setPixelWidthHeightRatio(float)>($f0);

        $i3 = r6.<androidx.media3.extractor.NalUnitUtil$SpsData: int height>;

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>($i3);

        $i4 = r6.<androidx.media3.extractor.NalUnitUtil$SpsData: int width>;

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>($i4);

        $r21 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("profile-level-id");

        r7 = (java.lang.String) $r21;

        if r7 == null goto label3;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("avc1.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setCodecs(java.lang.String)>($r27);

        goto label4;

     label3:
        $i7 = r6.<androidx.media3.extractor.NalUnitUtil$SpsData: int profileIdc>;

        $i6 = r6.<androidx.media3.extractor.NalUnitUtil$SpsData: int constraintsFlagsAndReservedZero2Bits>;

        $i5 = r6.<androidx.media3.extractor.NalUnitUtil$SpsData: int levelIdc>;

        $r22 = staticinvoke <androidx.media3.common.util.CodecSpecificDataUtil: java.lang.String buildAvcCodecString(int,int,int)>($i7, $i6, $i5);

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setCodecs(java.lang.String)>($r22);

     label4:
        return;
    }

    private static void processH265FmtpAttribute(androidx.media3.common.Format$Builder, com.google.common.collect.ImmutableMap)
    {
        androidx.media3.common.Format$Builder r0, $r35;
        com.google.common.collect.ImmutableMap r1;
        java.lang.String r2, r3, $r12, $r14, $r19, $r21, r23, $r25, $r28, $r37;
        com.google.common.collect.ImmutableList r4;
        byte[] r5, $r30, $r31, $r32, $r34;
        androidx.media3.extractor.NalUnitUtil$H265SpsData r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r11, $r13, $r20, $r22, $r24, $r26, $r27, $r29, $r33;
        java.lang.StringBuilder $r15, $r16, $r17, $r18;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        float $f0;
        int[] $r36;

        r0 := @parameter0: androidx.media3.common.Format$Builder;

        r1 := @parameter1: com.google.common.collect.ImmutableMap;

        $z0 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("sprop-max-don-diff");

        if $z0 == 0 goto label3;

        $r11 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("sprop-max-don-diff");

        $r12 = (java.lang.String) $r11;

        $r13 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r12);

        $r14 = (java.lang.String) $r13;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14);

        if i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("non-zero sprop-max-don-diff ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z1, $r19);

     label3:
        $z2 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("sprop-vps");

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z2, "missing sprop-vps parameter");

        $r20 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("sprop-vps");

        $r21 = (java.lang.String) $r20;

        $r22 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r21);

        r23 = (java.lang.String) $r22;

        $z3 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("sprop-sps");

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z3, "missing sprop-sps parameter");

        $r24 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("sprop-sps");

        $r25 = (java.lang.String) $r24;

        $r26 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r25);

        r2 = (java.lang.String) $r26;

        $z4 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: boolean containsKey(java.lang.Object)>("sprop-pps");

        staticinvoke <androidx.media3.common.util.Assertions: void checkArgument(boolean,java.lang.Object)>($z4, "missing sprop-pps parameter");

        $r27 = virtualinvoke r1.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>("sprop-pps");

        $r28 = (java.lang.String) $r27;

        $r29 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r28);

        r3 = (java.lang.String) $r29;

        $r30 = staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: byte[] getInitializationDataFromParameterSet(java.lang.String)>(r23);

        $r31 = staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: byte[] getInitializationDataFromParameterSet(java.lang.String)>(r2);

        $r32 = staticinvoke <androidx.media3.exoplayer.rtsp.RtspMediaTrack: byte[] getInitializationDataFromParameterSet(java.lang.String)>(r3);

        r4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>($r30, $r31, $r32);

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setInitializationData(java.util.List)>(r4);

        $r33 = virtualinvoke r4.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(1);

        r5 = (byte[]) $r33;

        $r34 = <androidx.media3.extractor.NalUnitUtil: byte[] NAL_START_CODE>;

        $i1 = lengthof $r34;

        $i2 = lengthof r5;

        r6 = staticinvoke <androidx.media3.extractor.NalUnitUtil: androidx.media3.extractor.NalUnitUtil$H265SpsData parseH265SpsNalUnit(byte[],int,int)>(r5, $i1, $i2);

        $f0 = r6.<androidx.media3.extractor.NalUnitUtil$H265SpsData: float pixelWidthHeightRatio>;

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setPixelWidthHeightRatio(float)>($f0);

        $i3 = r6.<androidx.media3.extractor.NalUnitUtil$H265SpsData: int height>;

        $r35 = virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setHeight(int)>($i3);

        $i4 = r6.<androidx.media3.extractor.NalUnitUtil$H265SpsData: int width>;

        virtualinvoke $r35.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setWidth(int)>($i4);

        $i5 = r6.<androidx.media3.extractor.NalUnitUtil$H265SpsData: int generalProfileSpace>;

        $z5 = r6.<androidx.media3.extractor.NalUnitUtil$H265SpsData: boolean generalTierFlag>;

        $i6 = r6.<androidx.media3.extractor.NalUnitUtil$H265SpsData: int generalProfileIdc>;

        $i7 = r6.<androidx.media3.extractor.NalUnitUtil$H265SpsData: int generalProfileCompatibilityFlags>;

        $r36 = r6.<androidx.media3.extractor.NalUnitUtil$H265SpsData: int[] constraintBytes>;

        $i8 = r6.<androidx.media3.extractor.NalUnitUtil$H265SpsData: int generalLevelIdc>;

        $r37 = staticinvoke <androidx.media3.common.util.CodecSpecificDataUtil: java.lang.String buildHevcCodecString(int,boolean,int,int,int[],int)>($i5, $z5, $i6, $i7, $r36, $i8);

        virtualinvoke r0.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setCodecs(java.lang.String)>($r37);

        return;
    }

    private static android.net.Uri extractTrackUri(android.net.Uri, java.lang.String)
    {
        android.net.Uri r0, r2, $r5;
        java.lang.String r1;
        boolean $z0, $z1;
        android.net.Uri$Builder $r3, $r4;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<android.net.Uri: boolean isAbsolute()>();

        if $z0 == 0 goto label1;

        return r2;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z1 == 0 goto label2;

        return r0;

     label2:
        $r3 = virtualinvoke r0.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r5;
    }

