androidx.benchmark.macro.FrameTimingGfxInfoMetric
<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.lang.String packageName>
<androidx.benchmark.macro.FrameTimingGfxInfoMetric: androidx.benchmark.macro.JankCollectionHelper helper>
<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.util.Map keyRenameMap>
<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.util.Set keyAllowList>
    public void <init>()
    {
        androidx.benchmark.macro.FrameTimingGfxInfoMetric r0;
        androidx.benchmark.macro.JankCollectionHelper $r1;
        kotlin.Pair $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.util.Map $r22;
        java.util.Set $r23;
        kotlin.Pair[] r24;
        java.lang.String[] r25;

        r0 := @this: androidx.benchmark.macro.FrameTimingGfxInfoMetric;

        specialinvoke r0.<androidx.benchmark.macro.Metric: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        $r1 = new androidx.benchmark.macro.JankCollectionHelper;

        specialinvoke $r1.<androidx.benchmark.macro.JankCollectionHelper: void <init>()>();

        r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: androidx.benchmark.macro.JankCollectionHelper helper> = $r1;

        r24 = newarray (kotlin.Pair)[20];

        $r2 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("frame_render_time_percentile_50", "frameTime50thPercentileMs");

        r24[0] = $r2;

        $r3 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("frame_render_time_percentile_90", "frameTime90thPercentileMs");

        r24[1] = $r3;

        $r4 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("frame_render_time_percentile_95", "frameTime95thPercentileMs");

        r24[2] = $r4;

        $r5 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("frame_render_time_percentile_99", "frameTime99thPercentileMs");

        r24[3] = $r5;

        $r6 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("gpu_frame_render_time_percentile_50", "gpuFrameTime50thPercentileMs");

        r24[4] = $r6;

        $r7 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("gpu_frame_render_time_percentile_90", "gpuFrameTime90thPercentileMs");

        r24[5] = $r7;

        $r8 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("gpu_frame_render_time_percentile_95", "gpuFrameTime95thPercentileMs");

        r24[6] = $r8;

        $r9 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("gpu_frame_render_time_percentile_99", "gpuFrameTime99thPercentileMs");

        r24[7] = $r9;

        $r10 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("missed_vsync", "vsyncMissedFrameCount");

        r24[8] = $r10;

        $r11 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("deadline_missed", "deadlineMissedFrameCount");

        r24[9] = $r11;

        $r12 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("deadline_missed_legacy", "deadlineMissedFrameCountLegacy");

        r24[10] = $r12;

        $r13 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("janky_frames_count", "jankyFrameCount");

        r24[11] = $r13;

        $r14 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("janky_frames_legacy_count", "jankyFrameCountLegacy");

        r24[12] = $r14;

        $r15 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("high_input_latency", "highInputLatencyFrameCount");

        r24[13] = $r15;

        $r16 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("slow_ui_thread", "slowUiThreadFrameCount");

        r24[14] = $r16;

        $r17 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("slow_bmp_upload", "slowBitmapUploadFrameCount");

        r24[15] = $r17;

        $r18 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("slow_issue_draw_cmds", "slowIssueDrawCommandsFrameCount");

        r24[16] = $r18;

        $r19 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("total_frames", "totalFrameCount");

        r24[17] = $r19;

        $r20 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("janky_frames_percent", "jankyFramePercent");

        r24[18] = $r20;

        $r21 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>("janky_frames_legacy_percent", "jankyFramePercentLegacy");

        r24[19] = $r21;

        $r22 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair[])>(r24);

        r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.util.Map keyRenameMap> = $r22;

        r25 = newarray (java.lang.String)[5];

        r25[0] = "frameTime50thPercentileMs";

        r25[1] = "frameTime90thPercentileMs";

        r25[2] = "frameTime95thPercentileMs";

        r25[3] = "frameTime99thPercentileMs";

        r25[4] = "totalFrameCount";

        $r23 = staticinvoke <kotlin.collections.SetsKt: java.util.Set setOf(java.lang.Object[])>(r25);

        r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.util.Set keyAllowList> = $r23;

        return;
    }

    public void configure$benchmark_macro_release(java.lang.String)
    {
        androidx.benchmark.macro.FrameTimingGfxInfoMetric r0;
        java.lang.String r1;
        java.lang.String[] r2;
        androidx.benchmark.macro.JankCollectionHelper $r3;

        r0 := @this: androidx.benchmark.macro.FrameTimingGfxInfoMetric;

        r1 := @parameter0: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "packageName");

        r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.lang.String packageName> = r1;

        $r3 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: androidx.benchmark.macro.JankCollectionHelper helper>;

        r2 = newarray (java.lang.String)[1];

        r2[0] = r1;

        virtualinvoke $r3.<androidx.benchmark.macro.JankCollectionHelper: void addTrackedPackages(java.lang.String[])>(r2);

        return;
    }

    public void start$benchmark_macro_release()
    {
        androidx.benchmark.macro.FrameTimingGfxInfoMetric r0;
        java.lang.Throwable r1, $r4;
        android.app.Instrumentation r2;
        androidx.benchmark.macro.JankCollectionHelper $r3;
        androidx.benchmark.Shell $r5;
        boolean $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10, $r12, $r13, $r14;
        java.lang.IllegalStateException $r11;

        r0 := @this: androidx.benchmark.macro.FrameTimingGfxInfoMetric;

     label1:
        $r3 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: androidx.benchmark.macro.JankCollectionHelper helper>;

        virtualinvoke $r3.<androidx.benchmark.macro.JankCollectionHelper: boolean startCollecting()>();

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        r2 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        if r2 == null goto label7;

        $r5 = <androidx.benchmark.Shell: androidx.benchmark.Shell INSTANCE>;

        $r10 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.lang.String packageName>;

        if $r10 != null goto label4;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("packageName");

        $r10 = null;

     label4:
        $z1 = virtualinvoke $r5.<androidx.benchmark.Shell: boolean isPackageAlive(java.lang.String)>($r10);

        if $z1 != 0 goto label7;

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke r1.<java.lang.RuntimeException: java.lang.String getMessage()>();

        if $r12 != null goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Assertion error, ");

        $r13 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.lang.String packageName>;

        if $r13 != null goto label5;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("packageName");

        $r13 = null;

     label5:
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not running");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r14 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label7:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void stop$benchmark_macro_release()
    {
        androidx.benchmark.macro.FrameTimingGfxInfoMetric r0;
        androidx.benchmark.macro.JankCollectionHelper $r1;

        r0 := @this: androidx.benchmark.macro.FrameTimingGfxInfoMetric;

        $r1 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: androidx.benchmark.macro.JankCollectionHelper helper>;

        virtualinvoke $r1.<androidx.benchmark.macro.JankCollectionHelper: boolean stopCollecting()>();

        return;
    }

    public androidx.benchmark.macro.IterationResult getMetrics$benchmark_macro_release(androidx.benchmark.macro.Metric$CaptureInfo, java.lang.String)
    {
        androidx.benchmark.macro.FrameTimingGfxInfoMetric r0;
        androidx.benchmark.macro.Metric$CaptureInfo r1;
        java.lang.String r2, r4, r5, $r29, $r33, $r44, r49;
        java.util.Map$Entry r3, r43, $r48;
        java.lang.Object r6, $r18, $r19, $r21, $r22, $r23, $r30, $r32, $r36, $r37;
        java.util.Collection r7, r41;
        java.util.Map r8, r9, $r34, $r35, $r39, $r45;
        androidx.benchmark.macro.JankCollectionHelper $r10;
        java.util.ArrayList $r11;
        int $i0;
        java.util.Set $r12, $r16, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r13;
        java.lang.Iterable $r14;
        java.util.LinkedHashMap $r15;
        androidx.benchmark.macro.IterationResult $r17;
        java.lang.StringBuilder $r24, $r25, $r26, $r27;
        java.lang.CharSequence $r28;
        java.lang.IllegalStateException $r31;
        kotlin.Pair $r38;
        java.util.Iterator r42, r47;

        r0 := @this: androidx.benchmark.macro.FrameTimingGfxInfoMetric;

        r1 := @parameter0: androidx.benchmark.macro.Metric$CaptureInfo;

        r2 := @parameter1: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "captureInfo");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "tracePath");

        $r10 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: androidx.benchmark.macro.JankCollectionHelper helper>;

        $r39 = virtualinvoke $r10.<androidx.benchmark.macro.JankCollectionHelper: java.util.Map getMetrics()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r39, "helper.metrics");

        $r11 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r39.<java.util.Map: int size()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i0);

        r41 = (java.util.Collection) $r11;

        $r12 = interfaceinvoke $r39.<java.util.Map: java.util.Set entrySet()>();

        r42 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r23 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (java.util.Map$Entry) $r23;

        r3 = r43;

        r7 = r41;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gfxinfo_");

        $r44 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.lang.String packageName>;

        if $r44 != null goto label2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("packageName");

        $r44 = null;

     label2:
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        r5 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r6, "it.key");

        $r29 = (java.lang.String) r6;

        $r28 = (java.lang.CharSequence) r5;

        r4 = staticinvoke <kotlin.text.StringsKt: java.lang.String removePrefix(java.lang.String,java.lang.CharSequence)>($r29, $r28);

        $r30 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>(r4, $r30);

        if $z2 != 0 goto label3;

        $r34 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.util.Map keyRenameMap>;

        $z3 = interfaceinvoke $r34.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z3 == 0 goto label3;

        $r35 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.util.Map keyRenameMap>;

        $r36 = interfaceinvoke $r35.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r36);

        $r37 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r38 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r36, $r37);

        goto label4;

     label3:
        $r31 = new java.lang.IllegalStateException;

        $r32 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r33 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("Unexpected key ", $r32);

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r33);

        throw $r31;

     label4:
        interfaceinvoke r7.<java.util.Collection: boolean add(java.lang.Object)>($r38);

        goto label1;

     label5:
        $r13 = (java.util.List) r41;

        $r14 = (java.lang.Iterable) $r13;

        $r45 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable)>($r14);

        $r15 = new java.util.LinkedHashMap;

        specialinvoke $r15.<java.util.LinkedHashMap: void <init>()>();

        $r16 = interfaceinvoke $r45.<java.util.Map: java.util.Set entrySet()>();

        r47 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z4 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r18 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        $r48 = (java.util.Map$Entry) $r18;

        $r19 = interfaceinvoke $r48.<java.util.Map$Entry: java.lang.Object getKey()>();

        r49 = (java.lang.String) $r19;

        $r20 = r0.<androidx.benchmark.macro.FrameTimingGfxInfoMetric: java.util.Set keyAllowList>;

        $z1 = interfaceinvoke $r20.<java.util.Set: boolean contains(java.lang.Object)>(r49);

        if $z1 == 0 goto label6;

        $r21 = interfaceinvoke $r48.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = interfaceinvoke $r48.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r15.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

        goto label6;

     label7:
        r8 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>();

        r9 = (java.util.Map) $r15;

        $r17 = new androidx.benchmark.macro.IterationResult;

        specialinvoke $r17.<androidx.benchmark.macro.IterationResult: void <init>(java.util.Map,java.util.Map,kotlin.ranges.LongRange)>(r9, r8, null);

        return $r17;
    }

