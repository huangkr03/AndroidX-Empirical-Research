androidx.test.core.app.DeviceCapture
    public static final android.graphics.Bitmap takeScreenshot() throws java.lang.RuntimeException
    {
        android.app.Instrumentation $r0;
        android.graphics.Bitmap $r1;

        $r0 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r0.<android.app.Instrumentation: void waitForIdleSync()>();

        $r1 = staticinvoke <androidx.test.core.app.DeviceCapture: android.graphics.Bitmap takeScreenshotNoSync()>();

        return $r1;
    }

    public static final android.graphics.Bitmap takeScreenshotNoSync() throws java.lang.RuntimeException
    {
        androidx.concurrent.futures.ResolvableFuture r0, $r3;
        androidx.test.core.internal.os.HandlerExecutor r1, $r4;
        android.app.UiAutomation r2;
        boolean $z0, $z1, $z2;
        android.os.Handler $r5;
        android.os.Looper $r6;
        android.app.Instrumentation $r7;
        java.util.concurrent.Executor $r8, $r18;
        com.google.common.util.concurrent.ListenableFuture $r9;
        java.util.concurrent.TimeUnit $r10, $r14;
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2 $r12;
        java.lang.Runnable $r13, $r19;
        java.lang.Object $r15;
        android.graphics.Bitmap $r16;
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1 $r17;
        java.lang.RuntimeException $r20, $r23, $r26, $r31, $r33;
        java.lang.Throwable $r21, $r22, $r24, $r25, $r27, $r28, $r29, $r32, $r34, r35, r36, r37, r38;
        java.lang.Thread $r30;

        $z0 = staticinvoke <androidx.test.core.app.DeviceCapture: boolean canTakeScreenshot()>();

        staticinvoke <androidx.test.internal.util.Checks: void checkState(boolean)>($z0);

        $r3 = staticinvoke <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "create()");

        r0 = $r3;

        $r4 = new androidx.test.core.internal.os.HandlerExecutor;

        $r5 = new android.os.Handler;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        specialinvoke $r4.<androidx.test.core.internal.os.HandlerExecutor: void <init>(android.os.Handler)>($r5);

        r1 = $r4;

        $r7 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        r2 = virtualinvoke $r7.<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>();

        if r2 != null goto label01;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("uiautomation is null");

        throw $r20;

     label01:
        $z1 = staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: boolean isDrawingEnabled()>();

        if $z1 != 0 goto label02;

        staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: void setDrawingEnabled(boolean)>(1);

        $r17 = <androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1: androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1 INSTANCE>;

        $r19 = (java.lang.Runnable) $r17;

        $r18 = (java.util.concurrent.Executor) r1;

        virtualinvoke r0.<androidx.concurrent.futures.ResolvableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r19, $r18);

     label02:
        $r8 = (java.util.concurrent.Executor) r1;

        $r9 = staticinvoke <androidx.test.core.app.DeviceCapture: com.google.common.util.concurrent.ListenableFuture forceRedrawGlobalWindowViews(java.util.concurrent.Executor)>($r8);

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        interfaceinvoke $r9.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(5L, $r10);

     label03:
        goto label05;

     label04:
        $r27 := @caughtexception;

        r35 = $r27;

        $r28 = (java.lang.Throwable) r35;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("takeScreenshot", "force redraw failed. Proceeding with screenshot", $r28);

     label05:
        $r12 = new androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2;

        specialinvoke $r12.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2: void <init>(android.app.UiAutomation,androidx.concurrent.futures.ResolvableFuture)>(r2, r0);

        $r13 = (java.lang.Runnable) $r12;

        virtualinvoke r1.<androidx.test.core.internal.os.HandlerExecutor: void execute(java.lang.Runnable)>($r13);

     label06:
        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r15 = virtualinvoke r0.<androidx.concurrent.futures.ResolvableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(5L, $r14);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r15, "bitmapFuture.get(5, TimeUnit.SECONDS)");

        $r16 = (android.graphics.Bitmap) $r15;

        return $r16;

     label07:
        $r21 := @caughtexception;

        r36 = $r21;

        $r22 = virtualinvoke r36.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        $z2 = $r22 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label08;

        $r25 = virtualinvoke r36.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r25, "null cannot be cast to non-null type java.lang.RuntimeException");

        $r26 = (java.lang.RuntimeException) $r25;

        throw $r26;

     label08:
        $r23 = new java.lang.RuntimeException;

        $r24 = virtualinvoke r36.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("UiAutomation.takeScreenshot failed with unrecognized exception", $r24);

        throw $r23;

     label09:
        $r32 := @caughtexception;

        r37 = $r32;

        $r33 = new java.lang.RuntimeException;

        $r34 = (java.lang.Throwable) r37;

        specialinvoke $r33.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Uiautomation.takeScreenshot failed to complete in 5 seconds", $r34);

        throw $r33;

     label10:
        $r29 := @caughtexception;

        r38 = $r29;

        $r30 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r30.<java.lang.Thread: void interrupt()>();

        $r31 = new java.lang.RuntimeException;

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>("Uiautomation.takeScreenshot was interrupted");

        throw $r31;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.util.concurrent.ExecutionException from label06 to label07 with label07;
        catch java.util.concurrent.TimeoutException from label06 to label07 with label09;
        catch java.lang.InterruptedException from label06 to label07 with label10;
    }

    private static final com.google.common.util.concurrent.ListenableFuture forceRedrawGlobalWindowViews(java.util.concurrent.Executor)
    {
        java.util.concurrent.Executor r0;
        androidx.concurrent.futures.ResolvableFuture r1, $r2;
        androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1 $r3;
        java.lang.Runnable $r4;
        com.google.common.util.concurrent.ListenableFuture $r5;

        r0 := @parameter0: java.util.concurrent.Executor;

        $r2 = staticinvoke <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "create()");

        r1 = $r2;

        $r3 = new androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1;

        specialinvoke $r3.<androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1: void <init>(androidx.concurrent.futures.ResolvableFuture,java.util.concurrent.Executor)>(r1, r0);

        $r4 = (java.lang.Runnable) $r3;

        interfaceinvoke r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        $r5 = (com.google.common.util.concurrent.ListenableFuture) r1;

        return $r5;
    }

    public static final boolean canTakeScreenshot()
    {
        int $i0;
        android.app.Instrumentation $r0;
        android.app.UiAutomation $r1;
        android.os.Looper $r2, $r3;
        boolean $z0, $z1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 18 goto label1;

        $r0 = staticinvoke <androidx.test.platform.app.InstrumentationRegistry: android.app.Instrumentation getInstrumentation()>();

        $r1 = virtualinvoke $r0.<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>();

        if $r1 == null goto label1;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1
<androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1: androidx.concurrent.futures.ResolvableFuture $future>
<androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1: java.util.concurrent.Executor $mainExecutor>
    void <init>(androidx.concurrent.futures.ResolvableFuture, java.util.concurrent.Executor)
    {
        androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1 r0;
        androidx.concurrent.futures.ResolvableFuture $r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1;

        $r1 := @parameter0: androidx.concurrent.futures.ResolvableFuture;

        $r2 := @parameter1: java.util.concurrent.Executor;

        r0.<androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1: androidx.concurrent.futures.ResolvableFuture $future> = $r1;

        r0.<androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1: java.util.concurrent.Executor $mainExecutor> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1 r0;
        java.util.List r1, r2;
        java.util.Iterator r3;
        android.view.View r4;
        int i0;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        androidx.test.core.app.ListFuture $r11;
        java.util.concurrent.Executor $r12;
        androidx.concurrent.futures.ResolvableFuture $r13;
        com.google.common.util.concurrent.ListenableFuture $r14, $r16;
        java.lang.Object $r15;

        r0 := @this: androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1;

        r1 = staticinvoke <androidx.test.platform.view.inspector.WindowInspectorCompat: java.util.List getGlobalWindowViews()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) $r5;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.view.View) $r15;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r4, "view");

        $r16 = staticinvoke <androidx.test.core.view.ViewCapture: com.google.common.util.concurrent.ListenableFuture forceRedraw(android.view.View)>(r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label1;

     label2:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" global views to redraw");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("takeScreenshot", $r10);

        $r13 = r0.<androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1: androidx.concurrent.futures.ResolvableFuture $future>;

        $r11 = new androidx.test.core.app.ListFuture;

        $r12 = r0.<androidx.test.core.app.DeviceCapture$forceRedrawGlobalWindowViews$1: java.util.concurrent.Executor $mainExecutor>;

        specialinvoke $r11.<androidx.test.core.app.ListFuture: void <init>(java.util.List,boolean,java.util.concurrent.Executor)>(r2, 1, $r12);

        $r14 = (com.google.common.util.concurrent.ListenableFuture) $r11;

        virtualinvoke $r13.<androidx.concurrent.futures.ResolvableFuture: boolean setFuture(com.google.common.util.concurrent.ListenableFuture)>($r14);

        return;
    }

androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1
<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1: androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1 INSTANCE>
    static void <clinit>()
    {
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1 $r0;

        $r0 = new androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1;

        specialinvoke $r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1: void <init>()>();

        <androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1: androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1 INSTANCE> = $r0;

        return;
    }

    void <init>()
    {
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1 r0;

        r0 := @this: androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1 r0;

        r0 := @this: androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$1;

        staticinvoke <androidx.test.platform.graphics.HardwareRendererCompat: void setDrawingEnabled(boolean)>(0);

        return;
    }

androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1
<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1: android.app.UiAutomation $uiAutomation>
<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>
    void <init>(android.app.UiAutomation, androidx.concurrent.futures.ResolvableFuture)
    {
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1 r0;
        android.app.UiAutomation $r1;
        androidx.concurrent.futures.ResolvableFuture $r2;

        r0 := @this: androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1;

        $r1 := @parameter0: android.app.UiAutomation;

        $r2 := @parameter1: androidx.concurrent.futures.ResolvableFuture;

        r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1: android.app.UiAutomation $uiAutomation> = $r1;

        r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void doFrame(long)
    {
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1 r0;
        long l0;
        android.graphics.Bitmap r1;
        android.app.UiAutomation $r2;
        androidx.concurrent.futures.ResolvableFuture $r3, $r5;
        java.lang.RuntimeException $r4;
        java.lang.Throwable $r6;

        r0 := @this: androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1;

        l0 := @parameter0: long;

        $r2 = r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1: android.app.UiAutomation $uiAutomation>;

        r1 = virtualinvoke $r2.<android.app.UiAutomation: android.graphics.Bitmap takeScreenshot()>();

        if r1 != null goto label1;

        $r5 = r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("uiAutomation.takeScreenshot returned null");

        $r6 = (java.lang.Throwable) $r4;

        virtualinvoke $r5.<androidx.concurrent.futures.ResolvableFuture: boolean setException(java.lang.Throwable)>($r6);

        goto label2;

     label1:
        $r3 = r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        virtualinvoke $r3.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>(r1);

     label2:
        return;
    }

androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2
<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2: android.app.UiAutomation $uiAutomation>
<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>
    void <init>(android.app.UiAutomation, androidx.concurrent.futures.ResolvableFuture)
    {
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2 r0;
        android.app.UiAutomation $r1;
        androidx.concurrent.futures.ResolvableFuture $r2;

        r0 := @this: androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2;

        $r1 := @parameter0: android.app.UiAutomation;

        $r2 := @parameter1: androidx.concurrent.futures.ResolvableFuture;

        r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2: android.app.UiAutomation $uiAutomation> = $r1;

        r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2: androidx.concurrent.futures.ResolvableFuture $bitmapFuture> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void run()
    {
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2 r0;
        android.view.Choreographer $r1;
        androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1 $r2;
        androidx.concurrent.futures.ResolvableFuture $r3;
        android.app.UiAutomation $r4;
        android.view.Choreographer$FrameCallback $r5;

        r0 := @this: androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2;

        $r1 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        $r2 = new androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1;

        $r4 = r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2: android.app.UiAutomation $uiAutomation>;

        $r3 = r0.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2: androidx.concurrent.futures.ResolvableFuture $bitmapFuture>;

        specialinvoke $r2.<androidx.test.core.app.DeviceCapture$takeScreenshotNoSync$2$1: void <init>(android.app.UiAutomation,androidx.concurrent.futures.ResolvableFuture)>($r4, $r3);

        $r5 = (android.view.Choreographer$FrameCallback) $r2;

        virtualinvoke $r1.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r5);

        return;
    }

