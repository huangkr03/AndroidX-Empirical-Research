androidx.ui.text.font.FontListFontFamily
<androidx.ui.text.font.FontListFontFamily: java.util.List fonts>
<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>
    public void <init>(java.util.List)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.List r1, $r4, $r5, $r8, $r9;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z1, $z2, $z3, $z6, z8, $z11, z13;
        java.util.HashSet $r6, r22;
        java.util.ArrayList $r7;
        int $i0, $i1;
        java.lang.IllegalStateException $r10, $r16;
        java.lang.String $r11, $r17, r20, r26;
        java.lang.Throwable $r12, $r18;
        kotlin.Pair $r13, r25;
        androidx.ui.text.font.FontWeight $r14;
        androidx.ui.text.font.FontStyle $r15;
        java.util.Collection $r19;
        java.lang.Iterable $r21;
        androidx.ui.text.font.Font r24;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fonts");

        specialinvoke r0.<androidx.ui.text.font.FileBasedFontFamily: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        r0.<androidx.ui.text.font.FontListFontFamily: java.util.List fonts> = r1;

        r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate> = r1;

        $r4 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: java.util.List getFonts()>();

        $r19 = (java.util.Collection) $r4;

        $z1 = interfaceinvoke $r19.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        z8 = 0;

        if $z6 != 0 goto label3;

        r20 = "At least one font should be passed to FontFamily";

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke r20.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        $r18 = (java.lang.Throwable) $r16;

        throw $r18;

     label3:
        $r5 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: java.util.List getFonts()>();

        $r21 = (java.lang.Iterable) $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r22 = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = interfaceinvoke $r21.<java.lang.Iterable: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r24 = (androidx.ui.text.font.Font) r3;

        $r13 = new kotlin.Pair;

        $r14 = interfaceinvoke r24.<androidx.ui.text.font.Font: androidx.ui.text.font.FontWeight getWeight()>();

        $r15 = interfaceinvoke r24.<androidx.ui.text.font.Font: androidx.ui.text.font.FontStyle getStyle()>();

        specialinvoke $r13.<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>($r14, $r15);

        r25 = $r13;

        $z3 = virtualinvoke r22.<java.util.HashSet: boolean add(java.lang.Object)>(r25);

        if $z3 == 0 goto label5;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label5:
        goto label4;

     label6:
        $r8 = (java.util.List) $r7;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        $r9 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: java.util.List getFonts()>();

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i0 != $i1 goto label7;

        $z11 = 1;

        goto label8;

     label7:
        $z11 = 0;

     label8:
        z13 = 0;

        if $z11 != 0 goto label9;

        r26 = "There cannot be two fonts with the same FontWeight and FontStyle in the same FontFamily";

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke r26.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        $r12 = (java.lang.Throwable) $r10;

        throw $r12;

     label9:
        return;
    }

    public final java.util.List getFonts()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.List $r1;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List fonts>;

        return $r1;
    }

    public boolean contains(androidx.ui.text.font.Font)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        androidx.ui.text.font.Font r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: androidx.ui.text.font.Font;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        $r2 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "elements");

        $r2 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public androidx.ui.text.font.Font get(int)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        androidx.ui.text.font.Font $r3;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (androidx.ui.text.font.Font) $r2;

        return $r3;
    }

    public int indexOf(androidx.ui.text.font.Font)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        androidx.ui.text.font.Font r1;
        java.util.List $r2;
        int $i0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: androidx.ui.text.font.Font;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        $r2 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public int lastIndexOf(androidx.ui.text.font.Font)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        androidx.ui.text.font.Font r1;
        java.util.List $r2;
        int $i0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: androidx.ui.text.font.Font;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        $r2 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $i0 = interfaceinvoke $r2.<java.util.List: int lastIndexOf(java.lang.Object)>(r1);

        return $i0;
    }

    public java.util.ListIterator listIterator()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.List $r1;
        java.util.ListIterator $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        return $r2;
    }

    public java.util.ListIterator listIterator(int)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        java.util.List $r1;
        java.util.ListIterator $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>(i0);

        return $r2;
    }

    public java.util.List subList(int, int)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0, i1;
        java.util.List $r1, $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(i0, i1);

        return $r2;
    }

    public int getSize()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List FontListFontFamily$List$delegate>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public final java.util.List component1()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.List $r1;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List fonts>;

        return $r1;
    }

    public final androidx.ui.text.font.FontListFontFamily copy(java.util.List)
    {
        androidx.ui.text.font.FontListFontFamily r0, $r2;
        java.util.List r1;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.util.List;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "fonts");

        $r2 = new androidx.ui.text.font.FontListFontFamily;

        specialinvoke $r2.<androidx.ui.text.font.FontListFontFamily: void <init>(java.util.List)>(r1);

        return $r2;
    }

    public static androidx.ui.text.font.FontListFontFamily copy$default(androidx.ui.text.font.FontListFontFamily, java.util.List, int, java.lang.Object)
    {
        androidx.ui.text.font.FontListFontFamily r0, $r2;
        int i0, $i1;
        java.lang.Object r1;
        java.util.List r3;

        r0 := @parameter0: androidx.ui.text.font.FontListFontFamily;

        r3 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List fonts>;

     label1:
        $r2 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: androidx.ui.text.font.FontListFontFamily copy(java.util.List)>(r3);

        return $r2;
    }

    public java.lang.String toString()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.util.List $r3;
        java.lang.String $r6;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FontListFontFamily(fonts=");

        $r3 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List fonts>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public int hashCode()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List fonts>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        androidx.ui.text.font.FontListFontFamily r0, r2;
        java.lang.Object r1, r3;
        boolean $z0, $z1;
        java.util.List $r4, $r5;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof androidx.ui.text.font.FontListFontFamily;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r3 = r1;

        r2 = (androidx.ui.text.font.FontListFontFamily) r3;

        $r5 = r0.<androidx.ui.text.font.FontListFontFamily: java.util.List fonts>;

        $r4 = r2.<androidx.ui.text.font.FontListFontFamily: java.util.List fonts>;

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public void sort(java.util.Comparator)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.Comparator r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.util.Comparator;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "elements");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean add(androidx.ui.text.font.Font)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        androidx.ui.text.font.Font r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: androidx.ui.text.font.Font;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean remove(androidx.ui.text.font.Font)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        androidx.ui.text.font.Font r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: androidx.ui.text.font.Font;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void replaceAll(java.util.function.UnaryOperator)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.function.UnaryOperator r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.util.function.UnaryOperator;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeAll(java.util.Collection)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "elements");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public boolean removeIf(java.util.function.Predicate)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.function.Predicate r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.util.function.Predicate;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "p0");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void add(int, androidx.ui.text.font.Font)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        androidx.ui.text.font.Font r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.ui.text.font.Font;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public androidx.ui.text.font.Font set(int, androidx.ui.text.font.Font)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        androidx.ui.text.font.Font r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.ui.text.font.Font;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "element");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public void clear()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean retainAll(java.util.Collection)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "elements");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public androidx.ui.text.font.Font removeAt(int)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r1;
    }

    public boolean addAll(int, java.util.Collection)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "elements");

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation is not supported for read-only collection");

        throw $r2;
    }

    public final volatile boolean contains(java.lang.Object)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        androidx.ui.text.font.Font $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.ui.text.font.Font;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (androidx.ui.text.font.Font) r1;

        $z1 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: boolean contains(androidx.ui.text.font.Font)>($r2);

        return $z1;
    }

    public volatile java.lang.Object get(int)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        androidx.ui.text.font.Font $r1;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: androidx.ui.text.font.Font get(int)>(i0);

        return $r1;
    }

    public final volatile int indexOf(java.lang.Object)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.lang.Object r1;
        boolean $z0;
        androidx.ui.text.font.Font $r2;
        int $i0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.ui.text.font.Font;

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r2 = (androidx.ui.text.font.Font) r1;

        $i0 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: int indexOf(androidx.ui.text.font.Font)>($r2);

        return $i0;
    }

    public final volatile int lastIndexOf(java.lang.Object)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.lang.Object r1;
        boolean $z0;
        androidx.ui.text.font.Font $r2;
        int $i0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.ui.text.font.Font;

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r2 = (androidx.ui.text.font.Font) r1;

        $i0 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: int lastIndexOf(androidx.ui.text.font.Font)>($r2);

        return $i0;
    }

    public final volatile int size()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int $i0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $i0 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: int getSize()>();

        return $i0;
    }

    public volatile boolean add(java.lang.Object)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.lang.Object r1;
        androidx.ui.text.font.Font $r2;
        boolean $z0;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.ui.text.font.Font) r1;

        $z0 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: boolean add(androidx.ui.text.font.Font)>($r2);

        return $z0;
    }

    public volatile boolean remove(java.lang.Object)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        androidx.ui.text.font.Font $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof androidx.ui.text.font.Font;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (androidx.ui.text.font.Font) r1;

        $z1 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: boolean remove(androidx.ui.text.font.Font)>($r2);

        return $z1;
    }

    public volatile void add(int, java.lang.Object)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        java.lang.Object r1;
        androidx.ui.text.font.Font $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = (androidx.ui.text.font.Font) r1;

        virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: void add(int,androidx.ui.text.font.Font)>(i0, $r2);

        return;
    }

    public volatile java.lang.Object set(int, java.lang.Object)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        java.lang.Object r1;
        androidx.ui.text.font.Font $r2, $r3;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = (androidx.ui.text.font.Font) r1;

        $r3 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: androidx.ui.text.font.Font set(int,androidx.ui.text.font.Font)>(i0, $r2);

        return $r3;
    }

    public volatile androidx.ui.text.font.Font remove(int)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        androidx.ui.text.font.Font $r1;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: androidx.ui.text.font.Font removeAt(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object remove(int)
    {
        androidx.ui.text.font.FontListFontFamily r0;
        int i0;
        androidx.ui.text.font.Font $r1;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<androidx.ui.text.font.FontListFontFamily: androidx.ui.text.font.Font removeAt(int)>(i0);

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.lang.Object[] r1, $r3;
        java.util.Collection $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "array");

        $r2 = (java.util.Collection) r0;

        $r3 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r2, r1);

        return $r3;
    }

    public java.lang.Object[] toArray()
    {
        androidx.ui.text.font.FontListFontFamily r0;
        java.util.Collection $r1;
        java.lang.Object[] $r2;

        r0 := @this: androidx.ui.text.font.FontListFontFamily;

        $r1 = (java.util.Collection) r0;

        $r2 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)>($r1);

        return $r2;
    }

