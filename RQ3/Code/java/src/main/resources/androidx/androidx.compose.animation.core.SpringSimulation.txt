androidx.compose.animation.core.SpringSimulation
<androidx.compose.animation.core.SpringSimulation: float finalPosition>
<androidx.compose.animation.core.SpringSimulation: double naturalFreq>
<androidx.compose.animation.core.SpringSimulation: boolean initialized>
<androidx.compose.animation.core.SpringSimulation: double gammaPlus>
<androidx.compose.animation.core.SpringSimulation: double gammaMinus>
<androidx.compose.animation.core.SpringSimulation: double dampedFreq>
<androidx.compose.animation.core.SpringSimulation: float dampingRatio>
    public void <init>(float)
    {
        androidx.compose.animation.core.SpringSimulation r0;
        float f0;
        double $d0;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        f0 := @parameter0: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.animation.core.SpringSimulation: float finalPosition> = f0;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(50.0);

        r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq> = $d0;

        r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio> = 1.0F;

        return;
    }

    public final float getFinalPosition()
    {
        androidx.compose.animation.core.SpringSimulation r0;
        float $f0;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        $f0 = r0.<androidx.compose.animation.core.SpringSimulation: float finalPosition>;

        return $f0;
    }

    public final void setFinalPosition(float)
    {
        androidx.compose.animation.core.SpringSimulation r0;
        float f0;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        f0 := @parameter0: float;

        r0.<androidx.compose.animation.core.SpringSimulation: float finalPosition> = f0;

        return;
    }

    public final float getStiffness()
    {
        androidx.compose.animation.core.SpringSimulation r0;
        double $d0, $d1, $d2;
        float $f0;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        $d1 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d0 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d2 = $d1 * $d0;

        $f0 = (float) $d2;

        return $f0;
    }

    public final void setStiffness(float)
    {
        androidx.compose.animation.core.SpringSimulation r0;
        float f0, $f1;
        byte $b0;
        double $d0, $d1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<androidx.compose.animation.core.SpringSimulation: float getStiffness()>();

        $b0 = $f1 cmpg 0.0F;

        if $b0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Spring stiffness constant must be positive.");

        throw $r1;

     label1:
        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq> = $d1;

        r0.<androidx.compose.animation.core.SpringSimulation: boolean initialized> = 0;

        return;
    }

    public final float getDampingRatio()
    {
        androidx.compose.animation.core.SpringSimulation r0;
        float $f0;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        $f0 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        return $f0;
    }

    public final void setDampingRatio(float)
    {
        androidx.compose.animation.core.SpringSimulation r0;
        float f0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Damping ratio must be non-negative");

        throw $r1;

     label1:
        r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio> = f0;

        r0.<androidx.compose.animation.core.SpringSimulation: boolean initialized> = 0;

        return;
    }

    public final float getAcceleration(float, float)
    {
        androidx.compose.animation.core.SpringSimulation r0;
        float f0, f1, f2, $f3, $f4, $f5;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f3 = r0.<androidx.compose.animation.core.SpringSimulation: float finalPosition>;

        f2 = f0 - $f3;

        $d3 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d2 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        d0 = $d3 * $d2;

        $d4 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d6 = 2.0 * $d4;

        $f4 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $d5 = (double) $f4;

        d1 = $d6 * $d5;

        $d8 = neg d0;

        $d7 = (double) f2;

        $d11 = $d8 * $d7;

        $d9 = (double) f1;

        $d10 = d1 * $d9;

        $d12 = $d11 - $d10;

        $f5 = (float) $d12;

        return $f5;
    }

    private final void init()
    {
        androidx.compose.animation.core.SpringSimulation r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        byte $b0, $b1, $b2, $b3;
        java.lang.IllegalStateException $r1;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        $z0 = r0.<androidx.compose.animation.core.SpringSimulation: boolean initialized>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $f0 = r0.<androidx.compose.animation.core.SpringSimulation: float finalPosition>;

        $f1 = staticinvoke <androidx.compose.animation.core.SpringSimulationKt: float getUNSET()>();

        $b0 = $f0 cmpg $f1;

        if $b0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        if $z1 == 0 goto label4;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Error: Final position of the spring must be set before the animation starts");

        throw $r1;

     label4:
        $f2 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $d2 = (double) $f2;

        $f3 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $d1 = (double) $f3;

        d0 = $d2 * $d1;

        $f4 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $b1 = $f4 cmpl 1.0F;

        if $b1 <= 0 goto label5;

        $f7 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $f8 = neg $f7;

        $d9 = (double) $f8;

        $d8 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d12 = $d9 * $d8;

        $d13 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d10 = (double) 1;

        $d11 = d0 - $d10;

        $d14 = staticinvoke <java.lang.Math: double sqrt(double)>($d11);

        $d15 = $d13 * $d14;

        $d16 = $d12 + $d15;

        r0.<androidx.compose.animation.core.SpringSimulation: double gammaPlus> = $d16;

        $f9 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $f10 = neg $f9;

        $d18 = (double) $f10;

        $d17 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d21 = $d18 * $d17;

        $d22 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d19 = (double) 1;

        $d20 = d0 - $d19;

        $d23 = staticinvoke <java.lang.Math: double sqrt(double)>($d20);

        $d24 = $d22 * $d23;

        $d25 = $d21 - $d24;

        r0.<androidx.compose.animation.core.SpringSimulation: double gammaMinus> = $d25;

        goto label6;

     label5:
        $f5 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $b2 = $f5 cmpl 0.0F;

        if $b2 < 0 goto label6;

        $f6 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $b3 = $f6 cmpg 1.0F;

        if $b3 >= 0 goto label6;

        $d5 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d3 = (double) 1;

        $d4 = $d3 - d0;

        $d6 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $d7 = $d5 * $d6;

        r0.<androidx.compose.animation.core.SpringSimulation: double dampedFreq> = $d7;

     label6:
        r0.<androidx.compose.animation.core.SpringSimulation: boolean initialized> = 1;

        return;
    }

    public final long updateValues-IJZedt4$animation_core_release(float, float, long)
    {
        androidx.compose.animation.core.SpringSimulation r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, $f14, f15, f16;
        long l0, $l3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, d119, d120, d121, d122, d123, d124, d125, $d126, $d127;
        byte $b1, $b2;
        boolean $z0;

        r0 := @this: androidx.compose.animation.core.SpringSimulation;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        l0 := @parameter2: long;

        specialinvoke r0.<androidx.compose.animation.core.SpringSimulation: void init()>();

        $f3 = r0.<androidx.compose.animation.core.SpringSimulation: float finalPosition>;

        f2 = f0 - $f3;

        $d2 = (double) l0;

        d0 = $d2 / 1000.0;

        d119 = 0.0;

        d120 = 0.0;

        $f4 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $b1 = $f4 cmpl 1.0F;

        if $b1 <= 0 goto label1;

        $d90 = (double) f2;

        $d82 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaMinus>;

        $d81 = (double) f2;

        $d84 = $d82 * $d81;

        $d83 = (double) f1;

        $d88 = $d84 - $d83;

        $d86 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaMinus>;

        $d85 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaPlus>;

        $d87 = $d86 - $d85;

        $d89 = $d88 / $d87;

        d121 = $d90 - $d89;

        $d92 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaMinus>;

        $d91 = (double) f2;

        $d94 = $d92 * $d91;

        $d93 = (double) f1;

        $d98 = $d94 - $d93;

        $d96 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaMinus>;

        $d95 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaPlus>;

        $d97 = $d96 - $d95;

        d1 = $d98 / $d97;

        $d99 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaMinus>;

        $d100 = $d99 * d0;

        $d101 = staticinvoke <java.lang.Math: double exp(double)>($d100);

        $d104 = d121 * $d101;

        $d102 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaPlus>;

        $d103 = $d102 * d0;

        $d105 = staticinvoke <java.lang.Math: double exp(double)>($d103);

        $d106 = d1 * $d105;

        d122 = $d104 + $d106;

        $d107 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaMinus>;

        $d110 = d121 * $d107;

        $d108 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaMinus>;

        $d109 = $d108 * d0;

        $d111 = staticinvoke <java.lang.Math: double exp(double)>($d109);

        $d115 = $d110 * $d111;

        $d112 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaPlus>;

        $d116 = d1 * $d112;

        $d113 = r0.<androidx.compose.animation.core.SpringSimulation: double gammaPlus>;

        $d114 = $d113 * d0;

        $d117 = staticinvoke <java.lang.Math: double exp(double)>($d114);

        $d118 = $d116 * $d117;

        d123 = $d115 + $d118;

        goto label5;

     label1:
        $f5 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $b2 = $f5 cmpg 1.0F;

        if $b2 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        if $z0 == 0 goto label4;

        f12 = f2;

        $d57 = (double) f1;

        $d55 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d54 = (double) f2;

        $d56 = $d55 * $d54;

        d124 = $d57 + $d56;

        $d59 = (double) f12;

        $d58 = d124 * d0;

        $d63 = $d59 + $d58;

        $d60 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d61 = neg $d60;

        $d62 = $d61 * d0;

        $d64 = staticinvoke <java.lang.Math: double exp(double)>($d62);

        d122 = $d63 * $d64;

        $d66 = (double) f12;

        $d65 = d124 * d0;

        $d70 = $d66 + $d65;

        $d67 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d68 = neg $d67;

        $d69 = $d68 * d0;

        $d71 = staticinvoke <java.lang.Math: double exp(double)>($d69);

        $d74 = $d70 * $d71;

        $d72 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d73 = neg $d72;

        $d78 = $d74 * $d73;

        $d75 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d76 = neg $d75;

        $d77 = $d76 * d0;

        $d79 = staticinvoke <java.lang.Math: double exp(double)>($d77);

        $d80 = d124 * $d79;

        d123 = $d78 + $d80;

        goto label5;

     label4:
        f13 = f2;

        $d4 = (double) 1;

        $d3 = r0.<androidx.compose.animation.core.SpringSimulation: double dampedFreq>;

        $d12 = $d4 / $d3;

        $f6 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $d6 = (double) $f6;

        $d5 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d8 = $d6 * $d5;

        $d7 = (double) f2;

        $d10 = $d8 * $d7;

        $d9 = (double) f1;

        $d11 = $d10 + $d9;

        d125 = $d12 * $d11;

        $f7 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $f8 = neg $f7;

        $d14 = (double) $f8;

        $d13 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d15 = $d14 * $d13;

        $d16 = $d15 * d0;

        $d17 = staticinvoke <java.lang.Math: double exp(double)>($d16);

        $d20 = (double) f13;

        $d18 = r0.<androidx.compose.animation.core.SpringSimulation: double dampedFreq>;

        $d19 = $d18 * d0;

        $d21 = staticinvoke <java.lang.Math: double cos(double)>($d19);

        $d24 = $d20 * $d21;

        $d22 = r0.<androidx.compose.animation.core.SpringSimulation: double dampedFreq>;

        $d23 = $d22 * d0;

        $d25 = staticinvoke <java.lang.Math: double sin(double)>($d23);

        $d26 = d125 * $d25;

        $d27 = $d24 + $d26;

        d122 = $d17 * $d27;

        $d28 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d29 = neg $d28;

        $d31 = d122 * $d29;

        $f9 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $d30 = (double) $f9;

        $d36 = $d31 * $d30;

        $f10 = r0.<androidx.compose.animation.core.SpringSimulation: float dampingRatio>;

        $f11 = neg $f10;

        $d33 = (double) $f11;

        $d32 = r0.<androidx.compose.animation.core.SpringSimulation: double naturalFreq>;

        $d34 = $d33 * $d32;

        $d35 = $d34 * d0;

        $d37 = staticinvoke <java.lang.Math: double exp(double)>($d35);

        $d38 = r0.<androidx.compose.animation.core.SpringSimulation: double dampedFreq>;

        $d40 = neg $d38;

        $d39 = (double) f13;

        $d43 = $d40 * $d39;

        $d41 = r0.<androidx.compose.animation.core.SpringSimulation: double dampedFreq>;

        $d42 = $d41 * d0;

        $d44 = staticinvoke <java.lang.Math: double sin(double)>($d42);

        $d48 = $d43 * $d44;

        $d45 = r0.<androidx.compose.animation.core.SpringSimulation: double dampedFreq>;

        $d49 = $d45 * d125;

        $d46 = r0.<androidx.compose.animation.core.SpringSimulation: double dampedFreq>;

        $d47 = $d46 * d0;

        $d50 = staticinvoke <java.lang.Math: double cos(double)>($d47);

        $d51 = $d49 * $d50;

        $d52 = $d48 + $d51;

        $d53 = $d37 * $d52;

        d123 = $d36 + $d53;

     label5:
        $f14 = r0.<androidx.compose.animation.core.SpringSimulation: float finalPosition>;

        $d126 = (double) $f14;

        $d127 = d122 + $d126;

        f15 = (float) $d127;

        f16 = (float) d123;

        $l3 = staticinvoke <androidx.compose.animation.core.SpringSimulationKt: long Motion(float,float)>(f15, f16);

        return $l3;
    }

