androidx.compose.ui.window.DialogWrapper
<androidx.compose.ui.window.DialogWrapper: kotlin.jvm.functions.Function0 onDismissRequest>
<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogProperties properties>
<androidx.compose.ui.window.DialogWrapper: android.view.View composeView>
<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>
<androidx.compose.ui.window.DialogWrapper: float maxSupportedElevation>
<androidx.compose.ui.window.DialogWrapper: int defaultSoftInputMode>
    public void <init>(kotlin.jvm.functions.Function0, androidx.compose.ui.window.DialogProperties, android.view.View, androidx.compose.ui.unit.LayoutDirection, androidx.compose.ui.unit.Density, java.util.UUID)
    {
        androidx.compose.ui.window.DialogWrapper r0, r7;
        kotlin.jvm.functions.Function0 r1, $r37;
        androidx.compose.ui.window.DialogProperties r2, $r13, $r36;
        android.view.View r3, $r23, $r25, $r26, $r29, $r30, $r33, $r34, $r50;
        androidx.compose.ui.unit.LayoutDirection r4;
        androidx.compose.ui.unit.Density r5;
        java.util.UUID r6;
        android.view.ContextThemeWrapper $r8;
        android.content.Context $r9, $r10, $r15;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3;
        android.view.Window $r11;
        android.view.WindowManager$LayoutParams $r12;
        boolean $z3, $z4, $z5;
        androidx.compose.ui.window.DialogLayout $r14, $r22, $r24, $r28, $r32;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.String $r19, $r44, $r45;
        androidx.compose.ui.window.DialogWrapper$1$2 $r20;
        android.view.ViewOutlineProvider $r21;
        androidx.lifecycle.LifecycleOwner $r27, $r40;
        androidx.lifecycle.ViewModelStoreOwner $r31;
        androidx.savedstate.SavedStateRegistryOwner $r35;
        androidx.activity.OnBackPressedDispatcher $r38;
        androidx.compose.ui.window.DialogWrapper$2 $r39;
        kotlin.jvm.functions.Function1 $r41;
        java.lang.IllegalStateException $r43;
        android.view.ViewGroup $r51;

        r0 := @this: androidx.compose.ui.window.DialogWrapper;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        r2 := @parameter1: androidx.compose.ui.window.DialogProperties;

        r3 := @parameter2: android.view.View;

        r4 := @parameter3: androidx.compose.ui.unit.LayoutDirection;

        r5 := @parameter4: androidx.compose.ui.unit.Density;

        r6 := @parameter5: java.util.UUID;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "onDismissRequest");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "properties");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "composeView");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r4, "layoutDirection");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r5, "density");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r6, "dialogId");

        $r8 = new android.view.ContextThemeWrapper;

        $r9 = virtualinvoke r3.<android.view.View: android.content.Context getContext()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 31 goto label1;

        $z5 = virtualinvoke r2.<androidx.compose.ui.window.DialogProperties: boolean getDecorFitsSystemWindows()>();

        if $z5 == 0 goto label2;

     label1:
        $i4 = <androidx.compose.ui.R$style: int DialogWindowTheme>;

        goto label3;

     label2:
        $i4 = <androidx.compose.ui.R$style: int FloatingDialogWindowTheme>;

     label3:
        specialinvoke $r8.<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>($r9, $i4);

        $r10 = (android.content.Context) $r8;

        specialinvoke r0.<androidx.activity.ComponentDialog: void <init>(android.content.Context,int,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r10, 0, 2, null);

        r0.<androidx.compose.ui.window.DialogWrapper: kotlin.jvm.functions.Function0 onDismissRequest> = r1;

        r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogProperties properties> = r2;

        r0.<androidx.compose.ui.window.DialogWrapper: android.view.View composeView> = r3;

        $f0 = (float) 8;

        $f1 = staticinvoke <androidx.compose.ui.unit.Dp: float constructor-impl(float)>($f0);

        r0.<androidx.compose.ui.window.DialogWrapper: float maxSupportedElevation> = $f1;

        $r11 = virtualinvoke r0.<androidx.compose.ui.window.DialogWrapper: android.view.Window getWindow()>();

        if $r11 != null goto label4;

        $r43 = new java.lang.IllegalStateException;

        $r44 = "Dialog has no window";

        $r45 = virtualinvoke $r44.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r45);

        throw $r43;

     label4:
        $r12 = virtualinvoke $r11.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $i1 = $r12.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i2 = $i1 & 240;

        r0.<androidx.compose.ui.window.DialogWrapper: int defaultSoftInputMode> = $i2;

        virtualinvoke $r11.<android.view.Window: boolean requestFeature(int)>(1);

        virtualinvoke $r11.<android.view.Window: void setBackgroundDrawableResource(int)>(17170445);

        $r13 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogProperties properties>;

        $z3 = virtualinvoke $r13.<androidx.compose.ui.window.DialogProperties: boolean getDecorFitsSystemWindows()>();

        staticinvoke <androidx.core.view.WindowCompat: void setDecorFitsSystemWindows(android.view.Window,boolean)>($r11, $z3);

        $r14 = new androidx.compose.ui.window.DialogLayout;

        $r15 = virtualinvoke r0.<androidx.compose.ui.window.DialogWrapper: android.content.Context getContext()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r15, "context");

        specialinvoke $r14.<androidx.compose.ui.window.DialogLayout: void <init>(android.content.Context,android.view.Window)>($r15, $r11);

        r7 = r0;

        $i3 = <androidx.compose.ui.R$id: int compose_view_saveable_id_tag>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog:");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<androidx.compose.ui.window.DialogLayout: void setTag(int,java.lang.Object)>($i3, $r19);

        virtualinvoke $r14.<androidx.compose.ui.window.DialogLayout: void setClipChildren(boolean)>(0);

        $f2 = r0.<androidx.compose.ui.window.DialogWrapper: float maxSupportedElevation>;

        $f3 = interfaceinvoke r5.<androidx.compose.ui.unit.Density: float toPx-0680j_4(float)>($f2);

        virtualinvoke $r14.<androidx.compose.ui.window.DialogLayout: void setElevation(float)>($f3);

        $r20 = new androidx.compose.ui.window.DialogWrapper$1$2;

        specialinvoke $r20.<androidx.compose.ui.window.DialogWrapper$1$2: void <init>()>();

        $r21 = (android.view.ViewOutlineProvider) $r20;

        virtualinvoke $r14.<androidx.compose.ui.window.DialogLayout: void setOutlineProvider(android.view.ViewOutlineProvider)>($r21);

        r7.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout> = $r14;

        $r50 = virtualinvoke $r11.<android.view.Window: android.view.View getDecorView()>();

        $z4 = $r50 instanceof android.view.ViewGroup;

        if $z4 == 0 goto label5;

        $r51 = (android.view.ViewGroup) $r50;

        goto label6;

     label5:
        $r51 = null;

     label6:
        if $r51 == null goto label7;

        staticinvoke <androidx.compose.ui.window.DialogWrapper: void _init_$disableClipping(android.view.ViewGroup)>($r51);

        goto label7;

     label7:
        $r22 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>;

        $r23 = (android.view.View) $r22;

        virtualinvoke r0.<androidx.compose.ui.window.DialogWrapper: void setContentView(android.view.View)>($r23);

        $r24 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>;

        $r26 = (android.view.View) $r24;

        $r25 = r0.<androidx.compose.ui.window.DialogWrapper: android.view.View composeView>;

        $r27 = staticinvoke <androidx.lifecycle.ViewTreeLifecycleOwner: androidx.lifecycle.LifecycleOwner get(android.view.View)>($r25);

        staticinvoke <androidx.lifecycle.ViewTreeLifecycleOwner: void set(android.view.View,androidx.lifecycle.LifecycleOwner)>($r26, $r27);

        $r28 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>;

        $r30 = (android.view.View) $r28;

        $r29 = r0.<androidx.compose.ui.window.DialogWrapper: android.view.View composeView>;

        $r31 = staticinvoke <androidx.lifecycle.ViewTreeViewModelStoreOwner: androidx.lifecycle.ViewModelStoreOwner get(android.view.View)>($r29);

        staticinvoke <androidx.lifecycle.ViewTreeViewModelStoreOwner: void set(android.view.View,androidx.lifecycle.ViewModelStoreOwner)>($r30, $r31);

        $r32 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>;

        $r34 = (android.view.View) $r32;

        $r33 = r0.<androidx.compose.ui.window.DialogWrapper: android.view.View composeView>;

        $r35 = staticinvoke <androidx.savedstate.ViewTreeSavedStateRegistryOwner: androidx.savedstate.SavedStateRegistryOwner get(android.view.View)>($r33);

        staticinvoke <androidx.savedstate.ViewTreeSavedStateRegistryOwner: void set(android.view.View,androidx.savedstate.SavedStateRegistryOwner)>($r34, $r35);

        $r37 = r0.<androidx.compose.ui.window.DialogWrapper: kotlin.jvm.functions.Function0 onDismissRequest>;

        $r36 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogProperties properties>;

        virtualinvoke r0.<androidx.compose.ui.window.DialogWrapper: void updateParameters(kotlin.jvm.functions.Function0,androidx.compose.ui.window.DialogProperties,androidx.compose.ui.unit.LayoutDirection)>($r37, $r36, r4);

        $r38 = virtualinvoke r0.<androidx.compose.ui.window.DialogWrapper: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()>();

        $r40 = (androidx.lifecycle.LifecycleOwner) r0;

        $r39 = new androidx.compose.ui.window.DialogWrapper$2;

        specialinvoke $r39.<androidx.compose.ui.window.DialogWrapper$2: void <init>(androidx.compose.ui.window.DialogWrapper)>(r0);

        $r41 = (kotlin.jvm.functions.Function1) $r39;

        staticinvoke <androidx.activity.OnBackPressedDispatcherKt: androidx.activity.OnBackPressedCallback addCallback$default(androidx.activity.OnBackPressedDispatcher,androidx.lifecycle.LifecycleOwner,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r38, $r40, 0, $r41, 2, null);

        return;
    }

    public androidx.compose.ui.platform.AbstractComposeView getSubCompositionView()
    {
        androidx.compose.ui.window.DialogWrapper r0;
        androidx.compose.ui.window.DialogLayout $r1;
        androidx.compose.ui.platform.AbstractComposeView $r2;

        r0 := @this: androidx.compose.ui.window.DialogWrapper;

        $r1 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>;

        $r2 = (androidx.compose.ui.platform.AbstractComposeView) $r1;

        return $r2;
    }

    private final void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection)
    {
        androidx.compose.ui.window.DialogWrapper r0;
        androidx.compose.ui.unit.LayoutDirection r1;
        int[] $r2;
        androidx.compose.ui.window.DialogLayout $r3;
        int $i0, $i1;
        kotlin.NoWhenBranchMatchedException $r4;
        byte $b2;

        r0 := @this: androidx.compose.ui.window.DialogWrapper;

        r1 := @parameter0: androidx.compose.ui.unit.LayoutDirection;

        $r3 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>;

        $r2 = <androidx.compose.ui.window.DialogWrapper$WhenMappings: int[] $EnumSwitchMapping$0>;

        $i0 = virtualinvoke r1.<androidx.compose.ui.unit.LayoutDirection: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $b2 = 0;

        goto label4;

     label2:
        $b2 = 1;

        goto label4;

     label3:
        $r4 = new kotlin.NoWhenBranchMatchedException;

        specialinvoke $r4.<kotlin.NoWhenBranchMatchedException: void <init>()>();

        throw $r4;

     label4:
        virtualinvoke $r3.<androidx.compose.ui.window.DialogLayout: void setLayoutDirection(int)>($b2);

        return;
    }

    public final void setContent(androidx.compose.runtime.CompositionContext, kotlin.jvm.functions.Function2)
    {
        androidx.compose.ui.window.DialogWrapper r0;
        androidx.compose.runtime.CompositionContext r1;
        kotlin.jvm.functions.Function2 r2;
        androidx.compose.ui.window.DialogLayout $r3;

        r0 := @this: androidx.compose.ui.window.DialogWrapper;

        r1 := @parameter0: androidx.compose.runtime.CompositionContext;

        r2 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "parentComposition");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "children");

        $r3 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>;

        virtualinvoke $r3.<androidx.compose.ui.window.DialogLayout: void setContent(androidx.compose.runtime.CompositionContext,kotlin.jvm.functions.Function2)>(r1, r2);

        return;
    }

    private final void setSecurePolicy(androidx.compose.ui.window.SecureFlagPolicy)
    {
        androidx.compose.ui.window.DialogWrapper r0;
        androidx.compose.ui.window.SecureFlagPolicy r1;
        boolean z0, $z1;
        android.view.View $r2;
        android.view.Window $r3;
        short $s0;

        r0 := @this: androidx.compose.ui.window.DialogWrapper;

        r1 := @parameter0: androidx.compose.ui.window.SecureFlagPolicy;

        $r2 = r0.<androidx.compose.ui.window.DialogWrapper: android.view.View composeView>;

        $z1 = staticinvoke <androidx.compose.ui.window.AndroidPopup_androidKt: boolean isFlagSecureEnabled(android.view.View)>($r2);

        z0 = staticinvoke <androidx.compose.ui.window.SecureFlagPolicy_androidKt: boolean shouldApplySecureFlag(androidx.compose.ui.window.SecureFlagPolicy,boolean)>(r1, $z1);

        $r3 = virtualinvoke r0.<androidx.compose.ui.window.DialogWrapper: android.view.Window getWindow()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3);

        if z0 == 0 goto label1;

        $s0 = 8192;

        goto label2;

     label1:
        $s0 = -8193;

     label2:
        virtualinvoke $r3.<android.view.Window: void setFlags(int,int)>($s0, 8192);

        return;
    }

    public final void updateParameters(kotlin.jvm.functions.Function0, androidx.compose.ui.window.DialogProperties, androidx.compose.ui.unit.LayoutDirection)
    {
        androidx.compose.ui.window.DialogWrapper r0;
        kotlin.jvm.functions.Function0 r1;
        androidx.compose.ui.window.DialogProperties r2;
        androidx.compose.ui.unit.LayoutDirection r3;
        androidx.compose.ui.window.SecureFlagPolicy $r4;
        androidx.compose.ui.window.DialogLayout $r5;
        boolean $z0, $z1;
        int $i0, $i1;
        android.view.Window $r6, $r7;

        r0 := @this: androidx.compose.ui.window.DialogWrapper;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        r2 := @parameter1: androidx.compose.ui.window.DialogProperties;

        r3 := @parameter2: androidx.compose.ui.unit.LayoutDirection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "onDismissRequest");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "properties");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "layoutDirection");

        r0.<androidx.compose.ui.window.DialogWrapper: kotlin.jvm.functions.Function0 onDismissRequest> = r1;

        r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogProperties properties> = r2;

        $r4 = virtualinvoke r2.<androidx.compose.ui.window.DialogProperties: androidx.compose.ui.window.SecureFlagPolicy getSecurePolicy()>();

        specialinvoke r0.<androidx.compose.ui.window.DialogWrapper: void setSecurePolicy(androidx.compose.ui.window.SecureFlagPolicy)>($r4);

        specialinvoke r0.<androidx.compose.ui.window.DialogWrapper: void setLayoutDirection(androidx.compose.ui.unit.LayoutDirection)>(r3);

        $r5 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>;

        $z0 = virtualinvoke r2.<androidx.compose.ui.window.DialogProperties: boolean getUsePlatformDefaultWidth()>();

        virtualinvoke $r5.<androidx.compose.ui.window.DialogLayout: void setUsePlatformDefaultWidth(boolean)>($z0);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 31 goto label3;

        $z1 = virtualinvoke r2.<androidx.compose.ui.window.DialogProperties: boolean getDecorFitsSystemWindows()>();

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r0.<androidx.compose.ui.window.DialogWrapper: android.view.Window getWindow()>();

        if $r7 == null goto label1;

        $i1 = r0.<androidx.compose.ui.window.DialogWrapper: int defaultSoftInputMode>;

        virtualinvoke $r7.<android.view.Window: void setSoftInputMode(int)>($i1);

        goto label3;

     label1:
        goto label3;

     label2:
        $r6 = virtualinvoke r0.<androidx.compose.ui.window.DialogWrapper: android.view.Window getWindow()>();

        if $r6 == null goto label3;

        virtualinvoke $r6.<android.view.Window: void setSoftInputMode(int)>(16);

        goto label3;

     label3:
        return;
    }

    public final void disposeComposition()
    {
        androidx.compose.ui.window.DialogWrapper r0;
        androidx.compose.ui.window.DialogLayout $r1;

        r0 := @this: androidx.compose.ui.window.DialogWrapper;

        $r1 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogLayout dialogLayout>;

        virtualinvoke $r1.<androidx.compose.ui.window.DialogLayout: void disposeComposition()>();

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        androidx.compose.ui.window.DialogWrapper r0;
        android.view.MotionEvent r1;
        boolean z0, $z1;
        androidx.compose.ui.window.DialogProperties $r2;
        kotlin.jvm.functions.Function0 $r3;

        r0 := @this: androidx.compose.ui.window.DialogWrapper;

        r1 := @parameter0: android.view.MotionEvent;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "event");

        z0 = specialinvoke r0.<androidx.activity.ComponentDialog: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        if z0 == 0 goto label1;

        $r2 = r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogProperties properties>;

        $z1 = virtualinvoke $r2.<androidx.compose.ui.window.DialogProperties: boolean getDismissOnClickOutside()>();

        if $z1 == 0 goto label1;

        $r3 = r0.<androidx.compose.ui.window.DialogWrapper: kotlin.jvm.functions.Function0 onDismissRequest>;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label1:
        return z0;
    }

    public void cancel()
    {
        androidx.compose.ui.window.DialogWrapper r0;

        r0 := @this: androidx.compose.ui.window.DialogWrapper;

        return;
    }

    private static final void _init_$disableClipping(android.view.ViewGroup)
    {
        android.view.ViewGroup $r0, $r2;
        int i0, i1;
        android.view.View r1;
        boolean $z0, $z1;

        $r0 := @parameter0: android.view.ViewGroup;

        virtualinvoke $r0.<android.view.ViewGroup: void setClipChildren(boolean)>(0);

        $z0 = $r0 instanceof androidx.compose.ui.window.DialogLayout;

        if $z0 == 0 goto label1;

        return;

     label1:
        i1 = 0;

        i0 = virtualinvoke $r0.<android.view.ViewGroup: int getChildCount()>();

     label2:
        if i1 >= i0 goto label6;

        r1 = virtualinvoke $r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        $r2 = (android.view.ViewGroup) r1;

        goto label4;

     label3:
        $r2 = null;

     label4:
        if $r2 == null goto label5;

        staticinvoke <androidx.compose.ui.window.DialogWrapper: void _init_$disableClipping(android.view.ViewGroup)>($r2);

        goto label5;

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        return;
    }

    public static final androidx.compose.ui.window.DialogProperties access$getProperties$p(androidx.compose.ui.window.DialogWrapper)
    {
        androidx.compose.ui.window.DialogWrapper $r0;
        androidx.compose.ui.window.DialogProperties $r1;

        $r0 := @parameter0: androidx.compose.ui.window.DialogWrapper;

        $r1 = $r0.<androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogProperties properties>;

        return $r1;
    }

    public static final kotlin.jvm.functions.Function0 access$getOnDismissRequest$p(androidx.compose.ui.window.DialogWrapper)
    {
        androidx.compose.ui.window.DialogWrapper $r0;
        kotlin.jvm.functions.Function0 $r1;

        $r0 := @parameter0: androidx.compose.ui.window.DialogWrapper;

        $r1 = $r0.<androidx.compose.ui.window.DialogWrapper: kotlin.jvm.functions.Function0 onDismissRequest>;

        return $r1;
    }

androidx.compose.ui.window.DialogWrapper$1$2
    void <init>()
    {
        androidx.compose.ui.window.DialogWrapper$1$2 r0;

        r0 := @this: androidx.compose.ui.window.DialogWrapper$1$2;

        specialinvoke r0.<android.view.ViewOutlineProvider: void <init>()>();

        return;
    }

    public void getOutline(android.view.View, android.graphics.Outline)
    {
        androidx.compose.ui.window.DialogWrapper$1$2 r0;
        android.view.View r1;
        android.graphics.Outline r2;
        int $i0, $i1;

        r0 := @this: androidx.compose.ui.window.DialogWrapper$1$2;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Outline;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "result");

        $i0 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke r1.<android.view.View: int getHeight()>();

        virtualinvoke r2.<android.graphics.Outline: void setRect(int,int,int,int)>(0, 0, $i0, $i1);

        virtualinvoke r2.<android.graphics.Outline: void setAlpha(float)>(0.0F);

        return;
    }

androidx.compose.ui.window.DialogWrapper$2
<androidx.compose.ui.window.DialogWrapper$2: androidx.compose.ui.window.DialogWrapper this$0>
    void <init>(androidx.compose.ui.window.DialogWrapper)
    {
        androidx.compose.ui.window.DialogWrapper$2 r0;
        androidx.compose.ui.window.DialogWrapper $r1;

        r0 := @this: androidx.compose.ui.window.DialogWrapper$2;

        $r1 := @parameter0: androidx.compose.ui.window.DialogWrapper;

        r0.<androidx.compose.ui.window.DialogWrapper$2: androidx.compose.ui.window.DialogWrapper this$0> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final void invoke(androidx.activity.OnBackPressedCallback)
    {
        androidx.compose.ui.window.DialogWrapper$2 r0;
        androidx.activity.OnBackPressedCallback $r1;
        androidx.compose.ui.window.DialogWrapper $r2, $r4;
        androidx.compose.ui.window.DialogProperties $r3;
        boolean $z0;
        kotlin.jvm.functions.Function0 $r5;

        r0 := @this: androidx.compose.ui.window.DialogWrapper$2;

        $r1 := @parameter0: androidx.activity.OnBackPressedCallback;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$addCallback");

        $r2 = r0.<androidx.compose.ui.window.DialogWrapper$2: androidx.compose.ui.window.DialogWrapper this$0>;

        $r3 = staticinvoke <androidx.compose.ui.window.DialogWrapper: androidx.compose.ui.window.DialogProperties access$getProperties$p(androidx.compose.ui.window.DialogWrapper)>($r2);

        $z0 = virtualinvoke $r3.<androidx.compose.ui.window.DialogProperties: boolean getDismissOnBackPress()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<androidx.compose.ui.window.DialogWrapper$2: androidx.compose.ui.window.DialogWrapper this$0>;

        $r5 = staticinvoke <androidx.compose.ui.window.DialogWrapper: kotlin.jvm.functions.Function0 access$getOnDismissRequest$p(androidx.compose.ui.window.DialogWrapper)>($r4);

        interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

     label1:
        return;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.window.DialogWrapper$2 r0;
        java.lang.Object r1;
        androidx.activity.OnBackPressedCallback $r2;
        kotlin.Unit $r3;

        r0 := @this: androidx.compose.ui.window.DialogWrapper$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.activity.OnBackPressedCallback) r1;

        virtualinvoke r0.<androidx.compose.ui.window.DialogWrapper$2: void invoke(androidx.activity.OnBackPressedCallback)>($r2);

        $r3 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r3;
    }

androidx.compose.ui.window.DialogWrapper$WhenMappings
<androidx.compose.ui.window.DialogWrapper$WhenMappings: int[] $EnumSwitchMapping$0>
    static void <clinit>()
    {
        int[] r0;
        androidx.compose.ui.unit.LayoutDirection[] $r1;
        int $i0, $i1, $i2;
        androidx.compose.ui.unit.LayoutDirection $r2, $r3;

        $r1 = staticinvoke <androidx.compose.ui.unit.LayoutDirection: androidx.compose.ui.unit.LayoutDirection[] values()>();

        $i0 = lengthof $r1;

        r0 = newarray (int)[$i0];

        $r2 = <androidx.compose.ui.unit.LayoutDirection: androidx.compose.ui.unit.LayoutDirection Ltr>;

        $i1 = virtualinvoke $r2.<androidx.compose.ui.unit.LayoutDirection: int ordinal()>();

        r0[$i1] = 1;

        $r3 = <androidx.compose.ui.unit.LayoutDirection: androidx.compose.ui.unit.LayoutDirection Rtl>;

        $i2 = virtualinvoke $r3.<androidx.compose.ui.unit.LayoutDirection: int ordinal()>();

        r0[$i2] = 2;

        <androidx.compose.ui.window.DialogWrapper$WhenMappings: int[] $EnumSwitchMapping$0> = r0;

        return;
    }

