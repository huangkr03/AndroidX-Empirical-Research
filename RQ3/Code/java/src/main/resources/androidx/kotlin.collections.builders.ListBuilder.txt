kotlin.collections.builders.ListBuilder
<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>
<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>
<kotlin.collections.builders.ListBuilder: boolean isReadOnly>
<kotlin.collections.builders.ListBuilder: int length>
<kotlin.collections.builders.ListBuilder: int offset>
<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder root>
    public void <init>()
    {
        kotlin.collections.builders.ListBuilder $r0;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void <init>(int)>(10);

        return;
    }

    public void <init>(int)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <kotlin.collections.builders.ListBuilderKt: java.lang.Object[] arrayOfUninitializedElements(int)>($i0);

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void <init>(java.lang.Object[],int,int,boolean,kotlin.collections.builders.ListBuilder,kotlin.collections.builders.ListBuilder)>($r1, 0, 0, 0, null, null);

        return;
    }

    private void <init>(java.lang.Object[], int, int, boolean, kotlin.collections.builders.ListBuilder, kotlin.collections.builders.ListBuilder)
    {
        kotlin.collections.builders.ListBuilder $r0, $r2, $r3;
        java.lang.Object[] $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.lang.Object[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r2 := @parameter4: kotlin.collections.builders.ListBuilder;

        $r3 := @parameter5: kotlin.collections.builders.ListBuilder;

        specialinvoke $r0.<kotlin.collections.AbstractMutableList: void <init>()>();

        $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array> = $r1;

        $r0.<kotlin.collections.builders.ListBuilder: int offset> = $i0;

        $r0.<kotlin.collections.builders.ListBuilder: int length> = $i1;

        $r0.<kotlin.collections.builders.ListBuilder: boolean isReadOnly> = $z0;

        $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing> = $r2;

        $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder root> = $r3;

        return;
    }

    public static final java.lang.Object[] access$getArray$p(kotlin.collections.builders.ListBuilder)
    {
        kotlin.collections.builders.ListBuilder $r0;
        java.lang.Object[] r1;

        $r0 := @parameter0: kotlin.collections.builders.ListBuilder;

        r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        return r1;
    }

    public static final int access$getLength$p(kotlin.collections.builders.ListBuilder)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int i0;

        $r0 := @parameter0: kotlin.collections.builders.ListBuilder;

        i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        return i0;
    }

    public static final int access$getOffset$p(kotlin.collections.builders.ListBuilder)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int i0;

        $r0 := @parameter0: kotlin.collections.builders.ListBuilder;

        i0 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        return i0;
    }

    private final void addAllInternal(int, java.util.Collection, int)
    {
        kotlin.collections.builders.ListBuilder $r0, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;
        java.util.Collection $r2;
        java.util.Iterator $r4;
        java.lang.Object $r5;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i2 := @parameter0: int;

        $r2 := @parameter1: java.util.Collection;

        $i0 := @parameter2: int;

        $r3 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>;

        if $r3 == null goto label1;

        specialinvoke $r3.<kotlin.collections.builders.ListBuilder: void addAllInternal(int,java.util.Collection,int)>($i2, $r2, $i0);

        $r3 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>;

        $r1 = $r3.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array> = $r1;

        $i2 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i2 = $i2 + $i0;

        $r0.<kotlin.collections.builders.ListBuilder: int length> = $i2;

        return;

     label1:
        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void insertAtInternal(int,int)>($i2, $i0);

        $r4 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $i3 = 0;

     label2:
        if $i3 >= $i0 goto label3;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = $i2 + $i3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r1[$i1] = $r5;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        return;
    }

    private final void addAtInternal(int, java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r0, $r2;
        java.lang.Object $r1;
        int $i0;
        java.lang.Object[] $r3;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>;

        if $r2 == null goto label1;

        specialinvoke $r2.<kotlin.collections.builders.ListBuilder: void addAtInternal(int,java.lang.Object)>($i0, $r1);

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>;

        $r3 = $r2.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array> = $r3;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = $i0 + 1;

        $r0.<kotlin.collections.builders.ListBuilder: int length> = $i0;

        return;

     label1:
        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void insertAtInternal(int,int)>($i0, 1);

        $r3 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $r3[$i0] = $r1;

        return;
    }

    private final void checkIsMutable()
    {
        kotlin.collections.builders.ListBuilder $r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $z0 = specialinvoke $r0.<kotlin.collections.builders.ListBuilder: boolean isEffectivelyReadOnly()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    private final boolean contentEquals(java.util.List)
    {
        kotlin.collections.builders.ListBuilder $r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        boolean $z0;
        java.util.List $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r2 := @parameter0: java.util.List;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $z0 = staticinvoke <kotlin.collections.builders.ListBuilderKt: boolean access$subarrayContentEquals(java.lang.Object[],int,int,java.util.List)>($r1, $i0, $i1, $r2);

        return $z0;
    }

    private final void ensureCapacity(int)
    {
        kotlin.collections.builders.ListBuilder $r0, $r1;
        int $i0, $i1;
        java.lang.Object[] $r2;
        kotlin.collections.ArrayDeque$Companion $r3;
        java.lang.OutOfMemoryError $r4;
        java.lang.IllegalStateException $r5;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter0: int;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>;

        if $r1 != null goto label2;

        if $i0 < 0 goto label1;

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = lengthof $r2;

        if $i0 <= $i1 goto label3;

        $r3 = <kotlin.collections.ArrayDeque: kotlin.collections.ArrayDeque$Companion Companion>;

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = lengthof $r2;

        $i0 = virtualinvoke $r3.<kotlin.collections.ArrayDeque$Companion: int newCapacity$kotlin_stdlib(int,int)>($i1, $i0);

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $r2 = staticinvoke <kotlin.collections.builders.ListBuilderKt: java.lang.Object[] copyOfUninitializedElements(java.lang.Object[],int)>($r2, $i0);

        $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array> = $r2;

        return;

     label1:
        $r4 = new java.lang.OutOfMemoryError;

        specialinvoke $r4.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r4;

     label2:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label3:
        return;
    }

    private final void ensureExtraCapacity(int)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter0: int;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = $i1 + $i0;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void ensureCapacity(int)>($i0);

        return;
    }

    private final void insertAtInternal(int, int)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i3 := @parameter0: int;

        $i0 := @parameter1: int;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void ensureExtraCapacity(int)>($i0);

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = $i3 + $i0;

        $i4 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i2 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i2 = $i4 + $i2;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r1, $r1, $i1, $i3, $i2);

        $i3 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i3 = $i3 + $i0;

        $r0.<kotlin.collections.builders.ListBuilder: int length> = $i3;

        return;
    }

    private final boolean isEffectivelyReadOnly()
    {
        kotlin.collections.builders.ListBuilder $r0;
        boolean $z0;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $z0 = $r0.<kotlin.collections.builders.ListBuilder: boolean isReadOnly>;

        if $z0 != 0 goto label2;

        $r0 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder root>;

        if $r0 == null goto label1;

        $z0 = $r0.<kotlin.collections.builders.ListBuilder: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private final java.lang.Object removeAtInternal(int)
    {
        kotlin.collections.builders.ListBuilder $r0, $r2;
        java.lang.Object $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r3;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i1 := @parameter0: int;

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>;

        if $r2 == null goto label1;

        $r1 = specialinvoke $r2.<kotlin.collections.builders.ListBuilder: java.lang.Object removeAtInternal(int)>($i1);

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i1 = $i1 + -1;

        $r0.<kotlin.collections.builders.ListBuilder: int length> = $i1;

        return $r1;

     label1:
        $r3 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $r1 = $r3[$i1];

        $i2 = $i1 + 1;

        $i3 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = $i3 + $i0;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r3, $i1, $i2, $i0);

        $r3 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i2 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i1 = $i1 + $i2;

        $i1 = $i1 + -1;

        staticinvoke <kotlin.collections.builders.ListBuilderKt: void resetAt(java.lang.Object[],int)>($r3, $i1);

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i1 = $i1 + -1;

        $r0.<kotlin.collections.builders.ListBuilder: int length> = $i1;

        return $r1;
    }

    private final void removeRangeInternal(int, int)
    {
        kotlin.collections.builders.ListBuilder $r0, $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>;

        if $r1 == null goto label1;

        specialinvoke $r1.<kotlin.collections.builders.ListBuilder: void removeRangeInternal(int,int)>($i2, $i0);

        goto label2;

     label1:
        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i3 = $i2 + $i0;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r2, $r2, $i2, $i3, $i1);

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i2 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i1 = $i2 - $i0;

        staticinvoke <kotlin.collections.builders.ListBuilderKt: void resetRange(java.lang.Object[],int,int)>($r2, $i1, $i2);

     label2:
        $i2 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i2 = $i2 - $i0;

        $r0.<kotlin.collections.builders.ListBuilder: int length> = $i2;

        return;
    }

    private final int retainOrRemoveAllInternal(int, int, java.util.Collection, boolean)
    {
        kotlin.collections.builders.ListBuilder $r0, $r3;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Collection $r2;
        boolean $z0, $z1;
        java.lang.Object $r4;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r2 := @parameter2: java.util.Collection;

        $z0 := @parameter3: boolean;

        $r3 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>;

        if $r3 == null goto label1;

        $i0 = specialinvoke $r3.<kotlin.collections.builders.ListBuilder: int retainOrRemoveAllInternal(int,int,java.util.Collection,boolean)>($i0, $i1, $r2, $z0);

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i1 = $i1 - $i0;

        $r0.<kotlin.collections.builders.ListBuilder: int length> = $i1;

        return $i0;

     label1:
        $i2 = 0;

        $i3 = 0;

     label2:
        if $i2 >= $i1 goto label4;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i4 = $i0 + $i2;

        $r4 = $r1[$i4];

        $z1 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        if $z1 != $z0 goto label3;

        $i4 = $i3 + 1;

        $i5 = $i2 + 1;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i3 = $i3 + $i0;

        $i2 = $i2 + $i0;

        $r4 = $r1[$i2];

        $r1[$i3] = $r4;

        $i3 = $i4;

        $i2 = $i5;

        goto label2;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        $i2 = $i1 - $i3;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i3 = $i3 + $i0;

        $i0 = $i0 + $i1;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r1, $r1, $i3, $i0, $i1);

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i1 = $i0 - $i2;

        staticinvoke <kotlin.collections.builders.ListBuilderKt: void resetRange(java.lang.Object[],int,int)>($r1, $i1, $i0);

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = $i0 - $i2;

        $r0.<kotlin.collections.builders.ListBuilder: int length> = $i0;

        return $i2;
    }

    private final java.lang.Object writeReplace()
    {
        kotlin.collections.builders.ListBuilder $r0;
        boolean $z0;
        kotlin.collections.builders.SerializedCollection r1;
        java.io.NotSerializableException r2;
        java.util.Collection r3;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $z0 = specialinvoke $r0.<kotlin.collections.builders.ListBuilder: boolean isEffectivelyReadOnly()>();

        if $z0 == 0 goto label1;

        r1 = new kotlin.collections.builders.SerializedCollection;

        r3 = (java.util.Collection) $r0;

        specialinvoke r1.<kotlin.collections.builders.SerializedCollection: void <init>(java.util.Collection,int)>(r3, 0);

        return r1;

     label1:
        r2 = new java.io.NotSerializableException;

        specialinvoke r2.<java.io.NotSerializableException: void <init>(java.lang.String)>("The list cannot be serialized while it is being built.");

        throw r2;
    }

    public void add(int, java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;
        java.lang.Object $r1;
        kotlin.collections.AbstractList$Companion $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $r2 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        virtualinvoke $r2.<kotlin.collections.AbstractList$Companion: void checkPositionIndex$kotlin_stdlib(int,int)>($i0, $i1);

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i0 = $i1 + $i0;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void addAtInternal(int,java.lang.Object)>($i0, $r1);

        return;
    }

    public boolean add(java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;
        java.lang.Object $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = $i1 + $i0;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void addAtInternal(int,java.lang.Object)>($i0, $r1);

        return 1;
    }

    public boolean addAll(int, java.util.Collection)
    {
        kotlin.collections.builders.ListBuilder $r0;
        java.util.Collection $r1;
        int $i0, $i1, $i2;
        kotlin.collections.AbstractList$Companion $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i1 := @parameter0: int;

        $r1 := @parameter1: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $r2 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        virtualinvoke $r2.<kotlin.collections.AbstractList$Companion: void checkPositionIndex$kotlin_stdlib(int,int)>($i1, $i0);

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i2 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $i2 + $i1;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void addAllInternal(int,java.util.Collection,int)>($i1, $r1, $i0);

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1, $i2;
        java.util.Collection $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $i1 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        $i2 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = $i2 + $i0;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void addAllInternal(int,java.util.Collection,int)>($i0, $r1, $i1);

        if $i1 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.util.List build()
    {
        kotlin.collections.builders.ListBuilder $r0, $r1;
        java.lang.IllegalStateException $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder backing>;

        if $r1 != null goto label1;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $r0.<kotlin.collections.builders.ListBuilder: boolean isReadOnly> = 1;

        return $r0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public void clear()
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void removeRangeInternal(int,int)>($i0, $i1);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.List $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == $r0 goto label2;

        $z0 = $r1 instanceof java.util.List;

        if $z0 == 0 goto label1;

        $r2 = (java.util.List) $r1;

        $z0 = specialinvoke $r0.<kotlin.collections.builders.ListBuilder: boolean contentEquals(java.util.List)>($r2);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        return $z0;
    }

    public java.lang.Object get(int)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;
        kotlin.collections.AbstractList$Companion $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter0: int;

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)>($i0, $i1);

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i0 = $i1 + $i0;

        $r3 = $r2[$i0];

        return $r3;
    }

    public int getSize()
    {
        kotlin.collections.builders.ListBuilder $r0;
        int i0;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        return i0;
    }

    public int hashCode()
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;
        java.lang.Object[] $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = staticinvoke <kotlin.collections.builders.ListBuilderKt: int access$subarrayContentHashCode(java.lang.Object[],int,int)>($r1, $i0, $i1);

        return $i0;
    }

    public int indexOf(java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r0;
        boolean $z0;
        java.lang.Object $r1, $r3;
        int $i0, $i1;
        java.lang.Object[] $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.lang.Object;

        $i0 = 0;

     label1:
        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        if $i0 >= $i1 goto label3;

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $i1 + $i0;

        $r3 = $r2[$i1];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r1);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public boolean isEmpty()
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        kotlin.collections.builders.ListBuilder $r0;
        kotlin.collections.builders.ListBuilder$Itr r1;
        java.util.Iterator r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        r1 = new kotlin.collections.builders.ListBuilder$Itr;

        specialinvoke r1.<kotlin.collections.builders.ListBuilder$Itr: void <init>(kotlin.collections.builders.ListBuilder,int)>($r0, 0);

        r2 = (java.util.Iterator) r1;

        return r2;
    }

    public int lastIndexOf(java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r0;
        java.lang.Object $r1, $r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object[] $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.lang.Object;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = $i0 + -1;

     label1:
        if $i0 < 0 goto label3;

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $i1 + $i0;

        $r3 = $r2[$i1];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r1);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        return -1;
    }

    public java.util.ListIterator listIterator()
    {
        kotlin.collections.builders.ListBuilder $r0;
        kotlin.collections.builders.ListBuilder$Itr $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 = new kotlin.collections.builders.ListBuilder$Itr;

        specialinvoke $r1.<kotlin.collections.builders.ListBuilder$Itr: void <init>(kotlin.collections.builders.ListBuilder,int)>($r0, 0);

        return $r1;
    }

    public java.util.ListIterator listIterator(int)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;
        kotlin.collections.AbstractList$Companion $r1;
        kotlin.collections.builders.ListBuilder$Itr $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter0: int;

        $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkPositionIndex$kotlin_stdlib(int,int)>($i0, $i1);

        $r2 = new kotlin.collections.builders.ListBuilder$Itr;

        specialinvoke $r2.<kotlin.collections.builders.ListBuilder$Itr: void <init>(kotlin.collections.builders.ListBuilder,int)>($r0, $i0);

        return $r2;
    }

    public boolean remove(java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $i0 = virtualinvoke $r0.<kotlin.collections.builders.ListBuilder: int indexOf(java.lang.Object)>($r1);

        if $i0 < 0 goto label1;

        virtualinvoke $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object remove(int)>($i0);

     label1:
        if $i0 < 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;
        java.util.Collection $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.ListBuilder: int retainOrRemoveAllInternal(int,int,java.util.Collection,boolean)>($i1, $i0, $r1, 0);

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object removeAt(int)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;
        java.lang.Object $r1;
        kotlin.collections.AbstractList$Companion $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i1 := @parameter0: int;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $r2 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        virtualinvoke $r2.<kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)>($i1, $i0);

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $i0 + $i1;

        $r1 = specialinvoke $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object removeAtInternal(int)>($i1);

        return $r1;
    }

    public boolean retainAll(java.util.Collection)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;
        java.util.Collection $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.util.Collection;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements");

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = specialinvoke $r0.<kotlin.collections.builders.ListBuilder: int retainOrRemoveAllInternal(int,int,java.util.Collection,boolean)>($i1, $i0, $r1, 1);

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1, $i2;
        java.lang.Object $r1, $r4;
        kotlin.collections.AbstractList$Companion $r2;
        java.lang.Object[] $r3;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        specialinvoke $r0.<kotlin.collections.builders.ListBuilder: void checkIsMutable()>();

        $r2 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        virtualinvoke $r2.<kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)>($i0, $i1);

        $r3 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i2 = $i1 + $i0;

        $r4 = $r3[$i2];

        $i0 = $i1 + $i0;

        $r3[$i0] = $r1;

        return $r4;
    }

    public java.util.List subList(int, int)
    {
        kotlin.collections.builders.ListBuilder $r0, $r3, $r4;
        int $i0, $i1, $i2;
        java.lang.Object[] $r1;
        boolean $z0;
        kotlin.collections.AbstractList$Companion $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $r2 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        virtualinvoke $r2.<kotlin.collections.AbstractList$Companion: void checkRangeIndexes$kotlin_stdlib(int,int,int)>($i2, $i0, $i1);

        $r3 = new kotlin.collections.builders.ListBuilder;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $i1 + $i2;

        $i2 = $i0 - $i2;

        $z0 = $r0.<kotlin.collections.builders.ListBuilder: boolean isReadOnly>;

        $r4 = $r0.<kotlin.collections.builders.ListBuilder: kotlin.collections.builders.ListBuilder root>;

        if $r4 != null goto label1;

        $r4 = $r0;

        goto label1;

     label1:
        specialinvoke $r3.<kotlin.collections.builders.ListBuilder: void <init>(java.lang.Object[],int,int,boolean,kotlin.collections.builders.ListBuilder,kotlin.collections.builders.ListBuilder)>($r1, $i1, $i2, $z0, $r0, $r4);

        return $r3;
    }

    public java.lang.Object[] toArray()
    {
        kotlin.collections.builders.ListBuilder $r0;
        java.lang.Object[] $r1;
        int $i0, $i1;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i1 = $i1 + $i0;

        $r1 = staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r1, $i0, $i1);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlin.Array<kotlin.Any?>");

        return $r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        kotlin.collections.builders.ListBuilder $r0;
        java.lang.Object[] $r1, $r2;
        int $i0, $i1;
        java.lang.Class $r3;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r1 := @parameter0: java.lang.Object[];

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination");

        $i0 = lengthof $r1;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        if $i0 >= $i1 goto label1;

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $i1 + $i0;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>($r2, $i0, $i1, $r3);

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "copyOfRange(array, offse\u2026h, destination.javaClass)");

        return $r1;

     label1:
        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.builders.ListBuilder.toArray>");

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $i0 = $i0 + $i1;

        staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r2, $r1, 0, $i1, $i0);

        $i1 = lengthof $r1;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        if $i1 <= $i0 goto label2;

        $r1[$i0] = null;

     label2:
        return $r1;
    }

    public java.lang.String toString()
    {
        kotlin.collections.builders.ListBuilder $r0;
        int $i0, $i1;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder;

        $r2 = $r0.<kotlin.collections.builders.ListBuilder: java.lang.Object[] array>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder: int offset>;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder: int length>;

        $r1 = staticinvoke <kotlin.collections.builders.ListBuilderKt: java.lang.String access$subarrayContentToString(java.lang.Object[],int,int)>($r2, $i0, $i1);

        return $r1;
    }

kotlin.collections.builders.ListBuilder$Itr
<kotlin.collections.builders.ListBuilder$Itr: int index>
<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>
<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>
    public void <init>(kotlin.collections.builders.ListBuilder, int)
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        int $i0;
        kotlin.collections.builders.ListBuilder $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $r1 := @parameter0: kotlin.collections.builders.ListBuilder;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "list");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list> = $r1;

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i0;

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = -1;

        return;
    }

    public void add(java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        kotlin.collections.builders.ListBuilder $r1;
        int $i0, $i1;
        java.lang.Object $r2;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $r2 := @parameter0: java.lang.Object;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $i1 = $i0 + 1;

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i1;

        virtualinvoke $r1.<kotlin.collections.builders.ListBuilder: void add(int,java.lang.Object)>($i0, $r2);

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = -1;

        return;
    }

    public boolean hasNext()
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        int $i0, $i1;
        kotlin.collections.builders.ListBuilder $r1;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i1 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i0 = staticinvoke <kotlin.collections.builders.ListBuilder: int access$getLength$p(kotlin.collections.builders.ListBuilder)>($r1);

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasPrevious()
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        int $i0;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        int $i0, $i1;
        kotlin.collections.builders.ListBuilder $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i1 = staticinvoke <kotlin.collections.builders.ListBuilder: int access$getLength$p(kotlin.collections.builders.ListBuilder)>($r1);

        if $i0 >= $i1 goto label1;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $i1 = $i0 + 1;

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i1;

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = $i0;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $r2 = staticinvoke <kotlin.collections.builders.ListBuilder: java.lang.Object[] access$getArray$p(kotlin.collections.builders.ListBuilder)>($r1);

        $r1 = $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i1 = staticinvoke <kotlin.collections.builders.ListBuilder: int access$getOffset$p(kotlin.collections.builders.ListBuilder)>($r1);

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        $i0 = $i1 + $i0;

        $r3 = $r2[$i0];

        return $r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;
    }

    public int nextIndex()
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        int i0;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        return i0;
    }

    public java.lang.Object previous()
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        int $i0, $i1;
        kotlin.collections.builders.ListBuilder $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        if $i0 <= 0 goto label1;

        $i0 = $i0 + -1;

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i0;

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = $i0;

        $r1 = $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $r2 = staticinvoke <kotlin.collections.builders.ListBuilder: java.lang.Object[] access$getArray$p(kotlin.collections.builders.ListBuilder)>($r1);

        $r1 = $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        $i1 = staticinvoke <kotlin.collections.builders.ListBuilder: int access$getOffset$p(kotlin.collections.builders.ListBuilder)>($r1);

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        $i0 = $i1 + $i0;

        $r3 = $r2[$i0];

        return $r3;

     label1:
        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;
    }

    public int previousIndex()
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        int $i0;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int index>;

        $i0 = $i0 + -1;

        return $i0;
    }

    public void remove()
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0;
        kotlin.collections.builders.ListBuilder $r2;
        java.lang.IllegalStateException $r3;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r2 = $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        virtualinvoke $r2.<kotlin.collections.builders.ListBuilder: java.lang.Object remove(int)>($i0);

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int index> = $i0;

        $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex> = -1;

        return;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r1 = "Call next() or previous() before removing element from the iterator.";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public void set(java.lang.Object)
    {
        kotlin.collections.builders.ListBuilder$Itr $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        int $i0;
        boolean $z0;
        kotlin.collections.builders.ListBuilder $r3;
        java.lang.IllegalStateException $r4;

        $r0 := @this: kotlin.collections.builders.ListBuilder$Itr;

        $r2 := @parameter0: java.lang.Object;

        $i0 = $r0.<kotlin.collections.builders.ListBuilder$Itr: int lastIndex>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        $r3 = $r0.<kotlin.collections.builders.ListBuilder$Itr: kotlin.collections.builders.ListBuilder list>;

        virtualinvoke $r3.<kotlin.collections.builders.ListBuilder: java.lang.Object set(int,java.lang.Object)>($i0, $r2);

        return;

     label3:
        $r4 = new java.lang.IllegalStateException;

        $r1 = "Call next() or previous() before replacing element from the iterator.";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }

