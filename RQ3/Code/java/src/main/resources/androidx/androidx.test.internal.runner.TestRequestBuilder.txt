androidx.test.internal.runner.TestRequestBuilder
<androidx.test.internal.runner.TestRequestBuilder: java.lang.String TAG>
<androidx.test.internal.runner.TestRequestBuilder: java.lang.String MISSING_ARGUMENTS_MSG>
<androidx.test.internal.runner.TestRequestBuilder: java.lang.String AMBIGUOUS_ARGUMENTS_MSG>
<androidx.test.internal.runner.TestRequestBuilder: java.util.List pathsToScan>
<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedPackages>
<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedPackages>
<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedClasses>
<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedClasses>
<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter classMethodFilter>
<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.filters.TestsRegExFilter testsRegExFilter>
<androidx.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter filter>
<androidx.test.internal.runner.TestRequestBuilder: java.util.List customRunnerBuilderClasses>
<androidx.test.internal.runner.TestRequestBuilder: boolean skipExecution>
<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$DeviceBuild deviceBuild>
<androidx.test.internal.runner.TestRequestBuilder: long perTestTimeout>
<androidx.test.internal.runner.TestRequestBuilder: android.app.Instrumentation instr>
<androidx.test.internal.runner.TestRequestBuilder: android.os.Bundle argsBundle>
<androidx.test.internal.runner.TestRequestBuilder: java.lang.ClassLoader classLoader>
<androidx.test.internal.runner.TestRequestBuilder: boolean ignoreSuiteMethods>
    static volatile int '-$$Nest$mgetDeviceSdkInt'(androidx.test.internal.runner.TestRequestBuilder)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        int $i0;

        r0 := @parameter0: androidx.test.internal.runner.TestRequestBuilder;

        $i0 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: int getDeviceSdkInt()>();

        return $i0;
    }

    private int getDeviceSdkInt()
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuild $r1;
        int $i0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        $r1 = r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$DeviceBuild deviceBuild>;

        $i0 = interfaceinvoke $r1.<androidx.test.internal.runner.TestRequestBuilder$DeviceBuild: int getSdkVersionInt()>();

        return $i0;
    }

    androidx.test.internal.runner.ClassPathScanner createClassPathScanner(java.util.List)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.util.List r1;
        androidx.test.internal.runner.ClassPathScanner $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.util.List;

        $r2 = new androidx.test.internal.runner.ClassPathScanner;

        specialinvoke $r2.<androidx.test.internal.runner.ClassPathScanner: void <init>(java.util.Collection)>(r1);

        return $r2;
    }

    public androidx.test.internal.runner.TestRequestBuilder addAnnotationExclusionFilter(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        java.lang.Class r2;
        androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter $r3;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: java.lang.Class loadAnnotationClass(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = new androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        specialinvoke $r3.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: void <init>(java.lang.Class)>(r2);

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addFilter(org.junit.runner.manipulation.Filter)>($r3);

     label1:
        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addAnnotationInclusionFilter(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        java.lang.Class r2;
        androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter $r3;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: java.lang.Class loadAnnotationClass(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = new androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter;

        specialinvoke $r3.<androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: void <init>(java.lang.Class)>(r2);

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addFilter(org.junit.runner.manipulation.Filter)>($r3);

     label1:
        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addCustomRunnerBuilderClass(java.lang.Class)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.Class r1;
        java.util.List $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List customRunnerBuilderClasses>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addFilter(org.junit.runner.manipulation.Filter)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        org.junit.runner.manipulation.Filter r1, $r2, $r3;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: org.junit.runner.manipulation.Filter;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter filter>;

        $r3 = virtualinvoke $r2.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>(r1);

        r0.<androidx.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter filter> = $r3;

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addFromRunnerArgs(androidx.test.internal.runner.RunnerArgs)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        androidx.test.internal.runner.RunnerArgs r1;
        java.util.List $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.String $r6, $r12, $r13, $r27, $r35, $r36, $r37, $r39, $r42, $r43, $r44, $r46, r53, r55, r57, r59;
        long $l0, $l8;
        byte $b1;
        int $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r15, $r21, $r23, $r25, $r30, $r32, $r34, $r41;
        java.lang.ClassLoader $r17, $r62;
        androidx.test.internal.runner.TestSize $r28;
        java.util.Iterator r48, r50, r52, r54, r56, r58, r60, r63;
        androidx.test.internal.runner.RunnerArgs$TestArg r49, r51;
        org.junit.runner.manipulation.Filter r61;
        java.lang.Class r64;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: androidx.test.internal.runner.RunnerArgs;

        $r2 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List tests>;

        r48 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r41 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        r49 = (androidx.test.internal.runner.RunnerArgs$TestArg) $r41;

        $r42 = r49.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>;

        if $r42 != null goto label02;

        $r46 = r49.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addTestClass(java.lang.String)>($r46);

        goto label03;

     label02:
        $r44 = r49.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

        $r43 = r49.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addTestMethod(java.lang.String,java.lang.String)>($r44, $r43);

     label03:
        goto label01;

     label04:
        $r3 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List notTests>;

        r50 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r34 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();

        r51 = (androidx.test.internal.runner.RunnerArgs$TestArg) $r34;

        $r35 = r51.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>;

        if $r35 != null goto label06;

        $r39 = r51.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder removeTestClass(java.lang.String)>($r39);

        goto label07;

     label06:
        $r37 = r51.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String testClassName>;

        $r36 = r51.<androidx.test.internal.runner.RunnerArgs$TestArg: java.lang.String methodName>;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder removeTestMethod(java.lang.String,java.lang.String)>($r37, $r36);

     label07:
        goto label05;

     label08:
        $r4 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List testPackages>;

        r52 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r32 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>();

        r53 = (java.lang.String) $r32;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addTestPackage(java.lang.String)>(r53);

        goto label09;

     label10:
        $r5 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List notTestPackages>;

        r54 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r30 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (java.lang.String) $r30;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder removeTestPackage(java.lang.String)>(r55);

        goto label11;

     label12:
        $r6 = r1.<androidx.test.internal.runner.RunnerArgs: java.lang.String testSize>;

        if $r6 == null goto label13;

        $r27 = r1.<androidx.test.internal.runner.RunnerArgs: java.lang.String testSize>;

        $r28 = staticinvoke <androidx.test.internal.runner.TestSize: androidx.test.internal.runner.TestSize fromString(java.lang.String)>($r27);

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addTestSizeFilter(androidx.test.internal.runner.TestSize)>($r28);

     label13:
        $r7 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List annotations>;

        r56 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z7 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label15;

        $r25 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (java.lang.String) $r25;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addAnnotationInclusionFilter(java.lang.String)>(r57);

        goto label14;

     label15:
        $r8 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List notAnnotations>;

        r58 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z4 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label17;

        $r23 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r59 = (java.lang.String) $r23;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addAnnotationExclusionFilter(java.lang.String)>(r59);

        goto label16;

     label17:
        $r9 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List filters>;

        r60 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z5 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label19;

        $r21 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (org.junit.runner.manipulation.Filter) $r21;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addFilter(org.junit.runner.manipulation.Filter)>(r61);

        goto label18;

     label19:
        $l0 = r1.<androidx.test.internal.runner.RunnerArgs: long testTimeout>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label20;

        $l8 = r1.<androidx.test.internal.runner.RunnerArgs: long testTimeout>;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder setPerTestTimeout(long)>($l8);

     label20:
        $i2 = r1.<androidx.test.internal.runner.RunnerArgs: int numShards>;

        if $i2 <= 0 goto label21;

        $i3 = r1.<androidx.test.internal.runner.RunnerArgs: int shardIndex>;

        if $i3 < 0 goto label21;

        $i5 = r1.<androidx.test.internal.runner.RunnerArgs: int shardIndex>;

        $i4 = r1.<androidx.test.internal.runner.RunnerArgs: int numShards>;

        if $i5 >= $i4 goto label21;

        $i7 = r1.<androidx.test.internal.runner.RunnerArgs: int numShards>;

        $i6 = r1.<androidx.test.internal.runner.RunnerArgs: int shardIndex>;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addShardingFilter(int,int)>($i7, $i6);

     label21:
        $z8 = r1.<androidx.test.internal.runner.RunnerArgs: boolean logOnly>;

        if $z8 != 0 goto label22;

        $z6 = r1.<androidx.test.internal.runner.RunnerArgs: boolean listTestsForOrchestrator>;

        if $z6 == 0 goto label23;

     label22:
        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder setSkipExecution(boolean)>(1);

     label23:
        $r62 = r1.<androidx.test.internal.runner.RunnerArgs: java.lang.ClassLoader classLoader>;

        if $r62 == null goto label24;

        $r17 = r1.<androidx.test.internal.runner.RunnerArgs: java.lang.ClassLoader classLoader>;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder setClassLoader(java.lang.ClassLoader)>($r17);

     label24:
        $r11 = r1.<androidx.test.internal.runner.RunnerArgs: java.util.List runnerBuilderClasses>;

        r63 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label25:
        $z9 = interfaceinvoke r63.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label26;

        $r15 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        r64 = (java.lang.Class) $r15;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addCustomRunnerBuilderClass(java.lang.Class)>(r64);

        goto label25;

     label26:
        $r12 = r1.<androidx.test.internal.runner.RunnerArgs: java.lang.String testsRegEx>;

        if $r12 == null goto label27;

        $r13 = r1.<androidx.test.internal.runner.RunnerArgs: java.lang.String testsRegEx>;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder setTestsRegExFilter(java.lang.String)>($r13);

     label27:
        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addPathToScan(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        java.util.List $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List pathsToScan>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addPathsToScan(java.lang.Iterable)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        java.lang.String r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.Iterable;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r4;

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addPathToScan(java.lang.String)>(r3);

        goto label1;

     label2:
        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addShardingFilter(int, int)
    {
        androidx.test.internal.runner.TestRequestBuilder r0, $r2;
        int i0, i1;
        androidx.test.internal.runner.TestRequestBuilder$ShardingFilter $r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new androidx.test.internal.runner.TestRequestBuilder$ShardingFilter;

        specialinvoke $r1.<androidx.test.internal.runner.TestRequestBuilder$ShardingFilter: void <init>(int,int)>(i0, i1);

        $r2 = virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addFilter(org.junit.runner.manipulation.Filter)>($r1);

        return $r2;
    }

    public androidx.test.internal.runner.TestRequestBuilder addTestClass(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedClasses>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addTestMethod(java.lang.String, java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1, r2;
        java.util.Set $r3;
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter $r4;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedClasses>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter classMethodFilter>;

        virtualinvoke $r4.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: void addMethod(java.lang.String,java.lang.String)>(r1, r2);

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addTestPackage(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedPackages>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder addTestSizeFilter(androidx.test.internal.runner.TestSize)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        androidx.test.internal.runner.TestSize r1, $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.String $r4, $r5;
        androidx.test.internal.runner.TestRequestBuilder$SizeFilter $r6;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: androidx.test.internal.runner.TestSize;

        $r2 = <androidx.test.internal.runner.TestSize: androidx.test.internal.runner.TestSize NONE>;

        $z0 = virtualinvoke $r2.<androidx.test.internal.runner.TestSize: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r6 = new androidx.test.internal.runner.TestRequestBuilder$SizeFilter;

        specialinvoke $r6.<androidx.test.internal.runner.TestRequestBuilder$SizeFilter: void <init>(androidx.test.internal.runner.TestSize)>(r1);

        virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder addFilter(org.junit.runner.manipulation.Filter)>($r6);

        goto label2;

     label1:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r1.<androidx.test.internal.runner.TestSize: java.lang.String getSizeQualifierName()>();

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unrecognized test size \'%s\'", $r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TestRequestBuilder", $r5);

     label2:
        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder ignoreSuiteMethods(boolean)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        boolean z0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        z0 := @parameter0: boolean;

        r0.<androidx.test.internal.runner.TestRequestBuilder: boolean ignoreSuiteMethods> = z0;

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder removeTestClass(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedClasses>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder removeTestMethod(java.lang.String, java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1, r2;
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter $r3;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter classMethodFilter>;

        virtualinvoke $r3.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: void removeMethod(java.lang.String,java.lang.String)>(r1, r2);

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder removeTestPackage(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedPackages>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder setClassLoader(java.lang.ClassLoader)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.ClassLoader r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<androidx.test.internal.runner.TestRequestBuilder: java.lang.ClassLoader classLoader> = r1;

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder setPerTestTimeout(long)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        long l0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        l0 := @parameter0: long;

        r0.<androidx.test.internal.runner.TestRequestBuilder: long perTestTimeout> = l0;

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder setSkipExecution(boolean)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        boolean z0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        z0 := @parameter0: boolean;

        r0.<androidx.test.internal.runner.TestRequestBuilder: boolean skipExecution> = z0;

        return r0;
    }

    public androidx.test.internal.runner.TestRequestBuilder setTestsRegExFilter(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1;
        androidx.test.internal.runner.filters.TestsRegExFilter $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.filters.TestsRegExFilter testsRegExFilter>;

        virtualinvoke $r2.<androidx.test.internal.runner.filters.TestsRegExFilter: void setPattern(java.lang.String)>(r1);

        return r0;
    }

    private java.lang.Class loadAnnotationClass(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String r1, $r4, $r7;
        java.lang.Throwable $r2, $r5, r9, r10;
        java.lang.Object[] $r3, $r6;
        java.lang.Class r8;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.lang.String;

     label1:
        r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        r9 = $r5;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not find annotation class: %s", $r6);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TestRequestBuilder", $r7);

        goto label5;

     label4:
        $r2 := @caughtexception;

        r10 = $r2;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Class %s is not an annotation", $r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TestRequestBuilder", $r4);

     label5:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    static volatile java.lang.String '-$$Nest$mgetDeviceCodeName'(androidx.test.internal.runner.TestRequestBuilder)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String $r1;

        r0 := @parameter0: androidx.test.internal.runner.TestRequestBuilder;

        $r1 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: java.lang.String getDeviceCodeName()>();

        return $r1;
    }

    static volatile java.lang.String '-$$Nest$mgetDeviceHardware'(androidx.test.internal.runner.TestRequestBuilder)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.lang.String $r1;

        r0 := @parameter0: androidx.test.internal.runner.TestRequestBuilder;

        $r1 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: java.lang.String getDeviceHardware()>();

        return $r1;
    }

    private java.lang.String getDeviceCodeName()
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuild $r1;
        java.lang.String $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        $r1 = r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$DeviceBuild deviceBuild>;

        $r2 = interfaceinvoke $r1.<androidx.test.internal.runner.TestRequestBuilder$DeviceBuild: java.lang.String getCodeName()>();

        return $r2;
    }

    private java.lang.String getDeviceHardware()
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuild $r1;
        java.lang.String $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        $r1 = r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$DeviceBuild deviceBuild>;

        $r2 = interfaceinvoke $r1.<androidx.test.internal.runner.TestRequestBuilder$DeviceBuild: java.lang.String getHardware()>();

        return $r2;
    }

    private java.util.Collection getClassNamesFromClassPath()
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        androidx.test.internal.runner.ClassPathScanner r1;
        androidx.test.internal.runner.ClassPathScanner$ChainedClassNameFilter r2, $r8;
        java.util.List $r3, $r5, $r7, $r10, $r25;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.lang.Object[] $r4;
        java.lang.String $r6, r27, r29;
        androidx.test.internal.runner.ClassPathScanner$ExternalClassNameFilter $r9;
        java.util.Set $r11, $r12, $r14, $r15, $r19, $r21, $r22;
        androidx.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter $r13;
        java.lang.Object $r16, $r20;
        androidx.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter $r17;
        androidx.test.internal.runner.ClassPathScanner$InclusivePackageNamesFilter $r18;
        java.lang.IllegalStateException $r23;
        java.lang.Throwable $r24, r30;
        java.util.Iterator r26, r28;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List pathsToScan>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("neither test class to execute or class paths were provided");

        throw $r23;

     label01:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List pathsToScan>;

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Scanning classpath to find tests in paths %s", $r4);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("TestRequestBuilder", $r6);

        $r7 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List pathsToScan>;

        r1 = virtualinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.ClassPathScanner createClassPathScanner(java.util.List)>($r7);

        $r8 = new androidx.test.internal.runner.ClassPathScanner$ChainedClassNameFilter;

        specialinvoke $r8.<androidx.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: void <init>()>();

        r2 = $r8;

        $r9 = new androidx.test.internal.runner.ClassPathScanner$ExternalClassNameFilter;

        specialinvoke $r9.<androidx.test.internal.runner.ClassPathScanner$ExternalClassNameFilter: void <init>()>();

        virtualinvoke r2.<androidx.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: void add(androidx.test.internal.runner.ClassPathScanner$ClassNameFilter)>($r9);

        $r10 = staticinvoke <androidx.test.internal.runner.ClassPathScanner: java.util.List getDefaultExcludedPackages()>();

        r26 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r20 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.String) $r20;

        $r21 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedPackages>;

        $z3 = interfaceinvoke $r21.<java.util.Set: boolean contains(java.lang.Object)>(r27);

        if $z3 != 0 goto label03;

        $r22 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedPackages>;

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>(r27);

     label03:
        goto label02;

     label04:
        $r11 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedPackages>;

        $z2 = interfaceinvoke $r11.<java.util.Set: boolean isEmpty()>();

        if $z2 != 0 goto label05;

        $r18 = new androidx.test.internal.runner.ClassPathScanner$InclusivePackageNamesFilter;

        $r19 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedPackages>;

        specialinvoke $r18.<androidx.test.internal.runner.ClassPathScanner$InclusivePackageNamesFilter: void <init>(java.util.Collection)>($r19);

        virtualinvoke r2.<androidx.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: void add(androidx.test.internal.runner.ClassPathScanner$ClassNameFilter)>($r18);

     label05:
        $r12 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedPackages>;

        r28 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label07;

        $r16 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (java.lang.String) $r16;

        $r17 = new androidx.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter;

        specialinvoke $r17.<androidx.test.internal.runner.ClassPathScanner$ExcludePackageNameFilter: void <init>(java.lang.String)>(r29);

        virtualinvoke r2.<androidx.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: void add(androidx.test.internal.runner.ClassPathScanner$ClassNameFilter)>($r17);

        goto label06;

     label07:
        $r13 = new androidx.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter;

        $r14 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedClasses>;

        specialinvoke $r13.<androidx.test.internal.runner.ClassPathScanner$ExcludeClassNamesFilter: void <init>(java.util.Set)>($r14);

        virtualinvoke r2.<androidx.test.internal.runner.ClassPathScanner$ChainedClassNameFilter: void add(androidx.test.internal.runner.ClassPathScanner$ClassNameFilter)>($r13);

     label08:
        $r15 = virtualinvoke r1.<androidx.test.internal.runner.ClassPathScanner: java.util.Set getClassPathEntries(androidx.test.internal.runner.ClassPathScanner$ClassNameFilter)>(r2);

     label09:
        return $r15;

     label10:
        $r24 := @caughtexception;

        r30 = $r24;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestRequestBuilder", "Failed to scan classes", r30);

        $r25 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r25;

        catch java.io.IOException from label08 to label09 with label10;
    }

    public org.junit.runner.Request build()
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        boolean z0, z1, $z4, $z5;
        androidx.test.internal.util.AndroidRunnerParams r1, r26;
        org.junit.runners.model.RunnerBuilder r2;
        androidx.test.internal.runner.TestLoader r3;
        java.util.List r4;
        org.junit.runners.Suite r5;
        org.junit.runner.Request r6;
        androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest r7, r27;
        java.lang.Throwable r8, $r24;
        java.util.Set $r9, $r10, $r11, $r12, $r13, $r14, $r20;
        long $l0;
        android.os.Bundle $r16;
        android.app.Instrumentation $r17;
        java.lang.ClassLoader $r18;
        java.lang.Object[] $r19;
        java.lang.String $r21;
        org.junit.runner.manipulation.Filter $r23;
        java.lang.Object r25;
        java.util.Collection r28;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>("build test request");

     label1:
        $r10 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedPackages>;

        $r9 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedPackages>;

        interfaceinvoke $r10.<java.util.Set: boolean removeAll(java.util.Collection)>($r9);

        $r12 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedClasses>;

        $r11 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedClasses>;

        interfaceinvoke $r12.<java.util.Set: boolean removeAll(java.util.Collection)>($r11);

        $r13 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedClasses>;

        specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: void validate(java.util.Set)>($r13);

        $r14 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedClasses>;

        z0 = interfaceinvoke $r14.<java.util.Set: boolean isEmpty()>();

        $z4 = r0.<androidx.test.internal.runner.TestRequestBuilder: boolean ignoreSuiteMethods>;

        if $z4 != 0 goto label2;

        if z0 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z1 = $z5;

        r26 = new androidx.test.internal.util.AndroidRunnerParams;

        $r17 = r0.<androidx.test.internal.runner.TestRequestBuilder: android.app.Instrumentation instr>;

        $r16 = r0.<androidx.test.internal.runner.TestRequestBuilder: android.os.Bundle argsBundle>;

        $l0 = r0.<androidx.test.internal.runner.TestRequestBuilder: long perTestTimeout>;

        specialinvoke r26.<androidx.test.internal.util.AndroidRunnerParams: void <init>(android.app.Instrumentation,android.os.Bundle,long,boolean)>($r17, $r16, $l0, z1);

        r1 = r26;

        r2 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: org.junit.runners.model.RunnerBuilder getRunnerBuilder(androidx.test.internal.util.AndroidRunnerParams)>(r1);

        $r18 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.lang.ClassLoader classLoader>;

        r3 = staticinvoke <androidx.test.internal.runner.TestLoader$Factory: androidx.test.internal.runner.TestLoader create(java.lang.ClassLoader,org.junit.runners.model.RunnerBuilder,boolean)>($r18, r2, z0);

        if z0 == 0 goto label5;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestRequestBuilder", "Using class path scanning to discover tests");

        r25 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Collection getClassNamesFromClassPath()>();

        goto label6;

     label5:
        $r19 = newarray (java.lang.Object)[1];

        $r20 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedClasses>;

        $r19[0] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Skipping class path scanning and directly running %s", $r19);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestRequestBuilder", $r21);

        r25 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedClasses>;

     label6:
        r28 = (java.util.Collection) r25;

        r4 = virtualinvoke r3.<androidx.test.internal.runner.TestLoader: java.util.List getRunnersFor(java.util.Collection)>(r28);

        r5 = staticinvoke <androidx.test.internal.runner.TestRequestBuilder$ExtendedSuite: org.junit.runners.Suite createSuite(java.util.List)>(r4);

        r6 = staticinvoke <org.junit.runner.Request: org.junit.runner.Request runner(org.junit.runner.Runner)>(r5);

        r27 = new androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest;

        $r23 = r0.<androidx.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter filter>;

        specialinvoke r27.<androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest: void <init>(org.junit.runner.Request,org.junit.runner.manipulation.Filter)>(r6, $r23);

        r7 = r27;

     label7:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        return r7;

     label8:
        $r24 := @caughtexception;

        r8 = $r24;

     label9:
        staticinvoke <androidx.tracing.Trace: void endSection()>();

        throw r8;

        catch java.lang.Throwable from label1 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    private org.junit.runners.model.RunnerBuilder getRunnerBuilder(androidx.test.internal.util.AndroidRunnerParams)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        androidx.test.internal.util.AndroidRunnerParams r1;
        boolean $z0;
        java.util.List $r3, $r5;
        java.lang.Object r6;
        androidx.test.internal.runner.AndroidLogOnlyBuilder r7;
        androidx.test.internal.runner.AndroidRunnerBuilder r8;
        org.junit.runners.model.RunnerBuilder r9;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: androidx.test.internal.util.AndroidRunnerParams;

        $z0 = r0.<androidx.test.internal.runner.TestRequestBuilder: boolean skipExecution>;

        if $z0 == 0 goto label1;

        r7 = new androidx.test.internal.runner.AndroidLogOnlyBuilder;

        $r5 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List customRunnerBuilderClasses>;

        specialinvoke r7.<androidx.test.internal.runner.AndroidLogOnlyBuilder: void <init>(androidx.test.internal.util.AndroidRunnerParams,java.util.List)>(r1, $r5);

        r6 = r7;

        goto label2;

     label1:
        r8 = new androidx.test.internal.runner.AndroidRunnerBuilder;

        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List customRunnerBuilderClasses>;

        specialinvoke r8.<androidx.test.internal.runner.AndroidRunnerBuilder: void <init>(androidx.test.internal.util.AndroidRunnerParams,java.util.List)>(r1, $r3);

        r6 = r8;

     label2:
        r9 = (org.junit.runners.model.RunnerBuilder) r6;

        return r9;
    }

    public void <init>(android.app.Instrumentation, android.os.Bundle)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        android.app.Instrumentation r1;
        android.os.Bundle r2;
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl $r3;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: android.app.Instrumentation;

        r2 := @parameter1: android.os.Bundle;

        $r3 = new androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        specialinvoke $r3.<androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl: void <init>(androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl-IA)>(null);

        specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: void <init>(androidx.test.internal.runner.TestRequestBuilder$DeviceBuild,android.app.Instrumentation,android.os.Bundle)>($r3, r1, r2);

        return;
    }

    void <init>(androidx.test.internal.runner.TestRequestBuilder$DeviceBuild, android.app.Instrumentation, android.os.Bundle)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuild r1, $r24;
        android.app.Instrumentation r2, $r26;
        android.os.Bundle r3, $r28;
        java.util.ArrayList $r4, $r22;
        java.util.HashSet $r5, $r6, $r7, $r8;
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter $r9, $r16;
        androidx.test.internal.runner.filters.TestsRegExFilter $r10, $r18;
        androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter $r11;
        androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter $r12;
        org.junit.runner.manipulation.Filter $r13, $r15, $r17, $r19, $r21;
        androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter $r14;
        androidx.test.internal.runner.TestRequestBuilder$CustomFilters $r20;
        java.lang.Object $r23, $r25, $r27;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: androidx.test.internal.runner.TestRequestBuilder$DeviceBuild;

        r2 := @parameter1: android.app.Instrumentation;

        r3 := @parameter2: android.os.Bundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List pathsToScan> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedPackages> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedPackages> = $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set includedClasses> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.Set excludedClasses> = $r8;

        $r9 = new androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        specialinvoke $r9.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: void <init>(androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter-IA)>(null);

        r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter classMethodFilter> = $r9;

        $r10 = new androidx.test.internal.runner.filters.TestsRegExFilter;

        specialinvoke $r10.<androidx.test.internal.runner.filters.TestsRegExFilter: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.filters.TestsRegExFilter testsRegExFilter> = $r10;

        $r11 = new androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        specialinvoke $r11.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: void <init>(java.lang.Class)>(class "Landroidx/test/filters/Suppress;");

        $r12 = new androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        specialinvoke $r12.<androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: void <init>(androidx.test.internal.runner.TestRequestBuilder,androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter-IA)>(r0, null);

        $r13 = virtualinvoke $r11.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r12);

        $r14 = new androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter;

        specialinvoke $r14.<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: void <init>(androidx.test.internal.runner.TestRequestBuilder)>(r0);

        $r15 = virtualinvoke $r13.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r14);

        $r16 = r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter classMethodFilter>;

        $r17 = virtualinvoke $r15.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r16);

        $r18 = r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.filters.TestsRegExFilter testsRegExFilter>;

        $r19 = virtualinvoke $r17.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r18);

        $r20 = new androidx.test.internal.runner.TestRequestBuilder$CustomFilters;

        specialinvoke $r20.<androidx.test.internal.runner.TestRequestBuilder$CustomFilters: void <init>(androidx.test.internal.runner.TestRequestBuilder$CustomFilters-IA)>(null);

        $r21 = virtualinvoke $r19.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r20);

        r0.<androidx.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter filter> = $r21;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List customRunnerBuilderClasses> = $r22;

        r0.<androidx.test.internal.runner.TestRequestBuilder: boolean skipExecution> = 0;

        r0.<androidx.test.internal.runner.TestRequestBuilder: long perTestTimeout> = 0L;

        r0.<androidx.test.internal.runner.TestRequestBuilder: boolean ignoreSuiteMethods> = 0;

        $r23 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r24 = (androidx.test.internal.runner.TestRequestBuilder$DeviceBuild) $r23;

        r0.<androidx.test.internal.runner.TestRequestBuilder: androidx.test.internal.runner.TestRequestBuilder$DeviceBuild deviceBuild> = $r24;

        $r25 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r26 = (android.app.Instrumentation) $r25;

        r0.<androidx.test.internal.runner.TestRequestBuilder: android.app.Instrumentation instr> = $r26;

        $r27 = staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r28 = (android.os.Bundle) $r27;

        r0.<androidx.test.internal.runner.TestRequestBuilder: android.os.Bundle argsBundle> = $r28;

        specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder: void maybeAddLegacySuppressFilter()>();

        return;
    }

    private void maybeAddLegacySuppressFilter()
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter $r1;
        org.junit.runner.manipulation.Filter $r2, $r3;
        java.lang.Throwable $r4, r6;
        java.lang.Class r5;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

     label1:
        r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.test.suitebuilder.annotation.Suppress");

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter filter>;

        $r1 = new androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        specialinvoke $r1.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: void <init>(java.lang.Class)>(r5);

        $r3 = virtualinvoke $r2.<org.junit.runner.manipulation.Filter: org.junit.runner.manipulation.Filter intersect(org.junit.runner.manipulation.Filter)>($r1);

        r0.<androidx.test.internal.runner.TestRequestBuilder: org.junit.runner.manipulation.Filter filter> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private void validate(java.util.Set)
    {
        androidx.test.internal.runner.TestRequestBuilder r0;
        java.util.Set r1;
        boolean $z0, $z1;
        java.util.List $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder;

        r1 := @parameter0: java.util.Set;

        $z0 = interfaceinvoke r1.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder: java.util.List pathsToScan>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must provide either classes to run, or paths to scan");

        throw $r3;

     label1:
        return;
    }

androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter
<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class annotationClass>
    public java.lang.String describe()
    {
        androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class annotationClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("not annotation %s", $r1);

        return $r4;
    }

    void <init>(java.lang.Class)
    {
        androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter r0;
        java.lang.Class r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<androidx.test.filters.AbstractFilter: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class annotationClass> = r1;

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter r0;
        org.junit.runner.Description r1;
        java.lang.Class r2, $r3, $r5;
        java.lang.'annotation'.Annotation $r4;
        boolean $z0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter;

        r1 := @parameter0: org.junit.runner.Description;

        r2 = virtualinvoke r1.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if r2 == null goto label1;

        $r5 = r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class annotationClass>;

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>($r5);

        if $z0 != 0 goto label2;

     label1:
        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: java.lang.Class annotationClass>;

        $r4 = virtualinvoke r1.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r3);

        if $r4 == null goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter
<androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class annotationClass>
    public java.lang.String describe()
    {
        androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r4;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class annotationClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("annotation %s", $r1);

        return $r4;
    }

    void <init>(java.lang.Class)
    {
        androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter r0;
        java.lang.Class r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<androidx.test.filters.AbstractFilter: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class annotationClass> = r1;

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter r0;
        org.junit.runner.Description r1;
        java.lang.Class r2, $r3, $r5;
        java.lang.'annotation'.Annotation $r4;
        boolean $z0, $z1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter;

        r1 := @parameter0: org.junit.runner.Description;

        r2 = virtualinvoke r1.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class annotationClass>;

        $r4 = virtualinvoke r1.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>($r3);

        if $r4 != null goto label1;

        if r2 == null goto label2;

        $r5 = r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationInclusionFilter: java.lang.Class annotationClass>;

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>($r5);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

androidx.test.internal.runner.TestRequestBuilder$BlankRunner-IA
androidx.test.internal.runner.TestRequestBuilder$BlankRunner
    public org.junit.runner.Description getDescription()
    {
        androidx.test.internal.runner.TestRequestBuilder$BlankRunner r0;
        java.lang.'annotation'.Annotation[] $r1;
        org.junit.runner.Description $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$BlankRunner;

        $r1 = newarray (java.lang.'annotation'.Annotation)[0];

        $r2 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createSuiteDescription(java.lang.String,java.lang.'annotation'.Annotation[])>("no tests found", $r1);

        return $r2;
    }

    private void <init>()
    {
        androidx.test.internal.runner.TestRequestBuilder$BlankRunner r0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$BlankRunner;

        specialinvoke r0.<org.junit.runner.Runner: void <init>()>();

        return;
    }

    void <init>(androidx.test.internal.runner.TestRequestBuilder$BlankRunner-IA)
    {
        androidx.test.internal.runner.TestRequestBuilder$BlankRunner r0;
        androidx.test.internal.runner.TestRequestBuilder$BlankRunner-IA r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$BlankRunner;

        r1 := @parameter0: androidx.test.internal.runner.TestRequestBuilder$BlankRunner-IA;

        specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder$BlankRunner: void <init>()>();

        return;
    }

    public void run(org.junit.runner.notification.RunNotifier)
    {
        androidx.test.internal.runner.TestRequestBuilder$BlankRunner r0;
        org.junit.runner.notification.RunNotifier r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$BlankRunner;

        r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        return;
    }

androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter-IA
androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter
<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map methodFilters>
    public java.lang.String describe()
    {
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        return "Class and method filter";
    }

    private void <init>()
    {
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;
        java.util.HashMap $r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        specialinvoke r0.<androidx.test.filters.AbstractFilter: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map methodFilters> = $r1;

        return;
    }

    void <init>(androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter-IA)
    {
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter-IA r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        r1 := @parameter0: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter-IA;

        specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: void <init>()>();

        return;
    }

    public void addMethod(java.lang.String, java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;
        java.lang.String r1, r2;
        java.util.Map $r3, $r6;
        java.lang.Object $r4;
        androidx.test.internal.runner.TestRequestBuilder$MethodFilter $r5, r8;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map methodFilters>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (androidx.test.internal.runner.TestRequestBuilder$MethodFilter) $r4;

        if r8 != null goto label1;

        $r5 = new androidx.test.internal.runner.TestRequestBuilder$MethodFilter;

        specialinvoke $r5.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: void <init>(java.lang.String)>(r1);

        r8 = $r5;

        $r6 = r0.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map methodFilters>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

     label1:
        virtualinvoke r8.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: void addInclusionMethod(java.lang.String)>(r2);

        return;
    }

    public void removeMethod(java.lang.String, java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;
        java.lang.String r1, r2;
        java.util.Map $r3, $r6;
        java.lang.Object $r4;
        androidx.test.internal.runner.TestRequestBuilder$MethodFilter $r5, r8;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map methodFilters>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (androidx.test.internal.runner.TestRequestBuilder$MethodFilter) $r4;

        if r8 != null goto label1;

        $r5 = new androidx.test.internal.runner.TestRequestBuilder$MethodFilter;

        specialinvoke $r5.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: void <init>(java.lang.String)>(r1);

        r8 = $r5;

        $r6 = r0.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map methodFilters>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

     label1:
        virtualinvoke r8.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: void addExclusionMethod(java.lang.String)>(r2);

        return;
    }

    public boolean evaluateTest(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter r0;
        org.junit.runner.Description r1;
        java.lang.String r2;
        androidx.test.internal.runner.TestRequestBuilder$MethodFilter r3;
        java.util.Map $r4, $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $r4 = r0.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map methodFilters>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r2 = virtualinvoke r1.<org.junit.runner.Description: java.lang.String getClassName()>();

        $r5 = r0.<androidx.test.internal.runner.TestRequestBuilder$ClassAndMethodFilter: java.util.Map methodFilters>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (androidx.test.internal.runner.TestRequestBuilder$MethodFilter) $r6;

        if r3 == null goto label2;

        $z1 = virtualinvoke r3.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: boolean shouldRun(org.junit.runner.Description)>(r1);

        return $z1;

     label2:
        return 1;
    }

androidx.test.internal.runner.TestRequestBuilder$CustomFilters-IA
androidx.test.internal.runner.TestRequestBuilder$CustomFilters
    public java.lang.String describe()
    {
        androidx.test.internal.runner.TestRequestBuilder$CustomFilters r0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$CustomFilters;

        return "skip tests annotated with custom filters if necessary";
    }

    private void <init>()
    {
        androidx.test.internal.runner.TestRequestBuilder$CustomFilters r0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$CustomFilters;

        specialinvoke r0.<androidx.test.filters.AbstractFilter: void <init>()>();

        return;
    }

    void <init>(androidx.test.internal.runner.TestRequestBuilder$CustomFilters-IA)
    {
        androidx.test.internal.runner.TestRequestBuilder$CustomFilters r0;
        androidx.test.internal.runner.TestRequestBuilder$CustomFilters-IA r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$CustomFilters;

        r1 := @parameter0: androidx.test.internal.runner.TestRequestBuilder$CustomFilters-IA;

        specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder$CustomFilters: void <init>()>();

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$CustomFilters r0;
        org.junit.runner.Description r1;
        java.util.Collection r2;
        java.util.Iterator r3;
        java.lang.'annotation'.Annotation r4, $r9;
        androidx.test.filters.CustomFilter r5;
        java.lang.Class r6, $r8;
        boolean $z0, $z1;
        java.lang.Object $r7, $r13;
        java.lang.Class[] $r10;
        java.lang.reflect.Constructor $r11;
        java.lang.Object[] $r12;
        androidx.test.filters.AbstractFilter $r14;
        java.lang.Throwable $r15, $r21, $r27, r33, r35, r37;
        java.lang.IllegalArgumentException $r16, $r22, $r28;
        java.lang.StringBuilder $r17, $r18, $r19, $r23, $r24, $r25, $r29, $r30, $r31;
        java.lang.String $r20, $r26, $r32, r34, r36, r38;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$CustomFilters;

        r1 := @parameter0: org.junit.runner.Description;

        r2 = virtualinvoke r1.<org.junit.runner.Description: java.util.Collection getAnnotations()>();

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.'annotation'.Annotation) $r7;

        $r8 = interfaceinvoke r4.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroidx/test/filters/CustomFilter;");

        r5 = (androidx.test.filters.CustomFilter) $r9;

        if r5 == null goto label8;

        r6 = interfaceinvoke r5.<androidx.test.filters.CustomFilter: java.lang.Class filterClass()>();

     label2:
        $r10 = newarray (java.lang.Class)[0];

        $r11 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r10);

        $r12 = newarray (java.lang.Object)[0];

        $r13 = virtualinvoke $r11.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r12);

        $r14 = (androidx.test.filters.AbstractFilter) $r13;

        $z1 = virtualinvoke $r14.<androidx.test.filters.AbstractFilter: boolean shouldRun(org.junit.runner.Description)>(r1);

        if $z1 != 0 goto label4;

     label3:
        return 0;

     label4:
        goto label8;

     label5:
        $r15 := @caughtexception;

        r33 = $r15;

        $r16 = new java.lang.IllegalArgumentException;

        r34 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must have no argument constructor for class ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r33);

        throw $r16;

     label6:
        $r21 := @caughtexception;

        r35 = $r21;

        $r22 = new java.lang.IllegalArgumentException;

        r36 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend androidx.test.filters.AbstractFilter");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r26, r35);

        throw $r22;

     label7:
        $r27 := @caughtexception;

        r37 = $r27;

        $r28 = new java.lang.IllegalArgumentException;

        r38 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r32, r37);

        throw $r28;

     label8:
        goto label1;

     label9:
        return 1;

        catch java.lang.NoSuchMethodException from label2 to label3 with label5;
        catch java.lang.ClassCastException from label2 to label3 with label6;
        catch java.lang.InstantiationException from label2 to label3 with label7;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label7;
        catch java.lang.IllegalAccessException from label2 to label3 with label7;
    }

androidx.test.internal.runner.TestRequestBuilder$DeviceBuild
<androidx.test.internal.runner.TestRequestBuilder$DeviceBuild: int getSdkVersionInt()>
<androidx.test.internal.runner.TestRequestBuilder$DeviceBuild: java.lang.String getCodeName()>
<androidx.test.internal.runner.TestRequestBuilder$DeviceBuild: java.lang.String getHardware()>
androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl-IA
androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl
    public int getSdkVersionInt()
    {
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl r0;
        int $i0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        return $i0;
    }

    public java.lang.String getCodeName()
    {
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl r0;
        java.lang.String $r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        $r1 = <android.os.Build$VERSION: java.lang.String CODENAME>;

        return $r1;
    }

    public java.lang.String getHardware()
    {
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl r0;
        java.lang.String $r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        $r1 = <android.os.Build: java.lang.String HARDWARE>;

        return $r1;
    }

    private void <init>()
    {
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl r0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl-IA)
    {
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl r0;
        androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl-IA r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl;

        r1 := @parameter0: androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl-IA;

        specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder$DeviceBuildImpl: void <init>()>();

        return;
    }

androidx.test.internal.runner.TestRequestBuilder$ExtendedSuite
    static org.junit.runners.Suite createSuite(java.util.List)
    {
        java.util.List r0;
        java.lang.Throwable r1, $r4, r15;
        java.lang.String r2, $r11;
        java.lang.Class $r6;
        java.lang.StringBuilder $r8, $r9, $r10, r13;
        androidx.test.internal.runner.TestRequestBuilder$ExtendedSuite r12;
        java.lang.RuntimeException r14;

        r0 := @parameter0: java.util.List;

     label1:
        r12 = new androidx.test.internal.runner.TestRequestBuilder$ExtendedSuite;

        specialinvoke r12.<androidx.test.internal.runner.TestRequestBuilder$ExtendedSuite: void <init>(java.util.List)>(r0);

     label2:
        return r12;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        r14 = new java.lang.RuntimeException;

        $r6 = class "Lorg/junit/runners/Suite;";

        r2 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal Error: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(Class<?>, List<Runner>) should never throw an InitializationError when passed a null Class");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r11, r1);

        r15 = (java.lang.Throwable) r14;

        throw r15;

        catch org.junit.runners.model.InitializationError from label1 to label2 with label3;
    }

    void <init>(java.util.List) throws org.junit.runners.model.InitializationError
    {
        androidx.test.internal.runner.TestRequestBuilder$ExtendedSuite r0;
        java.util.List r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ExtendedSuite;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.junit.runners.Suite: void <init>(java.lang.Class,java.util.List)>(null, r1);

        return;
    }

androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest
<androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.Request request>
<androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.manipulation.Filter filter>
    public org.junit.runner.Runner getRunner()
    {
        androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest r0;
        org.junit.runner.Request $r1;
        org.junit.runner.manipulation.Filter $r2;
        java.lang.Throwable $r3, r6;
        androidx.test.internal.runner.TestRequestBuilder$BlankRunner $r4;
        org.junit.runner.Runner r5;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest;

     label1:
        $r1 = r0.<androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.Request request>;

        r5 = virtualinvoke $r1.<org.junit.runner.Request: org.junit.runner.Runner getRunner()>();

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.manipulation.Filter filter>;

        virtualinvoke $r2.<org.junit.runner.manipulation.Filter: void apply(java.lang.Object)>(r5);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        r6 = $r3;

        $r4 = new androidx.test.internal.runner.TestRequestBuilder$BlankRunner;

        specialinvoke $r4.<androidx.test.internal.runner.TestRequestBuilder$BlankRunner: void <init>(androidx.test.internal.runner.TestRequestBuilder$BlankRunner-IA)>(null);

        return $r4;

        catch org.junit.runner.manipulation.NoTestsRemainException from label1 to label2 with label3;
    }

    public void <init>(org.junit.runner.Request, org.junit.runner.manipulation.Filter)
    {
        androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest r0;
        org.junit.runner.Request r1;
        org.junit.runner.manipulation.Filter r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest;

        r1 := @parameter0: org.junit.runner.Request;

        r2 := @parameter1: org.junit.runner.manipulation.Filter;

        specialinvoke r0.<org.junit.runner.Request: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.Request request> = r1;

        r0.<androidx.test.internal.runner.TestRequestBuilder$LenientFilterRequest: org.junit.runner.manipulation.Filter filter> = r2;

        return;
    }

androidx.test.internal.runner.TestRequestBuilder$MethodFilter
<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.lang.String className>
<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set includedMethods>
<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set excludedMethods>
    public java.lang.String describe()
    {
        androidx.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$MethodFilter;

        r1 = r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.lang.String className>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method filter for ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" class");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.String stripParameterizedSuffix(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        java.util.regex.Pattern r1;
        java.util.regex.Matcher $r2;
        boolean $z0;
        int $i0;
        java.lang.String r3;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$MethodFilter;

        r3 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".+(\\[[0-9]+\\])$");

        $r2 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(91);

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        return r3;
    }

    public void <init>(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        java.lang.String r1;
        java.util.HashSet $r2, $r3;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$MethodFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<androidx.test.filters.AbstractFilter: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set includedMethods> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set excludedMethods> = $r3;

        r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.lang.String className> = r1;

        return;
    }

    public void addExclusionMethod(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$MethodFilter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set excludedMethods>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addInclusionMethod(java.lang.String)
    {
        androidx.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        java.lang.String r1;
        java.util.Set $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$MethodFilter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set includedMethods>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean evaluateTest(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$MethodFilter r0;
        org.junit.runner.Description r1;
        java.lang.String r2, r3;
        java.util.Set $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$MethodFilter;

        r1 := @parameter0: org.junit.runner.Description;

        r2 = virtualinvoke r1.<org.junit.runner.Description: java.lang.String getMethodName()>();

        if r2 != null goto label1;

        return 0;

     label1:
        r3 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.lang.String stripParameterizedSuffix(java.lang.String)>(r2);

        $r4 = r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set excludedMethods>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        $r5 = r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set excludedMethods>;

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label3;

     label2:
        return 0;

     label3:
        $r6 = r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set includedMethods>;

        $z2 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        $r7 = r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set includedMethods>;

        $z3 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z3 != 0 goto label4;

        $r8 = r0.<androidx.test.internal.runner.TestRequestBuilder$MethodFilter: java.util.Set includedMethods>;

        $z4 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z4 != 0 goto label4;

        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("initializationError");

        if $z5 == 0 goto label5;

     label4:
        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        return $z6;
    }

androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter
<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: java.lang.String EMULATOR_HARDWARE_GOLDFISH>
<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: java.lang.String EMULATOR_HARDWARE_RANCHU>
<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: java.lang.String EMULATOR_HARDWARE_GCE>
<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: java.util.Set emulatorHardwareNames>
<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: androidx.test.internal.runner.TestRequestBuilder this$0>
    public java.lang.String describe()
    {
        androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("skip tests annotated with RequiresDevice if necessary", $r1);

        return $r2;
    }

    void <init>(androidx.test.internal.runner.TestRequestBuilder)
    {
        androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter r0;
        androidx.test.internal.runner.TestRequestBuilder r1;
        java.util.HashSet $r2;
        java.lang.String[] $r3;
        java.util.List $r4;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter;

        r1 := @parameter0: androidx.test.internal.runner.TestRequestBuilder;

        r0.<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: androidx.test.internal.runner.TestRequestBuilder this$0> = r1;

        specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: void <init>(java.lang.Class)>(class "Landroidx/test/filters/RequiresDevice;");

        $r2 = new java.util.HashSet;

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "goldfish";

        $r3[1] = "ranchu";

        $r3[2] = "gce_x86";

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r4);

        r0.<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: java.util.Set emulatorHardwareNames> = $r2;

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter r0;
        org.junit.runner.Description r1;
        boolean $z0, $z1, $z2;
        androidx.test.internal.runner.TestRequestBuilder $r2;
        java.util.Set $r3;
        java.lang.String $r4;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $z0 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder$AnnotationExclusionFilter: boolean evaluateTest(org.junit.runner.Description)>(r1);

        if $z0 != 0 goto label3;

        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: java.util.Set emulatorHardwareNames>;

        $r2 = r0.<androidx.test.internal.runner.TestRequestBuilder$RequiresDeviceFilter: androidx.test.internal.runner.TestRequestBuilder this$0>;

        $r4 = staticinvoke <androidx.test.internal.runner.TestRequestBuilder: java.lang.String '-$$Nest$mgetDeviceHardware'(androidx.test.internal.runner.TestRequestBuilder)>($r2);

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 1;
    }

androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter-IA
androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter
<androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: androidx.test.internal.runner.TestRequestBuilder this$0>
    private androidx.test.filters.SdkSuppress getAnnotationForTest(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        org.junit.runner.Description r1;
        androidx.test.filters.SdkSuppress r2, $r6;
        java.lang.Class r3;
        java.lang.'annotation'.Annotation $r4, $r5;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $r4 = virtualinvoke r1.<org.junit.runner.Description: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroidx/test/filters/SdkSuppress;");

        r2 = (androidx.test.filters.SdkSuppress) $r4;

        if r2 == null goto label1;

        return r2;

     label1:
        r3 = virtualinvoke r1.<org.junit.runner.Description: java.lang.Class getTestClass()>();

        if r3 == null goto label2;

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroidx/test/filters/SdkSuppress;");

        $r6 = (androidx.test.filters.SdkSuppress) $r5;

        return $r6;

     label2:
        return null;
    }

    public java.lang.String describe()
    {
        androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("skip tests annotated with SdkSuppress if necessary", $r1);

        return $r2;
    }

    private void <init>(androidx.test.internal.runner.TestRequestBuilder)
    {
        androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        androidx.test.internal.runner.TestRequestBuilder r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        r1 := @parameter0: androidx.test.internal.runner.TestRequestBuilder;

        r0.<androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: androidx.test.internal.runner.TestRequestBuilder this$0> = r1;

        specialinvoke r0.<androidx.test.filters.AbstractFilter: void <init>()>();

        return;
    }

    void <init>(androidx.test.internal.runner.TestRequestBuilder, androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter-IA)
    {
        androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        androidx.test.internal.runner.TestRequestBuilder r1;
        androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter-IA r2;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        r1 := @parameter0: androidx.test.internal.runner.TestRequestBuilder;

        r2 := @parameter1: androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter-IA;

        specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: void <init>(androidx.test.internal.runner.TestRequestBuilder)>(r1);

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter r0;
        org.junit.runner.Description r1;
        androidx.test.filters.SdkSuppress r2;
        androidx.test.internal.runner.TestRequestBuilder $r3, $r4, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter;

        r1 := @parameter0: org.junit.runner.Description;

        r2 = specialinvoke r0.<androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: androidx.test.filters.SdkSuppress getAnnotationForTest(org.junit.runner.Description)>(r1);

        if r2 == null goto label4;

        $r3 = r0.<androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: androidx.test.internal.runner.TestRequestBuilder this$0>;

        $i0 = staticinvoke <androidx.test.internal.runner.TestRequestBuilder: int '-$$Nest$mgetDeviceSdkInt'(androidx.test.internal.runner.TestRequestBuilder)>($r3);

        $i1 = interfaceinvoke r2.<androidx.test.filters.SdkSuppress: int minSdkVersion()>();

        if $i0 < $i1 goto label1;

        $r7 = r0.<androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: androidx.test.internal.runner.TestRequestBuilder this$0>;

        $i2 = staticinvoke <androidx.test.internal.runner.TestRequestBuilder: int '-$$Nest$mgetDeviceSdkInt'(androidx.test.internal.runner.TestRequestBuilder)>($r7);

        $i3 = interfaceinvoke r2.<androidx.test.filters.SdkSuppress: int maxSdkVersion()>();

        if $i2 <= $i3 goto label2;

     label1:
        $r4 = r0.<androidx.test.internal.runner.TestRequestBuilder$SdkSuppressFilter: androidx.test.internal.runner.TestRequestBuilder this$0>;

        $r5 = staticinvoke <androidx.test.internal.runner.TestRequestBuilder: java.lang.String '-$$Nest$mgetDeviceCodeName'(androidx.test.internal.runner.TestRequestBuilder)>($r4);

        $r6 = interfaceinvoke r2.<androidx.test.filters.SdkSuppress: java.lang.String codeName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        return 1;
    }

androidx.test.internal.runner.TestRequestBuilder$ShardingFilter
<androidx.test.internal.runner.TestRequestBuilder$ShardingFilter: int numShards>
<androidx.test.internal.runner.TestRequestBuilder$ShardingFilter: int shardIndex>
    public java.lang.String describe()
    {
        androidx.test.internal.runner.TestRequestBuilder$ShardingFilter r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Integer $r2, $r3;
        java.lang.String $r4;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ShardingFilter;

        $r1 = newarray (java.lang.Object)[2];

        $i0 = r0.<androidx.test.internal.runner.TestRequestBuilder$ShardingFilter: int shardIndex>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $i1 = r0.<androidx.test.internal.runner.TestRequestBuilder$ShardingFilter: int numShards>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Shard %s of %s shards", $r1);

        return $r4;
    }

    void <init>(int, int)
    {
        androidx.test.internal.runner.TestRequestBuilder$ShardingFilter r0;
        int i0, i1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ShardingFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.junit.runner.manipulation.Filter: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder$ShardingFilter: int numShards> = i0;

        r0.<androidx.test.internal.runner.TestRequestBuilder$ShardingFilter: int shardIndex> = i1;

        return;
    }

    public boolean shouldRun(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$ShardingFilter r0;
        org.junit.runner.Description r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$ShardingFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $z0 = virtualinvoke r1.<org.junit.runner.Description: boolean isTest()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r1.<org.junit.runner.Description: int hashCode()>();

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $i2 = r0.<androidx.test.internal.runner.TestRequestBuilder$ShardingFilter: int numShards>;

        $i4 = $i1 % $i2;

        $i3 = r0.<androidx.test.internal.runner.TestRequestBuilder$ShardingFilter: int shardIndex>;

        if $i4 != $i3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 1;
    }

androidx.test.internal.runner.TestRequestBuilder$SizeFilter
<androidx.test.internal.runner.TestRequestBuilder$SizeFilter: androidx.test.internal.runner.TestSize testSize>
    public java.lang.String describe()
    {
        androidx.test.internal.runner.TestRequestBuilder$SizeFilter r0;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$SizeFilter;

        return "";
    }

    void <init>(androidx.test.internal.runner.TestSize)
    {
        androidx.test.internal.runner.TestRequestBuilder$SizeFilter r0;
        androidx.test.internal.runner.TestSize r1;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$SizeFilter;

        r1 := @parameter0: androidx.test.internal.runner.TestSize;

        specialinvoke r0.<androidx.test.filters.AbstractFilter: void <init>()>();

        r0.<androidx.test.internal.runner.TestRequestBuilder$SizeFilter: androidx.test.internal.runner.TestSize testSize> = r1;

        return;
    }

    protected boolean evaluateTest(org.junit.runner.Description)
    {
        androidx.test.internal.runner.TestRequestBuilder$SizeFilter r0;
        org.junit.runner.Description r1;
        java.util.Iterator r2;
        java.lang.'annotation'.Annotation r3;
        androidx.test.internal.runner.TestSize $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r6;
        java.lang.Object $r7;
        java.lang.Class $r8;

        r0 := @this: androidx.test.internal.runner.TestRequestBuilder$SizeFilter;

        r1 := @parameter0: org.junit.runner.Description;

        $r4 = r0.<androidx.test.internal.runner.TestRequestBuilder$SizeFilter: androidx.test.internal.runner.TestSize testSize>;

        $z0 = virtualinvoke $r4.<androidx.test.internal.runner.TestSize: boolean testMethodIsAnnotatedWithTestSize(org.junit.runner.Description)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r5 = r0.<androidx.test.internal.runner.TestRequestBuilder$SizeFilter: androidx.test.internal.runner.TestSize testSize>;

        $z1 = virtualinvoke $r5.<androidx.test.internal.runner.TestSize: boolean testClassIsAnnotatedWithTestSize(org.junit.runner.Description)>(r1);

        if $z1 == 0 goto label5;

        $r6 = virtualinvoke r1.<org.junit.runner.Description: java.util.Collection getAnnotations()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.'annotation'.Annotation) $r7;

        $r8 = interfaceinvoke r3.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $z3 = staticinvoke <androidx.test.internal.runner.TestSize: boolean isAnyTestSize(java.lang.Class)>($r8);

        if $z3 == 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }

