androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker
<androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: java.util.Set mFuturesInProgress>
    public void <init>()
    {
        androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker r0;
        java.util.HashSet $r1;

        r0 := @this: androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: java.util.Set mFuturesInProgress> = $r1;

        return;
    }

    public void track(com.google.common.util.concurrent.SettableFuture)
    {
        androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker r0;
        com.google.common.util.concurrent.SettableFuture r1;
        java.util.Set r2, $r4, $r5;
        java.lang.Throwable r3, $r8;
        java.lang.Runnable $r6;
        java.util.concurrent.Executor $r7;

        r0 := @this: androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker;

        r1 := @parameter0: com.google.common.util.concurrent.SettableFuture;

        $r4 = r0.<androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: java.util.Set mFuturesInProgress>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: java.util.Set mFuturesInProgress>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker,com.google.common.util.concurrent.SettableFuture)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: void lambda$track$0(com.google.common.util.concurrent.SettableFuture)>, methodtype: void __METHODTYPE__());

        $r7 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();

        virtualinvoke r1.<com.google.common.util.concurrent.SettableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>($r6, $r7);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void cancelPendingFutures(java.lang.Throwable)
    {
        androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker r0;
        java.lang.Throwable r1, $r8, r10;
        java.util.HashSet r2, $r4;
        java.util.Set $r3, $r5, $r6, r9;
        boolean $z0;
        java.lang.Object $r7;
        java.util.Iterator r11;
        com.google.common.util.concurrent.SettableFuture r12;

        r0 := @this: androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker;

        r1 := @parameter0: java.lang.Throwable;

        $r3 = r0.<androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: java.util.Set mFuturesInProgress>;

        r9 = $r3;

        entermonitor $r3;

     label1:
        $r4 = new java.util.HashSet;

        $r5 = r0.<androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: java.util.Set mFuturesInProgress>;

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        r2 = $r4;

        $r6 = r0.<androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: java.util.Set mFuturesInProgress>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        exitmonitor r9;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

        exitmonitor r9;

     label4:
        throw r10;

     label5:
        r11 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.google.common.util.concurrent.SettableFuture) $r7;

        virtualinvoke r12.<com.google.common.util.concurrent.SettableFuture: boolean setException(java.lang.Throwable)>(r1);

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void lambda$track$0(com.google.common.util.concurrent.SettableFuture)
    {
        androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker r0;
        com.google.common.util.concurrent.SettableFuture r1;
        java.util.Set r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker;

        r1 := @parameter0: com.google.common.util.concurrent.SettableFuture;

        $r4 = r0.<androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: java.util.Set mFuturesInProgress>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<androidx.health.services.client.impl.ipc.internal.DefaultExecutionTracker: java.util.Set mFuturesInProgress>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

