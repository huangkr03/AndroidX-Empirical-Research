perfetto.protos.FtraceConfig
<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$Companion Companion>
<perfetto.protos.FtraceConfig: java.lang.Integer buffer_size_kb>
<perfetto.protos.FtraceConfig: java.lang.Integer drain_period_ms>
<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig compact_sched>
<perfetto.protos.FtraceConfig: java.lang.Boolean symbolize_ksyms>
<perfetto.protos.FtraceConfig: java.lang.Boolean initialize_ksyms_synchronously_for_testing>
<perfetto.protos.FtraceConfig: java.util.List ftrace_events>
<perfetto.protos.FtraceConfig: java.util.List atrace_categories>
<perfetto.protos.FtraceConfig: java.util.List atrace_apps>
<perfetto.protos.FtraceConfig: com.squareup.wire.ProtoAdapter ADAPTER>
<perfetto.protos.FtraceConfig: long serialVersionUID>
    public void <init>(java.util.List, java.util.List, java.util.List, java.lang.Integer, java.lang.Integer, perfetto.protos.FtraceConfig$CompactSchedConfig, java.lang.Boolean, java.lang.Boolean, okio.ByteString)
    {
        perfetto.protos.FtraceConfig r0;
        java.util.List r1, r2, r3, $r11, $r12, $r13;
        java.lang.Integer r4, r5;
        perfetto.protos.FtraceConfig$CompactSchedConfig r6;
        java.lang.Boolean r7, r8;
        okio.ByteString r9;
        com.squareup.wire.ProtoAdapter $r10;

        r0 := @this: perfetto.protos.FtraceConfig;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.lang.Integer;

        r5 := @parameter4: java.lang.Integer;

        r6 := @parameter5: perfetto.protos.FtraceConfig$CompactSchedConfig;

        r7 := @parameter6: java.lang.Boolean;

        r8 := @parameter7: java.lang.Boolean;

        r9 := @parameter8: okio.ByteString;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ftrace_events");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "atrace_categories");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "atrace_apps");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r9, "unknownFields");

        $r10 = <perfetto.protos.FtraceConfig: com.squareup.wire.ProtoAdapter ADAPTER>;

        specialinvoke r0.<com.squareup.wire.Message: void <init>(com.squareup.wire.ProtoAdapter,okio.ByteString)>($r10, r9);

        r0.<perfetto.protos.FtraceConfig: java.lang.Integer buffer_size_kb> = r4;

        r0.<perfetto.protos.FtraceConfig: java.lang.Integer drain_period_ms> = r5;

        r0.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig compact_sched> = r6;

        r0.<perfetto.protos.FtraceConfig: java.lang.Boolean symbolize_ksyms> = r7;

        r0.<perfetto.protos.FtraceConfig: java.lang.Boolean initialize_ksyms_synchronously_for_testing> = r8;

        $r11 = staticinvoke <com.squareup.wire.internal.Internal: java.util.List immutableCopyOf(java.lang.String,java.util.List)>("ftrace_events", r1);

        r0.<perfetto.protos.FtraceConfig: java.util.List ftrace_events> = $r11;

        $r12 = staticinvoke <com.squareup.wire.internal.Internal: java.util.List immutableCopyOf(java.lang.String,java.util.List)>("atrace_categories", r2);

        r0.<perfetto.protos.FtraceConfig: java.util.List atrace_categories> = $r12;

        $r13 = staticinvoke <com.squareup.wire.internal.Internal: java.util.List immutableCopyOf(java.lang.String,java.util.List)>("atrace_apps", r3);

        r0.<perfetto.protos.FtraceConfig: java.util.List atrace_apps> = $r13;

        return;
    }

    public void <init>(java.util.List, java.util.List, java.util.List, java.lang.Integer, java.lang.Integer, perfetto.protos.FtraceConfig$CompactSchedConfig, java.lang.Boolean, java.lang.Boolean, okio.ByteString, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        perfetto.protos.FtraceConfig r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        java.util.List r2, r3, r4;
        java.lang.Integer r5, r6;
        perfetto.protos.FtraceConfig$CompactSchedConfig r7;
        java.lang.Boolean r8, r9;
        okio.ByteString r10;

        r0 := @this: perfetto.protos.FtraceConfig;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: java.util.List;

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: java.lang.Integer;

        r6 := @parameter4: java.lang.Integer;

        r7 := @parameter5: perfetto.protos.FtraceConfig$CompactSchedConfig;

        r8 := @parameter6: java.lang.Boolean;

        r9 := @parameter7: java.lang.Boolean;

        r10 := @parameter8: okio.ByteString;

        i0 := @parameter9: int;

        r1 := @parameter10: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r3 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        r4 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>();

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        r5 = null;

     label4:
        $i5 = i0 & 16;

        if $i5 == 0 goto label5;

        r6 = null;

     label5:
        $i6 = i0 & 32;

        if $i6 == 0 goto label6;

        r7 = null;

     label6:
        $i7 = i0 & 64;

        if $i7 == 0 goto label7;

        r8 = null;

     label7:
        $i8 = i0 & 128;

        if $i8 == 0 goto label8;

        r9 = null;

     label8:
        $i9 = i0 & 256;

        if $i9 == 0 goto label9;

        r10 = <okio.ByteString: okio.ByteString EMPTY>;

     label9:
        specialinvoke r0.<perfetto.protos.FtraceConfig: void <init>(java.util.List,java.util.List,java.util.List,java.lang.Integer,java.lang.Integer,perfetto.protos.FtraceConfig$CompactSchedConfig,java.lang.Boolean,java.lang.Boolean,okio.ByteString)>(r2, r3, r4, r5, r6, r7, r8, r9, r10);

        return;
    }

    public final java.lang.Integer getBuffer_size_kb()
    {
        perfetto.protos.FtraceConfig r0;
        java.lang.Integer $r1;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer buffer_size_kb>;

        return $r1;
    }

    public final java.lang.Integer getDrain_period_ms()
    {
        perfetto.protos.FtraceConfig r0;
        java.lang.Integer $r1;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer drain_period_ms>;

        return $r1;
    }

    public final perfetto.protos.FtraceConfig$CompactSchedConfig getCompact_sched()
    {
        perfetto.protos.FtraceConfig r0;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r1;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = r0.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig compact_sched>;

        return $r1;
    }

    public final java.lang.Boolean getSymbolize_ksyms()
    {
        perfetto.protos.FtraceConfig r0;
        java.lang.Boolean $r1;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean symbolize_ksyms>;

        return $r1;
    }

    public final java.lang.Boolean getInitialize_ksyms_synchronously_for_testing()
    {
        perfetto.protos.FtraceConfig r0;
        java.lang.Boolean $r1;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean initialize_ksyms_synchronously_for_testing>;

        return $r1;
    }

    public final java.util.List getFtrace_events()
    {
        perfetto.protos.FtraceConfig r0;
        java.util.List $r1;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = r0.<perfetto.protos.FtraceConfig: java.util.List ftrace_events>;

        return $r1;
    }

    public final java.util.List getAtrace_categories()
    {
        perfetto.protos.FtraceConfig r0;
        java.util.List $r1;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_categories>;

        return $r1;
    }

    public final java.util.List getAtrace_apps()
    {
        perfetto.protos.FtraceConfig r0;
        java.util.List $r1;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_apps>;

        return $r1;
    }

    public java.lang.Void newBuilder()
    {
        perfetto.protos.FtraceConfig r0;
        java.lang.AssertionError $r1;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;
    }

    public boolean equals(java.lang.Object)
    {
        perfetto.protos.FtraceConfig r0, $r3, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        okio.ByteString $r2, $r4;
        java.util.List $r6, $r7, $r9, $r10, $r12, $r13;
        java.lang.Integer $r15, $r16, $r18, $r19;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r21, $r22;
        java.lang.Boolean $r24, $r25, $r27, $r28;

        r0 := @this: perfetto.protos.FtraceConfig;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof perfetto.protos.FtraceConfig;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        $r2 = virtualinvoke r0.<perfetto.protos.FtraceConfig: okio.ByteString unknownFields()>();

        $r3 = (perfetto.protos.FtraceConfig) r1;

        $r4 = virtualinvoke $r3.<perfetto.protos.FtraceConfig: okio.ByteString unknownFields()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z1 != 0 goto label03;

        return 0;

     label03:
        $r7 = r0.<perfetto.protos.FtraceConfig: java.util.List ftrace_events>;

        $r5 = (perfetto.protos.FtraceConfig) r1;

        $r6 = $r5.<perfetto.protos.FtraceConfig: java.util.List ftrace_events>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r6);

        if $z2 != 0 goto label04;

        return 0;

     label04:
        $r10 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_categories>;

        $r8 = (perfetto.protos.FtraceConfig) r1;

        $r9 = $r8.<perfetto.protos.FtraceConfig: java.util.List atrace_categories>;

        $z3 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z3 != 0 goto label05;

        return 0;

     label05:
        $r13 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_apps>;

        $r11 = (perfetto.protos.FtraceConfig) r1;

        $r12 = $r11.<perfetto.protos.FtraceConfig: java.util.List atrace_apps>;

        $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r13, $r12);

        if $z4 != 0 goto label06;

        return 0;

     label06:
        $r16 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer buffer_size_kb>;

        $r14 = (perfetto.protos.FtraceConfig) r1;

        $r15 = $r14.<perfetto.protos.FtraceConfig: java.lang.Integer buffer_size_kb>;

        $z5 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r16, $r15);

        if $z5 != 0 goto label07;

        return 0;

     label07:
        $r19 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer drain_period_ms>;

        $r17 = (perfetto.protos.FtraceConfig) r1;

        $r18 = $r17.<perfetto.protos.FtraceConfig: java.lang.Integer drain_period_ms>;

        $z6 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r19, $r18);

        if $z6 != 0 goto label08;

        return 0;

     label08:
        $r22 = r0.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig compact_sched>;

        $r20 = (perfetto.protos.FtraceConfig) r1;

        $r21 = $r20.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig compact_sched>;

        $z7 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r22, $r21);

        if $z7 != 0 goto label09;

        return 0;

     label09:
        $r25 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean symbolize_ksyms>;

        $r23 = (perfetto.protos.FtraceConfig) r1;

        $r24 = $r23.<perfetto.protos.FtraceConfig: java.lang.Boolean symbolize_ksyms>;

        $z8 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r25, $r24);

        if $z8 != 0 goto label10;

        return 0;

     label10:
        $r28 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean initialize_ksyms_synchronously_for_testing>;

        $r26 = (perfetto.protos.FtraceConfig) r1;

        $r27 = $r26.<perfetto.protos.FtraceConfig: java.lang.Boolean initialize_ksyms_synchronously_for_testing>;

        $z9 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r28, $r27);

        if $z9 != 0 goto label11;

        return 0;

     label11:
        return 1;
    }

    public int hashCode()
    {
        perfetto.protos.FtraceConfig r0;
        okio.ByteString $r1;
        java.util.List $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, $i16, i17, $i18, i19, $i20, i21, $i22, i23, $i24;
        java.lang.Integer $r5, $r6;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r7;
        java.lang.Boolean $r8, $r9;

        r0 := @this: perfetto.protos.FtraceConfig;

        i11 = r0.<perfetto.protos.FtraceConfig: int hashCode>;

        if i11 != 0 goto label11;

        $r1 = virtualinvoke r0.<perfetto.protos.FtraceConfig: okio.ByteString unknownFields()>();

        i12 = virtualinvoke $r1.<okio.ByteString: int hashCode()>();

        $i0 = i12 * 37;

        $r2 = r0.<perfetto.protos.FtraceConfig: java.util.List ftrace_events>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i13 = $i0 + $i1;

        $i2 = i13 * 37;

        $r3 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_categories>;

        $i3 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        i14 = $i2 + $i3;

        $i4 = i14 * 37;

        $r4 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_apps>;

        $i5 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        i15 = $i4 + $i5;

        $i6 = i15 * 37;

        $r5 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer buffer_size_kb>;

        if $r5 != null goto label01;

        $i16 = 0;

        goto label02;

     label01:
        $i16 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

     label02:
        i17 = $i6 + $i16;

        $i7 = i17 * 37;

        $r6 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer drain_period_ms>;

        if $r6 != null goto label03;

        $i18 = 0;

        goto label04;

     label03:
        $i18 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

     label04:
        i19 = $i7 + $i18;

        $i8 = i19 * 37;

        $r7 = r0.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig compact_sched>;

        if $r7 != null goto label05;

        $i20 = 0;

        goto label06;

     label05:
        $i20 = virtualinvoke $r7.<java.lang.Object: int hashCode()>();

     label06:
        i21 = $i8 + $i20;

        $i9 = i21 * 37;

        $r8 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean symbolize_ksyms>;

        if $r8 != null goto label07;

        $i22 = 0;

        goto label08;

     label07:
        $i22 = virtualinvoke $r8.<java.lang.Object: int hashCode()>();

     label08:
        i23 = $i9 + $i22;

        $i10 = i23 * 37;

        $r9 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean initialize_ksyms_synchronously_for_testing>;

        if $r9 != null goto label09;

        $i24 = 0;

        goto label10;

     label09:
        $i24 = virtualinvoke $r9.<java.lang.Object: int hashCode()>();

     label10:
        i11 = $i10 + $i24;

        r0.<perfetto.protos.FtraceConfig: int hashCode> = i11;

     label11:
        return i11;
    }

    public java.lang.String toString()
    {
        perfetto.protos.FtraceConfig r0;
        java.util.List r1, $r3, $r5, $r7, $r34, $r38, $r42;
        java.util.ArrayList $r2;
        java.util.Collection $r4, $r6, $r8, $r20, $r23, $r26, $r29, $r32, $r35, $r39, $r43;
        boolean $z0, $z1, $z2, $z11, $z12, $z13;
        java.lang.Integer $r9, $r10, $r28, $r31;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r11, $r25;
        java.lang.Boolean $r12, $r13, $r19, $r22;
        java.lang.CharSequence $r14, $r15, $r16;
        java.lang.Iterable $r17;
        java.lang.String $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r37, $r40, $r41, $r44, $r45;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.List) $r2;

        $r3 = r0.<perfetto.protos.FtraceConfig: java.util.List ftrace_events>;

        $r4 = (java.util.Collection) $r3;

        $z0 = interfaceinvoke $r4.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z11 = 1;

        goto label02;

     label01:
        $z11 = 0;

     label02:
        if $z11 == 0 goto label03;

        $r43 = (java.util.Collection) r1;

        $r42 = r0.<perfetto.protos.FtraceConfig: java.util.List ftrace_events>;

        $r44 = staticinvoke <com.squareup.wire.internal.Internal: java.lang.String sanitize(java.util.List)>($r42);

        $r45 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("ftrace_events=", $r44);

        interfaceinvoke $r43.<java.util.Collection: boolean add(java.lang.Object)>($r45);

     label03:
        $r5 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_categories>;

        $r6 = (java.util.Collection) $r5;

        $z1 = interfaceinvoke $r6.<java.util.Collection: boolean isEmpty()>();

        if $z1 != 0 goto label04;

        $z12 = 1;

        goto label05;

     label04:
        $z12 = 0;

     label05:
        if $z12 == 0 goto label06;

        $r39 = (java.util.Collection) r1;

        $r38 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_categories>;

        $r40 = staticinvoke <com.squareup.wire.internal.Internal: java.lang.String sanitize(java.util.List)>($r38);

        $r41 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("atrace_categories=", $r40);

        interfaceinvoke $r39.<java.util.Collection: boolean add(java.lang.Object)>($r41);

     label06:
        $r7 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_apps>;

        $r8 = (java.util.Collection) $r7;

        $z2 = interfaceinvoke $r8.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label07;

        $z13 = 1;

        goto label08;

     label07:
        $z13 = 0;

     label08:
        if $z13 == 0 goto label09;

        $r35 = (java.util.Collection) r1;

        $r34 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_apps>;

        $r36 = staticinvoke <com.squareup.wire.internal.Internal: java.lang.String sanitize(java.util.List)>($r34);

        $r37 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("atrace_apps=", $r36);

        interfaceinvoke $r35.<java.util.Collection: boolean add(java.lang.Object)>($r37);

     label09:
        $r9 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer buffer_size_kb>;

        if $r9 == null goto label10;

        $r32 = (java.util.Collection) r1;

        $r31 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer buffer_size_kb>;

        $r33 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("buffer_size_kb=", $r31);

        interfaceinvoke $r32.<java.util.Collection: boolean add(java.lang.Object)>($r33);

     label10:
        $r10 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer drain_period_ms>;

        if $r10 == null goto label11;

        $r29 = (java.util.Collection) r1;

        $r28 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer drain_period_ms>;

        $r30 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("drain_period_ms=", $r28);

        interfaceinvoke $r29.<java.util.Collection: boolean add(java.lang.Object)>($r30);

     label11:
        $r11 = r0.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig compact_sched>;

        if $r11 == null goto label12;

        $r26 = (java.util.Collection) r1;

        $r25 = r0.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig compact_sched>;

        $r27 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("compact_sched=", $r25);

        interfaceinvoke $r26.<java.util.Collection: boolean add(java.lang.Object)>($r27);

     label12:
        $r12 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean symbolize_ksyms>;

        if $r12 == null goto label13;

        $r23 = (java.util.Collection) r1;

        $r22 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean symbolize_ksyms>;

        $r24 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("symbolize_ksyms=", $r22);

        interfaceinvoke $r23.<java.util.Collection: boolean add(java.lang.Object)>($r24);

     label13:
        $r13 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean initialize_ksyms_synchronously_for_testing>;

        if $r13 == null goto label14;

        $r20 = (java.util.Collection) r1;

        $r19 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean initialize_ksyms_synchronously_for_testing>;

        $r21 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("initialize_ksyms_synchronously_for_testing=", $r19);

        interfaceinvoke $r20.<java.util.Collection: boolean add(java.lang.Object)>($r21);

     label14:
        $r17 = (java.lang.Iterable) r1;

        $r16 = (java.lang.CharSequence) ", ";

        $r15 = (java.lang.CharSequence) "FtraceConfig{";

        $r14 = (java.lang.CharSequence) "}";

        $r18 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r17, $r16, $r15, $r14, 0, null, null, 56, null);

        return $r18;
    }

    public final perfetto.protos.FtraceConfig copy(java.util.List, java.util.List, java.util.List, java.lang.Integer, java.lang.Integer, perfetto.protos.FtraceConfig$CompactSchedConfig, java.lang.Boolean, java.lang.Boolean, okio.ByteString)
    {
        perfetto.protos.FtraceConfig r0, $r10;
        java.util.List r1, r2, r3;
        java.lang.Integer r4, r5;
        perfetto.protos.FtraceConfig$CompactSchedConfig r6;
        java.lang.Boolean r7, r8;
        okio.ByteString r9;

        r0 := @this: perfetto.protos.FtraceConfig;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.lang.Integer;

        r5 := @parameter4: java.lang.Integer;

        r6 := @parameter5: perfetto.protos.FtraceConfig$CompactSchedConfig;

        r7 := @parameter6: java.lang.Boolean;

        r8 := @parameter7: java.lang.Boolean;

        r9 := @parameter8: okio.ByteString;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "ftrace_events");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "atrace_categories");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r3, "atrace_apps");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r9, "unknownFields");

        $r10 = new perfetto.protos.FtraceConfig;

        specialinvoke $r10.<perfetto.protos.FtraceConfig: void <init>(java.util.List,java.util.List,java.util.List,java.lang.Integer,java.lang.Integer,perfetto.protos.FtraceConfig$CompactSchedConfig,java.lang.Boolean,java.lang.Boolean,okio.ByteString)>(r1, r2, r3, r4, r5, r6, r7, r8, r9);

        return $r10;
    }

    public static perfetto.protos.FtraceConfig copy$default(perfetto.protos.FtraceConfig, java.util.List, java.util.List, java.util.List, java.lang.Integer, java.lang.Integer, perfetto.protos.FtraceConfig$CompactSchedConfig, java.lang.Boolean, java.lang.Boolean, okio.ByteString, int, java.lang.Object)
    {
        perfetto.protos.FtraceConfig r0, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object r1;
        java.util.List r3, r4, r5;
        java.lang.Integer r6, r7;
        perfetto.protos.FtraceConfig$CompactSchedConfig r8;
        java.lang.Boolean r9, r10;
        okio.ByteString r11;

        r0 := @parameter0: perfetto.protos.FtraceConfig;

        r3 := @parameter1: java.util.List;

        r4 := @parameter2: java.util.List;

        r5 := @parameter3: java.util.List;

        r6 := @parameter4: java.lang.Integer;

        r7 := @parameter5: java.lang.Integer;

        r8 := @parameter6: perfetto.protos.FtraceConfig$CompactSchedConfig;

        r9 := @parameter7: java.lang.Boolean;

        r10 := @parameter8: java.lang.Boolean;

        r11 := @parameter9: okio.ByteString;

        i0 := @parameter10: int;

        r1 := @parameter11: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<perfetto.protos.FtraceConfig: java.util.List ftrace_events>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r4 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_categories>;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        r5 = r0.<perfetto.protos.FtraceConfig: java.util.List atrace_apps>;

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        r6 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer buffer_size_kb>;

     label4:
        $i5 = i0 & 16;

        if $i5 == 0 goto label5;

        r7 = r0.<perfetto.protos.FtraceConfig: java.lang.Integer drain_period_ms>;

     label5:
        $i6 = i0 & 32;

        if $i6 == 0 goto label6;

        r8 = r0.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig compact_sched>;

     label6:
        $i7 = i0 & 64;

        if $i7 == 0 goto label7;

        r9 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean symbolize_ksyms>;

     label7:
        $i8 = i0 & 128;

        if $i8 == 0 goto label8;

        r10 = r0.<perfetto.protos.FtraceConfig: java.lang.Boolean initialize_ksyms_synchronously_for_testing>;

     label8:
        $i9 = i0 & 256;

        if $i9 == 0 goto label9;

        r11 = virtualinvoke r0.<perfetto.protos.FtraceConfig: okio.ByteString unknownFields()>();

     label9:
        $r2 = virtualinvoke r0.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig copy(java.util.List,java.util.List,java.util.List,java.lang.Integer,java.lang.Integer,perfetto.protos.FtraceConfig$CompactSchedConfig,java.lang.Boolean,java.lang.Boolean,okio.ByteString)>(r3, r4, r5, r6, r7, r8, r9, r10, r11);

        return $r2;
    }

    public void <init>()
    {
        perfetto.protos.FtraceConfig r0;

        r0 := @this: perfetto.protos.FtraceConfig;

        specialinvoke r0.<perfetto.protos.FtraceConfig: void <init>(java.util.List,java.util.List,java.util.List,java.lang.Integer,java.lang.Integer,perfetto.protos.FtraceConfig$CompactSchedConfig,java.lang.Boolean,java.lang.Boolean,okio.ByteString,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, null, null, null, null, null, null, null, null, 511, null);

        return;
    }

    public volatile com.squareup.wire.Message$Builder newBuilder()
    {
        perfetto.protos.FtraceConfig r0;
        java.lang.Void $r1;
        com.squareup.wire.Message$Builder $r2;

        r0 := @this: perfetto.protos.FtraceConfig;

        $r1 = virtualinvoke r0.<perfetto.protos.FtraceConfig: java.lang.Void newBuilder()>();

        $r2 = (com.squareup.wire.Message$Builder) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        com.squareup.wire.FieldEncoding r0;
        kotlin.reflect.KClass r1;
        com.squareup.wire.Syntax r2;
        perfetto.protos.FtraceConfig$Companion $r3;
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 $r4;
        com.squareup.wire.ProtoAdapter $r5;

        $r3 = new perfetto.protos.FtraceConfig$Companion;

        specialinvoke $r3.<perfetto.protos.FtraceConfig$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$Companion Companion> = $r3;

        r0 = <com.squareup.wire.FieldEncoding: com.squareup.wire.FieldEncoding LENGTH_DELIMITED>;

        r1 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Lperfetto/protos/FtraceConfig;");

        r2 = <com.squareup.wire.Syntax: com.squareup.wire.Syntax PROTO_2>;

        $r4 = new perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        specialinvoke $r4.<perfetto.protos.FtraceConfig$Companion$ADAPTER$1: void <init>(com.squareup.wire.FieldEncoding,kotlin.reflect.KClass,com.squareup.wire.Syntax)>(r0, r1, r2);

        $r5 = (com.squareup.wire.ProtoAdapter) $r4;

        <perfetto.protos.FtraceConfig: com.squareup.wire.ProtoAdapter ADAPTER> = $r5;

        return;
    }

perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1
    void <init>(com.squareup.wire.FieldEncoding, kotlin.reflect.KClass, com.squareup.wire.Syntax)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.FieldEncoding $r1;
        kotlin.reflect.KClass $r2;
        com.squareup.wire.Syntax $r3;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        $r1 := @parameter0: com.squareup.wire.FieldEncoding;

        $r2 := @parameter1: kotlin.reflect.KClass;

        $r3 := @parameter2: com.squareup.wire.Syntax;

        specialinvoke r0.<com.squareup.wire.ProtoAdapter: void <init>(com.squareup.wire.FieldEncoding,kotlin.reflect.KClass,java.lang.String,com.squareup.wire.Syntax,java.lang.Object)>($r1, $r2, "type.googleapis.com/perfetto.protos.FtraceConfig.CompactSchedConfig", $r3, null);

        return;
    }

    public int encodedSize(perfetto.protos.FtraceConfig$CompactSchedConfig)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 r0;
        perfetto.protos.FtraceConfig$CompactSchedConfig r1;
        okio.ByteString $r2;
        com.squareup.wire.ProtoAdapter $r3;
        java.lang.Boolean $r4;
        int $i0, i1, i2;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        r1 := @parameter0: perfetto.protos.FtraceConfig$CompactSchedConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = virtualinvoke r1.<perfetto.protos.FtraceConfig$CompactSchedConfig: okio.ByteString unknownFields()>();

        i1 = virtualinvoke $r2.<okio.ByteString: int size()>();

        $r3 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter BOOL>;

        $r4 = virtualinvoke r1.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean getEnabled()>();

        $i0 = virtualinvoke $r3.<com.squareup.wire.ProtoAdapter: int encodedSizeWithTag(int,java.lang.Object)>(1, $r4);

        i2 = i1 + $i0;

        return i2;
    }

    public void encode(com.squareup.wire.ProtoWriter, perfetto.protos.FtraceConfig$CompactSchedConfig)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.ProtoWriter r1;
        perfetto.protos.FtraceConfig$CompactSchedConfig r2;
        com.squareup.wire.ProtoAdapter $r3;
        java.lang.Boolean $r4;
        okio.ByteString $r5;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        r1 := @parameter0: com.squareup.wire.ProtoWriter;

        r2 := @parameter1: perfetto.protos.FtraceConfig$CompactSchedConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "writer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "value");

        $r3 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter BOOL>;

        $r4 = virtualinvoke r2.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean getEnabled()>();

        virtualinvoke $r3.<com.squareup.wire.ProtoAdapter: void encodeWithTag(com.squareup.wire.ProtoWriter,int,java.lang.Object)>(r1, 1, $r4);

        $r5 = virtualinvoke r2.<perfetto.protos.FtraceConfig$CompactSchedConfig: okio.ByteString unknownFields()>();

        virtualinvoke r1.<com.squareup.wire.ProtoWriter: void writeBytes(okio.ByteString)>($r5);

        return;
    }

    public perfetto.protos.FtraceConfig$CompactSchedConfig decode(com.squareup.wire.ProtoReader)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.ProtoReader r1, r3;
        okio.ByteString r2;
        long l0;
        int i1, i2;
        com.squareup.wire.ProtoAdapter $r4;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r5;
        java.lang.Boolean $r6;
        java.lang.Object r7;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        r1 := @parameter0: com.squareup.wire.ProtoReader;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reader");

        r7 = null;

        r3 = r1;

        l0 = virtualinvoke r3.<com.squareup.wire.ProtoReader: long beginMessage()>();

     label1:
        i1 = virtualinvoke r3.<com.squareup.wire.ProtoReader: int nextTag()>();

        if i1 != -1 goto label2;

        goto label5;

     label2:
        i2 = i1;

        if i2 != 1 goto label3;

        $r4 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter BOOL>;

        r7 = virtualinvoke $r4.<com.squareup.wire.ProtoAdapter: java.lang.Object decode(com.squareup.wire.ProtoReader)>(r1);

        goto label4;

     label3:
        virtualinvoke r1.<com.squareup.wire.ProtoReader: void readUnknownField(int)>(i2);

     label4:
        goto label1;

     label5:
        r2 = virtualinvoke r3.<com.squareup.wire.ProtoReader: okio.ByteString endMessageAndGetUnknownFields(long)>(l0);

        $r5 = new perfetto.protos.FtraceConfig$CompactSchedConfig;

        $r6 = (java.lang.Boolean) r7;

        specialinvoke $r5.<perfetto.protos.FtraceConfig$CompactSchedConfig: void <init>(java.lang.Boolean,okio.ByteString)>($r6, r2);

        return $r5;
    }

    public perfetto.protos.FtraceConfig$CompactSchedConfig redact(perfetto.protos.FtraceConfig$CompactSchedConfig)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 r0;
        perfetto.protos.FtraceConfig$CompactSchedConfig r1, $r3;
        okio.ByteString $r2;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        r1 := @parameter0: perfetto.protos.FtraceConfig$CompactSchedConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = <okio.ByteString: okio.ByteString EMPTY>;

        $r3 = staticinvoke <perfetto.protos.FtraceConfig$CompactSchedConfig: perfetto.protos.FtraceConfig$CompactSchedConfig copy$default(perfetto.protos.FtraceConfig$CompactSchedConfig,java.lang.Boolean,okio.ByteString,int,java.lang.Object)>(r1, null, $r2, 1, null);

        return $r3;
    }

    public volatile int encodedSize(java.lang.Object)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 r0;
        java.lang.Object r1;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r2;
        int $i0;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (perfetto.protos.FtraceConfig$CompactSchedConfig) r1;

        $i0 = virtualinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1: int encodedSize(perfetto.protos.FtraceConfig$CompactSchedConfig)>($r2);

        return $i0;
    }

    public volatile void encode(com.squareup.wire.ProtoWriter, java.lang.Object)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.ProtoWriter r1;
        java.lang.Object r2;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r3;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        r1 := @parameter0: com.squareup.wire.ProtoWriter;

        r2 := @parameter1: java.lang.Object;

        $r3 = (perfetto.protos.FtraceConfig$CompactSchedConfig) r2;

        virtualinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1: void encode(com.squareup.wire.ProtoWriter,perfetto.protos.FtraceConfig$CompactSchedConfig)>(r1, $r3);

        return;
    }

    public volatile java.lang.Object decode(com.squareup.wire.ProtoReader)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.ProtoReader r1;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r2;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        r1 := @parameter0: com.squareup.wire.ProtoReader;

        $r2 = virtualinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1: perfetto.protos.FtraceConfig$CompactSchedConfig decode(com.squareup.wire.ProtoReader)>(r1);

        return $r2;
    }

    public volatile java.lang.Object redact(java.lang.Object)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 r0;
        java.lang.Object r1;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r2, $r3;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (perfetto.protos.FtraceConfig$CompactSchedConfig) r1;

        $r3 = virtualinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1: perfetto.protos.FtraceConfig$CompactSchedConfig redact(perfetto.protos.FtraceConfig$CompactSchedConfig)>($r2);

        return $r3;
    }

perfetto.protos.FtraceConfig$CompactSchedConfig$Companion
    private void <init>()
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion r0;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig$Companion: void <init>()>();

        return;
    }

perfetto.protos.FtraceConfig$CompactSchedConfig
<perfetto.protos.FtraceConfig$CompactSchedConfig: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion Companion>
<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean enabled>
<perfetto.protos.FtraceConfig$CompactSchedConfig: com.squareup.wire.ProtoAdapter ADAPTER>
<perfetto.protos.FtraceConfig$CompactSchedConfig: long serialVersionUID>
    public void <init>(java.lang.Boolean, okio.ByteString)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0;
        java.lang.Boolean r1;
        okio.ByteString r2;
        com.squareup.wire.ProtoAdapter $r3;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        r1 := @parameter0: java.lang.Boolean;

        r2 := @parameter1: okio.ByteString;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "unknownFields");

        $r3 = <perfetto.protos.FtraceConfig$CompactSchedConfig: com.squareup.wire.ProtoAdapter ADAPTER>;

        specialinvoke r0.<com.squareup.wire.Message: void <init>(com.squareup.wire.ProtoAdapter,okio.ByteString)>($r3, r2);

        r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean enabled> = r1;

        return;
    }

    public void <init>(java.lang.Boolean, okio.ByteString, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        java.lang.Boolean r2;
        okio.ByteString r3;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        r2 := @parameter0: java.lang.Boolean;

        r3 := @parameter1: okio.ByteString;

        i0 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r2 = null;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r3 = <okio.ByteString: okio.ByteString EMPTY>;

     label2:
        specialinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: void <init>(java.lang.Boolean,okio.ByteString)>(r2, r3);

        return;
    }

    public final java.lang.Boolean getEnabled()
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0;
        java.lang.Boolean $r1;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        $r1 = r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean enabled>;

        return $r1;
    }

    public java.lang.Void newBuilder()
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0;
        java.lang.AssertionError $r1;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;
    }

    public boolean equals(java.lang.Object)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0, $r3, $r5;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        okio.ByteString $r2, $r4;
        java.lang.Boolean $r6, $r7;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof perfetto.protos.FtraceConfig$CompactSchedConfig;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: okio.ByteString unknownFields()>();

        $r3 = (perfetto.protos.FtraceConfig$CompactSchedConfig) r1;

        $r4 = virtualinvoke $r3.<perfetto.protos.FtraceConfig$CompactSchedConfig: okio.ByteString unknownFields()>();

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r4);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r7 = r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean enabled>;

        $r5 = (perfetto.protos.FtraceConfig$CompactSchedConfig) r1;

        $r6 = $r5.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean enabled>;

        $z2 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r6);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public int hashCode()
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0;
        okio.ByteString $r1;
        java.lang.Boolean $r2;
        int $i0, i1, i2, $i3;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        i1 = r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: int hashCode>;

        if i1 != 0 goto label3;

        $r1 = virtualinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: okio.ByteString unknownFields()>();

        i2 = virtualinvoke $r1.<okio.ByteString: int hashCode()>();

        $i0 = i2 * 37;

        $r2 = r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean enabled>;

        if $r2 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label2:
        i1 = $i0 + $i3;

        r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: int hashCode> = i1;

     label3:
        return i1;
    }

    public java.lang.String toString()
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0;
        java.util.List r1;
        java.util.ArrayList $r2;
        java.lang.Boolean $r3, $r9;
        java.lang.CharSequence $r4, $r5, $r6;
        java.lang.Iterable $r7;
        java.lang.String $r8, $r11;
        java.util.Collection $r10;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = (java.util.List) $r2;

        $r3 = r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean enabled>;

        if $r3 == null goto label1;

        $r10 = (java.util.Collection) r1;

        $r9 = r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean enabled>;

        $r11 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)>("enabled=", $r9);

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>($r11);

     label1:
        $r7 = (java.lang.Iterable) r1;

        $r6 = (java.lang.CharSequence) ", ";

        $r5 = (java.lang.CharSequence) "CompactSchedConfig{";

        $r4 = (java.lang.CharSequence) "}";

        $r8 = staticinvoke <kotlin.collections.CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r7, $r6, $r5, $r4, 0, null, null, 56, null);

        return $r8;
    }

    public final perfetto.protos.FtraceConfig$CompactSchedConfig copy(java.lang.Boolean, okio.ByteString)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0, $r3;
        java.lang.Boolean r1;
        okio.ByteString r2;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        r1 := @parameter0: java.lang.Boolean;

        r2 := @parameter1: okio.ByteString;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "unknownFields");

        $r3 = new perfetto.protos.FtraceConfig$CompactSchedConfig;

        specialinvoke $r3.<perfetto.protos.FtraceConfig$CompactSchedConfig: void <init>(java.lang.Boolean,okio.ByteString)>(r1, r2);

        return $r3;
    }

    public static perfetto.protos.FtraceConfig$CompactSchedConfig copy$default(perfetto.protos.FtraceConfig$CompactSchedConfig, java.lang.Boolean, okio.ByteString, int, java.lang.Object)
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0, $r2;
        int i0, $i1, $i2;
        java.lang.Object r1;
        java.lang.Boolean r3;
        okio.ByteString r4;

        r0 := @parameter0: perfetto.protos.FtraceConfig$CompactSchedConfig;

        r3 := @parameter1: java.lang.Boolean;

        r4 := @parameter2: okio.ByteString;

        i0 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        r3 = r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Boolean enabled>;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        r4 = virtualinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: okio.ByteString unknownFields()>();

     label2:
        $r2 = virtualinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: perfetto.protos.FtraceConfig$CompactSchedConfig copy(java.lang.Boolean,okio.ByteString)>(r3, r4);

        return $r2;
    }

    public void <init>()
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        specialinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: void <init>(java.lang.Boolean,okio.ByteString,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, null, 3, null);

        return;
    }

    public volatile com.squareup.wire.Message$Builder newBuilder()
    {
        perfetto.protos.FtraceConfig$CompactSchedConfig r0;
        java.lang.Void $r1;
        com.squareup.wire.Message$Builder $r2;

        r0 := @this: perfetto.protos.FtraceConfig$CompactSchedConfig;

        $r1 = virtualinvoke r0.<perfetto.protos.FtraceConfig$CompactSchedConfig: java.lang.Void newBuilder()>();

        $r2 = (com.squareup.wire.Message$Builder) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        com.squareup.wire.FieldEncoding r0;
        kotlin.reflect.KClass r1;
        com.squareup.wire.Syntax r2;
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion $r3;
        perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1 $r4;
        com.squareup.wire.ProtoAdapter $r5;

        $r3 = new perfetto.protos.FtraceConfig$CompactSchedConfig$Companion;

        specialinvoke $r3.<perfetto.protos.FtraceConfig$CompactSchedConfig$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <perfetto.protos.FtraceConfig$CompactSchedConfig: perfetto.protos.FtraceConfig$CompactSchedConfig$Companion Companion> = $r3;

        r0 = <com.squareup.wire.FieldEncoding: com.squareup.wire.FieldEncoding LENGTH_DELIMITED>;

        r1 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Lperfetto/protos/FtraceConfig$CompactSchedConfig;");

        r2 = <com.squareup.wire.Syntax: com.squareup.wire.Syntax PROTO_2>;

        $r4 = new perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1;

        specialinvoke $r4.<perfetto.protos.FtraceConfig$CompactSchedConfig$Companion$ADAPTER$1: void <init>(com.squareup.wire.FieldEncoding,kotlin.reflect.KClass,com.squareup.wire.Syntax)>(r0, r1, r2);

        $r5 = (com.squareup.wire.ProtoAdapter) $r4;

        <perfetto.protos.FtraceConfig$CompactSchedConfig: com.squareup.wire.ProtoAdapter ADAPTER> = $r5;

        return;
    }

perfetto.protos.FtraceConfig$Companion$ADAPTER$1
    void <init>(com.squareup.wire.FieldEncoding, kotlin.reflect.KClass, com.squareup.wire.Syntax)
    {
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.FieldEncoding $r1;
        kotlin.reflect.KClass $r2;
        com.squareup.wire.Syntax $r3;

        r0 := @this: perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        $r1 := @parameter0: com.squareup.wire.FieldEncoding;

        $r2 := @parameter1: kotlin.reflect.KClass;

        $r3 := @parameter2: com.squareup.wire.Syntax;

        specialinvoke r0.<com.squareup.wire.ProtoAdapter: void <init>(com.squareup.wire.FieldEncoding,kotlin.reflect.KClass,java.lang.String,com.squareup.wire.Syntax,java.lang.Object)>($r1, $r2, "type.googleapis.com/perfetto.protos.FtraceConfig", $r3, null);

        return;
    }

    public int encodedSize(perfetto.protos.FtraceConfig)
    {
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 r0;
        perfetto.protos.FtraceConfig r1;
        okio.ByteString $r2;
        com.squareup.wire.ProtoAdapter $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r14, $r16, $r18, $r20;
        java.util.List $r5, $r8, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        java.lang.Integer $r13, $r15;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r17;
        java.lang.Boolean $r19, $r21;

        r0 := @this: perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        r1 := @parameter0: perfetto.protos.FtraceConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r2 = virtualinvoke r1.<perfetto.protos.FtraceConfig: okio.ByteString unknownFields()>();

        i8 = virtualinvoke $r2.<okio.ByteString: int size()>();

        $r3 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter STRING>;

        $r4 = virtualinvoke $r3.<com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter asRepeated()>();

        $r5 = virtualinvoke r1.<perfetto.protos.FtraceConfig: java.util.List getFtrace_events()>();

        $i0 = virtualinvoke $r4.<com.squareup.wire.ProtoAdapter: int encodedSizeWithTag(int,java.lang.Object)>(1, $r5);

        i9 = i8 + $i0;

        $r6 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter STRING>;

        $r7 = virtualinvoke $r6.<com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter asRepeated()>();

        $r8 = virtualinvoke r1.<perfetto.protos.FtraceConfig: java.util.List getAtrace_categories()>();

        $i1 = virtualinvoke $r7.<com.squareup.wire.ProtoAdapter: int encodedSizeWithTag(int,java.lang.Object)>(2, $r8);

        i10 = i9 + $i1;

        $r9 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter STRING>;

        $r10 = virtualinvoke $r9.<com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter asRepeated()>();

        $r11 = virtualinvoke r1.<perfetto.protos.FtraceConfig: java.util.List getAtrace_apps()>();

        $i2 = virtualinvoke $r10.<com.squareup.wire.ProtoAdapter: int encodedSizeWithTag(int,java.lang.Object)>(3, $r11);

        i11 = i10 + $i2;

        $r12 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter UINT32>;

        $r13 = virtualinvoke r1.<perfetto.protos.FtraceConfig: java.lang.Integer getBuffer_size_kb()>();

        $i3 = virtualinvoke $r12.<com.squareup.wire.ProtoAdapter: int encodedSizeWithTag(int,java.lang.Object)>(10, $r13);

        i12 = i11 + $i3;

        $r14 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter UINT32>;

        $r15 = virtualinvoke r1.<perfetto.protos.FtraceConfig: java.lang.Integer getDrain_period_ms()>();

        $i4 = virtualinvoke $r14.<com.squareup.wire.ProtoAdapter: int encodedSizeWithTag(int,java.lang.Object)>(11, $r15);

        i13 = i12 + $i4;

        $r16 = <perfetto.protos.FtraceConfig$CompactSchedConfig: com.squareup.wire.ProtoAdapter ADAPTER>;

        $r17 = virtualinvoke r1.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig getCompact_sched()>();

        $i5 = virtualinvoke $r16.<com.squareup.wire.ProtoAdapter: int encodedSizeWithTag(int,java.lang.Object)>(12, $r17);

        i14 = i13 + $i5;

        $r18 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter BOOL>;

        $r19 = virtualinvoke r1.<perfetto.protos.FtraceConfig: java.lang.Boolean getSymbolize_ksyms()>();

        $i6 = virtualinvoke $r18.<com.squareup.wire.ProtoAdapter: int encodedSizeWithTag(int,java.lang.Object)>(13, $r19);

        i15 = i14 + $i6;

        $r20 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter BOOL>;

        $r21 = virtualinvoke r1.<perfetto.protos.FtraceConfig: java.lang.Boolean getInitialize_ksyms_synchronously_for_testing()>();

        $i7 = virtualinvoke $r20.<com.squareup.wire.ProtoAdapter: int encodedSizeWithTag(int,java.lang.Object)>(14, $r21);

        i16 = i15 + $i7;

        return i16;
    }

    public void encode(com.squareup.wire.ProtoWriter, perfetto.protos.FtraceConfig)
    {
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.ProtoWriter r1;
        perfetto.protos.FtraceConfig r2;
        com.squareup.wire.ProtoAdapter $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r14, $r16, $r18, $r20;
        java.util.List $r5, $r8, $r11;
        java.lang.Integer $r13, $r15;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r17;
        java.lang.Boolean $r19, $r21;
        okio.ByteString $r22;

        r0 := @this: perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        r1 := @parameter0: com.squareup.wire.ProtoWriter;

        r2 := @parameter1: perfetto.protos.FtraceConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "writer");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "value");

        $r3 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter STRING>;

        $r4 = virtualinvoke $r3.<com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter asRepeated()>();

        $r5 = virtualinvoke r2.<perfetto.protos.FtraceConfig: java.util.List getFtrace_events()>();

        virtualinvoke $r4.<com.squareup.wire.ProtoAdapter: void encodeWithTag(com.squareup.wire.ProtoWriter,int,java.lang.Object)>(r1, 1, $r5);

        $r6 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter STRING>;

        $r7 = virtualinvoke $r6.<com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter asRepeated()>();

        $r8 = virtualinvoke r2.<perfetto.protos.FtraceConfig: java.util.List getAtrace_categories()>();

        virtualinvoke $r7.<com.squareup.wire.ProtoAdapter: void encodeWithTag(com.squareup.wire.ProtoWriter,int,java.lang.Object)>(r1, 2, $r8);

        $r9 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter STRING>;

        $r10 = virtualinvoke $r9.<com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter asRepeated()>();

        $r11 = virtualinvoke r2.<perfetto.protos.FtraceConfig: java.util.List getAtrace_apps()>();

        virtualinvoke $r10.<com.squareup.wire.ProtoAdapter: void encodeWithTag(com.squareup.wire.ProtoWriter,int,java.lang.Object)>(r1, 3, $r11);

        $r12 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter UINT32>;

        $r13 = virtualinvoke r2.<perfetto.protos.FtraceConfig: java.lang.Integer getBuffer_size_kb()>();

        virtualinvoke $r12.<com.squareup.wire.ProtoAdapter: void encodeWithTag(com.squareup.wire.ProtoWriter,int,java.lang.Object)>(r1, 10, $r13);

        $r14 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter UINT32>;

        $r15 = virtualinvoke r2.<perfetto.protos.FtraceConfig: java.lang.Integer getDrain_period_ms()>();

        virtualinvoke $r14.<com.squareup.wire.ProtoAdapter: void encodeWithTag(com.squareup.wire.ProtoWriter,int,java.lang.Object)>(r1, 11, $r15);

        $r16 = <perfetto.protos.FtraceConfig$CompactSchedConfig: com.squareup.wire.ProtoAdapter ADAPTER>;

        $r17 = virtualinvoke r2.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig getCompact_sched()>();

        virtualinvoke $r16.<com.squareup.wire.ProtoAdapter: void encodeWithTag(com.squareup.wire.ProtoWriter,int,java.lang.Object)>(r1, 12, $r17);

        $r18 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter BOOL>;

        $r19 = virtualinvoke r2.<perfetto.protos.FtraceConfig: java.lang.Boolean getSymbolize_ksyms()>();

        virtualinvoke $r18.<com.squareup.wire.ProtoAdapter: void encodeWithTag(com.squareup.wire.ProtoWriter,int,java.lang.Object)>(r1, 13, $r19);

        $r20 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter BOOL>;

        $r21 = virtualinvoke r2.<perfetto.protos.FtraceConfig: java.lang.Boolean getInitialize_ksyms_synchronously_for_testing()>();

        virtualinvoke $r20.<com.squareup.wire.ProtoAdapter: void encodeWithTag(com.squareup.wire.ProtoWriter,int,java.lang.Object)>(r1, 14, $r21);

        $r22 = virtualinvoke r2.<perfetto.protos.FtraceConfig: okio.ByteString unknownFields()>();

        virtualinvoke r1.<com.squareup.wire.ProtoWriter: void writeBytes(okio.ByteString)>($r22);

        return;
    }

    public perfetto.protos.FtraceConfig decode(com.squareup.wire.ProtoReader)
    {
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.ProtoReader r1, r6;
        java.util.List r2, r3, r4;
        okio.ByteString r5;
        long l0;
        int i1, i2;
        java.util.ArrayList $r7, $r8, $r9;
        com.squareup.wire.ProtoAdapter $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r19;
        java.lang.Object $r16, $r18, $r20, r27, r28, r29, r30, r31;
        perfetto.protos.FtraceConfig $r21;
        java.lang.Boolean $r22, $r23;
        perfetto.protos.FtraceConfig$CompactSchedConfig $r24;
        java.lang.Integer $r25, $r26;

        r0 := @this: perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        r1 := @parameter0: com.squareup.wire.ProtoReader;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "reader");

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = (java.util.List) $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r3 = (java.util.List) $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r4 = (java.util.List) $r9;

        r27 = null;

        r28 = null;

        r29 = null;

        r30 = null;

        r31 = null;

        r6 = r1;

        l0 = virtualinvoke r6.<com.squareup.wire.ProtoReader: long beginMessage()>();

     label01:
        i1 = virtualinvoke r6.<com.squareup.wire.ProtoReader: int nextTag()>();

        if i1 != -1 goto label02;

        goto label13;

     label02:
        i2 = i1;

        tableswitch(i2)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label11;
            case 5: goto label11;
            case 6: goto label11;
            case 7: goto label11;
            case 8: goto label11;
            case 9: goto label11;
            case 10: goto label06;
            case 11: goto label07;
            case 12: goto label08;
            case 13: goto label09;
            case 14: goto label10;
            default: goto label11;
        };

     label03:
        $r19 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter STRING>;

        $r20 = virtualinvoke $r19.<com.squareup.wire.ProtoAdapter: java.lang.Object decode(com.squareup.wire.ProtoReader)>(r1);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label12;

     label04:
        $r17 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter STRING>;

        $r18 = virtualinvoke $r17.<com.squareup.wire.ProtoAdapter: java.lang.Object decode(com.squareup.wire.ProtoReader)>(r1);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r18);

        goto label12;

     label05:
        $r15 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter STRING>;

        $r16 = virtualinvoke $r15.<com.squareup.wire.ProtoAdapter: java.lang.Object decode(com.squareup.wire.ProtoReader)>(r1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label12;

     label06:
        $r14 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter UINT32>;

        r27 = virtualinvoke $r14.<com.squareup.wire.ProtoAdapter: java.lang.Object decode(com.squareup.wire.ProtoReader)>(r1);

        goto label12;

     label07:
        $r13 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter UINT32>;

        r28 = virtualinvoke $r13.<com.squareup.wire.ProtoAdapter: java.lang.Object decode(com.squareup.wire.ProtoReader)>(r1);

        goto label12;

     label08:
        $r12 = <perfetto.protos.FtraceConfig$CompactSchedConfig: com.squareup.wire.ProtoAdapter ADAPTER>;

        r29 = virtualinvoke $r12.<com.squareup.wire.ProtoAdapter: java.lang.Object decode(com.squareup.wire.ProtoReader)>(r1);

        goto label12;

     label09:
        $r11 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter BOOL>;

        r30 = virtualinvoke $r11.<com.squareup.wire.ProtoAdapter: java.lang.Object decode(com.squareup.wire.ProtoReader)>(r1);

        goto label12;

     label10:
        $r10 = <com.squareup.wire.ProtoAdapter: com.squareup.wire.ProtoAdapter BOOL>;

        r31 = virtualinvoke $r10.<com.squareup.wire.ProtoAdapter: java.lang.Object decode(com.squareup.wire.ProtoReader)>(r1);

        goto label12;

     label11:
        virtualinvoke r1.<com.squareup.wire.ProtoReader: void readUnknownField(int)>(i2);

     label12:
        goto label01;

     label13:
        r5 = virtualinvoke r6.<com.squareup.wire.ProtoReader: okio.ByteString endMessageAndGetUnknownFields(long)>(l0);

        $r21 = new perfetto.protos.FtraceConfig;

        $r26 = (java.lang.Integer) r27;

        $r25 = (java.lang.Integer) r28;

        $r24 = (perfetto.protos.FtraceConfig$CompactSchedConfig) r29;

        $r23 = (java.lang.Boolean) r30;

        $r22 = (java.lang.Boolean) r31;

        specialinvoke $r21.<perfetto.protos.FtraceConfig: void <init>(java.util.List,java.util.List,java.util.List,java.lang.Integer,java.lang.Integer,perfetto.protos.FtraceConfig$CompactSchedConfig,java.lang.Boolean,java.lang.Boolean,okio.ByteString)>(r2, r3, r4, $r26, $r25, $r24, $r23, $r22, r5);

        return $r21;
    }

    public perfetto.protos.FtraceConfig redact(perfetto.protos.FtraceConfig)
    {
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 r0;
        perfetto.protos.FtraceConfig r1, r5, $r10, $r11;
        perfetto.protos.FtraceConfig$CompactSchedConfig r2, r4, r6, $r7, $r12;
        com.squareup.wire.ProtoAdapter r3;
        java.lang.Object $r8;
        okio.ByteString $r9;

        r0 := @this: perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        r1 := @parameter0: perfetto.protos.FtraceConfig;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        $r11 = r1;

        $r7 = virtualinvoke r1.<perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig$CompactSchedConfig getCompact_sched()>();

        if $r7 != null goto label1;

        $r12 = null;

        goto label2;

     label1:
        r2 = $r7;

        r3 = <perfetto.protos.FtraceConfig$CompactSchedConfig: com.squareup.wire.ProtoAdapter ADAPTER>;

        r4 = r2;

        r5 = r1;

        $r8 = virtualinvoke r3.<com.squareup.wire.ProtoAdapter: java.lang.Object redact(java.lang.Object)>(r4);

        r6 = (perfetto.protos.FtraceConfig$CompactSchedConfig) $r8;

        $r11 = r5;

        $r12 = r6;

     label2:
        $r9 = <okio.ByteString: okio.ByteString EMPTY>;

        $r10 = staticinvoke <perfetto.protos.FtraceConfig: perfetto.protos.FtraceConfig copy$default(perfetto.protos.FtraceConfig,java.util.List,java.util.List,java.util.List,java.lang.Integer,java.lang.Integer,perfetto.protos.FtraceConfig$CompactSchedConfig,java.lang.Boolean,java.lang.Boolean,okio.ByteString,int,java.lang.Object)>($r11, null, null, null, null, null, $r12, null, null, $r9, 223, null);

        return $r10;
    }

    public volatile int encodedSize(java.lang.Object)
    {
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 r0;
        java.lang.Object r1;
        perfetto.protos.FtraceConfig $r2;
        int $i0;

        r0 := @this: perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (perfetto.protos.FtraceConfig) r1;

        $i0 = virtualinvoke r0.<perfetto.protos.FtraceConfig$Companion$ADAPTER$1: int encodedSize(perfetto.protos.FtraceConfig)>($r2);

        return $i0;
    }

    public volatile void encode(com.squareup.wire.ProtoWriter, java.lang.Object)
    {
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.ProtoWriter r1;
        java.lang.Object r2;
        perfetto.protos.FtraceConfig $r3;

        r0 := @this: perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        r1 := @parameter0: com.squareup.wire.ProtoWriter;

        r2 := @parameter1: java.lang.Object;

        $r3 = (perfetto.protos.FtraceConfig) r2;

        virtualinvoke r0.<perfetto.protos.FtraceConfig$Companion$ADAPTER$1: void encode(com.squareup.wire.ProtoWriter,perfetto.protos.FtraceConfig)>(r1, $r3);

        return;
    }

    public volatile java.lang.Object decode(com.squareup.wire.ProtoReader)
    {
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 r0;
        com.squareup.wire.ProtoReader r1;
        perfetto.protos.FtraceConfig $r2;

        r0 := @this: perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        r1 := @parameter0: com.squareup.wire.ProtoReader;

        $r2 = virtualinvoke r0.<perfetto.protos.FtraceConfig$Companion$ADAPTER$1: perfetto.protos.FtraceConfig decode(com.squareup.wire.ProtoReader)>(r1);

        return $r2;
    }

    public volatile java.lang.Object redact(java.lang.Object)
    {
        perfetto.protos.FtraceConfig$Companion$ADAPTER$1 r0;
        java.lang.Object r1;
        perfetto.protos.FtraceConfig $r2, $r3;

        r0 := @this: perfetto.protos.FtraceConfig$Companion$ADAPTER$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (perfetto.protos.FtraceConfig) r1;

        $r3 = virtualinvoke r0.<perfetto.protos.FtraceConfig$Companion$ADAPTER$1: perfetto.protos.FtraceConfig redact(perfetto.protos.FtraceConfig)>($r2);

        return $r3;
    }

perfetto.protos.FtraceConfig$Companion
    private void <init>()
    {
        perfetto.protos.FtraceConfig$Companion r0;

        r0 := @this: perfetto.protos.FtraceConfig$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        perfetto.protos.FtraceConfig$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: perfetto.protos.FtraceConfig$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<perfetto.protos.FtraceConfig$Companion: void <init>()>();

        return;
    }

