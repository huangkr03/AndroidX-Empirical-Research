androidx.camera.core.impl.utils.AspectRatioUtil
<androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_4_3>
<androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_3_4>
<androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_16_9>
<androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_9_16>
<androidx.camera.core.impl.utils.AspectRatioUtil: int ALIGN16>
    private void <init>()
    {
        androidx.camera.core.impl.utils.AspectRatioUtil r0;

        r0 := @this: androidx.camera.core.impl.utils.AspectRatioUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean hasMatchingAspectRatio(android.util.Size, android.util.Rational)
    {
        android.util.Size r0, $r3;
        android.util.Rational r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0, z1;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Rational;

        z1 = 0;

        if r1 != null goto label1;

        z1 = 0;

        goto label3;

     label1:
        $r2 = new android.util.Rational;

        $i0 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $i1 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        specialinvoke $r2.<android.util.Rational: void <init>(int,int)>($i0, $i1);

        $z0 = virtualinvoke r1.<android.util.Rational: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        $i2 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>(r0);

        $r3 = <androidx.camera.core.internal.utils.SizeUtil: android.util.Size RESOLUTION_VGA>;

        $i3 = staticinvoke <androidx.camera.core.internal.utils.SizeUtil: int getArea(android.util.Size)>($r3);

        if $i2 < $i3 goto label3;

        z1 = staticinvoke <androidx.camera.core.impl.utils.AspectRatioUtil: boolean isPossibleMod16FromAspectRatio(android.util.Size,android.util.Rational)>(r0, r1);

     label3:
        return z1;
    }

    private static boolean isPossibleMod16FromAspectRatio(android.util.Size, android.util.Rational)
    {
        android.util.Size r0;
        android.util.Rational r1, r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Rational;

        i0 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        i1 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $r3 = new android.util.Rational;

        $i2 = virtualinvoke r1.<android.util.Rational: int getDenominator()>();

        $i3 = virtualinvoke r1.<android.util.Rational: int getNumerator()>();

        specialinvoke $r3.<android.util.Rational: void <init>(int,int)>($i2, $i3);

        r2 = $r3;

        $i4 = i0 % 16;

        if $i4 != 0 goto label4;

        $i7 = i1 % 16;

        if $i7 != 0 goto label4;

        $i8 = i1 - 16;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i8);

        $z2 = staticinvoke <androidx.camera.core.impl.utils.AspectRatioUtil: boolean ratioIntersectsMod16Segment(int,int,android.util.Rational)>($i9, i0, r1);

        if $z2 != 0 goto label1;

        $i10 = i0 - 16;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i10);

        $z3 = staticinvoke <androidx.camera.core.impl.utils.AspectRatioUtil: boolean ratioIntersectsMod16Segment(int,int,android.util.Rational)>($i11, i1, r2);

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        $i5 = i0 % 16;

        if $i5 != 0 goto label5;

        $z1 = staticinvoke <androidx.camera.core.impl.utils.AspectRatioUtil: boolean ratioIntersectsMod16Segment(int,int,android.util.Rational)>(i1, i0, r1);

        return $z1;

     label5:
        $i6 = i1 % 16;

        if $i6 != 0 goto label6;

        $z0 = staticinvoke <androidx.camera.core.impl.utils.AspectRatioUtil: boolean ratioIntersectsMod16Segment(int,int,android.util.Rational)>(i0, i1, r2);

        return $z0;

     label6:
        return 0;
    }

    private static boolean ratioIntersectsMod16Segment(int, int, android.util.Rational)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        android.util.Rational r0;
        double d0, $d1, $d2, $d3, $d4;
        byte $b8, $b10;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.util.Rational;

        $i2 = i1 % 16;

        if $i2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean)>($z0);

        $i3 = virtualinvoke r0.<android.util.Rational: int getNumerator()>();

        $i4 = i0 * $i3;

        $d1 = (double) $i4;

        $i5 = virtualinvoke r0.<android.util.Rational: int getDenominator()>();

        $d2 = (double) $i5;

        d0 = $d1 / $d2;

        $i6 = i1 - 16;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i6);

        $d3 = (double) $i7;

        $b8 = d0 cmpl $d3;

        if $b8 <= 0 goto label3;

        $i9 = i1 + 16;

        $d4 = (double) $i9;

        $b10 = d0 cmpg $d4;

        if $b10 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    static void <clinit>()
    {
        android.util.Rational $r0, $r1, $r2, $r3;

        $r0 = new android.util.Rational;

        specialinvoke $r0.<android.util.Rational: void <init>(int,int)>(4, 3);

        <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_4_3> = $r0;

        $r1 = new android.util.Rational;

        specialinvoke $r1.<android.util.Rational: void <init>(int,int)>(3, 4);

        <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_3_4> = $r1;

        $r2 = new android.util.Rational;

        specialinvoke $r2.<android.util.Rational: void <init>(int,int)>(16, 9);

        <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_16_9> = $r2;

        $r3 = new android.util.Rational;

        specialinvoke $r3.<android.util.Rational: void <init>(int,int)>(9, 16);

        <androidx.camera.core.impl.utils.AspectRatioUtil: android.util.Rational ASPECT_RATIO_9_16> = $r3;

        return;
    }

androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio
<androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio: android.util.Rational mTargetRatio>
    public void <init>(android.util.Rational)
    {
        androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio r0;
        android.util.Rational r1;

        r0 := @this: androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio;

        r1 := @parameter0: android.util.Rational;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio: android.util.Rational mTargetRatio> = r1;

        return;
    }

    public int compare(android.util.Rational, android.util.Rational)
    {
        androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio r0;
        android.util.Rational r1, r2, $r5, $r6;
        java.lang.Float r3, r4;
        int i0;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;

        r0 := @this: androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio;

        r1 := @parameter0: android.util.Rational;

        r2 := @parameter1: android.util.Rational;

        $z0 = virtualinvoke r1.<android.util.Rational: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $f0 = virtualinvoke r1.<android.util.Rational: float floatValue()>();

        $r5 = r0.<androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio: android.util.Rational mTargetRatio>;

        $f1 = virtualinvoke $r5.<android.util.Rational: float floatValue()>();

        $f2 = $f0 - $f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        $f4 = virtualinvoke r2.<android.util.Rational: float floatValue()>();

        $r6 = r0.<androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio: android.util.Rational mTargetRatio>;

        $f5 = virtualinvoke $r6.<android.util.Rational: float floatValue()>();

        $f6 = $f4 - $f5;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f7);

        $f8 = virtualinvoke r3.<java.lang.Float: float floatValue()>();

        $f9 = virtualinvoke r4.<java.lang.Float: float floatValue()>();

        $f10 = $f8 - $f9;

        $f11 = staticinvoke <java.lang.Math: float signum(float)>($f10);

        i0 = (int) $f11;

        return i0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio r0;
        java.lang.Object r1, r2;
        android.util.Rational $r3, $r4;
        int $i0;

        r0 := @this: androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (android.util.Rational) r1;

        $r3 = (android.util.Rational) r2;

        $i0 = virtualinvoke r0.<androidx.camera.core.impl.utils.AspectRatioUtil$CompareAspectRatiosByDistanceToTargetRatio: int compare(android.util.Rational,android.util.Rational)>($r4, $r3);

        return $i0;
    }

