kotlinx.coroutines.LazyStandaloneCoroutine
<kotlinx.coroutines.LazyStandaloneCoroutine: kotlin.coroutines.Continuation continuation>
    public void <init>(kotlin.coroutines.CoroutineContext, kotlin.jvm.functions.Function2)
    {
        kotlinx.coroutines.LazyStandaloneCoroutine $r0;
        kotlin.jvm.functions.Function2 $r1;
        kotlin.coroutines.Continuation $r2;
        kotlin.coroutines.CoroutineContext $r3;

        $r0 := @this: kotlinx.coroutines.LazyStandaloneCoroutine;

        $r3 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "parentContext");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        specialinvoke $r0.<kotlinx.coroutines.StandaloneCoroutine: void <init>(kotlin.coroutines.CoroutineContext,boolean)>($r3, 0);

        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)>($r1, $r0, $r0);

        $r0.<kotlinx.coroutines.LazyStandaloneCoroutine: kotlin.coroutines.Continuation continuation> = $r2;

        return;
    }

    protected void onStart()
    {
        kotlinx.coroutines.LazyStandaloneCoroutine $r0;
        kotlin.coroutines.Continuation $r1;

        $r0 := @this: kotlinx.coroutines.LazyStandaloneCoroutine;

        $r1 = $r0.<kotlinx.coroutines.LazyStandaloneCoroutine: kotlin.coroutines.Continuation continuation>;

        staticinvoke <kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.coroutines.Continuation,kotlin.coroutines.Continuation)>($r1, $r0);

        return;
    }

