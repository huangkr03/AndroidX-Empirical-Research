androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot
<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot previousSnapshot>
<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: kotlin.jvm.functions.Function1 specifiedReadObserver>
<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: kotlin.jvm.functions.Function1 specifiedWriteObserver>
<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: boolean mergeParentObservers>
<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: boolean ownsPreviousSnapshot>
    public void <init>(androidx.compose.runtime.snapshots.MutableSnapshot, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, boolean, boolean)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.MutableSnapshot r1;
        kotlin.jvm.functions.Function1 r2, r3, $r14, $r15, $r18, $r19;
        boolean z0, z1;
        androidx.compose.runtime.snapshots.SnapshotIdSet$Companion $r4;
        java.util.concurrent.atomic.AtomicReference $r5, $r8;
        java.lang.Object $r6, $r9;
        androidx.compose.runtime.snapshots.GlobalSnapshot $r7, $r10;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r12;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.MutableSnapshot;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        r3 := @parameter2: kotlin.jvm.functions.Function1;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r4 = <androidx.compose.runtime.snapshots.SnapshotIdSet: androidx.compose.runtime.snapshots.SnapshotIdSet$Companion Companion>;

        $r12 = virtualinvoke $r4.<androidx.compose.runtime.snapshots.SnapshotIdSet$Companion: androidx.compose.runtime.snapshots.SnapshotIdSet getEMPTY()>();

        if r1 == null goto label1;

        $r14 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 getReadObserver$runtime_release()>();

        if $r14 != null goto label2;

     label1:
        $r5 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.concurrent.atomic.AtomicReference access$getCurrentGlobalSnapshot$p()>();

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r7 = (androidx.compose.runtime.snapshots.GlobalSnapshot) $r6;

        $r14 = virtualinvoke $r7.<androidx.compose.runtime.snapshots.GlobalSnapshot: kotlin.jvm.functions.Function1 getReadObserver$runtime_release()>();

     label2:
        $r15 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: kotlin.jvm.functions.Function1 access$mergedReadObserver(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,boolean)>(r2, $r14, z0);

        if r1 == null goto label3;

        $r18 = virtualinvoke r1.<androidx.compose.runtime.snapshots.MutableSnapshot: kotlin.jvm.functions.Function1 getWriteObserver$runtime_release()>();

        if $r18 != null goto label4;

     label3:
        $r8 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.concurrent.atomic.AtomicReference access$getCurrentGlobalSnapshot$p()>();

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r10 = (androidx.compose.runtime.snapshots.GlobalSnapshot) $r9;

        $r18 = virtualinvoke $r10.<androidx.compose.runtime.snapshots.GlobalSnapshot: kotlin.jvm.functions.Function1 getWriteObserver$runtime_release()>();

     label4:
        $r19 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: kotlin.jvm.functions.Function1 access$mergedWriteObserver(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>(r3, $r18);

        specialinvoke r0.<androidx.compose.runtime.snapshots.MutableSnapshot: void <init>(int,androidx.compose.runtime.snapshots.SnapshotIdSet,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>(0, $r12, $r15, $r19);

        r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot previousSnapshot> = r1;

        r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: kotlin.jvm.functions.Function1 specifiedReadObserver> = r2;

        r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: kotlin.jvm.functions.Function1 specifiedWriteObserver> = r3;

        r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: boolean mergeParentObservers> = z0;

        r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: boolean ownsPreviousSnapshot> = z1;

        return;
    }

    public final kotlin.jvm.functions.Function1 getSpecifiedReadObserver$runtime_release()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: kotlin.jvm.functions.Function1 specifiedReadObserver>;

        return $r1;
    }

    public final kotlin.jvm.functions.Function1 getSpecifiedWriteObserver$runtime_release()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r1 = r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: kotlin.jvm.functions.Function1 specifiedWriteObserver>;

        return $r1;
    }

    private final androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        androidx.compose.runtime.snapshots.MutableSnapshot $r3;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r3 = r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot previousSnapshot>;

        if $r3 != null goto label1;

        $r1 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: java.util.concurrent.atomic.AtomicReference access$getCurrentGlobalSnapshot$p()>();

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "currentGlobalSnapshot.get()");

        $r3 = (androidx.compose.runtime.snapshots.MutableSnapshot) $r2;

     label1:
        return $r3;
    }

    public void dispose()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        boolean $z0;
        androidx.compose.runtime.snapshots.MutableSnapshot $r1;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: void setDisposed$runtime_release(boolean)>(1);

        $z0 = r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: boolean ownsPreviousSnapshot>;

        if $z0 == 0 goto label1;

        $r1 = r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot previousSnapshot>;

        if $r1 == null goto label1;

        virtualinvoke $r1.<androidx.compose.runtime.snapshots.MutableSnapshot: void dispose()>();

        goto label1;

     label1:
        return;
    }

    public int getId()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.MutableSnapshot $r1;
        int $i0;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r1 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        $i0 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.MutableSnapshot: int getId()>();

        return $i0;
    }

    public void setId$runtime_release(int)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        int i0;
        kotlin.KotlinNothingValueException $r2;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        i0 := @parameter0: int;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateMapKt: java.lang.Void unsupported()>();

        $r2 = new kotlin.KotlinNothingValueException;

        specialinvoke $r2.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r2;
    }

    public androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.MutableSnapshot $r1;
        androidx.compose.runtime.snapshots.SnapshotIdSet $r2;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r1 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotIdSet getInvalid$runtime_release()>();

        return $r2;
    }

    public void setInvalid$runtime_release(androidx.compose.runtime.snapshots.SnapshotIdSet)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.SnapshotIdSet r1;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.SnapshotIdSet;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "value");

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateMapKt: java.lang.Void unsupported()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public boolean hasPendingChanges()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.MutableSnapshot $r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r1 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean hasPendingChanges()>();

        return $z0;
    }

    public java.util.Set getModified$runtime_release()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.MutableSnapshot $r1;
        java.util.Set $r2;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r1 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.MutableSnapshot: java.util.Set getModified$runtime_release()>();

        return $r2;
    }

    public void setModified(java.util.Set)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        java.util.Set r1;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: java.util.Set;

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateMapKt: java.lang.Void unsupported()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public boolean getReadOnly()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.MutableSnapshot $r1;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r1 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        $z0 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.MutableSnapshot: boolean getReadOnly()>();

        return $z0;
    }

    public androidx.compose.runtime.snapshots.SnapshotApplyResult apply()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.MutableSnapshot $r1;
        androidx.compose.runtime.snapshots.SnapshotApplyResult $r2;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r1 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        $r2 = virtualinvoke $r1.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.SnapshotApplyResult apply()>();

        return $r2;
    }

    public void recordModified$runtime_release(androidx.compose.runtime.snapshots.StateObject)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.StateObject r1;
        androidx.compose.runtime.snapshots.MutableSnapshot $r2;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.StateObject;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "state");

        $r2 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        virtualinvoke $r2.<androidx.compose.runtime.snapshots.MutableSnapshot: void recordModified$runtime_release(androidx.compose.runtime.snapshots.StateObject)>(r1);

        return;
    }

    public androidx.compose.runtime.snapshots.Snapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        kotlin.jvm.functions.Function1 r1, r2, $r3;
        boolean $z0;
        androidx.compose.runtime.snapshots.MutableSnapshot $r4, $r5;
        androidx.compose.runtime.snapshots.Snapshot $r6, $r7;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r3 = virtualinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: kotlin.jvm.functions.Function1 getReadObserver$runtime_release()>();

        r2 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: kotlin.jvm.functions.Function1 mergedReadObserver$default(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,boolean,int,java.lang.Object)>(r1, $r3, 0, 4, null);

        $z0 = r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: boolean mergeParentObservers>;

        if $z0 != 0 goto label1;

        $r5 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        $r6 = virtualinvoke $r5.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.Snapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)>(null);

        $r7 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: androidx.compose.runtime.snapshots.Snapshot access$createTransparentSnapshotWithNoParentReadObserver(androidx.compose.runtime.snapshots.Snapshot,kotlin.jvm.functions.Function1,boolean)>($r6, r2, 1);

        goto label2;

     label1:
        $r4 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        $r7 = virtualinvoke $r4.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.Snapshot takeNestedSnapshot(kotlin.jvm.functions.Function1)>(r2);

     label2:
        return $r7;
    }

    public androidx.compose.runtime.snapshots.MutableSnapshot takeNestedMutableSnapshot(kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0, $r10;
        kotlin.jvm.functions.Function1 r1, r2, r3, r4, $r6, $r7;
        androidx.compose.runtime.snapshots.MutableSnapshot r5, $r8, $r9, $r11;
        boolean $z0;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        r2 := @parameter1: kotlin.jvm.functions.Function1;

        $r6 = virtualinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: kotlin.jvm.functions.Function1 getReadObserver$runtime_release()>();

        r3 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: kotlin.jvm.functions.Function1 mergedReadObserver$default(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,boolean,int,java.lang.Object)>(r1, $r6, 0, 4, null);

        $r7 = virtualinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: kotlin.jvm.functions.Function1 getWriteObserver$runtime_release()>();

        r4 = staticinvoke <androidx.compose.runtime.snapshots.SnapshotKt: kotlin.jvm.functions.Function1 access$mergedWriteObserver(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>(r2, $r7);

        $z0 = r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: boolean mergeParentObservers>;

        if $z0 != 0 goto label1;

        $r9 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        r5 = virtualinvoke $r9.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot takeNestedMutableSnapshot(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>(null, r4);

        $r10 = new androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        specialinvoke $r10.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: void <init>(androidx.compose.runtime.snapshots.MutableSnapshot,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,boolean,boolean)>(r5, r3, r4, 0, 1);

        $r11 = (androidx.compose.runtime.snapshots.MutableSnapshot) $r10;

        goto label2;

     label1:
        $r8 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        $r11 = virtualinvoke $r8.<androidx.compose.runtime.snapshots.MutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot takeNestedMutableSnapshot(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1)>(r3, r4);

     label2:
        return $r11;
    }

    public void notifyObjectsInitialized$runtime_release()
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.MutableSnapshot $r1;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        $r1 = specialinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: androidx.compose.runtime.snapshots.MutableSnapshot getCurrentSnapshot()>();

        virtualinvoke $r1.<androidx.compose.runtime.snapshots.MutableSnapshot: void notifyObjectsInitialized$runtime_release()>();

        return;
    }

    public java.lang.Void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "snapshot");

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateMapKt: java.lang.Void unsupported()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public java.lang.Void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;
        kotlin.KotlinNothingValueException $r3;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "snapshot");

        staticinvoke <androidx.compose.runtime.snapshots.SnapshotStateMapKt: java.lang.Void unsupported()>();

        $r3 = new kotlin.KotlinNothingValueException;

        specialinvoke $r3.<kotlin.KotlinNothingValueException: void <init>()>();

        throw $r3;
    }

    public volatile void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: java.lang.Void nestedActivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>(r1);

        return;
    }

    public volatile void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)
    {
        androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot r0;
        androidx.compose.runtime.snapshots.Snapshot r1;

        r0 := @this: androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot;

        r1 := @parameter0: androidx.compose.runtime.snapshots.Snapshot;

        virtualinvoke r0.<androidx.compose.runtime.snapshots.TransparentObserverMutableSnapshot: java.lang.Void nestedDeactivated$runtime_release(androidx.compose.runtime.snapshots.Snapshot)>(r1);

        return;
    }

