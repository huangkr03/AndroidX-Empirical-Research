com.google.common.io.BaseEncoding
<com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE16>
<com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE32>
<com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE32_HEX>
<com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE64>
<com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE64_URL>
    static void <clinit>()
    {
        java.lang.Character $r0;
        com.google.common.io.BaseEncoding$Base64Encoding $r1;
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r2;
        com.google.common.io.BaseEncoding$Base16Encoding $r3;

        $r1 = new com.google.common.io.BaseEncoding$Base64Encoding;

        $r0 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(61);

        specialinvoke $r1.<com.google.common.io.BaseEncoding$Base64Encoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base64()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", $r0);

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE64> = $r1;

        $r1 = new com.google.common.io.BaseEncoding$Base64Encoding;

        specialinvoke $r1.<com.google.common.io.BaseEncoding$Base64Encoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base64Url()", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", $r0);

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE64_URL> = $r1;

        $r2 = new com.google.common.io.BaseEncoding$StandardBaseEncoding;

        specialinvoke $r2.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base32()", "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", $r0);

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE32> = $r2;

        $r2 = new com.google.common.io.BaseEncoding$StandardBaseEncoding;

        specialinvoke $r2.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(java.lang.String,java.lang.String,java.lang.Character)>("base32Hex()", "0123456789ABCDEFGHIJKLMNOPQRSTUV", $r0);

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE32_HEX> = $r2;

        $r3 = new com.google.common.io.BaseEncoding$Base16Encoding;

        specialinvoke $r3.<com.google.common.io.BaseEncoding$Base16Encoding: void <init>(java.lang.String,java.lang.String)>("base16()", "0123456789ABCDEF");

        <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE16> = $r3;

        return;
    }

    void <init>()
    {
        com.google.common.io.BaseEncoding $r0;

        $r0 := @this: com.google.common.io.BaseEncoding;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.io.BaseEncoding base64()
    {
        com.google.common.io.BaseEncoding r0;

        r0 = <com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding BASE64>;

        return r0;
    }

    private static byte[] extract(byte[], int)
    {
        byte[] $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        if $i0 != $i1 goto label1;

        return $r0;

     label1:
        $r1 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }

    public final byte[] decode(java.lang.CharSequence)
    {
        com.google.common.io.BaseEncoding $r0;
        byte[] $r1;
        java.lang.CharSequence $r2;

        $r0 := @this: com.google.common.io.BaseEncoding;

        $r2 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke $r0.<com.google.common.io.BaseEncoding: byte[] decodeChecked(java.lang.CharSequence)>($r2);

        return $r1;
    }

    final byte[] decodeChecked(java.lang.CharSequence) throws com.google.common.io.BaseEncoding$DecodingException
    {
        com.google.common.io.BaseEncoding $r0;
        java.lang.CharSequence $r1;
        int $i0;
        byte[] $r2;

        $r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: java.lang.CharSequence;

        $r1 = virtualinvoke $r0.<com.google.common.io.BaseEncoding: java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence)>($r1);

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i0 = virtualinvoke $r0.<com.google.common.io.BaseEncoding: int maxDecodedSize(int)>($i0);

        $r2 = newarray (byte)[$i0];

        $i0 = virtualinvoke $r0.<com.google.common.io.BaseEncoding: int decodeTo(byte[],java.lang.CharSequence)>($r2, $r1);

        $r2 = staticinvoke <com.google.common.io.BaseEncoding: byte[] extract(byte[],int)>($r2, $i0);

        return $r2;
    }

<com.google.common.io.BaseEncoding: int decodeTo(byte[],java.lang.CharSequence)>
    public java.lang.String encode(byte[])
    {
        com.google.common.io.BaseEncoding $r0;
        int $i0;
        java.lang.String $r1;
        byte[] $r2;

        $r0 := @this: com.google.common.io.BaseEncoding;

        $r2 := @parameter0: byte[];

        $i0 = lengthof $r2;

        $r1 = virtualinvoke $r0.<com.google.common.io.BaseEncoding: java.lang.String encode(byte[],int,int)>($r2, 0, $i0);

        return $r1;
    }

    public final java.lang.String encode(byte[], int, int)
    {
        com.google.common.io.BaseEncoding $r0;
        int $i0, $i1, $i2, $i3;
        byte[] $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        java.lang.AssertionError $r5;

        $r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $i2 = $i1 + $i0;

        $i3 = lengthof $r1;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i1, $i2, $i3);

        $r2 = new java.lang.StringBuilder;

        $i2 = virtualinvoke $r0.<com.google.common.io.BaseEncoding: int maxEncodedSize(int)>($i0);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i2);

     label1:
        virtualinvoke $r0.<com.google.common.io.BaseEncoding: void encodeTo(java.lang.Appendable,byte[],int,int)>($r2, $r1, $i1, $i0);

     label2:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

<com.google.common.io.BaseEncoding: void encodeTo(java.lang.Appendable,byte[],int,int)>
<com.google.common.io.BaseEncoding: int maxDecodedSize(int)>
<com.google.common.io.BaseEncoding: int maxEncodedSize(int)>
<com.google.common.io.BaseEncoding: com.google.common.io.BaseEncoding omitPadding()>
    java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence)
    {
        com.google.common.io.BaseEncoding $r0;
        java.lang.CharSequence $r1;
        java.lang.NullPointerException r2;

        $r0 := @this: com.google.common.io.BaseEncoding;

        $r1 := @parameter0: java.lang.CharSequence;

        r2 = new java.lang.NullPointerException;

        specialinvoke r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot");

        throw r2;
    }

com.google.common.io.BaseEncoding$Alphabet
<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>
<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>
<com.google.common.io.BaseEncoding$Alphabet: char[] chars>
<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>
<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>
<com.google.common.io.BaseEncoding$Alphabet: boolean ignoreCase>
<com.google.common.io.BaseEncoding$Alphabet: int mask>
<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>
<com.google.common.io.BaseEncoding$Alphabet: boolean[] validPadding>
    void <init>(java.lang.String, char[])
    {
        com.google.common.io.BaseEncoding$Alphabet $r0;
        java.lang.String $r1;
        char[] $r2;
        byte[] $r3;

        $r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: char[];

        $r3 = staticinvoke <com.google.common.io.BaseEncoding$Alphabet: byte[] decodabetFor(char[])>($r2);

        specialinvoke $r0.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[],byte[],boolean)>($r1, $r2, $r3, 0);

        return;
    }

    private void <init>(java.lang.String, char[], byte[], boolean)
    {
        com.google.common.io.BaseEncoding$Alphabet $r0;
        java.lang.String $r1;
        char[] $r2, $r5;
        byte[] $r3;
        boolean $z0;
        java.lang.Object $r4;
        int $i0, $i1, $i2;
        java.math.RoundingMode $r6;
        boolean[] $r7;

        $r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: char[];

        $r3 := @parameter2: byte[];

        $z0 := @parameter3: boolean;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r4;

        $r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name> = $r1;

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r5 = (char[]) $r4;

        $r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars> = $r5;

        $i0 = lengthof $r2;

        $r6 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

        $i1 = staticinvoke <com.google.common.math.IntMath: int log2(int,java.math.RoundingMode)>($i0, $r6);

        $r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar> = $i1;

        $i2 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i1);

        $i0 = 3 - $i2;

        $i0 = 1 << $i0;

        $r0.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk> = $i0;

        $i1 = $i1 >> $i2;

        $r0.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk> = $i1;

        $i1 = lengthof $r2;

        $i1 = $i1 + -1;

        $r0.<com.google.common.io.BaseEncoding$Alphabet: int mask> = $i1;

        $r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet> = $r3;

        $r7 = newarray (boolean)[$i0];

        $i0 = 0;

     label1:
        $i1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        if $i0 >= $i1 goto label2;

        $i1 = $i0 * 8;

        $i2 = $r0.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $r6 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i1 = staticinvoke <com.google.common.math.IntMath: int divide(int,int,java.math.RoundingMode)>($i1, $i2, $r6);

        $r7[$i1] = 1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0.<com.google.common.io.BaseEncoding$Alphabet: boolean[] validPadding> = $r7;

        $r0.<com.google.common.io.BaseEncoding$Alphabet: boolean ignoreCase> = $z0;

        return;
    }

    static char[] access$000(com.google.common.io.BaseEncoding$Alphabet)
    {
        com.google.common.io.BaseEncoding$Alphabet $r0;
        char[] r1;

        $r0 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        r1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        return r1;
    }

    private static byte[] decodabetFor(char[])
    {
        char[] $r0;
        byte[] $r1;
        int $i0, $i1;
        char $c2;
        boolean $z0, $z1;
        byte $b3;

        $r0 := @parameter0: char[];

        $r1 = newarray (byte)[128];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r1, -1);

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label6;

        $c2 = $r0[$i0];

        $z0 = 1;

        if $c2 >= 128 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,char)>($z1, "Non-ASCII character: %s", $c2);

        $b3 = $r1[$c2];

        if $b3 != -1 goto label4;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,char)>($z0, "Duplicate character: %s", $c2);

        $b3 = (byte) $i0;

        $r1[$c2] = $b3;

        $i0 = $i0 + 1;

        goto label1;

     label6:
        return $r1;
    }

    int decode(char) throws com.google.common.io.BaseEncoding$DecodingException
    {
        com.google.common.io.BaseEncoding$Alphabet $r0;
        char $c0;
        byte[] $r1;
        byte $b1;
        java.lang.StringBuilder $r2, r4;
        java.lang.String $r3;
        com.google.common.io.BaseEncoding$DecodingException r5;
        java.lang.Throwable r6;

        $r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $c0 := @parameter0: char;

        if $c0 > 127 goto label3;

        $r1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $b1 = $r1[$c0];

        if $b1 != -1 goto label4;

        if $c0 <= 32 goto label2;

        if $c0 != 127 goto label1;

        goto label2;

     label1:
        r5 = new com.google.common.io.BaseEncoding$DecodingException;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r3);

        r6 = (java.lang.Throwable) r5;

        throw r6;

     label2:
        r5 = new com.google.common.io.BaseEncoding$DecodingException;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character: 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r3);

        r6 = (java.lang.Throwable) r5;

        throw r6;

     label3:
        r5 = new com.google.common.io.BaseEncoding$DecodingException;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized character: 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r5.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r3);

        r6 = (java.lang.Throwable) r5;

        throw r6;

     label4:
        return $b1;
    }

    char encode(int)
    {
        com.google.common.io.BaseEncoding$Alphabet $r0;
        char[] $r1;
        int $i0;
        char $c1;

        $r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $c1 = $r1[$i0];

        return $c1;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.io.BaseEncoding$Alphabet $r0, $r2;
        boolean $z0, $z1;
        java.lang.Object $r1;
        char[] $r3, $r4;

        $r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof com.google.common.io.BaseEncoding$Alphabet;

        if $z0 == 0 goto label1;

        $r2 = (com.google.common.io.BaseEncoding$Alphabet) $r1;

        $z1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: boolean ignoreCase>;

        $z0 = $r2.<com.google.common.io.BaseEncoding$Alphabet: boolean ignoreCase>;

        if $z1 != $z0 goto label1;

        $r3 = $r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $r4 = $r2.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r3, $r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        com.google.common.io.BaseEncoding$Alphabet $r0;
        int $i0;
        char[] $r1;
        boolean $z0;
        short $s1;

        $r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $r1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: char[] chars>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(char[])>($r1);

        $z0 = $r0.<com.google.common.io.BaseEncoding$Alphabet: boolean ignoreCase>;

        if $z0 == 0 goto label1;

        $s1 = 1231;

        goto label2;

     label1:
        $s1 = 1237;

     label2:
        $i0 = $i0 + $s1;

        return $i0;
    }

    boolean isValidPaddingStartPosition(int)
    {
        com.google.common.io.BaseEncoding$Alphabet $r0;
        boolean[] $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $i1 := @parameter0: int;

        $r1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: boolean[] validPadding>;

        $i0 = $r0.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        $i1 = $i1 % $i0;

        $z0 = $r1[$i1];

        return $z0;
    }

    public boolean matches(char)
    {
        com.google.common.io.BaseEncoding$Alphabet $r0;
        int $i0;
        char $c1;
        byte[] $r1;
        byte $b2;

        $r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        $c1 := @parameter0: char;

        $r1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: byte[] decodabet>;

        $i0 = lengthof $r1;

        if $c1 >= $i0 goto label1;

        $b2 = $r1[$c1];

        if $b2 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        com.google.common.io.BaseEncoding$Alphabet $r0;
        java.lang.String r1;

        $r0 := @this: com.google.common.io.BaseEncoding$Alphabet;

        r1 = $r0.<com.google.common.io.BaseEncoding$Alphabet: java.lang.String name>;

        return r1;
    }

com.google.common.io.BaseEncoding$Base16Encoding
<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding>
    private void <init>(com.google.common.io.BaseEncoding$Alphabet)
    {
        com.google.common.io.BaseEncoding$Base16Encoding $r0;
        com.google.common.io.BaseEncoding$Alphabet $r1;
        char[] $r2;
        int $i0, $i1, $i3;
        boolean $z0;
        char $c2;

        $r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        specialinvoke $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r1, null);

        $r2 = newarray (char)[512];

        $r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding> = $r2;

        $r2 = staticinvoke <com.google.common.io.BaseEncoding$Alphabet: char[] access$000(com.google.common.io.BaseEncoding$Alphabet)>($r1);

        $i0 = lengthof $r2;

        $i1 = 0;

        if $i0 != 16 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

     label3:
        if $i1 >= 256 goto label4;

        $r2 = $r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding>;

        $i0 = $i1 >>> 4;

        $c2 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>($i0);

        $r2[$i1] = $c2;

        $r2 = $r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding>;

        $i0 = $i1 | 256;

        $i3 = $i1 & 15;

        $c2 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>($i3);

        $r2[$i0] = $c2;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return;
    }

    void <init>(java.lang.String, java.lang.String)
    {
        com.google.common.io.BaseEncoding$Base16Encoding $r0;
        java.lang.String $r1, $r4;
        com.google.common.io.BaseEncoding$Alphabet $r2;
        char[] $r3;

        $r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r2 = new com.google.common.io.BaseEncoding$Alphabet;

        $r3 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r2.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r1, $r3);

        specialinvoke $r0.<com.google.common.io.BaseEncoding$Base16Encoding: void <init>(com.google.common.io.BaseEncoding$Alphabet)>($r2);

        return;
    }

    int decodeTo(byte[], java.lang.CharSequence) throws com.google.common.io.BaseEncoding$DecodingException
    {
        com.google.common.io.BaseEncoding$Base16Encoding $r0;
        byte[] $r1;
        java.lang.CharSequence $r2;
        int $i0, $i1, $i2, $i4, $i5;
        com.google.common.io.BaseEncoding$Alphabet $r3;
        char $c3;
        byte $b6;
        java.lang.StringBuilder $r4, r6;
        java.lang.String $r5;
        com.google.common.io.BaseEncoding$DecodingException r7;
        java.lang.Throwable r8;

        $r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $i0 = $i0 % 2;

        if $i0 == 1 goto label3;

        $i0 = 0;

        $i1 = 0;

     label1:
        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i0 >= $i2 goto label2;

        $r3 = $r0.<com.google.common.io.BaseEncoding$Base16Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i0);

        $i4 = virtualinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c3);

        $i4 = $i4 << 4;

        $r3 = $r0.<com.google.common.io.BaseEncoding$Base16Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i5 = $i0 + 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i5);

        $i5 = virtualinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c3);

        $i4 = $i4 | $i5;

        $b6 = (byte) $i4;

        $r1[$i1] = $b6;

        $i0 = $i0 + 2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i1;

     label3:
        r7 = new com.google.common.io.BaseEncoding$DecodingException;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid input length ");

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r7.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r5);

        goto label4;

     label4:
        r8 = (java.lang.Throwable) r7;

        throw r8;
    }

    void encodeTo(java.lang.Appendable, byte[], int, int) throws java.io.IOException
    {
        com.google.common.io.BaseEncoding$Base16Encoding $r0;
        java.lang.Appendable $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3;
        byte $b4;
        short $s5;
        char[] $r3;
        char $c6;

        $r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i2 = $i0 + $i1;

        $i3 = lengthof $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i2, $i3);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $i3 = $i0 + $i2;

        $b4 = $r2[$i3];

        $s5 = $b4 & 255;

        $r3 = $r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding>;

        $c6 = $r3[$s5];

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c6);

        $r3 = $r0.<com.google.common.io.BaseEncoding$Base16Encoding: char[] encoding>;

        $s5 = $s5 | 256;

        $c6 = $r3[$s5];

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c6);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$Base16Encoding $r0;
        com.google.common.io.BaseEncoding$Alphabet $r1;
        java.lang.Character $r2;

        $r0 := @this: com.google.common.io.BaseEncoding$Base16Encoding;

        $r1 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        $r2 := @parameter1: java.lang.Character;

        $r0 = new com.google.common.io.BaseEncoding$Base16Encoding;

        specialinvoke $r0.<com.google.common.io.BaseEncoding$Base16Encoding: void <init>(com.google.common.io.BaseEncoding$Alphabet)>($r1);

        return $r0;
    }

com.google.common.io.BaseEncoding$Base64Encoding
    private void <init>(com.google.common.io.BaseEncoding$Alphabet, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$Base64Encoding $r0;
        char[] $r1;
        com.google.common.io.BaseEncoding$Alphabet $r2;
        java.lang.Character $r3;
        int $i0;
        boolean $z0;

        $r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r2 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        $r3 := @parameter1: java.lang.Character;

        specialinvoke $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r2, $r3);

        $r1 = staticinvoke <com.google.common.io.BaseEncoding$Alphabet: char[] access$000(com.google.common.io.BaseEncoding$Alphabet)>($r2);

        $i0 = lengthof $r1;

        if $i0 != 64 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        return;
    }

    void <init>(java.lang.String, java.lang.String, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$Base64Encoding $r0;
        java.lang.String $r1, $r5;
        java.lang.Character $r2;
        com.google.common.io.BaseEncoding$Alphabet $r3;
        char[] $r4;

        $r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r1 := @parameter0: java.lang.String;

        $r5 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Character;

        $r3 = new com.google.common.io.BaseEncoding$Alphabet;

        $r4 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r1, $r4);

        specialinvoke $r0.<com.google.common.io.BaseEncoding$Base64Encoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r3, $r2);

        return;
    }

    int decodeTo(byte[], java.lang.CharSequence) throws com.google.common.io.BaseEncoding$DecodingException
    {
        com.google.common.io.BaseEncoding$Base64Encoding $r0;
        com.google.common.io.BaseEncoding$Alphabet $r1;
        byte[] $r2;
        java.lang.CharSequence $r3;
        int $i0, $i1, $i2, $i3, $i5;
        boolean $z0;
        char $c4;
        byte $b6;
        java.lang.StringBuilder $r4, r6;
        java.lang.String $r5;
        com.google.common.io.BaseEncoding$DecodingException r7;
        java.lang.Throwable r8;

        $r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r2 := @parameter0: byte[];

        $r3 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r0.<com.google.common.io.BaseEncoding$Base64Encoding: java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence)>($r3);

        $r1 = $r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        $z0 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: boolean isValidPaddingStartPosition(int)>($i0);

        if $z0 == 0 goto label5;

        $i1 = 0;

        $i2 = 0;

     label1:
        $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if $i1 >= $i0 goto label4;

        $i3 = $i1 + 1;

        $i0 = $i3 + 1;

        $r1 = $r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $c4 = interfaceinvoke $r3.<java.lang.CharSequence: char charAt(int)>($i1);

        $i1 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c4);

        $i1 = $i1 << 18;

        $r1 = $r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $c4 = interfaceinvoke $r3.<java.lang.CharSequence: char charAt(int)>($i3);

        $i3 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c4);

        $i3 = $i3 << 12;

        $i1 = $i1 | $i3;

        $i3 = $i2 + 1;

        $i5 = $i1 >>> 16;

        $b6 = (byte) $i5;

        $r2[$i2] = $b6;

        $i2 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if $i0 >= $i2 goto label3;

        $i2 = $i0 + 1;

        $r1 = $r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $c4 = interfaceinvoke $r3.<java.lang.CharSequence: char charAt(int)>($i0);

        $i0 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c4);

        $i0 = $i0 << 6;

        $i1 = $i1 | $i0;

        $i0 = $i3 + 1;

        $i5 = $i1 >>> 8;

        $i5 = $i5 & 255;

        $b6 = (byte) $i5;

        $r2[$i3] = $b6;

        $i3 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        if $i2 >= $i3 goto label2;

        $i5 = $i2 + 1;

        $r1 = $r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $c4 = interfaceinvoke $r3.<java.lang.CharSequence: char charAt(int)>($i2);

        $i2 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c4);

        $i2 = $i1 | $i2;

        $i2 = $i2 & 255;

        $b6 = (byte) $i2;

        $r2[$i0] = $b6;

        $i1 = $i5;

        $i2 = $i0 + 1;

        goto label1;

     label2:
        $i1 = $i2;

        $i2 = $i0;

        goto label1;

     label3:
        $i2 = $i3;

        $i1 = $i0;

        goto label1;

     label4:
        return $i2;

     label5:
        r7 = new com.google.common.io.BaseEncoding$DecodingException;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid input length ");

        $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r7.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r5);

        goto label6;

     label6:
        r8 = (java.lang.Throwable) r7;

        throw r8;
    }

    void encodeTo(java.lang.Appendable, byte[], int, int) throws java.io.IOException
    {
        com.google.common.io.BaseEncoding$Base64Encoding $r0;
        java.lang.Appendable $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        byte $b6;
        short $s7;
        com.google.common.io.BaseEncoding$Alphabet $r3;
        char $c8;

        $r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i3 = $i1 + $i2;

        $i0 = lengthof $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i1, $i3, $i0);

     label1:
        if $i2 < 3 goto label2;

        $i4 = $i1 + 1;

        $i5 = $i4 + 1;

        $i0 = $i5 + 1;

        $b6 = $r2[$i1];

        $s7 = $b6 & 255;

        $i1 = $s7 << 16;

        $b6 = $r2[$i4];

        $s7 = $b6 & 255;

        $i4 = $s7 << 8;

        $i1 = $i1 | $i4;

        $b6 = $r2[$i5];

        $s7 = $b6 & 255;

        $i1 = $i1 | $s7;

        $r3 = $r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i5 = $i1 >>> 18;

        $c8 = virtualinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>($i5);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        $r3 = $r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i5 = $i1 >>> 12;

        $i5 = $i5 & 63;

        $c8 = virtualinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>($i5);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        $r3 = $r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i5 = $i1 >>> 6;

        $i5 = $i5 & 63;

        $c8 = virtualinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>($i5);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        $r3 = $r0.<com.google.common.io.BaseEncoding$Base64Encoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i1 = $i1 & 63;

        $c8 = virtualinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>($i1);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c8);

        $i2 = $i2 + -3;

        $i1 = $i0;

        goto label1;

     label2:
        if $i1 >= $i3 goto label3;

        $i2 = $i3 - $i1;

        virtualinvoke $r0.<com.google.common.io.BaseEncoding$Base64Encoding: void encodeChunkTo(java.lang.Appendable,byte[],int,int)>($r1, $r2, $i1, $i2);

     label3:
        return;
    }

    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$Base64Encoding $r0;
        com.google.common.io.BaseEncoding$Alphabet $r1;
        java.lang.Character $r2;

        $r0 := @this: com.google.common.io.BaseEncoding$Base64Encoding;

        $r1 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        $r2 := @parameter1: java.lang.Character;

        $r0 = new com.google.common.io.BaseEncoding$Base64Encoding;

        specialinvoke $r0.<com.google.common.io.BaseEncoding$Base64Encoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r1, $r2);

        return $r0;
    }

com.google.common.io.BaseEncoding$DecodingException
    void <init>(java.lang.String)
    {
        com.google.common.io.BaseEncoding$DecodingException $r0;
        java.lang.String $r1;

        $r0 := @this: com.google.common.io.BaseEncoding$DecodingException;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>($r1);

        return;
    }

com.google.common.io.BaseEncoding$StandardBaseEncoding$$ExternalSyntheticBackport0
    public static boolean m(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r1 := @parameter0: java.lang.Object;

        $r0 := @parameter1: java.lang.Object;

        if $r1 == $r0 goto label2;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

com.google.common.io.BaseEncoding$StandardBaseEncoding$$ExternalSyntheticBackport1
    public static int m(java.lang.Object)
    {
        int $i0;
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

com.google.common.io.BaseEncoding$StandardBaseEncoding
<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>
<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>
    void <init>(com.google.common.io.BaseEncoding$Alphabet, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        java.lang.Character $r1;
        com.google.common.io.BaseEncoding$Alphabet $r2, $r4;
        java.lang.Object $r3;
        char $c0;
        boolean $z0;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r2 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        $r1 := @parameter1: java.lang.Character;

        specialinvoke $r0.<com.google.common.io.BaseEncoding: void <init>()>();

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2);

        $r4 = (com.google.common.io.BaseEncoding$Alphabet) $r3;

        $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet> = $r4;

        if $r1 == null goto label2;

        $c0 = virtualinvoke $r1.<java.lang.Character: char charValue()>();

        $z0 = virtualinvoke $r2.<com.google.common.io.BaseEncoding$Alphabet: boolean matches(char)>($c0);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 1;

     label3:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>($z0, "Padding character %s was already in alphabet", $r1);

        $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar> = $r1;

        return;
    }

    void <init>(java.lang.String, java.lang.String, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        java.lang.String $r1, $r5;
        java.lang.Character $r2;
        com.google.common.io.BaseEncoding$Alphabet $r3;
        char[] $r4;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r1 := @parameter0: java.lang.String;

        $r5 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Character;

        $r3 = new com.google.common.io.BaseEncoding$Alphabet;

        $r4 = virtualinvoke $r5.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: void <init>(java.lang.String,char[])>($r1, $r4);

        specialinvoke $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r3, $r2);

        return;
    }

    int decodeTo(byte[], java.lang.CharSequence) throws com.google.common.io.BaseEncoding$DecodingException
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        byte[] $r1;
        java.lang.CharSequence $r2;
        com.google.common.io.BaseEncoding$Alphabet $r3;
        boolean $z0;
        long $l4, $l8;
        char $c7;
        byte $b9;
        java.lang.StringBuilder $r4, r6;
        java.lang.String $r5;
        com.google.common.io.BaseEncoding$DecodingException r7;
        java.lang.Throwable r8;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence)>($r2);

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $z0 = virtualinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: boolean isValidPaddingStartPosition(int)>($i1);

        if $z0 == 0 goto label8;

        $i1 = 0;

        $i2 = 0;

     label1:
        $i3 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i1 >= $i3 goto label7;

        $l4 = 0L;

        $i0 = 0;

        $i3 = 0;

     label2:
        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i5 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        if $i0 >= $i5 goto label4;

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i5 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $l4 = $l4 << $i5;

        $i5 = $i1 + $i0;

        $i6 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i5 >= $i6 goto label3;

        $i5 = $i3 + 1;

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i3 = $i3 + $i1;

        $c7 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i3);

        $i3 = virtualinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: int decode(char)>($c7);

        $l8 = (long) $i3;

        $l4 = $l4 | $l8;

        $i3 = $i5;

        goto label3;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i0 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        $i0 = $i0 * 8;

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i5 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $i3 = $i3 * $i5;

        $i3 = $i0 - $i3;

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i0 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        $i0 = $i0 + -1;

        $i5 = $i0 * 8;

     label5:
        if $i5 < $i3 goto label6;

        $l8 = $l4 >>> $i5;

        $l8 = $l8 & 255L;

        $i0 = (int) $l8;

        $b9 = (byte) $i0;

        $r1[$i2] = $b9;

        $i5 = $i5 + -8;

        $i2 = $i2 + 1;

        goto label5;

     label6:
        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i3 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        $i1 = $i1 + $i3;

        goto label1;

     label7:
        return $i2;

     label8:
        r7 = new com.google.common.io.BaseEncoding$DecodingException;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid input length ");

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r7.<com.google.common.io.BaseEncoding$DecodingException: void <init>(java.lang.String)>($r5);

        goto label9;

     label9:
        r8 = (java.lang.Throwable) r7;

        throw r8;
    }

    void encodeChunkTo(java.lang.Appendable, byte[], int, int) throws java.io.IOException
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        java.lang.Appendable $r1;
        int $i0, $i1, $i2, $i3, $i4;
        byte[] $r2;
        com.google.common.io.BaseEncoding$Alphabet $r3;
        boolean $z0;
        long $l5, $l8;
        byte $b6;
        short $s7;
        char $c9;
        java.lang.Character $r4;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: byte[];

        $i2 := @parameter2: int;

        $i0 := @parameter3: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i3 = $i2 + $i0;

        $i4 = lengthof $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i2, $i3, $i4);

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i4 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        $i3 = 0;

        if $i0 > $i4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $l5 = 0L;

        $i4 = 0;

     label3:
        if $i4 >= $i0 goto label4;

        $i1 = $i2 + $i4;

        $b6 = $r2[$i1];

        $s7 = $b6 & 255;

        $l8 = (long) $s7;

        $l5 = $l5 | $l8;

        $l5 = $l5 << 8;

        $i4 = $i4 + 1;

        goto label3;

     label4:
        $i2 = $i0 + 1;

        $i2 = $i2 * 8;

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i4 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $i2 = $i2 - $i4;

     label5:
        $i4 = $i0 * 8;

        if $i3 >= $i4 goto label6;

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i4 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int mask>;

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i1 = $i2 - $i3;

        $l8 = $l5 >>> $i1;

        $i1 = (int) $l8;

        $i4 = $i4 & $i1;

        $c9 = virtualinvoke $r3.<com.google.common.io.BaseEncoding$Alphabet: char encode(int)>($i4);

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c9);

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i4 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $i3 = $i3 + $i4;

        goto label5;

     label6:
        $r4 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>;

        if $r4 == null goto label8;

     label7:
        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i2 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        $i2 = $i2 * 8;

        if $i3 >= $i2 goto label8;

        $r4 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>;

        $c9 = virtualinvoke $r4.<java.lang.Character: char charValue()>();

        interfaceinvoke $r1.<java.lang.Appendable: java.lang.Appendable append(char)>($c9);

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i2 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $i3 = $i3 + $i2;

        goto label7;

     label8:
        return;
    }

    void encodeTo(java.lang.Appendable, byte[], int, int) throws java.io.IOException
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        java.lang.Appendable $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.google.common.io.BaseEncoding$Alphabet $r3;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r1 := @parameter0: java.lang.Appendable;

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $i3 = $i0 + $i1;

        $i4 = lengthof $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>($i0, $i3, $i4);

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label2;

        $i4 = $i0 + $i3;

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i5 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        $i2 = $i1 - $i3;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i2);

        virtualinvoke $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void encodeChunkTo(java.lang.Appendable,byte[],int,int)>($r1, $r2, $i4, $i2);

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i4 = $r3.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        $i3 = $i3 + $i4;

        goto label1;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0, $r3;
        com.google.common.io.BaseEncoding$Alphabet $r1, $r4;
        java.lang.Object $r2;
        boolean $z0, $z1;
        java.lang.Character $r5, $r6;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $z1 = 0;

        if $z0 == 0 goto label2;

        $r3 = (com.google.common.io.BaseEncoding$StandardBaseEncoding) $r2;

        $r4 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $r1 = $r3.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $z0 = virtualinvoke $r4.<com.google.common.io.BaseEncoding$Alphabet: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r5 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>;

        $r6 = $r3.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>;

        $z0 = staticinvoke <com.google.common.io.BaseEncoding$StandardBaseEncoding$$ExternalSyntheticBackport0: boolean m(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label1;

     label1:
        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        com.google.common.io.BaseEncoding$Alphabet $r1;
        int $i0, $i1;
        java.lang.Character $r2;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r1 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i0 = virtualinvoke $r1.<com.google.common.io.BaseEncoding$Alphabet: int hashCode()>();

        $r2 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>;

        $i1 = staticinvoke <com.google.common.io.BaseEncoding$StandardBaseEncoding$$ExternalSyntheticBackport1: int m(java.lang.Object)>($r2);

        $i0 = $i0 ^ $i1;

        return $i0;
    }

    int maxDecodedSize(int)
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        int $i0, $i1;
        com.google.common.io.BaseEncoding$Alphabet $r1;
        long $l2, $l3;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i1 = $r1.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $l2 = (long) $i1;

        $l3 = (long) $i0;

        $l2 = $l2 * $l3;

        $l2 = $l2 + 7L;

        $l2 = $l2 / 8L;

        $i0 = (int) $l2;

        return $i0;
    }

    int maxEncodedSize(int)
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        java.math.RoundingMode $r1;
        int $i0, $i1, $i2;
        com.google.common.io.BaseEncoding$Alphabet $r2;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $i0 := @parameter0: int;

        $r2 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i1 = $r2.<com.google.common.io.BaseEncoding$Alphabet: int charsPerChunk>;

        $r2 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i2 = $r2.<com.google.common.io.BaseEncoding$Alphabet: int bytesPerChunk>;

        $r1 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i0 = staticinvoke <com.google.common.math.IntMath: int divide(int,int,java.math.RoundingMode)>($i0, $i2, $r1);

        $i0 = $i1 * $i0;

        return $i0;
    }

    com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet, java.lang.Character)
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        com.google.common.io.BaseEncoding$Alphabet $r1;
        java.lang.Character $r2;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r1 := @parameter0: com.google.common.io.BaseEncoding$Alphabet;

        $r2 := @parameter1: java.lang.Character;

        $r0 = new com.google.common.io.BaseEncoding$StandardBaseEncoding;

        specialinvoke $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: void <init>(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r1, $r2);

        return $r0;
    }

    public com.google.common.io.BaseEncoding omitPadding()
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        com.google.common.io.BaseEncoding $r1;
        java.lang.Character $r2;
        com.google.common.io.BaseEncoding$Alphabet $r3;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r2 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>;

        if $r2 != null goto label1;

        return $r0;

     label1:
        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $r1 = virtualinvoke $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding newInstance(com.google.common.io.BaseEncoding$Alphabet,java.lang.Character)>($r3, null);

        return $r1;
    }

    public java.lang.String toString()
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        java.lang.StringBuilder $r1, $r4;
        com.google.common.io.BaseEncoding$Alphabet $r2;
        int $i0;
        java.lang.Character $r3;
        java.lang.String $r5;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("BaseEncoding.");

        $r2 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r2 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: com.google.common.io.BaseEncoding$Alphabet alphabet>;

        $i0 = $r2.<com.google.common.io.BaseEncoding$Alphabet: int bitsPerChar>;

        $i0 = 8 % $i0;

        if $i0 == 0 goto label2;

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>;

        if $r3 != null goto label1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".omitPadding()");

        goto label2;

     label1:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".withPadChar(\'");

        $r3 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

     label2:
        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    java.lang.CharSequence trimTrailingPadding(java.lang.CharSequence)
    {
        com.google.common.io.BaseEncoding$StandardBaseEncoding $r0;
        java.lang.CharSequence $r1;
        java.lang.Character $r2;
        char $c0, $c2;
        int $i1;

        $r0 := @this: com.google.common.io.BaseEncoding$StandardBaseEncoding;

        $r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r2 = $r0.<com.google.common.io.BaseEncoding$StandardBaseEncoding: java.lang.Character paddingChar>;

        if $r2 != null goto label1;

        return $r1;

     label1:
        $c0 = virtualinvoke $r2.<java.lang.Character: char charValue()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $i1 = $i1 + -1;

     label2:
        if $i1 < 0 goto label4;

        $c2 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c2 == $c0 goto label3;

        goto label4;

     label3:
        $i1 = $i1 + -1;

        goto label2;

     label4:
        $i1 = $i1 + 1;

        $r1 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i1);

        return $r1;
    }

