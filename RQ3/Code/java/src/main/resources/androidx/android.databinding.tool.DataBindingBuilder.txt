android.databinding.tool.DataBindingBuilder
<android.databinding.tool.DataBindingBuilder: android.databinding.tool.DataBindingBuilder$Versions mVersions>
<android.databinding.tool.DataBindingBuilder: java.util.List EXCLUDE_PATTERNS>
<android.databinding.tool.DataBindingBuilder: java.lang.String PROCESSOR_NAME>
<android.databinding.tool.DataBindingBuilder: java.lang.String ARTIFACT_FILES_DIR_FROM_LIBS>
<android.databinding.tool.DataBindingBuilder: java.lang.String ARTIFACT_BASE_CLASSES_DIR_FROM_LIBS>
<android.databinding.tool.DataBindingBuilder: java.lang.String INCREMENTAL_BIN_AAR_DIR>
<android.databinding.tool.DataBindingBuilder: java.lang.String INCREMENTAL_BINDING_CLASSES_LIST_DIR>
<android.databinding.tool.DataBindingBuilder: java.lang.String DATA_BINDING_ROOT_FOLDER_IN_AAR>
<android.databinding.tool.DataBindingBuilder: java.lang.String DATA_BINDING_CLASS_LOG_ROOT_FOLDER_IN_AAR>
<android.databinding.tool.DataBindingBuilder: java.lang.String BR_FILE_EXT>
<android.databinding.tool.DataBindingBuilder: java.lang.String LAYOUT_INFO_FILE_EXT>
<android.databinding.tool.DataBindingBuilder: java.lang.String SETTER_STORE_FILE_EXT>
<android.databinding.tool.DataBindingBuilder: java.util.List RESOURCE_FILE_EXTENSIONS>
<android.databinding.tool.DataBindingBuilder: java.lang.String BINDING_CLASS_LIST_SUFFIX>
<android.databinding.tool.DataBindingBuilder: java.lang.String FEATURE_PACKAGE_LIST_FILE_NAME>
<android.databinding.tool.DataBindingBuilder: java.lang.String FEATURE_BR_OFFSET_FILE_NAME>
    public void <init>()
    {
        android.databinding.tool.DataBindingBuilder r0;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getCompilerVersion()
    {
        android.databinding.tool.DataBindingBuilder r0;
        android.databinding.tool.DataBindingBuilder$Versions $r1;
        java.lang.String $r2;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        $r1 = specialinvoke r0.<android.databinding.tool.DataBindingBuilder: android.databinding.tool.DataBindingBuilder$Versions getVersions()>();

        $r2 = $r1.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String compiler>;

        return $r2;
    }

    public java.lang.String getBaseLibraryVersion(java.lang.String)
    {
        android.databinding.tool.DataBindingBuilder r0;
        java.lang.String r1, $r3;
        android.databinding.tool.DataBindingBuilder$Versions $r2;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.databinding.tool.DataBindingBuilder: android.databinding.tool.DataBindingBuilder$Versions getVersions()>();

        $r3 = $r2.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String baseLibrary>;

        return $r3;
    }

    public java.lang.String getLibraryVersion(java.lang.String)
    {
        android.databinding.tool.DataBindingBuilder r0;
        java.lang.String r1, $r3;
        android.databinding.tool.DataBindingBuilder$Versions $r2;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.databinding.tool.DataBindingBuilder: android.databinding.tool.DataBindingBuilder$Versions getVersions()>();

        $r3 = $r2.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String extensions>;

        return $r3;
    }

    public java.lang.String getBaseAdaptersVersion(java.lang.String)
    {
        android.databinding.tool.DataBindingBuilder r0;
        java.lang.String r1, $r3;
        android.databinding.tool.DataBindingBuilder$Versions $r2;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.databinding.tool.DataBindingBuilder: android.databinding.tool.DataBindingBuilder$Versions getVersions()>();

        $r3 = $r2.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String extensions>;

        return $r3;
    }

    public void setPrintMachineReadableOutput(boolean)
    {
        android.databinding.tool.DataBindingBuilder r0;
        boolean z0;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        z0 := @parameter0: boolean;

        staticinvoke <android.databinding.tool.processing.ScopedException: void encodeOutput(boolean)>(z0);

        return;
    }

    public boolean getPrintMachineReadableOutput()
    {
        android.databinding.tool.DataBindingBuilder r0;
        boolean $z0;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        $z0 = staticinvoke <android.databinding.tool.processing.ScopedException: boolean issEncodeOutput()>();

        return $z0;
    }

    public void setDebugLogEnabled(boolean)
    {
        android.databinding.tool.DataBindingBuilder r0;
        boolean z0;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        z0 := @parameter0: boolean;

        staticinvoke <android.databinding.tool.util.L: void setDebugLog(boolean)>(z0);

        return;
    }

    public boolean isDebugLogEnabled()
    {
        android.databinding.tool.DataBindingBuilder r0;
        boolean $z0;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        $z0 = staticinvoke <android.databinding.tool.util.L: boolean isDebugEnabled()>();

        return $z0;
    }

    private android.databinding.tool.DataBindingBuilder$Versions getVersions()
    {
        android.databinding.tool.DataBindingBuilder r0;
        java.io.InputStream r1;
        java.lang.Throwable r2, $r9, $r10, r13;
        android.databinding.tool.DataBindingBuilder$Versions $r3, $r6, $r7, $r8;
        java.util.Properties $r4, r12;
        java.lang.Class $r5;
        java.lang.Object[] $r11;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        $r3 = r0.<android.databinding.tool.DataBindingBuilder: android.databinding.tool.DataBindingBuilder$Versions mVersions>;

        if $r3 == null goto label1;

        $r8 = r0.<android.databinding.tool.DataBindingBuilder: android.databinding.tool.DataBindingBuilder$Versions mVersions>;

        return $r8;

     label1:
        $r4 = new java.util.Properties;

        specialinvoke $r4.<java.util.Properties: void <init>()>();

        r12 = $r4;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/data_binding_version_info.properties");

     label2:
        virtualinvoke r12.<java.util.Properties: void load(java.io.InputStream)>(r1);

        $r6 = new android.databinding.tool.DataBindingBuilder$Versions;

        specialinvoke $r6.<android.databinding.tool.DataBindingBuilder$Versions: void <init>(java.util.Properties)>(r12);

        r0.<android.databinding.tool.DataBindingBuilder: android.databinding.tool.DataBindingBuilder$Versions mVersions> = $r6;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1);

        goto label5;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1);

        throw r2;

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        r13 = $r10;

        $r11 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r13, "Cannot read data binding version", $r11);

     label7:
        $r7 = r0.<android.databinding.tool.DataBindingBuilder: android.databinding.tool.DataBindingBuilder$Versions mVersions>;

        return $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.io.IOException from label1 to label5 with label6;
    }

    public java.util.List getJarExcludeList(android.databinding.tool.LayoutXmlProcessor, java.io.File, java.io.File)
    {
        android.databinding.tool.DataBindingBuilder r0;
        android.databinding.tool.LayoutXmlProcessor r1;
        java.io.File r2, r3;
        java.util.ArrayList r4, $r7;
        java.lang.String r5, r6, $r8, $r12, $r15, $r16, $r19, $r23, $r26, $r29, $r32, r34;
        java.lang.StringBuilder $r9, $r10, $r11, $r14, $r17, $r18, $r22, $r24, $r25, $r28, $r30, $r31;
        java.util.List $r13, $r20, r35;
        boolean $z3, $z4;
        java.lang.Object $r21, $r27;
        java.util.Iterator r33, r36;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        r1 := @parameter0: android.databinding.tool.LayoutXmlProcessor;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.io.File;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r4 = $r7;

        $r8 = virtualinvoke r1.<android.databinding.tool.LayoutXmlProcessor: java.lang.String getInfoClassFullName()>();

        r5 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = <android.databinding.tool.DataBindingBuilder: java.util.List EXCLUDE_PATTERNS>;

        interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r1.<android.databinding.tool.LayoutXmlProcessor: java.lang.String getPackage()>();

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/BR.*");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r20 = staticinvoke <android.databinding.tool.DataBindingBuilder: java.util.List getBRFilePackages(java.io.File)>(r3);

        r33 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r27 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (java.lang.String) $r27;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke r34.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/BR.*");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r32);

        goto label1;

     label2:
        if r2 == null goto label4;

        r35 = specialinvoke r0.<android.databinding.tool.DataBindingBuilder: java.util.List readGeneratedClasses(java.io.File)>(r2);

        r36 = interfaceinvoke r35.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r21 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r21;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke r6.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r26);

        goto label3;

     label4:
        staticinvoke <android.databinding.tool.processing.Scope: void assertNoError()>();

        return r4;
    }

    private static java.util.List getBRFilePackages(java.io.File)
    {
        java.io.File r0, r1, $r7;
        java.util.ArrayList r2, $r8;
        java.nio.file.Path r3, $r9, $r11;
        java.lang.String r4, $r12;
        java.lang.Throwable r5, r6, $r13, $r15, $r16, $r17, $r18, r21, r22, r23;
        boolean $z0, $z1;
        java.lang.Object $r10;
        int $i0;
        java.lang.Object[] $r14;
        java.nio.file.DirectoryStream r19;
        java.util.Iterator r20;
        java.lang.NullPointerException r24;

        r0 := @parameter0: java.io.File;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "dependent-lib-artifacts");

        r1 = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

     label01:
        $r9 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>();

        r19 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>($r9);

     label02:
        r20 = interfaceinvoke r19.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r10 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.nio.file.Path) $r10;

        $r11 = interfaceinvoke r3.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        r4 = interfaceinvoke $r11.<java.nio.file.Path: java.lang.String toString()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>("-br.bin");

        if $z1 == 0 goto label04;

        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(45);

        $r12 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

     label04:
        goto label03;

     label05:
        if r19 == null goto label18;

        if null == null goto label09;

     label06:
        interfaceinvoke r19.<java.nio.file.DirectoryStream: void close()>();

     label07:
        goto label18;

     label08:
        $r15 := @caughtexception;

        r24 = new java.lang.NullPointerException;

        specialinvoke r24.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke l4#2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l5#4)");

        throw r24;

     label09:
        interfaceinvoke r19.<java.nio.file.DirectoryStream: void close()>();

        goto label18;

     label10:
        $r17 := @caughtexception;

        r21 = $r17;

        r22 = r21;

        throw r21;

     label11:
        $r16 := @caughtexception;

        r5 = $r16;

     label12:
        if r19 == null goto label17;

        if r22 == null goto label16;

     label13:
        interfaceinvoke r19.<java.nio.file.DirectoryStream: void close()>();

     label14:
        goto label17;

     label15:
        $r18 := @caughtexception;

        r6 = $r18;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);

        goto label17;

     label16:
        interfaceinvoke r19.<java.nio.file.DirectoryStream: void close()>();

     label17:
        throw r5;

     label18:
        goto label20;

     label19:
        $r13 := @caughtexception;

        r23 = $r13;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r1;

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r23, "Error reading contents of %s directory", $r14);

     label20:
        return r2;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label02 to label05 with label10;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label10 to label12 with label11;
        catch java.io.IOException from label01 to label18 with label19;
    }

    private java.util.List readGeneratedClasses(java.io.File)
    {
        android.databinding.tool.DataBindingBuilder r0;
        java.io.File r1, $r9, $r13;
        java.lang.Throwable r2, $r7, $r11, $r14, r17, r18;
        java.lang.Object[] $r3, $r4, $r8, $r10, $r12;
        boolean $z0;
        java.lang.String $r5;
        java.io.FileInputStream $r6, r15;
        java.util.List r16;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        r1 := @parameter0: java.io.File;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, "Data binding exclude generated task is not configured properly", $r3);

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r5;

        staticinvoke <android.databinding.tool.util.Preconditions: void check(boolean,java.lang.String,java.lang.Object[])>($z0, "Generated class list does not exist %s", $r4);

        r15 = null;

     label1:
        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r15 = $r6;

        r16 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream)>(r15);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r15);

        return r16;

     label3:
        $r7 := @caughtexception;

        r17 = $r7;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r8[0] = $r9;

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r17, "Unable to read generated class list from %s", $r8);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r15);

        goto label9;

     label5:
        $r11 := @caughtexception;

        r18 = $r11;

        $r12 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r12[0] = $r13;

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r18, "Unexpected exception while reading %s", $r12);

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r15);

        goto label9;

     label7:
        $r14 := @caughtexception;

        r2 = $r14;

     label8:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r15);

        throw r2;

     label9:
        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.String,java.lang.Object[])>("Could not read data binding generated class list", $r10);

        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.databinding.tool.writer.JavaFileWriter createJavaFileWriter(java.io.File)
    {
        android.databinding.tool.DataBindingBuilder r0;
        java.io.File r1;
        android.databinding.tool.DataBindingBuilder$GradleFileWriter $r2;
        java.lang.String $r3;

        r0 := @this: android.databinding.tool.DataBindingBuilder;

        r1 := @parameter0: java.io.File;

        $r2 = new android.databinding.tool.DataBindingBuilder$GradleFileWriter;

        $r3 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r2.<android.databinding.tool.DataBindingBuilder$GradleFileWriter: void <init>(java.lang.String)>($r3);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.List $r1;
        com.google.common.collect.ImmutableList $r2;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "android/databinding/layouts/*.*";

        $r0[1] = "androidx/databinding/layouts/*.*";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <android.databinding.tool.DataBindingBuilder: java.util.List EXCLUDE_PATTERNS> = $r1;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>("-br.bin", "-layoutinfo.bin", "-setter_store.bin");

        <android.databinding.tool.DataBindingBuilder: java.util.List RESOURCE_FILE_EXTENSIONS> = $r2;

        return;
    }

android.databinding.tool.DataBindingBuilder$GradleFileWriter
<android.databinding.tool.DataBindingBuilder$GradleFileWriter: java.lang.String outputBase>
    public void <init>(java.lang.String)
    {
        android.databinding.tool.DataBindingBuilder$GradleFileWriter r0;
        java.lang.String r1;

        r0 := @this: android.databinding.tool.DataBindingBuilder$GradleFileWriter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.databinding.tool.writer.JavaFileWriter: void <init>()>();

        r0.<android.databinding.tool.DataBindingBuilder$GradleFileWriter: java.lang.String outputBase> = r1;

        return;
    }

    public void writeToFile(java.lang.String, java.lang.String)
    {
        android.databinding.tool.DataBindingBuilder$GradleFileWriter r0;
        java.lang.String r1, r2, $r11, $r13;
        java.io.File r3, $r6;
        java.lang.Throwable r4, r5, $r8, $r15;
        java.io.FileOutputStream $r7, r16;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.Object[] $r14;

        r0 := @this: android.databinding.tool.DataBindingBuilder$GradleFileWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = specialinvoke r0.<android.databinding.tool.DataBindingBuilder$GradleFileWriter: java.io.File toFile(java.lang.String)>(r1);

        $r6 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r6.<java.io.File: boolean mkdirs()>();

        r16 = null;

     label1:
        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

        r16 = $r7;

        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)>(r2, r16);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r16);

        goto label7;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot write file ");

        $r11 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.L: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r4, $r13, $r14);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r16);

        goto label7;

     label5:
        $r15 := @caughtexception;

        r5 = $r15;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r16);

        throw r5;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.io.File toFile(java.lang.String)
    {
        android.databinding.tool.DataBindingBuilder$GradleFileWriter r0;
        java.lang.String r1, r2, $r5, $r10;
        char $c0, $c1;
        java.io.File $r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9;

        r0 := @this: android.databinding.tool.DataBindingBuilder$GradleFileWriter;

        r1 := @parameter0: java.lang.String;

        $c0 = <java.io.File: char separatorChar>;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, $c0);

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<android.databinding.tool.DataBindingBuilder$GradleFileWriter: java.lang.String outputBase>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $c1 = <java.io.File: char separatorChar>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r10);

        return $r3;
    }

    public void deleteFile(java.lang.String)
    {
        android.databinding.tool.DataBindingBuilder$GradleFileWriter r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: android.databinding.tool.DataBindingBuilder$GradleFileWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.databinding.tool.DataBindingBuilder$GradleFileWriter: java.io.File toFile(java.lang.String)>(r1);

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r2);

        return;
    }

android.databinding.tool.DataBindingBuilder$Versions
<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String compilerCommon>
<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String compiler>
<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String baseLibrary>
<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String extensions>
    public void <init>(java.util.Properties)
    {
        android.databinding.tool.DataBindingBuilder$Versions r0;
        java.util.Properties r1;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r9, $r11, $r13;
        java.lang.Object[] $r6, $r8, $r10, $r12;

        r0 := @this: android.databinding.tool.DataBindingBuilder$Versions;

        r1 := @parameter0: java.util.Properties;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("compilerCommon");

        r0.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String compilerCommon> = $r2;

        $r3 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("compiler");

        r0.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String compiler> = $r3;

        $r4 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("baseLibrary");

        r0.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String baseLibrary> = $r4;

        $r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("extensions");

        r0.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String extensions> = $r5;

        $r7 = r0.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String compilerCommon>;

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r7, "cannot read compiler common version", $r6);

        $r9 = r0.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String compiler>;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r9, "cannot read compiler version", $r8);

        $r11 = r0.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String baseLibrary>;

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r11, "cannot read baseLibrary version", $r10);

        $r13 = r0.<android.databinding.tool.DataBindingBuilder$Versions: java.lang.String extensions>;

        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <android.databinding.tool.util.Preconditions: void checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r13, "cannot read extensions version", $r12);

        return;
    }

