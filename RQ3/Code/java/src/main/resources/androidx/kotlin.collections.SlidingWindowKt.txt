kotlin.collections.SlidingWindowKt
    public static final void checkWindowSizeStep(int, int)
    {
        int $i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 <= 0 goto label1;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 != 0 goto label5;

        if $i0 == $i1 goto label3;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Both size ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and step ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be greater than zero.");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be greater than zero.");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label5:
        return;
    }

    public static final java.util.Iterator windowedIterator(java.util.Iterator, int, int, boolean, boolean)
    {
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r0;
        kotlin.collections.EmptyIterator r1;
        kotlin.collections.SlidingWindowKt$windowedIterator$1 r2;

        $r0 := @parameter0: java.util.Iterator;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "iterator");

        $z2 = interfaceinvoke $r0.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        r1 = <kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE>;

        $r0 = (java.util.Iterator) r1;

        return $r0;

     label1:
        r2 = new kotlin.collections.SlidingWindowKt$windowedIterator$1;

        specialinvoke r2.<kotlin.collections.SlidingWindowKt$windowedIterator$1: void <init>(int,int,java.util.Iterator,boolean,boolean,kotlin.coroutines.Continuation)>($i0, $i1, $r0, $z1, $z0, null);

        $r0 = staticinvoke <kotlin.sequences.SequencesKt: java.util.Iterator iterator(kotlin.jvm.functions.Function2)>(r2);

        return $r0;
    }

    public static final kotlin.sequences.Sequence windowedSequence(kotlin.sequences.Sequence, int, int, boolean, boolean)
    {
        kotlin.sequences.Sequence $r0;
        int $i0, $i1;
        boolean $z0, $z1;
        kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1 $r1;

        $r0 := @parameter0: kotlin.sequences.Sequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.collections.SlidingWindowKt: void checkWindowSizeStep(int,int)>($i0, $i1);

        $r1 = new kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1;

        specialinvoke $r1.<kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1: void <init>(kotlin.sequences.Sequence,int,int,boolean,boolean)>($r0, $i0, $i1, $z0, $z1);

        return $r1;
    }

