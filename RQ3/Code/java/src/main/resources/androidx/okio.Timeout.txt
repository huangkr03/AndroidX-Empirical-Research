okio.Timeout
<okio.Timeout: okio.Timeout$Companion Companion>
<okio.Timeout: okio.Timeout NONE>
<okio.Timeout: long deadlineNanoTime>
<okio.Timeout: boolean hasDeadline>
<okio.Timeout: long timeoutNanos>
    static void <clinit>()
    {
        okio.Timeout$Companion $r0;
        okio.Timeout$Companion$NONE$1 $r1;

        $r0 = new okio.Timeout$Companion;

        specialinvoke $r0.<okio.Timeout$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <okio.Timeout: okio.Timeout$Companion Companion> = $r0;

        $r1 = new okio.Timeout$Companion$NONE$1;

        specialinvoke $r1.<okio.Timeout$Companion$NONE$1: void <init>()>();

        <okio.Timeout: okio.Timeout NONE> = $r1;

        return;
    }

    public void <init>()
    {
        okio.Timeout $r0;

        $r0 := @this: okio.Timeout;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public long deadlineNanoTime()
    {
        okio.Timeout $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        long l0;

        $r0 := @this: okio.Timeout;

        $z0 = $r0.<okio.Timeout: boolean hasDeadline>;

        if $z0 == 0 goto label1;

        l0 = $r0.<okio.Timeout: long deadlineNanoTime>;

        return l0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        $r1 = "No deadline";

        $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    public boolean hasDeadline()
    {
        okio.Timeout $r0;
        boolean z0;

        $r0 := @this: okio.Timeout;

        z0 = $r0.<okio.Timeout: boolean hasDeadline>;

        return z0;
    }

    public void throwIfReached() throws java.io.IOException
    {
        okio.Timeout $r0;
        byte $b0;
        java.lang.Thread $r1;
        boolean $z0;
        long $l1, $l2;
        java.io.InterruptedIOException $r2;

        $r0 := @this: okio.Timeout;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = virtualinvoke $r1.<java.lang.Thread: boolean isInterrupted()>();

        if $z0 != 0 goto label2;

        $z0 = $r0.<okio.Timeout: boolean hasDeadline>;

        if $z0 == 0 goto label3;

        $l1 = $r0.<okio.Timeout: long deadlineNanoTime>;

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l1 = $l1 - $l2;

        $b0 = $l1 cmp 0L;

        if $b0 <= 0 goto label1;

        return;

     label1:
        $r2 = new java.io.InterruptedIOException;

        specialinvoke $r2.<java.io.InterruptedIOException: void <init>(java.lang.String)>("deadline reached");

        throw $r2;

     label2:
        $r2 = new java.io.InterruptedIOException;

        specialinvoke $r2.<java.io.InterruptedIOException: void <init>(java.lang.String)>("interrupted");

        throw $r2;

     label3:
        return;
    }

    public long timeoutNanos()
    {
        okio.Timeout $r0;
        long l0;

        $r0 := @this: okio.Timeout;

        l0 = $r0.<okio.Timeout: long timeoutNanos>;

        return l0;
    }

