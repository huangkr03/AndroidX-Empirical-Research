androidx.ui.core.gesture.DragSlopExceededGestureFilterKt
    public static final androidx.ui.core.Modifier dragSlopExceededGestureFilter(androidx.ui.core.Modifier, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1)
    {
        androidx.ui.core.Modifier $r0, $r5;
        kotlin.jvm.functions.Function0 r1;
        kotlin.jvm.functions.Function1 r2;
        androidx.ui.core.gesture.DragSlopExceededGestureFilterKt$dragSlopExceededGestureFilter$1 $r3;
        kotlin.jvm.functions.Function4 $r4;

        $r0 := @parameter0: androidx.ui.core.Modifier;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        r2 := @parameter2: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "onDragSlopExceeded");

        $r3 = new androidx.ui.core.gesture.DragSlopExceededGestureFilterKt$dragSlopExceededGestureFilter$1;

        specialinvoke $r3.<androidx.ui.core.gesture.DragSlopExceededGestureFilterKt$dragSlopExceededGestureFilter$1: void <init>(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0)>(r2, r1);

        $r4 = (kotlin.jvm.functions.Function4) $r3;

        $r5 = staticinvoke <androidx.ui.core.ComposedModifierKt: androidx.ui.core.Modifier composed(androidx.ui.core.Modifier,kotlin.jvm.functions.Function4)>($r0, $r4);

        return $r5;
    }

    public static androidx.ui.core.Modifier dragSlopExceededGestureFilter$default(androidx.ui.core.Modifier, kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        androidx.ui.core.Modifier $r0, $r3;
        kotlin.jvm.functions.Function0 r1;
        int i0, $i1;
        java.lang.Object r2;
        kotlin.jvm.functions.Function1 r4;

        $r0 := @parameter0: androidx.ui.core.Modifier;

        r1 := @parameter1: kotlin.jvm.functions.Function0;

        r4 := @parameter2: kotlin.jvm.functions.Function1;

        i0 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        r4 = (kotlin.jvm.functions.Function1) null;

     label1:
        $r3 = staticinvoke <androidx.ui.core.gesture.DragSlopExceededGestureFilterKt: androidx.ui.core.Modifier dragSlopExceededGestureFilter(androidx.ui.core.Modifier,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function1)>($r0, r1, r4);

        return $r3;
    }

    private static final androidx.ui.geometry.Offset getAveragePositionChange(java.util.List)
    {
        java.util.List r0;
        androidx.ui.geometry.Offset r1, $r3, $r4, r6, r7, r11;
        float f0, $f1, $f2, $f3, f4, f5;
        boolean z1, $z2, z4, z6;
        long l0, l1, l2, $l6, $l7, l8;
        androidx.ui.geometry.Offset$Companion $r2;
        int $i3, $i4, $i5;
        java.lang.Iterable $r5;
        java.util.Iterator $r8;
        java.lang.Object r9;
        androidx.ui.core.PointerInputChange r10;

        r0 := @parameter0: java.util.List;

        $r5 = (java.lang.Iterable) r0;

        $r2 = <androidx.ui.geometry.Offset: androidx.ui.geometry.Offset$Companion Companion>;

        r6 = virtualinvoke $r2.<androidx.ui.geometry.Offset$Companion: androidx.ui.geometry.Offset getZero()>();

        r7 = r6;

        $r8 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (androidx.ui.core.PointerInputChange) r9;

        r11 = r7;

        $r4 = staticinvoke <androidx.ui.core.PointerInputKt: androidx.ui.geometry.Offset positionChange(androidx.ui.core.PointerInputChange)>(r10);

        r7 = virtualinvoke r11.<androidx.ui.geometry.Offset: androidx.ui.geometry.Offset plus(androidx.ui.geometry.Offset)>($r4);

        goto label1;

     label2:
        r1 = r7;

        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        $f3 = (float) $i3;

        $f1 = virtualinvoke r1.<androidx.ui.geometry.Offset: float getX()>();

        f4 = $f1 / $f3;

        $f2 = virtualinvoke r1.<androidx.ui.geometry.Offset: float getY()>();

        z4 = 0;

        f5 = f4;

        z6 = 0;

        $i4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f5);

        l8 = (long) $i4;

        f0 = $f2 / $f3;

        z1 = 0;

        $i5 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        l0 = (long) $i5;

        $l7 = l8 << 32;

        $l6 = l0 & 4294967295L;

        l1 = $l7 | $l6;

        l2 = l1;

        $r3 = new androidx.ui.geometry.Offset;

        specialinvoke $r3.<androidx.ui.geometry.Offset: void <init>(long)>(l2);

        return $r3;
    }

    private static final androidx.ui.core.Direction horizontalDirection(androidx.ui.geometry.Offset)
    {
        androidx.ui.geometry.Offset $r0;
        float $f0, $f1;
        byte $b0, $b1;
        androidx.ui.core.Direction $r1;

        $r0 := @parameter0: androidx.ui.geometry.Offset;

        $f0 = virtualinvoke $r0.<androidx.ui.geometry.Offset: float getX()>();

        $b0 = $f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        $r1 = <androidx.ui.core.Direction: androidx.ui.core.Direction LEFT>;

        goto label3;

     label1:
        $f1 = virtualinvoke $r0.<androidx.ui.geometry.Offset: float getX()>();

        $b1 = $f1 cmpl 0.0F;

        if $b1 <= 0 goto label2;

        $r1 = <androidx.ui.core.Direction: androidx.ui.core.Direction RIGHT>;

        goto label3;

     label2:
        $r1 = (androidx.ui.core.Direction) null;

     label3:
        return $r1;
    }

    private static final androidx.ui.core.Direction verticalDirection(androidx.ui.geometry.Offset)
    {
        androidx.ui.geometry.Offset $r0;
        float $f0, $f1;
        byte $b0, $b1;
        androidx.ui.core.Direction $r1;

        $r0 := @parameter0: androidx.ui.geometry.Offset;

        $f0 = virtualinvoke $r0.<androidx.ui.geometry.Offset: float getY()>();

        $b0 = $f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        $r1 = <androidx.ui.core.Direction: androidx.ui.core.Direction UP>;

        goto label3;

     label1:
        $f1 = virtualinvoke $r0.<androidx.ui.geometry.Offset: float getY()>();

        $b1 = $f1 cmpl 0.0F;

        if $b1 <= 0 goto label2;

        $r1 = <androidx.ui.core.Direction: androidx.ui.core.Direction DOWN>;

        goto label3;

     label2:
        $r1 = (androidx.ui.core.Direction) null;

     label3:
        return $r1;
    }

    public static final androidx.ui.geometry.Offset access$getAveragePositionChange(java.util.List)
    {
        java.util.List r0;
        androidx.ui.geometry.Offset $r1;

        r0 := @parameter0: java.util.List;

        $r1 = staticinvoke <androidx.ui.core.gesture.DragSlopExceededGestureFilterKt: androidx.ui.geometry.Offset getAveragePositionChange(java.util.List)>(r0);

        return $r1;
    }

    public static final androidx.ui.core.Direction access$horizontalDirection(androidx.ui.geometry.Offset)
    {
        androidx.ui.geometry.Offset $r0;
        androidx.ui.core.Direction $r1;

        $r0 := @parameter0: androidx.ui.geometry.Offset;

        $r1 = staticinvoke <androidx.ui.core.gesture.DragSlopExceededGestureFilterKt: androidx.ui.core.Direction horizontalDirection(androidx.ui.geometry.Offset)>($r0);

        return $r1;
    }

    public static final androidx.ui.core.Direction access$verticalDirection(androidx.ui.geometry.Offset)
    {
        androidx.ui.geometry.Offset $r0;
        androidx.ui.core.Direction $r1;

        $r0 := @parameter0: androidx.ui.geometry.Offset;

        $r1 = staticinvoke <androidx.ui.core.gesture.DragSlopExceededGestureFilterKt: androidx.ui.core.Direction verticalDirection(androidx.ui.geometry.Offset)>($r0);

        return $r1;
    }

