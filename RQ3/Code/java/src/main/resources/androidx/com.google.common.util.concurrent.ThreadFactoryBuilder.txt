com.google.common.util.concurrent.ThreadFactoryBuilder
<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory>
<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon>
<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat>
<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority>
<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>
    public void <init>()
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r0;

        $r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat> = null;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon> = null;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority> = null;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler> = null;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory> = null;

        return;
    }

    static java.lang.String access$000(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r0);

        return $r1;
    }

    private static java.util.concurrent.ThreadFactory doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder)
    {
        java.lang.String $r0;
        java.lang.Boolean $r1;
        java.lang.Integer $r2;
        java.lang.Thread$UncaughtExceptionHandler $r3;
        java.util.concurrent.ThreadFactory $r4;
        com.google.common.util.concurrent.ThreadFactoryBuilder $r5;
        java.util.concurrent.atomic.AtomicLong $r6;
        com.google.common.util.concurrent.ThreadFactoryBuilder$1 $r7;

        $r5 := @parameter0: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $r0 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat>;

        $r1 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon>;

        $r2 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority>;

        $r3 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;

        $r4 = $r5.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory>;

        if $r4 == null goto label1;

        goto label2;

     label1:
        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

     label2:
        if $r0 == null goto label3;

        $r6 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        goto label4;

     label3:
        $r6 = null;

     label4:
        $r7 = new com.google.common.util.concurrent.ThreadFactoryBuilder$1;

        specialinvoke $r7.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: void <init>(java.util.concurrent.ThreadFactory,java.lang.String,java.util.concurrent.atomic.AtomicLong,java.lang.Boolean,java.lang.Integer,java.lang.Thread$UncaughtExceptionHandler)>($r4, $r0, $r6, $r1, $r2, $r3);

        return $r7;
    }

    private static transient java.lang.String format(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.util.Locale $r1;
        java.lang.String $r2;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.Object[];

        $r1 = <java.util.Locale: java.util.Locale ROOT>;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, $r2, $r0);

        return $r2;
    }

    public java.util.concurrent.ThreadFactory build()
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r0;
        java.util.concurrent.ThreadFactory $r1;

        $r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $r1 = staticinvoke <com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder)>($r0);

        return $r1;
    }

    public com.google.common.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r0;
        java.lang.Boolean $r1;
        boolean $z0;

        $r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon> = $r1;

        return $r0;
    }

    public com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder $r0;
        java.lang.String $r1;
        java.lang.Integer $r2;
        java.lang.Object[] $r3;

        $r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder;

        $r1 := @parameter0: java.lang.String;

        $r3 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[0] = $r2;

        staticinvoke <com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r3);

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat> = $r1;

        return $r0;
    }

com.google.common.util.concurrent.ThreadFactoryBuilder$1
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.ThreadFactory val$backingThreadFactory>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.atomic.AtomicLong val$count>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Boolean val$daemon>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.String val$nameFormat>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Integer val$priority>
<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler>
    void <init>(java.util.concurrent.ThreadFactory, java.lang.String, java.util.concurrent.atomic.AtomicLong, java.lang.Boolean, java.lang.Integer, java.lang.Thread$UncaughtExceptionHandler)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder$1 $r0;
        java.util.concurrent.ThreadFactory $r1;
        java.lang.String $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        java.lang.Boolean $r4;
        java.lang.Integer $r5;
        java.lang.Thread$UncaughtExceptionHandler $r6;

        $r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder$1;

        $r1 := @parameter0: java.util.concurrent.ThreadFactory;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.concurrent.atomic.AtomicLong;

        $r4 := @parameter3: java.lang.Boolean;

        $r5 := @parameter4: java.lang.Integer;

        $r6 := @parameter5: java.lang.Thread$UncaughtExceptionHandler;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.ThreadFactory val$backingThreadFactory> = $r1;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.String val$nameFormat> = $r2;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.atomic.AtomicLong val$count> = $r3;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Boolean val$daemon> = $r4;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Integer val$priority> = $r5;

        $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler> = $r6;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        com.google.common.util.concurrent.ThreadFactoryBuilder$1 $r0;
        java.lang.Runnable $r1;
        java.util.concurrent.ThreadFactory $r2;
        java.lang.Thread $r3;
        java.lang.String $r4;
        java.lang.Object[] $r5;
        java.util.concurrent.atomic.AtomicLong $r6;
        long $l0;
        java.lang.Long $r7;
        java.lang.Boolean $r8;
        boolean $z0;
        java.lang.Integer $r9;
        int $i1;
        java.lang.Thread$UncaughtExceptionHandler $r10;

        $r0 := @this: com.google.common.util.concurrent.ThreadFactoryBuilder$1;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.ThreadFactory val$backingThreadFactory>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>($r1);

        $r4 = $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.String val$nameFormat>;

        if $r4 == null goto label1;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.atomic.AtomicLong val$count>;

        virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $l0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5[0] = $r7;

        $r4 = staticinvoke <com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String access$000(java.lang.String,java.lang.Object[])>($r4, $r5);

        virtualinvoke $r3.<java.lang.Thread: void setName(java.lang.String)>($r4);

     label1:
        $r8 = $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Boolean val$daemon>;

        if $r8 == null goto label2;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r3.<java.lang.Thread: void setDaemon(boolean)>($z0);

     label2:
        $r9 = $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Integer val$priority>;

        if $r9 == null goto label3;

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        virtualinvoke $r3.<java.lang.Thread: void setPriority(int)>($i1);

     label3:
        $r10 = $r0.<com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler>;

        if $r10 == null goto label4;

        virtualinvoke $r3.<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r10);

     label4:
        return $r3;
    }

