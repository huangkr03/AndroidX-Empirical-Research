kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher
<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int corePoolSize>
<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>
<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: long idleWorkerKeepAliveNs>
<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int maxPoolSize>
<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: java.lang.String schedulerName>
    public void <init>(int, int, long, java.lang.String)
    {
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher $r0;
        int $i0, $i2;
        long $l1;
        java.lang.String $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;

        $r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "schedulerName");

        specialinvoke $r0.<kotlinx.coroutines.ExecutorCoroutineDispatcher: void <init>()>();

        $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int corePoolSize> = $i2;

        $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int maxPoolSize> = $i0;

        $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: long idleWorkerKeepAliveNs> = $l1;

        $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: java.lang.String schedulerName> = $r1;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()>();

        $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler> = $r2;

        return;
    }

    private final kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()
    {
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher $r0;
        int $i0, $i1;
        long $l2;
        java.lang.String $r1;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r2;

        $r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r2 = new kotlinx.coroutines.scheduling.CoroutineScheduler;

        $i0 = $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int corePoolSize>;

        $i1 = $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: int maxPoolSize>;

        $l2 = $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: long idleWorkerKeepAliveNs>;

        $r1 = $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: java.lang.String schedulerName>;

        specialinvoke $r2.<kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>($i0, $i1, $l2, $r1);

        return $r2;
    }

    public void close()
    {
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher $r0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r1;

        $r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r1 = $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r1.<kotlinx.coroutines.scheduling.CoroutineScheduler: void close()>();

        return;
    }

    public void dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable)
    {
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher $r0;
        java.lang.Runnable $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;

        $r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 := @parameter1: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        $r3 = $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        staticinvoke <kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)>($r3, $r1, null, 0, 6, null);

        return;
    }

    public final void dispatchWithContext$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean)
    {
        kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher $r0;
        java.lang.Runnable $r1;
        kotlinx.coroutines.scheduling.TaskContext $r2;
        boolean $z0;
        kotlinx.coroutines.scheduling.CoroutineScheduler $r3;

        $r0 := @this: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 := @parameter1: kotlinx.coroutines.scheduling.TaskContext;

        $z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "block");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "context");

        $r3 = $r0.<kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler>;

        virtualinvoke $r3.<kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)>($r1, $r2, $z0);

        return;
    }

