androidx.constraintlayout.core.LinearSystem
<androidx.constraintlayout.core.LinearSystem: boolean FULL_DEBUG>
<androidx.constraintlayout.core.LinearSystem: boolean DEBUG>
<androidx.constraintlayout.core.LinearSystem: boolean MEASURE>
<androidx.constraintlayout.core.LinearSystem: boolean DEBUG_CONSTRAINTS>
<androidx.constraintlayout.core.LinearSystem: boolean USE_DEPENDENCY_ORDERING>
<androidx.constraintlayout.core.LinearSystem: boolean USE_BASIC_SYNONYMS>
<androidx.constraintlayout.core.LinearSystem: boolean SIMPLIFY_SYNONYMS>
<androidx.constraintlayout.core.LinearSystem: boolean USE_SYNONYMS>
<androidx.constraintlayout.core.LinearSystem: boolean SKIP_COLUMNS>
<androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE>
<androidx.constraintlayout.core.LinearSystem: int POOL_SIZE>
<androidx.constraintlayout.core.LinearSystem: boolean hasSimpleDefinition>
<androidx.constraintlayout.core.LinearSystem: int mVariablesID>
<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables>
<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>
<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>
<androidx.constraintlayout.core.LinearSystem: int mMaxColumns>
<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>
<androidx.constraintlayout.core.LinearSystem: boolean graphOptimizer>
<androidx.constraintlayout.core.LinearSystem: boolean newgraphOptimizer>
<androidx.constraintlayout.core.LinearSystem: boolean[] mAlreadyTestedCandidates>
<androidx.constraintlayout.core.LinearSystem: int mNumColumns>
<androidx.constraintlayout.core.LinearSystem: int mNumRows>
<androidx.constraintlayout.core.LinearSystem: int mMaxRows>
<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>
<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable[] mPoolVariables>
<androidx.constraintlayout.core.LinearSystem: int mPoolVariablesCount>
<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>
<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mTempGoal>
<androidx.constraintlayout.core.LinearSystem: long ARRAY_ROW_CREATION>
<androidx.constraintlayout.core.LinearSystem: long OPTIMIZED_ARRAY_ROW_CREATION>
    public void <init>()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int $i0, $i1, $i2, $i3, $i4;
        boolean[] $r1;
        androidx.constraintlayout.core.SolverVariable[] $r2;
        androidx.constraintlayout.core.ArrayRow[] $r3;
        androidx.constraintlayout.core.Cache $r4, $r6, $r8, $r10;
        androidx.constraintlayout.core.PriorityGoalRow $r5;
        boolean $z0;
        androidx.constraintlayout.core.ArrayRow $r7;
        androidx.constraintlayout.core.LinearSystem$ValuesRow $r9;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.constraintlayout.core.LinearSystem: boolean hasSimpleDefinition> = 0;

        r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID> = 0;

        r0.<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables> = null;

        r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE> = 32;

        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        r0.<androidx.constraintlayout.core.LinearSystem: int mMaxColumns> = $i0;

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows> = null;

        r0.<androidx.constraintlayout.core.LinearSystem: boolean graphOptimizer> = 0;

        r0.<androidx.constraintlayout.core.LinearSystem: boolean newgraphOptimizer> = 0;

        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $r1 = newarray (boolean)[$i1];

        r0.<androidx.constraintlayout.core.LinearSystem: boolean[] mAlreadyTestedCandidates> = $r1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns> = 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows> = 0;

        $i2 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        r0.<androidx.constraintlayout.core.LinearSystem: int mMaxRows> = $i2;

        $i3 = <androidx.constraintlayout.core.LinearSystem: int POOL_SIZE>;

        $r2 = newarray (androidx.constraintlayout.core.SolverVariable)[$i3];

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable[] mPoolVariables> = $r2;

        r0.<androidx.constraintlayout.core.LinearSystem: int mPoolVariablesCount> = 0;

        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $r3 = newarray (androidx.constraintlayout.core.ArrayRow)[$i4];

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows> = $r3;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void releaseRows()>();

        $r4 = new androidx.constraintlayout.core.Cache;

        specialinvoke $r4.<androidx.constraintlayout.core.Cache: void <init>()>();

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache> = $r4;

        $r5 = new androidx.constraintlayout.core.PriorityGoalRow;

        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        specialinvoke $r5.<androidx.constraintlayout.core.PriorityGoalRow: void <init>(androidx.constraintlayout.core.Cache)>($r6);

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal> = $r5;

        $z0 = <androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $z0 == 0 goto label1;

        $r9 = new androidx.constraintlayout.core.LinearSystem$ValuesRow;

        $r10 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        specialinvoke $r9.<androidx.constraintlayout.core.LinearSystem$ValuesRow: void <init>(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.Cache)>(r0, $r10);

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mTempGoal> = $r9;

        goto label2;

     label1:
        $r7 = new androidx.constraintlayout.core.ArrayRow;

        $r8 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        specialinvoke $r7.<androidx.constraintlayout.core.ArrayRow: void <init>(androidx.constraintlayout.core.Cache)>($r8);

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mTempGoal> = $r7;

     label2:
        return;
    }

    public void fillMetrics(androidx.constraintlayout.core.Metrics)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.Metrics r1;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.Metrics;

        <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics> = r1;

        return;
    }

    public static androidx.constraintlayout.core.Metrics getMetrics()
    {
        androidx.constraintlayout.core.Metrics $r0;

        $r0 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        return $r0;
    }

    private void increaseTableSize()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9;
        androidx.constraintlayout.core.ArrayRow[] $r1, $r3;
        java.lang.Object[] $r2, $r7;
        androidx.constraintlayout.core.Cache $r4, $r6;
        androidx.constraintlayout.core.SolverVariable[] $r5, $r8;
        boolean[] $r9;
        androidx.constraintlayout.core.Metrics $r10, $r11, $r12, $r13, $r14, $r15;
        long $l7, $l8, $l10, $l11, $l12, $l13;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $i1 = $i0 * 2;

        r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE> = $i1;

        $r1 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $i2 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i2);

        $r3 = (androidx.constraintlayout.core.ArrayRow[]) $r2;

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows> = $r3;

        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r4 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r5 = $r4.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i3 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i3);

        $r8 = (androidx.constraintlayout.core.SolverVariable[]) $r7;

        $r6.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables> = $r8;

        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $r9 = newarray (boolean)[$i4];

        r0.<androidx.constraintlayout.core.LinearSystem: boolean[] mAlreadyTestedCandidates> = $r9;

        $i5 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        r0.<androidx.constraintlayout.core.LinearSystem: int mMaxColumns> = $i5;

        $i6 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        r0.<androidx.constraintlayout.core.LinearSystem: int mMaxRows> = $i6;

        $r10 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r10 == null goto label1;

        $r11 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l7 = $r11.<androidx.constraintlayout.core.Metrics: long tableSizeIncrease>;

        $l8 = $l7 + 1L;

        $r11.<androidx.constraintlayout.core.Metrics: long tableSizeIncrease> = $l8;

        $r13 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $r12 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l11 = $r12.<androidx.constraintlayout.core.Metrics: long maxTableSize>;

        $i9 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $l10 = (long) $i9;

        $l12 = staticinvoke <java.lang.Math: long max(long,long)>($l11, $l10);

        $r13.<androidx.constraintlayout.core.Metrics: long maxTableSize> = $l12;

        $r15 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $r14 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l13 = $r14.<androidx.constraintlayout.core.Metrics: long maxTableSize>;

        $r15.<androidx.constraintlayout.core.Metrics: long lastTableSize> = $l13;

     label1:
        return;
    }

    private void releaseRows()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        boolean $z0;
        int $i0, $i1, i2, i3;
        androidx.constraintlayout.core.ArrayRow[] $r1, $r2, $r5, $r6;
        androidx.constraintlayout.core.Cache $r3, $r7;
        androidx.constraintlayout.core.Pools$Pool $r4, $r8;
        androidx.constraintlayout.core.ArrayRow r9, r10;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $z0 = <androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $z0 == 0 goto label4;

        i2 = 0;

     label1:
        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i2 >= $i1 goto label3;

        $r5 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r9 = $r5[i2];

        if r9 == null goto label2;

        $r7 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r8 = $r7.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool optimizedArrayRowPool>;

        interfaceinvoke $r8.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r9);

     label2:
        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r6[i2] = null;

        i2 = i2 + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        i3 = 0;

     label5:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i3 >= $i0 goto label7;

        $r1 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r10 = $r1[i3];

        if r10 == null goto label6;

        $r3 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r4 = $r3.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool arrayRowPool>;

        interfaceinvoke $r4.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r10);

     label6:
        $r2 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r2[i3] = null;

        i3 = i3 + 1;

        goto label5;

     label7:
        return;
    }

    public void reset()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1;
        androidx.constraintlayout.core.Cache $r2, $r4, $r7, $r12, $r14, $r20;
        androidx.constraintlayout.core.SolverVariable[] $r3, $r5, $r8, $r21;
        int $i0, $i1, i2, i3, $i4;
        androidx.constraintlayout.core.Pools$Pool $r6;
        java.util.HashMap $r9, $r19;
        androidx.constraintlayout.core.LinearSystem$Row $r10;
        boolean $z0;
        androidx.constraintlayout.core.ArrayRow $r11, $r16, $r18;
        androidx.constraintlayout.core.LinearSystem$ValuesRow $r13;
        androidx.constraintlayout.core.ArrayRow[] $r15, $r17;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        i2 = 0;

     label1:
        $r2 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r3 = $r2.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i0 = lengthof $r3;

        if i2 >= $i0 goto label3;

        $r20 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r21 = $r20.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        r1 = $r21[i2];

        if r1 == null goto label2;

        virtualinvoke r1.<androidx.constraintlayout.core.SolverVariable: void reset()>();

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r4 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r6 = $r4.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool solverVariablePool>;

        $r5 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable[] mPoolVariables>;

        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mPoolVariablesCount>;

        interfaceinvoke $r6.<androidx.constraintlayout.core.Pools$Pool: void releaseAll(java.lang.Object[],int)>($r5, $i1);

        r0.<androidx.constraintlayout.core.LinearSystem: int mPoolVariablesCount> = 0;

        $r7 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r8 = $r7.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r8, null);

        $r9 = r0.<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables>;

        if $r9 == null goto label4;

        $r19 = r0.<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables>;

        virtualinvoke $r19.<java.util.HashMap: void clear()>();

     label4:
        r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID> = 0;

        $r10 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        interfaceinvoke $r10.<androidx.constraintlayout.core.LinearSystem$Row: void clear()>();

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns> = 1;

        i3 = 0;

     label5:
        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i3 >= $i4 goto label7;

        $r15 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r16 = $r15[i3];

        if $r16 == null goto label6;

        $r17 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r18 = $r17[i3];

        $r18.<androidx.constraintlayout.core.ArrayRow: boolean used> = 0;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void releaseRows()>();

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows> = 0;

        $z0 = <androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $z0 == 0 goto label8;

        $r13 = new androidx.constraintlayout.core.LinearSystem$ValuesRow;

        $r14 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        specialinvoke $r13.<androidx.constraintlayout.core.LinearSystem$ValuesRow: void <init>(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.Cache)>(r0, $r14);

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mTempGoal> = $r13;

        goto label9;

     label8:
        $r11 = new androidx.constraintlayout.core.ArrayRow;

        $r12 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        specialinvoke $r11.<androidx.constraintlayout.core.ArrayRow: void <init>(androidx.constraintlayout.core.Cache)>($r12);

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mTempGoal> = $r11;

     label9:
        return;
    }

    public androidx.constraintlayout.core.SolverVariable createObjectVariable(java.lang.Object)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        java.lang.Object r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0;
        androidx.constraintlayout.core.widgets.ConstraintAnchor $r2, $r12, $r13;
        androidx.constraintlayout.core.SolverVariable$Type $r3;
        androidx.constraintlayout.core.Cache $r4, $r8, $r11;
        androidx.constraintlayout.core.SolverVariable[] $r5, $r9;
        androidx.constraintlayout.core.SolverVariable $r10, r14;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return null;

     label1:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i2 = $i0 + 1;

        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mMaxColumns>;

        if $i2 < $i1 goto label2;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void increaseTableSize()>();

     label2:
        r14 = null;

        $z0 = r1 instanceof androidx.constraintlayout.core.widgets.ConstraintAnchor;

        if $z0 == 0 goto label6;

        $r2 = (androidx.constraintlayout.core.widgets.ConstraintAnchor) r1;

        r14 = virtualinvoke $r2.<androidx.constraintlayout.core.widgets.ConstraintAnchor: androidx.constraintlayout.core.SolverVariable getSolverVariable()>();

        if r14 != null goto label3;

        $r12 = (androidx.constraintlayout.core.widgets.ConstraintAnchor) r1;

        $r11 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        virtualinvoke $r12.<androidx.constraintlayout.core.widgets.ConstraintAnchor: void resetSolverVariable(androidx.constraintlayout.core.Cache)>($r11);

        $r13 = (androidx.constraintlayout.core.widgets.ConstraintAnchor) r1;

        r14 = virtualinvoke $r13.<androidx.constraintlayout.core.widgets.ConstraintAnchor: androidx.constraintlayout.core.SolverVariable getSolverVariable()>();

     label3:
        $i3 = r14.<androidx.constraintlayout.core.SolverVariable: int id>;

        if $i3 == -1 goto label4;

        $i11 = r14.<androidx.constraintlayout.core.SolverVariable: int id>;

        $i10 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        if $i11 > $i10 goto label4;

        $r8 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r9 = $r8.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i12 = r14.<androidx.constraintlayout.core.SolverVariable: int id>;

        $r10 = $r9[$i12];

        if $r10 != null goto label6;

     label4:
        $i13 = r14.<androidx.constraintlayout.core.SolverVariable: int id>;

        if $i13 == -1 goto label5;

        virtualinvoke r14.<androidx.constraintlayout.core.SolverVariable: void reset()>();

     label5:
        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $i5 = $i4 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID> = $i5;

        $i6 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i7 = $i6 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns> = $i7;

        $i8 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        r14.<androidx.constraintlayout.core.SolverVariable: int id> = $i8;

        $r3 = <androidx.constraintlayout.core.SolverVariable$Type: androidx.constraintlayout.core.SolverVariable$Type UNRESTRICTED>;

        r14.<androidx.constraintlayout.core.SolverVariable: androidx.constraintlayout.core.SolverVariable$Type mType> = $r3;

        $r4 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r5 = $r4.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i9 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $r5[$i9] = r14;

     label6:
        return r14;
    }

    public androidx.constraintlayout.core.ArrayRow createRow()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        boolean $z0;
        androidx.constraintlayout.core.Cache $r1, $r5, $r6, $r10;
        androidx.constraintlayout.core.Pools$Pool $r2, $r7;
        java.lang.Object $r3, $r8;
        androidx.constraintlayout.core.ArrayRow $r4, r11;
        long $l0, $l1, $l2, $l3;
        androidx.constraintlayout.core.LinearSystem$ValuesRow $r9;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $z0 = <androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $z0 == 0 goto label2;

        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r7 = $r6.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool optimizedArrayRowPool>;

        $r8 = interfaceinvoke $r7.<androidx.constraintlayout.core.Pools$Pool: java.lang.Object acquire()>();

        r11 = (androidx.constraintlayout.core.ArrayRow) $r8;

        if r11 != null goto label1;

        $r9 = new androidx.constraintlayout.core.LinearSystem$ValuesRow;

        $r10 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        specialinvoke $r9.<androidx.constraintlayout.core.LinearSystem$ValuesRow: void <init>(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.Cache)>(r0, $r10);

        r11 = $r9;

        $l2 = <androidx.constraintlayout.core.LinearSystem: long OPTIMIZED_ARRAY_ROW_CREATION>;

        $l3 = $l2 + 1L;

        <androidx.constraintlayout.core.LinearSystem: long OPTIMIZED_ARRAY_ROW_CREATION> = $l3;

        goto label4;

     label1:
        virtualinvoke r11.<androidx.constraintlayout.core.ArrayRow: void reset()>();

        goto label4;

     label2:
        $r1 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r2 = $r1.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool arrayRowPool>;

        $r3 = interfaceinvoke $r2.<androidx.constraintlayout.core.Pools$Pool: java.lang.Object acquire()>();

        r11 = (androidx.constraintlayout.core.ArrayRow) $r3;

        if r11 != null goto label3;

        $r4 = new androidx.constraintlayout.core.ArrayRow;

        $r5 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        specialinvoke $r4.<androidx.constraintlayout.core.ArrayRow: void <init>(androidx.constraintlayout.core.Cache)>($r5);

        r11 = $r4;

        $l0 = <androidx.constraintlayout.core.LinearSystem: long ARRAY_ROW_CREATION>;

        $l1 = $l0 + 1L;

        <androidx.constraintlayout.core.LinearSystem: long ARRAY_ROW_CREATION> = $l1;

        goto label4;

     label3:
        virtualinvoke r11.<androidx.constraintlayout.core.ArrayRow: void reset()>();

     label4:
        staticinvoke <androidx.constraintlayout.core.SolverVariable: void increaseErrorId()>();

        return r11;
    }

    public androidx.constraintlayout.core.SolverVariable createSlackVariable()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1;
        androidx.constraintlayout.core.Metrics $r2, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.constraintlayout.core.SolverVariable$Type $r3;
        androidx.constraintlayout.core.Cache $r4;
        androidx.constraintlayout.core.SolverVariable[] $r5;
        long $l9, $l10;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $r2 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r2 == null goto label1;

        $r8 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l9 = $r8.<androidx.constraintlayout.core.Metrics: long slackvariables>;

        $l10 = $l9 + 1L;

        $r8.<androidx.constraintlayout.core.Metrics: long slackvariables> = $l10;

     label1:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i2 = $i0 + 1;

        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mMaxColumns>;

        if $i2 < $i1 goto label2;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void increaseTableSize()>();

     label2:
        $r3 = <androidx.constraintlayout.core.SolverVariable$Type: androidx.constraintlayout.core.SolverVariable$Type SLACK>;

        r1 = specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable acquireSolverVariable(androidx.constraintlayout.core.SolverVariable$Type,java.lang.String)>($r3, null);

        $i3 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $i4 = $i3 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID> = $i4;

        $i5 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i6 = $i5 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns> = $i6;

        $i7 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        r1.<androidx.constraintlayout.core.SolverVariable: int id> = $i7;

        $r4 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r5 = $r4.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i8 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $r5[$i8] = r1;

        return r1;
    }

    public androidx.constraintlayout.core.SolverVariable createExtraVariable()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1;
        androidx.constraintlayout.core.Metrics $r2, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        androidx.constraintlayout.core.SolverVariable$Type $r3;
        androidx.constraintlayout.core.Cache $r4;
        androidx.constraintlayout.core.SolverVariable[] $r5;
        long $l9, $l10;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $r2 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r2 == null goto label1;

        $r8 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l9 = $r8.<androidx.constraintlayout.core.Metrics: long extravariables>;

        $l10 = $l9 + 1L;

        $r8.<androidx.constraintlayout.core.Metrics: long extravariables> = $l10;

     label1:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i2 = $i0 + 1;

        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mMaxColumns>;

        if $i2 < $i1 goto label2;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void increaseTableSize()>();

     label2:
        $r3 = <androidx.constraintlayout.core.SolverVariable$Type: androidx.constraintlayout.core.SolverVariable$Type SLACK>;

        r1 = specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable acquireSolverVariable(androidx.constraintlayout.core.SolverVariable$Type,java.lang.String)>($r3, null);

        $i3 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $i4 = $i3 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID> = $i4;

        $i5 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i6 = $i5 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns> = $i6;

        $i7 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        r1.<androidx.constraintlayout.core.SolverVariable: int id> = $i7;

        $r4 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r5 = $r4.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i8 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $r5[$i8] = r1;

        return r1;
    }

    private void addError(androidx.constraintlayout.core.ArrayRow)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.ArrayRow r1;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.ArrayRow;

        virtualinvoke r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow addError(androidx.constraintlayout.core.LinearSystem,int)>(r0, 0);

        return;
    }

    private void addSingleError(androidx.constraintlayout.core.ArrayRow, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.ArrayRow r1;
        int i0;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.ArrayRow;

        i0 := @parameter1: int;

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addSingleError(androidx.constraintlayout.core.ArrayRow,int,int)>(r1, i0, 0);

        return;
    }

    void addSingleError(androidx.constraintlayout.core.ArrayRow, int, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.ArrayRow r1;
        int i0, i1;
        androidx.constraintlayout.core.SolverVariable r2;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.ArrayRow;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createErrorVariable(int,java.lang.String)>(i1, null);

        virtualinvoke r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow addSingleError(androidx.constraintlayout.core.SolverVariable,int)>(r2, i0);

        return;
    }

    private androidx.constraintlayout.core.SolverVariable createVariable(java.lang.String, androidx.constraintlayout.core.SolverVariable$Type)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        java.lang.String r1;
        androidx.constraintlayout.core.SolverVariable$Type r2;
        androidx.constraintlayout.core.SolverVariable r3;
        androidx.constraintlayout.core.Metrics $r4, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.HashMap $r5, $r6, $r10;
        androidx.constraintlayout.core.Cache $r8;
        androidx.constraintlayout.core.SolverVariable[] $r9;
        long $l9, $l10;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.constraintlayout.core.SolverVariable$Type;

        $r4 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r4 == null goto label1;

        $r13 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l9 = $r13.<androidx.constraintlayout.core.Metrics: long variables>;

        $l10 = $l9 + 1L;

        $r13.<androidx.constraintlayout.core.Metrics: long variables> = $l10;

     label1:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i2 = $i0 + 1;

        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mMaxColumns>;

        if $i2 < $i1 goto label2;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void increaseTableSize()>();

     label2:
        r3 = specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable acquireSolverVariable(androidx.constraintlayout.core.SolverVariable$Type,java.lang.String)>(r2, null);

        virtualinvoke r3.<androidx.constraintlayout.core.SolverVariable: void setName(java.lang.String)>(r1);

        $i3 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $i4 = $i3 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID> = $i4;

        $i5 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i6 = $i5 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns> = $i6;

        $i7 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        r3.<androidx.constraintlayout.core.SolverVariable: int id> = $i7;

        $r5 = r0.<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables>;

        if $r5 != null goto label3;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables> = $r10;

     label3:
        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        $r8 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r9 = $r8.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i8 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $r9[$i8] = r3;

        return r3;
    }

    public androidx.constraintlayout.core.SolverVariable createErrorVariable(int, java.lang.String)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r1;
        androidx.constraintlayout.core.SolverVariable r2;
        androidx.constraintlayout.core.Metrics $r3, $r10;
        androidx.constraintlayout.core.SolverVariable$Type $r4;
        androidx.constraintlayout.core.Cache $r5;
        androidx.constraintlayout.core.SolverVariable[] $r6;
        androidx.constraintlayout.core.LinearSystem$Row $r7;
        long $l10, $l11;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r3 == null goto label1;

        $r10 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l10 = $r10.<androidx.constraintlayout.core.Metrics: long errors>;

        $l11 = $l10 + 1L;

        $r10.<androidx.constraintlayout.core.Metrics: long errors> = $l11;

     label1:
        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i3 = $i1 + 1;

        $i2 = r0.<androidx.constraintlayout.core.LinearSystem: int mMaxColumns>;

        if $i3 < $i2 goto label2;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void increaseTableSize()>();

     label2:
        $r4 = <androidx.constraintlayout.core.SolverVariable$Type: androidx.constraintlayout.core.SolverVariable$Type ERROR>;

        r2 = specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable acquireSolverVariable(androidx.constraintlayout.core.SolverVariable$Type,java.lang.String)>($r4, r1);

        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $i5 = $i4 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID> = $i5;

        $i6 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i7 = $i6 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns> = $i7;

        $i8 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        r2.<androidx.constraintlayout.core.SolverVariable: int id> = $i8;

        r2.<androidx.constraintlayout.core.SolverVariable: int strength> = i0;

        $r5 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r6 = $r5.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i9 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $r6[$i9] = r2;

        $r7 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        interfaceinvoke $r7.<androidx.constraintlayout.core.LinearSystem$Row: void addError(androidx.constraintlayout.core.SolverVariable)>(r2);

        return r2;
    }

    private androidx.constraintlayout.core.SolverVariable acquireSolverVariable(androidx.constraintlayout.core.SolverVariable$Type, java.lang.String)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable$Type r1;
        java.lang.String r2;
        androidx.constraintlayout.core.Cache $r3;
        androidx.constraintlayout.core.Pools$Pool $r4;
        java.lang.Object $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        androidx.constraintlayout.core.SolverVariable[] $r6, $r7, $r9;
        java.lang.Object[] $r8;
        androidx.constraintlayout.core.SolverVariable $r11, r12;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.SolverVariable$Type;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r4 = $r3.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool solverVariablePool>;

        $r5 = interfaceinvoke $r4.<androidx.constraintlayout.core.Pools$Pool: java.lang.Object acquire()>();

        r12 = (androidx.constraintlayout.core.SolverVariable) $r5;

        if r12 != null goto label1;

        $r11 = new androidx.constraintlayout.core.SolverVariable;

        specialinvoke $r11.<androidx.constraintlayout.core.SolverVariable: void <init>(androidx.constraintlayout.core.SolverVariable$Type,java.lang.String)>(r1, r2);

        r12 = $r11;

        virtualinvoke r12.<androidx.constraintlayout.core.SolverVariable: void setType(androidx.constraintlayout.core.SolverVariable$Type,java.lang.String)>(r1, r2);

        goto label2;

     label1:
        virtualinvoke r12.<androidx.constraintlayout.core.SolverVariable: void reset()>();

        virtualinvoke r12.<androidx.constraintlayout.core.SolverVariable: void setType(androidx.constraintlayout.core.SolverVariable$Type,java.lang.String)>(r1, r2);

     label2:
        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mPoolVariablesCount>;

        $i0 = <androidx.constraintlayout.core.LinearSystem: int POOL_SIZE>;

        if $i1 < $i0 goto label3;

        $i4 = <androidx.constraintlayout.core.LinearSystem: int POOL_SIZE>;

        $i5 = $i4 * 2;

        <androidx.constraintlayout.core.LinearSystem: int POOL_SIZE> = $i5;

        $r7 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable[] mPoolVariables>;

        $i6 = <androidx.constraintlayout.core.LinearSystem: int POOL_SIZE>;

        $r8 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r7, $i6);

        $r9 = (androidx.constraintlayout.core.SolverVariable[]) $r8;

        r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable[] mPoolVariables> = $r9;

     label3:
        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable[] mPoolVariables>;

        $i2 = r0.<androidx.constraintlayout.core.LinearSystem: int mPoolVariablesCount>;

        $i3 = $i2 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mPoolVariablesCount> = $i3;

        $r6[$i2] = r12;

        return r12;
    }

    androidx.constraintlayout.core.LinearSystem$Row getGoal()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.LinearSystem$Row $r1;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $r1 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        return $r1;
    }

    androidx.constraintlayout.core.ArrayRow getRow(int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int i0;
        androidx.constraintlayout.core.ArrayRow[] $r1;
        androidx.constraintlayout.core.ArrayRow $r2;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        i0 := @parameter0: int;

        $r1 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r2 = $r1[i0];

        return $r2;
    }

    float getValueFor(java.lang.String)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        java.lang.String r1;
        androidx.constraintlayout.core.SolverVariable r2;
        androidx.constraintlayout.core.SolverVariable$Type $r3;
        float $f0;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: java.lang.String;

        $r3 = <androidx.constraintlayout.core.SolverVariable$Type: androidx.constraintlayout.core.SolverVariable$Type UNRESTRICTED>;

        r2 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable getVariable(java.lang.String,androidx.constraintlayout.core.SolverVariable$Type)>(r1, $r3);

        if r2 != null goto label1;

        return 0.0F;

     label1:
        $f0 = r2.<androidx.constraintlayout.core.SolverVariable: float computedValue>;

        return $f0;
    }

    public int getObjectVariableValue(java.lang.Object)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        java.lang.Object r1;
        androidx.constraintlayout.core.widgets.ConstraintAnchor r2;
        androidx.constraintlayout.core.SolverVariable r3;
        float $f0, $f1;
        int $i0;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: java.lang.Object;

        r2 = (androidx.constraintlayout.core.widgets.ConstraintAnchor) r1;

        r3 = virtualinvoke r2.<androidx.constraintlayout.core.widgets.ConstraintAnchor: androidx.constraintlayout.core.SolverVariable getSolverVariable()>();

        if r3 == null goto label1;

        $f0 = r3.<androidx.constraintlayout.core.SolverVariable: float computedValue>;

        $f1 = $f0 + 0.5F;

        $i0 = (int) $f1;

        return $i0;

     label1:
        return 0;
    }

    androidx.constraintlayout.core.SolverVariable getVariable(java.lang.String, androidx.constraintlayout.core.SolverVariable$Type)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        java.lang.String r1;
        androidx.constraintlayout.core.SolverVariable$Type r2;
        java.util.HashMap $r3, $r4, $r6;
        java.lang.Object $r5;
        androidx.constraintlayout.core.SolverVariable r7;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: androidx.constraintlayout.core.SolverVariable$Type;

        $r3 = r0.<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables>;

        if $r3 != null goto label1;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables> = $r6;

     label1:
        $r4 = r0.<androidx.constraintlayout.core.LinearSystem: java.util.HashMap mVariables>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (androidx.constraintlayout.core.SolverVariable) $r5;

        if r7 != null goto label2;

        r7 = specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createVariable(java.lang.String,androidx.constraintlayout.core.SolverVariable$Type)>(r1, r2);

     label2:
        return r7;
    }

    public void minimize() throws java.lang.Exception
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.ArrayRow r1;
        androidx.constraintlayout.core.Metrics $r2, $r4, $r5, $r6, $r9, $r11;
        androidx.constraintlayout.core.LinearSystem$Row $r3, $r7, $r10;
        boolean $z0, $z1, $z2, $z3, z4;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        androidx.constraintlayout.core.ArrayRow[] $r8;
        int i6, $i7;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $r2 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r2 == null goto label01;

        $r11 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l4 = $r11.<androidx.constraintlayout.core.Metrics: long minimize>;

        $l5 = $l4 + 1L;

        $r11.<androidx.constraintlayout.core.Metrics: long minimize> = $l5;

     label01:
        $r3 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        $z0 = interfaceinvoke $r3.<androidx.constraintlayout.core.LinearSystem$Row: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void computeValues()>();

        return;

     label02:
        $z1 = r0.<androidx.constraintlayout.core.LinearSystem: boolean graphOptimizer>;

        if $z1 != 0 goto label03;

        $z3 = r0.<androidx.constraintlayout.core.LinearSystem: boolean newgraphOptimizer>;

        if $z3 == 0 goto label11;

     label03:
        $r4 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r4 == null goto label04;

        $r9 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l2 = $r9.<androidx.constraintlayout.core.Metrics: long graphOptimizer>;

        $l3 = $l2 + 1L;

        $r9.<androidx.constraintlayout.core.Metrics: long graphOptimizer> = $l3;

     label04:
        z4 = 1;

        i6 = 0;

     label05:
        $i7 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i6 >= $i7 goto label07;

        $r8 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r1 = $r8[i6];

        $z2 = r1.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z2 != 0 goto label06;

        z4 = 0;

        goto label07;

     label06:
        i6 = i6 + 1;

        goto label05;

     label07:
        if z4 != 0 goto label08;

        $r7 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void minimizeGoal(androidx.constraintlayout.core.LinearSystem$Row)>($r7);

        goto label10;

     label08:
        $r5 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r5 == null goto label09;

        $r6 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l0 = $r6.<androidx.constraintlayout.core.Metrics: long fullySolved>;

        $l1 = $l0 + 1L;

        $r6.<androidx.constraintlayout.core.Metrics: long fullySolved> = $l1;

     label09:
        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void computeValues()>();

     label10:
        goto label12;

     label11:
        $r10 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void minimizeGoal(androidx.constraintlayout.core.LinearSystem$Row)>($r10);

     label12:
        return;
    }

    void minimizeGoal(androidx.constraintlayout.core.LinearSystem$Row) throws java.lang.Exception
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.LinearSystem$Row r1;
        androidx.constraintlayout.core.Metrics $r2, $r3, $r4, $r5, $r6, $r7;
        long $l2, $l3, $l5, $l6, $l7, $l9, $l10, $l11;
        int $i4, $i8;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.LinearSystem$Row;

        $r2 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r2 == null goto label1;

        $r3 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l2 = $r3.<androidx.constraintlayout.core.Metrics: long minimizeGoal>;

        $l3 = $l2 + 1L;

        $r3.<androidx.constraintlayout.core.Metrics: long minimizeGoal> = $l3;

        $r5 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $r4 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l6 = $r4.<androidx.constraintlayout.core.Metrics: long maxVariables>;

        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $l5 = (long) $i4;

        $l7 = staticinvoke <java.lang.Math: long max(long,long)>($l6, $l5);

        $r5.<androidx.constraintlayout.core.Metrics: long maxVariables> = $l7;

        $r7 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $r6 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l10 = $r6.<androidx.constraintlayout.core.Metrics: long maxRows>;

        $i8 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $l9 = (long) $i8;

        $l11 = staticinvoke <java.lang.Math: long max(long,long)>($l10, $l9);

        $r7.<androidx.constraintlayout.core.Metrics: long maxRows> = $l11;

     label1:
        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: int enforceBFS(androidx.constraintlayout.core.LinearSystem$Row)>(r1);

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: int optimize(androidx.constraintlayout.core.LinearSystem$Row,boolean)>(r1, 0);

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void computeValues()>();

        return;
    }

    final void cleanupRows()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.ArrayRow r1, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        androidx.constraintlayout.core.ArrayRow[] $r2, $r6, $r11, $r13;
        androidx.constraintlayout.core.ArrayRow$ArrayRowVariables $r3;
        boolean $z0, $z1;
        float $f0;
        androidx.constraintlayout.core.SolverVariable $r4, $r5;
        androidx.constraintlayout.core.Cache $r7, $r9;
        androidx.constraintlayout.core.Pools$Pool $r8, $r10;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        i9 = 0;

     label1:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i9 >= $i0 goto label7;

        $r2 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r1 = $r2[i9];

        $r3 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables>;

        $i1 = interfaceinvoke $r3.<androidx.constraintlayout.core.ArrayRow$ArrayRowVariables: int getCurrentSize()>();

        if $i1 != 0 goto label2;

        r1.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition> = 1;

     label2:
        $z0 = r1.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z0 == 0 goto label6;

        $r4 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $f0 = r1.<androidx.constraintlayout.core.ArrayRow: float constantValue>;

        $r4.<androidx.constraintlayout.core.SolverVariable: float computedValue> = $f0;

        $r5 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        virtualinvoke $r5.<androidx.constraintlayout.core.SolverVariable: void removeFromRow(androidx.constraintlayout.core.ArrayRow)>(r1);

        i10 = i9;

     label3:
        $i2 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i3 = $i2 - 1;

        if i10 >= $i3 goto label4;

        $r13 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r11 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $i8 = i10 + 1;

        $r12 = $r11[$i8];

        $r13[i10] = $r12;

        i10 = i10 + 1;

        goto label3;

     label4:
        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i5 = $i4 - 1;

        $r6[$i5] = null;

        $i6 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i7 = $i6 - 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows> = $i7;

        i9 = i9 + -1;

        $z1 = <androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $z1 == 0 goto label5;

        $r9 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r10 = $r9.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool optimizedArrayRowPool>;

        interfaceinvoke $r10.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r1);

        goto label6;

     label5:
        $r7 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r8 = $r7.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool arrayRowPool>;

        interfaceinvoke $r8.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r1);

     label6:
        i9 = i9 + 1;

        goto label1;

     label7:
        return;
    }

    public void addConstraint(androidx.constraintlayout.core.ArrayRow)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.ArrayRow r1;
        androidx.constraintlayout.core.SolverVariable r2, r3, $r7, $r13;
        int i0, $i1, $i2, $i4, $i5, $i6, $i9, $i10, $i11, $i16, $i17, $i18;
        androidx.constraintlayout.core.Metrics $r4, $r14, $r15, $r16, $r17;
        boolean $z0, $z1, $z2, $z5, z6, $z7, $z8, $z9;
        androidx.constraintlayout.core.LinearSystem$Row $r5, $r6;
        androidx.constraintlayout.core.Cache $r8, $r10;
        androidx.constraintlayout.core.Pools$Pool $r9, $r11;
        long $l7, $l8, $l12, $l13, $l14, $l15;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.ArrayRow;

        if r1 != null goto label01;

        return;

     label01:
        $r4 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r4 == null goto label02;

        $r16 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l12 = $r16.<androidx.constraintlayout.core.Metrics: long constraints>;

        $l13 = $l12 + 1L;

        $r16.<androidx.constraintlayout.core.Metrics: long constraints> = $l13;

        $z5 = r1.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z5 == 0 goto label02;

        $r17 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l14 = $r17.<androidx.constraintlayout.core.Metrics: long simpleconstraints>;

        $l15 = $l14 + 1L;

        $r17.<androidx.constraintlayout.core.Metrics: long simpleconstraints> = $l15;

     label02:
        $i16 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i17 = $i16 + 1;

        $i18 = r0.<androidx.constraintlayout.core.LinearSystem: int mMaxRows>;

        if $i17 >= $i18 goto label03;

        $i9 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i11 = $i9 + 1;

        $i10 = r0.<androidx.constraintlayout.core.LinearSystem: int mMaxColumns>;

        if $i11 < $i10 goto label04;

     label03:
        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void increaseTableSize()>();

     label04:
        z6 = 0;

        $z7 = r1.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z7 != 0 goto label12;

        virtualinvoke r1.<androidx.constraintlayout.core.ArrayRow: void updateFromSystem(androidx.constraintlayout.core.LinearSystem)>(r0);

        $z0 = virtualinvoke r1.<androidx.constraintlayout.core.ArrayRow: boolean isEmpty()>();

        if $z0 == 0 goto label05;

        return;

     label05:
        virtualinvoke r1.<androidx.constraintlayout.core.ArrayRow: void ensurePositiveConstant()>();

        $z1 = virtualinvoke r1.<androidx.constraintlayout.core.ArrayRow: boolean chooseSubject(androidx.constraintlayout.core.LinearSystem)>(r0);

        if $z1 == 0 goto label11;

        r2 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createExtraVariable()>();

        r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable> = r2;

        i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addRow(androidx.constraintlayout.core.ArrayRow)>(r1);

        $i2 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i1 = i0 + 1;

        if $i2 != $i1 goto label11;

        z6 = 1;

        $r5 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mTempGoal>;

        interfaceinvoke $r5.<androidx.constraintlayout.core.LinearSystem$Row: void initFromRow(androidx.constraintlayout.core.LinearSystem$Row)>(r1);

        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mTempGoal>;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: int optimize(androidx.constraintlayout.core.LinearSystem$Row,boolean)>($r6, 1);

        $i4 = r2.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

        if $i4 != -1 goto label11;

        $r7 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        if $r7 != r2 goto label07;

        r3 = virtualinvoke r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable pickPivot(androidx.constraintlayout.core.SolverVariable)>(r2);

        if r3 == null goto label07;

        $r14 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r14 == null goto label06;

        $r15 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l7 = $r15.<androidx.constraintlayout.core.Metrics: long pivots>;

        $l8 = $l7 + 1L;

        $r15.<androidx.constraintlayout.core.Metrics: long pivots> = $l8;

     label06:
        virtualinvoke r1.<androidx.constraintlayout.core.ArrayRow: void pivot(androidx.constraintlayout.core.SolverVariable)>(r3);

     label07:
        $z8 = r1.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z8 != 0 goto label08;

        $r13 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        virtualinvoke $r13.<androidx.constraintlayout.core.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.ArrayRow)>(r0, r1);

     label08:
        $z2 = <androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $z2 == 0 goto label09;

        $r10 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r11 = $r10.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool optimizedArrayRowPool>;

        interfaceinvoke $r11.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r1);

        goto label10;

     label09:
        $r8 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r9 = $r8.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool arrayRowPool>;

        interfaceinvoke $r9.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r1);

     label10:
        $i5 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i6 = $i5 - 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows> = $i6;

     label11:
        $z9 = virtualinvoke r1.<androidx.constraintlayout.core.ArrayRow: boolean hasKeyVariable()>();

        if $z9 != 0 goto label12;

        return;

     label12:
        if z6 != 0 goto label13;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addRow(androidx.constraintlayout.core.ArrayRow)>(r1);

     label13:
        return;
    }

    private final void addRow(androidx.constraintlayout.core.ArrayRow)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.ArrayRow r1, r2, $r7, $r9, $r11, $r20, $r23, $r26;
        boolean $z0, $z1, $z2, $z3, $z6, $z7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, $i16;
        androidx.constraintlayout.core.ArrayRow[] $r3, $r6, $r8, $r10, $r12, $r16, $r17, $r19, $r21, $r22, $r25;
        androidx.constraintlayout.core.SolverVariable $r4, $r5, $r13, $r24, $r27, $r32;
        float $f0, $f1;
        androidx.constraintlayout.core.Cache $r14, $r28;
        androidx.constraintlayout.core.Pools$Pool $r15, $r29;
        java.io.PrintStream $r30;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.ArrayRow;

        $z0 = <androidx.constraintlayout.core.LinearSystem: boolean SIMPLIFY_SYNONYMS>;

        if $z0 == 0 goto label01;

        $z6 = r1.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z6 == 0 goto label01;

        $r32 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $f1 = r1.<androidx.constraintlayout.core.ArrayRow: float constantValue>;

        virtualinvoke $r32.<androidx.constraintlayout.core.SolverVariable: void setFinalValue(androidx.constraintlayout.core.LinearSystem,float)>(r0, $f1);

        goto label02;

     label01:
        $r3 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $r3[$i0] = r1;

        $r4 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $r4.<androidx.constraintlayout.core.SolverVariable: int definitionId> = $i1;

        $i2 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i3 = $i2 + 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows> = $i3;

        $r5 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        virtualinvoke $r5.<androidx.constraintlayout.core.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.ArrayRow)>(r0, r1);

     label02:
        $z7 = <androidx.constraintlayout.core.LinearSystem: boolean SIMPLIFY_SYNONYMS>;

        if $z7 == 0 goto label13;

        $z1 = r0.<androidx.constraintlayout.core.LinearSystem: boolean hasSimpleDefinition>;

        if $z1 == 0 goto label13;

        i13 = 0;

     label03:
        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i13 >= $i4 goto label12;

        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r7 = $r6[i13];

        if $r7 != null goto label04;

        $r30 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>("WTF");

     label04:
        $r8 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r9 = $r8[i13];

        if $r9 == null goto label11;

        $r10 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r11 = $r10[i13];

        $z2 = $r11.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z2 == 0 goto label11;

        $r12 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r2 = $r12[i13];

        $r13 = r2.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $f0 = r2.<androidx.constraintlayout.core.ArrayRow: float constantValue>;

        virtualinvoke $r13.<androidx.constraintlayout.core.SolverVariable: void setFinalValue(androidx.constraintlayout.core.LinearSystem,float)>(r0, $f0);

        $z3 = <androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $z3 == 0 goto label05;

        $r28 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r29 = $r28.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool optimizedArrayRowPool>;

        interfaceinvoke $r29.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r2);

        goto label06;

     label05:
        $r14 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r15 = $r14.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool arrayRowPool>;

        interfaceinvoke $r15.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r2);

     label06:
        $r16 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r16[i13] = null;

        i14 = i13 + 1;

        i15 = i13 + 1;

     label07:
        $i16 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i15 >= $i16 goto label09;

        $r21 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $i8 = i15 - 1;

        $r19 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r20 = $r19[i15];

        $r21[$i8] = $r20;

        $r22 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $i9 = i15 - 1;

        $r23 = $r22[$i9];

        $r24 = $r23.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $i10 = $r24.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

        if $i10 != i15 goto label08;

        $r25 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $i11 = i15 - 1;

        $r26 = $r25[$i11];

        $r27 = $r26.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $i12 = i15 - 1;

        $r27.<androidx.constraintlayout.core.SolverVariable: int definitionId> = $i12;

     label08:
        i14 = i15;

        i15 = i15 + 1;

        goto label07;

     label09:
        $i5 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i14 >= $i5 goto label10;

        $r17 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r17[i14] = null;

     label10:
        $i6 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i7 = $i6 - 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows> = $i7;

        i13 = i13 + -1;

     label11:
        i13 = i13 + 1;

        goto label03;

     label12:
        r0.<androidx.constraintlayout.core.LinearSystem: boolean hasSimpleDefinition> = 0;

     label13:
        return;
    }

    public void removeRow(androidx.constraintlayout.core.ArrayRow)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.ArrayRow r1, $r13, $r15;
        androidx.constraintlayout.core.SolverVariable r2, $r3, $r4, $r5, $r10, $r11;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        androidx.constraintlayout.core.Cache $r6, $r8;
        androidx.constraintlayout.core.Pools$Pool $r7, $r9;
        float $f0;
        androidx.constraintlayout.core.ArrayRow[] $r12, $r14, $r16;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.ArrayRow;

        $z0 = r1.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z0 == 0 goto label7;

        $r3 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        if $r3 == null goto label7;

        $r4 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $i0 = $r4.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

        if $i0 == -1 goto label4;

        $r11 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        i9 = $r11.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

     label1:
        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i2 = $i1 - 1;

        if i9 >= $i2 goto label3;

        $r12 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $i5 = i9 + 1;

        $r13 = $r12[$i5];

        r2 = $r13.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $i7 = r2.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

        $i6 = i9 + 1;

        if $i7 != $i6 goto label2;

        r2.<androidx.constraintlayout.core.SolverVariable: int definitionId> = i9;

     label2:
        $r16 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r14 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $i8 = i9 + 1;

        $r15 = $r14[$i8];

        $r16[i9] = $r15;

        i9 = i9 + 1;

        goto label1;

     label3:
        $i3 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $i4 = $i3 - 1;

        r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows> = $i4;

     label4:
        $r5 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $z1 = $r5.<androidx.constraintlayout.core.SolverVariable: boolean isFinalValue>;

        if $z1 != 0 goto label5;

        $r10 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $f0 = r1.<androidx.constraintlayout.core.ArrayRow: float constantValue>;

        virtualinvoke $r10.<androidx.constraintlayout.core.SolverVariable: void setFinalValue(androidx.constraintlayout.core.LinearSystem,float)>(r0, $f0);

     label5:
        $z2 = <androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE>;

        if $z2 == 0 goto label6;

        $r8 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r9 = $r8.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool optimizedArrayRowPool>;

        interfaceinvoke $r9.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r1);

        goto label7;

     label6:
        $r6 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r7 = $r6.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.Pools$Pool arrayRowPool>;

        interfaceinvoke $r7.<androidx.constraintlayout.core.Pools$Pool: boolean release(java.lang.Object)>(r1);

     label7:
        return;
    }

    private final int optimize(androidx.constraintlayout.core.LinearSystem$Row, boolean)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.LinearSystem$Row r1;
        boolean z0, $z1, $z2, $z3, z4;
        androidx.constraintlayout.core.ArrayRow r2, r26;
        androidx.constraintlayout.core.SolverVariable r3, $r6, $r9, $r11, $r12, $r21, r25;
        float f0, f1, $f2, $f3, f4;
        androidx.constraintlayout.core.Metrics $r4, $r5, $r10, $r13, $r22, $r24;
        int $i0, $i1, $i2, $i7, $i8, $i9, i14, i15, $i16, i17, i18;
        boolean[] $r7, $r18, $r19, $r20, $r23;
        androidx.constraintlayout.core.ArrayRow[] $r8, $r14;
        long $l3, $l4, $l10, $l11, $l12, $l13;
        androidx.constraintlayout.core.SolverVariable$Type $r15, $r16;
        androidx.constraintlayout.core.ArrayRow$ArrayRowVariables $r17;
        byte $b5, $b6;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.LinearSystem$Row;

        z0 := @parameter1: boolean;

        $r4 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r4 == null goto label01;

        $r24 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l12 = $r24.<androidx.constraintlayout.core.Metrics: long optimize>;

        $l13 = $l12 + 1L;

        $r24.<androidx.constraintlayout.core.Metrics: long optimize> = $l13;

     label01:
        z4 = 0;

        i14 = 0;

        i15 = 0;

     label02:
        $i16 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        if i15 >= $i16 goto label03;

        $r23 = r0.<androidx.constraintlayout.core.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $r23[i15] = 0;

        i15 = i15 + 1;

        goto label02;

     label03:
        if z4 != 0 goto label18;

        $r5 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r5 == null goto label04;

        $r22 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l10 = $r22.<androidx.constraintlayout.core.Metrics: long iterations>;

        $l11 = $l10 + 1L;

        $r22.<androidx.constraintlayout.core.Metrics: long iterations> = $l11;

     label04:
        i14 = i14 + 1;

        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i1 = 2 * $i0;

        if i14 < $i1 goto label05;

        return i14;

     label05:
        $r6 = interfaceinvoke r1.<androidx.constraintlayout.core.LinearSystem$Row: androidx.constraintlayout.core.SolverVariable getKey()>();

        if $r6 == null goto label06;

        $r20 = r0.<androidx.constraintlayout.core.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $r21 = interfaceinvoke r1.<androidx.constraintlayout.core.LinearSystem$Row: androidx.constraintlayout.core.SolverVariable getKey()>();

        $i9 = $r21.<androidx.constraintlayout.core.SolverVariable: int id>;

        $r20[$i9] = 1;

     label06:
        $r7 = r0.<androidx.constraintlayout.core.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        r25 = interfaceinvoke r1.<androidx.constraintlayout.core.LinearSystem$Row: androidx.constraintlayout.core.SolverVariable getPivotCandidate(androidx.constraintlayout.core.LinearSystem,boolean[])>(r0, $r7);

        if r25 == null goto label08;

        $r18 = r0.<androidx.constraintlayout.core.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $i7 = r25.<androidx.constraintlayout.core.SolverVariable: int id>;

        $z3 = $r18[$i7];

        if $z3 == 0 goto label07;

        return i14;

     label07:
        $r19 = r0.<androidx.constraintlayout.core.LinearSystem: boolean[] mAlreadyTestedCandidates>;

        $i8 = r25.<androidx.constraintlayout.core.SolverVariable: int id>;

        $r19[$i8] = 1;

     label08:
        if r25 == null goto label16;

        f4 = 3.4028235E38F;

        i17 = -1;

        i18 = 0;

     label09:
        $i2 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i18 >= $i2 goto label13;

        $r14 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r2 = $r14[i18];

        r3 = r2.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $r16 = r3.<androidx.constraintlayout.core.SolverVariable: androidx.constraintlayout.core.SolverVariable$Type mType>;

        $r15 = <androidx.constraintlayout.core.SolverVariable$Type: androidx.constraintlayout.core.SolverVariable$Type UNRESTRICTED>;

        if $r16 != $r15 goto label10;

        goto label12;

     label10:
        $z1 = r2.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z1 == 0 goto label11;

        goto label12;

     label11:
        $z2 = virtualinvoke r2.<androidx.constraintlayout.core.ArrayRow: boolean hasVariable(androidx.constraintlayout.core.SolverVariable)>(r25);

        if $z2 == 0 goto label12;

        $r17 = r2.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables>;

        f0 = interfaceinvoke $r17.<androidx.constraintlayout.core.ArrayRow$ArrayRowVariables: float get(androidx.constraintlayout.core.SolverVariable)>(r25);

        $b5 = f0 cmpg 0.0F;

        if $b5 >= 0 goto label12;

        $f2 = r2.<androidx.constraintlayout.core.ArrayRow: float constantValue>;

        $f3 = neg $f2;

        f1 = $f3 / f0;

        $b6 = f1 cmpg f4;

        if $b6 >= 0 goto label12;

        f4 = f1;

        i17 = i18;

     label12:
        i18 = i18 + 1;

        goto label09;

     label13:
        if i17 <= -1 goto label15;

        $r8 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r26 = $r8[i17];

        $r9 = r26.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $r9.<androidx.constraintlayout.core.SolverVariable: int definitionId> = -1;

        $r10 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r10 == null goto label14;

        $r13 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l3 = $r13.<androidx.constraintlayout.core.Metrics: long pivots>;

        $l4 = $l3 + 1L;

        $r13.<androidx.constraintlayout.core.Metrics: long pivots> = $l4;

     label14:
        virtualinvoke r26.<androidx.constraintlayout.core.ArrayRow: void pivot(androidx.constraintlayout.core.SolverVariable)>(r25);

        $r11 = r26.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $r11.<androidx.constraintlayout.core.SolverVariable: int definitionId> = i17;

        $r12 = r26.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        virtualinvoke $r12.<androidx.constraintlayout.core.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.ArrayRow)>(r0, r26);

     label15:
        goto label17;

     label16:
        z4 = 1;

     label17:
        goto label03;

     label18:
        return i14;
    }

    private int enforceBFS(androidx.constraintlayout.core.LinearSystem$Row) throws java.lang.Exception
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.LinearSystem$Row r1;
        androidx.constraintlayout.core.ArrayRow r2, $r27, $r31, r35;
        androidx.constraintlayout.core.SolverVariable r3, $r6, $r10, $r11, $r12, r32, r33, r34;
        float f0, $f1, $f2, $f3, $f4, f5, f6, f7, f8;
        int $i0, $i1, $i2, $i6, i14, i15, i16, i17, i18, i19, $i20, i21, i22, i23, i24, i25;
        androidx.constraintlayout.core.Metrics $r4, $r7, $r13, $r25;
        androidx.constraintlayout.core.ArrayRow[] $r5, $r14, $r26, $r30;
        androidx.constraintlayout.core.Cache $r8, $r17;
        androidx.constraintlayout.core.SolverVariable[] $r9, $r18;
        long $l3, $l4, $l11, $l12;
        androidx.constraintlayout.core.SolverVariable$Type $r15, $r16, $r28, $r29;
        boolean $z0, $z1, z2, z3;
        byte $b5, $b7, $b8, $b9, $b10, $b13;
        androidx.constraintlayout.core.ArrayRow$ArrayRowVariables $r19, $r21, $r22, $r23;
        float[] $r20, $r24;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.LinearSystem$Row;

        i14 = 0;

        z2 = 0;

        i15 = 0;

     label01:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i15 >= $i0 goto label04;

        $r26 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r27 = $r26[i15];

        r32 = $r27.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $r29 = r32.<androidx.constraintlayout.core.SolverVariable: androidx.constraintlayout.core.SolverVariable$Type mType>;

        $r28 = <androidx.constraintlayout.core.SolverVariable$Type: androidx.constraintlayout.core.SolverVariable$Type UNRESTRICTED>;

        if $r29 != $r28 goto label02;

        goto label03;

     label02:
        $r30 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r31 = $r30[i15];

        $f4 = $r31.<androidx.constraintlayout.core.ArrayRow: float constantValue>;

        $b13 = $f4 cmpg 0.0F;

        if $b13 >= 0 goto label03;

        z2 = 1;

        goto label04;

     label03:
        i15 = i15 + 1;

        goto label01;

     label04:
        if z2 == 0 goto label32;

        z3 = 0;

        i14 = 0;

     label05:
        if z3 != 0 goto label32;

        $r4 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r4 == null goto label06;

        $r25 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l11 = $r25.<androidx.constraintlayout.core.Metrics: long bfs>;

        $l12 = $l11 + 1L;

        $r25.<androidx.constraintlayout.core.Metrics: long bfs> = $l12;

     label06:
        i14 = i14 + 1;

        f5 = 3.4028235E38F;

        i16 = 0;

        i17 = -1;

        i18 = -1;

        i19 = 0;

     label07:
        $i20 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i19 >= $i20 goto label27;

        $r14 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r2 = $r14[i19];

        r3 = r2.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $r16 = r3.<androidx.constraintlayout.core.SolverVariable: androidx.constraintlayout.core.SolverVariable$Type mType>;

        $r15 = <androidx.constraintlayout.core.SolverVariable$Type: androidx.constraintlayout.core.SolverVariable$Type UNRESTRICTED>;

        if $r16 != $r15 goto label08;

        goto label26;

     label08:
        $z0 = r2.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z0 == 0 goto label09;

        goto label26;

     label09:
        $f1 = r2.<androidx.constraintlayout.core.ArrayRow: float constantValue>;

        $b5 = $f1 cmpg 0.0F;

        if $b5 >= 0 goto label26;

        $z1 = <androidx.constraintlayout.core.LinearSystem: boolean SKIP_COLUMNS>;

        if $z1 == 0 goto label18;

        $r21 = r2.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables>;

        i21 = interfaceinvoke $r21.<androidx.constraintlayout.core.ArrayRow$ArrayRowVariables: int getCurrentSize()>();

        i22 = 0;

     label10:
        if i22 >= i21 goto label17;

        $r22 = r2.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables>;

        r33 = interfaceinvoke $r22.<androidx.constraintlayout.core.ArrayRow$ArrayRowVariables: androidx.constraintlayout.core.SolverVariable getVariable(int)>(i22);

        $r23 = r2.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables>;

        f6 = interfaceinvoke $r23.<androidx.constraintlayout.core.ArrayRow$ArrayRowVariables: float get(androidx.constraintlayout.core.SolverVariable)>(r33);

        $b9 = f6 cmpg 0.0F;

        if $b9 > 0 goto label11;

        goto label16;

     label11:
        i23 = 0;

     label12:
        if i23 >= 9 goto label16;

        $r24 = r33.<androidx.constraintlayout.core.SolverVariable: float[] strengthVector>;

        $f3 = $r24[i23];

        f0 = $f3 / f6;

        $b10 = f0 cmpg f5;

        if $b10 >= 0 goto label13;

        if i23 == i16 goto label14;

     label13:
        if i23 <= i16 goto label15;

     label14:
        f5 = f0;

        i17 = i19;

        i18 = r33.<androidx.constraintlayout.core.SolverVariable: int id>;

        i16 = i23;

     label15:
        i23 = i23 + 1;

        goto label12;

     label16:
        i22 = i22 + 1;

        goto label10;

     label17:
        goto label26;

     label18:
        i24 = 1;

     label19:
        $i6 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        if i24 >= $i6 goto label26;

        $r17 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r18 = $r17.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        r34 = $r18[i24];

        $r19 = r2.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables>;

        f7 = interfaceinvoke $r19.<androidx.constraintlayout.core.ArrayRow$ArrayRowVariables: float get(androidx.constraintlayout.core.SolverVariable)>(r34);

        $b7 = f7 cmpg 0.0F;

        if $b7 > 0 goto label20;

        goto label25;

     label20:
        i25 = 0;

     label21:
        if i25 >= 9 goto label25;

        $r20 = r34.<androidx.constraintlayout.core.SolverVariable: float[] strengthVector>;

        $f2 = $r20[i25];

        f8 = $f2 / f7;

        $b8 = f8 cmpg f5;

        if $b8 >= 0 goto label22;

        if i25 == i16 goto label23;

     label22:
        if i25 <= i16 goto label24;

     label23:
        f5 = f8;

        i17 = i19;

        i18 = i24;

        i16 = i25;

     label24:
        i25 = i25 + 1;

        goto label21;

     label25:
        i24 = i24 + 1;

        goto label19;

     label26:
        i19 = i19 + 1;

        goto label07;

     label27:
        if i17 == -1 goto label29;

        $r5 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r35 = $r5[i17];

        $r6 = r35.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $r6.<androidx.constraintlayout.core.SolverVariable: int definitionId> = -1;

        $r7 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        if $r7 == null goto label28;

        $r13 = <androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Metrics sMetrics>;

        $l3 = $r13.<androidx.constraintlayout.core.Metrics: long pivots>;

        $l4 = $l3 + 1L;

        $r13.<androidx.constraintlayout.core.Metrics: long pivots> = $l4;

     label28:
        $r8 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r9 = $r8.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $r10 = $r9[i18];

        virtualinvoke r35.<androidx.constraintlayout.core.ArrayRow: void pivot(androidx.constraintlayout.core.SolverVariable)>($r10);

        $r11 = r35.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $r11.<androidx.constraintlayout.core.SolverVariable: int definitionId> = i17;

        $r12 = r35.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        virtualinvoke $r12.<androidx.constraintlayout.core.SolverVariable: void updateReferencesWithNewDefinition(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.ArrayRow)>(r0, r35);

        goto label30;

     label29:
        z3 = 1;

     label30:
        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $i2 = $i1 / 2;

        if i14 <= $i2 goto label31;

        z3 = 1;

     label31:
        goto label05;

     label32:
        return i14;
    }

    private void computeValues()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.ArrayRow r1;
        int $i0, i1;
        androidx.constraintlayout.core.ArrayRow[] $r2;
        float $f0;
        androidx.constraintlayout.core.SolverVariable $r3;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        i1 = 0;

     label1:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i1 >= $i0 goto label2;

        $r2 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r1 = $r2[i1];

        $r3 = r1.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $f0 = r1.<androidx.constraintlayout.core.ArrayRow: float constantValue>;

        $r3.<androidx.constraintlayout.core.SolverVariable: float computedValue> = $f0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void displayRows()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int $i0, i1;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r11, $r12, $r13, $r14;
        androidx.constraintlayout.core.LinearSystem$Row $r3;
        java.io.PrintStream $r6;
        androidx.constraintlayout.core.ArrayRow[] $r9;
        androidx.constraintlayout.core.ArrayRow $r10;
        java.lang.String r15, r16, r17;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void displaySolverVariables()>();

        r15 = "";

        i1 = 0;

     label1:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i1 >= $i0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r9 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r10 = $r9[i1];

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r3 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r17 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(r17);

        return;
    }

    public void displayReadableRows()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r56, r58;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r25, $r26, $r27, $r28, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        androidx.constraintlayout.core.LinearSystem$Row $r12, $r17;
        java.io.PrintStream $r13;
        androidx.constraintlayout.core.ArrayRow[] $r22;
        androidx.constraintlayout.core.ArrayRow $r23;
        java.lang.String $r24, r55, r57, r59, r60;
        androidx.constraintlayout.core.Cache $r29, $r31, $r44;
        androidx.constraintlayout.core.SolverVariable[] $r30, $r32, $r45;
        boolean $z0, $z1;
        float $f0, $f1;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void displaySolverVariables()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" num vars ");

        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r55 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        i7 = 0;

     label1:
        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $i2 = $i1 + 1;

        if i7 >= $i2 goto label3;

        $r44 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r45 = $r44.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        r56 = $r45[i7];

        if r56 == null goto label2;

        $z1 = r56.<androidx.constraintlayout.core.SolverVariable: boolean isFinalValue>;

        if $z1 == 0 goto label2;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r55);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" $[");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] => ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r56);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $f1 = r56.<androidx.constraintlayout.core.SolverVariable: float computedValue>;

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r55);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r57 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        i8 = 0;

     label4:
        $i3 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $i4 = $i3 + 1;

        if i8 >= $i4 goto label6;

        $r29 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r30 = $r29.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        r58 = $r30[i8];

        if r58 == null goto label5;

        $z0 = r58.<androidx.constraintlayout.core.SolverVariable: boolean isSynonym>;

        if $z0 == 0 goto label5;

        $r31 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r32 = $r31.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i6 = r58.<androidx.constraintlayout.core.SolverVariable: int synonym>;

        r1 = $r32[$i6];

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ~[");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] => ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r58);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        $f0 = r58.<androidx.constraintlayout.core.SolverVariable: float synonymDelta>;

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r57 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        i8 = i8 + 1;

        goto label4;

     label6:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n #  ");

        r59 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        i9 = 0;

     label7:
        $i5 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i9 >= $i5 goto label8;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        $r22 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r23 = $r22[i9];

        $r24 = virtualinvoke $r23.<androidx.constraintlayout.core.ArrayRow: java.lang.String toReadableString()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        r60 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n #  ");

        r59 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        i9 = i9 + 1;

        goto label7;

     label8:
        $r12 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        if $r12 == null goto label9;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Goal: ");

        $r17 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r59 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label9:
        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>(r59);

        return;
    }

    public void displayVariablesReadableRows()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int $i0, i1;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r12, $r13, $r17, $r18, $r19, $r20;
        androidx.constraintlayout.core.LinearSystem$Row $r3;
        java.io.PrintStream $r6;
        androidx.constraintlayout.core.ArrayRow[] $r7, $r14;
        androidx.constraintlayout.core.ArrayRow $r8, $r15;
        androidx.constraintlayout.core.SolverVariable $r9;
        androidx.constraintlayout.core.SolverVariable$Type $r10, $r11;
        java.lang.String $r16, r21, r22, r23;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: void displaySolverVariables()>();

        r21 = "";

        i1 = 0;

     label1:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i1 >= $i0 goto label3;

        $r7 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r8 = $r7[i1];

        $r9 = $r8.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.SolverVariable variable>;

        $r11 = $r9.<androidx.constraintlayout.core.SolverVariable: androidx.constraintlayout.core.SolverVariable$Type mType>;

        $r10 = <androidx.constraintlayout.core.SolverVariable$Type: androidx.constraintlayout.core.SolverVariable$Type UNRESTRICTED>;

        if $r11 != $r10 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r14 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r15 = $r14[i1];

        $r16 = virtualinvoke $r15.<androidx.constraintlayout.core.ArrayRow: java.lang.String toReadableString()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r3 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.LinearSystem$Row mGoal>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r23 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>(r23);

        return;
    }

    public int getMemoryUsed()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int $i0, $i1, i2, i3;
        androidx.constraintlayout.core.ArrayRow[] $r1, $r3;
        androidx.constraintlayout.core.ArrayRow $r2, $r4;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i3 >= $i0 goto label3;

        $r1 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r2 = $r1[i3];

        if $r2 == null goto label2;

        $r3 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r4 = $r3[i3];

        $i1 = virtualinvoke $r4.<androidx.constraintlayout.core.ArrayRow: int sizeInBytes()>();

        i2 = i2 + $i1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public int getNumEquations()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int $i0;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        return $i0;
    }

    public int getNumVariables()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int $i0;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        return $i0;
    }

    void displaySystemInformation()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        byte b0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26;
        java.io.PrintStream $r2;
        java.lang.String $r6, $r9, $r12, $r25, $r27;
        androidx.constraintlayout.core.ArrayRow[] $r28, $r30, $r32, $r34;
        androidx.constraintlayout.core.ArrayRow $r29, $r31, $r33, $r35;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        b0 = 0;

        i13 = 0;

        i14 = 0;

     label1:
        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        if i14 >= $i1 goto label3;

        $r32 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r33 = $r32[i14];

        if $r33 == null goto label2;

        $r34 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r35 = $r34[i14];

        $i12 = virtualinvoke $r35.<androidx.constraintlayout.core.ArrayRow: int sizeInBytes()>();

        i13 = i13 + $i12;

     label2:
        i14 = i14 + 1;

        goto label1;

     label3:
        i15 = 0;

        i16 = 0;

     label4:
        $i2 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        if i16 >= $i2 goto label6;

        $r28 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r29 = $r28[i16];

        if $r29 == null goto label5;

        $r30 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        $r31 = $r30[i16];

        $i11 = virtualinvoke $r31.<androidx.constraintlayout.core.ArrayRow: int sizeInBytes()>();

        i15 = i15 + $i11;

     label5:
        i16 = i16 + 1;

        goto label4;

     label6:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Linear System -> Table size: ");

        $i3 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i5 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int TABLE_SIZE>;

        $i6 = $i5 * $i4;

        $r6 = specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: java.lang.String getDisplaySize(int)>($i6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") -- row sizes: ");

        $r9 = specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: java.lang.String getDisplaySize(int)>(i13);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual size: ");

        $r12 = specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: java.lang.String getDisplaySize(int)>(i15);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows: ");

        $i7 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i8 = r0.<androidx.constraintlayout.core.LinearSystem: int mMaxRows>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cols: ");

        $i9 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i10 = r0.<androidx.constraintlayout.core.LinearSystem: int mMaxColumns>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" occupied cells, ");

        $r25 = specialinvoke r0.<androidx.constraintlayout.core.LinearSystem: java.lang.String getDisplaySize(int)>(b0);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r27);

        return;
    }

    private void displaySolverVariables()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        java.lang.String r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1;
        java.io.PrintStream $r8;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Rows (");

        $i0 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumRows>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i1 = r0.<androidx.constraintlayout.core.LinearSystem: int mNumColumns>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>(r1);

        return;
    }

    private java.lang.String getDisplaySize(int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14;
        java.lang.String $r5, $r10, $r15;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        i0 := @parameter0: int;

        $i3 = i0 * 4;

        $i4 = $i3 / 1024;

        i1 = $i4 / 1024;

        if i1 <= 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Mb");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;

     label1:
        $i5 = i0 * 4;

        i2 = $i5 / 1024;

        if i2 <= 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Kb");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i6 = i0 * 4;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public androidx.constraintlayout.core.Cache getCache()
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.Cache $r1;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        $r1 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        return $r1;
    }

    private java.lang.String getDisplayStrength(int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int i0;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return "LOW";

     label1:
        if i0 != 2 goto label2;

        return "MEDIUM";

     label2:
        if i0 != 3 goto label3;

        return "HIGH";

     label3:
        if i0 != 4 goto label4;

        return "HIGHEST";

     label4:
        if i0 != 5 goto label5;

        return "EQUALITY";

     label5:
        if i0 != 8 goto label6;

        return "FIXED";

     label6:
        if i0 != 6 goto label7;

        return "BARRIER";

     label7:
        return "NONE";
    }

    public void addGreaterThan(androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, int, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r2, r4;
        int i0, i1, $i2;
        androidx.constraintlayout.core.ArrayRow r3;
        float f0, $f1;
        androidx.constraintlayout.core.ArrayRow$ArrayRowVariables $r6;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.SolverVariable;

        r2 := @parameter1: androidx.constraintlayout.core.SolverVariable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        r4 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createSlackVariable()>();

        r4.<androidx.constraintlayout.core.SolverVariable: int strength> = 0;

        virtualinvoke r3.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowGreaterThan(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,int)>(r1, r2, r4, i0);

        if i1 == 8 goto label1;

        $r6 = r3.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables>;

        f0 = interfaceinvoke $r6.<androidx.constraintlayout.core.ArrayRow$ArrayRowVariables: float get(androidx.constraintlayout.core.SolverVariable)>(r4);

        $f1 = -1.0F * f0;

        $i2 = (int) $f1;

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addSingleError(androidx.constraintlayout.core.ArrayRow,int,int)>(r3, $i2, i1);

     label1:
        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r3);

        return;
    }

    public void addGreaterBarrier(androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, int, boolean)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r2, r4;
        int i0;
        boolean z0;
        androidx.constraintlayout.core.ArrayRow r3;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.SolverVariable;

        r2 := @parameter1: androidx.constraintlayout.core.SolverVariable;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r3 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        r4 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createSlackVariable()>();

        r4.<androidx.constraintlayout.core.SolverVariable: int strength> = 0;

        virtualinvoke r3.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowGreaterThan(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,int)>(r1, r2, r4, i0);

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r3);

        return;
    }

    public void addLowerThan(androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, int, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r2, r4;
        int i0, i1, $i2;
        androidx.constraintlayout.core.ArrayRow r3;
        float f0, $f1;
        androidx.constraintlayout.core.ArrayRow$ArrayRowVariables $r6;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.SolverVariable;

        r2 := @parameter1: androidx.constraintlayout.core.SolverVariable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        r4 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createSlackVariable()>();

        r4.<androidx.constraintlayout.core.SolverVariable: int strength> = 0;

        virtualinvoke r3.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowLowerThan(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,int)>(r1, r2, r4, i0);

        if i1 == 8 goto label1;

        $r6 = r3.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables>;

        f0 = interfaceinvoke $r6.<androidx.constraintlayout.core.ArrayRow$ArrayRowVariables: float get(androidx.constraintlayout.core.SolverVariable)>(r4);

        $f1 = -1.0F * f0;

        $i2 = (int) $f1;

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addSingleError(androidx.constraintlayout.core.ArrayRow,int,int)>(r3, $i2, i1);

     label1:
        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r3);

        return;
    }

    public void addLowerBarrier(androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, int, boolean)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r2, r4;
        int i0;
        boolean z0;
        androidx.constraintlayout.core.ArrayRow r3;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.SolverVariable;

        r2 := @parameter1: androidx.constraintlayout.core.SolverVariable;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r3 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        r4 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createSlackVariable()>();

        r4.<androidx.constraintlayout.core.SolverVariable: int strength> = 0;

        virtualinvoke r3.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowLowerThan(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,int)>(r1, r2, r4, i0);

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r3);

        return;
    }

    public void addCentering(androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, int, float, androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, int, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r2, r3, r4;
        int i0, i1, i2;
        float f0;
        androidx.constraintlayout.core.ArrayRow r5;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.SolverVariable;

        r2 := @parameter1: androidx.constraintlayout.core.SolverVariable;

        i0 := @parameter2: int;

        f0 := @parameter3: float;

        r3 := @parameter4: androidx.constraintlayout.core.SolverVariable;

        r4 := @parameter5: androidx.constraintlayout.core.SolverVariable;

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        r5 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        virtualinvoke r5.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowCentering(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,int,float,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,int)>(r1, r2, i0, f0, r3, r4, i1);

        if i2 == 8 goto label1;

        virtualinvoke r5.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow addError(androidx.constraintlayout.core.LinearSystem,int)>(r0, i2);

     label1:
        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r5);

        return;
    }

    public void addRatio(androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, float, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r2, r3, r4;
        float f0;
        int i0;
        androidx.constraintlayout.core.ArrayRow r5;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.SolverVariable;

        r2 := @parameter1: androidx.constraintlayout.core.SolverVariable;

        r3 := @parameter2: androidx.constraintlayout.core.SolverVariable;

        r4 := @parameter3: androidx.constraintlayout.core.SolverVariable;

        f0 := @parameter4: float;

        i0 := @parameter5: int;

        r5 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        virtualinvoke r5.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowDimensionRatio(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,float)>(r1, r2, r3, r4, f0);

        if i0 == 8 goto label1;

        virtualinvoke r5.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow addError(androidx.constraintlayout.core.LinearSystem,int)>(r0, i0);

     label1:
        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r5);

        return;
    }

    public void addSynonym(androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        int $i0, $i1, $i2, i3, i4;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        androidx.constraintlayout.core.Cache $r2, $r4;
        androidx.constraintlayout.core.SolverVariable[] $r3, $r5;
        androidx.constraintlayout.core.SolverVariable r6, r7, r8;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r6 := @parameter0: androidx.constraintlayout.core.SolverVariable;

        r7 := @parameter1: androidx.constraintlayout.core.SolverVariable;

        i3 := @parameter2: int;

        $i0 = r6.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

        if $i0 != -1 goto label3;

        if i3 != 0 goto label3;

        $z0 = r7.<androidx.constraintlayout.core.SolverVariable: boolean isSynonym>;

        if $z0 == 0 goto label1;

        $f4 = (float) i3;

        $f3 = r7.<androidx.constraintlayout.core.SolverVariable: float synonymDelta>;

        $f5 = $f4 + $f3;

        i3 = (int) $f5;

        $r4 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r5 = $r4.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i2 = r7.<androidx.constraintlayout.core.SolverVariable: int synonym>;

        r7 = $r5[$i2];

     label1:
        $z1 = r6.<androidx.constraintlayout.core.SolverVariable: boolean isSynonym>;

        if $z1 == 0 goto label2;

        $f1 = (float) i3;

        $f0 = r6.<androidx.constraintlayout.core.SolverVariable: float synonymDelta>;

        $f2 = $f1 - $f0;

        i4 = (int) $f2;

        $r2 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r3 = $r2.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        $i1 = r6.<androidx.constraintlayout.core.SolverVariable: int synonym>;

        r8 = $r3[$i1];

        goto label4;

     label2:
        virtualinvoke r6.<androidx.constraintlayout.core.SolverVariable: void setSynonym(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.SolverVariable,float)>(r0, r7, 0.0F);

        goto label4;

     label3:
        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow addEquality(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,int,int)>(r6, r7, i3, 8);

     label4:
        return;
    }

    public androidx.constraintlayout.core.ArrayRow addEquality(androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, int, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r2;
        int i0, i1, $i2;
        androidx.constraintlayout.core.ArrayRow r3;
        boolean $z0, $z1;
        float $f0, $f1, $f2;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.SolverVariable;

        r2 := @parameter1: androidx.constraintlayout.core.SolverVariable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = <androidx.constraintlayout.core.LinearSystem: boolean USE_BASIC_SYNONYMS>;

        if $z0 == 0 goto label1;

        if i1 != 8 goto label1;

        $z1 = r2.<androidx.constraintlayout.core.SolverVariable: boolean isFinalValue>;

        if $z1 == 0 goto label1;

        $i2 = r1.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

        if $i2 != -1 goto label1;

        $f1 = r2.<androidx.constraintlayout.core.SolverVariable: float computedValue>;

        $f0 = (float) i0;

        $f2 = $f1 + $f0;

        virtualinvoke r1.<androidx.constraintlayout.core.SolverVariable: void setFinalValue(androidx.constraintlayout.core.LinearSystem,float)>(r0, $f2);

        return null;

     label1:
        r3 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        virtualinvoke r3.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowEquals(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,int)>(r1, r2, i0);

        if i1 == 8 goto label2;

        virtualinvoke r3.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow addError(androidx.constraintlayout.core.LinearSystem,int)>(r0, i1);

     label2:
        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r3);

        return r3;
    }

    public void addEquality(androidx.constraintlayout.core.SolverVariable, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        androidx.constraintlayout.core.ArrayRow r2, r10, r11;
        boolean $z0, $z1, $z2;
        androidx.constraintlayout.core.ArrayRow[] $r4;
        androidx.constraintlayout.core.ArrayRow$ArrayRowVariables $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        androidx.constraintlayout.core.Cache $r7;
        androidx.constraintlayout.core.SolverVariable[] $r8;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.SolverVariable;

        i0 := @parameter1: int;

        $z0 = <androidx.constraintlayout.core.LinearSystem: boolean USE_BASIC_SYNONYMS>;

        if $z0 == 0 goto label4;

        $i3 = r1.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

        if $i3 != -1 goto label4;

        $f2 = (float) i0;

        virtualinvoke r1.<androidx.constraintlayout.core.SolverVariable: void setFinalValue(androidx.constraintlayout.core.LinearSystem,float)>(r0, $f2);

        i8 = 0;

     label1:
        $i4 = r0.<androidx.constraintlayout.core.LinearSystem: int mVariablesID>;

        $i5 = $i4 + 1;

        if i8 >= $i5 goto label3;

        $r7 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.Cache mCache>;

        $r8 = $r7.<androidx.constraintlayout.core.Cache: androidx.constraintlayout.core.SolverVariable[] mIndexedVariables>;

        r9 = $r8[i8];

        if r9 == null goto label2;

        $z2 = r9.<androidx.constraintlayout.core.SolverVariable: boolean isSynonym>;

        if $z2 == 0 goto label2;

        $i7 = r9.<androidx.constraintlayout.core.SolverVariable: int synonym>;

        $i6 = r1.<androidx.constraintlayout.core.SolverVariable: int id>;

        if $i7 != $i6 goto label2;

        $f4 = (float) i0;

        $f3 = r9.<androidx.constraintlayout.core.SolverVariable: float synonymDelta>;

        $f5 = $f4 + $f3;

        virtualinvoke r9.<androidx.constraintlayout.core.SolverVariable: void setFinalValue(androidx.constraintlayout.core.LinearSystem,float)>(r0, $f5);

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        return;

     label4:
        i9 = r1.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

        $i1 = r1.<androidx.constraintlayout.core.SolverVariable: int definitionId>;

        if $i1 == -1 goto label8;

        $r4 = r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow[] mRows>;

        r10 = $r4[i9];

        $z1 = r10.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition>;

        if $z1 == 0 goto label5;

        $f1 = (float) i0;

        r10.<androidx.constraintlayout.core.ArrayRow: float constantValue> = $f1;

        goto label7;

     label5:
        $r5 = r10.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables>;

        $i2 = interfaceinvoke $r5.<androidx.constraintlayout.core.ArrayRow$ArrayRowVariables: int getCurrentSize()>();

        if $i2 != 0 goto label6;

        r10.<androidx.constraintlayout.core.ArrayRow: boolean isSimpleDefinition> = 1;

        $f0 = (float) i0;

        r10.<androidx.constraintlayout.core.ArrayRow: float constantValue> = $f0;

        goto label7;

     label6:
        r2 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        virtualinvoke r2.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowEquals(androidx.constraintlayout.core.SolverVariable,int)>(r1, i0);

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r2);

     label7:
        goto label9;

     label8:
        r11 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        virtualinvoke r11.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowDefinition(androidx.constraintlayout.core.SolverVariable,int)>(r1, i0);

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r11);

     label9:
        return;
    }

    public static androidx.constraintlayout.core.ArrayRow createRowDimensionPercent(androidx.constraintlayout.core.LinearSystem, androidx.constraintlayout.core.SolverVariable, androidx.constraintlayout.core.SolverVariable, float)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.SolverVariable r1, r2;
        float f0;
        androidx.constraintlayout.core.ArrayRow r3, $r4;

        r0 := @parameter0: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter1: androidx.constraintlayout.core.SolverVariable;

        r2 := @parameter2: androidx.constraintlayout.core.SolverVariable;

        f0 := @parameter3: float;

        r3 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        $r4 = virtualinvoke r3.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowDimensionPercent(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,float)>(r1, r2, f0);

        return $r4;
    }

    public void addCenterPoint(androidx.constraintlayout.core.widgets.ConstraintWidget, androidx.constraintlayout.core.widgets.ConstraintWidget, float, int)
    {
        androidx.constraintlayout.core.LinearSystem r0;
        androidx.constraintlayout.core.widgets.ConstraintWidget r1, r2;
        float f0, f1, f2;
        int i0;
        androidx.constraintlayout.core.SolverVariable r3, r4, r5, r6, r7, r8, r9, r10;
        androidx.constraintlayout.core.widgets.ConstraintAnchor$Type $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        androidx.constraintlayout.core.widgets.ConstraintAnchor $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        androidx.constraintlayout.core.ArrayRow r29, r30;

        r0 := @this: androidx.constraintlayout.core.LinearSystem;

        r1 := @parameter0: androidx.constraintlayout.core.widgets.ConstraintWidget;

        r2 := @parameter1: androidx.constraintlayout.core.widgets.ConstraintWidget;

        f0 := @parameter2: float;

        i0 := @parameter3: int;

        $r11 = <androidx.constraintlayout.core.widgets.ConstraintAnchor$Type: androidx.constraintlayout.core.widgets.ConstraintAnchor$Type LEFT>;

        $r12 = virtualinvoke r1.<androidx.constraintlayout.core.widgets.ConstraintWidget: androidx.constraintlayout.core.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.core.widgets.ConstraintAnchor$Type)>($r11);

        r3 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createObjectVariable(java.lang.Object)>($r12);

        $r13 = <androidx.constraintlayout.core.widgets.ConstraintAnchor$Type: androidx.constraintlayout.core.widgets.ConstraintAnchor$Type TOP>;

        $r14 = virtualinvoke r1.<androidx.constraintlayout.core.widgets.ConstraintWidget: androidx.constraintlayout.core.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.core.widgets.ConstraintAnchor$Type)>($r13);

        r4 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createObjectVariable(java.lang.Object)>($r14);

        $r15 = <androidx.constraintlayout.core.widgets.ConstraintAnchor$Type: androidx.constraintlayout.core.widgets.ConstraintAnchor$Type RIGHT>;

        $r16 = virtualinvoke r1.<androidx.constraintlayout.core.widgets.ConstraintWidget: androidx.constraintlayout.core.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.core.widgets.ConstraintAnchor$Type)>($r15);

        r5 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createObjectVariable(java.lang.Object)>($r16);

        $r17 = <androidx.constraintlayout.core.widgets.ConstraintAnchor$Type: androidx.constraintlayout.core.widgets.ConstraintAnchor$Type BOTTOM>;

        $r18 = virtualinvoke r1.<androidx.constraintlayout.core.widgets.ConstraintWidget: androidx.constraintlayout.core.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.core.widgets.ConstraintAnchor$Type)>($r17);

        r6 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createObjectVariable(java.lang.Object)>($r18);

        $r19 = <androidx.constraintlayout.core.widgets.ConstraintAnchor$Type: androidx.constraintlayout.core.widgets.ConstraintAnchor$Type LEFT>;

        $r20 = virtualinvoke r2.<androidx.constraintlayout.core.widgets.ConstraintWidget: androidx.constraintlayout.core.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.core.widgets.ConstraintAnchor$Type)>($r19);

        r7 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createObjectVariable(java.lang.Object)>($r20);

        $r21 = <androidx.constraintlayout.core.widgets.ConstraintAnchor$Type: androidx.constraintlayout.core.widgets.ConstraintAnchor$Type TOP>;

        $r22 = virtualinvoke r2.<androidx.constraintlayout.core.widgets.ConstraintWidget: androidx.constraintlayout.core.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.core.widgets.ConstraintAnchor$Type)>($r21);

        r8 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createObjectVariable(java.lang.Object)>($r22);

        $r23 = <androidx.constraintlayout.core.widgets.ConstraintAnchor$Type: androidx.constraintlayout.core.widgets.ConstraintAnchor$Type RIGHT>;

        $r24 = virtualinvoke r2.<androidx.constraintlayout.core.widgets.ConstraintWidget: androidx.constraintlayout.core.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.core.widgets.ConstraintAnchor$Type)>($r23);

        r9 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createObjectVariable(java.lang.Object)>($r24);

        $r25 = <androidx.constraintlayout.core.widgets.ConstraintAnchor$Type: androidx.constraintlayout.core.widgets.ConstraintAnchor$Type BOTTOM>;

        $r26 = virtualinvoke r2.<androidx.constraintlayout.core.widgets.ConstraintWidget: androidx.constraintlayout.core.widgets.ConstraintAnchor getAnchor(androidx.constraintlayout.core.widgets.ConstraintAnchor$Type)>($r25);

        r10 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.SolverVariable createObjectVariable(java.lang.Object)>($r26);

        r29 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $d2 = (double) i0;

        $d3 = $d1 * $d2;

        f1 = (float) $d3;

        virtualinvoke r29.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowWithAngle(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,float)>(r4, r6, r8, r10, f1);

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r29);

        r30 = virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: androidx.constraintlayout.core.ArrayRow createRow()>();

        $d4 = (double) f0;

        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d4);

        $d6 = (double) i0;

        $d7 = $d5 * $d6;

        f2 = (float) $d7;

        virtualinvoke r30.<androidx.constraintlayout.core.ArrayRow: androidx.constraintlayout.core.ArrayRow createRowWithAngle(androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,androidx.constraintlayout.core.SolverVariable,float)>(r3, r5, r7, r9, f2);

        virtualinvoke r0.<androidx.constraintlayout.core.LinearSystem: void addConstraint(androidx.constraintlayout.core.ArrayRow)>(r30);

        return;
    }

    static void <clinit>()
    {
        <androidx.constraintlayout.core.LinearSystem: boolean USE_DEPENDENCY_ORDERING> = 0;

        <androidx.constraintlayout.core.LinearSystem: boolean USE_BASIC_SYNONYMS> = 1;

        <androidx.constraintlayout.core.LinearSystem: boolean SIMPLIFY_SYNONYMS> = 1;

        <androidx.constraintlayout.core.LinearSystem: boolean USE_SYNONYMS> = 1;

        <androidx.constraintlayout.core.LinearSystem: boolean SKIP_COLUMNS> = 1;

        <androidx.constraintlayout.core.LinearSystem: boolean OPTIMIZED_ENGINE> = 0;

        <androidx.constraintlayout.core.LinearSystem: int POOL_SIZE> = 1000;

        <androidx.constraintlayout.core.LinearSystem: long ARRAY_ROW_CREATION> = 0L;

        <androidx.constraintlayout.core.LinearSystem: long OPTIMIZED_ARRAY_ROW_CREATION> = 0L;

        return;
    }

androidx.constraintlayout.core.LinearSystem$Row
<androidx.constraintlayout.core.LinearSystem$Row: androidx.constraintlayout.core.SolverVariable getPivotCandidate(androidx.constraintlayout.core.LinearSystem,boolean[])>
<androidx.constraintlayout.core.LinearSystem$Row: void clear()>
<androidx.constraintlayout.core.LinearSystem$Row: void initFromRow(androidx.constraintlayout.core.LinearSystem$Row)>
<androidx.constraintlayout.core.LinearSystem$Row: void addError(androidx.constraintlayout.core.SolverVariable)>
<androidx.constraintlayout.core.LinearSystem$Row: void updateFromSystem(androidx.constraintlayout.core.LinearSystem)>
<androidx.constraintlayout.core.LinearSystem$Row: androidx.constraintlayout.core.SolverVariable getKey()>
<androidx.constraintlayout.core.LinearSystem$Row: boolean isEmpty()>
<androidx.constraintlayout.core.LinearSystem$Row: void updateFromRow(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.ArrayRow,boolean)>
<androidx.constraintlayout.core.LinearSystem$Row: void updateFromFinalVariable(androidx.constraintlayout.core.LinearSystem,androidx.constraintlayout.core.SolverVariable,boolean)>
androidx.constraintlayout.core.LinearSystem$ValuesRow
<androidx.constraintlayout.core.LinearSystem$ValuesRow: androidx.constraintlayout.core.LinearSystem this$0>
    public void <init>(androidx.constraintlayout.core.LinearSystem, androidx.constraintlayout.core.Cache)
    {
        androidx.constraintlayout.core.LinearSystem$ValuesRow r0;
        androidx.constraintlayout.core.LinearSystem r1;
        androidx.constraintlayout.core.Cache r2;
        androidx.constraintlayout.core.SolverVariableValues $r3;

        r0 := @this: androidx.constraintlayout.core.LinearSystem$ValuesRow;

        r1 := @parameter0: androidx.constraintlayout.core.LinearSystem;

        r2 := @parameter1: androidx.constraintlayout.core.Cache;

        r0.<androidx.constraintlayout.core.LinearSystem$ValuesRow: androidx.constraintlayout.core.LinearSystem this$0> = r1;

        specialinvoke r0.<androidx.constraintlayout.core.ArrayRow: void <init>()>();

        $r3 = new androidx.constraintlayout.core.SolverVariableValues;

        specialinvoke $r3.<androidx.constraintlayout.core.SolverVariableValues: void <init>(androidx.constraintlayout.core.ArrayRow,androidx.constraintlayout.core.Cache)>(r0, r2);

        r0.<androidx.constraintlayout.core.LinearSystem$ValuesRow: androidx.constraintlayout.core.ArrayRow$ArrayRowVariables variables> = $r3;

        return;
    }

