kotlinx.coroutines.CancellableContinuationImpl
<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicInt _decision>
<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>
<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext context>
<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>
<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle parentHandle>
    public void <init>(kotlin.coroutines.Continuation, int)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlin.coroutines.Continuation $r1;
        int $i0;
        boolean $z0;
        java.lang.AssertionError $r2;
        kotlin.coroutines.CoroutineContext $r3;
        kotlinx.atomicfu.AtomicInt $r4;
        kotlinx.coroutines.Active $r5;
        kotlinx.atomicfu.AtomicRef $r6;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.coroutines.Continuation;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delegate");

        specialinvoke $r0.<kotlinx.coroutines.DispatchedTask: void <init>(int)>($i0);

        $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate> = $r1;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label4:
        $r3 = interfaceinvoke $r1.<kotlin.coroutines.Continuation: kotlin.coroutines.CoroutineContext getContext()>();

        $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext context> = $r3;

        $r4 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicInt atomic(int)>(0);

        $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicInt _decision> = $r4;

        $r5 = <kotlinx.coroutines.Active: kotlinx.coroutines.Active INSTANCE>;

        $r6 = staticinvoke <kotlinx.atomicfu.AtomicFU: kotlinx.atomicfu.AtomicRef atomic(java.lang.Object)>($r5);

        $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state> = $r6;

        return;
    }

    private final java.lang.Void alreadyResumedError(java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.IllegalStateException $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 := @parameter0: java.lang.Object;

        $r1 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Already resumed, but proposed with update ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    private final void callCancelHandler(kotlin.jvm.functions.Function1, java.lang.Throwable)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Throwable $r2, $r3;
        kotlin.coroutines.CoroutineContext $r4;
        java.lang.StringBuilder $r5, r7;
        java.lang.String $r6;
        kotlinx.coroutines.CompletionHandlerException r8;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: java.lang.Throwable;

     label1:
        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        r8 = new kotlinx.coroutines.CompletionHandlerException;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in invokeOnCancellation handler for ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r8.<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r3);

        $r2 = (java.lang.Throwable) r8;

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r4, $r2);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private final boolean cancelLater(java.lang.Throwable)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Throwable $r1;
        boolean $z0;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.internal.DispatchedContinuation $r3;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean isReusable()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r2, "null cannot be cast to non-null type kotlinx.coroutines.internal.DispatchedContinuation<*>");

        $r3 = (kotlinx.coroutines.internal.DispatchedContinuation) $r2;

        $z0 = virtualinvoke $r3.<kotlinx.coroutines.internal.DispatchedContinuation: boolean postponeCancellation(java.lang.Throwable)>($r1);

        return $z0;
    }

    private final void detachChildIfNonResuable()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean isReusable()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChild$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

     label1:
        return;
    }

    private final void dispatchResume(int)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $i0 := @parameter0: int;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean tryResume()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        staticinvoke <kotlinx.coroutines.DispatchedTaskKt: void dispatch(kotlinx.coroutines.DispatchedTask,int)>($r0, $i0);

        return;
    }

    private final java.lang.String getStateDebugRepresentation()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        boolean $z0;
        java.lang.Object $r1;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        $z0 = $r1 instanceof kotlinx.coroutines.NotCompleted;

        if $z0 == 0 goto label1;

        return "Active";

     label1:
        $z0 = $r1 instanceof kotlinx.coroutines.CancelledContinuation;

        if $z0 == 0 goto label2;

        return "Cancelled";

     label2:
        return "Completed";
    }

    private final kotlinx.coroutines.DisposableHandle installParentHandle()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlinx.coroutines.ChildContinuation $r1;
        kotlin.coroutines.CoroutineContext $r2;
        kotlinx.coroutines.Job$Key $r3;
        kotlin.coroutines.CoroutineContext$Element $r4;
        kotlinx.coroutines.Job $r5;
        kotlinx.coroutines.DisposableHandle $r6;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r3 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r4 = interfaceinvoke $r2.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r3);

        $r5 = (kotlinx.coroutines.Job) $r4;

        if $r5 != null goto label1;

        return null;

     label1:
        $r1 = new kotlinx.coroutines.ChildContinuation;

        specialinvoke $r1.<kotlinx.coroutines.ChildContinuation: void <init>(kotlinx.coroutines.CancellableContinuationImpl)>($r0);

        $r6 = staticinvoke <kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnCompletion$default(kotlinx.coroutines.Job,boolean,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r5, 1, 0, $r1, 2, null);

        $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle parentHandle> = $r6;

        return $r6;
    }

    private final boolean isReusable()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        int $i0;
        boolean $z0;
        kotlin.coroutines.Continuation $r1;
        kotlinx.coroutines.internal.DispatchedContinuation $r2;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $i0 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        $z0 = staticinvoke <kotlinx.coroutines.DispatchedTaskKt: boolean isReusableMode(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r1, "null cannot be cast to non-null type kotlinx.coroutines.internal.DispatchedContinuation<*>");

        $r2 = (kotlinx.coroutines.internal.DispatchedContinuation) $r1;

        $z0 = virtualinvoke $r2.<kotlinx.coroutines.internal.DispatchedContinuation: boolean isReusable()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private final kotlinx.coroutines.CancelHandler makeCancelHandler(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlin.jvm.functions.Function1 $r1;
        boolean $z0;
        kotlinx.coroutines.CancelHandler $r2;
        kotlinx.coroutines.InvokeOnCancel $r3;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $z0 = $r1 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.CancelHandler) $r1;

        return $r2;

     label1:
        $r3 = new kotlinx.coroutines.InvokeOnCancel;

        specialinvoke $r3.<kotlinx.coroutines.InvokeOnCancel: void <init>(kotlin.jvm.functions.Function1)>($r1);

        return $r3;
    }

    private final void multipleHandlersError(kotlin.jvm.functions.Function1, java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1;
        java.lang.IllegalStateException $r2;
        kotlin.jvm.functions.Function1 $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r3 := @parameter0: kotlin.jvm.functions.Function1;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("It\'s prohibited to register multiple handlers, tried to register ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", already has ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r2;
    }

    private final void releaseClaimedReusableContinuation()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        boolean $z0;
        java.lang.Throwable $r1;
        kotlin.coroutines.Continuation $r2;
        kotlinx.coroutines.internal.DispatchedContinuation $r3;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $z0 = $r2 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        if $z0 == 0 goto label1;

        $r3 = (kotlinx.coroutines.internal.DispatchedContinuation) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        if $r3 == null goto label4;

        $r1 = virtualinvoke $r3.<kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Throwable tryReleaseClaimedContinuation(kotlinx.coroutines.CancellableContinuation)>($r0);

        if $r1 != null goto label3;

        return;

     label3:
        virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChild$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean cancel(java.lang.Throwable)>($r1);

     label4:
        return;
    }

    private final void resumeImpl(java.lang.Object, int, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.atomicfu.AtomicRef $r2, $r7;
        java.lang.Object $r3, $r4, $r6;
        int $i0;
        boolean $z0;
        kotlinx.coroutines.NotCompleted $r5;
        kotlinx.coroutines.CancelledContinuation $r8;
        java.lang.Throwable $r9;
        kotlin.KotlinNothingValueException r10;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r3 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r1 := @parameter2: kotlin.jvm.functions.Function1;

        $r2 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

     label1:
        $r4 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $z0 = $r4 instanceof kotlinx.coroutines.NotCompleted;

        if $z0 == 0 goto label2;

        $r5 = (kotlinx.coroutines.NotCompleted) $r4;

        $r6 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object resumedState(kotlinx.coroutines.NotCompleted,java.lang.Object,int,kotlin.jvm.functions.Function1,java.lang.Object)>($r5, $r3, $i0, $r1, null);

        $r7 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $z0 = virtualinvoke $r7.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r4, $r6);

        if $z0 == 0 goto label1;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChildIfNonResuable()>();

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void dispatchResume(int)>($i0);

        return;

     label2:
        $z0 = $r4 instanceof kotlinx.coroutines.CancelledContinuation;

        if $z0 == 0 goto label3;

        $r8 = (kotlinx.coroutines.CancelledContinuation) $r4;

        $z0 = virtualinvoke $r8.<kotlinx.coroutines.CancelledContinuation: boolean makeResumed()>();

        if $z0 == 0 goto label3;

        if $r1 == null goto label5;

        $r9 = $r8.<kotlinx.coroutines.CancelledContinuation: java.lang.Throwable cause>;

        virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void callOnCancellation(kotlin.jvm.functions.Function1,java.lang.Throwable)>($r1, $r9);

        return;

     label3:
        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Void alreadyResumedError(java.lang.Object)>($r3);

        r10 = new kotlin.KotlinNothingValueException;

        specialinvoke r10.<kotlin.KotlinNothingValueException: void <init>()>();

        goto label4;

     label4:
        $r9 = (java.lang.Throwable) r10;

        throw $r9;

     label5:
        return;
    }

    static void resumeImpl$default(kotlinx.coroutines.CancellableContinuationImpl, java.lang.Object, int, kotlin.jvm.functions.Function1, int, java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object $r0, $r2;
        kotlinx.coroutines.CancellableContinuationImpl $r1;
        kotlin.jvm.functions.Function1 $r3;
        java.lang.UnsupportedOperationException $r4;

        $r1 := @parameter0: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $r3 := @parameter3: kotlin.jvm.functions.Function1;

        $i1 := @parameter4: int;

        $r0 := @parameter5: java.lang.Object;

        if $r0 != null goto label2;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label1;

        $r3 = null;

     label1:
        specialinvoke $r1.<kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl(java.lang.Object,int,kotlin.jvm.functions.Function1)>($r2, $i0, $r3);

        return;

     label2:
        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Super calls with default arguments not supported in this target, function: resumeImpl");

        throw $r4;
    }

    private final java.lang.Object resumedState(kotlinx.coroutines.NotCompleted, java.lang.Object, int, kotlin.jvm.functions.Function1, java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Object $r2, $r4;
        kotlinx.coroutines.NotCompleted $r3;
        int $i0;
        boolean $z0, $z1;
        java.lang.AssertionError $r5;
        kotlinx.coroutines.CompletedContinuation $r6;
        kotlinx.coroutines.CancelHandler $r7;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r3 := @parameter0: kotlinx.coroutines.NotCompleted;

        $r4 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $r1 := @parameter3: kotlin.jvm.functions.Function1;

        $r2 := @parameter4: java.lang.Object;

        $z0 = $r4 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label08;

        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        $z0 = 1;

        if $z1 == 0 goto label04;

        if $r2 != null goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        if $z1 == 0 goto label03;

        goto label04;

     label03:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label04:
        $z1 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z1 == 0 goto label09;

        if $r1 != null goto label05;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label07;

        goto label09;

     label07:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label08:
        $z0 = staticinvoke <kotlinx.coroutines.DispatchedTaskKt: boolean isCancellableMode(int)>($i0);

        if $z0 != 0 goto label10;

        if $r2 != null goto label10;

     label09:
        return $r4;

     label10:
        if $r1 != null goto label12;

        $z0 = $r3 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 == 0 goto label11;

        $z0 = $r3 instanceof kotlinx.coroutines.BeforeResumeCancelHandler;

        if $z0 == 0 goto label12;

     label11:
        if $r2 == null goto label09;

     label12:
        $r6 = new kotlinx.coroutines.CompletedContinuation;

        $z0 = $r3 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 == 0 goto label13;

        $r7 = (kotlinx.coroutines.CancelHandler) $r3;

        goto label14;

     label13:
        $r7 = null;

     label14:
        specialinvoke $r6.<kotlinx.coroutines.CompletedContinuation: void <init>(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r4, $r7, $r1, $r2, null, 16, null);

        return $r6;
    }

    private final boolean tryResume()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlinx.atomicfu.AtomicInt $r1, $r4;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicInt _decision>;

     label1:
        $i0 = virtualinvoke $r1.<kotlinx.atomicfu.AtomicInt: int getValue()>();

        lookupswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label3;
            default: goto label2;
        };

     label2:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "Already resumed";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        return 0;

     label4:
        $r4 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicInt _decision>;

        $z0 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicInt: boolean compareAndSet(int,int)>(0, 2);

        if $z0 == 0 goto label1;

        return 1;
    }

    private final kotlinx.coroutines.internal.Symbol tryResumeImpl(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        int $i0;
        java.lang.Object $r1, $r2, $r5, $r7;
        kotlin.jvm.functions.Function1 $r3;
        kotlinx.atomicfu.AtomicRef $r4, $r8;
        boolean $z0;
        kotlinx.coroutines.NotCompleted $r6;
        kotlinx.coroutines.CompletedContinuation $r9;
        java.lang.AssertionError $r10;
        kotlinx.coroutines.internal.Symbol r11;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: kotlin.jvm.functions.Function1;

        $r4 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

     label1:
        $r5 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $z0 = $r5 instanceof kotlinx.coroutines.NotCompleted;

        if $z0 == 0 goto label2;

        $r6 = (kotlinx.coroutines.NotCompleted) $r5;

        $i0 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        $r7 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object resumedState(kotlinx.coroutines.NotCompleted,java.lang.Object,int,kotlin.jvm.functions.Function1,java.lang.Object)>($r6, $r1, $i0, $r3, $r2);

        $r8 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $z0 = virtualinvoke $r8.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r5, $r7);

        if $z0 == 0 goto label1;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChildIfNonResuable()>();

        r11 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        return r11;

     label2:
        $z0 = $r5 instanceof kotlinx.coroutines.CompletedContinuation;

        if $z0 == 0 goto label5;

        if $r2 == null goto label5;

        $r9 = (kotlinx.coroutines.CompletedContinuation) $r5;

        $r5 = $r9.<kotlinx.coroutines.CompletedContinuation: java.lang.Object idempotentResume>;

        if $r5 != $r2 goto label5;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $r2 = $r9.<kotlinx.coroutines.CompletedContinuation: java.lang.Object result>;

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label4:
        r11 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        return r11;

     label5:
        return null;
    }

    private final boolean trySuspend()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlinx.atomicfu.AtomicInt $r1, $r4;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.String $r3;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicInt _decision>;

     label1:
        $i0 = virtualinvoke $r1.<kotlinx.atomicfu.AtomicInt: int getValue()>();

        lookupswitch($i0)
        {
            case 0: goto label4;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label2;
        };

     label2:
        $r2 = new java.lang.IllegalStateException;

        $r3 = "Already suspended";

        $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        return 0;

     label4:
        $r4 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicInt _decision>;

        $z0 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicInt: boolean compareAndSet(int,int)>(0, 1);

        if $z0 == 0 goto label1;

        return 1;
    }

    public final void callCancelHandler(kotlinx.coroutines.CancelHandler, java.lang.Throwable)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlinx.coroutines.CancelHandler $r1;
        java.lang.Throwable $r2, $r3;
        kotlin.coroutines.CoroutineContext $r4;
        java.lang.StringBuilder $r5, r7;
        java.lang.String $r6;
        kotlinx.coroutines.CompletionHandlerException r8;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlinx.coroutines.CancelHandler;

        $r2 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "handler");

     label1:
        virtualinvoke $r1.<kotlinx.coroutines.CancelHandler: void invoke(java.lang.Throwable)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        r8 = new kotlinx.coroutines.CompletionHandlerException;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in invokeOnCancellation handler for ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r8.<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r3);

        $r2 = (java.lang.Throwable) r8;

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r4, $r2);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void callOnCancellation(kotlin.jvm.functions.Function1, java.lang.Throwable)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlin.jvm.functions.Function1 $r1;
        java.lang.Throwable $r2, $r3;
        kotlin.coroutines.CoroutineContext $r4;
        java.lang.StringBuilder $r5, r7;
        java.lang.String $r6;
        kotlinx.coroutines.CompletionHandlerException r8;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        $r2 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "onCancellation");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "cause");

     label1:
        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        r8 = new kotlinx.coroutines.CompletionHandlerException;

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in resume onCancellation handler for ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r8.<kotlinx.coroutines.CompletionHandlerException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r3);

        $r2 = (java.lang.Throwable) r8;

        staticinvoke <kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)>($r4, $r2);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean cancel(java.lang.Throwable)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlinx.atomicfu.AtomicRef $r1, $r2;
        boolean $z0, $z1;
        java.lang.Throwable $r3;
        java.lang.Object $r4;
        kotlinx.coroutines.CancelledContinuation $r5;
        kotlinx.coroutines.CancelHandler $r6;
        int $i0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r3 := @parameter0: java.lang.Throwable;

        $r1 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

     label1:
        $r4 = virtualinvoke $r1.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $z0 = $r4 instanceof kotlinx.coroutines.NotCompleted;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r5 = new kotlinx.coroutines.CancelledContinuation;

        $z0 = $r4 instanceof kotlinx.coroutines.CancelHandler;

        specialinvoke $r5.<kotlinx.coroutines.CancelledContinuation: void <init>(kotlin.coroutines.Continuation,java.lang.Throwable,boolean)>($r0, $r3, $z0);

        $r2 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $z1 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z1 == 0 goto label1;

        if $z0 == 0 goto label3;

        $r6 = (kotlinx.coroutines.CancelHandler) $r4;

        goto label4;

     label3:
        $r6 = null;

     label4:
        if $r6 == null goto label5;

        virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void callCancelHandler(kotlinx.coroutines.CancelHandler,java.lang.Throwable)>($r6, $r3);

     label5:
        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChildIfNonResuable()>();

        $i0 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void dispatchResume(int)>($i0);

        return 1;
    }

    public void cancelCompletedResult$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Object, java.lang.Throwable)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        kotlinx.atomicfu.AtomicRef $r3, $r6;
        kotlinx.coroutines.CompletedContinuation $r4, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r7;
        java.lang.String $r8;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "cause");

        $r3 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

     label1:
        $r1 = virtualinvoke $r3.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $z0 = $r1 instanceof kotlinx.coroutines.NotCompleted;

        if $z0 != 0 goto label7;

        $z0 = $r1 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label2;

        return;

     label2:
        $z0 = $r1 instanceof kotlinx.coroutines.CompletedContinuation;

        if $z0 == 0 goto label6;

        $r4 = (kotlinx.coroutines.CompletedContinuation) $r1;

        $z0 = virtualinvoke $r4.<kotlinx.coroutines.CompletedContinuation: boolean getCancelled()>();

        if $z0 != 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        if $z0 == 0 goto label5;

        $r5 = staticinvoke <kotlinx.coroutines.CompletedContinuation: kotlinx.coroutines.CompletedContinuation copy$default(kotlinx.coroutines.CompletedContinuation,java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,java.lang.Object)>($r4, null, null, null, null, $r2, 15, null);

        $r6 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $z0 = virtualinvoke $r6.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r1, $r5);

        if $z0 == 0 goto label1;

        virtualinvoke $r4.<kotlinx.coroutines.CompletedContinuation: void invokeHandlers(kotlinx.coroutines.CancellableContinuationImpl,java.lang.Throwable)>($r0, $r2);

        return;

     label5:
        $r7 = new java.lang.IllegalStateException;

        $r8 = "Must be called at most once";

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label6:
        $r6 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $r4 = new kotlinx.coroutines.CompletedContinuation;

        specialinvoke $r4.<kotlinx.coroutines.CompletedContinuation: void <init>(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, null, null, null, $r2, 14, null);

        $z0 = virtualinvoke $r6.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r1, $r4);

        if $z0 == 0 goto label1;

        return;

     label7:
        $r7 = new java.lang.IllegalStateException;

        $r8 = "Not completed";

        $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        goto label8;

     label8:
        throw $r7;
    }

    public void completeResume(java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlinx.coroutines.internal.Symbol $r2;
        java.lang.AssertionError $r3;
        int $i0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "token");

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label4;

        $r2 = <kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label4:
        $i0 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void dispatchResume(int)>($i0);

        return;
    }

    public final void detachChild$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlinx.coroutines.DisposableHandle $r1;
        kotlinx.coroutines.NonDisposableHandle $r2;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle parentHandle>;

        if $r1 != null goto label1;

        return;

     label1:
        interfaceinvoke $r1.<kotlinx.coroutines.DisposableHandle: void dispose()>();

        $r2 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle parentHandle> = $r2;

        return;
    }

    public kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        boolean $z0;
        kotlin.coroutines.Continuation $r1;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r2;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $z0 = $r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 == 0 goto label1;

        $r2 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r1;

        return $r2;

     label1:
        return null;
    }

    public kotlin.coroutines.CoroutineContext getContext()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlin.coroutines.CoroutineContext r1;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        r1 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext context>;

        return r1;
    }

    public java.lang.Throwable getContinuationCancellationCause(kotlinx.coroutines.Job)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.util.concurrent.CancellationException $r1;
        kotlinx.coroutines.Job $r2;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 := @parameter0: kotlinx.coroutines.Job;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "parent");

        $r1 = interfaceinvoke $r2.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        return $r1;
    }

    public final kotlin.coroutines.Continuation getDelegate$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlin.coroutines.Continuation r1;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        r1 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        return r1;
    }

    public java.lang.Throwable getExceptionalResult$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2, $r3;
        kotlin.coroutines.Continuation $r4;
        boolean $z0;
        kotlin.coroutines.jvm.internal.CoroutineStackFrame $r5;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.DispatchedTask: java.lang.Throwable getExceptionalResult$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Object)>($r1);

        $r3 = $r2;

        if $r2 == null goto label3;

        $r4 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label2;

        $z0 = $r4 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r5 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) $r4;

        $r3 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r2, $r5);

     label2:
        return $r3;

     label3:
        return null;
    }

    public final java.lang.Object getResult()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        boolean $z0, $z1;
        kotlinx.coroutines.DisposableHandle $r1;
        java.lang.Object $r2;
        kotlinx.coroutines.CompletedExceptionally $r3;
        java.lang.Throwable $r4;
        int $i0;
        kotlin.coroutines.CoroutineContext $r5;
        kotlinx.coroutines.Job$Key $r6;
        kotlin.coroutines.CoroutineContext$Element $r7;
        kotlinx.coroutines.Job $r8;
        java.util.concurrent.CancellationException $r9;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $z0 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean isReusable()>();

        $z1 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean trySuspend()>();

        if $z1 == 0 goto label3;

        $r1 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle parentHandle>;

        if $r1 != null goto label1;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle installParentHandle()>();

     label1:
        if $z0 == 0 goto label2;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation()>();

     label2:
        $r2 = staticinvoke <kotlin.coroutines.intrinsics.IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()>();

        return $r2;

     label3:
        if $z0 == 0 goto label4;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation()>();

     label4:
        $r2 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        $z0 = $r2 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label6;

        $r3 = (kotlinx.coroutines.CompletedExceptionally) $r2;

        $r4 = $r3.<kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause>;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label5;

        $r4 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r4, $r0);

        throw $r4;

     label5:
        throw $r4;

     label6:
        $i0 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        $z0 = staticinvoke <kotlinx.coroutines.DispatchedTaskKt: boolean isCancellableMode(int)>($i0);

        if $z0 == 0 goto label8;

        $r5 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()>();

        $r6 = <kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key>;

        $r7 = interfaceinvoke $r5.<kotlin.coroutines.CoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)>($r6);

        $r8 = (kotlinx.coroutines.Job) $r7;

        if $r8 == null goto label8;

        $z0 = interfaceinvoke $r8.<kotlinx.coroutines.Job: boolean isActive()>();

        if $z0 != 0 goto label8;

        $r9 = interfaceinvoke $r8.<kotlinx.coroutines.Job: java.util.concurrent.CancellationException getCancellationException()>();

        virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void cancelCompletedResult$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Object,java.lang.Throwable)>($r2, $r9);

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()>();

        if $z0 == 0 goto label7;

        $r4 = staticinvoke <kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)>($r9, $r0);

        throw $r4;

     label7:
        throw $r9;

     label8:
        $r2 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getSuccessfulResult$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Object)>($r2);

        return $r2;
    }

    public java.lang.StackTraceElement getStackTraceElement()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        return null;
    }

    public final java.lang.Object getState$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1;
        kotlinx.atomicfu.AtomicRef $r2;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $r1 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        return $r1;
    }

    public java.lang.Object getSuccessfulResult$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        boolean $z0;
        java.lang.Object $r1;
        kotlinx.coroutines.CompletedContinuation $r2;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof kotlinx.coroutines.CompletedContinuation;

        if $z0 == 0 goto label1;

        $r2 = (kotlinx.coroutines.CompletedContinuation) $r1;

        $r1 = $r2.<kotlinx.coroutines.CompletedContinuation: java.lang.Object result>;

     label1:
        return $r1;
    }

    public void initCancellability()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlinx.coroutines.DisposableHandle $r1;
        boolean $z0;
        kotlinx.coroutines.NonDisposableHandle $r2;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle installParentHandle()>();

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean isCompleted()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<kotlinx.coroutines.DisposableHandle: void dispose()>();

        $r2 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle parentHandle> = $r2;

     label2:
        return;
    }

    public void invokeOnCancellation(kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlin.jvm.functions.Function1 $r1;
        kotlinx.atomicfu.AtomicRef $r2, $r6;
        kotlinx.coroutines.CompletedContinuation $r3;
        kotlinx.coroutines.CancelHandler $r4, $r9;
        java.lang.Object $r5;
        boolean $z0, $z1;
        kotlinx.coroutines.CompletedExceptionally $r7;
        java.lang.Throwable $r8;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "handler");

        $r4 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.CancelHandler makeCancelHandler(kotlin.jvm.functions.Function1)>($r1);

        $r2 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

     label01:
        $r5 = virtualinvoke $r2.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $z0 = $r5 instanceof kotlinx.coroutines.Active;

        if $z0 == 0 goto label02;

        $r6 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $z0 = virtualinvoke $r6.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $z0 == 0 goto label01;

        return;

     label02:
        $z0 = $r5 instanceof kotlinx.coroutines.CancelHandler;

        if $z0 == 0 goto label03;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void multipleHandlersError(kotlin.jvm.functions.Function1,java.lang.Object)>($r1, $r5);

        goto label01;

     label03:
        $z0 = $r5 instanceof kotlinx.coroutines.CompletedExceptionally;

        if $z0 == 0 goto label08;

        $r7 = (kotlinx.coroutines.CompletedExceptionally) $r5;

        $z1 = virtualinvoke $r7.<kotlinx.coroutines.CompletedExceptionally: boolean makeHandled()>();

        if $z1 != 0 goto label04;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void multipleHandlersError(kotlin.jvm.functions.Function1,java.lang.Object)>($r1, $r5);

     label04:
        $z1 = $r5 instanceof kotlinx.coroutines.CancelledContinuation;

        if $z1 == 0 goto label14;

        $r8 = null;

        if $z0 == 0 goto label05;

        goto label06;

     label05:
        $r7 = null;

     label06:
        if $r7 == null goto label07;

        $r8 = $r7.<kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause>;

        goto label07;

     label07:
        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void callCancelHandler(kotlin.jvm.functions.Function1,java.lang.Throwable)>($r1, $r8);

        return;

     label08:
        $z0 = $r5 instanceof kotlinx.coroutines.CompletedContinuation;

        if $z0 == 0 goto label12;

        $r3 = (kotlinx.coroutines.CompletedContinuation) $r5;

        $r9 = $r3.<kotlinx.coroutines.CompletedContinuation: kotlinx.coroutines.CancelHandler cancelHandler>;

        if $r9 == null goto label09;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void multipleHandlersError(kotlin.jvm.functions.Function1,java.lang.Object)>($r1, $r5);

     label09:
        $z0 = $r4 instanceof kotlinx.coroutines.BeforeResumeCancelHandler;

        if $z0 == 0 goto label10;

        return;

     label10:
        $z0 = virtualinvoke $r3.<kotlinx.coroutines.CompletedContinuation: boolean getCancelled()>();

        if $z0 == 0 goto label11;

        $r8 = $r3.<kotlinx.coroutines.CompletedContinuation: java.lang.Throwable cancelCause>;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void callCancelHandler(kotlin.jvm.functions.Function1,java.lang.Throwable)>($r1, $r8);

        return;

     label11:
        $r3 = staticinvoke <kotlinx.coroutines.CompletedContinuation: kotlinx.coroutines.CompletedContinuation copy$default(kotlinx.coroutines.CompletedContinuation,java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,java.lang.Object)>($r3, null, $r4, null, null, null, 29, null);

        $r6 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $z0 = virtualinvoke $r6.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r5, $r3);

        if $z0 == 0 goto label01;

        return;

     label12:
        $z0 = $r4 instanceof kotlinx.coroutines.BeforeResumeCancelHandler;

        if $z0 == 0 goto label13;

        return;

     label13:
        $r3 = new kotlinx.coroutines.CompletedContinuation;

        specialinvoke $r3.<kotlinx.coroutines.CompletedContinuation: void <init>(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r5, $r4, null, null, null, 28, null);

        $r6 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $z0 = virtualinvoke $r6.<kotlinx.atomicfu.AtomicRef: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r5, $r3);

        if $z0 == 0 goto label01;

     label14:
        return;
    }

    public boolean isCompleted()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        $z0 = $r1 instanceof kotlinx.coroutines.NotCompleted;

        $z0 = $z0 ^ 1;

        return $z0;
    }

    protected java.lang.String nameString()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        return "CancellableContinuation";
    }

    public final void parentCancelled$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines(java.lang.Throwable)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Throwable $r1;
        boolean $z0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cause");

        $z0 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean cancelLater(java.lang.Throwable)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: boolean cancel(java.lang.Throwable)>($r1);

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChildIfNonResuable()>();

        return;
    }

    public final boolean resetStateReusable()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        boolean $z0;
        int $i0;
        java.lang.AssertionError $r1;
        kotlinx.coroutines.DisposableHandle $r2;
        kotlinx.coroutines.NonDisposableHandle $r3;
        kotlinx.atomicfu.AtomicRef $r4;
        java.lang.Object $r5;
        kotlinx.coroutines.CompletedContinuation $r6;
        kotlinx.atomicfu.AtomicInt $r7;
        kotlinx.coroutines.Active $r8;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label04;

        $i0 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        if $i0 != 2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label04:
        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label08;

        $r2 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle parentHandle>;

        $r3 = <kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE>;

        if $r2 == $r3 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 == 0 goto label07;

        goto label08;

     label07:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label08:
        $r4 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $r5 = virtualinvoke $r4.<kotlinx.atomicfu.AtomicRef: java.lang.Object getValue()>();

        $z0 = staticinvoke <kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()>();

        if $z0 == 0 goto label10;

        $z0 = $r5 instanceof kotlinx.coroutines.NotCompleted;

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label09;

        goto label10;

     label09:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label10:
        $z0 = $r5 instanceof kotlinx.coroutines.CompletedContinuation;

        if $z0 == 0 goto label11;

        $r6 = (kotlinx.coroutines.CompletedContinuation) $r5;

        $r5 = $r6.<kotlinx.coroutines.CompletedContinuation: java.lang.Object idempotentResume>;

        if $r5 == null goto label11;

        virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void detachChild$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        return 0;

     label11:
        $r7 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicInt _decision>;

        virtualinvoke $r7.<kotlinx.atomicfu.AtomicInt: void setValue(int)>(0);

        $r4 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.atomicfu.AtomicRef _state>;

        $r8 = <kotlinx.coroutines.Active: kotlinx.coroutines.Active INSTANCE>;

        virtualinvoke $r4.<kotlinx.atomicfu.AtomicRef: void setValue(java.lang.Object)>($r8);

        return 1;
    }

    public void resume(java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1;
        kotlin.jvm.functions.Function1 $r2;
        int $i0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: kotlin.jvm.functions.Function1;

        $i0 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl(java.lang.Object,int,kotlin.jvm.functions.Function1)>($r1, $i0, $r2);

        return;
    }

    public void resumeUndispatched(kotlinx.coroutines.CoroutineDispatcher, java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1;
        kotlinx.coroutines.CoroutineDispatcher $r2, $r4;
        kotlin.coroutines.Continuation $r3;
        boolean $z0;
        kotlinx.coroutines.internal.DispatchedContinuation $r5;
        int $i0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 := @parameter0: kotlinx.coroutines.CoroutineDispatcher;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "<this>");

        $r3 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $z0 = $r3 instanceof kotlinx.coroutines.internal.DispatchedContinuation;

        $r4 = null;

        if $z0 == 0 goto label1;

        $r5 = (kotlinx.coroutines.internal.DispatchedContinuation) $r3;

        goto label2;

     label1:
        $r5 = null;

     label2:
        if $r5 == null goto label3;

        $r4 = $r5.<kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher>;

     label3:
        if $r4 != $r2 goto label4;

        $i0 = 4;

        goto label5;

     label4:
        $i0 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

     label5:
        staticinvoke <kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl$default(kotlinx.coroutines.CancellableContinuationImpl,java.lang.Object,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r0, $r1, $i0, null, 4, null);

        return;
    }

    public void resumeWith(java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1;
        int $i0;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <kotlinx.coroutines.CompletionStateKt: java.lang.Object toState(java.lang.Object,kotlinx.coroutines.CancellableContinuation)>($r1, $r0);

        $i0 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: int resumeMode>;

        staticinvoke <kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl$default(kotlinx.coroutines.CancellableContinuationImpl,java.lang.Object,int,kotlin.jvm.functions.Function1,int,java.lang.Object)>($r0, $r1, $i0, null, 4, null);

        return;
    }

    public java.lang.Object takeState$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$third_party_kotlin_kotlinx_coroutines_kotlinx_coroutines()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.String $r1, $r3, $r4, $r5;
        kotlin.coroutines.Continuation $r2;
        java.lang.StringBuilder $r6;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r1 = virtualinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.String nameString()>();

        $r2 = $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate>;

        $r3 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String toDebugString(kotlin.coroutines.Continuation)>($r2);

        $r4 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: java.lang.String getStateDebugRepresentation()>();

        $r5 = staticinvoke <kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)>($r0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("){");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}@");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.Object tryResume(java.lang.Object, java.lang.Object)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1, $r3;
        kotlinx.coroutines.internal.Symbol $r2;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.internal.Symbol tryResumeImpl(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r3, $r1, null);

        return $r2;
    }

    public java.lang.Object tryResume(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function1)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        java.lang.Object $r1, $r4;
        kotlin.jvm.functions.Function1 $r2;
        kotlinx.coroutines.internal.Symbol $r3;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: kotlin.jvm.functions.Function1;

        $r3 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.internal.Symbol tryResumeImpl(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r4, $r1, $r2);

        return $r3;
    }

    public java.lang.Object tryResumeWithException(java.lang.Throwable)
    {
        kotlinx.coroutines.CancellableContinuationImpl $r0;
        kotlinx.coroutines.internal.Symbol $r1;
        java.lang.Throwable $r2;
        kotlinx.coroutines.CompletedExceptionally $r3;

        $r0 := @this: kotlinx.coroutines.CancellableContinuationImpl;

        $r2 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "exception");

        $r3 = new kotlinx.coroutines.CompletedExceptionally;

        specialinvoke $r3.<kotlinx.coroutines.CompletedExceptionally: void <init>(java.lang.Throwable,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r2, 0, 2, null);

        $r1 = specialinvoke $r0.<kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.internal.Symbol tryResumeImpl(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)>($r3, null, null);

        return $r1;
    }

