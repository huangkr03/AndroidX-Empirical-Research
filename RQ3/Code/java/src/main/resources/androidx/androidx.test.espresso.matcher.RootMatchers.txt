androidx.test.espresso.matcher.RootMatchers
<androidx.test.espresso.matcher.RootMatchers: java.lang.String TAG>
<androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher DEFAULT>
    static volatile java.util.List '-$$Nest$smgetResumedActivityTokens'()
    {
        java.util.List $r0;

        $r0 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: java.util.List getResumedActivityTokens()>();

        return $r0;
    }

    private static java.util.List getResumedActivityTokens()
    {
        java.util.ArrayList r0;
        androidx.test.runner.lifecycle.ActivityLifecycleMonitor $r1;
        androidx.test.runner.lifecycle.Stage $r2;
        boolean $z0, $z2;
        java.lang.Object $r3;
        android.app.Activity $r4;
        android.view.Window $r5;
        android.view.View $r6;
        android.os.IBinder $r7;
        java.util.Collection r8;
        java.util.Iterator r9;
        java.util.List r10, r11;

        $r1 = staticinvoke <androidx.test.runner.lifecycle.ActivityLifecycleMonitorRegistry: androidx.test.runner.lifecycle.ActivityLifecycleMonitor getInstance()>();

        $r2 = <androidx.test.runner.lifecycle.Stage: androidx.test.runner.lifecycle.Stage RESUMED>;

        r8 = interfaceinvoke $r1.<androidx.test.runner.lifecycle.ActivityLifecycleMonitor: java.util.Collection getActivitiesInStage(androidx.test.runner.lifecycle.Stage)>($r2);

        $z0 = interfaceinvoke r8.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RootMatchers", "suppressed: NoActivityResumedException(\"At least one activity should be in RESUMED stage.\"");

     label1:
        r0 = staticinvoke <androidx.test.espresso.core.internal.deps.guava.collect.Lists: java.util.ArrayList newArrayList()>();

        r9 = interfaceinvoke r8.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r3 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.app.Activity) $r3;

        $r5 = virtualinvoke $r4.<android.app.Activity: android.view.Window getWindow()>();

        $r6 = virtualinvoke $r5.<android.view.Window: android.view.View getDecorView()>();

        $r7 = virtualinvoke $r6.<android.view.View: android.os.IBinder getApplicationWindowToken()>();

        r10 = (java.util.List) r0;

        interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label2;

     label3:
        r11 = (java.util.List) r0;

        return r11;
    }

    private static org.hamcrest.Matcher hasWindowFocus()
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowFocus r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.RootMatchers$HasWindowFocus;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.RootMatchers$HasWindowFocus: void <init>()>();

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher hasWindowLayoutParams()
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams: void <init>()>();

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isDialog()
    {
        androidx.test.espresso.matcher.RootMatchers$IsDialog r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.RootMatchers$IsDialog;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.RootMatchers$IsDialog: void <init>()>();

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isFocusable()
    {
        androidx.test.espresso.matcher.RootMatchers$IsFocusable r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.RootMatchers$IsFocusable;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.RootMatchers$IsFocusable: void <init>()>();

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isPlatformPopup()
    {
        androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup: void <init>()>();

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    private static org.hamcrest.Matcher isSubwindowOfCurrentActivity()
    {
        androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity: void <init>()>();

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isSystemAlertWindow()
    {
        androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow: void <init>()>();

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher isTouchable()
    {
        androidx.test.espresso.matcher.RootMatchers$IsTouchable r0, r1;
        org.hamcrest.Matcher r2;

        r1 = new androidx.test.espresso.matcher.RootMatchers$IsTouchable;

        r0 = r1;

        specialinvoke r1.<androidx.test.espresso.matcher.RootMatchers$IsTouchable: void <init>()>();

        r2 = (org.hamcrest.Matcher) r0;

        return r2;
    }

    public static org.hamcrest.Matcher withDecorView(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0, r4;
        androidx.test.espresso.matcher.RootMatchers$WithDecorView r1, r3;

        r0 := @parameter0: org.hamcrest.Matcher;

        staticinvoke <androidx.test.espresso.core.internal.deps.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r3 = new androidx.test.espresso.matcher.RootMatchers$WithDecorView;

        r1 = r3;

        specialinvoke r3.<androidx.test.espresso.matcher.RootMatchers$WithDecorView: void <init>(org.hamcrest.Matcher)>(r0);

        r4 = (org.hamcrest.Matcher) r1;

        return r4;
    }

    static void <clinit>()
    {
        org.hamcrest.Matcher $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9;
        org.hamcrest.core.AnyOf $r6;

        $r0 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher hasWindowLayoutParams()>();

        $r1 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher isDialog()>();

        $r2 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher hasWindowFocus()>();

        $r3 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher withDecorView(org.hamcrest.Matcher)>($r2);

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r1, $r3);

        $r5 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher isSubwindowOfCurrentActivity()>();

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.core.AnyOf anyOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r4, $r5);

        $r7 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher isFocusable()>();

        $r8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r6, $r7);

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher allOf(org.hamcrest.Matcher,org.hamcrest.Matcher)>($r0, $r8);

        <androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher DEFAULT> = $r9;

        return;
    }

    private void <init>()
    {
        androidx.test.espresso.matcher.RootMatchers r0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

androidx.test.espresso.matcher.RootMatchers$HasWindowFocus
    public void <init>()
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowFocus r0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$HasWindowFocus;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowFocus r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$HasWindowFocus;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has window focus");

        return;
    }

    public boolean matchesSafely(android.view.View)
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowFocus r0;
        android.view.View r1;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$HasWindowFocus;

        r1 := @parameter0: android.view.View;

        $z0 = virtualinvoke r1.<android.view.View: boolean hasWindowFocus()>();

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowFocus r0;
        java.lang.Object r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$HasWindowFocus;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.view.View) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.RootMatchers$HasWindowFocus: boolean matchesSafely(android.view.View)>($r2);

        return $z0;
    }

androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams
    public void <init>()
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams r0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("has window layout params");

        return;
    }

    public boolean matchesSafely(androidx.test.espresso.Root)
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams r0;
        androidx.test.espresso.Root r1;
        androidx.test.espresso.util.EspressoOptional $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams;

        r1 := @parameter0: androidx.test.espresso.Root;

        $r2 = virtualinvoke r1.<androidx.test.espresso.Root: androidx.test.espresso.util.EspressoOptional getWindowLayoutParams()>();

        $z0 = virtualinvoke $r2.<androidx.test.espresso.util.EspressoOptional: boolean isPresent()>();

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams r0;
        java.lang.Object r1;
        androidx.test.espresso.Root $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.test.espresso.Root) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.RootMatchers$HasWindowLayoutParams: boolean matchesSafely(androidx.test.espresso.Root)>($r2);

        return $z0;
    }

androidx.test.espresso.matcher.RootMatchers$IsDialog
    public void <init>()
    {
        androidx.test.espresso.matcher.RootMatchers$IsDialog r0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsDialog;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.RootMatchers$IsDialog r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsDialog;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is dialog");

        return;
    }

    public boolean matchesSafely(androidx.test.espresso.Root)
    {
        androidx.test.espresso.Root r0;
        androidx.test.espresso.util.EspressoOptional $r1;
        java.lang.Object $r2;
        android.view.WindowManager$LayoutParams $r3;
        android.view.View $r4, $r6;
        android.os.IBinder $r5, $r7;
        androidx.test.espresso.matcher.RootMatchers$IsDialog r8;
        int i0;

        r8 := @this: androidx.test.espresso.matcher.RootMatchers$IsDialog;

        r0 := @parameter0: androidx.test.espresso.Root;

        $r1 = virtualinvoke r0.<androidx.test.espresso.Root: androidx.test.espresso.util.EspressoOptional getWindowLayoutParams()>();

        $r2 = virtualinvoke $r1.<androidx.test.espresso.util.EspressoOptional: java.lang.Object get()>();

        $r3 = (android.view.WindowManager$LayoutParams) $r2;

        i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if i0 == 1 goto label1;

        if i0 >= 99 goto label1;

        $r4 = virtualinvoke r0.<androidx.test.espresso.Root: android.view.View getDecorView()>();

        $r5 = virtualinvoke $r4.<android.view.View: android.os.IBinder getWindowToken()>();

        $r6 = virtualinvoke r0.<androidx.test.espresso.Root: android.view.View getDecorView()>();

        $r7 = virtualinvoke $r6.<android.view.View: android.os.IBinder getApplicationWindowToken()>();

        if $r5 != $r7 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        androidx.test.espresso.matcher.RootMatchers$IsDialog r0;
        java.lang.Object r1;
        androidx.test.espresso.Root $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsDialog;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.test.espresso.Root) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.RootMatchers$IsDialog: boolean matchesSafely(androidx.test.espresso.Root)>($r2);

        return $z0;
    }

androidx.test.espresso.matcher.RootMatchers$IsFocusable
    public void <init>()
    {
        androidx.test.espresso.matcher.RootMatchers$IsFocusable r0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsFocusable;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.RootMatchers$IsFocusable r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsFocusable;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is focusable");

        return;
    }

    public boolean matchesSafely(androidx.test.espresso.Root)
    {
        androidx.test.espresso.Root r0;
        androidx.test.espresso.util.EspressoOptional $r1;
        java.lang.Object $r2;
        android.view.WindowManager$LayoutParams $r3;
        int $i0, $i1;
        androidx.test.espresso.matcher.RootMatchers$IsFocusable r4;
        boolean z0;

        r4 := @this: androidx.test.espresso.matcher.RootMatchers$IsFocusable;

        r0 := @parameter0: androidx.test.espresso.Root;

        $r1 = virtualinvoke r0.<androidx.test.espresso.Root: androidx.test.espresso.util.EspressoOptional getWindowLayoutParams()>();

        $r2 = virtualinvoke $r1.<androidx.test.espresso.util.EspressoOptional: java.lang.Object get()>();

        $r3 = (android.view.WindowManager$LayoutParams) $r2;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 8;

        if $i1 == 8 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        androidx.test.espresso.matcher.RootMatchers$IsFocusable r0;
        java.lang.Object r1;
        androidx.test.espresso.Root $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsFocusable;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.test.espresso.Root) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.RootMatchers$IsFocusable: boolean matchesSafely(androidx.test.espresso.Root)>($r2);

        return $z0;
    }

androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup
    public void <init>()
    {
        androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup r0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with decor view of type PopupWindow$PopupViewContainer");

        return;
    }

    public boolean matchesSafely(androidx.test.espresso.Root)
    {
        androidx.test.espresso.Root r0;
        int $i0;
        org.hamcrest.Matcher $r1, $r2, $r3;
        boolean $z0;
        androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup r4;
        java.lang.String r5;

        r4 := @this: androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup;

        r0 := @parameter0: androidx.test.espresso.Root;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 23 goto label2;

        r5 = "android.widget.PopupWindow$PopupDecorView";

     label1:
        $r1 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r5);

        $r2 = staticinvoke <androidx.test.espresso.matcher.ViewMatchers: org.hamcrest.Matcher withClassName(org.hamcrest.Matcher)>($r1);

        $r3 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: org.hamcrest.Matcher withDecorView(org.hamcrest.Matcher)>($r2);

        $z0 = interfaceinvoke $r3.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r0);

        return $z0;

     label2:
        r5 = "android.widget.PopupWindow$PopupViewContainer";

        goto label1;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup r0;
        java.lang.Object r1;
        androidx.test.espresso.Root $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.test.espresso.Root) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.RootMatchers$IsPlatformPopup: boolean matchesSafely(androidx.test.espresso.Root)>($r2);

        return $z0;
    }

androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity
    public void <init>()
    {
        androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity r0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is subwindow of current activity");

        return;
    }

    public boolean matchesSafely(androidx.test.espresso.Root)
    {
        androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity r0;
        androidx.test.espresso.Root r1;
        java.util.List $r2;
        android.view.View $r3;
        android.os.IBinder $r4;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity;

        r1 := @parameter0: androidx.test.espresso.Root;

        $r2 = staticinvoke <androidx.test.espresso.matcher.RootMatchers: java.util.List '-$$Nest$smgetResumedActivityTokens'()>();

        $r3 = virtualinvoke r1.<androidx.test.espresso.Root: android.view.View getDecorView()>();

        $r4 = virtualinvoke $r3.<android.view.View: android.os.IBinder getApplicationWindowToken()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>($r4);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity r0;
        java.lang.Object r1;
        androidx.test.espresso.Root $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.test.espresso.Root) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.RootMatchers$IsSubwindowOfCurrentActivity: boolean matchesSafely(androidx.test.espresso.Root)>($r2);

        return $z0;
    }

androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow
    public void <init>()
    {
        androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow r0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is system alert window");

        return;
    }

    public boolean matchesSafely(androidx.test.espresso.Root)
    {
        androidx.test.espresso.Root r0;
        androidx.test.espresso.util.EspressoOptional $r1;
        java.lang.Object $r2;
        android.view.WindowManager$LayoutParams $r3;
        android.view.View $r4, $r6;
        android.os.IBinder $r5, $r7;
        androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow r8;
        int i0;

        r8 := @this: androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow;

        r0 := @parameter0: androidx.test.espresso.Root;

        $r1 = virtualinvoke r0.<androidx.test.espresso.Root: androidx.test.espresso.util.EspressoOptional getWindowLayoutParams()>();

        $r2 = virtualinvoke $r1.<androidx.test.espresso.util.EspressoOptional: java.lang.Object get()>();

        $r3 = (android.view.WindowManager$LayoutParams) $r2;

        i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if i0 <= 2000 goto label1;

        if i0 >= 2999 goto label1;

        $r4 = virtualinvoke r0.<androidx.test.espresso.Root: android.view.View getDecorView()>();

        $r5 = virtualinvoke $r4.<android.view.View: android.os.IBinder getWindowToken()>();

        $r6 = virtualinvoke r0.<androidx.test.espresso.Root: android.view.View getDecorView()>();

        $r7 = virtualinvoke $r6.<android.view.View: android.os.IBinder getApplicationWindowToken()>();

        if $r5 != $r7 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow r0;
        java.lang.Object r1;
        androidx.test.espresso.Root $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.test.espresso.Root) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.RootMatchers$IsSystemAlertWindow: boolean matchesSafely(androidx.test.espresso.Root)>($r2);

        return $z0;
    }

androidx.test.espresso.matcher.RootMatchers$IsTouchable
    public void <init>()
    {
        androidx.test.espresso.matcher.RootMatchers$IsTouchable r0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsTouchable;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.RootMatchers$IsTouchable r0;
        org.hamcrest.Description r1;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsTouchable;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("is touchable");

        return;
    }

    public boolean matchesSafely(androidx.test.espresso.Root)
    {
        androidx.test.espresso.Root r0;
        androidx.test.espresso.util.EspressoOptional $r1;
        java.lang.Object $r2;
        android.view.WindowManager$LayoutParams $r3;
        int $i0, $i1;
        androidx.test.espresso.matcher.RootMatchers$IsTouchable r4;
        boolean z0;

        r4 := @this: androidx.test.espresso.matcher.RootMatchers$IsTouchable;

        r0 := @parameter0: androidx.test.espresso.Root;

        $r1 = virtualinvoke r0.<androidx.test.espresso.Root: androidx.test.espresso.util.EspressoOptional getWindowLayoutParams()>();

        $r2 = virtualinvoke $r1.<androidx.test.espresso.util.EspressoOptional: java.lang.Object get()>();

        $r3 = (android.view.WindowManager$LayoutParams) $r2;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 16;

        if $i1 == 16 goto label2;

        z0 = 1;

     label1:
        return z0;

     label2:
        z0 = 0;

        goto label1;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        androidx.test.espresso.matcher.RootMatchers$IsTouchable r0;
        java.lang.Object r1;
        androidx.test.espresso.Root $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$IsTouchable;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.test.espresso.Root) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.RootMatchers$IsTouchable: boolean matchesSafely(androidx.test.espresso.Root)>($r2);

        return $z0;
    }

androidx.test.espresso.matcher.RootMatchers$WithDecorView
<androidx.test.espresso.matcher.RootMatchers$WithDecorView: org.hamcrest.Matcher decorViewMatcher>
    public void <init>(org.hamcrest.Matcher)
    {
        androidx.test.espresso.matcher.RootMatchers$WithDecorView r0;
        org.hamcrest.Matcher r1;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$WithDecorView;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<androidx.test.espresso.matcher.RootMatchers$WithDecorView: org.hamcrest.Matcher decorViewMatcher> = r1;

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        androidx.test.espresso.matcher.RootMatchers$WithDecorView r0;
        org.hamcrest.Description r1;
        org.hamcrest.Matcher $r3;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$WithDecorView;

        r1 := @parameter0: org.hamcrest.Description;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with decor view ");

        $r3 = r0.<androidx.test.espresso.matcher.RootMatchers$WithDecorView: org.hamcrest.Matcher decorViewMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Matcher: void describeTo(org.hamcrest.Description)>(r1);

        return;
    }

    public boolean matchesSafely(androidx.test.espresso.Root)
    {
        androidx.test.espresso.matcher.RootMatchers$WithDecorView r0;
        androidx.test.espresso.Root r1;
        org.hamcrest.Matcher $r2;
        android.view.View $r3;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$WithDecorView;

        r1 := @parameter0: androidx.test.espresso.Root;

        $r2 = r0.<androidx.test.espresso.matcher.RootMatchers$WithDecorView: org.hamcrest.Matcher decorViewMatcher>;

        $r3 = virtualinvoke r1.<androidx.test.espresso.Root: android.view.View getDecorView()>();

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>($r3);

        return $z0;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        androidx.test.espresso.matcher.RootMatchers$WithDecorView r0;
        java.lang.Object r1;
        androidx.test.espresso.Root $r2;
        boolean $z0;

        r0 := @this: androidx.test.espresso.matcher.RootMatchers$WithDecorView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.test.espresso.Root) r1;

        $z0 = virtualinvoke r0.<androidx.test.espresso.matcher.RootMatchers$WithDecorView: boolean matchesSafely(androidx.test.espresso.Root)>($r2);

        return $z0;
    }

