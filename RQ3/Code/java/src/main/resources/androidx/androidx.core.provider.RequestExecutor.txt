androidx.core.provider.RequestExecutor
    private void <init>()
    {
        androidx.core.provider.RequestExecutor r0;

        r0 := @this: androidx.core.provider.RequestExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void execute(java.util.concurrent.Executor, java.util.concurrent.Callable, androidx.core.util.Consumer)
    {
        java.util.concurrent.Executor r0;
        java.util.concurrent.Callable r1;
        androidx.core.util.Consumer r2;
        android.os.Handler r3;
        androidx.core.provider.RequestExecutor$ReplyRunnable $r4;

        r0 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: java.util.concurrent.Callable;

        r2 := @parameter2: androidx.core.util.Consumer;

        r3 = staticinvoke <androidx.core.provider.CalleeHandler: android.os.Handler create()>();

        $r4 = new androidx.core.provider.RequestExecutor$ReplyRunnable;

        specialinvoke $r4.<androidx.core.provider.RequestExecutor$ReplyRunnable: void <init>(android.os.Handler,java.util.concurrent.Callable,androidx.core.util.Consumer)>(r3, r1, r2);

        interfaceinvoke r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

        return;
    }

    static java.lang.Object submit(java.util.concurrent.ExecutorService, java.util.concurrent.Callable, int) throws java.lang.InterruptedException
    {
        java.util.concurrent.ExecutorService r0;
        java.util.concurrent.Callable r1;
        int i0;
        java.util.concurrent.Future r2;
        java.util.concurrent.TimeUnit $r3;
        long $l1;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r7, $r9, r10, r11, r12, r15;
        java.lang.RuntimeException r13;
        java.lang.InterruptedException r14;

        r0 := @parameter0: java.util.concurrent.ExecutorService;

        r1 := @parameter1: java.util.concurrent.Callable;

        i0 := @parameter2: int;

        r2 = interfaceinvoke r0.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(r1);

     label1:
        $l1 = (long) i0;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r4 = interfaceinvoke r2.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l1, $r3);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        r10 = $r7;

        r13 = new java.lang.RuntimeException;

        specialinvoke r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r10);

        r15 = (java.lang.Throwable) r13;

        throw r15;

     label4:
        $r9 := @caughtexception;

        r11 = $r9;

        throw r11;

     label5:
        $r5 := @caughtexception;

        r12 = $r5;

        r14 = new java.lang.InterruptedException;

        specialinvoke r14.<java.lang.InterruptedException: void <init>(java.lang.String)>("timeout");

        throw r14;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.util.concurrent.TimeoutException from label1 to label2 with label5;
    }

    static java.util.concurrent.ThreadPoolExecutor createDefaultExecutor(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        androidx.core.provider.RequestExecutor$DefaultThreadFactory r1, $r3;
        java.util.concurrent.ThreadPoolExecutor r2, $r4;
        java.util.concurrent.LinkedBlockingDeque $r5;
        long $l2;
        java.util.concurrent.TimeUnit $r6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new androidx.core.provider.RequestExecutor$DefaultThreadFactory;

        specialinvoke $r3.<androidx.core.provider.RequestExecutor$DefaultThreadFactory: void <init>(java.lang.String,int)>(r0, i0);

        r1 = $r3;

        $r4 = new java.util.concurrent.ThreadPoolExecutor;

        $l2 = (long) i1;

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r5 = new java.util.concurrent.LinkedBlockingDeque;

        specialinvoke $r5.<java.util.concurrent.LinkedBlockingDeque: void <init>()>();

        specialinvoke $r4.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 1, $l2, $r6, $r5, r1);

        r2 = $r4;

        virtualinvoke r2.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1);

        return r2;
    }

    static java.util.concurrent.Executor createHandlerExecutor(android.os.Handler)
    {
        android.os.Handler r0;
        androidx.core.provider.RequestExecutor$HandlerExecutor $r1;

        r0 := @parameter0: android.os.Handler;

        $r1 = new androidx.core.provider.RequestExecutor$HandlerExecutor;

        specialinvoke $r1.<androidx.core.provider.RequestExecutor$HandlerExecutor: void <init>(android.os.Handler)>(r0);

        return $r1;
    }

androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread
<androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread: int mPriority>
    void <init>(java.lang.Runnable, java.lang.String, int)
    {
        androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread r0;
        java.lang.Runnable r1;
        java.lang.String r2;
        int i0;

        r0 := @this: androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r1, r2);

        r0.<androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread: int mPriority> = i0;

        return;
    }

    public void run()
    {
        androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread r0;
        int $i0;

        r0 := @this: androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread;

        $i0 = r0.<androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread: int mPriority>;

        staticinvoke <android.os.Process: void setThreadPriority(int)>($i0);

        specialinvoke r0.<java.lang.Thread: void run()>();

        return;
    }

androidx.core.provider.RequestExecutor$DefaultThreadFactory
<androidx.core.provider.RequestExecutor$DefaultThreadFactory: java.lang.String mThreadName>
<androidx.core.provider.RequestExecutor$DefaultThreadFactory: int mPriority>
    void <init>(java.lang.String, int)
    {
        androidx.core.provider.RequestExecutor$DefaultThreadFactory r0;
        java.lang.String r1;
        int i0;

        r0 := @this: androidx.core.provider.RequestExecutor$DefaultThreadFactory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.core.provider.RequestExecutor$DefaultThreadFactory: java.lang.String mThreadName> = r1;

        r0.<androidx.core.provider.RequestExecutor$DefaultThreadFactory: int mPriority> = i0;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        androidx.core.provider.RequestExecutor$DefaultThreadFactory r0;
        java.lang.Runnable r1;
        androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: androidx.core.provider.RequestExecutor$DefaultThreadFactory;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = new androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread;

        $r3 = r0.<androidx.core.provider.RequestExecutor$DefaultThreadFactory: java.lang.String mThreadName>;

        $i0 = r0.<androidx.core.provider.RequestExecutor$DefaultThreadFactory: int mPriority>;

        specialinvoke $r2.<androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread: void <init>(java.lang.Runnable,java.lang.String,int)>(r1, $r3, $i0);

        return $r2;
    }

androidx.core.provider.RequestExecutor$HandlerExecutor
<androidx.core.provider.RequestExecutor$HandlerExecutor: android.os.Handler mHandler>
    void <init>(android.os.Handler)
    {
        androidx.core.provider.RequestExecutor$HandlerExecutor r0;
        android.os.Handler r1, $r3;
        java.lang.Object $r2;

        r0 := @this: androidx.core.provider.RequestExecutor$HandlerExecutor;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (android.os.Handler) $r2;

        r0.<androidx.core.provider.RequestExecutor$HandlerExecutor: android.os.Handler mHandler> = $r3;

        return;
    }

    public void execute(java.lang.Runnable)
    {
        androidx.core.provider.RequestExecutor$HandlerExecutor r0;
        java.lang.Runnable r1, $r4;
        android.os.Handler $r2, $r7;
        java.lang.Object $r3;
        boolean $z0;
        java.util.concurrent.RejectedExecutionException $r5;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: androidx.core.provider.RequestExecutor$HandlerExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<androidx.core.provider.RequestExecutor$HandlerExecutor: android.os.Handler mHandler>;

        $r3 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.Runnable) $r3;

        $z0 = virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        if $z0 != 0 goto label1;

        $r5 = new java.util.concurrent.RejectedExecutionException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<androidx.core.provider.RequestExecutor$HandlerExecutor: android.os.Handler mHandler>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is shutting down");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        return;
    }

androidx.core.provider.RequestExecutor$ReplyRunnable$1
<androidx.core.provider.RequestExecutor$ReplyRunnable$1: androidx.core.util.Consumer val$consumer>
<androidx.core.provider.RequestExecutor$ReplyRunnable$1: java.lang.Object val$result>
<androidx.core.provider.RequestExecutor$ReplyRunnable$1: androidx.core.provider.RequestExecutor$ReplyRunnable this$0>
    void <init>(androidx.core.provider.RequestExecutor$ReplyRunnable, androidx.core.util.Consumer, java.lang.Object)
    {
        androidx.core.provider.RequestExecutor$ReplyRunnable$1 r0;
        androidx.core.provider.RequestExecutor$ReplyRunnable r1;
        androidx.core.util.Consumer r2;
        java.lang.Object r3;

        r0 := @this: androidx.core.provider.RequestExecutor$ReplyRunnable$1;

        r1 := @parameter0: androidx.core.provider.RequestExecutor$ReplyRunnable;

        r2 := @parameter1: androidx.core.util.Consumer;

        r3 := @parameter2: java.lang.Object;

        r0.<androidx.core.provider.RequestExecutor$ReplyRunnable$1: androidx.core.provider.RequestExecutor$ReplyRunnable this$0> = r1;

        r0.<androidx.core.provider.RequestExecutor$ReplyRunnable$1: androidx.core.util.Consumer val$consumer> = r2;

        r0.<androidx.core.provider.RequestExecutor$ReplyRunnable$1: java.lang.Object val$result> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        androidx.core.provider.RequestExecutor$ReplyRunnable$1 r0;
        java.lang.Object $r1;
        androidx.core.util.Consumer $r2;

        r0 := @this: androidx.core.provider.RequestExecutor$ReplyRunnable$1;

        $r2 = r0.<androidx.core.provider.RequestExecutor$ReplyRunnable$1: androidx.core.util.Consumer val$consumer>;

        $r1 = r0.<androidx.core.provider.RequestExecutor$ReplyRunnable$1: java.lang.Object val$result>;

        interfaceinvoke $r2.<androidx.core.util.Consumer: void accept(java.lang.Object)>($r1);

        return;
    }

androidx.core.provider.RequestExecutor$ReplyRunnable
<androidx.core.provider.RequestExecutor$ReplyRunnable: java.util.concurrent.Callable mCallable>
<androidx.core.provider.RequestExecutor$ReplyRunnable: androidx.core.util.Consumer mConsumer>
<androidx.core.provider.RequestExecutor$ReplyRunnable: android.os.Handler mHandler>
    void <init>(android.os.Handler, java.util.concurrent.Callable, androidx.core.util.Consumer)
    {
        androidx.core.provider.RequestExecutor$ReplyRunnable r0;
        android.os.Handler r1;
        java.util.concurrent.Callable r2;
        androidx.core.util.Consumer r3;

        r0 := @this: androidx.core.provider.RequestExecutor$ReplyRunnable;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: java.util.concurrent.Callable;

        r3 := @parameter2: androidx.core.util.Consumer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.core.provider.RequestExecutor$ReplyRunnable: java.util.concurrent.Callable mCallable> = r2;

        r0.<androidx.core.provider.RequestExecutor$ReplyRunnable: androidx.core.util.Consumer mConsumer> = r3;

        r0.<androidx.core.provider.RequestExecutor$ReplyRunnable: android.os.Handler mHandler> = r1;

        return;
    }

    public void run()
    {
        androidx.core.provider.RequestExecutor$ReplyRunnable r0;
        androidx.core.util.Consumer r1;
        java.util.concurrent.Callable $r2;
        androidx.core.provider.RequestExecutor$ReplyRunnable$1 $r3;
        android.os.Handler $r4;
        java.lang.Throwable $r5, r7;
        java.lang.Object r6, r8;

        r0 := @this: androidx.core.provider.RequestExecutor$ReplyRunnable;

     label1:
        $r2 = r0.<androidx.core.provider.RequestExecutor$ReplyRunnable: java.util.concurrent.Callable mCallable>;

        r6 = interfaceinvoke $r2.<java.util.concurrent.Callable: java.lang.Object call()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        r6 = null;

     label4:
        r8 = r6;

        r1 = r0.<androidx.core.provider.RequestExecutor$ReplyRunnable: androidx.core.util.Consumer mConsumer>;

        $r4 = r0.<androidx.core.provider.RequestExecutor$ReplyRunnable: android.os.Handler mHandler>;

        $r3 = new androidx.core.provider.RequestExecutor$ReplyRunnable$1;

        specialinvoke $r3.<androidx.core.provider.RequestExecutor$ReplyRunnable$1: void <init>(androidx.core.provider.RequestExecutor$ReplyRunnable,androidx.core.util.Consumer,java.lang.Object)>(r0, r1, r8);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

