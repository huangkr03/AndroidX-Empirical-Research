androidx.animation.PhysicsBuilder
<androidx.animation.PhysicsBuilder: java.lang.Object genericThreshold>
<androidx.animation.PhysicsBuilder: float dampingRatio>
<androidx.animation.PhysicsBuilder: float stiffness>
    public androidx.animation.SpringSpec build(androidx.animation.TwoWayConverter)
    {
        androidx.animation.PhysicsBuilder r0;
        androidx.animation.TwoWayConverter r1;
        androidx.animation.AnimationVector r2, $r10;
        java.lang.Object r3, r4, $r5, $r8, $r9;
        boolean z0, z1;
        androidx.animation.SpringSpec $r6;
        float $f0, $f1;
        kotlin.jvm.functions.Function1 $r7;

        r0 := @this: androidx.animation.PhysicsBuilder;

        r1 := @parameter0: androidx.animation.TwoWayConverter;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "converter");

        $r5 = r0.<androidx.animation.PhysicsBuilder: java.lang.Object genericThreshold>;

        if $r5 == null goto label1;

        r3 = $r5;

        z0 = 0;

        z1 = 0;

        r4 = r3;

        $r7 = interfaceinvoke r1.<androidx.animation.TwoWayConverter: kotlin.jvm.functions.Function1 getConvertToVector()>();

        $r8 = r0.<androidx.animation.PhysicsBuilder: java.lang.Object genericThreshold>;

        $r9 = interfaceinvoke $r7.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r8);

        $r10 = (androidx.animation.AnimationVector) $r9;

        goto label2;

     label1:
        $r10 = null;

     label2:
        r2 = $r10;

        $r6 = new androidx.animation.SpringSpec;

        $f1 = r0.<androidx.animation.PhysicsBuilder: float dampingRatio>;

        $f0 = r0.<androidx.animation.PhysicsBuilder: float stiffness>;

        specialinvoke $r6.<androidx.animation.SpringSpec: void <init>(float,float,androidx.animation.AnimationVector)>($f1, $f0, r2);

        return $r6;
    }

    public volatile androidx.animation.AnimationSpec build(androidx.animation.TwoWayConverter)
    {
        androidx.animation.PhysicsBuilder r0;
        androidx.animation.TwoWayConverter r1;
        androidx.animation.SpringSpec $r2;
        androidx.animation.AnimationSpec $r3;

        r0 := @this: androidx.animation.PhysicsBuilder;

        r1 := @parameter0: androidx.animation.TwoWayConverter;

        $r2 = virtualinvoke r0.<androidx.animation.PhysicsBuilder: androidx.animation.SpringSpec build(androidx.animation.TwoWayConverter)>(r1);

        $r3 = (androidx.animation.AnimationSpec) $r2;

        return $r3;
    }

    public final float getDampingRatio()
    {
        androidx.animation.PhysicsBuilder r0;
        float $f0;

        r0 := @this: androidx.animation.PhysicsBuilder;

        $f0 = r0.<androidx.animation.PhysicsBuilder: float dampingRatio>;

        return $f0;
    }

    public final void setDampingRatio(float)
    {
        androidx.animation.PhysicsBuilder r0;
        float f0;

        r0 := @this: androidx.animation.PhysicsBuilder;

        f0 := @parameter0: float;

        r0.<androidx.animation.PhysicsBuilder: float dampingRatio> = f0;

        return;
    }

    public final float getStiffness()
    {
        androidx.animation.PhysicsBuilder r0;
        float $f0;

        r0 := @this: androidx.animation.PhysicsBuilder;

        $f0 = r0.<androidx.animation.PhysicsBuilder: float stiffness>;

        return $f0;
    }

    public final void setStiffness(float)
    {
        androidx.animation.PhysicsBuilder r0;
        float f0;

        r0 := @this: androidx.animation.PhysicsBuilder;

        f0 := @parameter0: float;

        r0.<androidx.animation.PhysicsBuilder: float stiffness> = f0;

        return;
    }

    public void <init>(float, float, java.lang.Object)
    {
        androidx.animation.PhysicsBuilder r0;
        float f0, f1;
        java.lang.Object r1;

        r0 := @this: androidx.animation.PhysicsBuilder;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: java.lang.Object;

        specialinvoke r0.<androidx.animation.AnimationBuilder: void <init>()>();

        r0.<androidx.animation.PhysicsBuilder: float dampingRatio> = f0;

        r0.<androidx.animation.PhysicsBuilder: float stiffness> = f1;

        r0.<androidx.animation.PhysicsBuilder: java.lang.Object genericThreshold> = r1;

        return;
    }

    public void <init>(float, float, java.lang.Object, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.animation.PhysicsBuilder r0;
        int i0, $i1, $i2, $i3;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        float f0, f1;
        java.lang.Object r2;

        r0 := @this: androidx.animation.PhysicsBuilder;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r2 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        r1 := @parameter4: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = 1.0F;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        f1 = 1500.0F;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        r2 = null;

     label3:
        specialinvoke r0.<androidx.animation.PhysicsBuilder: void <init>(float,float,java.lang.Object)>(f0, f1, r2);

        return;
    }

    public void <init>()
    {
        androidx.animation.PhysicsBuilder r0;

        r0 := @this: androidx.animation.PhysicsBuilder;

        specialinvoke r0.<androidx.animation.PhysicsBuilder: void <init>(float,float,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0.0F, 0.0F, null, 7, null);

        return;
    }

