androidx.security.identity.HardwareIdentityCredentialStore
<androidx.security.identity.HardwareIdentityCredentialStore: java.lang.String TAG>
<androidx.security.identity.HardwareIdentityCredentialStore: android.content.Context mContext>
<androidx.security.identity.HardwareIdentityCredentialStore: android.security.identity.IdentityCredentialStore mStore>
<androidx.security.identity.HardwareIdentityCredentialStore: boolean mIsDirectAccess>
<androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.SimpleIdentityCredentialStoreCapabilities mCapabilities>
    private void <init>(android.security.identity.IdentityCredentialStore, android.content.Context, boolean)
    {
        androidx.security.identity.HardwareIdentityCredentialStore r0;
        android.security.identity.IdentityCredentialStore r1;
        android.content.Context r2;
        boolean z0;

        r0 := @this: androidx.security.identity.HardwareIdentityCredentialStore;

        r1 := @parameter0: android.security.identity.IdentityCredentialStore;

        r2 := @parameter1: android.content.Context;

        z0 := @parameter2: boolean;

        specialinvoke r0.<androidx.security.identity.IdentityCredentialStore: void <init>()>();

        r0.<androidx.security.identity.HardwareIdentityCredentialStore: android.security.identity.IdentityCredentialStore mStore> = null;

        r0.<androidx.security.identity.HardwareIdentityCredentialStore: boolean mIsDirectAccess> = 0;

        r0.<androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.SimpleIdentityCredentialStoreCapabilities mCapabilities> = null;

        r0.<androidx.security.identity.HardwareIdentityCredentialStore: android.security.identity.IdentityCredentialStore mStore> = r1;

        r0.<androidx.security.identity.HardwareIdentityCredentialStore: android.content.Context mContext> = r2;

        r0.<androidx.security.identity.HardwareIdentityCredentialStore: boolean mIsDirectAccess> = z0;

        return;
    }

    static androidx.security.identity.IdentityCredentialStore getInstanceIfSupported(android.content.Context)
    {
        android.content.Context r0;
        android.security.identity.IdentityCredentialStore r1;
        androidx.security.identity.HardwareIdentityCredentialStore $r2;

        r0 := @parameter0: android.content.Context;

        r1 = staticinvoke <android.security.identity.IdentityCredentialStore: android.security.identity.IdentityCredentialStore getInstance(android.content.Context)>(r0);

        if r1 == null goto label1;

        $r2 = new androidx.security.identity.HardwareIdentityCredentialStore;

        specialinvoke $r2.<androidx.security.identity.HardwareIdentityCredentialStore: void <init>(android.security.identity.IdentityCredentialStore,android.content.Context,boolean)>(r1, r0, 0);

        return $r2;

     label1:
        return null;
    }

    public static androidx.security.identity.IdentityCredentialStore getInstance(android.content.Context)
    {
        android.content.Context r0;
        androidx.security.identity.IdentityCredentialStore r1;
        java.lang.RuntimeException $r2;

        r0 := @parameter0: android.content.Context;

        r1 = staticinvoke <androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.IdentityCredentialStore getInstanceIfSupported(android.content.Context)>(r0);

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("HW-backed IdentityCredential not supported");

        throw $r2;
    }

    static androidx.security.identity.IdentityCredentialStore getDirectAccessInstanceIfSupported(android.content.Context)
    {
        android.content.Context r0;
        android.security.identity.IdentityCredentialStore r1;
        androidx.security.identity.HardwareIdentityCredentialStore $r2;

        r0 := @parameter0: android.content.Context;

        r1 = staticinvoke <android.security.identity.IdentityCredentialStore: android.security.identity.IdentityCredentialStore getDirectAccessInstance(android.content.Context)>(r0);

        if r1 == null goto label1;

        $r2 = new androidx.security.identity.HardwareIdentityCredentialStore;

        specialinvoke $r2.<androidx.security.identity.HardwareIdentityCredentialStore: void <init>(android.security.identity.IdentityCredentialStore,android.content.Context,boolean)>(r1, r0, 1);

        return $r2;

     label1:
        return null;
    }

    public static androidx.security.identity.IdentityCredentialStore getDirectAccessInstance(android.content.Context)
    {
        android.content.Context r0;
        androidx.security.identity.IdentityCredentialStore r1;
        java.lang.RuntimeException $r2;

        r0 := @parameter0: android.content.Context;

        r1 = staticinvoke <androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.IdentityCredentialStore getDirectAccessInstanceIfSupported(android.content.Context)>(r0);

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("HW-backed direct-access IdentityCredential not supported");

        throw $r2;
    }

    public static boolean isDirectAccessSupported(android.content.Context)
    {
        android.content.Context r0;
        androidx.security.identity.IdentityCredentialStore r1;

        r0 := @parameter0: android.content.Context;

        r1 = staticinvoke <androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.IdentityCredentialStore getDirectAccessInstanceIfSupported(android.content.Context)>(r0);

        if r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String[] getSupportedDocTypes()
    {
        androidx.security.identity.HardwareIdentityCredentialStore r0;
        java.util.Set r1;
        java.lang.String[] r2;
        java.util.Iterator r3;
        java.lang.String r4;
        androidx.security.identity.IdentityCredentialStoreCapabilities $r5;
        int $i0, $i1, i2;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: androidx.security.identity.HardwareIdentityCredentialStore;

        $r5 = virtualinvoke r0.<androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.IdentityCredentialStoreCapabilities getCapabilities()>();

        r1 = virtualinvoke $r5.<androidx.security.identity.IdentityCredentialStoreCapabilities: java.util.Set getSupportedDocTypes()>();

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        i2 = 0;

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r6;

        $i1 = i2;

        i2 = i2 + 1;

        r2[$i1] = r4;

        goto label1;

     label2:
        return r2;
    }

    public androidx.security.identity.WritableIdentityCredential createCredential(java.lang.String, java.lang.String) throws androidx.security.identity.AlreadyPersonalizedException, androidx.security.identity.DocTypeNotSupportedException
    {
        androidx.security.identity.HardwareIdentityCredentialStore r0;
        java.lang.String r1, r2, $r7, $r10;
        android.security.identity.IdentityCredentialStore $r3;
        java.lang.Throwable $r5, $r8, r12, r13, r17, r18;
        android.security.identity.WritableIdentityCredential r11;
        androidx.security.identity.HardwareWritableIdentityCredential r14;
        androidx.security.identity.AlreadyPersonalizedException r15;
        androidx.security.identity.DocTypeNotSupportedException r16;

        r0 := @this: androidx.security.identity.HardwareIdentityCredentialStore;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: android.security.identity.IdentityCredentialStore mStore>;

        r11 = virtualinvoke $r3.<android.security.identity.IdentityCredentialStore: android.security.identity.WritableIdentityCredential createCredential(java.lang.String,java.lang.String)>(r1, r2);

        r14 = new androidx.security.identity.HardwareWritableIdentityCredential;

        specialinvoke r14.<androidx.security.identity.HardwareWritableIdentityCredential: void <init>(android.security.identity.WritableIdentityCredential)>(r11);

     label2:
        return r14;

     label3:
        $r8 := @caughtexception;

        r12 = $r8;

        r15 = new androidx.security.identity.AlreadyPersonalizedException;

        $r10 = virtualinvoke r12.<android.security.identity.AlreadyPersonalizedException: java.lang.String getMessage()>();

        specialinvoke r15.<androidx.security.identity.AlreadyPersonalizedException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r12);

        r17 = (java.lang.Throwable) r15;

        throw r17;

     label4:
        $r5 := @caughtexception;

        r13 = $r5;

        r16 = new androidx.security.identity.DocTypeNotSupportedException;

        $r7 = virtualinvoke r13.<android.security.identity.DocTypeNotSupportedException: java.lang.String getMessage()>();

        specialinvoke r16.<androidx.security.identity.DocTypeNotSupportedException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r13);

        r18 = (java.lang.Throwable) r16;

        throw r18;

        catch android.security.identity.AlreadyPersonalizedException from label1 to label2 with label3;
        catch android.security.identity.DocTypeNotSupportedException from label1 to label2 with label4;
    }

    public androidx.security.identity.IdentityCredential getCredentialByName(java.lang.String, int) throws androidx.security.identity.CipherSuiteNotSupportedException
    {
        androidx.security.identity.HardwareIdentityCredentialStore r0;
        java.lang.String r1, $r6;
        int i0;
        android.security.identity.IdentityCredentialStore $r2;
        java.lang.Throwable $r4, r8, r11;
        android.security.identity.IdentityCredential r7;
        androidx.security.identity.HardwareIdentityCredential r9;
        androidx.security.identity.CipherSuiteNotSupportedException r10;

        r0 := @this: androidx.security.identity.HardwareIdentityCredentialStore;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: android.security.identity.IdentityCredentialStore mStore>;

        r7 = virtualinvoke $r2.<android.security.identity.IdentityCredentialStore: android.security.identity.IdentityCredential getCredentialByName(java.lang.String,int)>(r1, i0);

        if r7 != null goto label3;

     label2:
        return null;

     label3:
        r9 = new androidx.security.identity.HardwareIdentityCredential;

        specialinvoke r9.<androidx.security.identity.HardwareIdentityCredential: void <init>(android.security.identity.IdentityCredential)>(r7);

     label4:
        return r9;

     label5:
        $r4 := @caughtexception;

        r8 = $r4;

        r10 = new androidx.security.identity.CipherSuiteNotSupportedException;

        $r6 = virtualinvoke r8.<android.security.identity.CipherSuiteNotSupportedException: java.lang.String getMessage()>();

        specialinvoke r10.<androidx.security.identity.CipherSuiteNotSupportedException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r8);

        r11 = (java.lang.Throwable) r10;

        throw r11;

        catch android.security.identity.CipherSuiteNotSupportedException from label1 to label2 with label5;
        catch android.security.identity.CipherSuiteNotSupportedException from label3 to label4 with label5;
    }

    public byte[] deleteCredentialByName(java.lang.String)
    {
        androidx.security.identity.HardwareIdentityCredentialStore r0;
        java.lang.String r1;
        android.security.identity.IdentityCredentialStore $r2;
        byte[] $r3;

        r0 := @this: androidx.security.identity.HardwareIdentityCredentialStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: android.security.identity.IdentityCredentialStore mStore>;

        $r3 = virtualinvoke $r2.<android.security.identity.IdentityCredentialStore: byte[] deleteCredentialByName(java.lang.String)>(r1);

        return $r3;
    }

    public androidx.security.identity.IdentityCredentialStoreCapabilities getCapabilities()
    {
        androidx.security.identity.HardwareIdentityCredentialStore r0;
        java.util.LinkedHashSet r1, $r3;
        android.content.pm.PackageManager r2;
        android.security.identity.IdentityCredentialStore $r4;
        java.lang.String[] $r5;
        java.util.List $r6;
        androidx.security.identity.SimpleIdentityCredentialStoreCapabilities $r7, $r9, $r10, $r12;
        android.content.Context $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String r11;

        r0 := @this: androidx.security.identity.HardwareIdentityCredentialStore;

        $r3 = new java.util.LinkedHashSet;

        $r4 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: android.security.identity.IdentityCredentialStore mStore>;

        $r5 = virtualinvoke $r4.<android.security.identity.IdentityCredentialStore: java.lang.String[] getSupportedDocTypes()>();

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r6);

        r1 = $r3;

        $r7 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.SimpleIdentityCredentialStoreCapabilities mCapabilities>;

        if $r7 != null goto label3;

        $r8 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: android.content.Context mContext>;

        r2 = virtualinvoke $r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r11 = "android.hardware.identity_credential";

        $z0 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: boolean mIsDirectAccess>;

        if $z0 == 0 goto label1;

        r11 = "android.hardware.identity_credential_direct_access";

     label1:
        $z1 = virtualinvoke r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>(r11, 202101);

        if $z1 == 0 goto label2;

        $z3 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: boolean mIsDirectAccess>;

        $r10 = staticinvoke <androidx.security.identity.SimpleIdentityCredentialStoreCapabilities: androidx.security.identity.SimpleIdentityCredentialStoreCapabilities getFeatureVersion202101(boolean,boolean,java.util.Set)>($z3, 1, r1);

        r0.<androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.SimpleIdentityCredentialStoreCapabilities mCapabilities> = $r10;

        goto label3;

     label2:
        $z2 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: boolean mIsDirectAccess>;

        $r9 = staticinvoke <androidx.security.identity.SimpleIdentityCredentialStoreCapabilities: androidx.security.identity.SimpleIdentityCredentialStoreCapabilities getFeatureVersion202009(boolean,boolean,java.util.Set)>($z2, 1, r1);

        r0.<androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.SimpleIdentityCredentialStoreCapabilities mCapabilities> = $r9;

     label3:
        $r12 = r0.<androidx.security.identity.HardwareIdentityCredentialStore: androidx.security.identity.SimpleIdentityCredentialStoreCapabilities mCapabilities>;

        return $r12;
    }

