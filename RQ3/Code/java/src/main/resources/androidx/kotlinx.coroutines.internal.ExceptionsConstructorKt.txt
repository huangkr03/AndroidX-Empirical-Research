kotlinx.coroutines.internal.ExceptionsConstructorKt
<kotlinx.coroutines.internal.ExceptionsConstructorKt: kotlinx.coroutines.internal.CtorCache ctorCache>
<kotlinx.coroutines.internal.ExceptionsConstructorKt: int throwableFields>
    static void <clinit>()
    {
        int $i0;
        boolean $z0;
        kotlinx.coroutines.internal.CtorCache $r0;

        $i0 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: int fieldsCountOrDefault(java.lang.Class,int)>(class "Ljava/lang/Throwable;", -1);

        <kotlinx.coroutines.internal.ExceptionsConstructorKt: int throwableFields> = $i0;

        $z0 = staticinvoke <kotlinx.coroutines.internal.FastServiceLoaderKt: boolean getANDROID_DETECTED()>();

        if $z0 == 0 goto label1;

        $r0 = <kotlinx.coroutines.internal.WeakMapCtorCache: kotlinx.coroutines.internal.WeakMapCtorCache INSTANCE>;

        goto label2;

     label1:
        $r0 = <kotlinx.coroutines.internal.ClassValueCtorCache: kotlinx.coroutines.internal.ClassValueCtorCache INSTANCE>;

        goto label2;

     label2:
        <kotlinx.coroutines.internal.ExceptionsConstructorKt: kotlinx.coroutines.internal.CtorCache ctorCache> = $r0;

        return;
    }

    public static final kotlin.jvm.functions.Function1 access$createConstructor(java.lang.Class)
    {
        kotlin.jvm.functions.Function1 $r0;
        java.lang.Class $r1;

        $r1 := @parameter0: java.lang.Class;

        $r0 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: kotlin.jvm.functions.Function1 createConstructor(java.lang.Class)>($r1);

        return $r0;
    }

    private static final kotlin.jvm.functions.Function1 createConstructor(java.lang.Class)
    {
        kotlinx.coroutines.internal.ExceptionsConstructorKt$createConstructor$nullResult$1 $r0;
        java.lang.Class $r1;
        int $i0, $i1;
        java.lang.reflect.Constructor[] $r2;
        kotlinx.coroutines.internal.ExceptionsConstructorKt$createConstructor$$inlined$sortedByDescending$1 $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.reflect.Constructor $r7;
        kotlin.jvm.functions.Function1 $r8;

        $r1 := @parameter0: java.lang.Class;

        $r0 = <kotlinx.coroutines.internal.ExceptionsConstructorKt$createConstructor$nullResult$1: kotlinx.coroutines.internal.ExceptionsConstructorKt$createConstructor$nullResult$1 INSTANCE>;

        $i0 = <kotlinx.coroutines.internal.ExceptionsConstructorKt: int throwableFields>;

        $i1 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: int fieldsCountOrDefault(java.lang.Class,int)>($r1, 0);

        if $i0 == $i1 goto label1;

        return $r0;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $r3 = new kotlinx.coroutines.internal.ExceptionsConstructorKt$createConstructor$$inlined$sortedByDescending$1;

        specialinvoke $r3.<kotlinx.coroutines.internal.ExceptionsConstructorKt$createConstructor$$inlined$sortedByDescending$1: void <init>()>();

        $r4 = staticinvoke <kotlin.collections.ArraysKt: java.util.List sortedWith(java.lang.Object[],java.util.Comparator)>($r2, $r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.reflect.Constructor) $r6;

        $r8 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: kotlin.jvm.functions.Function1 createSafeConstructor(java.lang.reflect.Constructor)>($r7);

        if $r8 == null goto label2;

        return $r8;

     label3:
        return $r0;
    }

    private static final kotlin.jvm.functions.Function1 createSafeConstructor(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor $r0;
        java.lang.Class[] $r1;
        int $i0;
        java.lang.Class $r2;
        boolean $z0;
        kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$1 $r3;
        kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$2 $r4;
        kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$3 $r5;
        kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$4 $r6;

        $r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = virtualinvoke $r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        lookupswitch($i0)
        {
            case 0: goto label7;
            case 1: goto label4;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        $r2 = $r1[0];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, class "Ljava/lang/String;");

        if $z0 == 0 goto label3;

        $r2 = $r1[1];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, class "Ljava/lang/Throwable;");

        if $z0 == 0 goto label3;

        $r3 = new kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$1;

        specialinvoke $r3.<kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$1: void <init>(java.lang.reflect.Constructor)>($r0);

        return $r3;

     label3:
        return null;

     label4:
        $r2 = $r1[0];

        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, class "Ljava/lang/Throwable;");

        if $z0 == 0 goto label5;

        $r4 = new kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$2;

        specialinvoke $r4.<kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$2: void <init>(java.lang.reflect.Constructor)>($r0);

        return $r4;

     label5:
        $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, class "Ljava/lang/String;");

        if $z0 == 0 goto label6;

        $r5 = new kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$3;

        specialinvoke $r5.<kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$3: void <init>(java.lang.reflect.Constructor)>($r0);

        return $r5;

     label6:
        return null;

     label7:
        $r6 = new kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$4;

        specialinvoke $r6.<kotlinx.coroutines.internal.ExceptionsConstructorKt$createSafeConstructor$$inlined$safeCtor$4: void <init>(java.lang.reflect.Constructor)>($r0);

        return $r6;
    }

    private static final int fieldsCount(java.lang.Class, int)
    {
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Class $r0, $r3;
        java.lang.reflect.Field[] $r1;
        java.lang.reflect.Field $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $i1 := @parameter1: int;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r1;

        $i2 = 0;

        $i3 = 0;

     label2:
        if $i2 >= $i0 goto label4;

        $r2 = $r1[$i2];

        $i4 = virtualinvoke $r2.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i4);

        $z0 = $z0 ^ 1;

        if $z0 == 0 goto label3;

        $i3 = $i3 + 1;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        $i1 = $i1 + $i3;

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r0 = $r3;

        if $r3 != null goto label1;

        return $i1;
    }

    static int fieldsCount$default(java.lang.Class, int, int, java.lang.Object)
    {
        java.lang.Object $r0;
        int $i0, $i1;
        java.lang.Class $r1;

        $r1 := @parameter0: java.lang.Class;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: java.lang.Object;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label1;

        $i0 = 0;

     label1:
        $i0 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: int fieldsCount(java.lang.Class,int)>($r1, $i0);

        return $i0;
    }

    private static final int fieldsCountOrDefault(java.lang.Class, int)
    {
        java.lang.Class $r0;
        int $i0, $i1;
        kotlin.Result$Companion $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3, $r4;
        boolean $z0;
        java.lang.Number $r5;

        $r0 := @parameter0: java.lang.Class;

        $i0 := @parameter1: int;

        staticinvoke <kotlin.jvm.JvmClassMappingKt: kotlin.reflect.KClass getKotlinClass(java.lang.Class)>($r0);

        $r1 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $i1 = staticinvoke <kotlinx.coroutines.internal.ExceptionsConstructorKt: int fieldsCount$default(java.lang.Class,int,int,java.lang.Object)>($r0, 0, 1, null);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r2);

        $r4 = $r3;

        goto label1;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = $r2;

     label2:
        $r5 = (java.lang.Number) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public static final java.lang.Throwable tryCopyException(java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r4;
        boolean $z0;
        kotlin.Result$Companion $r1;
        kotlinx.coroutines.CopyableThrowable $r2;
        java.lang.Object $r3;
        kotlinx.coroutines.internal.CtorCache $r5;
        java.lang.Class $r6;
        kotlin.jvm.functions.Function1 $r7;

        $r0 := @parameter0: java.lang.Throwable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "exception");

        $z0 = $r0 instanceof kotlinx.coroutines.CopyableThrowable;

        if $z0 == 0 goto label6;

        $r1 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r2 = (kotlinx.coroutines.CopyableThrowable) $r0;

     label1:
        $r0 = interfaceinvoke $r2.<kotlinx.coroutines.CopyableThrowable: java.lang.Throwable createCopy()>();

     label2:
        $r3 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r0);

        goto label4;

     label3:
        $r4 := @caughtexception;

        $r1 = <kotlin.Result: kotlin.Result$Companion Companion>;

        $r3 = staticinvoke <kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)>($r4);

        $r3 = staticinvoke <kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)>($r3);

     label4:
        $z0 = staticinvoke <kotlin.Result: boolean isFailure-impl(java.lang.Object)>($r3);

        if $z0 == 0 goto label5;

        $r3 = null;

     label5:
        $r0 = (java.lang.Throwable) $r3;

        return $r0;

     label6:
        $r5 = <kotlinx.coroutines.internal.ExceptionsConstructorKt: kotlinx.coroutines.internal.CtorCache ctorCache>;

        $r6 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r5.<kotlinx.coroutines.internal.CtorCache: kotlin.jvm.functions.Function1 get(java.lang.Class)>($r6);

        $r3 = interfaceinvoke $r7.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r0);

        $r0 = (java.lang.Throwable) $r3;

        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

