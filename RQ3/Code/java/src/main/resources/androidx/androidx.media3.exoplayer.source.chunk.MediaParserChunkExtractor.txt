androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: java.lang.String TAG>
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.ChunkExtractor$Factory FACTORY>
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 inputReaderAdapter>
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter trackOutputProviderAdapter>
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.extractor.DummyTrackOutput dummyTrackOutput>
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: long pendingSeekUs>
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider trackOutputProvider>
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.common.Format[] sampleFormats>
    public void <init>(int, androidx.media3.common.Format, java.util.List, androidx.media3.exoplayer.analytics.PlayerId)
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        int i0, $i1, i2, $i3;
        androidx.media3.common.Format r1, $r43;
        java.util.List r2;
        androidx.media3.exoplayer.analytics.PlayerId r3;
        java.lang.String r4, r5, $r9, $r45;
        java.util.ArrayList r6, $r35;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 $r7, $r11, $r12, $r38;
        androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 $r8;
        java.lang.Object $r10, $r42;
        boolean $z0;
        android.media.MediaParser $r13, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r36, $r41;
        java.lang.Boolean $r15, $r18, $r21, $r24, $r27, $r30, $r33;
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter $r39;
        androidx.media3.extractor.DummyTrackOutput $r40;
        android.media.MediaFormat $r44;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        i0 := @parameter0: int;

        r1 := @parameter1: androidx.media3.common.Format;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: androidx.media3.exoplayer.analytics.PlayerId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30;

        specialinvoke $r7.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void <init>(androidx.media3.common.Format,int,boolean)>(r1, i0, 1);

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter> = $r7;

        $r8 = new androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30;

        specialinvoke $r8.<androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30: void <init>()>();

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 inputReaderAdapter> = $r8;

        $r9 = r1.<androidx.media3.common.Format: java.lang.String containerMimeType>;

        $r10 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>($r9);

        r4 = (java.lang.String) $r10;

        $z0 = staticinvoke <androidx.media3.common.MimeTypes: boolean isMatroska(java.lang.String)>(r4);

        if $z0 == 0 goto label1;

        $r45 = "android.media.mediaparser.MatroskaParser";

        goto label2;

     label1:
        $r45 = "android.media.mediaparser.FragmentedMp4Parser";

     label2:
        r5 = $r45;

        $r11 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        virtualinvoke $r11.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void setSelectedParserName(java.lang.String)>(r5);

        $r12 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        $r13 = staticinvoke <android.media.MediaParser: android.media.MediaParser createByName(java.lang.String,android.media.MediaParser$OutputConsumer)>(r5, $r12);

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser> = $r13;

        $r14 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r14.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.matroska.disableCuesSeeking", $r15);

        $r17 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r17.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.inBandCryptoInfo", $r18);

        $r20 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r20.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.includeSupplementalData", $r21);

        $r23 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r23.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.eagerlyExposeTrackType", $r24);

        $r26 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        $r27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r26.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaparser.exposeDummySeekMap", $r27);

        $r29 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        $r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r29.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaParser.exposeChunkIndexAsMediaFormat", $r30);

        $r32 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        $r33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r32.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaParser.overrideInBandCaptionDeclarations", $r33);

        $r35 = new java.util.ArrayList;

        specialinvoke $r35.<java.util.ArrayList: void <init>()>();

        r6 = $r35;

        i2 = 0;

     label3:
        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if i2 >= $i3 goto label4;

        $r42 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        $r43 = (androidx.media3.common.Format) $r42;

        $r44 = staticinvoke <androidx.media3.exoplayer.source.mediaparser.MediaParserUtil: android.media.MediaFormat toCaptionsMediaFormat(androidx.media3.common.Format)>($r43);

        virtualinvoke r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r44);

        i2 = i2 + 1;

        goto label3;

     label4:
        $r36 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        virtualinvoke $r36.<android.media.MediaParser: android.media.MediaParser setParameter(java.lang.String,java.lang.Object)>("android.media.mediaParser.exposeCaptionFormats", r6);

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 31 goto label5;

        $r41 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        staticinvoke <androidx.media3.exoplayer.source.mediaparser.MediaParserUtil: void setLogSessionIdOnMediaParser(android.media.MediaParser,androidx.media3.exoplayer.analytics.PlayerId)>($r41, r3);

     label5:
        $r38 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        virtualinvoke $r38.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void setMuxedCaptionFormats(java.util.List)>(r2);

        $r39 = new androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter;

        specialinvoke $r39.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter: void <init>(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor,androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$1)>(r0, null);

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter trackOutputProviderAdapter> = $r39;

        $r40 = new androidx.media3.extractor.DummyTrackOutput;

        specialinvoke $r40.<androidx.media3.extractor.DummyTrackOutput: void <init>()>();

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.extractor.DummyTrackOutput dummyTrackOutput> = $r40;

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: long pendingSeekUs> = -9223372036854775807L;

        return;
    }

    public void init(androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider, long, long)
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider r1;
        long l0, l1;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 $r2, $r4;
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter $r3;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider trackOutputProvider> = r1;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        virtualinvoke $r2.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void setSampleTimestampUpperLimitFilterUs(long)>(l1);

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter trackOutputProviderAdapter>;

        virtualinvoke $r4.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: void setExtractorOutput(androidx.media3.extractor.ExtractorOutput)>($r3);

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: long pendingSeekUs> = l0;

        return;
    }

    public void release()
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        android.media.MediaParser $r1;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        virtualinvoke $r1.<android.media.MediaParser: void release()>();

        return;
    }

    public boolean read(androidx.media3.extractor.ExtractorInput) throws java.io.IOException
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        androidx.media3.extractor.ExtractorInput r1;
        androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 $r2, $r3;
        long $l0;
        android.media.MediaParser $r4;
        boolean $z0;
        androidx.media3.common.DataReader r5;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        r1 := @parameter0: androidx.media3.extractor.ExtractorInput;

        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: void maybeExecutePendingSeek()>();

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 inputReaderAdapter>;

        $l0 = interfaceinvoke r1.<androidx.media3.extractor.ExtractorInput: long getLength()>();

        r5 = (androidx.media3.common.DataReader) r1;

        virtualinvoke $r2.<androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30: void setDataReader(androidx.media3.common.DataReader,long)>(r5, $l0);

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.InputReaderAdapterV30 inputReaderAdapter>;

        $z0 = virtualinvoke $r4.<android.media.MediaParser: boolean advance(android.media.MediaParser$SeekableInputReader)>($r3);

        return $z0;
    }

    public androidx.media3.extractor.ChunkIndex getChunkIndex()
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 $r1;
        androidx.media3.extractor.ChunkIndex $r2;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        $r2 = virtualinvoke $r1.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: androidx.media3.extractor.ChunkIndex getChunkIndex()>();

        return $r2;
    }

    public androidx.media3.common.Format[] getSampleFormats()
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        androidx.media3.common.Format[] $r1;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.common.Format[] sampleFormats>;

        return $r1;
    }

    private void maybeExecutePendingSeek()
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        android.media.MediaParser$SeekMap r1;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 $r2;
        long $l0, $l2;
        byte $b1;
        android.media.MediaParser $r3;
        android.util.Pair $r4;
        java.lang.Object $r5;
        android.media.MediaParser$SeekPoint $r6;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        r1 = virtualinvoke $r2.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: android.media.MediaParser$SeekMap getDummySeekMap()>();

        $l0 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: long pendingSeekUs>;

        $b1 = $l0 cmp -9223372036854775807L;

        if $b1 == 0 goto label1;

        if r1 == null goto label1;

        $r3 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: android.media.MediaParser mediaParser>;

        $l2 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: long pendingSeekUs>;

        $r4 = virtualinvoke r1.<android.media.MediaParser$SeekMap: android.util.Pair getSeekPoints(long)>($l2);

        $r5 = $r4.<android.util.Pair: java.lang.Object first>;

        $r6 = (android.media.MediaParser$SeekPoint) $r5;

        virtualinvoke $r3.<android.media.MediaParser: void seek(android.media.MediaParser$SeekPoint)>($r6);

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: long pendingSeekUs> = -9223372036854775807L;

     label1:
        return;
    }

    private static androidx.media3.exoplayer.source.chunk.ChunkExtractor lambda$static$0(int, androidx.media3.common.Format, boolean, java.util.List, androidx.media3.extractor.TrackOutput, androidx.media3.exoplayer.analytics.PlayerId)
    {
        int i0;
        androidx.media3.common.Format r0;
        boolean z0, $z1;
        java.util.List r1;
        androidx.media3.extractor.TrackOutput r2;
        androidx.media3.exoplayer.analytics.PlayerId r3;
        java.lang.String $r4;
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor $r5;

        i0 := @parameter0: int;

        r0 := @parameter1: androidx.media3.common.Format;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.util.List;

        r2 := @parameter4: androidx.media3.extractor.TrackOutput;

        r3 := @parameter5: androidx.media3.exoplayer.analytics.PlayerId;

        $r4 = r0.<androidx.media3.common.Format: java.lang.String containerMimeType>;

        $z1 = staticinvoke <androidx.media3.common.MimeTypes: boolean isText(java.lang.String)>($r4);

        if $z1 != 0 goto label1;

        $r5 = new androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        specialinvoke $r5.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: void <init>(int,androidx.media3.common.Format,java.util.List,androidx.media3.exoplayer.analytics.PlayerId)>(i0, r0, r1, r3);

        return $r5;

     label1:
        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MediaPrsrChunkExtractor", "Ignoring an unsupported text track.");

        return null;
    }

    static androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider access$100(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor)
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider $r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider trackOutputProvider>;

        return $r1;
    }

    static androidx.media3.extractor.DummyTrackOutput access$200(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor)
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        androidx.media3.extractor.DummyTrackOutput $r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.extractor.DummyTrackOutput dummyTrackOutput>;

        return $r1;
    }

    static androidx.media3.common.Format[] access$302(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor, androidx.media3.common.Format[])
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        androidx.media3.common.Format[] r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        r1 := @parameter1: androidx.media3.common.Format[];

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.common.Format[] sampleFormats> = r1;

        return r1;
    }

    static androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 access$400(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor)
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r0;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 $r1;

        r0 := @parameter0: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 outputConsumerAdapter>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.media3.exoplayer.source.chunk.ChunkExtractor$Factory $r0;

        $r0 = dynamicinvoke "createProgressiveMediaExtractor" <androidx.media3.exoplayer.source.chunk.ChunkExtractor$Factory ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.media3.exoplayer.source.chunk.ChunkExtractor __METHODTYPE__(int,androidx.media3.common.Format,boolean,java.util.List,androidx.media3.extractor.TrackOutput,androidx.media3.exoplayer.analytics.PlayerId), methodhandle: "REF_INVOKE_STATIC" <androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.ChunkExtractor lambda$static$0(int,androidx.media3.common.Format,boolean,java.util.List,androidx.media3.extractor.TrackOutput,androidx.media3.exoplayer.analytics.PlayerId)>, methodtype: androidx.media3.exoplayer.source.chunk.ChunkExtractor __METHODTYPE__(int,androidx.media3.common.Format,boolean,java.util.List,androidx.media3.extractor.TrackOutput,androidx.media3.exoplayer.analytics.PlayerId));

        <androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.ChunkExtractor$Factory FACTORY> = $r0;

        return;
    }

androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$1
androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter
<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor this$0>
    private void <init>(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor)
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter r0;
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r1;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public androidx.media3.extractor.TrackOutput track(int, int)
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter r0;
        int i0, i1;
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor $r1, $r3, $r4;
        androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider $r2, $r5;
        java.lang.Object $r6;
        androidx.media3.extractor.TrackOutput r7;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor this$0>;

        $r2 = staticinvoke <androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider access$100(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor)>($r1);

        if $r2 == null goto label1;

        $r4 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor this$0>;

        $r5 = staticinvoke <androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider access$100(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor)>($r4);

        $r6 = interfaceinvoke $r5.<androidx.media3.exoplayer.source.chunk.ChunkExtractor$TrackOutputProvider: androidx.media3.extractor.TrackOutput track(int,int)>(i0, i1);

        goto label2;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor this$0>;

        $r6 = staticinvoke <androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.extractor.DummyTrackOutput access$200(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor)>($r3);

     label2:
        r7 = (androidx.media3.extractor.TrackOutput) $r6;

        return r7;
    }

    public void endTracks()
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter r0;
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor $r1, $r2;
        androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 $r3;
        androidx.media3.common.Format[] $r4;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter;

        $r2 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor this$0>;

        $r1 = r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor this$0>;

        $r3 = staticinvoke <androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30 access$400(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor)>($r1);

        $r4 = virtualinvoke $r3.<androidx.media3.exoplayer.source.mediaparser.OutputConsumerAdapterV30: androidx.media3.common.Format[] getSampleFormats()>();

        staticinvoke <androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor: androidx.media3.common.Format[] access$302(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor,androidx.media3.common.Format[])>($r2, $r4);

        return;
    }

    public void seekMap(androidx.media3.extractor.SeekMap)
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter r0;
        androidx.media3.extractor.SeekMap r1;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter;

        r1 := @parameter0: androidx.media3.extractor.SeekMap;

        return;
    }

    void <init>(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor, androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$1)
    {
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter r0;
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor r1;
        androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$1 r2;

        r0 := @this: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter;

        r1 := @parameter0: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor;

        r2 := @parameter1: androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$1;

        specialinvoke r0.<androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor$TrackOutputProviderAdapter: void <init>(androidx.media3.exoplayer.source.chunk.MediaParserChunkExtractor)>(r1);

        return;
    }

