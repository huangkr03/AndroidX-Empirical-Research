androidx.room.AutoCloser
<androidx.room.AutoCloser: androidx.room.AutoCloser$Companion Companion>
<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteOpenHelper delegateOpenHelper>
<androidx.room.AutoCloser: android.os.Handler handler>
<androidx.room.AutoCloser: java.lang.Runnable onAutoCloseCallback>
<androidx.room.AutoCloser: java.lang.Object lock>
<androidx.room.AutoCloser: long autoCloseTimeoutInMs>
<androidx.room.AutoCloser: java.util.concurrent.Executor executor>
<androidx.room.AutoCloser: int refCount>
<androidx.room.AutoCloser: long lastDecrementRefCountTimeStamp>
<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase>
<androidx.room.AutoCloser: boolean manuallyClosed>
<androidx.room.AutoCloser: java.lang.Runnable executeAutoCloser>
<androidx.room.AutoCloser: java.lang.Runnable autoCloser>
<androidx.room.AutoCloser: java.lang.String autoCloseBug>
    public void <init>(long, java.util.concurrent.TimeUnit, java.util.concurrent.Executor)
    {
        androidx.room.AutoCloser r0;
        long l0, $l1, $l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.Executor r2;
        android.os.Handler $r3;
        android.os.Looper $r4;
        java.lang.Object $r5;
        java.lang.Runnable $r6, $r7;

        r0 := @this: androidx.room.AutoCloser;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        r2 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "autoCloseTimeUnit");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "autoCloseExecutor");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.os.Handler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r4);

        r0.<androidx.room.AutoCloser: android.os.Handler handler> = $r3;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<androidx.room.AutoCloser: java.lang.Object lock> = $r5;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        r0.<androidx.room.AutoCloser: long autoCloseTimeoutInMs> = $l1;

        r0.<androidx.room.AutoCloser: java.util.concurrent.Executor executor> = r2;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<androidx.room.AutoCloser: long lastDecrementRefCountTimeStamp> = $l2;

        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.AutoCloser)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.AutoCloser: void executeAutoCloser$lambda$0(androidx.room.AutoCloser)>, methodtype: void __METHODTYPE__());

        r0.<androidx.room.AutoCloser: java.lang.Runnable executeAutoCloser> = $r6;

        $r7 = dynamicinvoke "run" <java.lang.Runnable (androidx.room.AutoCloser)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_STATIC" <androidx.room.AutoCloser: void autoCloser$lambda$3(androidx.room.AutoCloser)>, methodtype: void __METHODTYPE__());

        r0.<androidx.room.AutoCloser: java.lang.Runnable autoCloser> = $r7;

        return;
    }

    public final androidx.sqlite.db.SupportSQLiteOpenHelper getDelegateOpenHelper()
    {
        androidx.room.AutoCloser r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r1;

        r0 := @this: androidx.room.AutoCloser;

        $r1 = r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteOpenHelper delegateOpenHelper>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)>("delegateOpenHelper");

        return null;
    }

    public final void setDelegateOpenHelper(androidx.sqlite.db.SupportSQLiteOpenHelper)
    {
        androidx.room.AutoCloser r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper r1;

        r0 := @this: androidx.room.AutoCloser;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteOpenHelper delegateOpenHelper> = r1;

        return;
    }

    public final java.lang.Runnable getOnAutoCloseCallback$room_runtime_release()
    {
        androidx.room.AutoCloser r0;
        java.lang.Runnable $r1;

        r0 := @this: androidx.room.AutoCloser;

        $r1 = r0.<androidx.room.AutoCloser: java.lang.Runnable onAutoCloseCallback>;

        return $r1;
    }

    public final void setOnAutoCloseCallback$room_runtime_release(java.lang.Runnable)
    {
        androidx.room.AutoCloser r0;
        java.lang.Runnable r1;

        r0 := @this: androidx.room.AutoCloser;

        r1 := @parameter0: java.lang.Runnable;

        r0.<androidx.room.AutoCloser: java.lang.Runnable onAutoCloseCallback> = r1;

        return;
    }

    public final int getRefCount$room_runtime_release()
    {
        androidx.room.AutoCloser r0;
        int $i0;

        r0 := @this: androidx.room.AutoCloser;

        $i0 = r0.<androidx.room.AutoCloser: int refCount>;

        return $i0;
    }

    public final void setRefCount$room_runtime_release(int)
    {
        androidx.room.AutoCloser r0;
        int i0;

        r0 := @this: androidx.room.AutoCloser;

        i0 := @parameter0: int;

        r0.<androidx.room.AutoCloser: int refCount> = i0;

        return;
    }

    public final long getLastDecrementRefCountTimeStamp$room_runtime_release()
    {
        androidx.room.AutoCloser r0;
        long $l0;

        r0 := @this: androidx.room.AutoCloser;

        $l0 = r0.<androidx.room.AutoCloser: long lastDecrementRefCountTimeStamp>;

        return $l0;
    }

    public final void setLastDecrementRefCountTimeStamp$room_runtime_release(long)
    {
        androidx.room.AutoCloser r0;
        long l0;

        r0 := @this: androidx.room.AutoCloser;

        l0 := @parameter0: long;

        r0.<androidx.room.AutoCloser: long lastDecrementRefCountTimeStamp> = l0;

        return;
    }

    public final androidx.sqlite.db.SupportSQLiteDatabase getDelegateDatabase$room_runtime_release()
    {
        androidx.room.AutoCloser r0;
        androidx.sqlite.db.SupportSQLiteDatabase $r1;

        r0 := @this: androidx.room.AutoCloser;

        $r1 = r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase>;

        return $r1;
    }

    public final void setDelegateDatabase$room_runtime_release(androidx.sqlite.db.SupportSQLiteDatabase)
    {
        androidx.room.AutoCloser r0;
        androidx.sqlite.db.SupportSQLiteDatabase r1;

        r0 := @this: androidx.room.AutoCloser;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteDatabase;

        r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase> = r1;

        return;
    }

    public final void init(androidx.sqlite.db.SupportSQLiteOpenHelper)
    {
        androidx.room.AutoCloser r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper r1;

        r0 := @this: androidx.room.AutoCloser;

        r1 := @parameter0: androidx.sqlite.db.SupportSQLiteOpenHelper;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "delegateOpenHelper");

        virtualinvoke r0.<androidx.room.AutoCloser: void setDelegateOpenHelper(androidx.sqlite.db.SupportSQLiteOpenHelper)>(r1);

        return;
    }

    public final java.lang.Object executeRefCountingFunction(kotlin.jvm.functions.Function1)
    {
        androidx.room.AutoCloser r0;
        kotlin.jvm.functions.Function1 r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        androidx.sqlite.db.SupportSQLiteDatabase $r4;

        r0 := @this: androidx.room.AutoCloser;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "block");

     label1:
        $r4 = virtualinvoke r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()>();

        r2 = interfaceinvoke r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>($r4);

     label2:
        virtualinvoke r0.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        virtualinvoke r0.<androidx.room.AutoCloser: void decrementCountAndScheduleClose()>();

        throw r3;

     label5:
        return r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final androidx.sqlite.db.SupportSQLiteDatabase incrementCountAndEnsureDbIsOpen()
    {
        androidx.room.AutoCloser r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase r2, r3, $r6, r12, r13;
        java.lang.Runnable $r4;
        android.os.Handler $r5;
        int $i0, i1;
        boolean $z1, $z2, $z4, z6;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r7;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9, $r11;
        java.lang.Throwable $r10;

        r0 := @this: androidx.room.AutoCloser;

        r1 = r0.<androidx.room.AutoCloser: java.lang.Object lock>;

        entermonitor r1;

     label01:
        $r5 = r0.<androidx.room.AutoCloser: android.os.Handler handler>;

        $r4 = r0.<androidx.room.AutoCloser: java.lang.Runnable executeAutoCloser>;

        virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

        i1 = r0.<androidx.room.AutoCloser: int refCount>;

        $i0 = i1 + 1;

        r0.<androidx.room.AutoCloser: int refCount> = $i0;

        $z1 = r0.<androidx.room.AutoCloser: boolean manuallyClosed>;

        if $z1 != 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        if $z4 != 0 goto label04;

        $r11 = "Attempting to open already closed database.";

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label04:
        $r6 = r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase>;

        if $r6 == null goto label07;

        r12 = $r6;

        $z2 = interfaceinvoke r12.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isOpen()>();

        if $z2 == 0 goto label06;

        r3 = r12;

     label05:
        exitmonitor r1;

        return r3;

     label06:
        goto label07;

     label07:
        $r7 = virtualinvoke r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteOpenHelper getDelegateOpenHelper()>();

        r13 = interfaceinvoke $r7.<androidx.sqlite.db.SupportSQLiteOpenHelper: androidx.sqlite.db.SupportSQLiteDatabase getWritableDatabase()>();

        z6 = 0;

        r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase> = r13;

        r2 = r13;

     label08:
        exitmonitor r1;

        return r2;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor r1;

        throw $r10;

        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public final void decrementCountAndScheduleClose()
    {
        androidx.room.AutoCloser r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        long $l4;
        java.lang.Runnable $r3;
        android.os.Handler $r4;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6, $r8;
        java.lang.Throwable $r7;
        boolean $z2;
        kotlin.Unit $r9;

        r0 := @this: androidx.room.AutoCloser;

        r1 = r0.<androidx.room.AutoCloser: java.lang.Object lock>;

        entermonitor r1;

     label01:
        $i1 = r0.<androidx.room.AutoCloser: int refCount>;

        if $i1 <= 0 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        if $z2 != 0 goto label04;

        $r8 = "ref count is 0 or lower but we\'re supposed to decrement";

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label04:
        i0 = r0.<androidx.room.AutoCloser: int refCount>;

        $i2 = i0 + -1;

        r0.<androidx.room.AutoCloser: int refCount> = $i2;

        $i3 = r0.<androidx.room.AutoCloser: int refCount>;

        if $i3 != 0 goto label07;

        $r2 = r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase>;

        if $r2 != null goto label06;

     label05:
        exitmonitor r1;

        return;

     label06:
        $r4 = r0.<androidx.room.AutoCloser: android.os.Handler handler>;

        $r3 = r0.<androidx.room.AutoCloser: java.lang.Runnable executeAutoCloser>;

        $l4 = r0.<androidx.room.AutoCloser: long autoCloseTimeoutInMs>;

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l4);

     label07:
        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label08:
        exitmonitor r1;

        goto label11;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r1;

        throw $r7;

     label11:
        return;

        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public final void closeDatabaseIfOpen() throws java.io.IOException
    {
        androidx.room.AutoCloser r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase $r2;
        java.lang.Throwable $r3;
        kotlin.Unit $r4;

        r0 := @this: androidx.room.AutoCloser;

        r1 = r0.<androidx.room.AutoCloser: java.lang.Object lock>;

        entermonitor r1;

     label1:
        r0.<androidx.room.AutoCloser: boolean manuallyClosed> = 1;

        $r2 = r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase>;

        if $r2 == null goto label2;

        interfaceinvoke $r2.<androidx.sqlite.db.SupportSQLiteDatabase: void close()>();

        goto label2;

     label2:
        r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase> = null;

        $r4 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label3:
        exitmonitor r1;

        goto label6;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final boolean isActive()
    {
        androidx.room.AutoCloser r0;
        boolean $z0, $z1;

        r0 := @this: androidx.room.AutoCloser;

        $z0 = r0.<androidx.room.AutoCloser: boolean manuallyClosed>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final int getRefCountForTest$room_runtime_release()
    {
        androidx.room.AutoCloser r0;
        java.lang.Object r1;
        int i0;

        r0 := @this: androidx.room.AutoCloser;

        r1 = r0.<androidx.room.AutoCloser: java.lang.Object lock>;

        entermonitor r1;

        i0 = r0.<androidx.room.AutoCloser: int refCount>;

        exitmonitor r1;

        return i0;
    }

    public final void setAutoCloseCallback(java.lang.Runnable)
    {
        androidx.room.AutoCloser r0;
        java.lang.Runnable r1;

        r0 := @this: androidx.room.AutoCloser;

        r1 := @parameter0: java.lang.Runnable;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "onAutoClose");

        r0.<androidx.room.AutoCloser: java.lang.Runnable onAutoCloseCallback> = r1;

        return;
    }

    private static final void executeAutoCloser$lambda$0(androidx.room.AutoCloser)
    {
        androidx.room.AutoCloser r0;
        java.lang.Runnable $r1;
        java.util.concurrent.Executor $r2;

        r0 := @parameter0: androidx.room.AutoCloser;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        $r2 = r0.<androidx.room.AutoCloser: java.util.concurrent.Executor executor>;

        $r1 = r0.<androidx.room.AutoCloser: java.lang.Runnable autoCloser>;

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r1);

        return;
    }

    private static final void autoCloser$lambda$3(androidx.room.AutoCloser)
    {
        androidx.room.AutoCloser r0;
        java.lang.Object r1;
        androidx.sqlite.db.SupportSQLiteDatabase r2, $r4;
        long $l0, $l1, $l2, $l3;
        byte $b4;
        int $i5;
        java.lang.Runnable $r3;
        boolean $z1;
        java.lang.IllegalStateException $r5;
        java.lang.String $r6, $r7;
        java.lang.Throwable $r8;
        kotlin.Unit $r9, $r10;

        r0 := @parameter0: androidx.room.AutoCloser;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r0, "this$0");

        r1 = r0.<androidx.room.AutoCloser: java.lang.Object lock>;

        entermonitor r1;

     label01:
        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<androidx.room.AutoCloser: long lastDecrementRefCountTimeStamp>;

        $l3 = $l0 - $l1;

        $l2 = r0.<androidx.room.AutoCloser: long autoCloseTimeoutInMs>;

        $b4 = $l3 cmp $l2;

        if $b4 >= 0 goto label03;

     label02:
        exitmonitor r1;

        return;

     label03:
        $i5 = r0.<androidx.room.AutoCloser: int refCount>;

        if $i5 == 0 goto label05;

     label04:
        exitmonitor r1;

        return;

     label05:
        $r3 = r0.<androidx.room.AutoCloser: java.lang.Runnable onAutoCloseCallback>;

        if $r3 == null goto label06;

        interfaceinvoke $r3.<java.lang.Runnable: void run()>();

        $r9 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        goto label07;

     label06:
        $r9 = null;

     label07:
        if $r9 != null goto label08;

        $r5 = new java.lang.IllegalStateException;

        $r6 = "onAutoCloseCallback is null but it should have been set before use. Please file a bug against Room at: https://issuetracker.google.com/issues/new?component=413107&template=1096568";

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label08:
        $r4 = r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase>;

        if $r4 == null goto label10;

        r2 = $r4;

        $z1 = interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteDatabase: boolean isOpen()>();

        if $z1 == 0 goto label09;

        interfaceinvoke r2.<androidx.sqlite.db.SupportSQLiteDatabase: void close()>();

     label09:
        goto label10;

     label10:
        r0.<androidx.room.AutoCloser: androidx.sqlite.db.SupportSQLiteDatabase delegateDatabase> = null;

        $r10 = <kotlin.Unit: kotlin.Unit INSTANCE>;

     label11:
        exitmonitor r1;

        goto label14;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor r1;

        throw $r8;

     label14:
        return;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    static void <clinit>()
    {
        androidx.room.AutoCloser$Companion $r0;

        $r0 = new androidx.room.AutoCloser$Companion;

        specialinvoke $r0.<androidx.room.AutoCloser$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.room.AutoCloser: androidx.room.AutoCloser$Companion Companion> = $r0;

        return;
    }

androidx.room.AutoCloser$Companion
    private void <init>()
    {
        androidx.room.AutoCloser$Companion r0;

        r0 := @this: androidx.room.AutoCloser$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.room.AutoCloser$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.room.AutoCloser$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.room.AutoCloser$Companion: void <init>()>();

        return;
    }

