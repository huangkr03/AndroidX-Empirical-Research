androidx.compose.ui.semantics.NodeLocationHolder
<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.semantics.NodeLocationHolder$Companion Companion>
<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode subtreeRoot>
<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>
<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>
<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.unit.LayoutDirection layoutDirection>
<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy comparisonStrategy>
    public void <init>(androidx.compose.ui.node.LayoutNode, androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.semantics.NodeLocationHolder r0;
        androidx.compose.ui.node.LayoutNode r1, r2, $r5, $r7, $r8;
        androidx.compose.ui.node.NodeCoordinator r3, r4;
        androidx.compose.ui.unit.LayoutDirection $r6;
        boolean $z0, $z1;
        androidx.compose.ui.layout.LayoutCoordinates $r9, $r10;
        androidx.compose.ui.geometry.Rect $r12;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        r2 := @parameter1: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "subtreeRoot");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "node");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode subtreeRoot> = r1;

        r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node> = r2;

        $r5 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode subtreeRoot>;

        $r6 = virtualinvoke $r5.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.unit.LayoutDirection getLayoutDirection()>();

        r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.unit.LayoutDirection layoutDirection> = $r6;

        $r7 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode subtreeRoot>;

        r3 = virtualinvoke $r7.<androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.NodeCoordinator getInnerCoordinator$ui_release()>();

        $r8 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        r4 = staticinvoke <androidx.compose.ui.semantics.SemanticsSortKt: androidx.compose.ui.node.NodeCoordinator findCoordinatorToGetBounds(androidx.compose.ui.node.LayoutNode)>($r8);

        $z0 = virtualinvoke r3.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r4.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z1 == 0 goto label1;

        $r10 = (androidx.compose.ui.layout.LayoutCoordinates) r3;

        $r9 = (androidx.compose.ui.layout.LayoutCoordinates) r4;

        $r12 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinates: androidx.compose.ui.geometry.Rect localBoundingBoxOf$default(androidx.compose.ui.layout.LayoutCoordinates,androidx.compose.ui.layout.LayoutCoordinates,boolean,int,java.lang.Object)>($r10, $r9, 0, 2, null);

        goto label2;

     label1:
        $r12 = (androidx.compose.ui.geometry.Rect) null;

     label2:
        r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location> = $r12;

        return;
    }

    public final androidx.compose.ui.node.LayoutNode getSubtreeRoot$ui_release()
    {
        androidx.compose.ui.semantics.NodeLocationHolder r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder;

        $r1 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode subtreeRoot>;

        return $r1;
    }

    public final androidx.compose.ui.node.LayoutNode getNode$ui_release()
    {
        androidx.compose.ui.semantics.NodeLocationHolder r0;
        androidx.compose.ui.node.LayoutNode $r1;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder;

        $r1 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        return $r1;
    }

    public int compareTo(androidx.compose.ui.semantics.NodeLocationHolder)
    {
        androidx.compose.ui.semantics.NodeLocationHolder r0, r1, r6, $r35, $r37, r45;
        androidx.compose.ui.geometry.Rect r2, r3, $r7, $r8, $r13, $r14, $r15, $r16, $r39, $r40, $r41, $r42, $r43, $r44;
        androidx.compose.ui.node.LayoutNode r4, r5, $r17, $r20, $r24, $r27, $r31, $r32, $r33, $r34, $r36, $r38;
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy $r9, $r10;
        androidx.compose.ui.unit.LayoutDirection $r11, $r12;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14;
        byte $b0, $b1, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15;
        androidx.compose.ui.node.NodeCoordinator $r18, $r21;
        androidx.compose.ui.layout.LayoutCoordinates $r19, $r22;
        androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1 $r23;
        kotlin.jvm.functions.Function1 $r25, $r28;
        androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1 $r26;
        androidx.compose.ui.node.LayoutNode$Companion $r29;
        java.util.Comparator $r30;
        int $i2, $i3, $i4, $i5, $i6, i16;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder;

        r1 := @parameter0: androidx.compose.ui.semantics.NodeLocationHolder;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "other");

        $r7 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        if $r7 != null goto label01;

        return 1;

     label01:
        $r8 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        if $r8 != null goto label02;

        return -1;

     label02:
        $r10 = <androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy comparisonStrategy>;

        $r9 = <androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy Stripe>;

        if $r10 != $r9 goto label04;

        $r41 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f6 = virtualinvoke $r41.<androidx.compose.ui.geometry.Rect: float getBottom()>();

        $r42 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f7 = virtualinvoke $r42.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $f8 = $f6 - $f7;

        $b11 = $f8 cmpg 0.0F;

        if $b11 > 0 goto label03;

        return -1;

     label03:
        $r43 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f9 = virtualinvoke $r43.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $r44 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f10 = virtualinvoke $r44.<androidx.compose.ui.geometry.Rect: float getBottom()>();

        $f11 = $f9 - $f10;

        $b12 = $f11 cmpl 0.0F;

        if $b12 < 0 goto label04;

        return 1;

     label04:
        $r12 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.unit.LayoutDirection layoutDirection>;

        $r11 = <androidx.compose.ui.unit.LayoutDirection: androidx.compose.ui.unit.LayoutDirection Ltr>;

        if $r12 != $r11 goto label09;

        $r39 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f4 = virtualinvoke $r39.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        $r40 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f5 = virtualinvoke $r40.<androidx.compose.ui.geometry.Rect: float getLeft()>();

        f12 = $f4 - $f5;

        $b9 = f12 cmpg 0.0F;

        if $b9 != 0 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        if $z0 != 0 goto label14;

        $b10 = f12 cmpg 0.0F;

        if $b10 >= 0 goto label07;

        $b13 = -1;

        goto label08;

     label07:
        $b13 = 1;

     label08:
        return $b13;

     label09:
        $r13 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f0 = virtualinvoke $r13.<androidx.compose.ui.geometry.Rect: float getRight()>();

        $r14 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f1 = virtualinvoke $r14.<androidx.compose.ui.geometry.Rect: float getRight()>();

        f13 = $f0 - $f1;

        $b0 = f13 cmpg 0.0F;

        if $b0 != 0 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        if $z1 != 0 goto label14;

        $b8 = f13 cmpg 0.0F;

        if $b8 >= 0 goto label12;

        $b14 = 1;

        goto label13;

     label12:
        $b14 = -1;

     label13:
        return $b14;

     label14:
        $r15 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f2 = virtualinvoke $r15.<androidx.compose.ui.geometry.Rect: float getTop()>();

        $r16 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.geometry.Rect location>;

        $f3 = virtualinvoke $r16.<androidx.compose.ui.geometry.Rect: float getTop()>();

        f14 = $f2 - $f3;

        $b1 = f14 cmpg 0.0F;

        if $b1 != 0 goto label15;

        $z2 = 1;

        goto label16;

     label15:
        $z2 = 0;

     label16:
        if $z2 != 0 goto label19;

        $b7 = f14 cmpg 0.0F;

        if $b7 >= 0 goto label17;

        $b15 = -1;

        goto label18;

     label17:
        $b15 = 1;

     label18:
        return $b15;

     label19:
        $r17 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        $r18 = staticinvoke <androidx.compose.ui.semantics.SemanticsSortKt: androidx.compose.ui.node.NodeCoordinator findCoordinatorToGetBounds(androidx.compose.ui.node.LayoutNode)>($r17);

        $r19 = (androidx.compose.ui.layout.LayoutCoordinates) $r18;

        r2 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: androidx.compose.ui.geometry.Rect boundsInRoot(androidx.compose.ui.layout.LayoutCoordinates)>($r19);

        $r20 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        $r21 = staticinvoke <androidx.compose.ui.semantics.SemanticsSortKt: androidx.compose.ui.node.NodeCoordinator findCoordinatorToGetBounds(androidx.compose.ui.node.LayoutNode)>($r20);

        $r22 = (androidx.compose.ui.layout.LayoutCoordinates) $r21;

        r3 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: androidx.compose.ui.geometry.Rect boundsInRoot(androidx.compose.ui.layout.LayoutCoordinates)>($r22);

        $r24 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        $r23 = new androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1;

        specialinvoke $r23.<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1: void <init>(androidx.compose.ui.geometry.Rect)>(r2);

        $r25 = (kotlin.jvm.functions.Function1) $r23;

        r4 = staticinvoke <androidx.compose.ui.semantics.SemanticsSortKt: androidx.compose.ui.node.LayoutNode findNodeByPredicateTraversal(androidx.compose.ui.node.LayoutNode,kotlin.jvm.functions.Function1)>($r24, $r25);

        $r27 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        $r26 = new androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1;

        specialinvoke $r26.<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1: void <init>(androidx.compose.ui.geometry.Rect)>(r3);

        $r28 = (kotlin.jvm.functions.Function1) $r26;

        r5 = staticinvoke <androidx.compose.ui.semantics.SemanticsSortKt: androidx.compose.ui.node.LayoutNode findNodeByPredicateTraversal(androidx.compose.ui.node.LayoutNode,kotlin.jvm.functions.Function1)>($r27, $r28);

        if r4 == null goto label20;

        if r5 == null goto label20;

        $r35 = new androidx.compose.ui.semantics.NodeLocationHolder;

        $r36 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode subtreeRoot>;

        specialinvoke $r35.<androidx.compose.ui.semantics.NodeLocationHolder: void <init>(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.node.LayoutNode)>($r36, r4);

        r45 = $r35;

        $r37 = new androidx.compose.ui.semantics.NodeLocationHolder;

        $r38 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode subtreeRoot>;

        specialinvoke $r37.<androidx.compose.ui.semantics.NodeLocationHolder: void <init>(androidx.compose.ui.node.LayoutNode,androidx.compose.ui.node.LayoutNode)>($r38, r5);

        r6 = $r37;

        $i6 = virtualinvoke r45.<androidx.compose.ui.semantics.NodeLocationHolder: int compareTo(androidx.compose.ui.semantics.NodeLocationHolder)>(r6);

        return $i6;

     label20:
        if r4 == null goto label21;

        return 1;

     label21:
        if r5 == null goto label22;

        return -1;

     label22:
        $r29 = <androidx.compose.ui.node.LayoutNode: androidx.compose.ui.node.LayoutNode$Companion Companion>;

        $r30 = virtualinvoke $r29.<androidx.compose.ui.node.LayoutNode$Companion: java.util.Comparator getZComparator$ui_release()>();

        $r32 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        $r31 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        i16 = interfaceinvoke $r30.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r32, $r31);

        if i16 == 0 goto label23;

        $i5 = neg i16;

        return $i5;

     label23:
        $r33 = r0.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        $i2 = virtualinvoke $r33.<androidx.compose.ui.node.LayoutNode: int getSemanticsId()>();

        $r34 = r1.<androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.node.LayoutNode node>;

        $i3 = virtualinvoke $r34.<androidx.compose.ui.node.LayoutNode: int getSemanticsId()>();

        $i4 = $i2 - $i3;

        return $i4;
    }

    public volatile int compareTo(java.lang.Object)
    {
        androidx.compose.ui.semantics.NodeLocationHolder r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.semantics.NodeLocationHolder) r1;

        $i0 = virtualinvoke r0.<androidx.compose.ui.semantics.NodeLocationHolder: int compareTo(androidx.compose.ui.semantics.NodeLocationHolder)>($r2);

        return $i0;
    }

    public static final androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy access$getComparisonStrategy$cp()
    {
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy $r0;

        $r0 = <androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy comparisonStrategy>;

        return $r0;
    }

    public static final void access$setComparisonStrategy$cp(androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy r0;

        r0 := @parameter0: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy;

        <androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy comparisonStrategy> = r0;

        return;
    }

    static void <clinit>()
    {
        androidx.compose.ui.semantics.NodeLocationHolder$Companion $r0;
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy $r1;

        $r0 = new androidx.compose.ui.semantics.NodeLocationHolder$Companion;

        specialinvoke $r0.<androidx.compose.ui.semantics.NodeLocationHolder$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.semantics.NodeLocationHolder$Companion Companion> = $r0;

        $r1 = <androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy Stripe>;

        <androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy comparisonStrategy> = $r1;

        return;
    }

androidx.compose.ui.semantics.NodeLocationHolder$Companion
    private void <init>()
    {
        androidx.compose.ui.semantics.NodeLocationHolder$Companion r0;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy getComparisonStrategy$ui_release()
    {
        androidx.compose.ui.semantics.NodeLocationHolder$Companion r0;
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy $r1;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$Companion;

        $r1 = staticinvoke <androidx.compose.ui.semantics.NodeLocationHolder: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy access$getComparisonStrategy$cp()>();

        return $r1;
    }

    public final void setComparisonStrategy$ui_release(androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$Companion r0;
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy r1;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$Companion;

        r1 := @parameter0: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "<set-?>");

        staticinvoke <androidx.compose.ui.semantics.NodeLocationHolder: void access$setComparisonStrategy$cp(androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy)>(r1);

        return;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.compose.ui.semantics.NodeLocationHolder$Companion: void <init>()>();

        return;
    }

androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1
<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1: androidx.compose.ui.geometry.Rect $view1Bounds>
    void <init>(androidx.compose.ui.geometry.Rect)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1 r0;
        androidx.compose.ui.geometry.Rect $r1;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1;

        $r1 := @parameter0: androidx.compose.ui.geometry.Rect;

        r0.<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1: androidx.compose.ui.geometry.Rect $view1Bounds> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1 r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.NodeCoordinator r2;
        boolean $z0, $z1, $z2;
        androidx.compose.ui.layout.LayoutCoordinates $r3;
        androidx.compose.ui.geometry.Rect $r4, $r5;
        java.lang.Boolean $r6;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        r2 = staticinvoke <androidx.compose.ui.semantics.SemanticsSortKt: androidx.compose.ui.node.NodeCoordinator findCoordinatorToGetBounds(androidx.compose.ui.node.LayoutNode)>(r1);

        $z0 = virtualinvoke r2.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1: androidx.compose.ui.geometry.Rect $view1Bounds>;

        $r3 = (androidx.compose.ui.layout.LayoutCoordinates) r2;

        $r5 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: androidx.compose.ui.geometry.Rect boundsInRoot(androidx.compose.ui.layout.LayoutCoordinates)>($r3);

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.LayoutNode $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.LayoutNode) r1;

        $r3 = virtualinvoke r0.<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child1$1: java.lang.Boolean invoke(androidx.compose.ui.node.LayoutNode)>($r2);

        return $r3;
    }

androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1
<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1: androidx.compose.ui.geometry.Rect $view2Bounds>
    void <init>(androidx.compose.ui.geometry.Rect)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1 r0;
        androidx.compose.ui.geometry.Rect $r1;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1;

        $r1 := @parameter0: androidx.compose.ui.geometry.Rect;

        r0.<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1: androidx.compose.ui.geometry.Rect $view2Bounds> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1);

        return;
    }

    public final java.lang.Boolean invoke(androidx.compose.ui.node.LayoutNode)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1 r0;
        androidx.compose.ui.node.LayoutNode r1;
        androidx.compose.ui.node.NodeCoordinator r2;
        boolean $z0, $z1, $z2;
        androidx.compose.ui.layout.LayoutCoordinates $r3;
        androidx.compose.ui.geometry.Rect $r4, $r5;
        java.lang.Boolean $r6;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1;

        r1 := @parameter0: androidx.compose.ui.node.LayoutNode;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "it");

        r2 = staticinvoke <androidx.compose.ui.semantics.SemanticsSortKt: androidx.compose.ui.node.NodeCoordinator findCoordinatorToGetBounds(androidx.compose.ui.node.LayoutNode)>(r1);

        $z0 = virtualinvoke r2.<androidx.compose.ui.node.NodeCoordinator: boolean isAttached()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1: androidx.compose.ui.geometry.Rect $view2Bounds>;

        $r3 = (androidx.compose.ui.layout.LayoutCoordinates) r2;

        $r5 = staticinvoke <androidx.compose.ui.layout.LayoutCoordinatesKt: androidx.compose.ui.geometry.Rect boundsInRoot(androidx.compose.ui.layout.LayoutCoordinates)>($r3);

        $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r6;
    }

    public volatile java.lang.Object invoke(java.lang.Object)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1 r0;
        java.lang.Object r1;
        androidx.compose.ui.node.LayoutNode $r2;
        java.lang.Boolean $r3;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (androidx.compose.ui.node.LayoutNode) r1;

        $r3 = virtualinvoke r0.<androidx.compose.ui.semantics.NodeLocationHolder$compareTo$child2$1: java.lang.Boolean invoke(androidx.compose.ui.node.LayoutNode)>($r2);

        return $r3;
    }

androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy
<androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy Stripe>
<androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy Location>
<androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[] $VALUES>
    private void <init>(java.lang.String, int)
    {
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[] values()
    {
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[]) $r1;

        return $r2;
    }

    public static androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroidx/compose/ui/semantics/NodeLocationHolder$ComparisonStrategy;", r0);

        $r2 = (androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy) $r1;

        return $r2;
    }

    private static final androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[] $values()
    {
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[] r0;
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy $r1, $r2;

        r0 = newarray (androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy)[2];

        $r1 = <androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy Stripe>;

        r0[0] = $r1;

        $r2 = <androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy Location>;

        r0[1] = $r2;

        return r0;
    }

    static void <clinit>()
    {
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy $r0, $r1;
        androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[] $r2;

        $r0 = new androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy;

        specialinvoke $r0.<androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: void <init>(java.lang.String,int)>("Stripe", 0);

        <androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy Stripe> = $r0;

        $r1 = new androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy;

        specialinvoke $r1.<androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: void <init>(java.lang.String,int)>("Location", 1);

        <androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy Location> = $r1;

        $r2 = staticinvoke <androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[] $values()>();

        <androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy: androidx.compose.ui.semantics.NodeLocationHolder$ComparisonStrategy[] $VALUES> = $r2;

        return;
    }

