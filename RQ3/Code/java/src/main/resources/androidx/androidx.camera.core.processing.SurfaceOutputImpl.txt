androidx.camera.core.processing.SurfaceOutputImpl
<androidx.camera.core.processing.SurfaceOutputImpl: java.lang.String TAG>
<androidx.camera.core.processing.SurfaceOutputImpl: java.lang.Object mLock>
<androidx.camera.core.processing.SurfaceOutputImpl: android.view.Surface mSurface>
<androidx.camera.core.processing.SurfaceOutputImpl: int mTargets>
<androidx.camera.core.processing.SurfaceOutputImpl: int mFormat>
<androidx.camera.core.processing.SurfaceOutputImpl: android.util.Size mSize>
<androidx.camera.core.processing.SurfaceOutputImpl: androidx.camera.core.SurfaceOutput$GlTransformOptions mGlTransformOptions>
<androidx.camera.core.processing.SurfaceOutputImpl: android.util.Size mInputSize>
<androidx.camera.core.processing.SurfaceOutputImpl: android.graphics.Rect mInputCropRect>
<androidx.camera.core.processing.SurfaceOutputImpl: int mRotationDegrees>
<androidx.camera.core.processing.SurfaceOutputImpl: boolean mMirroring>
<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>
<androidx.camera.core.processing.SurfaceOutputImpl: androidx.core.util.Consumer mEventListener>
<androidx.camera.core.processing.SurfaceOutputImpl: java.util.concurrent.Executor mExecutor>
<androidx.camera.core.processing.SurfaceOutputImpl: boolean mHasPendingCloseRequest>
<androidx.camera.core.processing.SurfaceOutputImpl: boolean mIsClosed>
<androidx.camera.core.processing.SurfaceOutputImpl: com.google.common.util.concurrent.ListenableFuture mCloseFuture>
<androidx.camera.core.processing.SurfaceOutputImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCloseFutureCompleter>
    void <init>(android.view.Surface, int, int, android.util.Size, androidx.camera.core.SurfaceOutput$GlTransformOptions, android.util.Size, android.graphics.Rect, int, boolean)
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        android.view.Surface r1;
        int i0, i1, i2;
        android.util.Size r2, r4;
        androidx.camera.core.SurfaceOutput$GlTransformOptions r3, $r9, $r10;
        android.graphics.Rect r5, $r8;
        boolean z0;
        java.lang.Object $r6;
        float[] $r7;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r11;
        com.google.common.util.concurrent.ListenableFuture $r12;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        r1 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.util.Size;

        r3 := @parameter4: androidx.camera.core.SurfaceOutput$GlTransformOptions;

        r4 := @parameter5: android.util.Size;

        r5 := @parameter6: android.graphics.Rect;

        i2 := @parameter7: int;

        z0 := @parameter8: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: java.lang.Object mLock> = $r6;

        $r7 = newarray (float)[16];

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform> = $r7;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mHasPendingCloseRequest> = 0;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mIsClosed> = 0;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: android.view.Surface mSurface> = r1;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mTargets> = i0;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mFormat> = i1;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: android.util.Size mSize> = r2;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: androidx.camera.core.SurfaceOutput$GlTransformOptions mGlTransformOptions> = r3;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: android.util.Size mInputSize> = r4;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r5);

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: android.graphics.Rect mInputCropRect> = $r8;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mMirroring> = z0;

        $r10 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: androidx.camera.core.SurfaceOutput$GlTransformOptions mGlTransformOptions>;

        $r9 = <androidx.camera.core.SurfaceOutput$GlTransformOptions: androidx.camera.core.SurfaceOutput$GlTransformOptions APPLY_CROP_ROTATE_AND_MIRRORING>;

        if $r10 != $r9 goto label1;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mRotationDegrees> = i2;

        specialinvoke r0.<androidx.camera.core.processing.SurfaceOutputImpl: void calculateGlTransform()>();

        goto label2;

     label1:
        r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mRotationDegrees> = 0;

     label2:
        $r11 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.core.processing.SurfaceOutputImpl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.SurfaceOutputImpl: java.lang.Object lambda$new$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r12 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r11);

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: com.google.common.util.concurrent.ListenableFuture mCloseFuture> = $r12;

        return;
    }

    public android.view.Surface getSurface(java.util.concurrent.Executor, androidx.core.util.Consumer)
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        java.util.concurrent.Executor r1;
        androidx.core.util.Consumer r2;
        boolean z0;
        java.lang.Object r3, $r4;
        android.view.Surface $r5;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: androidx.core.util.Consumer;

        $r4 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: java.lang.Object mLock>;

        r3 = $r4;

        entermonitor $r4;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: java.util.concurrent.Executor mExecutor> = r1;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: androidx.core.util.Consumer mEventListener> = r2;

        z0 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mHasPendingCloseRequest>;

        exitmonitor r3;

        goto label1;

     label1:
        if z0 == 0 goto label2;

        virtualinvoke r0.<androidx.camera.core.processing.SurfaceOutputImpl: void requestClose()>();

     label2:
        $r5 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: android.view.Surface mSurface>;

        return $r5;
    }

    public void requestClose()
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        java.util.concurrent.atomic.AtomicReference r1, $r3;
        java.lang.Throwable r2, $r9, $r10, r13;
        java.lang.Object $r4, r12;
        java.util.concurrent.Executor $r5, r11;
        java.lang.Runnable $r6;
        androidx.core.util.Consumer $r7, $r8;
        boolean $z0;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r1 = $r3;

        r11 = null;

        $r4 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: java.lang.Object mLock>;

        r12 = $r4;

        entermonitor $r4;

     label01:
        $r5 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: java.util.concurrent.Executor mExecutor>;

        if $r5 == null goto label02;

        $r7 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: androidx.core.util.Consumer mEventListener>;

        if $r7 != null goto label03;

     label02:
        r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mHasPendingCloseRequest> = 1;

        goto label04;

     label03:
        $z0 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mIsClosed>;

        if $z0 != 0 goto label04;

        $r8 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: androidx.core.util.Consumer mEventListener>;

        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r8);

        r11 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: java.util.concurrent.Executor mExecutor>;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mHasPendingCloseRequest> = 0;

     label04:
        exitmonitor r12;

     label05:
        goto label08;

     label06:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r12;

     label07:
        throw r2;

     label08:
        if r11 == null goto label12;

     label09:
        $r6 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.core.processing.SurfaceOutputImpl,java.util.concurrent.atomic.AtomicReference)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.core.processing.SurfaceOutputImpl: void lambda$requestClose$1(java.util.concurrent.atomic.AtomicReference)>, methodtype: void __METHODTYPE__());

        interfaceinvoke r11.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

     label10:
        goto label12;

     label11:
        $r9 := @caughtexception;

        r13 = $r9;

        staticinvoke <androidx.camera.core.Logger: void d(java.lang.String,java.lang.String,java.lang.Throwable)>("SurfaceOutputImpl", "Processor executor closed. Close request not posted.", r13);

     label12:
        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.util.concurrent.RejectedExecutionException from label09 to label10 with label11;
    }

    public int getTargets()
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        int $i0;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        $i0 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mTargets>;

        return $i0;
    }

    public android.util.Size getSize()
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        android.util.Size $r1;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        $r1 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: android.util.Size mSize>;

        return $r1;
    }

    public int getFormat()
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        int $i0;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        $i0 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mFormat>;

        return $i0;
    }

    public int getRotationDegrees()
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        int $i0;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        $i0 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mRotationDegrees>;

        return $i0;
    }

    public void close()
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        java.lang.Object r1, $r2;
        boolean $z0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r3;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        $r2 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $z0 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mIsClosed>;

        if $z0 != 0 goto label1;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mIsClosed> = 1;

     label1:
        exitmonitor r1;

        goto label2;

     label2:
        $r3 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCloseFutureCompleter>;

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

        return;
    }

    public boolean isClosed()
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        $r2 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: java.lang.Object mLock>;

        r1 = $r2;

        entermonitor $r2;

        $z0 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mIsClosed>;

        exitmonitor r1;

        return $z0;
    }

    public com.google.common.util.concurrent.ListenableFuture getCloseFuture()
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        com.google.common.util.concurrent.ListenableFuture $r1;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        $r1 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: com.google.common.util.concurrent.ListenableFuture mCloseFuture>;

        return $r1;
    }

    public void updateTransformMatrix(float[], float[])
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        float[] r1, r2, $r5;
        androidx.camera.core.SurfaceOutput$GlTransformOptions $r3, $r9;
        int[] $r4;
        int $i0, $i1;
        java.lang.AssertionError $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r11;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        $r4 = <androidx.camera.core.processing.SurfaceOutputImpl$1: int[] $SwitchMap$androidx$camera$core$SurfaceOutput$GlTransformOptions>;

        $r3 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: androidx.camera.core.SurfaceOutput$GlTransformOptions mGlTransformOptions>;

        $i0 = virtualinvoke $r3.<androidx.camera.core.SurfaceOutput$GlTransformOptions: int ordinal()>();

        $i1 = $r4[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, 16);

        goto label4;

     label2:
        $r5 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, 16);

        goto label4;

     label3:
        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown GlTransformOptions: ");

        $r9 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: androidx.camera.core.SurfaceOutput$GlTransformOptions mGlTransformOptions>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r6;

     label4:
        return;
    }

    private void calculateGlTransform()
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        android.util.Size r1, $r8, $r9;
        android.graphics.Matrix r2;
        android.graphics.RectF r3, $r10, $r11, $r12;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        float[] $r4, $r5, $r6, $r7, $r14, $r15, $r16, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        android.graphics.Rect $r13;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        $r4 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>;

        staticinvoke <android.opengl.Matrix: void setIdentityM(float[],int)>($r4, 0);

        $r5 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float,float,float)>($r5, 0, 0.0F, 1.0F, 0.0F);

        $r6 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>;

        staticinvoke <android.opengl.Matrix: void scaleM(float[],int,float,float,float)>($r6, 0, 1.0F, -1.0F, 1.0F);

        $r7 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>;

        $i0 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mRotationDegrees>;

        $f4 = (float) $i0;

        staticinvoke <androidx.camera.core.impl.utils.MatrixExt: void preRotate(float[],float,float,float)>($r7, $f4, 0.5F, 0.5F);

        $z0 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mMirroring>;

        if $z0 == 0 goto label1;

        $r16 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float,float,float)>($r16, 0, 1.0F, 0.0F, 0.0F);

        $r17 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>;

        staticinvoke <android.opengl.Matrix: void scaleM(float[],int,float,float,float)>($r17, 0, -1.0F, 1.0F, 1.0F);

     label1:
        $r8 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: android.util.Size mInputSize>;

        $i1 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mRotationDegrees>;

        r1 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.util.Size rotateSize(android.util.Size,int)>($r8, $i1);

        $r9 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: android.util.Size mInputSize>;

        $r10 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.RectF sizeToRectF(android.util.Size)>($r9);

        $r11 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.RectF sizeToRectF(android.util.Size)>(r1);

        $i2 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: int mRotationDegrees>;

        $z1 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: boolean mMirroring>;

        r2 = staticinvoke <androidx.camera.core.impl.utils.TransformUtils: android.graphics.Matrix getRectToRect(android.graphics.RectF,android.graphics.RectF,int,boolean)>($r10, $r11, $i2, $z1);

        $r12 = new android.graphics.RectF;

        $r13 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: android.graphics.Rect mInputCropRect>;

        specialinvoke $r12.<android.graphics.RectF: void <init>(android.graphics.Rect)>($r13);

        r3 = $r12;

        virtualinvoke r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r3);

        $f5 = r3.<android.graphics.RectF: float left>;

        $i3 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f6 = (float) $i3;

        f0 = $f5 / $f6;

        $i4 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f7 = (float) $i4;

        $f8 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $f10 = $f7 - $f8;

        $f9 = r3.<android.graphics.RectF: float top>;

        $f11 = $f10 - $f9;

        $i5 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f12 = (float) $i5;

        f1 = $f11 / $f12;

        $f13 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $i6 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        $f14 = (float) $i6;

        f2 = $f13 / $f14;

        $f15 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $i7 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        $f16 = (float) $i7;

        f3 = $f15 / $f16;

        $r14 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float,float,float)>($r14, 0, f0, f1, 0.0F);

        $r15 = r0.<androidx.camera.core.processing.SurfaceOutputImpl: float[] mGlTransform>;

        staticinvoke <android.opengl.Matrix: void scaleM(float[],int,float,float,float)>($r15, 0, f2, f3, 1.0F);

        return;
    }

    private void lambda$requestClose$1(java.util.concurrent.atomic.AtomicReference)
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        java.util.concurrent.atomic.AtomicReference r1;
        java.lang.Object $r2;
        androidx.core.util.Consumer $r3;
        androidx.camera.core.SurfaceOutput$Event $r4;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        $r2 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (androidx.core.util.Consumer) $r2;

        $r4 = staticinvoke <androidx.camera.core.SurfaceOutput$Event: androidx.camera.core.SurfaceOutput$Event of(int,androidx.camera.core.SurfaceOutput)>(0, r0);

        interfaceinvoke $r3.<androidx.core.util.Consumer: void accept(java.lang.Object)>($r4);

        return;
    }

    private java.lang.Object lambda$new$0(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.core.processing.SurfaceOutputImpl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @this: androidx.camera.core.processing.SurfaceOutputImpl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.core.processing.SurfaceOutputImpl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCloseFutureCompleter> = r1;

        return "SurfaceOutputImpl close future complete";
    }

androidx.camera.core.processing.SurfaceOutputImpl$1
<androidx.camera.core.processing.SurfaceOutputImpl$1: int[] $SwitchMap$androidx$camera$core$SurfaceOutput$GlTransformOptions>
    static void <clinit>()
    {
        androidx.camera.core.SurfaceOutput$GlTransformOptions[] $r0;
        int $i0, $i1, $i2;
        int[] $r1, $r3, $r5;
        androidx.camera.core.SurfaceOutput$GlTransformOptions $r2, $r4;
        java.lang.Throwable $r6, $r7, r8, r9;

        $r0 = staticinvoke <androidx.camera.core.SurfaceOutput$GlTransformOptions: androidx.camera.core.SurfaceOutput$GlTransformOptions[] values()>();

        $i0 = lengthof $r0;

        $r1 = newarray (int)[$i0];

        <androidx.camera.core.processing.SurfaceOutputImpl$1: int[] $SwitchMap$androidx$camera$core$SurfaceOutput$GlTransformOptions> = $r1;

     label1:
        $r3 = <androidx.camera.core.processing.SurfaceOutputImpl$1: int[] $SwitchMap$androidx$camera$core$SurfaceOutput$GlTransformOptions>;

        $r2 = <androidx.camera.core.SurfaceOutput$GlTransformOptions: androidx.camera.core.SurfaceOutput$GlTransformOptions USE_SURFACE_TEXTURE_TRANSFORM>;

        $i1 = virtualinvoke $r2.<androidx.camera.core.SurfaceOutput$GlTransformOptions: int ordinal()>();

        $r3[$i1] = 1;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

     label4:
        $r5 = <androidx.camera.core.processing.SurfaceOutputImpl$1: int[] $SwitchMap$androidx$camera$core$SurfaceOutput$GlTransformOptions>;

        $r4 = <androidx.camera.core.SurfaceOutput$GlTransformOptions: androidx.camera.core.SurfaceOutput$GlTransformOptions APPLY_CROP_ROTATE_AND_MIRRORING>;

        $i2 = virtualinvoke $r4.<androidx.camera.core.SurfaceOutput$GlTransformOptions: int ordinal()>();

        $r5[$i2] = 2;

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        r9 = $r7;

     label7:
        return;

        catch java.lang.NoSuchFieldError from label1 to label2 with label3;
        catch java.lang.NoSuchFieldError from label4 to label5 with label6;
    }

