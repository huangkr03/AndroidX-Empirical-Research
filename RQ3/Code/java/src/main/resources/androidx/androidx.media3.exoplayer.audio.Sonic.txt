androidx.media3.exoplayer.audio.Sonic
<androidx.media3.exoplayer.audio.Sonic: int MINIMUM_PITCH>
<androidx.media3.exoplayer.audio.Sonic: int MAXIMUM_PITCH>
<androidx.media3.exoplayer.audio.Sonic: int AMDF_FREQUENCY>
<androidx.media3.exoplayer.audio.Sonic: int BYTES_PER_SAMPLE>
<androidx.media3.exoplayer.audio.Sonic: int inputSampleRateHz>
<androidx.media3.exoplayer.audio.Sonic: int channelCount>
<androidx.media3.exoplayer.audio.Sonic: float speed>
<androidx.media3.exoplayer.audio.Sonic: float pitch>
<androidx.media3.exoplayer.audio.Sonic: float rate>
<androidx.media3.exoplayer.audio.Sonic: int minPeriod>
<androidx.media3.exoplayer.audio.Sonic: int maxPeriod>
<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>
<androidx.media3.exoplayer.audio.Sonic: short[] downSampleBuffer>
<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>
<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>
<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>
<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>
<androidx.media3.exoplayer.audio.Sonic: short[] pitchBuffer>
<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount>
<androidx.media3.exoplayer.audio.Sonic: int oldRatePosition>
<androidx.media3.exoplayer.audio.Sonic: int newRatePosition>
<androidx.media3.exoplayer.audio.Sonic: int remainingInputToCopyFrameCount>
<androidx.media3.exoplayer.audio.Sonic: int prevPeriod>
<androidx.media3.exoplayer.audio.Sonic: int prevMinDiff>
<androidx.media3.exoplayer.audio.Sonic: int minDiff>
<androidx.media3.exoplayer.audio.Sonic: int maxDiff>
    public void <init>(int, int, float, float, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        float f0, f1, $f2, $f3, $f4;
        short[] $r1, $r2, $r3, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        i2 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.media3.exoplayer.audio.Sonic: int inputSampleRateHz> = i0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount> = i1;

        r0.<androidx.media3.exoplayer.audio.Sonic: float speed> = f0;

        r0.<androidx.media3.exoplayer.audio.Sonic: float pitch> = f1;

        $f3 = (float) i0;

        $f2 = (float) i2;

        $f4 = $f3 / $f2;

        r0.<androidx.media3.exoplayer.audio.Sonic: float rate> = $f4;

        $i3 = i0 / 400;

        r0.<androidx.media3.exoplayer.audio.Sonic: int minPeriod> = $i3;

        $i4 = i0 / 65;

        r0.<androidx.media3.exoplayer.audio.Sonic: int maxPeriod> = $i4;

        $i5 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxPeriod>;

        $i6 = 2 * $i5;

        r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount> = $i6;

        $i7 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        $r1 = newarray (short)[$i7];

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] downSampleBuffer> = $r1;

        $i8 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        $i9 = $i8 * i1;

        $r2 = newarray (short)[$i9];

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer> = $r2;

        $i10 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        $i11 = $i10 * i1;

        $r3 = newarray (short)[$i11];

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer> = $r3;

        $i12 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        $i13 = $i12 * i1;

        $r4 = newarray (short)[$i13];

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] pitchBuffer> = $r4;

        return;
    }

    public int getPendingInputBytes()
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        $i1 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        $i0 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i2 = $i1 * $i0;

        $i3 = $i2 * 2;

        return $i3;
    }

    public void queueInput(java.nio.ShortBuffer)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        java.nio.ShortBuffer r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        short[] $r2, $r3, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: java.nio.ShortBuffer;

        $i2 = virtualinvoke r1.<java.nio.ShortBuffer: int remaining()>();

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        i0 = $i2 / $i3;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i5 = i0 * $i4;

        i1 = $i5 * 2;

        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        $i6 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        $r3 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: short[] ensureSpaceForAdditionalFrames(short[],int,int)>($r2, $i6, i0);

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer> = $r3;

        $r4 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        $i8 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        $i7 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i10 = $i8 * $i7;

        $i9 = i1 / 2;

        virtualinvoke r1.<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)>($r4, $i10, $i9);

        $i11 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        $i12 = $i11 + i0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount> = $i12;

        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void processStreamInput()>();

        return;
    }

    public void getOutput(java.nio.ShortBuffer)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        java.nio.ShortBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        short[] $r2, $r4, $r5;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: java.nio.ShortBuffer;

        $i1 = virtualinvoke r1.<java.nio.ShortBuffer: int remaining()>();

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i4 = $i1 / $i2;

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i5 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i6 = i0 * $i5;

        virtualinvoke r1.<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>($r2, 0, $i6);

        $i7 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i8 = $i7 - i0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount> = $i8;

        $r5 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i9 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i13 = i0 * $i9;

        $r4 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i11 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i10 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i12 = $i11 * $i10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i13, $r4, 0, $i12);

        return;
    }

    public void queueEndOfStream()
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        short[] $r1, $r2, $r3;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        i0 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        $f3 = r0.<androidx.media3.exoplayer.audio.Sonic: float speed>;

        $f2 = r0.<androidx.media3.exoplayer.audio.Sonic: float pitch>;

        f0 = $f3 / $f2;

        $f5 = r0.<androidx.media3.exoplayer.audio.Sonic: float rate>;

        $f4 = r0.<androidx.media3.exoplayer.audio.Sonic: float pitch>;

        f1 = $f5 * $f4;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $f6 = (float) i0;

        $f8 = $f6 / f0;

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount>;

        $f7 = (float) $i2;

        $f9 = $f8 + $f7;

        $f10 = $f9 / f1;

        $f11 = $f10 + 0.5F;

        $i3 = (int) $f11;

        i1 = $i4 + $i3;

        $r1 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        $i8 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        $i5 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        $i6 = 2 * $i5;

        $i7 = i0 + $i6;

        $r2 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: short[] ensureSpaceForAdditionalFrames(short[],int,int)>($r1, $i8, $i7);

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer> = $r2;

        i21 = 0;

     label1:
        $i9 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        $i11 = 2 * $i9;

        $i10 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i12 = $i11 * $i10;

        if i21 >= $i12 goto label2;

        $r3 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        $i18 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i19 = i0 * $i18;

        $i20 = $i19 + i21;

        $r3[$i20] = 0;

        i21 = i21 + 1;

        goto label1;

     label2:
        $i15 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        $i13 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        $i14 = 2 * $i13;

        $i16 = $i15 + $i14;

        r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount> = $i16;

        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void processStreamInput()>();

        $i17 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        if $i17 <= i1 goto label3;

        r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount> = i1;

     label3:
        r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int remainingInputToCopyFrameCount> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount> = 0;

        return;
    }

    public void flush()
    {
        androidx.media3.exoplayer.audio.Sonic r0;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int oldRatePosition> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int newRatePosition> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int remainingInputToCopyFrameCount> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int prevPeriod> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int prevMinDiff> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int minDiff> = 0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int maxDiff> = 0;

        return;
    }

    public int getOutputSize()
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        $i1 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i0 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i2 = $i1 * $i0;

        $i3 = $i2 * 2;

        return $i3;
    }

    private short[] ensureSpaceForAdditionalFrames(short[], int, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        short[] r1, $r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i5 = lengthof r1;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        i2 = $i5 / $i4;

        $i6 = i0 + i1;

        if $i6 > i2 goto label1;

        return r1;

     label1:
        $i7 = 3 * i2;

        $i8 = $i7 / 2;

        i3 = $i8 + i1;

        $i9 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i10 = i3 * $i9;

        $r2 = staticinvoke <java.util.Arrays: short[] copyOf(short[],int)>(r1, $i10);

        return $r2;
    }

    private void removeProcessedInputFrames(int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        short[] $r1, $r2;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        i0 := @parameter0: int;

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        i1 = $i2 - i0;

        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i6 = i0 * $i3;

        $r1 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i5 = i1 * $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i6, $r1, 0, $i5);

        r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount> = i1;

        return;
    }

    private void copyToOutput(short[], int, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        short[] r1, $r2, $r3, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $r3 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: short[] ensureSpaceForAdditionalFrames(short[],int,int)>($r2, $i2, i1);

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer> = $r3;

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i9 = i0 * $i3;

        $r4 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i5 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i8 = $i5 * $i4;

        $i6 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i7 = i1 * $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i9, $r4, $i8, $i7);

        $i10 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i11 = $i10 + i1;

        r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount> = $i11;

        return;
    }

    private int copyInputToOutput(int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        short[] $r1;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        i0 := @parameter0: int;

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int remainingInputToCopyFrameCount>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        $r1 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void copyToOutput(short[],int,int)>($r1, i0, i1);

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int remainingInputToCopyFrameCount>;

        $i5 = $i4 - i1;

        r0.<androidx.media3.exoplayer.audio.Sonic: int remainingInputToCopyFrameCount> = $i5;

        return i1;
    }

    private void downSampleInput(short[], int, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        short[] r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, $i9, i11, i12, i13, i14, i15, i16;
        short $s6, $s10;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: short[];

        i11 := @parameter1: int;

        i0 := @parameter2: int;

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        i1 = $i3 / i0;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        i2 = $i4 * i0;

        $i5 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        i12 = i11 * $i5;

        i13 = 0;

     label1:
        if i13 >= i1 goto label4;

        i14 = 0;

        i15 = 0;

     label2:
        if i15 >= i2 goto label3;

        $i7 = i13 * i2;

        $i8 = i12 + $i7;

        $i9 = $i8 + i15;

        $s10 = r1[$i9];

        i14 = i14 + $s10;

        i15 = i15 + 1;

        goto label2;

     label3:
        i16 = i14 / i2;

        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] downSampleBuffer>;

        $s6 = (short) i16;

        $r2[i13] = $s6;

        i13 = i13 + 1;

        goto label1;

     label4:
        return;
    }

    private int findPitchPeriodInRange(short[], int, int, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        short[] r1;
        int i0, i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23, i24;
        short s2, s3;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: short[];

        i16 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i17 = 0;

        i18 = 255;

        i19 = 1;

        i20 = 0;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        i21 = i16 * $i4;

        i22 = i0;

     label1:
        if i22 > i1 goto label6;

        i23 = 0;

        i24 = 0;

     label2:
        if i24 >= i22 goto label3;

        $i11 = i21 + i24;

        s2 = r1[$i11];

        $i12 = i21 + i22;

        $i13 = $i12 + i24;

        s3 = r1[$i13];

        $i14 = s2 - s3;

        $i15 = staticinvoke <java.lang.Math: int abs(int)>($i14);

        i23 = i23 + $i15;

        i24 = i24 + 1;

        goto label2;

     label3:
        $i8 = i23 * i17;

        $i7 = i19 * i22;

        if $i8 >= $i7 goto label4;

        i19 = i23;

        i17 = i22;

     label4:
        $i10 = i23 * i18;

        $i9 = i20 * i22;

        if $i10 <= $i9 goto label5;

        i20 = i23;

        i18 = i22;

     label5:
        i22 = i22 + 1;

        goto label1;

     label6:
        $i5 = i19 / i17;

        r0.<androidx.media3.exoplayer.audio.Sonic: int minDiff> = $i5;

        $i6 = i20 / i18;

        r0.<androidx.media3.exoplayer.audio.Sonic: int maxDiff> = $i6;

        return i17;
    }

    private boolean previousPeriodBetter(int, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label1;

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int prevPeriod>;

        if $i2 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i3 = i0 * 3;

        if i1 <= $i3 goto label3;

        return 0;

     label3:
        $i6 = i0 * 2;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int prevMinDiff>;

        $i5 = $i4 * 3;

        if $i6 > $i5 goto label4;

        return 0;

     label4:
        return 1;
    }

    private int findPitchPeriod(short[], int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        short[] r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, $i22, $i23, i24;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputSampleRateHz>;

        if $i2 <= 4000 goto label1;

        $i16 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputSampleRateHz>;

        $i17 = $i16 / 4000;

        goto label2;

     label1:
        $i17 = 1;

     label2:
        i1 = $i17;

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        if $i3 != 1 goto label3;

        if i1 != 1 goto label3;

        $i15 = r0.<androidx.media3.exoplayer.audio.Sonic: int minPeriod>;

        $i14 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxPeriod>;

        i18 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: int findPitchPeriodInRange(short[],int,int,int)>(r1, i0, $i15, $i14);

        goto label7;

     label3:
        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void downSampleInput(short[],int,int)>(r1, i0, i1);

        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] downSampleBuffer>;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int minPeriod>;

        $i7 = $i4 / i1;

        $i5 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxPeriod>;

        $i6 = $i5 / i1;

        i18 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: int findPitchPeriodInRange(short[],int,int,int)>($r2, 0, $i7, $i6);

        if i1 == 1 goto label7;

        i19 = i18 * i1;

        $i9 = i1 * 4;

        i20 = i19 - $i9;

        $i10 = i1 * 4;

        i21 = i19 + $i10;

        $i11 = r0.<androidx.media3.exoplayer.audio.Sonic: int minPeriod>;

        if i20 >= $i11 goto label4;

        i20 = r0.<androidx.media3.exoplayer.audio.Sonic: int minPeriod>;

     label4:
        $i12 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxPeriod>;

        if i21 <= $i12 goto label5;

        i21 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxPeriod>;

     label5:
        $i13 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        if $i13 != 1 goto label6;

        i18 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: int findPitchPeriodInRange(short[],int,int,int)>(r1, i0, i20, i21);

        goto label7;

     label6:
        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void downSampleInput(short[],int,int)>(r1, i0, 1);

        $r3 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] downSampleBuffer>;

        i18 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: int findPitchPeriodInRange(short[],int,int,int)>($r3, 0, i20, i21);

     label7:
        $i22 = r0.<androidx.media3.exoplayer.audio.Sonic: int minDiff>;

        $i23 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxDiff>;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: boolean previousPeriodBetter(int,int)>($i22, $i23);

        if $z0 == 0 goto label8;

        i24 = r0.<androidx.media3.exoplayer.audio.Sonic: int prevPeriod>;

        goto label9;

     label8:
        i24 = i18;

     label9:
        $i8 = r0.<androidx.media3.exoplayer.audio.Sonic: int minDiff>;

        r0.<androidx.media3.exoplayer.audio.Sonic: int prevMinDiff> = $i8;

        r0.<androidx.media3.exoplayer.audio.Sonic: int prevPeriod> = i18;

        return i24;
    }

    private void moveNewSamplesToPitchBuffer(int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        short[] $r1, $r2, $r3, $r4;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        i0 := @parameter0: int;

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        i1 = $i2 - i0;

        $r1 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] pitchBuffer>;

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount>;

        $r2 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: short[] ensureSpaceForAdditionalFrames(short[],int,int)>($r1, $i3, i1);

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] pitchBuffer> = $r2;

        $r4 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i10 = i0 * $i4;

        $r3 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] pitchBuffer>;

        $i6 = r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount>;

        $i5 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i9 = $i6 * $i5;

        $i7 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i8 = i1 * $i7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i10, $r3, $i9, $i8);

        r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount> = i0;

        $i11 = r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount>;

        $i12 = $i11 + i1;

        r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount> = $i12;

        return;
    }

    private void removePitchFrames(int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        short[] $r1, $r2;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] pitchBuffer>;

        $i1 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i6 = i0 * $i1;

        $r1 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] pitchBuffer>;

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount>;

        $i4 = $i2 - i0;

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i5 = $i4 * $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i6, $r1, 0, $i5);

        $i7 = r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount>;

        $i8 = $i7 - i0;

        r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount> = $i8;

        return;
    }

    private short interpolate(short[], int, int, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        short[] r1;
        int i0, i1, i2, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        short s3, s4, $s21;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        s3 = r1[i0];

        $i10 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i11 = i0 + $i10;

        s4 = r1[$i11];

        $i12 = r0.<androidx.media3.exoplayer.audio.Sonic: int newRatePosition>;

        i5 = $i12 * i1;

        $i13 = r0.<androidx.media3.exoplayer.audio.Sonic: int oldRatePosition>;

        i6 = $i13 * i2;

        $i14 = r0.<androidx.media3.exoplayer.audio.Sonic: int oldRatePosition>;

        $i15 = $i14 + 1;

        i7 = $i15 * i2;

        i8 = i7 - i5;

        i9 = i7 - i6;

        $i18 = i8 * s3;

        $i16 = i9 - i8;

        $i17 = $i16 * s4;

        $i19 = $i18 + $i17;

        $i20 = $i19 / i9;

        $s21 = (short) $i20;

        return $s21;
    }

    private void adjustRate(float, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        float f0, $f1, $f2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i30, i31, i32, i33;
        short[] $r1, $r2, $r3, $r4;
        short $s29;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $i1 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        if $i1 != i0 goto label01;

        return;

     label01:
        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputSampleRateHz>;

        $f1 = (float) $i2;

        $f2 = $f1 / f0;

        i30 = (int) $f2;

        i31 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputSampleRateHz>;

     label02:
        if i30 > 16384 goto label03;

        if i31 <= 16384 goto label04;

     label03:
        i30 = i30 / 2;

        i31 = i31 / 2;

        goto label02;

     label04:
        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void moveNewSamplesToPitchBuffer(int)>(i0);

        i32 = 0;

     label05:
        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount>;

        $i4 = $i3 - 1;

        if i32 >= $i4 goto label13;

     label06:
        $i7 = r0.<androidx.media3.exoplayer.audio.Sonic: int oldRatePosition>;

        $i8 = $i7 + 1;

        $i11 = $i8 * i30;

        $i9 = r0.<androidx.media3.exoplayer.audio.Sonic: int newRatePosition>;

        $i10 = $i9 * i31;

        if $i11 <= $i10 goto label09;

        $r1 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i16 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $r2 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: short[] ensureSpaceForAdditionalFrames(short[],int,int)>($r1, $i16, 1);

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer> = $r2;

        i33 = 0;

     label07:
        $i17 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        if i33 >= $i17 goto label08;

        $r4 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i23 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i22 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i24 = $i23 * $i22;

        $i28 = $i24 + i33;

        $r3 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] pitchBuffer>;

        $i25 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i26 = i32 * $i25;

        $i27 = $i26 + i33;

        $s29 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: short interpolate(short[],int,int,int)>($r3, $i27, i31, i30);

        $r4[$i28] = $s29;

        i33 = i33 + 1;

        goto label07;

     label08:
        $i18 = r0.<androidx.media3.exoplayer.audio.Sonic: int newRatePosition>;

        $i19 = $i18 + 1;

        r0.<androidx.media3.exoplayer.audio.Sonic: int newRatePosition> = $i19;

        $i20 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i21 = $i20 + 1;

        r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount> = $i21;

        goto label06;

     label09:
        $i12 = r0.<androidx.media3.exoplayer.audio.Sonic: int oldRatePosition>;

        $i13 = $i12 + 1;

        r0.<androidx.media3.exoplayer.audio.Sonic: int oldRatePosition> = $i13;

        $i14 = r0.<androidx.media3.exoplayer.audio.Sonic: int oldRatePosition>;

        if $i14 != i31 goto label12;

        r0.<androidx.media3.exoplayer.audio.Sonic: int oldRatePosition> = 0;

        $i15 = r0.<androidx.media3.exoplayer.audio.Sonic: int newRatePosition>;

        if $i15 != i30 goto label10;

        $z0 = 1;

        goto label11;

     label10:
        $z0 = 0;

     label11:
        staticinvoke <androidx.media3.common.util.Assertions: void checkState(boolean)>($z0);

        r0.<androidx.media3.exoplayer.audio.Sonic: int newRatePosition> = 0;

     label12:
        i32 = i32 + 1;

        goto label05;

     label13:
        $i5 = r0.<androidx.media3.exoplayer.audio.Sonic: int pitchFrameCount>;

        $i6 = $i5 - 1;

        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void removePitchFrames(int)>($i6);

        return;
    }

    private int skipPitchPeriod(short[], int, float, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        short[] r1, $r2, $r3, $r4;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        byte $b2;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        i1 := @parameter3: int;

        $b2 = f0 cmpl 2.0F;

        if $b2 < 0 goto label1;

        $f7 = (float) i1;

        $f6 = f0 - 1.0F;

        $f8 = $f7 / $f6;

        i10 = (int) $f8;

        goto label2;

     label1:
        i10 = i1;

        $f2 = (float) i1;

        $f1 = 2.0F - f0;

        $f4 = $f2 * $f1;

        $f3 = f0 - 1.0F;

        $f5 = $f4 / $f3;

        $i3 = (int) $f5;

        r0.<androidx.media3.exoplayer.audio.Sonic: int remainingInputToCopyFrameCount> = $i3;

     label2:
        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $r3 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: short[] ensureSpaceForAdditionalFrames(short[],int,int)>($r2, $i4, i10);

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer> = $r3;

        $i7 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $r4 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i6 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i5 = i0 + i1;

        staticinvoke <androidx.media3.exoplayer.audio.Sonic: void overlapAdd(int,int,short[],int,short[],int,short[],int)>(i10, $i7, $r4, $i6, r1, i0, r1, $i5);

        $i8 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i9 = $i8 + i10;

        r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount> = $i9;

        return i10;
    }

    private int insertPitchPeriod(short[], int, float, int)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        short[] r1, $r2, $r3, $r4, $r5;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        byte $b2;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        i1 := @parameter3: int;

        $b2 = f0 cmpg 0.5F;

        if $b2 >= 0 goto label1;

        $f7 = (float) i1;

        $f9 = $f7 * f0;

        $f8 = 1.0F - f0;

        $f10 = $f9 / $f8;

        i20 = (int) $f10;

        goto label2;

     label1:
        i20 = i1;

        $f3 = (float) i1;

        $f1 = 2.0F * f0;

        $f2 = $f1 - 1.0F;

        $f5 = $f3 * $f2;

        $f4 = 1.0F - f0;

        $f6 = $f5 / $f4;

        $i3 = (int) $f6;

        r0.<androidx.media3.exoplayer.audio.Sonic: int remainingInputToCopyFrameCount> = $i3;

     label2:
        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i5 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i4 = i1 + i20;

        $r3 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: short[] ensureSpaceForAdditionalFrames(short[],int,int)>($r2, $i5, $i4);

        r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer> = $r3;

        $i6 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i12 = i0 * $i6;

        $r4 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i8 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i7 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i11 = $i8 * $i7;

        $i9 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $i10 = i1 * $i9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i12, $r4, $i11, $i10);

        $i16 = r0.<androidx.media3.exoplayer.audio.Sonic: int channelCount>;

        $r5 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] outputBuffer>;

        $i13 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i15 = $i13 + i1;

        $i14 = i0 + i1;

        staticinvoke <androidx.media3.exoplayer.audio.Sonic: void overlapAdd(int,int,short[],int,short[],int,short[],int)>(i20, $i16, $r5, $i15, r1, $i14, r1, i0);

        $i18 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $i17 = i1 + i20;

        $i19 = $i18 + $i17;

        r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount> = $i19;

        return i20;
    }

    private void changeSpeed(float)
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        float f0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, i10, $i11, $i12;
        short[] $r1, $r2, $r3;
        double $d0;
        byte $b5;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        f0 := @parameter0: float;

        $i3 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        $i2 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        if $i3 >= $i2 goto label1;

        return;

     label1:
        i0 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        i10 = 0;

     label2:
        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int remainingInputToCopyFrameCount>;

        if $i4 <= 0 goto label3;

        $i9 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: int copyInputToOutput(int)>(i10);

        i10 = i10 + $i9;

        goto label5;

     label3:
        $r1 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        i1 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: int findPitchPeriod(short[],int)>($r1, i10);

        $d0 = (double) f0;

        $b5 = $d0 cmpl 1.0;

        if $b5 <= 0 goto label4;

        $r3 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        $i7 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: int skipPitchPeriod(short[],int,float,int)>($r3, i10, f0, i1);

        $i8 = i1 + $i7;

        i10 = i10 + $i8;

        goto label5;

     label4:
        $r2 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        $i6 = specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: int insertPitchPeriod(short[],int,float,int)>($r2, i10, f0, i1);

        i10 = i10 + $i6;

     label5:
        $i11 = r0.<androidx.media3.exoplayer.audio.Sonic: int maxRequiredFrameCount>;

        $i12 = i10 + $i11;

        if $i12 <= i0 goto label2;

        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void removeProcessedInputFrames(int)>(i10);

        return;
    }

    private void processStreamInput()
    {
        androidx.media3.exoplayer.audio.Sonic r0;
        int i0, $i4;
        float f0, f1, $f2, $f3, $f4, $f5;
        double $d0, $d1;
        byte $b1, $b2, $b3;
        short[] $r1;

        r0 := @this: androidx.media3.exoplayer.audio.Sonic;

        i0 = r0.<androidx.media3.exoplayer.audio.Sonic: int outputFrameCount>;

        $f3 = r0.<androidx.media3.exoplayer.audio.Sonic: float speed>;

        $f2 = r0.<androidx.media3.exoplayer.audio.Sonic: float pitch>;

        f0 = $f3 / $f2;

        $f5 = r0.<androidx.media3.exoplayer.audio.Sonic: float rate>;

        $f4 = r0.<androidx.media3.exoplayer.audio.Sonic: float pitch>;

        f1 = $f5 * $f4;

        $d0 = (double) f0;

        $b1 = $d0 cmpl 1.00001;

        if $b1 > 0 goto label1;

        $d1 = (double) f0;

        $b3 = $d1 cmpg 0.99999;

        if $b3 >= 0 goto label2;

     label1:
        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void changeSpeed(float)>(f0);

        goto label3;

     label2:
        $r1 = r0.<androidx.media3.exoplayer.audio.Sonic: short[] inputBuffer>;

        $i4 = r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount>;

        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void copyToOutput(short[],int,int)>($r1, 0, $i4);

        r0.<androidx.media3.exoplayer.audio.Sonic: int inputFrameCount> = 0;

     label3:
        $b2 = f1 cmpl 1.0F;

        if $b2 == 0 goto label4;

        specialinvoke r0.<androidx.media3.exoplayer.audio.Sonic: void adjustRate(float,int)>(f1, i0);

     label4:
        return;
    }

    private static void overlapAdd(int, int, short[], int, short[], int, short[], int)
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, i16, i17, i18, i19, i20;
        short[] r0, r1, r2;
        short $s9, $s10, $s15;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: short[];

        i2 := @parameter3: int;

        r1 := @parameter4: short[];

        i3 := @parameter5: int;

        r2 := @parameter6: short[];

        i4 := @parameter7: int;

        i16 = 0;

     label1:
        if i16 >= i1 goto label4;

        $i5 = i2 * i1;

        i17 = $i5 + i16;

        $i6 = i4 * i1;

        i18 = $i6 + i16;

        $i7 = i3 * i1;

        i19 = $i7 + i16;

        i20 = 0;

     label2:
        if i20 >= i0 goto label3;

        $s9 = r1[i19];

        $i8 = i0 - i20;

        $i12 = $s9 * $i8;

        $s10 = r2[i18];

        $i11 = $s10 * i20;

        $i13 = $i12 + $i11;

        $i14 = $i13 / i0;

        $s15 = (short) $i14;

        r0[i17] = $s15;

        i17 = i17 + i1;

        i19 = i19 + i1;

        i18 = i18 + i1;

        i20 = i20 + 1;

        goto label2;

     label3:
        i16 = i16 + 1;

        goto label1;

     label4:
        return;
    }

