androidx.work.impl.WorkDatabase
<androidx.work.impl.WorkDatabase: androidx.work.impl.WorkDatabase$Companion Companion>
    public void <init>()
    {
        androidx.work.impl.WorkDatabase r0;

        r0 := @this: androidx.work.impl.WorkDatabase;

        specialinvoke r0.<androidx.room.RoomDatabase: void <init>()>();

        return;
    }

<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkSpecDao workSpecDao()>
<androidx.work.impl.WorkDatabase: androidx.work.impl.model.DependencyDao dependencyDao()>
<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkTagDao workTagDao()>
<androidx.work.impl.WorkDatabase: androidx.work.impl.model.SystemIdInfoDao systemIdInfoDao()>
<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkNameDao workNameDao()>
<androidx.work.impl.WorkDatabase: androidx.work.impl.model.WorkProgressDao workProgressDao()>
<androidx.work.impl.WorkDatabase: androidx.work.impl.model.PreferenceDao preferenceDao()>
<androidx.work.impl.WorkDatabase: androidx.work.impl.model.RawWorkInfoDao rawWorkInfoDao()>
    public static final androidx.work.impl.WorkDatabase create(android.content.Context, java.util.concurrent.Executor, boolean)
    {
        android.content.Context r0;
        java.util.concurrent.Executor r1;
        boolean z0;
        androidx.work.impl.WorkDatabase$Companion $r2;
        androidx.work.impl.WorkDatabase $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.util.concurrent.Executor;

        z0 := @parameter2: boolean;

        $r2 = <androidx.work.impl.WorkDatabase: androidx.work.impl.WorkDatabase$Companion Companion>;

        $r3 = virtualinvoke $r2.<androidx.work.impl.WorkDatabase$Companion: androidx.work.impl.WorkDatabase create(android.content.Context,java.util.concurrent.Executor,boolean)>(r0, r1, z0);

        return $r3;
    }

    static void <clinit>()
    {
        androidx.work.impl.WorkDatabase$Companion $r0;

        $r0 = new androidx.work.impl.WorkDatabase$Companion;

        specialinvoke $r0.<androidx.work.impl.WorkDatabase$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null);

        <androidx.work.impl.WorkDatabase: androidx.work.impl.WorkDatabase$Companion Companion> = $r0;

        return;
    }

androidx.work.impl.WorkDatabase$Companion
    private void <init>()
    {
        androidx.work.impl.WorkDatabase$Companion r0;

        r0 := @this: androidx.work.impl.WorkDatabase$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.work.impl.WorkDatabase create(android.content.Context, java.util.concurrent.Executor, boolean)
    {
        androidx.work.impl.WorkDatabase$Companion r0;
        android.content.Context r1;
        java.util.concurrent.Executor r2;
        boolean z0;
        androidx.room.RoomDatabase$Builder r3, $r4, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48, $r49, $r52, $r53;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Factory $r5;
        androidx.work.impl.CleanupCallback $r7;
        androidx.room.RoomDatabase$Callback $r8;
        androidx.work.impl.Migration_1_2 $r10;
        androidx.room.migration.Migration $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r47;
        androidx.work.impl.RescheduleMigration $r13, $r22, $r37;
        androidx.work.impl.Migration_3_4 $r16;
        androidx.work.impl.Migration_4_5 $r19;
        androidx.work.impl.Migration_6_7 $r25;
        androidx.work.impl.Migration_7_8 $r28;
        androidx.work.impl.Migration_8_9 $r31;
        androidx.work.impl.WorkMigration9To10 $r34;
        androidx.work.impl.Migration_11_12 $r40;
        androidx.work.impl.Migration_12_13 $r43;
        androidx.work.impl.Migration_15_16 $r46;
        androidx.room.RoomDatabase $r50;
        androidx.work.impl.WorkDatabase $r51;
        androidx.room.migration.Migration[] r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66;

        r0 := @this: androidx.work.impl.WorkDatabase$Companion;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.util.concurrent.Executor;

        z0 := @parameter2: boolean;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r2, "queryExecutor");

        if z0 == 0 goto label1;

        $r52 = staticinvoke <androidx.room.Room: androidx.room.RoomDatabase$Builder inMemoryDatabaseBuilder(android.content.Context,java.lang.Class)>(r1, class "Landroidx/work/impl/WorkDatabase;");

        $r53 = virtualinvoke $r52.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder allowMainThreadQueries()>();

        goto label2;

     label1:
        $r4 = staticinvoke <androidx.room.Room: androidx.room.RoomDatabase$Builder databaseBuilder(android.content.Context,java.lang.Class,java.lang.String)>(r1, class "Landroidx/work/impl/WorkDatabase;", "androidx.work.workdb");

        $r5 = dynamicinvoke "create" <androidx.sqlite.db.SupportSQLiteOpenHelper$Factory (android.content.Context)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: androidx.sqlite.db.SupportSQLiteOpenHelper __METHODTYPE__(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration), methodhandle: "REF_INVOKE_STATIC" <androidx.work.impl.WorkDatabase$Companion: androidx.sqlite.db.SupportSQLiteOpenHelper create$lambda$0(android.content.Context,androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)>, methodtype: androidx.sqlite.db.SupportSQLiteOpenHelper __METHODTYPE__(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration));

        $r53 = virtualinvoke $r4.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder openHelperFactory(androidx.sqlite.db.SupportSQLiteOpenHelper$Factory)>($r5);

     label2:
        r3 = $r53;

        $r6 = virtualinvoke r3.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder setQueryExecutor(java.util.concurrent.Executor)>(r2);

        $r7 = <androidx.work.impl.CleanupCallback: androidx.work.impl.CleanupCallback INSTANCE>;

        $r8 = (androidx.room.RoomDatabase$Callback) $r7;

        $r9 = virtualinvoke $r6.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addCallback(androidx.room.RoomDatabase$Callback)>($r8);

        r54 = newarray (androidx.room.migration.Migration)[1];

        $r10 = <androidx.work.impl.Migration_1_2: androidx.work.impl.Migration_1_2 INSTANCE>;

        $r11 = (androidx.room.migration.Migration) $r10;

        r54[0] = $r11;

        $r12 = virtualinvoke $r9.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r54);

        r55 = newarray (androidx.room.migration.Migration)[1];

        $r13 = new androidx.work.impl.RescheduleMigration;

        specialinvoke $r13.<androidx.work.impl.RescheduleMigration: void <init>(android.content.Context,int,int)>(r1, 2, 3);

        $r14 = (androidx.room.migration.Migration) $r13;

        r55[0] = $r14;

        $r15 = virtualinvoke $r12.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r55);

        r56 = newarray (androidx.room.migration.Migration)[1];

        $r16 = <androidx.work.impl.Migration_3_4: androidx.work.impl.Migration_3_4 INSTANCE>;

        $r17 = (androidx.room.migration.Migration) $r16;

        r56[0] = $r17;

        $r18 = virtualinvoke $r15.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r56);

        r57 = newarray (androidx.room.migration.Migration)[1];

        $r19 = <androidx.work.impl.Migration_4_5: androidx.work.impl.Migration_4_5 INSTANCE>;

        $r20 = (androidx.room.migration.Migration) $r19;

        r57[0] = $r20;

        $r21 = virtualinvoke $r18.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r57);

        r58 = newarray (androidx.room.migration.Migration)[1];

        $r22 = new androidx.work.impl.RescheduleMigration;

        specialinvoke $r22.<androidx.work.impl.RescheduleMigration: void <init>(android.content.Context,int,int)>(r1, 5, 6);

        $r23 = (androidx.room.migration.Migration) $r22;

        r58[0] = $r23;

        $r24 = virtualinvoke $r21.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r58);

        r59 = newarray (androidx.room.migration.Migration)[1];

        $r25 = <androidx.work.impl.Migration_6_7: androidx.work.impl.Migration_6_7 INSTANCE>;

        $r26 = (androidx.room.migration.Migration) $r25;

        r59[0] = $r26;

        $r27 = virtualinvoke $r24.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r59);

        r60 = newarray (androidx.room.migration.Migration)[1];

        $r28 = <androidx.work.impl.Migration_7_8: androidx.work.impl.Migration_7_8 INSTANCE>;

        $r29 = (androidx.room.migration.Migration) $r28;

        r60[0] = $r29;

        $r30 = virtualinvoke $r27.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r60);

        r61 = newarray (androidx.room.migration.Migration)[1];

        $r31 = <androidx.work.impl.Migration_8_9: androidx.work.impl.Migration_8_9 INSTANCE>;

        $r32 = (androidx.room.migration.Migration) $r31;

        r61[0] = $r32;

        $r33 = virtualinvoke $r30.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r61);

        r62 = newarray (androidx.room.migration.Migration)[1];

        $r34 = new androidx.work.impl.WorkMigration9To10;

        specialinvoke $r34.<androidx.work.impl.WorkMigration9To10: void <init>(android.content.Context)>(r1);

        $r35 = (androidx.room.migration.Migration) $r34;

        r62[0] = $r35;

        $r36 = virtualinvoke $r33.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r62);

        r63 = newarray (androidx.room.migration.Migration)[1];

        $r37 = new androidx.work.impl.RescheduleMigration;

        specialinvoke $r37.<androidx.work.impl.RescheduleMigration: void <init>(android.content.Context,int,int)>(r1, 10, 11);

        $r38 = (androidx.room.migration.Migration) $r37;

        r63[0] = $r38;

        $r39 = virtualinvoke $r36.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r63);

        r64 = newarray (androidx.room.migration.Migration)[1];

        $r40 = <androidx.work.impl.Migration_11_12: androidx.work.impl.Migration_11_12 INSTANCE>;

        $r41 = (androidx.room.migration.Migration) $r40;

        r64[0] = $r41;

        $r42 = virtualinvoke $r39.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r64);

        r65 = newarray (androidx.room.migration.Migration)[1];

        $r43 = <androidx.work.impl.Migration_12_13: androidx.work.impl.Migration_12_13 INSTANCE>;

        $r44 = (androidx.room.migration.Migration) $r43;

        r65[0] = $r44;

        $r45 = virtualinvoke $r42.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r65);

        r66 = newarray (androidx.room.migration.Migration)[1];

        $r46 = <androidx.work.impl.Migration_15_16: androidx.work.impl.Migration_15_16 INSTANCE>;

        $r47 = (androidx.room.migration.Migration) $r46;

        r66[0] = $r47;

        $r48 = virtualinvoke $r45.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder addMigrations(androidx.room.migration.Migration[])>(r66);

        $r49 = virtualinvoke $r48.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase$Builder fallbackToDestructiveMigration()>();

        $r50 = virtualinvoke $r49.<androidx.room.RoomDatabase$Builder: androidx.room.RoomDatabase build()>();

        $r51 = (androidx.work.impl.WorkDatabase) $r50;

        return $r51;
    }

    private static final androidx.sqlite.db.SupportSQLiteOpenHelper create$lambda$0(android.content.Context, androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)
    {
        android.content.Context $r0;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration r1, $r11;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder r2, $r5, $r7, $r8;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion $r3;
        java.lang.String $r4;
        androidx.sqlite.db.SupportSQLiteOpenHelper$Callback $r6;
        androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory $r10;
        androidx.sqlite.db.SupportSQLiteOpenHelper $r12;

        $r0 := @parameter0: android.content.Context;

        r1 := @parameter1: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$context");

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "configuration");

        $r3 = <androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion Companion>;

        r2 = virtualinvoke $r3.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Companion: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder builder(android.content.Context)>($r0);

        $r4 = r1.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: java.lang.String name>;

        $r5 = virtualinvoke r2.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder name(java.lang.String)>($r4);

        $r6 = r1.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration: androidx.sqlite.db.SupportSQLiteOpenHelper$Callback callback>;

        $r7 = virtualinvoke $r5.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder callback(androidx.sqlite.db.SupportSQLiteOpenHelper$Callback)>($r6);

        $r8 = virtualinvoke $r7.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder noBackupDirectory(boolean)>(1);

        virtualinvoke $r8.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder allowDataLossOnRecovery(boolean)>(1);

        $r10 = new androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory;

        specialinvoke $r10.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory: void <init>()>();

        $r11 = virtualinvoke r2.<androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration$Builder: androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration build()>();

        $r12 = virtualinvoke $r10.<androidx.sqlite.db.framework.FrameworkSQLiteOpenHelperFactory: androidx.sqlite.db.SupportSQLiteOpenHelper create(androidx.sqlite.db.SupportSQLiteOpenHelper$Configuration)>($r11);

        return $r12;
    }

    public void <init>(kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.work.impl.WorkDatabase$Companion r0;
        kotlin.jvm.internal.DefaultConstructorMarker $r1;

        r0 := @this: androidx.work.impl.WorkDatabase$Companion;

        $r1 := @parameter0: kotlin.jvm.internal.DefaultConstructorMarker;

        specialinvoke r0.<androidx.work.impl.WorkDatabase$Companion: void <init>()>();

        return;
    }

