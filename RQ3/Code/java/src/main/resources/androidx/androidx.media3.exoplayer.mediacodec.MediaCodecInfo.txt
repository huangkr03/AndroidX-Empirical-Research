androidx.media3.exoplayer.mediacodec.MediaCodecInfo
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String TAG>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: int MAX_SUPPORTED_INSTANCES_UNKNOWN>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String codecMimeType>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean adaptive>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean tunneling>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean secure>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean hardwareAccelerated>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean softwareOnly>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean vendor>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isVideo>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: int COVERAGE_RESULT_YES>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: int COVERAGE_RESULT_NO>
<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: int COVERAGE_RESULT_NO_EMPTY_LIST>
    public static androidx.media3.exoplayer.mediacodec.MediaCodecInfo newInstance(java.lang.String, java.lang.String, java.lang.String, android.media.MediaCodecInfo$CodecCapabilities, boolean, boolean, boolean, boolean, boolean)
    {
        java.lang.String r0, r1, r2;
        android.media.MediaCodecInfo$CodecCapabilities r3;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z12, $z13, $z14;
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.media.MediaCodecInfo$CodecCapabilities;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        z3 := @parameter7: boolean;

        z4 := @parameter8: boolean;

        $r4 = new androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        if z3 != 0 goto label1;

        if r3 == null goto label1;

        $z7 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isAdaptive(android.media.MediaCodecInfo$CodecCapabilities)>(r3);

        if $z7 == 0 goto label1;

        $z8 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean needsDisableAdaptationWorkaround(java.lang.String)>(r0);

        if $z8 != 0 goto label1;

        $z12 = 1;

        goto label2;

     label1:
        $z12 = 0;

     label2:
        if r3 == null goto label3;

        $z6 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isTunneling(android.media.MediaCodecInfo$CodecCapabilities)>(r3);

        if $z6 == 0 goto label3;

        $z13 = 1;

        goto label4;

     label3:
        $z13 = 0;

     label4:
        if z4 != 0 goto label5;

        if r3 == null goto label6;

        $z5 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isSecure(android.media.MediaCodecInfo$CodecCapabilities)>(r3);

        if $z5 == 0 goto label6;

     label5:
        $z14 = 1;

        goto label7;

     label6:
        $z14 = 0;

     label7:
        specialinvoke $r4.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,android.media.MediaCodecInfo$CodecCapabilities,boolean,boolean,boolean,boolean,boolean,boolean)>(r0, r1, r2, r3, z0, z1, z2, $z12, $z13, $z14);

        return $r4;
    }

    void <init>(java.lang.String, java.lang.String, java.lang.String, android.media.MediaCodecInfo$CodecCapabilities, boolean, boolean, boolean, boolean, boolean, boolean)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        java.lang.String r1, r2, r3, $r6;
        android.media.MediaCodecInfo$CodecCapabilities r4;
        boolean z0, z1, z2, z3, z4, z5, $z6;
        java.lang.Object $r5;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.media.MediaCodecInfo$CodecCapabilities;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        z3 := @parameter7: boolean;

        z4 := @parameter8: boolean;

        z5 := @parameter9: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = staticinvoke <androidx.media3.common.util.Assertions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (java.lang.String) $r5;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name> = $r6;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType> = r2;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String codecMimeType> = r3;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities> = r4;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean hardwareAccelerated> = z0;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean softwareOnly> = z1;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean vendor> = z2;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean adaptive> = z3;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean tunneling> = z4;

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean secure> = z5;

        $z6 = staticinvoke <androidx.media3.common.MimeTypes: boolean isVideo(java.lang.String)>(r2);

        r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isVideo> = $z6;

        return;
    }

    public java.lang.String toString()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        java.lang.String $r1;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        return $r1;
    }

    public android.media.MediaCodecInfo$CodecProfileLevel[] getProfileLevels()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        android.media.MediaCodecInfo$CodecCapabilities $r1, $r2, $r4;
        android.media.MediaCodecInfo$CodecProfileLevel[] $r3, $r5;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        if $r1 == null goto label1;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        $r3 = $r2.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

        if $r3 != null goto label2;

     label1:
        $r5 = newarray (android.media.MediaCodecInfo$CodecProfileLevel)[0];

        goto label3;

     label2:
        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        $r5 = $r4.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

     label3:
        return $r5;
    }

    public int getMaxSupportedInstances()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        int $i0, $i1;
        android.media.MediaCodecInfo$CodecCapabilities $r1, $r2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 23 goto label1;

        $r1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        if $r1 != null goto label2;

     label1:
        return -1;

     label2:
        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        $i1 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: int getMaxSupportedInstancesV23(android.media.MediaCodecInfo$CodecCapabilities)>($r2);

        return $i1;
    }

    public boolean isFormatSupported(androidx.media3.common.Format) throws androidx.media3.exoplayer.mediacodec.MediaCodecUtil$DecoderQueryException
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        androidx.media3.common.Format r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        float $f0;
        double $d0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: androidx.media3.common.Format;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isSampleMimeTypeSupported(androidx.media3.common.Format)>(r1);

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $z2 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isCodecProfileAndLevelSupported(androidx.media3.common.Format,boolean)>(r1, 1);

        if $z2 != 0 goto label02;

        return 0;

     label02:
        $z3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isVideo>;

        if $z3 == 0 goto label09;

        $i5 = r1.<androidx.media3.common.Format: int width>;

        if $i5 <= 0 goto label03;

        $i6 = r1.<androidx.media3.common.Format: int height>;

        if $i6 > 0 goto label04;

     label03:
        return 1;

     label04:
        $i7 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i7 < 21 goto label05;

        $i15 = r1.<androidx.media3.common.Format: int width>;

        $i14 = r1.<androidx.media3.common.Format: int height>;

        $f0 = r1.<androidx.media3.common.Format: float frameRate>;

        $d0 = (double) $f0;

        $z6 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isVideoSizeAndRateSupportedV21(int,int,double)>($i15, $i14, $d0);

        return $z6;

     label05:
        $i9 = r1.<androidx.media3.common.Format: int width>;

        $i8 = r1.<androidx.media3.common.Format: int height>;

        $i10 = $i9 * $i8;

        $i11 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: int maxH264DecodableFrameSize()>();

        if $i10 > $i11 goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        z0 = $z7;

        if z0 != 0 goto label08;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("legacyFrameSize, ");

        $i12 = r1.<androidx.media3.common.Format: int width>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i13 = r1.<androidx.media3.common.Format: int height>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>($r7);

     label08:
        return z0;

     label09:
        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 21 goto label11;

        $i1 = r1.<androidx.media3.common.Format: int sampleRate>;

        if $i1 == -1 goto label10;

        $i4 = r1.<androidx.media3.common.Format: int sampleRate>;

        $z5 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isAudioSampleRateSupportedV21(int)>($i4);

        if $z5 == 0 goto label12;

     label10:
        $i2 = r1.<androidx.media3.common.Format: int channelCount>;

        if $i2 == -1 goto label11;

        $i3 = r1.<androidx.media3.common.Format: int channelCount>;

        $z4 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isAudioChannelCountSupportedV21(int)>($i3);

        if $z4 == 0 goto label12;

     label11:
        $z8 = 1;

        goto label13;

     label12:
        $z8 = 0;

     label13:
        return $z8;
    }

    public boolean isFormatFunctionallySupported(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        androidx.media3.common.Format r1;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: androidx.media3.common.Format;

        $z0 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isSampleMimeTypeSupported(androidx.media3.common.Format)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isCodecProfileAndLevelSupported(androidx.media3.common.Format,boolean)>(r1, 0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean isSampleMimeTypeSupported(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        androidx.media3.common.Format r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: androidx.media3.common.Format;

        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $r2 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $r5 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: java.lang.String getAlternativeCodecMimeType(androidx.media3.common.Format)>(r1);

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isCodecProfileAndLevelSupported(androidx.media3.common.Format, boolean)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        androidx.media3.common.Format r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.util.Pair r2;
        android.media.MediaCodecInfo$CodecProfileLevel[] r3, r27;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        android.media.MediaCodecInfo$CodecProfileLevel r4;
        java.lang.Object $r5, $r7;
        java.lang.Integer $r6, $r8;
        java.lang.String $r9, $r10, $r13, $r16, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r26;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r17;
        android.media.MediaCodecInfo$CodecCapabilities $r22;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: androidx.media3.common.Format;

        z0 := @parameter1: boolean;

        r2 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: android.util.Pair getCodecProfileAndLevel(androidx.media3.common.Format)>(r1);

        if r2 != null goto label1;

        return 1;

     label1:
        $r5 = r2.<android.util.Pair: java.lang.Object first>;

        $r6 = (java.lang.Integer) $r5;

        i5 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r7 = r2.<android.util.Pair: java.lang.Object second>;

        $r8 = (java.lang.Integer) $r7;

        i6 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r10 = "video/dolby-vision";

        $r9 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

        $r24 = "video/avc";

        $r23 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $z4 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z4 == 0 goto label2;

        i5 = 8;

        i6 = 0;

        goto label3;

     label2:
        $r26 = "video/hevc";

        $r25 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $z5 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z5 == 0 goto label3;

        i5 = 2;

        i6 = 0;

     label3:
        $z6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isVideo>;

        if $z6 != 0 goto label4;

        if i5 == 42 goto label4;

        return 1;

     label4:
        r27 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecProfileLevel[] getProfileLevels()>();

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 > 23 goto label5;

        $r21 = "video/x-vnd.on2.vp9";

        $r20 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z3 == 0 goto label5;

        $i4 = lengthof r27;

        if $i4 != 0 goto label5;

        $r22 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        r27 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecProfileLevel[] estimateLegacyVp9ProfileLevels(android.media.MediaCodecInfo$CodecCapabilities)>($r22);

     label5:
        r3 = r27;

        i0 = lengthof r3;

        i7 = 0;

     label6:
        if i7 >= i0 goto label9;

        r4 = r3[i7];

        $i2 = r4.<android.media.MediaCodecInfo$CodecProfileLevel: int profile>;

        if $i2 != i5 goto label8;

        $i3 = r4.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        if $i3 >= i6 goto label7;

        if z0 != 0 goto label8;

     label7:
        $r19 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $z2 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean needsProfileExcludedWorkaround(java.lang.String,int)>($r19, i5);

        if $z2 != 0 goto label8;

        return 1;

     label8:
        i7 = i7 + 1;

        goto label6;

     label9:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("codec.profileLevel, ");

        $r13 = r1.<androidx.media3.common.Format: java.lang.String codecs>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r16 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String codecMimeType>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>($r18);

        return 0;
    }

    public boolean isHdr10PlusOutOfBandMetadataSupported()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        android.media.MediaCodecInfo$CodecProfileLevel[] r1;
        int i0, $i1, $i2, i3;
        android.media.MediaCodecInfo$CodecProfileLevel r2;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 29 goto label3;

        $r4 = "video/x-vnd.on2.vp9";

        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        r1 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecProfileLevel[] getProfileLevels()>();

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r2 = r1[i3];

        $i2 = r2.<android.media.MediaCodecInfo$CodecProfileLevel: int profile>;

        if $i2 != 16384 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isSeamlessAdaptationSupported(androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        androidx.media3.common.Format r1;
        android.util.Pair r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: androidx.media3.common.Format;

        $z0 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isVideo>;

        if $z0 == 0 goto label1;

        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean adaptive>;

        return $z1;

     label1:
        r2 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: android.util.Pair getCodecProfileAndLevel(androidx.media3.common.Format)>(r1);

        if r2 == null goto label2;

        $r3 = r2.<android.util.Pair: java.lang.Object first>;

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i0 != 42 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean isSeamlessAdaptationSupported(androidx.media3.common.Format, androidx.media3.common.Format, boolean)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        androidx.media3.common.Format r1, r7;
        boolean z0, $z1;
        int i0;
        androidx.media3.common.ColorInfo $r2, $r3, $r5;
        androidx.media3.common.Format$Builder $r4, $r6;
        androidx.media3.exoplayer.DecoderReuseEvaluation $r8;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: androidx.media3.common.Format;

        r7 := @parameter1: androidx.media3.common.Format;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        $r2 = r1.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        if $r2 == null goto label1;

        $r3 = r7.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        if $r3 != null goto label1;

        $r4 = virtualinvoke r7.<androidx.media3.common.Format: androidx.media3.common.Format$Builder buildUpon()>();

        $r5 = r1.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $r6 = virtualinvoke $r4.<androidx.media3.common.Format$Builder: androidx.media3.common.Format$Builder setColorInfo(androidx.media3.common.ColorInfo)>($r5);

        r7 = virtualinvoke $r6.<androidx.media3.common.Format$Builder: androidx.media3.common.Format build()>();

     label1:
        $r8 = virtualinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: androidx.media3.exoplayer.DecoderReuseEvaluation canReuseCodec(androidx.media3.common.Format,androidx.media3.common.Format)>(r1, r7);

        i0 = $r8.<androidx.media3.exoplayer.DecoderReuseEvaluation: int result>;

        if i0 == 2 goto label2;

        if i0 != 3 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public androidx.media3.exoplayer.DecoderReuseEvaluation canReuseCodec(androidx.media3.common.Format, androidx.media3.common.Format)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        androidx.media3.common.Format r1, r2;
        android.util.Pair r3, r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String $r5, $r6, $r7, $r9, $r11, $r12, $r13, $r19, $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        androidx.media3.exoplayer.DecoderReuseEvaluation $r8, $r10, $r18, $r21;
        java.lang.Object $r14, $r16;
        java.lang.Integer $r15, $r17;
        short s14;
        androidx.media3.common.ColorInfo $r25, $r26;
        byte $b15;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: androidx.media3.common.Format;

        r2 := @parameter1: androidx.media3.common.Format;

        s14 = 0;

        $r6 = r1.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $r5 = r2.<androidx.media3.common.Format: java.lang.String sampleMimeType>;

        $z0 = staticinvoke <androidx.media3.common.util.Util: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z0 != 0 goto label01;

        s14 = s14 | 8;

     label01:
        $z1 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isVideo>;

        if $z1 == 0 goto label09;

        $i9 = r1.<androidx.media3.common.Format: int rotationDegrees>;

        $i8 = r2.<androidx.media3.common.Format: int rotationDegrees>;

        if $i9 == $i8 goto label02;

        s14 = s14 | 1024;

     label02:
        $z4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean adaptive>;

        if $z4 != 0 goto label04;

        $i11 = r1.<androidx.media3.common.Format: int width>;

        $i10 = r2.<androidx.media3.common.Format: int width>;

        if $i11 != $i10 goto label03;

        $i13 = r1.<androidx.media3.common.Format: int height>;

        $i12 = r2.<androidx.media3.common.Format: int height>;

        if $i13 == $i12 goto label04;

     label03:
        s14 = s14 | 512;

     label04:
        $r25 = r1.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $r26 = r2.<androidx.media3.common.Format: androidx.media3.common.ColorInfo colorInfo>;

        $z8 = staticinvoke <androidx.media3.common.util.Util: boolean areEqual(java.lang.Object,java.lang.Object)>($r25, $r26);

        if $z8 != 0 goto label05;

        s14 = s14 | 2048;

     label05:
        $r20 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $z5 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean needsAdaptationReconfigureWorkaround(java.lang.String)>($r20);

        if $z5 == 0 goto label06;

        $z7 = virtualinvoke r1.<androidx.media3.common.Format: boolean initializationDataEquals(androidx.media3.common.Format)>(r2);

        if $z7 != 0 goto label06;

        s14 = s14 | 2;

     label06:
        if s14 != 0 goto label16;

        $r21 = new androidx.media3.exoplayer.DecoderReuseEvaluation;

        $r22 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $z6 = virtualinvoke r1.<androidx.media3.common.Format: boolean initializationDataEquals(androidx.media3.common.Format)>(r2);

        if $z6 == 0 goto label07;

        $b15 = 3;

        goto label08;

     label07:
        $b15 = 2;

     label08:
        specialinvoke $r21.<androidx.media3.exoplayer.DecoderReuseEvaluation: void <init>(java.lang.String,androidx.media3.common.Format,androidx.media3.common.Format,int,int)>($r22, r1, r2, $b15, 0);

        return $r21;

     label09:
        $i3 = r1.<androidx.media3.common.Format: int channelCount>;

        $i2 = r2.<androidx.media3.common.Format: int channelCount>;

        if $i3 == $i2 goto label10;

        s14 = s14 | 4096;

     label10:
        $i5 = r1.<androidx.media3.common.Format: int sampleRate>;

        $i4 = r2.<androidx.media3.common.Format: int sampleRate>;

        if $i5 == $i4 goto label11;

        s14 = s14 | 8192;

     label11:
        $i7 = r1.<androidx.media3.common.Format: int pcmEncoding>;

        $i6 = r2.<androidx.media3.common.Format: int pcmEncoding>;

        if $i7 == $i6 goto label12;

        s14 = s14 | 16384;

     label12:
        if s14 != 0 goto label13;

        $r13 = "audio/mp4a-latm";

        $r12 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label13;

        r3 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: android.util.Pair getCodecProfileAndLevel(androidx.media3.common.Format)>(r1);

        r4 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecUtil: android.util.Pair getCodecProfileAndLevel(androidx.media3.common.Format)>(r2);

        if r3 == null goto label13;

        if r4 == null goto label13;

        $r14 = r3.<android.util.Pair: java.lang.Object first>;

        $r15 = (java.lang.Integer) $r14;

        i0 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        $r16 = r4.<android.util.Pair: java.lang.Object first>;

        $r17 = (java.lang.Integer) $r16;

        i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        if i0 != 42 goto label13;

        if i1 != 42 goto label13;

        $r18 = new androidx.media3.exoplayer.DecoderReuseEvaluation;

        $r19 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        specialinvoke $r18.<androidx.media3.exoplayer.DecoderReuseEvaluation: void <init>(java.lang.String,androidx.media3.common.Format,androidx.media3.common.Format,int,int)>($r19, r1, r2, 3, 0);

        return $r18;

     label13:
        $z9 = virtualinvoke r1.<androidx.media3.common.Format: boolean initializationDataEquals(androidx.media3.common.Format)>(r2);

        if $z9 != 0 goto label14;

        s14 = s14 | 32;

     label14:
        $r7 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $z2 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean needsAdaptationFlushWorkaround(java.lang.String)>($r7);

        if $z2 == 0 goto label15;

        s14 = s14 | 2;

     label15:
        if s14 != 0 goto label16;

        $r10 = new androidx.media3.exoplayer.DecoderReuseEvaluation;

        $r11 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        specialinvoke $r10.<androidx.media3.exoplayer.DecoderReuseEvaluation: void <init>(java.lang.String,androidx.media3.common.Format,androidx.media3.common.Format,int,int)>($r11, r1, r2, 1, 0);

        return $r10;

     label16:
        $r8 = new androidx.media3.exoplayer.DecoderReuseEvaluation;

        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        specialinvoke $r8.<androidx.media3.exoplayer.DecoderReuseEvaluation: void <init>(java.lang.String,androidx.media3.common.Format,androidx.media3.common.Format,int,int)>($r9, r1, r2, 0, s14);

        return $r8;
    }

    public boolean isVideoSizeAndRateSupportedV21(int, int, double)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        int i0, i1, i2, $i3;
        double d0;
        android.media.MediaCodecInfo$VideoCapabilities r1;
        android.media.MediaCodecInfo$CodecCapabilities $r2, $r3;
        boolean $z0, $z1, $z2;
        java.lang.String $r4, $r12, $r20, $r28;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        if $r2 != null goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>("sizeAndRate.caps");

        return 0;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        r1 = virtualinvoke $r3.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()>();

        if r1 != null goto label2;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>("sizeAndRate.vCaps");

        return 0;

     label2:
        $i3 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i3 < 29 goto label4;

        i2 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo$Api29: int areResolutionAndFrameRateCovered(android.media.MediaCodecInfo$VideoCapabilities,int,int,double)>(r1, i0, i1, d0);

        if i2 != 2 goto label3;

        return 1;

     label3:
        if i2 != 1 goto label4;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sizeAndRate.cover, ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>($r20);

        return 0;

     label4:
        $z0 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean areSizeAndRateSupportedV21(android.media.MediaCodecInfo$VideoCapabilities,int,int,double)>(r1, i0, i1, d0);

        if $z0 != 0 goto label7;

        if i0 >= i1 goto label5;

        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $z1 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean needsRotatedVerticalResolutionWorkaround(java.lang.String)>($r4);

        if $z1 == 0 goto label5;

        $z2 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean areSizeAndRateSupportedV21(android.media.MediaCodecInfo$VideoCapabilities,int,int,double)>(r1, i1, i0, d0);

        if $z2 != 0 goto label6;

     label5:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sizeAndRate.support, ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>($r28);

        return 0;

     label6:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sizeAndRate.rotated, ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logAssumedSupport(java.lang.String)>($r12);

     label7:
        return 1;
    }

    public android.graphics.Point alignVideoSizeV21(int, int)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        int i0, i1;
        android.media.MediaCodecInfo$VideoCapabilities r1;
        android.media.MediaCodecInfo$CodecCapabilities $r2, $r3;
        android.graphics.Point $r4;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        r1 = virtualinvoke $r3.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()>();

        if r1 != null goto label2;

        return null;

     label2:
        $r4 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.graphics.Point alignVideoSizeV21(android.media.MediaCodecInfo$VideoCapabilities,int,int)>(r1, i0, i1);

        return $r4;
    }

    public boolean isAudioSampleRateSupportedV21(int)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        int i0;
        android.media.MediaCodecInfo$AudioCapabilities r1;
        android.media.MediaCodecInfo$CodecCapabilities $r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        if $r2 != null goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>("sampleRate.caps");

        return 0;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        r1 = virtualinvoke $r3.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities getAudioCapabilities()>();

        if r1 != null goto label2;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>("sampleRate.aCaps");

        return 0;

     label2:
        $z0 = virtualinvoke r1.<android.media.MediaCodecInfo$AudioCapabilities: boolean isSampleRateSupported(int)>(i0);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sampleRate.support, ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>($r7);

        return 0;

     label3:
        return 1;
    }

    public boolean isAudioChannelCountSupportedV21(int)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        int i0, i1, $i2;
        android.media.MediaCodecInfo$AudioCapabilities r1;
        android.media.MediaCodecInfo$CodecCapabilities $r2, $r3;
        java.lang.String $r4, $r5, $r9;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        i0 := @parameter0: int;

        $r2 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        if $r2 != null goto label1;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>("channelCount.caps");

        return 0;

     label1:
        $r3 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities capabilities>;

        r1 = virtualinvoke $r3.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities getAudioCapabilities()>();

        if r1 != null goto label2;

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>("channelCount.aCaps");

        return 0;

     label2:
        $r4 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $r5 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $i2 = virtualinvoke r1.<android.media.MediaCodecInfo$AudioCapabilities: int getMaxInputChannelCount()>();

        i1 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: int adjustMaxInputChannelCount(java.lang.String,java.lang.String,int)>($r4, $r5, $i2);

        if i1 >= i0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("channelCount.support, ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: void logNoSupport(java.lang.String)>($r9);

        return 0;

     label3:
        return 1;
    }

    private void logNoSupport(java.lang.String)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        java.lang.String r1, $r6, $r9, $r12, $r15;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NoSupport [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] [");

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] [");

        $r12 = <androidx.media3.common.util.Util: java.lang.String DEVICE_DEBUG_INFO>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void d(java.lang.String,java.lang.String)>("MediaCodecInfo", $r15);

        return;
    }

    private void logAssumedSupport(java.lang.String)
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo r0;
        java.lang.String r1, $r6, $r9, $r12, $r15;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AssumedSupport [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] [");

        $r6 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String name>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = r0.<androidx.media3.exoplayer.mediacodec.MediaCodecInfo: java.lang.String mimeType>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] [");

        $r12 = <androidx.media3.common.util.Util: java.lang.String DEVICE_DEBUG_INFO>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void d(java.lang.String,java.lang.String)>("MediaCodecInfo", $r15);

        return;
    }

    private static int adjustMaxInputChannelCount(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r23;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        byte b2;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if i0 > 1 goto label1;

        $i1 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i1 < 26 goto label2;

        if i0 <= 0 goto label2;

     label1:
        return i0;

     label2:
        $r2 = "audio/mpeg";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r3 = "audio/3gpp";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        $r4 = "audio/amr-wb";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label3;

        $r5 = "audio/mp4a-latm";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label3;

        $r6 = "audio/vorbis";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 != 0 goto label3;

        $r7 = "audio/opus";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 != 0 goto label3;

        $r8 = "audio/raw";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 != 0 goto label3;

        $r9 = "audio/flac";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z7 != 0 goto label3;

        $r10 = "audio/g711-alaw";

        $z8 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z8 != 0 goto label3;

        $r11 = "audio/g711-mlaw";

        $z9 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z9 != 0 goto label3;

        $r12 = "audio/gsm";

        $z10 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z10 == 0 goto label4;

     label3:
        return i0;

     label4:
        $r13 = "audio/ac3";

        $z11 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z11 == 0 goto label5;

        b2 = 6;

        goto label7;

     label5:
        $r14 = "audio/eac3";

        $z12 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z12 == 0 goto label6;

        b2 = 16;

        goto label7;

     label6:
        b2 = 30;

     label7:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AssumedMaxChannelAdjustment: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", [");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <androidx.media3.common.util.Log: void w(java.lang.String,java.lang.String)>("MediaCodecInfo", $r23);

        return b2;
    }

    private static boolean isAdaptive(android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.media.MediaCodecInfo$CodecCapabilities;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 19 goto label1;

        $z0 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isAdaptiveV19(android.media.MediaCodecInfo$CodecCapabilities)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean isAdaptiveV19(android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        boolean $z0;

        r0 := @parameter0: android.media.MediaCodecInfo$CodecCapabilities;

        $z0 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureSupported(java.lang.String)>("adaptive-playback");

        return $z0;
    }

    private static boolean isTunneling(android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.media.MediaCodecInfo$CodecCapabilities;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 21 goto label1;

        $z0 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isTunnelingV21(android.media.MediaCodecInfo$CodecCapabilities)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean isTunnelingV21(android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        boolean $z0;

        r0 := @parameter0: android.media.MediaCodecInfo$CodecCapabilities;

        $z0 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureSupported(java.lang.String)>("tunneled-playback");

        return $z0;
    }

    private static boolean isSecure(android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        int $i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.media.MediaCodecInfo$CodecCapabilities;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 < 21 goto label1;

        $z0 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean isSecureV21(android.media.MediaCodecInfo$CodecCapabilities)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean isSecureV21(android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        boolean $z0;

        r0 := @parameter0: android.media.MediaCodecInfo$CodecCapabilities;

        $z0 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureSupported(java.lang.String)>("secure-playback");

        return $z0;
    }

    private static boolean areSizeAndRateSupportedV21(android.media.MediaCodecInfo$VideoCapabilities, int, int, double)
    {
        android.media.MediaCodecInfo$VideoCapabilities r0;
        double d0, d1;
        android.graphics.Point r1;
        byte $b0, $b1;
        boolean $z0, $z1;
        int i2, i3, i4, i5;

        r0 := @parameter0: android.media.MediaCodecInfo$VideoCapabilities;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        d0 := @parameter3: double;

        r1 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: android.graphics.Point alignVideoSizeV21(android.media.MediaCodecInfo$VideoCapabilities,int,int)>(r0, i2, i3);

        i4 = r1.<android.graphics.Point: int x>;

        i5 = r1.<android.graphics.Point: int y>;

        $b0 = d0 cmpl -1.0;

        if $b0 == 0 goto label1;

        $b1 = d0 cmpg 1.0;

        if $b1 >= 0 goto label2;

     label1:
        $z0 = virtualinvoke r0.<android.media.MediaCodecInfo$VideoCapabilities: boolean isSizeSupported(int,int)>(i4, i5);

        return $z0;

     label2:
        d1 = staticinvoke <java.lang.Math: double floor(double)>(d0);

        $z1 = virtualinvoke r0.<android.media.MediaCodecInfo$VideoCapabilities: boolean areSizeAndRateSupported(int,int,double)>(i4, i5, d1);

        return $z1;
    }

    private static android.graphics.Point alignVideoSizeV21(android.media.MediaCodecInfo$VideoCapabilities, int, int)
    {
        android.media.MediaCodecInfo$VideoCapabilities r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        android.graphics.Point $r1;

        r0 := @parameter0: android.media.MediaCodecInfo$VideoCapabilities;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r0.<android.media.MediaCodecInfo$VideoCapabilities: int getWidthAlignment()>();

        i3 = virtualinvoke r0.<android.media.MediaCodecInfo$VideoCapabilities: int getHeightAlignment()>();

        $r1 = new android.graphics.Point;

        $i4 = staticinvoke <androidx.media3.common.util.Util: int ceilDivide(int,int)>(i0, i2);

        $i5 = $i4 * i2;

        $i6 = staticinvoke <androidx.media3.common.util.Util: int ceilDivide(int,int)>(i1, i3);

        $i7 = $i6 * i3;

        specialinvoke $r1.<android.graphics.Point: void <init>(int,int)>($i5, $i7);

        return $r1;
    }

    private static int getMaxSupportedInstancesV23(android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        int $i0;

        r0 := @parameter0: android.media.MediaCodecInfo$CodecCapabilities;

        $i0 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: int getMaxSupportedInstances()>();

        return $i0;
    }

    private static android.media.MediaCodecInfo$CodecProfileLevel[] estimateLegacyVp9ProfileLevels(android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$CodecProfileLevel r1, $r6;
        android.util.Range $r2;
        java.lang.Comparable $r3;
        java.lang.Integer $r4;
        int i0;
        android.media.MediaCodecInfo$VideoCapabilities r5;
        short s1;
        android.media.MediaCodecInfo$CodecProfileLevel[] $r7;

        r0 := @parameter0: android.media.MediaCodecInfo$CodecCapabilities;

        i0 = 0;

        if r0 == null goto label01;

        r5 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()>();

        if r5 == null goto label01;

        $r2 = virtualinvoke r5.<android.media.MediaCodecInfo$VideoCapabilities: android.util.Range getBitrateRange()>();

        $r3 = virtualinvoke $r2.<android.util.Range: java.lang.Comparable getUpper()>();

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label01:
        if i0 < 180000000 goto label02;

        s1 = 1024;

        goto label12;

     label02:
        if i0 < 120000000 goto label03;

        s1 = 512;

        goto label12;

     label03:
        if i0 < 60000000 goto label04;

        s1 = 256;

        goto label12;

     label04:
        if i0 < 30000000 goto label05;

        s1 = 128;

        goto label12;

     label05:
        if i0 < 18000000 goto label06;

        s1 = 64;

        goto label12;

     label06:
        if i0 < 12000000 goto label07;

        s1 = 32;

        goto label12;

     label07:
        if i0 < 7200000 goto label08;

        s1 = 16;

        goto label12;

     label08:
        if i0 < 3600000 goto label09;

        s1 = 8;

        goto label12;

     label09:
        if i0 < 1800000 goto label10;

        s1 = 4;

        goto label12;

     label10:
        if i0 < 800000 goto label11;

        s1 = 2;

        goto label12;

     label11:
        s1 = 1;

     label12:
        $r6 = new android.media.MediaCodecInfo$CodecProfileLevel;

        specialinvoke $r6.<android.media.MediaCodecInfo$CodecProfileLevel: void <init>()>();

        r1 = $r6;

        r1.<android.media.MediaCodecInfo$CodecProfileLevel: int profile> = 1;

        r1.<android.media.MediaCodecInfo$CodecProfileLevel: int level> = s1;

        $r7 = newarray (android.media.MediaCodecInfo$CodecProfileLevel)[1];

        $r7[0] = r1;

        return $r7;
    }

    private static boolean needsDisableAdaptationWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.String;

        $i0 = <androidx.media3.common.util.Util: int SDK_INT>;

        if $i0 > 22 goto label3;

        $r2 = "ODROID-XU3";

        $r1 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r6 = "Nexus 10";

        $r5 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label3;

     label1:
        $r3 = "OMX.Exynos.AVC.Decoder";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label2;

        $r4 = "OMX.Exynos.AVC.Decoder.secure";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    private static boolean needsAdaptationReconfigureWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r1 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("SM-T230");

        if $z0 == 0 goto label1;

        $r2 = "OMX.MARVELL.VIDEO.HW.CODA7542DECODER";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean needsAdaptationFlushWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "audio/opus";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        return $z0;
    }

    private static boolean needsRotatedVerticalResolutionWorkaround(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = "OMX.MTK.VIDEO.DECODER.HEVC";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r3 = "mcv5a";

        $r2 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static boolean needsProfileExcludedWorkaround(java.lang.String, int)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5;
        int i0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = "video/hevc";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        if 2 != i0 goto label2;

        $r3 = "sailfish";

        $r2 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r5 = "marlin";

        $r4 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private static boolean needsIgnorePerformancePointsWorkaround()
    {
        java.lang.String $r0, $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        $r0 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("sabrina");

        if $z0 != 0 goto label1;

        $r1 = <androidx.media3.common.util.Util: java.lang.String DEVICE>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("boreal");

        if $z1 != 0 goto label1;

        $r2 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("Lenovo TB-X605");

        if $z2 != 0 goto label1;

        $r3 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z3 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("Lenovo TB-X606");

        if $z3 != 0 goto label1;

        $r4 = <androidx.media3.common.util.Util: java.lang.String MODEL>;

        $z4 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("Lenovo TB-X616");

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean needsIgnorePerformancePointsWorkaround()>();

        return $z0;
    }

androidx.media3.exoplayer.mediacodec.MediaCodecInfo$Api29
    private void <init>()
    {
        androidx.media3.exoplayer.mediacodec.MediaCodecInfo$Api29 r0;

        r0 := @this: androidx.media3.exoplayer.mediacodec.MediaCodecInfo$Api29;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int areResolutionAndFrameRateCovered(android.media.MediaCodecInfo$VideoCapabilities, int, int, double)
    {
        android.media.MediaCodecInfo$VideoCapabilities r0;
        int i0, i1, $i2, $i3, i4;
        double d0;
        java.util.List r1;
        android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint r2, $r3, $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;

        r0 := @parameter0: android.media.MediaCodecInfo$VideoCapabilities;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        r1 = virtualinvoke r0.<android.media.MediaCodecInfo$VideoCapabilities: java.util.List getSupportedPerformancePoints()>();

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <androidx.media3.exoplayer.mediacodec.MediaCodecInfo: boolean access$000()>();

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = new android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint;

        $i2 = (int) d0;

        specialinvoke $r3.<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: void <init>(int,int,int)>(i0, i1, $i2);

        r2 = $r3;

        i4 = 0;

     label3:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if i4 >= $i3 goto label5;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        $r5 = (android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint) $r4;

        $z2 = virtualinvoke $r5.<android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint: boolean covers(android.media.MediaCodecInfo$VideoCapabilities$PerformancePoint)>(r2);

        if $z2 == 0 goto label4;

        return 2;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return 1;
    }

