androidx.media3.exoplayer.source.MediaPeriod
<androidx.media3.exoplayer.source.MediaPeriod: void prepare(androidx.media3.exoplayer.source.MediaPeriod$Callback,long)>
<androidx.media3.exoplayer.source.MediaPeriod: void maybeThrowPrepareError()>
<androidx.media3.exoplayer.source.MediaPeriod: androidx.media3.exoplayer.source.TrackGroupArray getTrackGroups()>
    public java.util.List getStreamKeys(java.util.List)
    {
        androidx.media3.exoplayer.source.MediaPeriod r0;
        java.util.List r1, $r2;

        r0 := @this: androidx.media3.exoplayer.source.MediaPeriod;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;
    }

<androidx.media3.exoplayer.source.MediaPeriod: long selectTracks(androidx.media3.exoplayer.trackselection.ExoTrackSelection[],boolean[],androidx.media3.exoplayer.source.SampleStream[],boolean[],long)>
<androidx.media3.exoplayer.source.MediaPeriod: void discardBuffer(long,boolean)>
<androidx.media3.exoplayer.source.MediaPeriod: long readDiscontinuity()>
<androidx.media3.exoplayer.source.MediaPeriod: long seekToUs(long)>
<androidx.media3.exoplayer.source.MediaPeriod: long getAdjustedSeekPositionUs(long,androidx.media3.exoplayer.SeekParameters)>
<androidx.media3.exoplayer.source.MediaPeriod: long getBufferedPositionUs()>
<androidx.media3.exoplayer.source.MediaPeriod: long getNextLoadPositionUs()>
<androidx.media3.exoplayer.source.MediaPeriod: boolean continueLoading(long)>
<androidx.media3.exoplayer.source.MediaPeriod: boolean isLoading()>
<androidx.media3.exoplayer.source.MediaPeriod: void reevaluateBuffer(long)>
androidx.media3.exoplayer.source.MediaPeriod$Callback
<androidx.media3.exoplayer.source.MediaPeriod$Callback: void onPrepared(androidx.media3.exoplayer.source.MediaPeriod)>
