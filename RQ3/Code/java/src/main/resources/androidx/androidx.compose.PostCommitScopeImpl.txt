androidx.compose.PostCommitScopeImpl
<androidx.compose.PostCommitScopeImpl: kotlin.jvm.functions.Function1 onCommit>
<androidx.compose.PostCommitScopeImpl: kotlin.jvm.functions.Function0 disposeCallback>
<androidx.compose.PostCommitScopeImpl: boolean hasRun>
    public void <init>(kotlin.jvm.functions.Function1)
    {
        androidx.compose.PostCommitScopeImpl r0;
        kotlin.jvm.functions.Function1 r1;
        kotlin.jvm.functions.Function0 $r2;

        r0 := @this: androidx.compose.PostCommitScopeImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function1;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "onCommit");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.PostCommitScopeImpl: kotlin.jvm.functions.Function1 onCommit> = r1;

        $r2 = staticinvoke <androidx.compose.EffectsKt: kotlin.jvm.functions.Function0 access$getEmptyDispose$cp$s535325163()>();

        r0.<androidx.compose.PostCommitScopeImpl: kotlin.jvm.functions.Function0 disposeCallback> = $r2;

        return;
    }

    public final kotlin.jvm.functions.Function1 getOnCommit$compose_runtime_release()
    {
        androidx.compose.PostCommitScopeImpl r0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.PostCommitScopeImpl;

        $r1 = r0.<androidx.compose.PostCommitScopeImpl: kotlin.jvm.functions.Function1 onCommit>;

        return $r1;
    }

    public void onDispose(kotlin.jvm.functions.Function0)
    {
        androidx.compose.PostCommitScopeImpl r0;
        kotlin.jvm.functions.Function0 r1, $r2, $r3;
        boolean z0, z1, $z3, z4;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, r7;
        java.lang.Throwable $r6;

        r0 := @this: androidx.compose.PostCommitScopeImpl;

        r1 := @parameter0: kotlin.jvm.functions.Function0;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "callback");

        $r2 = r0.<androidx.compose.PostCommitScopeImpl: kotlin.jvm.functions.Function0 disposeCallback>;

        $r3 = staticinvoke <androidx.compose.EffectsKt: kotlin.jvm.functions.Function0 access$getEmptyDispose$cp$s535325163()>();

        if $r2 != $r3 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        z1 = 0;

        z4 = 0;

        if z0 != 0 goto label3;

        r7 = "onDispose(...) should only be called once";

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        $r6 = (java.lang.Throwable) $r4;

        throw $r6;

     label3:
        r0.<androidx.compose.PostCommitScopeImpl: kotlin.jvm.functions.Function0 disposeCallback> = r1;

        return;
    }

    public void doFrame(long)
    {
        androidx.compose.PostCommitScopeImpl r0;
        long l0;
        kotlin.jvm.functions.Function1 $r1;

        r0 := @this: androidx.compose.PostCommitScopeImpl;

        l0 := @parameter0: long;

        r0.<androidx.compose.PostCommitScopeImpl: boolean hasRun> = 1;

        $r1 = virtualinvoke r0.<androidx.compose.PostCommitScopeImpl: kotlin.jvm.functions.Function1 getOnCommit$compose_runtime_release()>();

        interfaceinvoke $r1.<kotlin.jvm.functions.Function1: java.lang.Object invoke(java.lang.Object)>(r0);

        return;
    }

    public void onEnter()
    {
        androidx.compose.PostCommitScopeImpl r0;
        android.view.Choreographer$FrameCallback $r1;
        androidx.compose.Choreographer $r2;

        r0 := @this: androidx.compose.PostCommitScopeImpl;

        $r2 = <androidx.compose.Choreographer: androidx.compose.Choreographer INSTANCE>;

        $r1 = (android.view.Choreographer$FrameCallback) r0;

        virtualinvoke $r2.<androidx.compose.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r1);

        return;
    }

    public void onLeave()
    {
        androidx.compose.PostCommitScopeImpl r0;
        boolean $z0;
        android.view.Choreographer$FrameCallback $r1;
        androidx.compose.Choreographer $r2;
        kotlin.jvm.functions.Function0 $r3;

        r0 := @this: androidx.compose.PostCommitScopeImpl;

        $z0 = r0.<androidx.compose.PostCommitScopeImpl: boolean hasRun>;

        if $z0 == 0 goto label1;

        $r3 = r0.<androidx.compose.PostCommitScopeImpl: kotlin.jvm.functions.Function0 disposeCallback>;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        goto label2;

     label1:
        $r2 = <androidx.compose.Choreographer: androidx.compose.Choreographer INSTANCE>;

        $r1 = (android.view.Choreographer$FrameCallback) r0;

        virtualinvoke $r2.<androidx.compose.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>($r1);

     label2:
        return;
    }

