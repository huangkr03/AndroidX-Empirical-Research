androidx.camera.camera2.interop.Camera2CameraControl
<androidx.camera.camera2.interop.Camera2CameraControl: java.lang.String TAG_KEY>
<androidx.camera.camera2.interop.Camera2CameraControl: boolean mIsActive>
<androidx.camera.camera2.interop.Camera2CameraControl: boolean mPendingUpdate>
<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCamera2CameraControlImpl>
<androidx.camera.camera2.interop.Camera2CameraControl: java.util.concurrent.Executor mExecutor>
<androidx.camera.camera2.interop.Camera2CameraControl: java.lang.Object mLock>
<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig$Builder mBuilder>
<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>
<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mCaptureResultListener>
    public void <init>(androidx.camera.camera2.internal.Camera2CameraControlImpl, java.util.concurrent.Executor)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl r1;
        java.util.concurrent.Executor r2;
        java.lang.Object $r3;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder $r4;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r5;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.camera.camera2.internal.Camera2CameraControlImpl;

        r2 := @parameter1: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: boolean mIsActive> = 0;

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: boolean mPendingUpdate> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.lang.Object mLock> = $r3;

        $r4 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke $r4.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig$Builder mBuilder> = $r4;

        $r5 = dynamicinvoke "onCaptureResult" <androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener (androidx.camera.camera2.interop.Camera2CameraControl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.interop.Camera2CameraControl: boolean lambda$new$0(android.hardware.camera2.TotalCaptureResult)>, methodtype: boolean __METHODTYPE__(android.hardware.camera2.TotalCaptureResult));

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mCaptureResultListener> = $r5;

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCamera2CameraControlImpl> = r1;

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.util.concurrent.Executor mExecutor> = r2;

        return;
    }

    public androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener getCaptureRequestListener()
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener $r1;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        $r1 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.internal.Camera2CameraControlImpl$CaptureResultListener mCaptureResultListener>;

        return $r1;
    }

    public static androidx.camera.camera2.interop.Camera2CameraControl 'from'(androidx.camera.core.CameraControl)
    {
        androidx.camera.core.CameraControl r0;
        boolean $z0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r1;
        androidx.camera.camera2.interop.Camera2CameraControl $r2;

        r0 := @parameter0: androidx.camera.core.CameraControl;

        $z0 = r0 instanceof androidx.camera.camera2.internal.Camera2CameraControlImpl;

        staticinvoke <androidx.core.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "CameraControl doesn\'t contain Camera2 implementation.");

        $r1 = (androidx.camera.camera2.internal.Camera2CameraControlImpl) r0;

        $r2 = virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraControlImpl: androidx.camera.camera2.interop.Camera2CameraControl getCamera2CameraControl()>();

        return $r2;
    }

    public com.google.common.util.concurrent.ListenableFuture setCaptureRequestOptions(androidx.camera.camera2.interop.CaptureRequestOptions)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.camera.camera2.interop.CaptureRequestOptions r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r2;
        com.google.common.util.concurrent.ListenableFuture $r3, $r4;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.camera.camera2.interop.CaptureRequestOptions;

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void clearCaptureRequestOptionsInternal()>();

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void addCaptureRequestOptionsInternal(androidx.camera.camera2.interop.CaptureRequestOptions)>(r1);

        $r2 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.interop.Camera2CameraControl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.interop.Camera2CameraControl: java.lang.Object lambda$setCaptureRequestOptions$2(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r3 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r2);

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r3);

        return $r4;
    }

    public com.google.common.util.concurrent.ListenableFuture addCaptureRequestOptions(androidx.camera.camera2.interop.CaptureRequestOptions)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.camera.camera2.interop.CaptureRequestOptions r1;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r2;
        com.google.common.util.concurrent.ListenableFuture $r3, $r4;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.camera.camera2.interop.CaptureRequestOptions;

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void addCaptureRequestOptionsInternal(androidx.camera.camera2.interop.CaptureRequestOptions)>(r1);

        $r2 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.interop.Camera2CameraControl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.interop.Camera2CameraControl: java.lang.Object lambda$addCaptureRequestOptions$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r3 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r2);

        $r4 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r3);

        return $r4;
    }

    public androidx.camera.camera2.interop.CaptureRequestOptions getCaptureRequestOptions()
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder $r4;
        androidx.camera.camera2.impl.Camera2ImplConfig $r5;
        androidx.camera.camera2.interop.CaptureRequestOptions$Builder $r6;
        androidx.camera.camera2.interop.CaptureRequestOptions $r7;
        androidx.camera.core.impl.Config r9;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        $r3 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig$Builder mBuilder>;

        $r5 = virtualinvoke $r4.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        r9 = (androidx.camera.core.impl.Config) $r5;

        $r6 = staticinvoke <androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions$Builder 'from'(androidx.camera.core.impl.Config)>(r9);

        $r7 = virtualinvoke $r6.<androidx.camera.camera2.interop.CaptureRequestOptions$Builder: androidx.camera.camera2.interop.CaptureRequestOptions build()>();

        exitmonitor r1;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public com.google.common.util.concurrent.ListenableFuture clearCaptureRequestOptions()
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Resolver $r1;
        com.google.common.util.concurrent.ListenableFuture $r2, $r3;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void clearCaptureRequestOptionsInternal()>();

        $r1 = dynamicinvoke "attachCompleter" <androidx.concurrent.futures.CallbackToFutureAdapter$Resolver (androidx.camera.camera2.interop.Camera2CameraControl)>(r0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.interop.Camera2CameraControl: java.lang.Object lambda$clearCaptureRequestOptions$6(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: java.lang.Object __METHODTYPE__(androidx.concurrent.futures.CallbackToFutureAdapter$Completer));

        $r2 = staticinvoke <androidx.concurrent.futures.CallbackToFutureAdapter: com.google.common.util.concurrent.ListenableFuture getFuture(androidx.concurrent.futures.CallbackToFutureAdapter$Resolver)>($r1);

        $r3 = staticinvoke <androidx.camera.core.impl.utils.futures.Futures: com.google.common.util.concurrent.ListenableFuture nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture)>($r2);

        return $r3;
    }

    public androidx.camera.camera2.impl.Camera2ImplConfig getCamera2ImplConfig()
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r12;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r4, $r9;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder $r5, $r7;
        androidx.camera.camera2.impl.Camera2ImplConfig $r6;
        androidx.camera.core.impl.MutableConfig $r8;
        androidx.camera.core.impl.Config$Option $r10;
        int $i0;
        java.lang.Integer $r11;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        $r3 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        if $r4 == null goto label2;

        $r7 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig$Builder mBuilder>;

        $r8 = virtualinvoke $r7.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r10 = <androidx.camera.camera2.impl.Camera2ImplConfig: androidx.camera.core.impl.Config$Option CAPTURE_REQUEST_TAG_OPTION>;

        $r9 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        $i0 = virtualinvoke $r9.<java.lang.Object: int hashCode()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r8.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>($r10, $r11);

     label2:
        $r5 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig$Builder mBuilder>;

        $r6 = virtualinvoke $r5.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.camera2.impl.Camera2ImplConfig build()>();

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void addCaptureRequestOptionsInternal(androidx.camera.camera2.interop.CaptureRequestOptions)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.camera.camera2.interop.CaptureRequestOptions r1;
        java.lang.Object r2, $r7, $r9, $r12;
        java.util.Iterator r3;
        androidx.camera.core.impl.Config$Option r4, r5;
        java.lang.Throwable r6, $r13;
        java.util.Set $r8;
        boolean $z0;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder $r10;
        androidx.camera.core.impl.MutableConfig $r11;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.camera.camera2.interop.CaptureRequestOptions;

        $r7 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label1:
        $r8 = virtualinvoke r1.<androidx.camera.camera2.interop.CaptureRequestOptions: java.util.Set listOptions()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (androidx.camera.core.impl.Config$Option) $r9;

        r5 = r4;

        $r10 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig$Builder mBuilder>;

        $r11 = virtualinvoke $r10.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: androidx.camera.core.impl.MutableConfig getMutableConfig()>();

        $r12 = virtualinvoke r1.<androidx.camera.camera2.interop.CaptureRequestOptions: java.lang.Object retrieveOption(androidx.camera.core.impl.Config$Option)>(r5);

        interfaceinvoke $r11.<androidx.camera.core.impl.MutableConfig: void insertOption(androidx.camera.core.impl.Config$Option,java.lang.Object)>(r5, $r12);

        goto label2;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        r6 = $r13;

        exitmonitor r2;

     label6:
        throw r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void clearCaptureRequestOptionsInternal()
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        androidx.camera.camera2.impl.Camera2ImplConfig$Builder $r4;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        $r3 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = new androidx.camera.camera2.impl.Camera2ImplConfig$Builder;

        specialinvoke $r4.<androidx.camera.camera2.impl.Camera2ImplConfig$Builder: void <init>()>();

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.impl.Camera2ImplConfig$Builder mBuilder> = $r4;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void updateConfig(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1, $r2, r4;
        boolean $z0;
        androidx.camera.core.CameraControl$OperationCanceledException $r3;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: boolean mPendingUpdate> = 1;

        r4 = null;

        $r2 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        if $r2 == null goto label1;

        r4 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

     label1:
        r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter> = r1;

        $z0 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: boolean mIsActive>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void updateSession()>();

     label2:
        if r4 == null goto label3;

        $r3 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r3.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("Camera2CameraControl was updated with new options.");

        virtualinvoke r4.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r3);

     label3:
        return;
    }

    private void updateSession()
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.camera.camera2.internal.Camera2CameraControlImpl $r1;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        $r1 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.camera.camera2.internal.Camera2CameraControlImpl mCamera2CameraControlImpl>;

        virtualinvoke $r1.<androidx.camera.camera2.internal.Camera2CameraControlImpl: void updateSessionConfig()>();

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: boolean mPendingUpdate> = 0;

        return;
    }

    public void setActive(boolean)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        boolean z0;
        java.util.concurrent.Executor $r1;
        java.lang.Runnable $r2;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        z0 := @parameter0: boolean;

        $r1 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.util.concurrent.Executor mExecutor>;

        $r2 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.interop.Camera2CameraControl,boolean)>(r0, z0) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.interop.Camera2CameraControl: void lambda$setActive$7(boolean)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

        return;
    }

    private void setActiveInternal(boolean)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        boolean z0, $z1, $z2, $z4;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r1, $r3;
        androidx.camera.core.CameraControl$OperationCanceledException $r2;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        z0 := @parameter0: boolean;

        $z1 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: boolean mIsActive>;

        if $z1 != z0 goto label1;

        return;

     label1:
        r0.<androidx.camera.camera2.interop.Camera2CameraControl: boolean mIsActive> = z0;

        $z2 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: boolean mIsActive>;

        if $z2 == 0 goto label2;

        $z4 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: boolean mPendingUpdate>;

        if $z4 == 0 goto label3;

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void updateSession()>();

        goto label3;

     label2:
        $r1 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        if $r1 == null goto label3;

        $r3 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        $r2 = new androidx.camera.core.CameraControl$OperationCanceledException;

        specialinvoke $r2.<androidx.camera.core.CameraControl$OperationCanceledException: void <init>(java.lang.String)>("The camera control has became inactive.");

        virtualinvoke $r3.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean setException(java.lang.Throwable)>($r2);

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter> = null;

     label3:
        return;
    }

    private void lambda$setActive$7(boolean)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        boolean z0;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void setActiveInternal(boolean)>(z0);

        return;
    }

    private java.lang.Object lambda$clearCaptureRequestOptions$6(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.util.concurrent.Executor mExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.interop.Camera2CameraControl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.interop.Camera2CameraControl: void lambda$clearCaptureRequestOptions$5(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return "clearCaptureRequestOptions";
    }

    private void lambda$clearCaptureRequestOptions$5(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void updateConfig(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r1);

        return;
    }

    private java.lang.Object lambda$addCaptureRequestOptions$4(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.util.concurrent.Executor mExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.interop.Camera2CameraControl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.interop.Camera2CameraControl: void lambda$addCaptureRequestOptions$3(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return "addCaptureRequestOptions";
    }

    private void lambda$addCaptureRequestOptions$3(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void updateConfig(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r1);

        return;
    }

    private java.lang.Object lambda$setCaptureRequestOptions$2(androidx.concurrent.futures.CallbackToFutureAdapter$Completer) throws java.lang.Exception
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;
        java.util.concurrent.Executor $r2;
        java.lang.Runnable $r3;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        $r2 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: java.util.concurrent.Executor mExecutor>;

        $r3 = dynamicinvoke "run" <java.lang.Runnable (androidx.camera.camera2.interop.Camera2CameraControl,androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r0, r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: void __METHODTYPE__(), methodhandle: "REF_INVOKE_SPECIAL" <androidx.camera.camera2.interop.Camera2CameraControl: void lambda$setCaptureRequestOptions$1(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>, methodtype: void __METHODTYPE__());

        interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return "setCaptureRequestOptions";
    }

    private void lambda$setCaptureRequestOptions$1(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer r1;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: androidx.concurrent.futures.CallbackToFutureAdapter$Completer;

        specialinvoke r0.<androidx.camera.camera2.interop.Camera2CameraControl: void updateConfig(androidx.concurrent.futures.CallbackToFutureAdapter$Completer)>(r1);

        return;
    }

    private boolean lambda$new$0(android.hardware.camera2.TotalCaptureResult)
    {
        androidx.camera.camera2.interop.Camera2CameraControl r0;
        android.hardware.camera2.TotalCaptureResult r1;
        java.lang.Object r2, $r7;
        androidx.camera.core.impl.TagBundle r3;
        java.lang.Integer r4, $r9;
        androidx.concurrent.futures.CallbackToFutureAdapter$Completer $r5, $r8, r10;
        android.hardware.camera2.CaptureRequest $r6;
        boolean $z1, $z2;
        int $i0;

        r0 := @this: androidx.camera.camera2.interop.Camera2CameraControl;

        r1 := @parameter0: android.hardware.camera2.TotalCaptureResult;

        r10 = null;

        $r5 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        if $r5 == null goto label1;

        $r6 = virtualinvoke r1.<android.hardware.camera2.TotalCaptureResult: android.hardware.camera2.CaptureRequest getRequest()>();

        r2 = virtualinvoke $r6.<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()>();

        $z1 = r2 instanceof androidx.camera.core.impl.TagBundle;

        if $z1 == 0 goto label1;

        r3 = (androidx.camera.core.impl.TagBundle) r2;

        $r7 = virtualinvoke r3.<androidx.camera.core.impl.TagBundle: java.lang.Object getTag(java.lang.String)>("Camera2CameraControl");

        r4 = (java.lang.Integer) $r7;

        if r4 == null goto label1;

        $r8 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        $i0 = virtualinvoke $r8.<java.lang.Object: int hashCode()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z2 = virtualinvoke r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label1;

        r10 = r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter>;

        r0.<androidx.camera.camera2.interop.Camera2CameraControl: androidx.concurrent.futures.CallbackToFutureAdapter$Completer mCompleter> = null;

     label1:
        if r10 == null goto label2;

        virtualinvoke r10.<androidx.concurrent.futures.CallbackToFutureAdapter$Completer: boolean set(java.lang.Object)>(null);

     label2:
        return 0;
    }

