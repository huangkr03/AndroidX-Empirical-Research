androidx.arch.core.executor.testing.InstantTaskExecutorRule
    public void <init>()
    {
        androidx.arch.core.executor.testing.InstantTaskExecutorRule r0;

        r0 := @this: androidx.arch.core.executor.testing.InstantTaskExecutorRule;

        specialinvoke r0.<org.junit.rules.TestWatcher: void <init>()>();

        return;
    }

    protected void starting(org.junit.runner.Description)
    {
        androidx.arch.core.executor.testing.InstantTaskExecutorRule r0;
        org.junit.runner.Description r1;
        androidx.arch.core.executor.ArchTaskExecutor $r2;
        androidx.arch.core.executor.testing.InstantTaskExecutorRule$1 $r3;

        r0 := @this: androidx.arch.core.executor.testing.InstantTaskExecutorRule;

        r1 := @parameter0: org.junit.runner.Description;

        specialinvoke r0.<org.junit.rules.TestWatcher: void starting(org.junit.runner.Description)>(r1);

        $r2 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        $r3 = new androidx.arch.core.executor.testing.InstantTaskExecutorRule$1;

        specialinvoke $r3.<androidx.arch.core.executor.testing.InstantTaskExecutorRule$1: void <init>(androidx.arch.core.executor.testing.InstantTaskExecutorRule)>(r0);

        virtualinvoke $r2.<androidx.arch.core.executor.ArchTaskExecutor: void setDelegate(androidx.arch.core.executor.TaskExecutor)>($r3);

        return;
    }

    protected void finished(org.junit.runner.Description)
    {
        androidx.arch.core.executor.testing.InstantTaskExecutorRule r0;
        org.junit.runner.Description r1;
        androidx.arch.core.executor.ArchTaskExecutor $r2;

        r0 := @this: androidx.arch.core.executor.testing.InstantTaskExecutorRule;

        r1 := @parameter0: org.junit.runner.Description;

        specialinvoke r0.<org.junit.rules.TestWatcher: void finished(org.junit.runner.Description)>(r1);

        $r2 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>();

        virtualinvoke $r2.<androidx.arch.core.executor.ArchTaskExecutor: void setDelegate(androidx.arch.core.executor.TaskExecutor)>(null);

        return;
    }

androidx.arch.core.executor.testing.InstantTaskExecutorRule$1
<androidx.arch.core.executor.testing.InstantTaskExecutorRule$1: androidx.arch.core.executor.testing.InstantTaskExecutorRule this$0>
    void <init>(androidx.arch.core.executor.testing.InstantTaskExecutorRule)
    {
        androidx.arch.core.executor.testing.InstantTaskExecutorRule$1 r0;
        androidx.arch.core.executor.testing.InstantTaskExecutorRule r1;

        r0 := @this: androidx.arch.core.executor.testing.InstantTaskExecutorRule$1;

        r1 := @parameter0: androidx.arch.core.executor.testing.InstantTaskExecutorRule;

        r0.<androidx.arch.core.executor.testing.InstantTaskExecutorRule$1: androidx.arch.core.executor.testing.InstantTaskExecutorRule this$0> = r1;

        specialinvoke r0.<androidx.arch.core.executor.TaskExecutor: void <init>()>();

        return;
    }

    public void executeOnDiskIO(java.lang.Runnable)
    {
        androidx.arch.core.executor.testing.InstantTaskExecutorRule$1 r0;
        java.lang.Runnable r1;

        r0 := @this: androidx.arch.core.executor.testing.InstantTaskExecutorRule$1;

        r1 := @parameter0: java.lang.Runnable;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        return;
    }

    public void postToMainThread(java.lang.Runnable)
    {
        androidx.arch.core.executor.testing.InstantTaskExecutorRule$1 r0;
        java.lang.Runnable r1;

        r0 := @this: androidx.arch.core.executor.testing.InstantTaskExecutorRule$1;

        r1 := @parameter0: java.lang.Runnable;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        return;
    }

    public boolean isMainThread()
    {
        androidx.arch.core.executor.testing.InstantTaskExecutorRule$1 r0;

        r0 := @this: androidx.arch.core.executor.testing.InstantTaskExecutorRule$1;

        return 1;
    }

