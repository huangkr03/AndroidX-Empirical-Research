androidx.compose.animation.core.FloatExponentialDecaySpec
<androidx.compose.animation.core.FloatExponentialDecaySpec: float absVelocityThreshold>
<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>
<androidx.compose.animation.core.FloatExponentialDecaySpec: int $stable>
    public void <init>(float, float)
    {
        androidx.compose.animation.core.FloatExponentialDecaySpec r0;
        float f0, f1, $f2, $f3, $f4, $f5;

        r0 := @this: androidx.compose.animation.core.FloatExponentialDecaySpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $f2 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        $f3 = staticinvoke <java.lang.Math: float max(float,float)>(1.0E-7F, $f2);

        r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float absVelocityThreshold> = $f3;

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>(1.0E-4F, f0);

        $f5 = -4.2F * $f4;

        r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction> = $f5;

        return;
    }

    public void <init>(float, float, int, kotlin.jvm.internal.DefaultConstructorMarker)
    {
        androidx.compose.animation.core.FloatExponentialDecaySpec r0;
        int i0, $i1, $i2;
        kotlin.jvm.internal.DefaultConstructorMarker r1;
        float f0, f1;

        r0 := @this: androidx.compose.animation.core.FloatExponentialDecaySpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 := @parameter2: int;

        r1 := @parameter3: kotlin.jvm.internal.DefaultConstructorMarker;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        f0 = 1.0F;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        f1 = 0.1F;

     label2:
        specialinvoke r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: void <init>(float,float)>(f0, f1);

        return;
    }

    public float getAbsVelocityThreshold()
    {
        androidx.compose.animation.core.FloatExponentialDecaySpec r0;
        float $f0;

        r0 := @this: androidx.compose.animation.core.FloatExponentialDecaySpec;

        $f0 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float absVelocityThreshold>;

        return $f0;
    }

    public float getValueFromNanos(long, float, float)
    {
        androidx.compose.animation.core.FloatExponentialDecaySpec r0;
        long l0, l1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        double $d0, $d1;

        r0 := @this: androidx.compose.animation.core.FloatExponentialDecaySpec;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l1 = l0 / 1000000L;

        $f2 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>;

        $f3 = f1 / $f2;

        $f9 = f0 - $f3;

        $f4 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>;

        $f10 = f1 / $f4;

        $f6 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>;

        $f5 = (float) l1;

        $f7 = $f6 * $f5;

        $f8 = $f7 / 1000.0F;

        $d0 = (double) $f8;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $f11 = (float) $d1;

        $f12 = $f10 * $f11;

        $f13 = $f9 + $f12;

        return $f13;
    }

    public float getVelocityFromNanos(long, float, float)
    {
        androidx.compose.animation.core.FloatExponentialDecaySpec r0;
        long l0, l1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        double $d0, $d1;

        r0 := @this: androidx.compose.animation.core.FloatExponentialDecaySpec;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l1 = l0 / 1000000L;

        $f2 = (float) l1;

        $f4 = $f2 / 1000.0F;

        $f3 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>;

        $f5 = $f4 * $f3;

        $d0 = (double) $f5;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $f6 = (float) $d1;

        $f7 = f1 * $f6;

        return $f7;
    }

    public long getDurationNanos(float, float)
    {
        androidx.compose.animation.core.FloatExponentialDecaySpec r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        double $d0, $d1;
        long $l0, $l1;

        r0 := @this: androidx.compose.animation.core.FloatExponentialDecaySpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = virtualinvoke r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float getAbsVelocityThreshold()>();

        $f3 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        $f4 = $f2 / $f3;

        $d0 = (double) $f4;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $f5 = (float) $d1;

        $f7 = 1000.0F * $f5;

        $f6 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>;

        $f8 = $f7 / $f6;

        $l0 = (long) $f8;

        $l1 = $l0 * 1000000L;

        return $l1;
    }

    public float getTargetValue(float, float)
    {
        androidx.compose.animation.core.FloatExponentialDecaySpec r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        byte $b0;

        r0 := @this: androidx.compose.animation.core.FloatExponentialDecaySpec;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>(f1);

        $f3 = virtualinvoke r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float getAbsVelocityThreshold()>();

        $b0 = $f2 cmpg $f3;

        if $b0 > 0 goto label1;

        return f0;

     label1:
        $f4 = virtualinvoke r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float getAbsVelocityThreshold()>();

        $f5 = $f4 / f1;

        $f6 = staticinvoke <java.lang.Math: float abs(float)>($f5);

        $d1 = (double) $f6;

        $d2 = staticinvoke <java.lang.Math: double log(double)>($d1);

        $f7 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>;

        $d3 = (double) $f7;

        $d5 = $d2 / $d3;

        $d4 = (double) 1000;

        d0 = $d5 * $d4;

        $f8 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>;

        $f9 = f1 / $f8;

        $f12 = f0 - $f9;

        $f10 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>;

        $f13 = f1 / $f10;

        $f11 = r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: float friction>;

        $d6 = (double) $f11;

        $d8 = $d6 * d0;

        $d7 = (double) 1000.0F;

        $d9 = $d8 / $d7;

        $d10 = staticinvoke <java.lang.Math: double exp(double)>($d9);

        $f14 = (float) $d10;

        $f15 = $f13 * $f14;

        $f16 = $f12 + $f15;

        return $f16;
    }

    public void <init>()
    {
        androidx.compose.animation.core.FloatExponentialDecaySpec r0;

        r0 := @this: androidx.compose.animation.core.FloatExponentialDecaySpec;

        specialinvoke r0.<androidx.compose.animation.core.FloatExponentialDecaySpec: void <init>(float,float,int,kotlin.jvm.internal.DefaultConstructorMarker)>(0.0F, 0.0F, 3, null);

        return;
    }

    static void <clinit>()
    {
        return;
    }

