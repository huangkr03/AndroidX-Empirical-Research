androidx.webkit.internal.ServiceWorkerWebSettingsImpl
<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings mFrameworksImpl>
<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface mBoundaryInterface>
    public void <init>(android.webkit.ServiceWorkerWebSettings)
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        android.webkit.ServiceWorkerWebSettings r1;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        r1 := @parameter0: android.webkit.ServiceWorkerWebSettings;

        specialinvoke r0.<androidx.webkit.ServiceWorkerWebSettingsCompat: void <init>()>();

        r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings mFrameworksImpl> = r1;

        return;
    }

    public void <init>(java.lang.reflect.InvocationHandler)
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        java.lang.reflect.InvocationHandler r1;
        java.lang.Object $r2;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r3;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        r1 := @parameter0: java.lang.reflect.InvocationHandler;

        specialinvoke r0.<androidx.webkit.ServiceWorkerWebSettingsCompat: void <init>()>();

        $r2 = staticinvoke <org.chromium.support_lib_boundary.util.BoundaryInterfaceReflectionUtil: java.lang.Object castToSuppLibClass(java.lang.Class,java.lang.reflect.InvocationHandler)>(class "Lorg/chromium/support_lib_boundary/ServiceWorkerWebSettingsBoundaryInterface;", r1);

        $r3 = (org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface) $r2;

        r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface mBoundaryInterface> = $r3;

        return;
    }

    private android.webkit.ServiceWorkerWebSettings getFrameworksImpl()
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        android.webkit.ServiceWorkerWebSettings $r1, $r2, $r6;
        androidx.webkit.internal.WebkitToCompatConverter $r3;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r4;
        java.lang.reflect.InvocationHandler $r5;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        $r1 = r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings mFrameworksImpl>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <androidx.webkit.internal.WebViewGlueCommunicator: androidx.webkit.internal.WebkitToCompatConverter getCompatConverter()>();

        $r4 = r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface mBoundaryInterface>;

        $r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r3.<androidx.webkit.internal.WebkitToCompatConverter: android.webkit.ServiceWorkerWebSettings convertServiceWorkerSettings(java.lang.reflect.InvocationHandler)>($r5);

        r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings mFrameworksImpl> = $r6;

     label1:
        $r2 = r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings mFrameworksImpl>;

        return $r2;
    }

    private org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface getBoundaryInterface()
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r1, $r2, $r7;
        androidx.webkit.internal.WebkitToCompatConverter $r3;
        android.webkit.ServiceWorkerWebSettings $r4;
        java.lang.reflect.InvocationHandler $r5;
        java.lang.Object $r6;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        $r1 = r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface mBoundaryInterface>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <androidx.webkit.internal.WebViewGlueCommunicator: androidx.webkit.internal.WebkitToCompatConverter getCompatConverter()>();

        $r4 = r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings mFrameworksImpl>;

        $r5 = virtualinvoke $r3.<androidx.webkit.internal.WebkitToCompatConverter: java.lang.reflect.InvocationHandler convertServiceWorkerSettings(android.webkit.ServiceWorkerWebSettings)>($r4);

        $r6 = staticinvoke <org.chromium.support_lib_boundary.util.BoundaryInterfaceReflectionUtil: java.lang.Object castToSuppLibClass(java.lang.Class,java.lang.reflect.InvocationHandler)>(class "Lorg/chromium/support_lib_boundary/ServiceWorkerWebSettingsBoundaryInterface;", $r5);

        $r7 = (org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface) $r6;

        r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface mBoundaryInterface> = $r7;

     label1:
        $r2 = r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface mBoundaryInterface>;

        return $r2;
    }

    public void setCacheMode(int)
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        int i0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r3;
        android.webkit.ServiceWorkerWebSettings $r4;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        i0 := @parameter0: int;

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_CACHE_MODE>;

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings getFrameworksImpl()>();

        virtualinvoke $r4.<android.webkit.ServiceWorkerWebSettings: void setCacheMode(int)>(i0);

        goto label3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface getBoundaryInterface()>();

        interfaceinvoke $r3.<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setCacheMode(int)>(i0);

        goto label3;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;

     label3:
        return;
    }

    public int getCacheMode()
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r3;
        int $i0, $i1;
        android.webkit.ServiceWorkerWebSettings $r4;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_CACHE_MODE>;

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings getFrameworksImpl()>();

        $i1 = virtualinvoke $r4.<android.webkit.ServiceWorkerWebSettings: int getCacheMode()>();

        return $i1;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface getBoundaryInterface()>();

        $i0 = interfaceinvoke $r3.<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: int getCacheMode()>();

        return $i0;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;
    }

    public void setAllowContentAccess(boolean)
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        boolean z0, $z1, $z2;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        java.lang.UnsupportedOperationException $r2;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r3;
        android.webkit.ServiceWorkerWebSettings $r4;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        z0 := @parameter0: boolean;

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_CONTENT_ACCESS>;

        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z1 == 0 goto label1;

        $r4 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings getFrameworksImpl()>();

        virtualinvoke $r4.<android.webkit.ServiceWorkerWebSettings: void setAllowContentAccess(boolean)>(z0);

        goto label3;

     label1:
        $z2 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z2 == 0 goto label2;

        $r3 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface getBoundaryInterface()>();

        interfaceinvoke $r3.<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setAllowContentAccess(boolean)>(z0);

        goto label3;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;

     label3:
        return;
    }

    public boolean getAllowContentAccess()
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r2;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r3;
        android.webkit.ServiceWorkerWebSettings $r4;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_CONTENT_ACCESS>;

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings getFrameworksImpl()>();

        $z3 = virtualinvoke $r4.<android.webkit.ServiceWorkerWebSettings: boolean getAllowContentAccess()>();

        return $z3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface getBoundaryInterface()>();

        $z2 = interfaceinvoke $r3.<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: boolean getAllowContentAccess()>();

        return $z2;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;
    }

    public void setAllowFileAccess(boolean)
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        boolean z0, $z1, $z2;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        java.lang.UnsupportedOperationException $r2;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r3;
        android.webkit.ServiceWorkerWebSettings $r4;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        z0 := @parameter0: boolean;

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_FILE_ACCESS>;

        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z1 == 0 goto label1;

        $r4 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings getFrameworksImpl()>();

        virtualinvoke $r4.<android.webkit.ServiceWorkerWebSettings: void setAllowFileAccess(boolean)>(z0);

        goto label3;

     label1:
        $z2 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z2 == 0 goto label2;

        $r3 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface getBoundaryInterface()>();

        interfaceinvoke $r3.<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setAllowFileAccess(boolean)>(z0);

        goto label3;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;

     label3:
        return;
    }

    public boolean getAllowFileAccess()
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r2;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r3;
        android.webkit.ServiceWorkerWebSettings $r4;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_FILE_ACCESS>;

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings getFrameworksImpl()>();

        $z3 = virtualinvoke $r4.<android.webkit.ServiceWorkerWebSettings: boolean getAllowFileAccess()>();

        return $z3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface getBoundaryInterface()>();

        $z2 = interfaceinvoke $r3.<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: boolean getAllowFileAccess()>();

        return $z2;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;
    }

    public void setBlockNetworkLoads(boolean)
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        boolean z0, $z1, $z2;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        java.lang.UnsupportedOperationException $r2;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r3;
        android.webkit.ServiceWorkerWebSettings $r4;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        z0 := @parameter0: boolean;

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_BLOCK_NETWORK_LOADS>;

        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z1 == 0 goto label1;

        $r4 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings getFrameworksImpl()>();

        virtualinvoke $r4.<android.webkit.ServiceWorkerWebSettings: void setBlockNetworkLoads(boolean)>(z0);

        goto label3;

     label1:
        $z2 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z2 == 0 goto label2;

        $r3 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface getBoundaryInterface()>();

        interfaceinvoke $r3.<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setBlockNetworkLoads(boolean)>(z0);

        goto label3;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;

     label3:
        return;
    }

    public boolean getBlockNetworkLoads()
    {
        androidx.webkit.internal.ServiceWorkerWebSettingsImpl r0;
        androidx.webkit.internal.WebViewFeatureInternal r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r2;
        org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface $r3;
        android.webkit.ServiceWorkerWebSettings $r4;

        r0 := @this: androidx.webkit.internal.ServiceWorkerWebSettingsImpl;

        r1 = <androidx.webkit.internal.WebViewFeatureInternal: androidx.webkit.internal.WebViewFeatureInternal SERVICE_WORKER_BLOCK_NETWORK_LOADS>;

        $z0 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByFramework()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: android.webkit.ServiceWorkerWebSettings getFrameworksImpl()>();

        $z3 = virtualinvoke $r4.<android.webkit.ServiceWorkerWebSettings: boolean getBlockNetworkLoads()>();

        return $z3;

     label1:
        $z1 = virtualinvoke r1.<androidx.webkit.internal.WebViewFeatureInternal: boolean isSupportedByWebView()>();

        if $z1 == 0 goto label2;

        $r3 = specialinvoke r0.<androidx.webkit.internal.ServiceWorkerWebSettingsImpl: org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface getBoundaryInterface()>();

        $z2 = interfaceinvoke $r3.<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: boolean getBlockNetworkLoads()>();

        return $z2;

     label2:
        $r2 = staticinvoke <androidx.webkit.internal.WebViewFeatureInternal: java.lang.UnsupportedOperationException getUnsupportedOperationException()>();

        throw $r2;
    }

