kotlin.coroutines.AbstractCoroutineContextElement
<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key key>
    public void <init>(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.AbstractCoroutineContextElement $r0;
        kotlin.coroutines.CoroutineContext$Key $r1;

        $r0 := @this: kotlin.coroutines.AbstractCoroutineContextElement;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key");

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key key> = $r1;

        return;
    }

    public java.lang.Object fold(java.lang.Object, kotlin.jvm.functions.Function2)
    {
        kotlin.coroutines.AbstractCoroutineContextElement $r0;
        kotlin.jvm.functions.Function2 $r1;
        java.lang.Object $r2;

        $r0 := @this: kotlin.coroutines.AbstractCoroutineContextElement;

        $r2 := @parameter0: java.lang.Object;

        $r1 := @parameter1: kotlin.jvm.functions.Function2;

        $r2 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)>($r0, $r2, $r1);

        return $r2;
    }

    public kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.AbstractCoroutineContextElement $r0;
        kotlin.coroutines.CoroutineContext$Element $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        $r0 := @this: kotlin.coroutines.AbstractCoroutineContextElement;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>($r0, $r2);

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext$Key getKey()
    {
        kotlin.coroutines.AbstractCoroutineContextElement $r0;
        kotlin.coroutines.CoroutineContext$Key r1;

        $r0 := @this: kotlin.coroutines.AbstractCoroutineContextElement;

        r1 = $r0.<kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key key>;

        return r1;
    }

    public kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
    {
        kotlin.coroutines.AbstractCoroutineContextElement $r0;
        kotlin.coroutines.CoroutineContext $r1;
        kotlin.coroutines.CoroutineContext$Key $r2;

        $r0 := @this: kotlin.coroutines.AbstractCoroutineContextElement;

        $r2 := @parameter0: kotlin.coroutines.CoroutineContext$Key;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)>($r0, $r2);

        return $r1;
    }

    public kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
    {
        kotlin.coroutines.AbstractCoroutineContextElement $r0;
        kotlin.coroutines.CoroutineContext $r1;

        $r0 := @this: kotlin.coroutines.AbstractCoroutineContextElement;

        $r1 := @parameter0: kotlin.coroutines.CoroutineContext;

        $r1 = staticinvoke <kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)>($r0, $r1);

        return $r1;
    }

