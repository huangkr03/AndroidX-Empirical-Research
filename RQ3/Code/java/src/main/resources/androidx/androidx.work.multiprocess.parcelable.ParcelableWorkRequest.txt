androidx.work.multiprocess.parcelable.ParcelableWorkRequest
<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: androidx.work.WorkRequest mWorkRequest>
<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: android.os.Parcelable$Creator CREATOR>
    public void <init>(androidx.work.WorkRequest)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest r0;
        androidx.work.WorkRequest r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkRequest;

        r1 := @parameter0: androidx.work.WorkRequest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: androidx.work.WorkRequest mWorkRequest> = r1;

        return;
    }

    protected void <init>(android.os.Parcel)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest r0;
        android.os.Parcel r1;
        java.lang.String r2, r4, $r12;
        java.util.HashSet r3, $r9;
        androidx.work.impl.model.WorkSpec r5, $r11;
        androidx.work.multiprocess.parcelable.ParcelableData r6, r7, $r14, $r16;
        androidx.work.multiprocess.parcelable.ParcelableConstraints r8;
        java.util.ArrayList $r10;
        int $i0, $i4, $i5, $i9;
        androidx.work.WorkInfo$State $r13;
        androidx.work.Data $r15, $r17;
        long $l1, $l2, $l3, $l6, $l7, $l8;
        java.lang.Class $r18;
        java.lang.ClassLoader $r19;
        android.os.Parcelable $r20;
        androidx.work.Constraints $r21;
        androidx.work.BackoffPolicy $r22;
        boolean $z0;
        androidx.work.OutOfQuotaPolicy $r23;
        androidx.work.impl.WorkRequestHolder $r24;
        java.util.UUID $r25;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkRequest;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r9 = new java.util.HashSet;

        $r10 = virtualinvoke r1.<android.os.Parcel: java.util.ArrayList createStringArrayList()>();

        specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>($r10);

        r3 = $r9;

        r4 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r11 = new androidx.work.impl.model.WorkSpec;

        specialinvoke $r11.<androidx.work.impl.model.WorkSpec: void <init>(java.lang.String,java.lang.String)>(r2, r4);

        r5 = $r11;

        $r12 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r5.<androidx.work.impl.model.WorkSpec: java.lang.String inputMergerClassName> = $r12;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r13 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.WorkInfo$State intToState(int)>($i0);

        r5.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state> = $r13;

        $r14 = new androidx.work.multiprocess.parcelable.ParcelableData;

        specialinvoke $r14.<androidx.work.multiprocess.parcelable.ParcelableData: void <init>(android.os.Parcel)>(r1);

        r6 = $r14;

        $r15 = virtualinvoke r6.<androidx.work.multiprocess.parcelable.ParcelableData: androidx.work.Data getData()>();

        r5.<androidx.work.impl.model.WorkSpec: androidx.work.Data input> = $r15;

        $r16 = new androidx.work.multiprocess.parcelable.ParcelableData;

        specialinvoke $r16.<androidx.work.multiprocess.parcelable.ParcelableData: void <init>(android.os.Parcel)>(r1);

        r7 = $r16;

        $r17 = virtualinvoke r7.<androidx.work.multiprocess.parcelable.ParcelableData: androidx.work.Data getData()>();

        r5.<androidx.work.impl.model.WorkSpec: androidx.work.Data output> = $r17;

        $l1 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r5.<androidx.work.impl.model.WorkSpec: long initialDelay> = $l1;

        $l2 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r5.<androidx.work.impl.model.WorkSpec: long intervalDuration> = $l2;

        $l3 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r5.<androidx.work.impl.model.WorkSpec: long flexDuration> = $l3;

        $i4 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r5.<androidx.work.impl.model.WorkSpec: int runAttemptCount> = $i4;

        $r18 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r20 = virtualinvoke r1.<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>($r19);

        r8 = (androidx.work.multiprocess.parcelable.ParcelableConstraints) $r20;

        $r21 = virtualinvoke r8.<androidx.work.multiprocess.parcelable.ParcelableConstraints: androidx.work.Constraints getConstraints()>();

        r5.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints> = $r21;

        $i5 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r22 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.BackoffPolicy intToBackoffPolicy(int)>($i5);

        r5.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy> = $r22;

        $l6 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r5.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration> = $l6;

        $l7 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r5.<androidx.work.impl.model.WorkSpec: long minimumRetentionDuration> = $l7;

        $l8 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r5.<androidx.work.impl.model.WorkSpec: long scheduleRequestedAt> = $l8;

        $z0 = staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: boolean readBooleanValue(android.os.Parcel)>(r1);

        r5.<androidx.work.impl.model.WorkSpec: boolean expedited> = $z0;

        $i9 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r23 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: androidx.work.OutOfQuotaPolicy intToOutOfQuotaPolicy(int)>($i9);

        r5.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy> = $r23;

        $r24 = new androidx.work.impl.WorkRequestHolder;

        $r25 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>(r2);

        specialinvoke $r24.<androidx.work.impl.WorkRequestHolder: void <init>(java.util.UUID,androidx.work.impl.model.WorkSpec,java.util.Set)>($r25, r5, r3);

        r0.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: androidx.work.WorkRequest mWorkRequest> = $r24;

        return;
    }

    public int describeContents()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest r0;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkRequest;

        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest r0;
        android.os.Parcel r1;
        int i0, $i1, $i5, $i6, $i10;
        java.util.ArrayList r2, $r8;
        androidx.work.impl.model.WorkSpec r3;
        androidx.work.multiprocess.parcelable.ParcelableData r4, r5, $r15, $r17;
        androidx.work.WorkRequest $r6, $r9, $r11;
        java.lang.String $r7, $r12, $r13;
        java.util.Set $r10;
        androidx.work.WorkInfo$State $r14;
        androidx.work.Data $r16, $r18;
        long $l2, $l3, $l4, $l7, $l8, $l9;
        androidx.work.multiprocess.parcelable.ParcelableConstraints $r19;
        androidx.work.Constraints $r20;
        androidx.work.BackoffPolicy $r21;
        boolean $z0;
        androidx.work.OutOfQuotaPolicy $r22;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkRequest;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r6 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: androidx.work.WorkRequest mWorkRequest>;

        $r7 = virtualinvoke $r6.<androidx.work.WorkRequest: java.lang.String getStringId()>();

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r7);

        $r8 = new java.util.ArrayList;

        $r9 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: androidx.work.WorkRequest mWorkRequest>;

        $r10 = virtualinvoke $r9.<androidx.work.WorkRequest: java.util.Set getTags()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        r2 = $r8;

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>(r2);

        $r11 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: androidx.work.WorkRequest mWorkRequest>;

        r3 = virtualinvoke $r11.<androidx.work.WorkRequest: androidx.work.impl.model.WorkSpec getWorkSpec()>();

        $r12 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String workerClassName>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r12);

        $r13 = r3.<androidx.work.impl.model.WorkSpec: java.lang.String inputMergerClassName>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r13);

        $r14 = r3.<androidx.work.impl.model.WorkSpec: androidx.work.WorkInfo$State state>;

        $i1 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: int stateToInt(androidx.work.WorkInfo$State)>($r14);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r15 = new androidx.work.multiprocess.parcelable.ParcelableData;

        $r16 = r3.<androidx.work.impl.model.WorkSpec: androidx.work.Data input>;

        specialinvoke $r15.<androidx.work.multiprocess.parcelable.ParcelableData: void <init>(androidx.work.Data)>($r16);

        r4 = $r15;

        virtualinvoke r4.<androidx.work.multiprocess.parcelable.ParcelableData: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        $r17 = new androidx.work.multiprocess.parcelable.ParcelableData;

        $r18 = r3.<androidx.work.impl.model.WorkSpec: androidx.work.Data output>;

        specialinvoke $r17.<androidx.work.multiprocess.parcelable.ParcelableData: void <init>(androidx.work.Data)>($r18);

        r5 = $r17;

        virtualinvoke r5.<androidx.work.multiprocess.parcelable.ParcelableData: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        $l2 = r3.<androidx.work.impl.model.WorkSpec: long initialDelay>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l2);

        $l3 = r3.<androidx.work.impl.model.WorkSpec: long intervalDuration>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l3);

        $l4 = r3.<androidx.work.impl.model.WorkSpec: long flexDuration>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l4);

        $i5 = r3.<androidx.work.impl.model.WorkSpec: int runAttemptCount>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        $r19 = new androidx.work.multiprocess.parcelable.ParcelableConstraints;

        $r20 = r3.<androidx.work.impl.model.WorkSpec: androidx.work.Constraints constraints>;

        specialinvoke $r19.<androidx.work.multiprocess.parcelable.ParcelableConstraints: void <init>(androidx.work.Constraints)>($r20);

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r19, i0);

        $r21 = r3.<androidx.work.impl.model.WorkSpec: androidx.work.BackoffPolicy backoffPolicy>;

        $i6 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: int backoffPolicyToInt(androidx.work.BackoffPolicy)>($r21);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i6);

        $l7 = r3.<androidx.work.impl.model.WorkSpec: long backoffDelayDuration>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l7);

        $l8 = r3.<androidx.work.impl.model.WorkSpec: long minimumRetentionDuration>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l8);

        $l9 = r3.<androidx.work.impl.model.WorkSpec: long scheduleRequestedAt>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l9);

        $z0 = r3.<androidx.work.impl.model.WorkSpec: boolean expedited>;

        staticinvoke <androidx.work.multiprocess.parcelable.ParcelUtils: void writeBooleanValue(android.os.Parcel,boolean)>(r1, $z0);

        $r22 = r3.<androidx.work.impl.model.WorkSpec: androidx.work.OutOfQuotaPolicy outOfQuotaPolicy>;

        $i10 = staticinvoke <androidx.work.impl.model.WorkTypeConverters: int outOfQuotaPolicyToInt(androidx.work.OutOfQuotaPolicy)>($r22);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i10);

        return;
    }

    public androidx.work.WorkRequest getWorkRequest()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest r0;
        androidx.work.WorkRequest $r1;

        r0 := @this: androidx.work.multiprocess.parcelable.ParcelableWorkRequest;

        $r1 = r0.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest: androidx.work.WorkRequest mWorkRequest>;

        return $r1;
    }

    static void <clinit>()
    {
        androidx.work.multiprocess.parcelable.ParcelableWorkRequest$1 $r0;

        $r0 = new androidx.work.multiprocess.parcelable.ParcelableWorkRequest$1;

        specialinvoke $r0.<androidx.work.multiprocess.parcelable.ParcelableWorkRequest$1: void <init>()>();

        <androidx.work.multiprocess.parcelable.ParcelableWorkRequest: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

