androidx.test.orchestrator.callback.OrchestratorV1Connection
<androidx.test.orchestrator.callback.OrchestratorV1Connection: java.lang.String ORCHESTRATOR_SERVICE>
    public void <init>(androidx.test.internal.events.client.TestEventClientConnectListener)
    {
        androidx.test.orchestrator.callback.OrchestratorV1Connection r0;
        androidx.test.internal.events.client.TestEventClientConnectListener r1;
        androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0 $r2;

        r0 := @this: androidx.test.orchestrator.callback.OrchestratorV1Connection;

        r1 := @parameter0: androidx.test.internal.events.client.TestEventClientConnectListener;

        $r2 = <androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0: androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0 INSTANCE>;

        specialinvoke r0.<androidx.test.internal.events.client.TestEventServiceConnectionBase: void <init>(java.lang.String,androidx.test.internal.events.client.TestEventServiceConnectionBase$ServiceFromBinder,androidx.test.internal.events.client.TestEventClientConnectListener)>("androidx.test.orchestrator/.OrchestratorService", $r2, r1);

        return;
    }

    public void send(androidx.test.services.events.discovery.TestDiscoveryEvent) throws androidx.test.internal.events.client.TestEventClientException
    {
        androidx.test.orchestrator.callback.OrchestratorV1Connection r0;
        androidx.test.services.events.discovery.TestDiscoveryEvent r1;
        java.lang.String r2, r4, $r18;
        java.lang.Throwable r3, $r12, r22, r23;
        android.os.IInterface $r6, $r9;
        boolean $z0;
        androidx.test.services.events.discovery.TestFoundEvent $r7;
        androidx.test.services.events.TestCaseInfo $r8;
        androidx.test.orchestrator.callback.OrchestratorCallback $r10;
        java.lang.StringBuilder $r15, $r16, $r17, r20;
        androidx.test.internal.events.client.TestEventClientException r19, r21;

        r0 := @this: androidx.test.orchestrator.callback.OrchestratorV1Connection;

        r1 := @parameter0: androidx.test.services.events.discovery.TestDiscoveryEvent;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "event cannot be null");

        $r6 = r0.<androidx.test.orchestrator.callback.OrchestratorV1Connection: android.os.IInterface service>;

        if null != $r6 goto label1;

        r19 = new androidx.test.internal.events.client.TestEventClientException;

        specialinvoke r19.<androidx.test.internal.events.client.TestEventClientException: void <init>(java.lang.String)>("Unable to add test, Orchestrator callback is null");

        r22 = (java.lang.Throwable) r19;

        throw r22;

     label1:
        $z0 = r1 instanceof androidx.test.services.events.discovery.TestFoundEvent;

        if $z0 == 0 goto label5;

        $r7 = (androidx.test.services.events.discovery.TestFoundEvent) r1;

        $r8 = $r7.<androidx.test.services.events.discovery.TestFoundEvent: androidx.test.services.events.TestCaseInfo testCase>;

        r2 = virtualinvoke $r8.<androidx.test.services.events.TestCaseInfo: java.lang.String getClassAndMethodName()>();

     label2:
        $r9 = r0.<androidx.test.orchestrator.callback.OrchestratorV1Connection: android.os.IInterface service>;

        $r10 = (androidx.test.orchestrator.callback.OrchestratorCallback) $r9;

        interfaceinvoke $r10.<androidx.test.orchestrator.callback.OrchestratorCallback: void addTest(java.lang.String)>(r2);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r3 = $r12;

        r21 = new androidx.test.internal.events.client.TestEventClientException;

        r4 = r2;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to add test [");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<androidx.test.internal.events.client.TestEventClientException: void <init>(java.lang.String,java.lang.Throwable)>($r18, r3);

        r23 = (java.lang.Throwable) r21;

        throw r23;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void send(androidx.test.services.events.run.TestRunEvent) throws androidx.test.internal.events.client.TestEventClientException
    {
        androidx.test.orchestrator.callback.OrchestratorV1Connection r0;
        androidx.test.services.events.run.TestRunEvent r1;
        java.lang.Throwable r2, $r10, r21, r22;
        java.lang.String r3, $r17;
        android.os.IInterface $r5, $r6;
        androidx.test.orchestrator.callback.OrchestratorCallback $r7;
        android.os.Bundle $r8;
        java.lang.Class $r12;
        java.lang.StringBuilder $r14, $r15, $r16, r19;
        androidx.test.internal.events.client.TestEventClientException r18, r20;

        r0 := @this: androidx.test.orchestrator.callback.OrchestratorV1Connection;

        r1 := @parameter0: androidx.test.services.events.run.TestRunEvent;

        staticinvoke <androidx.test.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "event cannot be null");

        $r5 = r0.<androidx.test.orchestrator.callback.OrchestratorV1Connection: android.os.IInterface service>;

        if null != $r5 goto label1;

        r18 = new androidx.test.internal.events.client.TestEventClientException;

        specialinvoke r18.<androidx.test.internal.events.client.TestEventClientException: void <init>(java.lang.String)>("Unable to send notification, Orchestrator callback is null");

        r21 = (java.lang.Throwable) r18;

        throw r21;

     label1:
        $r6 = r0.<androidx.test.orchestrator.callback.OrchestratorV1Connection: android.os.IInterface service>;

        $r7 = (androidx.test.orchestrator.callback.OrchestratorCallback) $r6;

        $r8 = staticinvoke <androidx.test.orchestrator.callback.BundleConverter: android.os.Bundle getBundleFromTestRunEvent(androidx.test.services.events.run.TestRunEvent)>(r1);

        interfaceinvoke $r7.<androidx.test.orchestrator.callback.OrchestratorCallback: void sendTestNotification(android.os.Bundle)>($r8);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        r20 = new androidx.test.internal.events.client.TestEventClientException;

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to send test run event [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<androidx.test.internal.events.client.TestEventClientException: void <init>(java.lang.String,java.lang.Throwable)>($r17, r2);

        r22 = (java.lang.Throwable) r20;

        throw r22;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0
<androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0: androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0 INSTANCE>
    public final android.os.IInterface asInterface(android.os.IBinder)
    {
        androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0 r0;
        android.os.IBinder r1;
        androidx.test.orchestrator.callback.OrchestratorCallback $r2;

        r0 := @this: androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0;

        r1 := @parameter0: android.os.IBinder;

        $r2 = staticinvoke <androidx.test.orchestrator.callback.OrchestratorCallback$Stub: androidx.test.orchestrator.callback.OrchestratorCallback asInterface(android.os.IBinder)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0 $r0;

        $r0 = new androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0;

        specialinvoke $r0.<androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0: void <init>()>();

        <androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0: androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0 INSTANCE> = $r0;

        return;
    }

    private void <init>()
    {
        androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0 r0;

        r0 := @this: androidx.test.orchestrator.callback.OrchestratorV1Connection$$ExternalSyntheticLambda0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

