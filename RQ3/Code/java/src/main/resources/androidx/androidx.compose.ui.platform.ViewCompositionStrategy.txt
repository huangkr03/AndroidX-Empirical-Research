androidx.compose.ui.platform.ViewCompositionStrategy
<androidx.compose.ui.platform.ViewCompositionStrategy: androidx.compose.ui.platform.ViewCompositionStrategy$Companion Companion>
<androidx.compose.ui.platform.ViewCompositionStrategy: kotlin.jvm.functions.Function0 installFor(androidx.compose.ui.platform.AbstractComposeView)>
    static void <clinit>()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$Companion $r0;

        $r0 = <androidx.compose.ui.platform.ViewCompositionStrategy$Companion: androidx.compose.ui.platform.ViewCompositionStrategy$Companion $$INSTANCE>;

        <androidx.compose.ui.platform.ViewCompositionStrategy: androidx.compose.ui.platform.ViewCompositionStrategy$Companion Companion> = $r0;

        return;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$Companion
<androidx.compose.ui.platform.ViewCompositionStrategy$Companion: androidx.compose.ui.platform.ViewCompositionStrategy$Companion $$INSTANCE>
    private void <init>()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$Companion r0;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$Companion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final androidx.compose.ui.platform.ViewCompositionStrategy getDefault()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$Companion r0;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool $r1;
        androidx.compose.ui.platform.ViewCompositionStrategy $r2;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$Companion;

        $r1 = <androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool INSTANCE>;

        $r2 = (androidx.compose.ui.platform.ViewCompositionStrategy) $r1;

        return $r2;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$Companion $r0;

        $r0 = new androidx.compose.ui.platform.ViewCompositionStrategy$Companion;

        specialinvoke $r0.<androidx.compose.ui.platform.ViewCompositionStrategy$Companion: void <init>()>();

        <androidx.compose.ui.platform.ViewCompositionStrategy$Companion: androidx.compose.ui.platform.ViewCompositionStrategy$Companion $$INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view>
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1 $listener>
    void <init>(androidx.compose.ui.platform.AbstractComposeView, androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1 r0;
        androidx.compose.ui.platform.AbstractComposeView $r1;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1 $r2;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        $r2 := @parameter1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view> = $r1;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1 $listener> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1 r0;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1 $r1;
        android.view.View$OnAttachStateChangeListener $r2;
        androidx.compose.ui.platform.AbstractComposeView $r3;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1;

        $r3 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        $r1 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1 $listener>;

        $r2 = (android.view.View$OnAttachStateChangeListener) $r1;

        virtualinvoke $r3.<androidx.compose.ui.platform.AbstractComposeView: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r2);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>
    void <init>(androidx.compose.ui.platform.AbstractComposeView)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1 r0;
        androidx.compose.ui.platform.AbstractComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onViewAttachedToWindow(android.view.View)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1 r0;
        android.view.View r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "v");

        return;
    }

    public void onViewDetachedFromWindow(android.view.View)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1 r0;
        android.view.View r1;
        androidx.compose.ui.platform.AbstractComposeView $r2;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "v");

        $r2 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        virtualinvoke $r2.<androidx.compose.ui.platform.AbstractComposeView: void disposeComposition()>();

        return;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow INSTANCE>
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow: int $stable>
    private void <init>()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow r0;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public kotlin.jvm.functions.Function0 installFor(androidx.compose.ui.platform.AbstractComposeView)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow r0;
        androidx.compose.ui.platform.AbstractComposeView r1;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1 r2, $r3;
        android.view.View$OnAttachStateChangeListener $r4;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1 $r5;
        kotlin.jvm.functions.Function0 $r6;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow;

        r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        $r3 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1;

        specialinvoke $r3.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1: void <init>(androidx.compose.ui.platform.AbstractComposeView)>(r1);

        r2 = $r3;

        $r4 = (android.view.View$OnAttachStateChangeListener) r2;

        virtualinvoke r1.<androidx.compose.ui.platform.AbstractComposeView: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r4);

        $r5 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1;

        specialinvoke $r5.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$1: void <init>(androidx.compose.ui.platform.AbstractComposeView,androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow$installFor$listener$1)>(r1, r2);

        $r6 = (kotlin.jvm.functions.Function0) $r5;

        return $r6;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow $r0;

        $r0 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow;

        specialinvoke $r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow: void <init>()>();

        <androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindow INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view>
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1 $listener>
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.customview.poolingcontainer.PoolingContainerListener $poolingContainerListener>
    void <init>(androidx.compose.ui.platform.AbstractComposeView, androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1, androidx.customview.poolingcontainer.PoolingContainerListener)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1 r0;
        androidx.compose.ui.platform.AbstractComposeView $r1;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1 $r2;
        androidx.customview.poolingcontainer.PoolingContainerListener $r3;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        $r2 := @parameter1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1;

        $r3 := @parameter2: androidx.customview.poolingcontainer.PoolingContainerListener;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view> = $r1;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1 $listener> = $r2;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.customview.poolingcontainer.PoolingContainerListener $poolingContainerListener> = $r3;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1 r0;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1 $r1;
        android.view.View$OnAttachStateChangeListener $r2;
        androidx.compose.ui.platform.AbstractComposeView $r3, $r4;
        androidx.customview.poolingcontainer.PoolingContainerListener $r5;
        android.view.View $r6;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1;

        $r3 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        $r1 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1 $listener>;

        $r2 = (android.view.View$OnAttachStateChangeListener) $r1;

        virtualinvoke $r3.<androidx.compose.ui.platform.AbstractComposeView: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r2);

        $r4 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        $r6 = (android.view.View) $r4;

        $r5 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: androidx.customview.poolingcontainer.PoolingContainerListener $poolingContainerListener>;

        staticinvoke <androidx.customview.poolingcontainer.PoolingContainer: void removePoolingContainerListener(android.view.View,androidx.customview.poolingcontainer.PoolingContainerListener)>($r6, $r5);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>
    void <init>(androidx.compose.ui.platform.AbstractComposeView)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1 r0;
        androidx.compose.ui.platform.AbstractComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onViewAttachedToWindow(android.view.View)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1 r0;
        android.view.View r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "v");

        return;
    }

    public void onViewDetachedFromWindow(android.view.View)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1 r0;
        android.view.View r1, $r3;
        androidx.compose.ui.platform.AbstractComposeView $r2, $r4;
        boolean $z0;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "v");

        $r2 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        $r3 = (android.view.View) $r2;

        $z0 = staticinvoke <androidx.customview.poolingcontainer.PoolingContainer: boolean isWithinPoolingContainer(android.view.View)>($r3);

        if $z0 != 0 goto label1;

        $r4 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        virtualinvoke $r4.<androidx.compose.ui.platform.AbstractComposeView: void disposeComposition()>();

     label1:
        return;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1: androidx.compose.ui.platform.AbstractComposeView $view>
    void <init>(androidx.compose.ui.platform.AbstractComposeView)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1 r0;
        androidx.compose.ui.platform.AbstractComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1: androidx.compose.ui.platform.AbstractComposeView $view> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final void onRelease()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1 r0;
        androidx.compose.ui.platform.AbstractComposeView $r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1;

        $r1 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        virtualinvoke $r1.<androidx.compose.ui.platform.AbstractComposeView: void disposeComposition()>();

        return;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool INSTANCE>
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool: int $stable>
    private void <init>()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool r0;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public kotlin.jvm.functions.Function0 installFor(androidx.compose.ui.platform.AbstractComposeView)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool r0;
        androidx.compose.ui.platform.AbstractComposeView r1;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1 r2, $r4;
        androidx.customview.poolingcontainer.PoolingContainerListener r3;
        android.view.View$OnAttachStateChangeListener $r5;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1 $r6;
        android.view.View $r7;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1 $r8;
        kotlin.jvm.functions.Function0 $r9;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool;

        r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        $r4 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1;

        specialinvoke $r4.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1: void <init>(androidx.compose.ui.platform.AbstractComposeView)>(r1);

        r2 = $r4;

        $r5 = (android.view.View$OnAttachStateChangeListener) r2;

        virtualinvoke r1.<androidx.compose.ui.platform.AbstractComposeView: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r5);

        $r6 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1;

        specialinvoke $r6.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$poolingContainerListener$1: void <init>(androidx.compose.ui.platform.AbstractComposeView)>(r1);

        r3 = (androidx.customview.poolingcontainer.PoolingContainerListener) $r6;

        $r7 = (android.view.View) r1;

        staticinvoke <androidx.customview.poolingcontainer.PoolingContainer: void addPoolingContainerListener(android.view.View,androidx.customview.poolingcontainer.PoolingContainerListener)>($r7, r3);

        $r8 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1;

        specialinvoke $r8.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$1: void <init>(androidx.compose.ui.platform.AbstractComposeView,androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool$installFor$listener$1,androidx.customview.poolingcontainer.PoolingContainerListener)>(r1, r2, r3);

        $r9 = (kotlin.jvm.functions.Function0) $r8;

        return $r9;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool $r0;

        $r0 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool;

        specialinvoke $r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool: void <init>()>();

        <androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnDetachedFromWindowOrReleasedFromPool INSTANCE> = $r0;

        return;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed: androidx.lifecycle.Lifecycle lifecycle>
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed: int $stable>
    public void <init>(androidx.lifecycle.Lifecycle)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed r0;
        androidx.lifecycle.Lifecycle r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed;

        r1 := @parameter0: androidx.lifecycle.Lifecycle;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lifecycle");

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed: androidx.lifecycle.Lifecycle lifecycle> = r1;

        return;
    }

    public void <init>(androidx.lifecycle.LifecycleOwner)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed r0;
        androidx.lifecycle.LifecycleOwner r1;
        androidx.lifecycle.Lifecycle $r2;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed;

        r1 := @parameter0: androidx.lifecycle.LifecycleOwner;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "lifecycleOwner");

        $r2 = interfaceinvoke r1.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "lifecycleOwner.lifecycle");

        specialinvoke r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed: void <init>(androidx.lifecycle.Lifecycle)>($r2);

        return;
    }

    public kotlin.jvm.functions.Function0 installFor(androidx.compose.ui.platform.AbstractComposeView)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed r0;
        androidx.compose.ui.platform.AbstractComposeView r1;
        androidx.lifecycle.Lifecycle $r2;
        kotlin.jvm.functions.Function0 $r3;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed;

        r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        $r2 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed: androidx.lifecycle.Lifecycle lifecycle>;

        $r3 = staticinvoke <androidx.compose.ui.platform.ViewCompositionStrategy_androidKt: kotlin.jvm.functions.Function0 access$installForLifecycle(androidx.compose.ui.platform.AbstractComposeView,androidx.lifecycle.Lifecycle)>(r1, $r2);

        return $r3;
    }

    static void <clinit>()
    {
        <androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnLifecycleDestroyed: int $stable> = 8;

        return;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view>
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1 $listener>
    void <init>(androidx.compose.ui.platform.AbstractComposeView, androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1 r0;
        androidx.compose.ui.platform.AbstractComposeView $r1;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1 $r2;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        $r2 := @parameter1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view> = $r1;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1 $listener> = $r2;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1 r0;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1 $r1;
        android.view.View$OnAttachStateChangeListener $r2;
        androidx.compose.ui.platform.AbstractComposeView $r3;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1;

        $r3 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        $r1 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1 $listener>;

        $r2 = (android.view.View$OnAttachStateChangeListener) $r1;

        virtualinvoke $r3.<androidx.compose.ui.platform.AbstractComposeView: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r2);

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2: kotlin.jvm.internal.Ref$ObjectRef $disposer>
    void <init>(kotlin.jvm.internal.Ref$ObjectRef)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2 r0;
        kotlin.jvm.internal.Ref$ObjectRef $r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2;

        $r1 := @parameter0: kotlin.jvm.internal.Ref$ObjectRef;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2: kotlin.jvm.internal.Ref$ObjectRef $disposer> = $r1;

        specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0);

        return;
    }

    public final void invoke()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2 r0;
        kotlin.jvm.internal.Ref$ObjectRef $r1;
        java.lang.Object $r2;
        kotlin.jvm.functions.Function0 $r3;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2;

        $r1 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2: kotlin.jvm.internal.Ref$ObjectRef $disposer>;

        $r2 = $r1.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element>;

        $r3 = (kotlin.jvm.functions.Function0) $r2;

        interfaceinvoke $r3.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>();

        return;
    }

    public volatile java.lang.Object invoke()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2 r0;
        kotlin.Unit $r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2;

        virtualinvoke r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2: void invoke()>();

        $r1 = <kotlin.Unit: kotlin.Unit INSTANCE>;

        return $r1;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: kotlin.jvm.internal.Ref$ObjectRef $disposer>
    void <init>(androidx.compose.ui.platform.AbstractComposeView, kotlin.jvm.internal.Ref$ObjectRef)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1 r0;
        androidx.compose.ui.platform.AbstractComposeView $r1;
        kotlin.jvm.internal.Ref$ObjectRef $r2;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1;

        $r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        $r2 := @parameter1: kotlin.jvm.internal.Ref$ObjectRef;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view> = $r1;

        r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: kotlin.jvm.internal.Ref$ObjectRef $disposer> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onViewAttachedToWindow(android.view.View)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1 r0;
        android.view.View r1, $r6;
        androidx.lifecycle.LifecycleOwner r2, r3;
        androidx.compose.ui.platform.AbstractComposeView r4, $r5, $r8, $r12;
        kotlin.jvm.internal.Ref$ObjectRef $r7;
        androidx.lifecycle.Lifecycle $r9;
        kotlin.jvm.functions.Function0 $r10;
        android.view.View$OnAttachStateChangeListener $r11;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;
        java.lang.IllegalStateException $r17;
        java.lang.String $r18, $r19;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "v");

        $r5 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        $r6 = (android.view.View) $r5;

        r3 = staticinvoke <androidx.lifecycle.ViewTreeLifecycleOwner: androidx.lifecycle.LifecycleOwner get(android.view.View)>($r6);

        r4 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        if r3 != null goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View tree for ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no ViewTreeLifecycleOwner");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>(r3, "checkNotNull(ViewTreeLif\u2026                        }");

        r2 = r3;

        $r7 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: kotlin.jvm.internal.Ref$ObjectRef $disposer>;

        $r8 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        $r9 = interfaceinvoke r2.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "lco.lifecycle");

        $r10 = staticinvoke <androidx.compose.ui.platform.ViewCompositionStrategy_androidKt: kotlin.jvm.functions.Function0 access$installForLifecycle(androidx.compose.ui.platform.AbstractComposeView,androidx.lifecycle.Lifecycle)>($r8, $r9);

        $r7.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r10;

        $r12 = r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: androidx.compose.ui.platform.AbstractComposeView $view>;

        $r11 = (android.view.View$OnAttachStateChangeListener) r0;

        virtualinvoke $r12.<androidx.compose.ui.platform.AbstractComposeView: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r11);

        return;
    }

    public void onViewDetachedFromWindow(android.view.View)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1 r0;
        android.view.View r1;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1;

        r1 := @parameter0: android.view.View;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "v");

        return;
    }

androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed INSTANCE>
<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed: int $stable>
    private void <init>()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed r0;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public kotlin.jvm.functions.Function0 installFor(androidx.compose.ui.platform.AbstractComposeView)
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed r0;
        androidx.compose.ui.platform.AbstractComposeView r1;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1 r2, $r4;
        boolean $z0;
        kotlin.jvm.internal.Ref$ObjectRef $r3, r21;
        android.view.View$OnAttachStateChangeListener $r5;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1 $r6;
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2 $r7;
        kotlin.jvm.functions.Function0 $r8, $r12;
        android.view.View $r9;
        androidx.lifecycle.LifecycleOwner $r10, r20;
        androidx.lifecycle.Lifecycle $r11;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;
        java.lang.IllegalStateException $r17;
        java.lang.String $r18, $r19;

        r0 := @this: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed;

        r1 := @parameter0: androidx.compose.ui.platform.AbstractComposeView;

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>(r1, "view");

        $z0 = virtualinvoke r1.<androidx.compose.ui.platform.AbstractComposeView: boolean isAttachedToWindow()>();

        if $z0 == 0 goto label2;

        $r9 = (android.view.View) r1;

        $r10 = staticinvoke <androidx.lifecycle.ViewTreeLifecycleOwner: androidx.lifecycle.LifecycleOwner get(android.view.View)>($r9);

        if $r10 != null goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View tree for ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no ViewTreeLifecycleOwner");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.IllegalStateException;

        $r18 = virtualinvoke $r19.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label1:
        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "checkNotNull(ViewTreeLif\u2026eOwner\"\n                }");

        r20 = $r10;

        $r11 = interfaceinvoke r20.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>();

        staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "lco.lifecycle");

        $r12 = staticinvoke <androidx.compose.ui.platform.ViewCompositionStrategy_androidKt: kotlin.jvm.functions.Function0 access$installForLifecycle(androidx.compose.ui.platform.AbstractComposeView,androidx.lifecycle.Lifecycle)>(r1, $r11);

        return $r12;

     label2:
        $r3 = new kotlin.jvm.internal.Ref$ObjectRef;

        specialinvoke $r3.<kotlin.jvm.internal.Ref$ObjectRef: void <init>()>();

        r21 = $r3;

        $r4 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1;

        specialinvoke $r4.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1: void <init>(androidx.compose.ui.platform.AbstractComposeView,kotlin.jvm.internal.Ref$ObjectRef)>(r1, r21);

        r2 = $r4;

        $r5 = (android.view.View$OnAttachStateChangeListener) r2;

        virtualinvoke r1.<androidx.compose.ui.platform.AbstractComposeView: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r5);

        $r6 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1;

        specialinvoke $r6.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$1: void <init>(androidx.compose.ui.platform.AbstractComposeView,androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$listener$1)>(r1, r2);

        r21.<kotlin.jvm.internal.Ref$ObjectRef: java.lang.Object element> = $r6;

        $r7 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2;

        specialinvoke $r7.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed$installFor$2: void <init>(kotlin.jvm.internal.Ref$ObjectRef)>(r21);

        $r8 = (kotlin.jvm.functions.Function0) $r7;

        return $r8;
    }

    static void <clinit>()
    {
        androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed $r0;

        $r0 = new androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed;

        specialinvoke $r0.<androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed: void <init>()>();

        <androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed: androidx.compose.ui.platform.ViewCompositionStrategy$DisposeOnViewTreeLifecycleDestroyed INSTANCE> = $r0;

        return;
    }

